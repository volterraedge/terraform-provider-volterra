//
// Copyright (c) 2019 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package combined

import (
	"gopkg.volterra.us/stdlib/svcfw"
	// all schemas used by service
)

// GetSchemaData populates mdr with details scraped from all the .protos in this service
func GetSchemaData(mdr *svcfw.MDRegistry) {
	var (
		pInfo   *svcfw.PkgInfo
		fInfo   *svcfw.FileInfo
		oInfo   *svcfw.ObjInfo
		aInfo   *svcfw.APIInfo
		rpcInfo *svcfw.RPCInfo
		mInfo   *svcfw.MsgInfo
	)
	_ = pInfo
	_ = fInfo
	_ = oInfo
	_ = aInfo
	_ = rpcInfo
	_ = mInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema", false)
	mdr.PkgsInfo["ves.io.schema"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cert_types.proto")
	pInfo.FilesInfo["ves.io/schema/cert_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/errors.proto")
	pInfo.FilesInfo["ves.io/schema/errors.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/net.proto")
	pInfo.FilesInfo["ves.io/schema/net.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/options.proto")
	pInfo.FilesInfo["ves.io/schema/options.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/pvt_types.proto")
	pInfo.FilesInfo["ves.io/schema/pvt_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/types.proto")
	pInfo.FilesInfo["ves.io/schema/types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/validate.proto")
	pInfo.FilesInfo["ves.io/schema/validate.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/view_options.proto")
	pInfo.FilesInfo["ves.io/schema/view_options.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.address_allocator", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/address_allocator", false)
	mdr.PkgsInfo["ves.io.schema.address_allocator"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/address_allocator/object.proto")
	pInfo.FilesInfo["ves.io/schema/address_allocator/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.address_allocator.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.address_allocator.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/address_allocator/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/address_allocator/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.address_allocator.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.address_allocator.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/address_allocators"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.address_allocator.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/address_allocators/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.address_allocator.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/address_allocators/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.address_allocator.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/address_allocators"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.API.List"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.address_allocator.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.address_allocator.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.address_allocator.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.address_allocator.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.address_allocator.ListRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/address_allocator/types.proto")
	pInfo.FilesInfo["ves.io/schema/address_allocator/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.address_allocator.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/address_allocator/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.address_allocator.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/address_allocator/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/address_allocator/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.address_allocator.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.address_allocator.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.address_allocator/Objects", "/ves.io.schema.address_allocator/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.address_allocator.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.address_allocator/Object/{object_uid}", "/ves.io.schema.address_allocator/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.address_allocator.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.address_allocator/Object/{object_uid}", "/ves.io.schema.address_allocator/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.address_allocator.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.address_allocator/Objects", "/ves.io.schema.address_allocator/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.address_allocator.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.address_allocator/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.address_allocator.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.address_allocator/Object/{object_uid}", "/ves.io.schema.address_allocator/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.address_allocator.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.advertise_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/advertise_policy", false)
	mdr.PkgsInfo["ves.io.schema.advertise_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/advertise_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/advertise_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.advertise_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.advertise_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/advertise_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/advertise_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.advertise_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.advertise_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/advertise_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.advertise_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/advertise_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.advertise_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/advertise_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.advertise_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/advertise_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.advertise_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/advertise_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.advertise_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.advertise_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.advertise_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.advertise_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.advertise_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.advertise_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/advertise_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/advertise_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.advertise_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/advertise_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.advertise_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/advertise_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/advertise_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.advertise_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.advertise_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.advertise_policy/Objects", "/ves.io.schema.advertise_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.advertise_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.advertise_policy/Object/{object_uid}", "/ves.io.schema.advertise_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.advertise_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.advertise_policy/Object/{object_uid}", "/ves.io.schema.advertise_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.advertise_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.advertise_policy/Objects", "/ves.io.schema.advertise_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.advertise_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.advertise_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.advertise_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.advertise_policy/Object/{object_uid}", "/ves.io.schema.advertise_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.advertise_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.alert_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy", false)
	mdr.PkgsInfo["ves.io.schema.alert_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/alert_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.alert_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.alert_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/alert_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.alert_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.alert_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/alert_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.alert_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/alert_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.alert_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/alert_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.alert_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/alert_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.alert_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/alert_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.alert_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.alert_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.alert_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.alert_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.alert_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.alert_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/alert_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.alert_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.alert_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/alert_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.alert_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.alert_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.alert_policy/Objects", "/ves.io.schema.alert_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.alert_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.alert_policy/Object/{object_uid}", "/ves.io.schema.alert_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.alert_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy/Object/{object_uid}", "/ves.io.schema.alert_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.alert_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy/Objects", "/ves.io.schema.alert_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.alert_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.alert_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.alert_policy/Object/{object_uid}", "/ves.io.schema.alert_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.alert_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.alert_policy_set", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy_set", false)
	mdr.PkgsInfo["ves.io.schema.alert_policy_set"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_policy_set/object.proto")
	pInfo.FilesInfo["ves.io/schema/alert_policy_set/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.alert_policy_set.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.alert_policy_set.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_policy_set/types.proto")
	pInfo.FilesInfo["ves.io/schema/alert_policy_set/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.alert_policy_set.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy_set/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.alert_policy_set.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_policy_set/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/alert_policy_set/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.alert_policy_set.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.alert_policy_set.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.alert_policy_set/Objects", "/ves.io.schema.alert_policy_set/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy_set.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.alert_policy_set.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.alert_policy_set/Object/{object_uid}", "/ves.io.schema.alert_policy_set/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy_set.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.alert_policy_set.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy_set/Object/{object_uid}", "/ves.io.schema.alert_policy_set/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy_set.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.alert_policy_set.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy_set/Objects", "/ves.io.schema.alert_policy_set/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy_set.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.alert_policy_set.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy_set/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy_set.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.alert_policy_set.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.alert_policy_set/Object/{object_uid}", "/ves.io.schema.alert_policy_set/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_policy_set.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.alert_policy_set.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.alert_receiver", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_receiver", false)
	mdr.PkgsInfo["ves.io.schema.alert_receiver"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_receiver/object.proto")
	pInfo.FilesInfo["ves.io/schema/alert_receiver/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.slack.url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000002),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.pagerduty.routing_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000003),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.opsgenie.api_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000004),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.webhook.url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(10000016),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.webhook.http_config.auth_choice.basic_auth.password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(10000017),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.webhook.http_config.auth_choice.auth_token.token"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(10000018),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.alert_receiver.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.alert_receiver.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_receiver/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/alert_receiver/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.alert_receiver.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.alert_receiver.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/alert_receivers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.alert_receiver.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/alert_receivers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.alert_receiver.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/alert_receivers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.alert_receiver.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/alert_receivers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.alert_receiver.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/alert_receivers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.alert_receiver.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.alert_receiver.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.alert_receiver.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.alert_receiver.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.alert_receiver.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.alert_receiver.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_receiver/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/alert_receiver/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.alert_receiver.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ConfirmAlertReceiver", "ves.io.schema.alert_receiver.ConfirmAlertReceiverRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/alert_receivers/{name}/confirm"}}

	aInfo.RPCsInfo[svcfw.RPCName("ConfirmAlertReceiver")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.CustomAPI.ConfirmAlertReceiver"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("TestAlertReceiver", "ves.io.schema.alert_receiver.TestAlertReceiverRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/alert_receivers/{name}/test"}}

	aInfo.RPCsInfo[svcfw.RPCName("TestAlertReceiver")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.CustomAPI.TestAlertReceiver"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("VerifyAlertReceiver", "ves.io.schema.alert_receiver.VerifyAlertReceiverRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/alert_receivers/{name}/verify"}}

	aInfo.RPCsInfo[svcfw.RPCName("VerifyAlertReceiver")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.CustomAPI.VerifyAlertReceiver"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.alert_receiver.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_receiver/types.proto")
	pInfo.FilesInfo["ves.io/schema/alert_receiver/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.alert_receiver.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_receiver/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.alert_receiver.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/alert_receiver/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/alert_receiver/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.alert_receiver.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.alert_receiver.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.alert_receiver/Objects", "/ves.io.schema.alert_receiver/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.alert_receiver.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.alert_receiver/Object/{object_uid}", "/ves.io.schema.alert_receiver/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.alert_receiver.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_receiver/Object/{object_uid}", "/ves.io.schema.alert_receiver/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.alert_receiver.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_receiver/Objects", "/ves.io.schema.alert_receiver/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.alert_receiver.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_receiver/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.alert_receiver.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.alert_receiver/Object/{object_uid}", "/ves.io.schema.alert_receiver/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.alert_receiver.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.api_credential", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_credential", false)
	mdr.PkgsInfo["ves.io.schema.api_credential"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_credential/object.proto")
	pInfo.FilesInfo["ves.io/schema/api_credential/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.api_credential.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.api_credential.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_credential/private_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/api_credential/private_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomPrivateAPI", "CUSTOM_PRIVATE", "ves.io.schema.api_credential.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ValidateToken", "ves.io.schema.api_credential.ValidateTokenRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/custom/namespaces/{namespace}/validate/api_credentials", "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/validate/api_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("ValidateToken")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomPrivateAPI.ValidateToken"] = rpcInfo

	fInfo.APIsInfo["CustomPrivateAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.api_credential.CustomPrivateAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_credential/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/api_credential/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.api_credential.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Activate", "ves.io.schema.api_credential.GetRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/activate/api_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("Activate")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Activate"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ActivateServiceCredentials", "ves.io.schema.api_credential.GetRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/activate/service_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("ActivateServiceCredentials")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.ActivateServiceCredentials"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.api_credential.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CreateServiceCredentials", "ves.io.schema.api_credential.CreateServiceCredentialsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/service_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("CreateServiceCredentials")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.CreateServiceCredentials"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.api_credential.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_credentials/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetScimToken", "ves.io.schema.api_credential.ScimTokenRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/scim_token"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetScimToken")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.GetScimToken"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.api_credential.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListServiceCredentials", "ves.io.schema.api_credential.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListServiceCredentials")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.ListServiceCredentials"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RecreateScimToken", "ves.io.schema.api_credential.RecreateScimTokenRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/scim_token"}}

	aInfo.RPCsInfo[svcfw.RPCName("RecreateScimToken")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.RecreateScimToken"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Renew", "ves.io.schema.api_credential.RenewRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/renew/api_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("Renew")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Renew"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RenewServiceCredentials", "ves.io.schema.api_credential.RenewRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/renew/service_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("RenewServiceCredentials")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.RenewServiceCredentials"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Revoke", "ves.io.schema.api_credential.GetRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/revoke/api_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("Revoke")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Revoke"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RevokeScimToken", "ves.io.schema.api_credential.ScimTokenRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/revoke/scim_token"}}

	aInfo.RPCsInfo[svcfw.RPCName("RevokeScimToken")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.RevokeScimToken"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RevokeServiceCredentials", "ves.io.schema.api_credential.GetRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/revoke/service_credentials"}}

	aInfo.RPCsInfo[svcfw.RPCName("RevokeServiceCredentials")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.RevokeServiceCredentials"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.api_credential.CustomAPI"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.api_credential.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.api_credential.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.api_credential.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.api_credential.ListRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_credential/types.proto")
	pInfo.FilesInfo["ves.io/schema/api_credential/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.api_credential.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_credential/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.api_credential.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_credential/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/api_credential/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.api_credential.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.api_credential.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.api_credential/Objects", "/ves.io.schema.api_credential/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.api_credential.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.api_credential/Object/{object_uid}", "/ves.io.schema.api_credential/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.api_credential.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_credential/Object/{object_uid}", "/ves.io.schema.api_credential/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.api_credential.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_credential/Objects", "/ves.io.schema.api_credential/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.api_credential.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_credential/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.api_credential.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.api_credential/Object/{object_uid}", "/ves.io.schema.api_credential/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.api_credential.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.api_group_element", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element", false)
	mdr.PkgsInfo["ves.io.schema.api_group_element"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_group_element/object.proto")
	pInfo.FilesInfo["ves.io/schema/api_group_element/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.api_group_element.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.api_group_element.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_group_element/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/api_group_element/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.api_group_element.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.api_group_element.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_group_elements/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_group_element.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.api_group_element.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_group_elements"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_group_element.API.List"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.api_group_element.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.api_group_element.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.api_group_element.ListRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_group_element/types.proto")
	pInfo.FilesInfo["ves.io/schema/api_group_element/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.api_group_element.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.api_group_element.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/api_group_element/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/api_group_element/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.api_group_element.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.api_group_element.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.api_group_element/Objects", "/ves.io.schema.api_group_element/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_group_element.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.api_group_element.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.api_group_element/Object/{object_uid}", "/ves.io.schema.api_group_element/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_group_element.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.api_group_element.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_group_element/Object/{object_uid}", "/ves.io.schema.api_group_element/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_group_element.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.api_group_element.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_group_element/Objects", "/ves.io.schema.api_group_element/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_group_element.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.api_group_element.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_group_element/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_group_element.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.api_group_element.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.api_group_element/Object/{object_uid}", "/ves.io.schema.api_group_element/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.api_group_element.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.api_group_element.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.app_firewall", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall", false)
	mdr.PkgsInfo["ves.io.schema.app_firewall"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_firewall/object.proto")
	pInfo.FilesInfo["ves.io/schema/app_firewall/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.app_firewall.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.app_firewall.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_firewall/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/app_firewall/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.app_firewall.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.app_firewall.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/app_firewalls"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.app_firewall.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/app_firewalls/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.app_firewall.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_firewalls/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.app_firewall.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_firewalls"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.app_firewall.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/app_firewalls/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.app_firewall.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.app_firewall.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.app_firewall.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.app_firewall.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.app_firewall.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.app_firewall.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_firewall/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/app_firewall/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.app_firewall.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Metrics", "ves.io.schema.app_firewall.MetricsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_firewall/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("Metrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.CustomDataAPI.Metrics"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.app_firewall.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_firewall/types.proto")
	pInfo.FilesInfo["ves.io/schema/app_firewall/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.app_firewall.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.app_firewall.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_firewall/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/app_firewall/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.app_firewall.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.app_firewall.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.app_firewall/Objects", "/ves.io.schema.app_firewall/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.app_firewall.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.app_firewall/Object/{object_uid}", "/ves.io.schema.app_firewall/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.app_firewall.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_firewall/Object/{object_uid}", "/ves.io.schema.app_firewall/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.app_firewall.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_firewall/Objects", "/ves.io.schema.app_firewall/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.app_firewall.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_firewall/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.app_firewall.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.app_firewall/Object/{object_uid}", "/ves.io.schema.app_firewall/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.app_firewall.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.app_setting", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_setting", false)
	mdr.PkgsInfo["ves.io.schema.app_setting"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_setting/object.proto")
	pInfo.FilesInfo["ves.io/schema/app_setting/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.app_setting.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.app_setting.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_setting/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/app_setting/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.app_setting.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.app_setting.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/app_settings"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.app_setting.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/app_settings/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.app_setting.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_settings/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.app_setting.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_settings"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.app_setting.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/app_settings/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.app_setting.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.app_setting.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.app_setting.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.app_setting.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.app_setting.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.app_setting.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_setting/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/app_setting/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.app_setting.Object", false)

	rpcInfo = svcfw.NewRPCInfo("SuspiciousUserStatus", "ves.io.schema.app_setting.SuspiciousUserStatusReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_settings/{name}/suspicious_users"}}

	aInfo.RPCsInfo[svcfw.RPCName("SuspiciousUserStatus")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.CustomAPI.SuspiciousUserStatus"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.app_setting.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_setting/types.proto")
	pInfo.FilesInfo["ves.io/schema/app_setting/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.app_setting.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_setting/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.app_setting.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_setting/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/app_setting/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.app_setting.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.app_setting.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.app_setting/Objects", "/ves.io.schema.app_setting/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.app_setting.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.app_setting/Object/{object_uid}", "/ves.io.schema.app_setting/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.app_setting.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_setting/Object/{object_uid}", "/ves.io.schema.app_setting/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.app_setting.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_setting/Objects", "/ves.io.schema.app_setting/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.app_setting.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_setting/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.app_setting.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.app_setting/Object/{object_uid}", "/ves.io.schema.app_setting/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.app_setting.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.app_type", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type", false)
	mdr.PkgsInfo["ves.io.schema.app_type"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_type/object.proto")
	pInfo.FilesInfo["ves.io/schema/app_type/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.app_type.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.app_type.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_type/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/app_type/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.app_type.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.app_type.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/app_types"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.app_type.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/app_types/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.app_type.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.app_type.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.app_type.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/app_types/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.app_type.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.app_type.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.app_type.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.app_type.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.app_type.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.app_type.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_type/public_custom_api.proto")
	pInfo.FilesInfo["ves.io/schema/app_type/public_custom_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.app_type.Object", false)

	rpcInfo = svcfw.NewRPCInfo("APIEndpointPDF", "ves.io.schema.app_type.APIEndpointPDFReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/api_endpoint/pdf"}}

	aInfo.RPCsInfo[svcfw.RPCName("APIEndpointPDF")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.APIEndpointPDF"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("APIEndpoints", "ves.io.schema.app_type.APIEndpointsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/api_endpoints"}}

	aInfo.RPCsInfo[svcfw.RPCName("APIEndpoints")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.APIEndpoints"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetAPIEndpointLearntSchema", "ves.io.schema.app_type.APIEndpointLearntSchemaReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/api_endpoint/learnt_schema"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpointLearntSchema")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.GetAPIEndpointLearntSchema"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetServiceAPIEndpointPDF", "ves.io.schema.app_type.ServiceAPIEndpointPDFReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/services/{service_name}/api_endpoint/pdf"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetServiceAPIEndpointPDF")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.GetServiceAPIEndpointPDF"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetServiceAPIEndpoints", "ves.io.schema.app_type.ServiceAPIEndpointsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/services/{service_name}/api_endpoints"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetServiceAPIEndpoints")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.GetServiceAPIEndpoints"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetSwaggerSpec", "ves.io.schema.app_type.SwaggerSpecReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/api_endpoints/swagger_spec"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetSwaggerSpec")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.GetSwaggerSpec"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("OverridePop", "ves.io.schema.app_type.OverridePopReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/override/pop"}}

	aInfo.RPCsInfo[svcfw.RPCName("OverridePop")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.OverridePop"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("OverridePush", "ves.io.schema.app_type.OverridePushReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/override/push"}}

	aInfo.RPCsInfo[svcfw.RPCName("OverridePush")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.OverridePush"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Overrides", "ves.io.schema.app_type.OverridesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/overrides"}}

	aInfo.RPCsInfo[svcfw.RPCName("Overrides")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.Overrides"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.app_type.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_type/types.proto")
	pInfo.FilesInfo["ves.io/schema/app_type/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.app_type.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.app_type.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/app_type/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/app_type/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.app_type.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.app_type.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.app_type/Objects", "/ves.io.schema.app_type/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.app_type.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.app_type/Object/{object_uid}", "/ves.io.schema.app_type/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.app_type.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_type/Object/{object_uid}", "/ves.io.schema.app_type/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.app_type.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_type/Objects", "/ves.io.schema.app_type/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.app_type.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_type/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.app_type.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.app_type/Object/{object_uid}", "/ves.io.schema.app_type/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.app_type.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.authentication", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication", false)
	mdr.PkgsInfo["ves.io.schema.authentication"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/authentication/object.proto")
	pInfo.FilesInfo["ves.io/schema/authentication/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.authentication.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.authentication.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/authentication/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/authentication/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.authentication.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.authentication.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/authentications"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.authentication.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/authentications/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.authentication.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/authentications/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.authentication.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/authentications"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.authentication.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/authentications/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.authentication.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.authentication.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.authentication.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.authentication.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.authentication.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.authentication.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/authentication/types.proto")
	pInfo.FilesInfo["ves.io/schema/authentication/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.authentication.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.authentication.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/authentication/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/authentication/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.authentication.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.authentication.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.authentication/Objects", "/ves.io.schema.authentication/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.authentication.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.authentication/Object/{object_uid}", "/ves.io.schema.authentication/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.authentication.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.authentication/Object/{object_uid}", "/ves.io.schema.authentication/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.authentication.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.authentication/Objects", "/ves.io.schema.authentication/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.authentication.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.authentication/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.authentication.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.authentication/Object/{object_uid}", "/ves.io.schema.authentication/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.authentication.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.bgp", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp", false)
	mdr.PkgsInfo["ves.io.schema.bgp"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bgp/object.proto")
	pInfo.FilesInfo["ves.io/schema/bgp/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.bgp.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.bgp.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bgp/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/bgp/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.bgp.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.bgp.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/bgps"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.bgp.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/bgps/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.bgp.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bgps/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.bgp.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bgps"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.bgp.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/bgps/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.bgp.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.bgp.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.bgp.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.bgp.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.bgp.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.bgp.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bgp/types.proto")
	pInfo.FilesInfo["ves.io/schema/bgp/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.bgp.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.bgp.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bgp/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/bgp/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.bgp.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.bgp.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.bgp/Objects", "/ves.io.schema.bgp/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.bgp.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.bgp/Object/{object_uid}", "/ves.io.schema.bgp/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.bgp.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp/Object/{object_uid}", "/ves.io.schema.bgp/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.bgp.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp/Objects", "/ves.io.schema.bgp/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.bgp.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.bgp.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.bgp/Object/{object_uid}", "/ves.io.schema.bgp/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.bgp.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.bgp_asn_set", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp_asn_set", false)
	mdr.PkgsInfo["ves.io.schema.bgp_asn_set"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bgp_asn_set/object.proto")
	pInfo.FilesInfo["ves.io/schema/bgp_asn_set/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.bgp_asn_set.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.bgp_asn_set.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bgp_asn_set/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/bgp_asn_set/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.bgp_asn_set.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.bgp_asn_set.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/bgp_asn_sets"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.bgp_asn_set.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/bgp_asn_sets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.bgp_asn_set.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bgp_asn_sets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.bgp_asn_set.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bgp_asn_sets"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.bgp_asn_set.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/bgp_asn_sets/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.bgp_asn_set.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.bgp_asn_set.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.bgp_asn_set.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.bgp_asn_set.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.bgp_asn_set.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.bgp_asn_set.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bgp_asn_set/types.proto")
	pInfo.FilesInfo["ves.io/schema/bgp_asn_set/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.bgp_asn_set.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp_asn_set/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.bgp_asn_set.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bgp_asn_set/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/bgp_asn_set/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.bgp_asn_set.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.bgp_asn_set.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.bgp_asn_set/Objects", "/ves.io.schema.bgp_asn_set/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.bgp_asn_set.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.bgp_asn_set/Object/{object_uid}", "/ves.io.schema.bgp_asn_set/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.bgp_asn_set.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp_asn_set/Object/{object_uid}", "/ves.io.schema.bgp_asn_set/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.bgp_asn_set.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp_asn_set/Objects", "/ves.io.schema.bgp_asn_set/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.bgp_asn_set.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp_asn_set/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.bgp_asn_set.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.bgp_asn_set/Object/{object_uid}", "/ves.io.schema.bgp_asn_set/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.bgp_asn_set.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.bigip.apm", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bigip/apm", false)
	mdr.PkgsInfo["ves.io.schema.bigip.apm"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bigip/apm/object.proto")
	pInfo.FilesInfo["ves.io/schema/bigip/apm/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.bigip.apm.Object.spec.gc_spec.site_type_choice.aws_site_type_choice.apm_aws_site.admin_password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000014),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.bigip.apm.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.bigip.apm.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bigip/apm/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/bigip/apm/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.bigip.apm.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.bigip.apm.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/apms"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.bigip.apm.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/apms/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.bigip.apm.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/apms/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.bigip.apm.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/apms"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.bigip.apm.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/apms/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.bigip.apm.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.bigip.apm.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.bigip.apm.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.bigip.apm.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.bigip.apm.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.bigip.apm.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bigip/apm/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/bigip/apm/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.bigip.apm.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Metrics", "ves.io.schema.bigip.apm.MetricsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/bigip/apm/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("Metrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.CustomDataAPI.Metrics"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.bigip.apm.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bigip/apm/types.proto")
	pInfo.FilesInfo["ves.io/schema/bigip/apm/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.bigip.apm.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bigip/apm/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.bigip.apm.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/bigip/apm/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/bigip/apm/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.bigip.apm.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.bigip.apm.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.bigip.apm/Objects", "/ves.io.schema.bigip.apm/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.bigip.apm.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.bigip.apm/Object/{object_uid}", "/ves.io.schema.bigip.apm/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.bigip.apm.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bigip.apm/Object/{object_uid}", "/ves.io.schema.bigip.apm/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.bigip.apm.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bigip.apm/Objects", "/ves.io.schema.bigip.apm/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.bigip.apm.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bigip.apm/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.bigip.apm.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.bigip.apm/Object/{object_uid}", "/ves.io.schema.bigip.apm/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.bigip.apm.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.bigip.apm.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.certificate", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certificate", false)
	mdr.PkgsInfo["ves.io.schema.certificate"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certificate/object.proto")
	pInfo.FilesInfo["ves.io/schema/certificate/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.certificate.Object.spec.gc_spec.private_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(10000020),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.certificate.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.certificate.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certificate/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/certificate/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.certificate.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.certificate.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/certificates"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.certificate.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/certificates/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.certificate.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/certificates/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.certificate.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/certificates"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.certificate.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/certificates/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.certificate.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.certificate.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.certificate.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.certificate.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.certificate.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.certificate.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certificate/types.proto")
	pInfo.FilesInfo["ves.io/schema/certificate/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.certificate.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certificate/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.certificate.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certificate/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/certificate/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.certificate.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.certificate.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.certificate/Objects", "/ves.io.schema.certificate/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.certificate.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.certificate/Object/{object_uid}", "/ves.io.schema.certificate/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.certificate.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certificate/Object/{object_uid}", "/ves.io.schema.certificate/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.certificate.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certificate/Objects", "/ves.io.schema.certificate/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.certificate.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certificate/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.certificate.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.certificate/Object/{object_uid}", "/ves.io.schema.certificate/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.certificate.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.certificate_chain", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certificate_chain", false)
	mdr.PkgsInfo["ves.io.schema.certificate_chain"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certificate_chain/object.proto")
	pInfo.FilesInfo["ves.io/schema/certificate_chain/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.certificate_chain.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.certificate_chain.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certificate_chain/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/certificate_chain/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.certificate_chain.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.certificate_chain.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/certificate_chains"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.certificate_chain.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/certificate_chains/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.certificate_chain.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/certificate_chains/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.certificate_chain.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/certificate_chains"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.certificate_chain.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/certificate_chains/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.certificate_chain.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.certificate_chain.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.certificate_chain.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.certificate_chain.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.certificate_chain.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.certificate_chain.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certificate_chain/types.proto")
	pInfo.FilesInfo["ves.io/schema/certificate_chain/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.certificate_chain.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certificate_chain/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.certificate_chain.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certificate_chain/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/certificate_chain/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.certificate_chain.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.certificate_chain.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.certificate_chain/Objects", "/ves.io.schema.certificate_chain/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.certificate_chain.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.certificate_chain/Object/{object_uid}", "/ves.io.schema.certificate_chain/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.certificate_chain.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certificate_chain/Object/{object_uid}", "/ves.io.schema.certificate_chain/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.certificate_chain.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certificate_chain/Objects", "/ves.io.schema.certificate_chain/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.certificate_chain.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certificate_chain/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.certificate_chain.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.certificate_chain/Object/{object_uid}", "/ves.io.schema.certificate_chain/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certificate_chain.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.certificate_chain.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.certified_hardware", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware", false)
	mdr.PkgsInfo["ves.io.schema.certified_hardware"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certified_hardware/object.proto")
	pInfo.FilesInfo["ves.io/schema/certified_hardware/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.certified_hardware.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.certified_hardware.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certified_hardware/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/certified_hardware/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.certified_hardware.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.certified_hardware.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/certified_hardwares/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certified_hardware.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.certified_hardware.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/certified_hardwares"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certified_hardware.API.List"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.certified_hardware.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.certified_hardware.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.certified_hardware.ListRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certified_hardware/types.proto")
	pInfo.FilesInfo["ves.io/schema/certified_hardware/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.certified_hardware.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.certified_hardware.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/certified_hardware/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/certified_hardware/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.certified_hardware.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.certified_hardware.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.certified_hardware/Objects", "/ves.io.schema.certified_hardware/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.certified_hardware.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.certified_hardware/Object/{object_uid}", "/ves.io.schema.certified_hardware/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.certified_hardware.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certified_hardware/Object/{object_uid}", "/ves.io.schema.certified_hardware/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.certified_hardware.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certified_hardware/Objects", "/ves.io.schema.certified_hardware/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.certified_hardware.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certified_hardware/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.certified_hardware.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.certified_hardware/Object/{object_uid}", "/ves.io.schema.certified_hardware/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.certified_hardware.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cloud_connect", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_connect", false)
	mdr.PkgsInfo["ves.io.schema.cloud_connect"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_connect/object.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_connect/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.cloud_connect.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.cloud_connect.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_connect/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_connect/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.cloud_connect.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cloud_connect.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/cloud_connects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cloud_connect.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/cloud_connects/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cloud_connect.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cloud_connects/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cloud_connect.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cloud_connects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cloud_connect.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/cloud_connects/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cloud_connect.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.cloud_connect.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.cloud_connect.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.cloud_connect.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.cloud_connect.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.cloud_connect.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_connect/types.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_connect/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cloud_connect.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_connect/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.cloud_connect.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_connect/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_connect/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.cloud_connect.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cloud_connect.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.cloud_connect/Objects", "/ves.io.schema.cloud_connect/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cloud_connect.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.cloud_connect/Object/{object_uid}", "/ves.io.schema.cloud_connect/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cloud_connect.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_connect/Object/{object_uid}", "/ves.io.schema.cloud_connect/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cloud_connect.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_connect/Objects", "/ves.io.schema.cloud_connect/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.cloud_connect.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_connect/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cloud_connect.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.cloud_connect/Object/{object_uid}", "/ves.io.schema.cloud_connect/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_connect.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cloud_connect.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cloud_credentials", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_credentials", false)
	mdr.PkgsInfo["ves.io.schema.cloud_credentials"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_credentials/object.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_credentials/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.cloud_credentials.Object.spec.gc_spec.cloud.aws_secret_key.secret_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000005),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.cloud_credentials.Object.spec.gc_spec.cloud.azure_pfx_certificate.password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000005),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.cloud_credentials.Object.spec.gc_spec.cloud.azure_client_secret.client_secret"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000005),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.cloud_credentials.Object.spec.gc_spec.cloud.gcp_cred_file.credential_file"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000005),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.cloud_credentials.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.cloud_credentials.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_credentials/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_credentials/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.cloud_credentials.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cloud_credentials.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/cloud_credentialss"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cloud_credentials.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/cloud_credentialss/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cloud_credentials.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cloud_credentialss/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cloud_credentials.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cloud_credentialss"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cloud_credentials.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/cloud_credentialss/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cloud_credentials.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.cloud_credentials.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.cloud_credentials.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.cloud_credentials.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.cloud_credentials.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.cloud_credentials.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_credentials/types.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_credentials/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cloud_credentials.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_credentials/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.cloud_credentials.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_credentials/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_credentials/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.cloud_credentials.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cloud_credentials.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.cloud_credentials/Objects", "/ves.io.schema.cloud_credentials/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cloud_credentials.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.cloud_credentials/Object/{object_uid}", "/ves.io.schema.cloud_credentials/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cloud_credentials.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_credentials/Object/{object_uid}", "/ves.io.schema.cloud_credentials/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cloud_credentials.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_credentials/Objects", "/ves.io.schema.cloud_credentials/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.cloud_credentials.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_credentials/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cloud_credentials.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.cloud_credentials/Object/{object_uid}", "/ves.io.schema.cloud_credentials/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cloud_credentials.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cloud_link", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_link", false)
	mdr.PkgsInfo["ves.io.schema.cloud_link"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_link/object.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_link/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.cloud_link.Object.spec.gc_spec.cloud_provider.aws.cloud_link_type.byoc.connections.auth_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(10000019),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.cloud_link.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.cloud_link.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_link/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_link/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.cloud_link.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cloud_link.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/cloud_links"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cloud_link.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/cloud_links/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cloud_link.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cloud_links/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cloud_link.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cloud_links"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cloud_link.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/cloud_links/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cloud_link.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.cloud_link.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.cloud_link.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.cloud_link.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.cloud_link.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.cloud_link.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_link/public_custom_api.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_link/public_custom_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.cloud_link.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ReapplyConfig", "ves.io.schema.cloud_link.ReapplyConfigRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/cloud_links/{name}/reapply_config"}}

	aInfo.RPCsInfo[svcfw.RPCName("ReapplyConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.CustomDataAPI.ReapplyConfig"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.cloud_link.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_link/types.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_link/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cloud_link.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_link/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.cloud_link.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_link/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_link/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.cloud_link.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cloud_link.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.cloud_link/Objects", "/ves.io.schema.cloud_link/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cloud_link.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.cloud_link/Object/{object_uid}", "/ves.io.schema.cloud_link/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cloud_link.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_link/Object/{object_uid}", "/ves.io.schema.cloud_link/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cloud_link.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_link/Objects", "/ves.io.schema.cloud_link/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.cloud_link.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_link/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cloud_link.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.cloud_link/Object/{object_uid}", "/ves.io.schema.cloud_link/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_link.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cloud_link.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cloud_re_region", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_re_region", false)
	mdr.PkgsInfo["ves.io.schema.cloud_re_region"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_re_region/object.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_re_region/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.cloud_re_region.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.cloud_re_region.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_re_region/types.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_re_region/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cloud_re_region.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_re_region/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.cloud_re_region.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cloud_re_region/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/cloud_re_region/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.cloud_re_region.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cloud_re_region.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.cloud_re_region/Objects", "/ves.io.schema.cloud_re_region/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_re_region.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cloud_re_region.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.cloud_re_region/Object/{object_uid}", "/ves.io.schema.cloud_re_region/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_re_region.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cloud_re_region.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_re_region/Object/{object_uid}", "/ves.io.schema.cloud_re_region/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_re_region.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cloud_re_region.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_re_region/Objects", "/ves.io.schema.cloud_re_region/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_re_region.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.cloud_re_region.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_re_region/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_re_region.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cloud_re_region.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.cloud_re_region/Object/{object_uid}", "/ves.io.schema.cloud_re_region/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cloud_re_region.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cloud_re_region.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cluster", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster", false)
	mdr.PkgsInfo["ves.io.schema.cluster"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cluster/object.proto")
	pInfo.FilesInfo["ves.io/schema/cluster/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.cluster.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.cluster.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cluster/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/cluster/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.cluster.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cluster.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/clusters"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cluster.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/clusters/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cluster.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/clusters/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cluster.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/clusters"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cluster.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/clusters/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cluster.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.cluster.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.cluster.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.cluster.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.cluster.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.cluster.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cluster/types.proto")
	pInfo.FilesInfo["ves.io/schema/cluster/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cluster.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.cluster.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cluster/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/cluster/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.cluster.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cluster.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.cluster/Objects", "/ves.io.schema.cluster/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cluster.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.cluster/Object/{object_uid}", "/ves.io.schema.cluster/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cluster.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cluster/Object/{object_uid}", "/ves.io.schema.cluster/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cluster.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cluster/Objects", "/ves.io.schema.cluster/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.cluster.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cluster/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cluster.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.cluster/Object/{object_uid}", "/ves.io.schema.cluster/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cluster.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cminstance", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cminstance", false)
	mdr.PkgsInfo["ves.io.schema.cminstance"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cminstance/object.proto")
	pInfo.FilesInfo["ves.io/schema/cminstance/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.cminstance.Object.spec.gc_spec.password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000022),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.cminstance.Object.spec.gc_spec.api_token"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000023),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.cminstance.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.cminstance.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cminstance/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/cminstance/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.cminstance.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cminstance.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/cminstances"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cminstance.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/cminstances/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cminstance.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cminstances/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cminstance.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cminstances"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cminstance.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/cminstances/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cminstance.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.cminstance.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.cminstance.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.cminstance.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.cminstance.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.cminstance.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cminstance/types.proto")
	pInfo.FilesInfo["ves.io/schema/cminstance/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.cminstance.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cminstance/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.cminstance.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/cminstance/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/cminstance/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.cminstance.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.cminstance.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.cminstance/Objects", "/ves.io.schema.cminstance/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.cminstance.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.cminstance/Object/{object_uid}", "/ves.io.schema.cminstance/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.cminstance.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cminstance/Object/{object_uid}", "/ves.io.schema.cminstance/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.cminstance.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cminstance/Objects", "/ves.io.schema.cminstance/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.cminstance.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cminstance/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.cminstance.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.cminstance/Object/{object_uid}", "/ves.io.schema.cminstance/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.cminstance.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.cminstance.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.contact", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/contact", false)
	mdr.PkgsInfo["ves.io.schema.contact"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/contact/object.proto")
	pInfo.FilesInfo["ves.io/schema/contact/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.contact.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.contact.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/contact/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/contact/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.contact.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.contact.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/contacts"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.contact.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/contacts/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.contact.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/contacts/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.contact.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/contacts"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.contact.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/contacts/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.contact.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.contact.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.contact.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.contact.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.contact.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.contact.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/contact/types.proto")
	pInfo.FilesInfo["ves.io/schema/contact/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.contact.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/contact/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.contact.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/contact/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/contact/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.contact.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.contact.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.contact/Objects", "/ves.io.schema.contact/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.contact.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.contact/Object/{object_uid}", "/ves.io.schema.contact/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.contact.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.contact/Object/{object_uid}", "/ves.io.schema.contact/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.contact.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.contact/Objects", "/ves.io.schema.contact/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.contact.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.contact/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.contact.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.contact/Object/{object_uid}", "/ves.io.schema.contact/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.contact.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.contact.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.container_registry", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/container_registry", false)
	mdr.PkgsInfo["ves.io.schema.container_registry"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/container_registry/object.proto")
	pInfo.FilesInfo["ves.io/schema/container_registry/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.container_registry.Object.spec.gc_spec.password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000001),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.container_registry.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.container_registry.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/container_registry/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/container_registry/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.container_registry.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.container_registry.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/container_registrys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.container_registry.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/container_registrys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.container_registry.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/container_registrys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.container_registry.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/container_registrys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.container_registry.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/container_registrys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.container_registry.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.container_registry.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.container_registry.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.container_registry.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.container_registry.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.container_registry.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/container_registry/types.proto")
	pInfo.FilesInfo["ves.io/schema/container_registry/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.container_registry.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/container_registry/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.container_registry.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/container_registry/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/container_registry/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.container_registry.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.container_registry.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.container_registry/Objects", "/ves.io.schema.container_registry/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.container_registry.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.container_registry/Object/{object_uid}", "/ves.io.schema.container_registry/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.container_registry.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.container_registry/Object/{object_uid}", "/ves.io.schema.container_registry/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.container_registry.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.container_registry/Objects", "/ves.io.schema.container_registry/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.container_registry.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.container_registry/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.container_registry.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.container_registry/Object/{object_uid}", "/ves.io.schema.container_registry/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.container_registry.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.crl", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/crl", false)
	mdr.PkgsInfo["ves.io.schema.crl"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/crl/object.proto")
	pInfo.FilesInfo["ves.io/schema/crl/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.crl.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.crl.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/crl/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/crl/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.crl.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.crl.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/crls"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.crl.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/crls/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.crl.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/crls/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.crl.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/crls"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.crl.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/crls/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.crl.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.crl.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.crl.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.crl.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.crl.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.crl.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/crl/types.proto")
	pInfo.FilesInfo["ves.io/schema/crl/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.crl.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/crl/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.crl.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/crl/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/crl/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.crl.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.crl.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.crl/Objects", "/ves.io.schema.crl/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.crl.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.crl/Object/{object_uid}", "/ves.io.schema.crl/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.crl.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.crl/Object/{object_uid}", "/ves.io.schema.crl/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.crl.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.crl/Objects", "/ves.io.schema.crl/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.crl.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.crl/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.crl.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.crl/Object/{object_uid}", "/ves.io.schema.crl/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.crl.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.crl.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dc_cluster_group", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dc_cluster_group", false)
	mdr.PkgsInfo["ves.io.schema.dc_cluster_group"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dc_cluster_group/object.proto")
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.dc_cluster_group.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.dc_cluster_group.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dc_cluster_group/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.dc_cluster_group.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dc_cluster_group.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dc_cluster_groups"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dc_cluster_group.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dc_cluster_groups/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dc_cluster_group.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dc_cluster_groups/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dc_cluster_group.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dc_cluster_groups"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dc_cluster_group.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dc_cluster_groups/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dc_cluster_group.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.dc_cluster_group.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.dc_cluster_group.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.dc_cluster_group.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.dc_cluster_group.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.dc_cluster_group.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dc_cluster_group/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.dc_cluster_group.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Metrics", "ves.io.schema.dc_cluster_group.MetricsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/dc_cluster_groups/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("Metrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.CustomDataAPI.Metrics"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.dc_cluster_group.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dc_cluster_group/types.proto")
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dc_cluster_group.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dc_cluster_group/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.dc_cluster_group.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dc_cluster_group/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.dc_cluster_group.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dc_cluster_group.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dc_cluster_group/Objects", "/ves.io.schema.dc_cluster_group/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dc_cluster_group.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dc_cluster_group/Object/{object_uid}", "/ves.io.schema.dc_cluster_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dc_cluster_group.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dc_cluster_group/Object/{object_uid}", "/ves.io.schema.dc_cluster_group/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dc_cluster_group.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dc_cluster_group/Objects", "/ves.io.schema.dc_cluster_group/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.dc_cluster_group.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dc_cluster_group/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dc_cluster_group.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dc_cluster_group/Object/{object_uid}", "/ves.io.schema.dc_cluster_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dc_cluster_group.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.discovery", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/discovery", false)
	mdr.PkgsInfo["ves.io.schema.discovery"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/discovery/object.proto")
	pInfo.FilesInfo["ves.io/schema/discovery/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.discovery.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.discovery.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/discovery/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/discovery/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.discovery.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.discovery.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/discoverys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.discovery.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/discoverys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.discovery.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/discoverys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.discovery.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/discoverys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.discovery.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/discoverys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.discovery.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.discovery.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.discovery.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.discovery.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.discovery.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.discovery.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/discovery/types.proto")
	pInfo.FilesInfo["ves.io/schema/discovery/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.discovery.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/discovery/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.discovery.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/discovery/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/discovery/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.discovery.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.discovery.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.discovery/Objects", "/ves.io.schema.discovery/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.discovery.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.discovery/Object/{object_uid}", "/ves.io.schema.discovery/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.discovery.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.discovery/Object/{object_uid}", "/ves.io.schema.discovery/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.discovery.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.discovery/Objects", "/ves.io.schema.discovery/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.discovery.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.discovery/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.discovery.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.discovery/Object/{object_uid}", "/ves.io.schema.discovery/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.discovery.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_compliance_checks", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_compliance_checks", false)
	mdr.PkgsInfo["ves.io.schema.dns_compliance_checks"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_compliance_checks/object.proto")
	pInfo.FilesInfo["ves.io/schema/dns_compliance_checks/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_compliance_checks.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_compliance_checks.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_compliance_checks/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/dns_compliance_checks/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.dns_compliance_checks.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_compliance_checks.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dns_compliance_checkss"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_compliance_checks.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dns_compliance_checkss/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_compliance_checks.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_compliance_checkss/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_compliance_checks.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_compliance_checkss"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_compliance_checks.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dns_compliance_checkss/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_compliance_checks.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.dns_compliance_checks.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.dns_compliance_checks.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.dns_compliance_checks.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.dns_compliance_checks.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.dns_compliance_checks.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_compliance_checks/types.proto")
	pInfo.FilesInfo["ves.io/schema/dns_compliance_checks/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_compliance_checks.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_compliance_checks/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.dns_compliance_checks.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_compliance_checks/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/dns_compliance_checks/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.dns_compliance_checks.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_compliance_checks.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dns_compliance_checks/Objects", "/ves.io.schema.dns_compliance_checks/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_compliance_checks.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dns_compliance_checks/Object/{object_uid}", "/ves.io.schema.dns_compliance_checks/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_compliance_checks.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_compliance_checks/Object/{object_uid}", "/ves.io.schema.dns_compliance_checks/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_compliance_checks.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_compliance_checks/Objects", "/ves.io.schema.dns_compliance_checks/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.dns_compliance_checks.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_compliance_checks/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_compliance_checks.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dns_compliance_checks/Object/{object_uid}", "/ves.io.schema.dns_compliance_checks/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_compliance_checks.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_compliance_checks.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_domain", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_domain", false)
	mdr.PkgsInfo["ves.io.schema.dns_domain"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_domain/object.proto")
	pInfo.FilesInfo["ves.io/schema/dns_domain/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_domain.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_domain.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_domain/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/dns_domain/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.dns_domain.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_domain.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dns_domains"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_domain.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dns_domains/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_domain.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_domains/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_domain.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_domains"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_domain.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dns_domains/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_domain.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.dns_domain.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.dns_domain.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.dns_domain.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.dns_domain.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.dns_domain.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_domain/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/dns_domain/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.dns_domain.Object", false)

	rpcInfo = svcfw.NewRPCInfo("VerifyDnsDomain", "ves.io.schema.dns_domain.VerifyDnsDomainRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/dns_domain/{name}/verify"}}

	aInfo.RPCsInfo[svcfw.RPCName("VerifyDnsDomain")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.CustomAPI.VerifyDnsDomain"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_domain.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_domain/types.proto")
	pInfo.FilesInfo["ves.io/schema/dns_domain/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_domain.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_domain/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.dns_domain.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_domain/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/dns_domain/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.dns_domain.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_domain.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dns_domain/Objects", "/ves.io.schema.dns_domain/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_domain.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dns_domain/Object/{object_uid}", "/ves.io.schema.dns_domain/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_domain.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_domain/Object/{object_uid}", "/ves.io.schema.dns_domain/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_domain.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_domain/Objects", "/ves.io.schema.dns_domain/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.dns_domain.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_domain/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_domain.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dns_domain/Object/{object_uid}", "/ves.io.schema.dns_domain/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_domain.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_lb_health_check", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_lb_health_check", false)
	mdr.PkgsInfo["ves.io.schema.dns_lb_health_check"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_lb_health_check/object.proto")
	pInfo.FilesInfo["ves.io/schema/dns_lb_health_check/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_lb_health_check.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_lb_health_check.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_lb_health_check/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/dns_lb_health_check/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.dns_lb_health_check.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_lb_health_check.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dns_lb_health_checks"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_lb_health_check.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dns_lb_health_checks/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_lb_health_check.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_lb_health_checks/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_lb_health_check.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_lb_health_checks"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_lb_health_check.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dns_lb_health_checks/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_lb_health_check.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_health_check.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_health_check.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_health_check.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_health_check.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_health_check.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_lb_health_check/types.proto")
	pInfo.FilesInfo["ves.io/schema/dns_lb_health_check/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_lb_health_check.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_lb_health_check/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.dns_lb_health_check.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_lb_health_check/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/dns_lb_health_check/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.dns_lb_health_check.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_lb_health_check.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dns_lb_health_check/Objects", "/ves.io.schema.dns_lb_health_check/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_lb_health_check.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dns_lb_health_check/Object/{object_uid}", "/ves.io.schema.dns_lb_health_check/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_lb_health_check.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_lb_health_check/Object/{object_uid}", "/ves.io.schema.dns_lb_health_check/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_lb_health_check.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_lb_health_check/Objects", "/ves.io.schema.dns_lb_health_check/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.dns_lb_health_check.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_lb_health_check/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_lb_health_check.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dns_lb_health_check/Object/{object_uid}", "/ves.io.schema.dns_lb_health_check/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_health_check.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_lb_health_check.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_lb_pool", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_lb_pool", false)
	mdr.PkgsInfo["ves.io.schema.dns_lb_pool"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_lb_pool/object.proto")
	pInfo.FilesInfo["ves.io/schema/dns_lb_pool/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_lb_pool.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_lb_pool.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_lb_pool/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/dns_lb_pool/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.dns_lb_pool.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_lb_pool.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dns_lb_pools"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_lb_pool.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dns_lb_pools/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_lb_pool.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_lb_pools/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_lb_pool.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_lb_pools"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_lb_pool.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dns_lb_pools/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_lb_pool.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_pool.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_pool.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_pool.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_pool.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.dns_lb_pool.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_lb_pool/types.proto")
	pInfo.FilesInfo["ves.io/schema/dns_lb_pool/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_lb_pool.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_lb_pool/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.dns_lb_pool.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_lb_pool/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/dns_lb_pool/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.dns_lb_pool.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_lb_pool.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dns_lb_pool/Objects", "/ves.io.schema.dns_lb_pool/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_lb_pool.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dns_lb_pool/Object/{object_uid}", "/ves.io.schema.dns_lb_pool/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_lb_pool.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_lb_pool/Object/{object_uid}", "/ves.io.schema.dns_lb_pool/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_lb_pool.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_lb_pool/Objects", "/ves.io.schema.dns_lb_pool/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.dns_lb_pool.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_lb_pool/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_lb_pool.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dns_lb_pool/Object/{object_uid}", "/ves.io.schema.dns_lb_pool/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_lb_pool.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_lb_pool.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_load_balancer", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_load_balancer", false)
	mdr.PkgsInfo["ves.io.schema.dns_load_balancer"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_load_balancer/object.proto")
	pInfo.FilesInfo["ves.io/schema/dns_load_balancer/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_load_balancer.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_load_balancer.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_load_balancer/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/dns_load_balancer/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.dns_load_balancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_load_balancer.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dns_load_balancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_load_balancer.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dns_load_balancers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_load_balancer.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_load_balancers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_load_balancer.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_load_balancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_load_balancer.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dns_load_balancers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_load_balancer.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.dns_load_balancer.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.dns_load_balancer.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.dns_load_balancer.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.dns_load_balancer.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.dns_load_balancer.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_load_balancer/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/dns_load_balancer/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.dns_load_balancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("DNSLBHealthStatus", "ves.io.schema.dns_load_balancer.DNSLBHealthStatusRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_load_balancers/{name}/health_status"}}

	aInfo.RPCsInfo[svcfw.RPCName("DNSLBHealthStatus")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatus"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DNSLBHealthStatusList", "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_load_balancers/health_status"}}

	aInfo.RPCsInfo[svcfw.RPCName("DNSLBHealthStatusList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatusList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DNSLBPoolHealthStatus", "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_load_balancers/{dns_lb_name}/dns_lb_pools/{dns_lb_pool_name}/health_status"}}

	aInfo.RPCsInfo[svcfw.RPCName("DNSLBPoolHealthStatus")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBPoolHealthStatus"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_load_balancer.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_load_balancer/types.proto")
	pInfo.FilesInfo["ves.io/schema/dns_load_balancer/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_load_balancer.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_load_balancer/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.dns_load_balancer.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_load_balancer/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/dns_load_balancer/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.dns_load_balancer.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_load_balancer.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dns_load_balancer/Objects", "/ves.io.schema.dns_load_balancer/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_load_balancer.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dns_load_balancer/Object/{object_uid}", "/ves.io.schema.dns_load_balancer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_load_balancer.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_load_balancer/Object/{object_uid}", "/ves.io.schema.dns_load_balancer/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_load_balancer.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_load_balancer/Objects", "/ves.io.schema.dns_load_balancer/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.dns_load_balancer.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_load_balancer/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_load_balancer.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dns_load_balancer/Object/{object_uid}", "/ves.io.schema.dns_load_balancer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_load_balancer.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_load_balancer.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_zone", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_zone", false)
	mdr.PkgsInfo["ves.io.schema.dns_zone"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_zone/dnssec.proto")
	pInfo.FilesInfo["ves.io/schema/dns_zone/dnssec.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_zone/object.proto")
	pInfo.FilesInfo["ves.io/schema/dns_zone/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_zone.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.dns_zone.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_zone/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/dns_zone/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.dns_zone.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_zone.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dns_zones"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_zone.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dns_zones/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_zone.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_zones/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_zone.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_zones"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_zone.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dns_zones/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_zone.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.dns_zone.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.dns_zone.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.dns_zone.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.dns_zone.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.dns_zone.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_zone/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/dns_zone/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.dns_zone.Object", false)

	rpcInfo = svcfw.NewRPCInfo("DnsZoneMetrics", "ves.io.schema.dns_zone.DnsZoneMetricsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/dns_zones/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("DnsZoneMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.CustomDataAPI.DnsZoneMetrics"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DnsZoneRequestLogs", "ves.io.schema.dns_zone.DnsZoneRequestLogRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/dns_zones/request_logs"}}

	aInfo.RPCsInfo[svcfw.RPCName("DnsZoneRequestLogs")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.CustomDataAPI.DnsZoneRequestLogs"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_zone.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_zone/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/dns_zone/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.dns_zone.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CloneFromDNSDomain", "ves.io.schema.dns_zone.CloneReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/dns_zone/clone_from_dns_domain"}}

	aInfo.RPCsInfo[svcfw.RPCName("CloneFromDNSDomain")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.CustomAPI.CloneFromDNSDomain"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetLocalZoneFile", "ves.io.schema.dns_zone.GetLocalZoneFileRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_zone/{dns_zone_name}/local_zone_file"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetLocalZoneFile")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.CustomAPI.GetLocalZoneFile"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetRemoteZoneFile", "ves.io.schema.dns_zone.GetRemoteZoneFileRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_zone/{dns_zone_name}/remote_zone_file"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetRemoteZoneFile")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.CustomAPI.GetRemoteZoneFile"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ImportAXFR", "ves.io.schema.dns_zone.ImportAXFRRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/dns_zone/import_axfr"}}

	aInfo.RPCsInfo[svcfw.RPCName("ImportAXFR")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.CustomAPI.ImportAXFR"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ImportF5CSZone", "ves.io.schema.dns_zone.ImportF5CSZoneRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/dns_zone/import"}}

	aInfo.RPCsInfo[svcfw.RPCName("ImportF5CSZone")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.CustomAPI.ImportF5CSZone"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_zone.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_zone/types.proto")
	pInfo.FilesInfo["ves.io/schema/dns_zone/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dns_zone.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_zone/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.dns_zone.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dns_zone/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/dns_zone/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.dns_zone.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dns_zone.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dns_zone/Objects", "/ves.io.schema.dns_zone/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dns_zone.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dns_zone/Object/{object_uid}", "/ves.io.schema.dns_zone/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dns_zone.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_zone/Object/{object_uid}", "/ves.io.schema.dns_zone/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dns_zone.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_zone/Objects", "/ves.io.schema.dns_zone/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.dns_zone.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_zone/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dns_zone.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dns_zone/Object/{object_uid}", "/ves.io.schema.dns_zone/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dns_zone.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dns_zone.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dos_mitigation", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dos_mitigation", false)
	mdr.PkgsInfo["ves.io.schema.dos_mitigation"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dos_mitigation/object.proto")
	pInfo.FilesInfo["ves.io/schema/dos_mitigation/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.dos_mitigation.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.dos_mitigation.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dos_mitigation/private_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/dos_mitigation/private_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("PrivateDosMitigationAPI", "CUSTOM_PRIVATE", "ves.io.schema.dos_mitigation.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CreateBulk", "ves.io.schema.dos_mitigation.CreateBulkRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/namespaces/system/dos_mitigation/bulk/create", "/ves.io.schema/introspect/write/private/namespaces/system/dos_mitigation/bulk/create"}}

	aInfo.RPCsInfo[svcfw.RPCName("CreateBulk")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dos_mitigation.PrivateDosMitigationAPI.CreateBulk"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DeleteBulk", "ves.io.schema.dos_mitigation.DeleteBulkRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/namespaces/system/dos_mitigation/bulk/delete", "/ves.io.schema/introspect/write/private/namespaces/system/dos_mitigation/bulk/delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeleteBulk")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dos_mitigation.PrivateDosMitigationAPI.DeleteBulk"] = rpcInfo

	fInfo.APIsInfo["PrivateDosMitigationAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.dos_mitigation.PrivateDosMitigationAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dos_mitigation/types.proto")
	pInfo.FilesInfo["ves.io/schema/dos_mitigation/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.dos_mitigation.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dos_mitigation/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.dos_mitigation.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/dos_mitigation/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/dos_mitigation/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.dos_mitigation.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.dos_mitigation.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dos_mitigation/Objects", "/ves.io.schema.dos_mitigation/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dos_mitigation.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.dos_mitigation.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dos_mitigation/Object/{object_uid}", "/ves.io.schema.dos_mitigation/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dos_mitigation.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.dos_mitigation.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dos_mitigation/Object/{object_uid}", "/ves.io.schema.dos_mitigation/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dos_mitigation.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.dos_mitigation.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dos_mitigation/Objects", "/ves.io.schema.dos_mitigation/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dos_mitigation.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.dos_mitigation.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dos_mitigation/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dos_mitigation.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.dos_mitigation.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dos_mitigation/Object/{object_uid}", "/ves.io.schema.dos_mitigation/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.dos_mitigation.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.dos_mitigation.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.downstream_cos", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/downstream_cos", false)
	mdr.PkgsInfo["ves.io.schema.downstream_cos"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/downstream_cos/object.proto")
	pInfo.FilesInfo["ves.io/schema/downstream_cos/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.downstream_cos.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.downstream_cos.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/downstream_cos/types.proto")
	pInfo.FilesInfo["ves.io/schema/downstream_cos/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.downstream_cos.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/downstream_cos/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.downstream_cos.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/downstream_cos/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/downstream_cos/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.downstream_cos.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.downstream_cos.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.downstream_cos/Objects", "/ves.io.schema.downstream_cos/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.downstream_cos.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.downstream_cos.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.downstream_cos/Object/{object_uid}", "/ves.io.schema.downstream_cos/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.downstream_cos.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.downstream_cos.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.downstream_cos/Object/{object_uid}", "/ves.io.schema.downstream_cos/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.downstream_cos.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.downstream_cos.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.downstream_cos/Objects", "/ves.io.schema.downstream_cos/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.downstream_cos.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.downstream_cos.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.downstream_cos/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.downstream_cos.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.downstream_cos.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.downstream_cos/Object/{object_uid}", "/ves.io.schema.downstream_cos/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.downstream_cos.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.downstream_cos.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.endpoint", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/endpoint", false)
	mdr.PkgsInfo["ves.io.schema.endpoint"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/endpoint/object.proto")
	pInfo.FilesInfo["ves.io/schema/endpoint/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.endpoint.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.endpoint.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/endpoint/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/endpoint/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.endpoint.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.endpoint.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/endpoints"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.endpoint.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/endpoints/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.endpoint.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/endpoints/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.endpoint.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/endpoints"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.endpoint.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/endpoints/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.endpoint.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.endpoint.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.endpoint.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.endpoint.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.endpoint.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.endpoint.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/endpoint/types.proto")
	pInfo.FilesInfo["ves.io/schema/endpoint/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.endpoint.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/endpoint/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.endpoint.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/endpoint/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/endpoint/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.endpoint.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.endpoint.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.endpoint/Objects", "/ves.io.schema.endpoint/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.endpoint.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.endpoint/Object/{object_uid}", "/ves.io.schema.endpoint/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.endpoint.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.endpoint/Object/{object_uid}", "/ves.io.schema.endpoint/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.endpoint.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.endpoint/Objects", "/ves.io.schema.endpoint/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.endpoint.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.endpoint/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.endpoint.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.endpoint/Object/{object_uid}", "/ves.io.schema.endpoint/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.endpoint.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.enhanced_firewall_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/enhanced_firewall_policy", false)
	mdr.PkgsInfo["ves.io.schema.enhanced_firewall_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/enhanced_firewall_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/enhanced_firewall_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.enhanced_firewall_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.enhanced_firewall_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/enhanced_firewall_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/enhanced_firewall_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.enhanced_firewall_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.enhanced_firewall_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/enhanced_firewall_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.enhanced_firewall_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/enhanced_firewall_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.enhanced_firewall_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/enhanced_firewall_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.enhanced_firewall_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/enhanced_firewall_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.enhanced_firewall_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/enhanced_firewall_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.enhanced_firewall_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.enhanced_firewall_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.enhanced_firewall_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.enhanced_firewall_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.enhanced_firewall_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.enhanced_firewall_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/enhanced_firewall_policy/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/enhanced_firewall_policy/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.enhanced_firewall_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("EnhancedFirewallPolicyHits", "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHitsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/enhanced_firewall_policy/hits"}}

	aInfo.RPCsInfo[svcfw.RPCName("EnhancedFirewallPolicyHits")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.CustomDataAPI.EnhancedFirewallPolicyHits"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.enhanced_firewall_policy.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/enhanced_firewall_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/enhanced_firewall_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.enhanced_firewall_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/enhanced_firewall_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.enhanced_firewall_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/enhanced_firewall_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/enhanced_firewall_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.enhanced_firewall_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.enhanced_firewall_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.enhanced_firewall_policy/Objects", "/ves.io.schema.enhanced_firewall_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.enhanced_firewall_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.enhanced_firewall_policy/Object/{object_uid}", "/ves.io.schema.enhanced_firewall_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.enhanced_firewall_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.enhanced_firewall_policy/Object/{object_uid}", "/ves.io.schema.enhanced_firewall_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.enhanced_firewall_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.enhanced_firewall_policy/Objects", "/ves.io.schema.enhanced_firewall_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.enhanced_firewall_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.enhanced_firewall_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.enhanced_firewall_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.enhanced_firewall_policy/Object/{object_uid}", "/ves.io.schema.enhanced_firewall_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.enhanced_firewall_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.enhanced_firewall_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.fast_acl", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl", false)
	mdr.PkgsInfo["ves.io.schema.fast_acl"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl/object.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.fast_acl.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.fast_acl.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.fast_acl.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.fast_acl.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/fast_acls"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.fast_acl.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/fast_acls/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.fast_acl.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acls/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.fast_acl.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acls"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.fast_acl.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/fast_acls/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.fast_acl.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.fast_acl.Object", false)

	rpcInfo = svcfw.NewRPCInfo("FastACLHits", "ves.io.schema.fast_acl.FastACLHitsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/fast_acl/hits"}}

	aInfo.RPCsInfo[svcfw.RPCName("FastACLHits")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.CustomDataAPI.FastACLHits"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.fast_acl.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl/types.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.fast_acl.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.fast_acl.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.fast_acl.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.fast_acl.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.fast_acl/Objects", "/ves.io.schema.fast_acl/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.fast_acl.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.fast_acl/Object/{object_uid}", "/ves.io.schema.fast_acl/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.fast_acl.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl/Object/{object_uid}", "/ves.io.schema.fast_acl/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.fast_acl.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl/Objects", "/ves.io.schema.fast_acl/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.fast_acl.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.fast_acl.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.fast_acl/Object/{object_uid}", "/ves.io.schema.fast_acl/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.fast_acl.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.fast_acl_rule", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl_rule", false)
	mdr.PkgsInfo["ves.io.schema.fast_acl_rule"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl_rule/object.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl_rule/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.fast_acl_rule.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.fast_acl_rule.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl_rule/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl_rule/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.fast_acl_rule.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.fast_acl_rule.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/fast_acl_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.fast_acl_rule.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/fast_acl_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.fast_acl_rule.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acl_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.fast_acl_rule.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acl_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.fast_acl_rule.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/fast_acl_rules/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.fast_acl_rule.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl_rule.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl_rule.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl_rule.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl_rule.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.fast_acl_rule.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl_rule/types.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl_rule/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.fast_acl_rule.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl_rule/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.fast_acl_rule.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fast_acl_rule/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/fast_acl_rule/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.fast_acl_rule.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.fast_acl_rule.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.fast_acl_rule/Objects", "/ves.io.schema.fast_acl_rule/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.fast_acl_rule.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.fast_acl_rule/Object/{object_uid}", "/ves.io.schema.fast_acl_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.fast_acl_rule.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl_rule/Object/{object_uid}", "/ves.io.schema.fast_acl_rule/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.fast_acl_rule.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl_rule/Objects", "/ves.io.schema.fast_acl_rule/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.fast_acl_rule.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl_rule/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.fast_acl_rule.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.fast_acl_rule/Object/{object_uid}", "/ves.io.schema.fast_acl_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.fast_acl_rule.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.fleet", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet", false)
	mdr.PkgsInfo["ves.io.schema.fleet"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fleet/object.proto")
	pInfo.FilesInfo["ves.io/schema/fleet/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.fleet.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.fleet.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fleet/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/fleet/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.fleet.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.fleet.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/fleets"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.fleet.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/fleets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.fleet.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fleets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.fleet.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fleets"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.fleet.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/fleets/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.fleet.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.fleet.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.fleet.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.fleet.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.fleet.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.fleet.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fleet/types.proto")
	pInfo.FilesInfo["ves.io/schema/fleet/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.fleet.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.fleet.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/fleet/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/fleet/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.fleet.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.fleet.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.fleet/Objects", "/ves.io.schema.fleet/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.fleet.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.fleet/Object/{object_uid}", "/ves.io.schema.fleet/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.fleet.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fleet/Object/{object_uid}", "/ves.io.schema.fleet/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.fleet.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fleet/Objects", "/ves.io.schema.fleet/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.fleet.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fleet/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.fleet.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.fleet/Object/{object_uid}", "/ves.io.schema.fleet/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.fleet.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.flow_exporter", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/flow_exporter", false)
	mdr.PkgsInfo["ves.io.schema.flow_exporter"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/flow_exporter/object.proto")
	pInfo.FilesInfo["ves.io/schema/flow_exporter/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.flow_exporter.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.flow_exporter.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/flow_exporter/types.proto")
	pInfo.FilesInfo["ves.io/schema/flow_exporter/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.flow_exporter.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/flow_exporter/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.flow_exporter.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/flow_exporter/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/flow_exporter/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.flow_exporter.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.flow_exporter.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.flow_exporter/Objects", "/ves.io.schema.flow_exporter/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.flow_exporter.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.flow_exporter/Object/{object_uid}", "/ves.io.schema.flow_exporter/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.flow_exporter.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.flow_exporter/Object/{object_uid}", "/ves.io.schema.flow_exporter/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.flow_exporter.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.flow_exporter/Objects", "/ves.io.schema.flow_exporter/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.flow_exporter.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.flow_exporter/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.flow_exporter.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.flow_exporter/Object/{object_uid}", "/ves.io.schema.flow_exporter/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.flow_exporter.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.global_log_receiver", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/global_log_receiver", false)
	mdr.PkgsInfo["ves.io.schema.global_log_receiver"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/global_log_receiver/object.proto")
	pInfo.FilesInfo["ves.io/schema/global_log_receiver/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.http_receiver.auth_choice.auth_basic.password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.http_receiver.auth_choice.auth_token.token"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.http_receiver.tls_choice.use_tls.mtls_choice.mtls_enable.key_url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.datadog_receiver.datadog_api_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.datadog_receiver.tls_choice.use_tls.mtls_choice.mtls_enable.key_url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.splunk_receiver.splunk_hec_token"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.splunk_receiver.tls_choice.use_tls.mtls_choice.mtls_enable.key_url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.elastic_receiver.auth_choice.auth_basic.password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.elastic_receiver.tls_choice.use_tls.mtls_choice.mtls_enable.key_url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.azure_receiver.connection_string"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.azure_event_hubs_receiver.connection_string"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.kafka_receiver.tls_choice.use_tls.mtls_choice.mtls_enable.key_url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.new_relic_receiver.api_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.sumo_logic_receiver.url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.global_log_receiver.Object.spec.gc_spec.receiver.qradar_receiver.tls_choice.use_tls.mtls_choice.mtls_enable.key_url"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000009),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.global_log_receiver.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.global_log_receiver.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/global_log_receiver/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/global_log_receiver/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.global_log_receiver.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.global_log_receiver.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/global_log_receivers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.global_log_receiver.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/global_log_receivers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.global_log_receiver.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/global_log_receivers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.global_log_receiver.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/global_log_receivers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.global_log_receiver.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/global_log_receivers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.global_log_receiver.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.global_log_receiver.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.global_log_receiver.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.global_log_receiver.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.global_log_receiver.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.global_log_receiver.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/global_log_receiver/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/global_log_receiver/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.global_log_receiver.Object", false)

	rpcInfo = svcfw.NewRPCInfo("TestGlobalLogReceiver", "ves.io.schema.global_log_receiver.TestGlobalLogReceiverRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/global_log_receivers/{name}/test"}}

	aInfo.RPCsInfo[svcfw.RPCName("TestGlobalLogReceiver")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.CustomAPI.TestGlobalLogReceiver"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.global_log_receiver.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/global_log_receiver/types.proto")
	pInfo.FilesInfo["ves.io/schema/global_log_receiver/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.global_log_receiver.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/global_log_receiver/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.global_log_receiver.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/global_log_receiver/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/global_log_receiver/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.global_log_receiver.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.global_log_receiver.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.global_log_receiver/Objects", "/ves.io.schema.global_log_receiver/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.global_log_receiver.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.global_log_receiver/Object/{object_uid}", "/ves.io.schema.global_log_receiver/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.global_log_receiver.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.global_log_receiver/Object/{object_uid}", "/ves.io.schema.global_log_receiver/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.global_log_receiver.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.global_log_receiver/Objects", "/ves.io.schema.global_log_receiver/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.global_log_receiver.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.global_log_receiver/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.global_log_receiver.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.global_log_receiver/Object/{object_uid}", "/ves.io.schema.global_log_receiver/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.global_log_receiver.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.global_log_receiver.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.healthcheck", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/healthcheck", false)
	mdr.PkgsInfo["ves.io.schema.healthcheck"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/healthcheck/object.proto")
	pInfo.FilesInfo["ves.io/schema/healthcheck/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.healthcheck.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.healthcheck.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/healthcheck/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/healthcheck/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.healthcheck.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.healthcheck.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/healthchecks"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.healthcheck.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/healthchecks/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.healthcheck.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/healthchecks/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.healthcheck.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/healthchecks"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.healthcheck.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/healthchecks/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.healthcheck.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.healthcheck.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.healthcheck.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.healthcheck.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.healthcheck.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.healthcheck.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/healthcheck/types.proto")
	pInfo.FilesInfo["ves.io/schema/healthcheck/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.healthcheck.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/healthcheck/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.healthcheck.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/healthcheck/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/healthcheck/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.healthcheck.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.healthcheck.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.healthcheck/Objects", "/ves.io.schema.healthcheck/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.healthcheck.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.healthcheck/Object/{object_uid}", "/ves.io.schema.healthcheck/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.healthcheck.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.healthcheck/Object/{object_uid}", "/ves.io.schema.healthcheck/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.healthcheck.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.healthcheck/Objects", "/ves.io.schema.healthcheck/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.healthcheck.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.healthcheck/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.healthcheck.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.healthcheck/Object/{object_uid}", "/ves.io.schema.healthcheck/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.healthcheck.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.infraprotect_deny_list_rule", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_deny_list_rule", false)
	mdr.PkgsInfo["ves.io.schema.infraprotect_deny_list_rule"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_deny_list_rule/object.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_deny_list_rule/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.infraprotect_deny_list_rule.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.infraprotect_deny_list_rule.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_deny_list_rule/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_deny_list_rule/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.infraprotect_deny_list_rule.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.infraprotect_deny_list_rule.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/infraprotect_deny_list_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.infraprotect_deny_list_rule.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/infraprotect_deny_list_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.infraprotect_deny_list_rule.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/infraprotect_deny_list_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.infraprotect_deny_list_rule.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/infraprotect_deny_list_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.infraprotect_deny_list_rule.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/infraprotect_deny_list_rules/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.infraprotect_deny_list_rule.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_deny_list_rule.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_deny_list_rule.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_deny_list_rule.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_deny_list_rule.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_deny_list_rule.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_deny_list_rule/types.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_deny_list_rule/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.infraprotect_deny_list_rule.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_deny_list_rule/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.infraprotect_deny_list_rule.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_deny_list_rule/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_deny_list_rule/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.infraprotect_deny_list_rule.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.infraprotect_deny_list_rule.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.infraprotect_deny_list_rule/Objects", "/ves.io.schema.infraprotect_deny_list_rule/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.infraprotect_deny_list_rule.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.infraprotect_deny_list_rule/Object/{object_uid}", "/ves.io.schema.infraprotect_deny_list_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.infraprotect_deny_list_rule.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_deny_list_rule/Object/{object_uid}", "/ves.io.schema.infraprotect_deny_list_rule/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.infraprotect_deny_list_rule.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_deny_list_rule/Objects", "/ves.io.schema.infraprotect_deny_list_rule/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.infraprotect_deny_list_rule.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_deny_list_rule/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.infraprotect_deny_list_rule.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.infraprotect_deny_list_rule/Object/{object_uid}", "/ves.io.schema.infraprotect_deny_list_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_deny_list_rule.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.infraprotect_deny_list_rule.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.infraprotect_firewall_rule", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_firewall_rule", false)
	mdr.PkgsInfo["ves.io.schema.infraprotect_firewall_rule"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_firewall_rule/object.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_firewall_rule/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.infraprotect_firewall_rule.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.infraprotect_firewall_rule.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_firewall_rule/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_firewall_rule/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.infraprotect_firewall_rule.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.infraprotect_firewall_rule.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/infraprotect_firewall_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.infraprotect_firewall_rule.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/infraprotect_firewall_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.infraprotect_firewall_rule.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/infraprotect_firewall_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.infraprotect_firewall_rule.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/infraprotect_firewall_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.infraprotect_firewall_rule.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/infraprotect_firewall_rules/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.infraprotect_firewall_rule.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_rule.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_rule.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_rule.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_rule.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_rule.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_firewall_rule/types.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_firewall_rule/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.infraprotect_firewall_rule.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_firewall_rule/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.infraprotect_firewall_rule.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_firewall_rule/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_firewall_rule/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.infraprotect_firewall_rule.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.infraprotect_firewall_rule.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.infraprotect_firewall_rule/Objects", "/ves.io.schema.infraprotect_firewall_rule/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.infraprotect_firewall_rule.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.infraprotect_firewall_rule/Object/{object_uid}", "/ves.io.schema.infraprotect_firewall_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.infraprotect_firewall_rule.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_firewall_rule/Object/{object_uid}", "/ves.io.schema.infraprotect_firewall_rule/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.infraprotect_firewall_rule.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_firewall_rule/Objects", "/ves.io.schema.infraprotect_firewall_rule/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.infraprotect_firewall_rule.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_firewall_rule/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.infraprotect_firewall_rule.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.infraprotect_firewall_rule/Object/{object_uid}", "/ves.io.schema.infraprotect_firewall_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_rule.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.infraprotect_firewall_rule.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.infraprotect_firewall_ruleset", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_firewall_ruleset", false)
	mdr.PkgsInfo["ves.io.schema.infraprotect_firewall_ruleset"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_firewall_ruleset/object.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_firewall_ruleset/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.infraprotect_firewall_ruleset.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.infraprotect_firewall_ruleset.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_firewall_ruleset/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_firewall_ruleset/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.infraprotect_firewall_ruleset.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.infraprotect_firewall_ruleset.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/infraprotect_firewall_rulesets"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.infraprotect_firewall_ruleset.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/infraprotect_firewall_rulesets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.infraprotect_firewall_ruleset.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/infraprotect_firewall_rulesets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.infraprotect_firewall_ruleset.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/infraprotect_firewall_rulesets"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.infraprotect_firewall_ruleset.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/infraprotect_firewall_rulesets/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.infraprotect_firewall_ruleset.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_ruleset.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_ruleset.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_ruleset.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_ruleset.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_firewall_ruleset.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_firewall_ruleset/types.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_firewall_ruleset/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.infraprotect_firewall_ruleset.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_firewall_ruleset/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.infraprotect_firewall_ruleset.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_firewall_ruleset/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_firewall_ruleset/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.infraprotect_firewall_ruleset.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.infraprotect_firewall_ruleset.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.infraprotect_firewall_ruleset/Objects", "/ves.io.schema.infraprotect_firewall_ruleset/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.infraprotect_firewall_ruleset.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.infraprotect_firewall_ruleset/Object/{object_uid}", "/ves.io.schema.infraprotect_firewall_ruleset/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.infraprotect_firewall_ruleset.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_firewall_ruleset/Object/{object_uid}", "/ves.io.schema.infraprotect_firewall_ruleset/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.infraprotect_firewall_ruleset.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_firewall_ruleset/Objects", "/ves.io.schema.infraprotect_firewall_ruleset/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.infraprotect_firewall_ruleset.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_firewall_ruleset/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.infraprotect_firewall_ruleset.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.infraprotect_firewall_ruleset/Object/{object_uid}", "/ves.io.schema.infraprotect_firewall_ruleset/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_firewall_ruleset.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.infraprotect_firewall_ruleset.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.infraprotect_information", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_information", false)
	mdr.PkgsInfo["ves.io.schema.infraprotect_information"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_information/object.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_information/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.infraprotect_information.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.infraprotect_information.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_information/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_information/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.infraprotect_information.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.infraprotect_information.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/infraprotect_informations/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_information.API.Get"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.infraprotect_information.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.infraprotect_information.GetRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_information/types.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_information/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.infraprotect_information.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_information/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.infraprotect_information.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/infraprotect_information/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/infraprotect_information/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.infraprotect_information.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.infraprotect_information.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.infraprotect_information/Objects", "/ves.io.schema.infraprotect_information/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_information.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.infraprotect_information.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.infraprotect_information/Object/{object_uid}", "/ves.io.schema.infraprotect_information/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_information.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.infraprotect_information.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_information/Object/{object_uid}", "/ves.io.schema.infraprotect_information/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_information.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.infraprotect_information.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_information/Objects", "/ves.io.schema.infraprotect_information/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_information.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.infraprotect_information.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.infraprotect_information/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_information.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.infraprotect_information.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.infraprotect_information/Object/{object_uid}", "/ves.io.schema.infraprotect_information/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.infraprotect_information.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.infraprotect_information.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.instance_management.auth", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/instance_management/auth", false)
	mdr.PkgsInfo["ves.io.schema.instance_management.auth"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/auth/private_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/auth/private_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomPrivateAPI", "CUSTOM_PRIVATE", "", false)

	rpcInfo = svcfw.NewRPCInfo("LookupAuthConfig", "ves.io.schema.instance_management.auth.LookupAuthConfigRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/private/custom/namespaces/system/tenant/auth_config", "/ves.io.schema/introspect/read/namespaces/system/tenant/auth_config"}}

	aInfo.RPCsInfo[svcfw.RPCName("LookupAuthConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupAuthConfig"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("LookupUserStatus", "ves.io.schema.instance_management.auth.LookupUserStatusRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema/introspect/read/namespaces/system/tenant/user_status"}}

	aInfo.RPCsInfo[svcfw.RPCName("LookupUserStatus")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupUserStatus"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ValidateAPICredential", "ves.io.schema.instance_management.auth.ValidateAPICredentialRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/custom/namespaces/system/api_credentials/validation", "/ves.io.schema/introspect/read/namespaces/system/api_credentials/validation"}}

	aInfo.RPCsInfo[svcfw.RPCName("ValidateAPICredential")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.auth.CustomPrivateAPI.ValidateAPICredential"] = rpcInfo

	fInfo.APIsInfo["CustomPrivateAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.instance_management.auth.CustomPrivateAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/auth/types.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/auth/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.instance_management.f5xc_instance", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/instance_management/f5xc_instance", false)
	mdr.PkgsInfo["ves.io.schema.instance_management.f5xc_instance"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/f5xc_instance/objects.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/f5xc_instance/objects.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.instance_management.f5xc_instance.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/f5xc_instance/types.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/f5xc_instance/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.instance_management.f5xc_instance.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/instance_management/f5xc_instance/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.instance_management.f5xc_instance.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/f5xc_instance/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/f5xc_instance/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.instance_management.f5xc_instance.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.instance_management.f5xc_instance.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.instance_management.f5xc_instance/Objects", "/ves.io.schema.instance_management.f5xc_instance/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.f5xc_instance.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.instance_management.f5xc_instance.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.instance_management.f5xc_instance/Object/{object_uid}", "/ves.io.schema.instance_management.f5xc_instance/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.f5xc_instance.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.instance_management.f5xc_instance.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.f5xc_instance/Object/{object_uid}", "/ves.io.schema.instance_management.f5xc_instance/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.f5xc_instance.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.instance_management.f5xc_instance.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.f5xc_instance/Objects", "/ves.io.schema.instance_management.f5xc_instance/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.f5xc_instance.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.instance_management.f5xc_instance.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.f5xc_instance/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.f5xc_instance.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.instance_management.f5xc_instance.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.instance_management.f5xc_instance/Object/{object_uid}", "/ves.io.schema.instance_management.f5xc_instance/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.f5xc_instance.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.instance_management.f5xc_instance.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.instance_management.tenant_allocation", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/instance_management/tenant_allocation", false)
	mdr.PkgsInfo["ves.io.schema.instance_management.tenant_allocation"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/tenant_allocation/objects.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/tenant_allocation/objects.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.instance_management.tenant_allocation.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/tenant_allocation/types.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/tenant_allocation/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.instance_management.tenant_allocation.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/instance_management/tenant_allocation/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.instance_management.tenant_allocation.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/tenant_allocation/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/tenant_allocation/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.instance_management.tenant_allocation.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.instance_management.tenant_allocation.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.instance_management.tenant_allocation/Objects", "/ves.io.schema.instance_management.tenant_allocation/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.tenant_allocation.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.instance_management.tenant_allocation.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.instance_management.tenant_allocation/Object/{object_uid}", "/ves.io.schema.instance_management.tenant_allocation/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.tenant_allocation.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.instance_management.tenant_allocation.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.tenant_allocation/Object/{object_uid}", "/ves.io.schema.instance_management.tenant_allocation/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.tenant_allocation.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.instance_management.tenant_allocation.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.tenant_allocation/Objects", "/ves.io.schema.instance_management.tenant_allocation/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.tenant_allocation.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.instance_management.tenant_allocation.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.tenant_allocation/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.tenant_allocation.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.instance_management.tenant_allocation.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.instance_management.tenant_allocation/Object/{object_uid}", "/ves.io.schema.instance_management.tenant_allocation/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.tenant_allocation.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.instance_management.tenant_allocation.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.instance_management.v2_signup", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/instance_management/v2_signup", false)
	mdr.PkgsInfo["ves.io.schema.instance_management.v2_signup"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/v2_signup/object.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/v2_signup/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.instance_management.v2_signup.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/v2_signup/types.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/v2_signup/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.instance_management.v2_signup.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/instance_management/v2_signup/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.instance_management.v2_signup.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/instance_management/v2_signup/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/instance_management/v2_signup/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.instance_management.v2_signup.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.instance_management.v2_signup.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.instance_management.v2_signup/Objects", "/ves.io.schema.instance_management.v2_signup/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.v2_signup.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.instance_management.v2_signup.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.instance_management.v2_signup/Object/{object_uid}", "/ves.io.schema.instance_management.v2_signup/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.v2_signup.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.instance_management.v2_signup.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.v2_signup/Object/{object_uid}", "/ves.io.schema.instance_management.v2_signup/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.v2_signup.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.instance_management.v2_signup.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.v2_signup/Objects", "/ves.io.schema.instance_management.v2_signup/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.v2_signup.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.instance_management.v2_signup.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.instance_management.v2_signup/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.v2_signup.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.instance_management.v2_signup.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.instance_management.v2_signup/Object/{object_uid}", "/ves.io.schema.instance_management.v2_signup/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.instance_management.v2_signup.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.instance_management.v2_signup.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.ip_prefix_set", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ip_prefix_set", false)
	mdr.PkgsInfo["ves.io.schema.ip_prefix_set"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/ip_prefix_set/object.proto")
	pInfo.FilesInfo["ves.io/schema/ip_prefix_set/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.ip_prefix_set.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.ip_prefix_set.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/ip_prefix_set/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/ip_prefix_set/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.ip_prefix_set.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.ip_prefix_set.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/ip_prefix_sets"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.ip_prefix_set.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/ip_prefix_sets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.ip_prefix_set.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/ip_prefix_sets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.ip_prefix_set.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/ip_prefix_sets"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.ip_prefix_set.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/ip_prefix_sets/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.ip_prefix_set.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.ip_prefix_set.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.ip_prefix_set.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.ip_prefix_set.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.ip_prefix_set.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.ip_prefix_set.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/ip_prefix_set/types.proto")
	pInfo.FilesInfo["ves.io/schema/ip_prefix_set/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.ip_prefix_set.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ip_prefix_set/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.ip_prefix_set.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/ip_prefix_set/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/ip_prefix_set/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.ip_prefix_set.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.ip_prefix_set.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.ip_prefix_set/Objects", "/ves.io.schema.ip_prefix_set/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.ip_prefix_set.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.ip_prefix_set/Object/{object_uid}", "/ves.io.schema.ip_prefix_set/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.ip_prefix_set.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ip_prefix_set/Object/{object_uid}", "/ves.io.schema.ip_prefix_set/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.ip_prefix_set.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ip_prefix_set/Objects", "/ves.io.schema.ip_prefix_set/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.ip_prefix_set.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ip_prefix_set/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.ip_prefix_set.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.ip_prefix_set/Object/{object_uid}", "/ves.io.schema.ip_prefix_set/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.ip_prefix_set.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.k8s_cluster", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster", false)
	mdr.PkgsInfo["ves.io.schema.k8s_cluster"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster/object.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.k8s_cluster.Object.spec.gc_spec.apps_choice.cluster_wide_app_list.cluster_wide_apps.app_choice.argo_cd.local_domain.password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000006),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.k8s_cluster.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.k8s_cluster.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.k8s_cluster.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.k8s_cluster.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/k8s_clusters"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.k8s_cluster.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/k8s_clusters/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.k8s_cluster.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_clusters/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.k8s_cluster.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_clusters"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.k8s_cluster.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/k8s_clusters/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.k8s_cluster.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster/types.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.k8s_cluster.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.k8s_cluster.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.k8s_cluster.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.k8s_cluster.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.k8s_cluster/Objects", "/ves.io.schema.k8s_cluster/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.k8s_cluster.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.k8s_cluster/Object/{object_uid}", "/ves.io.schema.k8s_cluster/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.k8s_cluster.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster/Object/{object_uid}", "/ves.io.schema.k8s_cluster/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.k8s_cluster.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster/Objects", "/ves.io.schema.k8s_cluster/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.k8s_cluster.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.k8s_cluster.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.k8s_cluster/Object/{object_uid}", "/ves.io.schema.k8s_cluster/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.k8s_cluster.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.k8s_cluster_role", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role", false)
	mdr.PkgsInfo["ves.io.schema.k8s_cluster_role"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster_role/object.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.k8s_cluster_role.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.k8s_cluster_role.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster_role/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.k8s_cluster_role.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.k8s_cluster_role.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/k8s_cluster_roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.k8s_cluster_role.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/k8s_cluster_roles/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.k8s_cluster_role.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_cluster_roles/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.k8s_cluster_role.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_cluster_roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.k8s_cluster_role.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/k8s_cluster_roles/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.k8s_cluster_role.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster_role/types.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.k8s_cluster_role.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.k8s_cluster_role.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster_role/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.k8s_cluster_role.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.k8s_cluster_role.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.k8s_cluster_role/Objects", "/ves.io.schema.k8s_cluster_role/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.k8s_cluster_role.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.k8s_cluster_role/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.k8s_cluster_role.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.k8s_cluster_role.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role/Objects", "/ves.io.schema.k8s_cluster_role/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.k8s_cluster_role.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.k8s_cluster_role.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.k8s_cluster_role/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.k8s_cluster_role.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.k8s_cluster_role_binding", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role_binding", false)
	mdr.PkgsInfo["ves.io.schema.k8s_cluster_role_binding"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster_role_binding/object.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role_binding/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.k8s_cluster_role_binding.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.k8s_cluster_role_binding.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster_role_binding/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role_binding/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.k8s_cluster_role_binding.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.k8s_cluster_role_binding.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/k8s_cluster_role_bindings"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.k8s_cluster_role_binding.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/k8s_cluster_role_bindings/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.k8s_cluster_role_binding.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_cluster_role_bindings/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.k8s_cluster_role_binding.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_cluster_role_bindings"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.k8s_cluster_role_binding.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/k8s_cluster_role_bindings/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.k8s_cluster_role_binding.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster_role_binding/types.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role_binding/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.k8s_cluster_role_binding.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role_binding/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.k8s_cluster_role_binding.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_cluster_role_binding/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role_binding/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.k8s_cluster_role_binding.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.k8s_cluster_role_binding/Objects", "/ves.io.schema.k8s_cluster_role_binding/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.k8s_cluster_role_binding/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role_binding/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role_binding/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role_binding/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role_binding/Objects", "/ves.io.schema.k8s_cluster_role_binding/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role_binding/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.k8s_cluster_role_binding/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role_binding/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.k8s_pod_security_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_pod_security_policy", false)
	mdr.PkgsInfo["ves.io.schema.k8s_pod_security_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_pod_security_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_pod_security_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.k8s_pod_security_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.k8s_pod_security_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_pod_security_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_pod_security_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.k8s_pod_security_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.k8s_pod_security_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/k8s_pod_security_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.k8s_pod_security_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/k8s_pod_security_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.k8s_pod_security_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_pod_security_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.k8s_pod_security_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_pod_security_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.k8s_pod_security_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/k8s_pod_security_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.k8s_pod_security_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_pod_security_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_pod_security_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.k8s_pod_security_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_pod_security_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.k8s_pod_security_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/k8s_pod_security_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/k8s_pod_security_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.k8s_pod_security_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.k8s_pod_security_policy/Objects", "/ves.io.schema.k8s_pod_security_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.k8s_pod_security_policy/Object/{object_uid}", "/ves.io.schema.k8s_pod_security_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_pod_security_policy/Object/{object_uid}", "/ves.io.schema.k8s_pod_security_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_pod_security_policy/Objects", "/ves.io.schema.k8s_pod_security_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_pod_security_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.k8s_pod_security_policy/Object/{object_uid}", "/ves.io.schema.k8s_pod_security_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.known_label", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/known_label", false)
	mdr.PkgsInfo["ves.io.schema.known_label"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/known_label/object.proto")
	pInfo.FilesInfo["ves.io/schema/known_label/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.known_label.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.known_label.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/known_label/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/known_label/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.known_label.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.known_label.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/known_label/create"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.CustomAPI.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.known_label.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/known_label/delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.CustomAPI.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.known_label.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/known_labels"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.CustomAPI.Get"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.known_label.CustomAPI"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.known_label.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.known_label.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.known_label.GetRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/known_label/types.proto")
	pInfo.FilesInfo["ves.io/schema/known_label/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.known_label.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/known_label/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.known_label.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/known_label/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/known_label/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.known_label.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.known_label.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.known_label/Objects", "/ves.io.schema.known_label/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.known_label.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.known_label/Object/{object_uid}", "/ves.io.schema.known_label/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.known_label.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.known_label/Object/{object_uid}", "/ves.io.schema.known_label/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.known_label.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.known_label/Objects", "/ves.io.schema.known_label/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.known_label.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.known_label/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.known_label.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.known_label/Object/{object_uid}", "/ves.io.schema.known_label/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.known_label.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.known_label_key", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/known_label_key", false)
	mdr.PkgsInfo["ves.io.schema.known_label_key"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/known_label_key/object.proto")
	pInfo.FilesInfo["ves.io/schema/known_label_key/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.known_label_key.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/known_label_key/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/known_label_key/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.known_label_key.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.known_label_key.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/known_label_key/create"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.CustomAPI.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.known_label_key.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/known_label_key/delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.CustomAPI.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.known_label_key.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/known_label_keys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.CustomAPI.Get"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.known_label_key.CustomAPI"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.known_label_key.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.known_label_key.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.known_label_key.GetRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/known_label_key/types.proto")
	pInfo.FilesInfo["ves.io/schema/known_label_key/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.known_label_key.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/known_label_key/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.known_label_key.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/known_label_key/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/known_label_key/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.known_label_key.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.known_label_key.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.known_label_key/Objects", "/ves.io.schema.known_label_key/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.known_label_key.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.known_label_key/Object/{object_uid}", "/ves.io.schema.known_label_key/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.known_label_key.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.known_label_key/Object/{object_uid}", "/ves.io.schema.known_label_key/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.known_label_key.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.known_label_key/Objects", "/ves.io.schema.known_label_key/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.known_label_key.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.known_label_key/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.known_label_key.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.known_label_key/Object/{object_uid}", "/ves.io.schema.known_label_key/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.known_label_key.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.known_label_key.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.l7_acl", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/l7_acl", false)
	mdr.PkgsInfo["ves.io.schema.l7_acl"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/l7_acl/object.proto")
	pInfo.FilesInfo["ves.io/schema/l7_acl/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.l7_acl.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.l7_acl.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/l7_acl/types.proto")
	pInfo.FilesInfo["ves.io/schema/l7_acl/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.l7_acl.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/l7_acl/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.l7_acl.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/l7_acl/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/l7_acl/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.l7_acl.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.l7_acl.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.l7_acl/Objects", "/ves.io.schema.l7_acl/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.l7_acl.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.l7_acl.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.l7_acl/Object/{object_uid}", "/ves.io.schema.l7_acl/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.l7_acl.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.l7_acl.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.l7_acl/Object/{object_uid}", "/ves.io.schema.l7_acl/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.l7_acl.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.l7_acl.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.l7_acl/Objects", "/ves.io.schema.l7_acl/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.l7_acl.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.l7_acl.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.l7_acl/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.l7_acl.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.l7_acl.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.l7_acl/Object/{object_uid}", "/ves.io.schema.l7_acl/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.l7_acl.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.l7_acl.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log", false)
	mdr.PkgsInfo["ves.io.schema.log"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/log/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.log.Object", false)

	rpcInfo = svcfw.NewRPCInfo("AccessLogAggregationQuery", "ves.io.schema.log.AccessLogAggregationRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/access_logs/aggregation"}}

	aInfo.RPCsInfo[svcfw.RPCName("AccessLogAggregationQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.AccessLogAggregationQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("AccessLogQueryV2", "ves.io.schema.log.AccessLogRequestV2", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/access_logs"}}

	aInfo.RPCsInfo[svcfw.RPCName("AccessLogQueryV2")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.AccessLogQueryV2"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("AccessLogScrollQuery", "ves.io.schema.log.LogScrollRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/access_logs/scroll"}, "POST": []string{"/public/namespaces/{namespace}/access_logs/scroll"}}

	aInfo.RPCsInfo[svcfw.RPCName("AccessLogScrollQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.AccessLogScrollQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("AuditLogAggregationQuery", "ves.io.schema.log.AuditLogAggregationRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/audit_logs/aggregation"}}

	aInfo.RPCsInfo[svcfw.RPCName("AuditLogAggregationQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.AuditLogAggregationQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("AuditLogQueryV2", "ves.io.schema.log.AuditLogRequestV2", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/audit_logs"}}

	aInfo.RPCsInfo[svcfw.RPCName("AuditLogQueryV2")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.AuditLogQueryV2"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("AuditLogScrollQuery", "ves.io.schema.log.LogScrollRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/audit_logs/scroll"}, "POST": []string{"/public/namespaces/{namespace}/audit_logs/scroll"}}

	aInfo.RPCsInfo[svcfw.RPCName("AuditLogScrollQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.AuditLogScrollQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("FirewallLogAggregationQuery", "ves.io.schema.log.FirewallLogAggregationRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/firewall_logs/aggregation"}}

	aInfo.RPCsInfo[svcfw.RPCName("FirewallLogAggregationQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.FirewallLogAggregationQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("FirewallLogQuery", "ves.io.schema.log.FirewallLogRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/firewall_logs"}}

	aInfo.RPCsInfo[svcfw.RPCName("FirewallLogQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.FirewallLogQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("FirewallLogScrollQuery", "ves.io.schema.log.LogScrollRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/firewall_logs/scroll"}, "POST": []string{"/public/namespaces/{namespace}/firewall_logs/scroll"}}

	aInfo.RPCsInfo[svcfw.RPCName("FirewallLogScrollQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.FirewallLogScrollQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("K8SAuditLogAggregationQuery", "ves.io.schema.log.K8SAuditLogAggregationRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/k8s_audit_logs/aggregation"}}

	aInfo.RPCsInfo[svcfw.RPCName("K8SAuditLogAggregationQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SAuditLogAggregationQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("K8SAuditLogQuery", "ves.io.schema.log.K8SAuditLogRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/k8s_audit_logs"}}

	aInfo.RPCsInfo[svcfw.RPCName("K8SAuditLogQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SAuditLogQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("K8SAuditLogScrollQuery", "ves.io.schema.log.LogScrollRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_audit_logs/scroll"}, "POST": []string{"/public/namespaces/{namespace}/k8s_audit_logs/scroll"}}

	aInfo.RPCsInfo[svcfw.RPCName("K8SAuditLogScrollQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SAuditLogScrollQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("K8SEventsAggregationQuery", "ves.io.schema.log.K8SEventsAggregationRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/k8s_events/aggregation"}}

	aInfo.RPCsInfo[svcfw.RPCName("K8SEventsAggregationQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SEventsAggregationQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("K8SEventsQuery", "ves.io.schema.log.K8SEventsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/k8s_events"}}

	aInfo.RPCsInfo[svcfw.RPCName("K8SEventsQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SEventsQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("K8SEventsScrollQuery", "ves.io.schema.log.LogScrollRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_events/scroll"}, "POST": []string{"/public/namespaces/{namespace}/k8s_events/scroll"}}

	aInfo.RPCsInfo[svcfw.RPCName("K8SEventsScrollQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SEventsScrollQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("VK8SAuditLogAggregationQuery", "ves.io.schema.log.VK8SAuditLogAggregationRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/vk8s_audit_logs/aggregation"}}

	aInfo.RPCsInfo[svcfw.RPCName("VK8SAuditLogAggregationQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SAuditLogAggregationQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("VK8SAuditLogQuery", "ves.io.schema.log.VK8SAuditLogRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/vk8s_audit_logs"}}

	aInfo.RPCsInfo[svcfw.RPCName("VK8SAuditLogQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SAuditLogQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("VK8SAuditLogScrollQuery", "ves.io.schema.log.LogScrollRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/vk8s_audit_logs/scroll"}, "POST": []string{"/public/namespaces/{namespace}/vk8s_audit_logs/scroll"}}

	aInfo.RPCsInfo[svcfw.RPCName("VK8SAuditLogScrollQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SAuditLogScrollQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("VK8SEventsAggregationQuery", "ves.io.schema.log.VK8SEventsAggregationRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/vk8s_events/aggregation"}}

	aInfo.RPCsInfo[svcfw.RPCName("VK8SEventsAggregationQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SEventsAggregationQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("VK8SEventsQuery", "ves.io.schema.log.VK8SEventsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/vk8s_events"}}

	aInfo.RPCsInfo[svcfw.RPCName("VK8SEventsQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SEventsQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("VK8SEventsScrollQuery", "ves.io.schema.log.LogScrollRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/vk8s_events/scroll"}, "POST": []string{"/public/namespaces/{namespace}/vk8s_events/scroll"}}

	aInfo.RPCsInfo[svcfw.RPCName("VK8SEventsScrollQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SEventsScrollQuery"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.log.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/types.proto")
	pInfo.FilesInfo["ves.io/schema/log/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log.access_log", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/access_log", false)
	mdr.PkgsInfo["ves.io.schema.log.access_log"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/access_log/types.proto")
	pInfo.FilesInfo["ves.io/schema/log/access_log/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log.audit_log", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/audit_log", false)
	mdr.PkgsInfo["ves.io.schema.log.audit_log"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/audit_log/types.proto")
	pInfo.FilesInfo["ves.io/schema/log/audit_log/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log.firewall_log", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/firewall_log", false)
	mdr.PkgsInfo["ves.io.schema.log.firewall_log"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/firewall_log/types.proto")
	pInfo.FilesInfo["ves.io/schema/log/firewall_log/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log.k8s_audit_log", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/k8s_audit_log", false)
	mdr.PkgsInfo["ves.io.schema.log.k8s_audit_log"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/k8s_audit_log/types.proto")
	pInfo.FilesInfo["ves.io/schema/log/k8s_audit_log/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log.k8s_events", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/k8s_events", false)
	mdr.PkgsInfo["ves.io.schema.log.k8s_events"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/k8s_events/types.proto")
	pInfo.FilesInfo["ves.io/schema/log/k8s_events/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log.vk8s_audit_log", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/vk8s_audit_log", false)
	mdr.PkgsInfo["ves.io.schema.log.vk8s_audit_log"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/vk8s_audit_log/types.proto")
	pInfo.FilesInfo["ves.io/schema/log/vk8s_audit_log/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log.vk8s_events", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/vk8s_events", false)
	mdr.PkgsInfo["ves.io.schema.log.vk8s_events"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log/vk8s_events/types.proto")
	pInfo.FilesInfo["ves.io/schema/log/vk8s_events/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log_receiver", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log_receiver", false)
	mdr.PkgsInfo["ves.io.schema.log_receiver"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log_receiver/object.proto")
	pInfo.FilesInfo["ves.io/schema/log_receiver/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.log_receiver.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.log_receiver.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log_receiver/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/log_receiver/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.log_receiver.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.log_receiver.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/log_receivers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.log_receiver.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/log_receivers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.log_receiver.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/log_receivers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.log_receiver.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/log_receivers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.log_receiver.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/log_receivers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.log_receiver.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.log_receiver.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.log_receiver.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.log_receiver.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.log_receiver.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.log_receiver.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log_receiver/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/log_receiver/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.log_receiver.Object", false)

	rpcInfo = svcfw.NewRPCInfo("TestLogReceiver", "ves.io.schema.log_receiver.TestLogReceiverRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/log_receivers/{name}/test"}}

	aInfo.RPCsInfo[svcfw.RPCName("TestLogReceiver")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.CustomAPI.TestLogReceiver"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.log_receiver.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log_receiver/types.proto")
	pInfo.FilesInfo["ves.io/schema/log_receiver/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.log_receiver.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log_receiver/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.log_receiver.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/log_receiver/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/log_receiver/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.log_receiver.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.log_receiver.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.log_receiver/Objects", "/ves.io.schema.log_receiver/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.log_receiver.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.log_receiver/Object/{object_uid}", "/ves.io.schema.log_receiver/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.log_receiver.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.log_receiver/Object/{object_uid}", "/ves.io.schema.log_receiver/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.log_receiver.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.log_receiver/Objects", "/ves.io.schema.log_receiver/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.log_receiver.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.log_receiver/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.log_receiver.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.log_receiver/Object/{object_uid}", "/ves.io.schema.log_receiver/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.log_receiver.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.malicious_user_mitigation", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/malicious_user_mitigation", false)
	mdr.PkgsInfo["ves.io.schema.malicious_user_mitigation"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/malicious_user_mitigation/object.proto")
	pInfo.FilesInfo["ves.io/schema/malicious_user_mitigation/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.malicious_user_mitigation.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.malicious_user_mitigation.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/malicious_user_mitigation/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/malicious_user_mitigation/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.malicious_user_mitigation.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.malicious_user_mitigation.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/malicious_user_mitigations"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.malicious_user_mitigation.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/malicious_user_mitigations/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.malicious_user_mitigation.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/malicious_user_mitigations/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.malicious_user_mitigation.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/malicious_user_mitigations"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.malicious_user_mitigation.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/malicious_user_mitigations/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.malicious_user_mitigation.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/malicious_user_mitigation/types.proto")
	pInfo.FilesInfo["ves.io/schema/malicious_user_mitigation/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.malicious_user_mitigation.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/malicious_user_mitigation/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.malicious_user_mitigation.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/malicious_user_mitigation/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/malicious_user_mitigation/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.malicious_user_mitigation.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.malicious_user_mitigation.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.malicious_user_mitigation/Objects", "/ves.io.schema.malicious_user_mitigation/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.malicious_user_mitigation.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.malicious_user_mitigation/Object/{object_uid}", "/ves.io.schema.malicious_user_mitigation/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.malicious_user_mitigation.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.malicious_user_mitigation/Object/{object_uid}", "/ves.io.schema.malicious_user_mitigation/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.malicious_user_mitigation.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.malicious_user_mitigation/Objects", "/ves.io.schema.malicious_user_mitigation/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.malicious_user_mitigation.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.malicious_user_mitigation/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.malicious_user_mitigation.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.malicious_user_mitigation/Object/{object_uid}", "/ves.io.schema.malicious_user_mitigation/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.malicious_user_mitigation.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.marketplace.aws_account", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/marketplace/aws_account", false)
	mdr.PkgsInfo["ves.io.schema.marketplace.aws_account"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/marketplace/aws_account/object.proto")
	pInfo.FilesInfo["ves.io/schema/marketplace/aws_account/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.marketplace.aws_account.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/marketplace/aws_account/public_onboard_customeapi.proto")
	pInfo.FilesInfo["ves.io/schema/marketplace/aws_account/public_onboard_customeapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("OnboardCustomAPI", "CUSTOM_PUBLIC", "", false)

	rpcInfo = svcfw.NewRPCInfo("RegisterNewAWSAccount", "ves.io.schema.marketplace.aws_account.RegistrationRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/no_auth/namespaces/system/aws/f5xc-saas/register"}}

	aInfo.RPCsInfo[svcfw.RPCName("RegisterNewAWSAccount")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.marketplace.aws_account.OnboardCustomAPI.RegisterNewAWSAccount"] = rpcInfo

	fInfo.APIsInfo["OnboardCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.marketplace.aws_account.OnboardCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/marketplace/aws_account/types.proto")
	pInfo.FilesInfo["ves.io/schema/marketplace/aws_account/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.marketplace.aws_account.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/marketplace/aws_account/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.marketplace.aws_account.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/marketplace/aws_account/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/marketplace/aws_account/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.marketplace.aws_account.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.marketplace.aws_account.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.marketplace.aws_account/Objects", "/ves.io.schema.marketplace.aws_account/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.marketplace.aws_account.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.marketplace.aws_account.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.marketplace.aws_account/Object/{object_uid}", "/ves.io.schema.marketplace.aws_account/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.marketplace.aws_account.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.marketplace.aws_account.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.marketplace.aws_account/Object/{object_uid}", "/ves.io.schema.marketplace.aws_account/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.marketplace.aws_account.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.marketplace.aws_account.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.marketplace.aws_account/Objects", "/ves.io.schema.marketplace.aws_account/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.marketplace.aws_account.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.marketplace.aws_account.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.marketplace.aws_account/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.marketplace.aws_account.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.marketplace.aws_account.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.marketplace.aws_account/Object/{object_uid}", "/ves.io.schema.marketplace.aws_account/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.marketplace.aws_account.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.marketplace.aws_account.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.namespace", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/namespace", false)
	mdr.PkgsInfo["ves.io.schema.namespace"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/namespace/object.proto")
	pInfo.FilesInfo["ves.io/schema/namespace/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.namespace.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.namespace.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/namespace/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/namespace/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.namespace.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.namespace.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.namespace.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.namespace.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.namespace.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.namespace.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.namespace.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.namespace.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.namespace.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.namespace.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/namespace/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/namespace/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.namespace.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CascadeDelete", "ves.io.schema.namespace.CascadeDeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{name}/cascade_delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("CascadeDelete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.CustomAPI.CascadeDelete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("EvaluateAPIAccess", "ves.io.schema.namespace.EvaluateAPIAccessReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/evaluate-api-access"}}

	aInfo.RPCsInfo[svcfw.RPCName("EvaluateAPIAccess")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.CustomAPI.EvaluateAPIAccess"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("LookupUserRoles", "ves.io.schema.namespace.LookupUserRolesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/lookup-user-roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("LookupUserRoles")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.CustomAPI.LookupUserRoles"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SuggestValues", "ves.io.schema.namespace.SuggestValuesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/suggest-values"}}

	aInfo.RPCsInfo[svcfw.RPCName("SuggestValues")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.CustomAPI.SuggestValues"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.namespace.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/namespace/public_customapi_akar.proto")
	pInfo.FilesInfo["ves.io/schema/namespace/public_customapi_akar.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("NamespaceCustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.namespace.Object", false)

	rpcInfo = svcfw.NewRPCInfo("AllApplicationInventory", "ves.io.schema.namespace.AllApplicationInventoryRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/all_application_inventory"}}

	aInfo.RPCsInfo[svcfw.RPCName("AllApplicationInventory")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventory"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("AllApplicationInventoryWaf", "ves.io.schema.namespace.AllApplicationInventoryWafFilterRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/all_application_inventory_waf_filters"}}

	aInfo.RPCsInfo[svcfw.RPCName("AllApplicationInventoryWaf")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventoryWaf"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ApplicationInventory", "ves.io.schema.namespace.ApplicationInventoryRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/application_inventory"}}

	aInfo.RPCsInfo[svcfw.RPCName("ApplicationInventory")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.ApplicationInventory"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CascadeDelete", "ves.io.schema.namespace.CascadeDeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{name}/cascade_delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("CascadeDelete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.CascadeDelete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetActiveAlertPolicies", "ves.io.schema.namespace.GetActiveAlertPoliciesRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/active_alert_policies"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetActiveAlertPolicies")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.GetActiveAlertPolicies"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetActiveNetworkPolicies", "ves.io.schema.namespace.GetActiveNetworkPoliciesRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/active_network_policies"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetActiveNetworkPolicies")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.GetActiveNetworkPolicies"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetActiveServicePolicies", "ves.io.schema.namespace.GetActiveServicePoliciesRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/active_service_policies"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetActiveServicePolicies")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.GetActiveServicePolicies"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetFastACLsForInternetVIPs", "ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acls_for_internet_vips"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetFastACLsForInternetVIPs")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.GetFastACLsForInternetVIPs"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("NetworkingInventory", "ves.io.schema.namespace.NetworkingInventoryRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/networking_inventory"}}

	aInfo.RPCsInfo[svcfw.RPCName("NetworkingInventory")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.NetworkingInventory"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetActiveAlertPolicies", "ves.io.schema.namespace.SetActiveAlertPoliciesRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/active_alert_policies"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetActiveAlertPolicies")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SetActiveAlertPolicies"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetActiveNetworkPolicies", "ves.io.schema.namespace.SetActiveNetworkPoliciesRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/active_network_policies"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetActiveNetworkPolicies")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SetActiveNetworkPolicies"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetActiveServicePolicies", "ves.io.schema.namespace.SetActiveServicePoliciesRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/active_service_policies"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetActiveServicePolicies")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SetActiveServicePolicies"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetFastACLsForInternetVIPs", "ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/fast_acls_for_internet_vips"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetFastACLsForInternetVIPs")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SetFastACLsForInternetVIPs"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SuggestValues", "ves.io.schema.namespace.SuggestValuesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/suggest-values"}}

	aInfo.RPCsInfo[svcfw.RPCName("SuggestValues")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SuggestValues"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateAllowAdvertiseOnPublic", "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/update_allow_advertise_on_public"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateAllowAdvertiseOnPublic")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.UpdateAllowAdvertiseOnPublic"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ValidateRules", "ves.io.schema.namespace.ValidateRulesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/validate_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("ValidateRules")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.ValidateRules"] = rpcInfo

	fInfo.APIsInfo["NamespaceCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.namespace.NamespaceCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/namespace/public_customapi_asterix.proto")
	pInfo.FilesInfo["ves.io/schema/namespace/public_customapi_asterix.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("NamespaceMLCustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.namespace.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetApiEndpointsStats", "ves.io.schema.namespace.ApiEndpointsStatsNSReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_endpoints/stats"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetApiEndpointsStats")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceMLCustomAPI.GetApiEndpointsStats"] = rpcInfo

	fInfo.APIsInfo["NamespaceMLCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.namespace.NamespaceMLCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/namespace/public_customapi_olympus.proto")
	pInfo.FilesInfo["ves.io/schema/namespace/public_customapi_olympus.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("NamespaceCloudDataCustomAPI", "CUSTOM_PUBLIC", "", false)

	rpcInfo = svcfw.NewRPCInfo("SuggestValues", "ves.io.schema.namespace.SuggestValuesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/suggest-values"}}

	aInfo.RPCsInfo[svcfw.RPCName("SuggestValues")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.NamespaceCloudDataCustomAPI.SuggestValues"] = rpcInfo

	fInfo.APIsInfo["NamespaceCloudDataCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.namespace.NamespaceCloudDataCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/namespace/types.proto")
	pInfo.FilesInfo["ves.io/schema/namespace/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.namespace.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/namespace/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.namespace.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/namespace/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/namespace/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.namespace.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.namespace.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.namespace/Objects", "/ves.io.schema.namespace/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.namespace.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.namespace/Object/{object_uid}", "/ves.io.schema.namespace/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.namespace.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.namespace/Object/{object_uid}", "/ves.io.schema.namespace/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.namespace.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.namespace/Objects", "/ves.io.schema.namespace/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.namespace.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.namespace/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.namespace.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.namespace/Object/{object_uid}", "/ves.io.schema.namespace/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.namespace.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_connector", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_connector", false)
	mdr.PkgsInfo["ves.io.schema.network_connector"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_connector/object.proto")
	pInfo.FilesInfo["ves.io/schema/network_connector/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_connector.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_connector.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_connector/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/network_connector/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.network_connector.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_connector.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_connectors"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_connector.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_connectors/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_connector.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_connectors/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_connector.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_connectors"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_connector.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_connectors/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_connector.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.network_connector.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.network_connector.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.network_connector.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.network_connector.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.network_connector.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_connector/types.proto")
	pInfo.FilesInfo["ves.io/schema/network_connector/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_connector.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_connector/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.network_connector.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_connector/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/network_connector/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.network_connector.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_connector.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_connector/Objects", "/ves.io.schema.network_connector/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_connector.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_connector/Object/{object_uid}", "/ves.io.schema.network_connector/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_connector.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_connector/Object/{object_uid}", "/ves.io.schema.network_connector/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_connector.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_connector/Objects", "/ves.io.schema.network_connector/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.network_connector.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_connector/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_connector.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_connector/Object/{object_uid}", "/ves.io.schema.network_connector/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_connector.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_firewall", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall", false)
	mdr.PkgsInfo["ves.io.schema.network_firewall"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_firewall/object.proto")
	pInfo.FilesInfo["ves.io/schema/network_firewall/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_firewall.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_firewall.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_firewall/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/network_firewall/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.network_firewall.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_firewall.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_firewalls"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_firewall.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_firewalls/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_firewall.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_firewalls/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_firewall.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_firewalls"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_firewall.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_firewalls/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_firewall.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.network_firewall.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.network_firewall.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.network_firewall.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.network_firewall.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.network_firewall.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_firewall/types.proto")
	pInfo.FilesInfo["ves.io/schema/network_firewall/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_firewall.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.network_firewall.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_firewall/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/network_firewall/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.network_firewall.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_firewall.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_firewall/Objects", "/ves.io.schema.network_firewall/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_firewall.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_firewall/Object/{object_uid}", "/ves.io.schema.network_firewall/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_firewall.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_firewall/Object/{object_uid}", "/ves.io.schema.network_firewall/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_firewall.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_firewall/Objects", "/ves.io.schema.network_firewall/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.network_firewall.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_firewall/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_firewall.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_firewall/Object/{object_uid}", "/ves.io.schema.network_firewall/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_firewall.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_interface", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface", false)
	mdr.PkgsInfo["ves.io.schema.network_interface"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_interface/object.proto")
	pInfo.FilesInfo["ves.io/schema/network_interface/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_interface.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_interface.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_interface/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/network_interface/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.network_interface.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_interface.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_interfaces"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_interface.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_interfaces/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_interface.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_interfaces/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_interface.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_interfaces"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_interface.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_interfaces/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_interface.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.network_interface.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.network_interface.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.network_interface.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.network_interface.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.network_interface.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_interface/types.proto")
	pInfo.FilesInfo["ves.io/schema/network_interface/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_interface.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.network_interface.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_interface/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/network_interface/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.network_interface.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_interface.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_interface/Objects", "/ves.io.schema.network_interface/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_interface.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_interface/Object/{object_uid}", "/ves.io.schema.network_interface/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_interface.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_interface/Object/{object_uid}", "/ves.io.schema.network_interface/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_interface.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_interface/Objects", "/ves.io.schema.network_interface/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.network_interface.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_interface/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_interface.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_interface/Object/{object_uid}", "/ves.io.schema.network_interface/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_interface.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy", false)
	mdr.PkgsInfo["ves.io.schema.network_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.network_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.network_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.network_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.network_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.network_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.network_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.network_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("NetworkPolicyHits", "ves.io.schema.network_policy.NetworkPolicyHitsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/network_policy/hits"}}

	aInfo.RPCsInfo[svcfw.RPCName("NetworkPolicyHits")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.CustomDataAPI.NetworkPolicyHits"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.network_policy.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.network_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.network_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_policy/Objects", "/ves.io.schema.network_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_policy/Object/{object_uid}", "/ves.io.schema.network_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy/Object/{object_uid}", "/ves.io.schema.network_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy/Objects", "/ves.io.schema.network_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.network_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_policy/Object/{object_uid}", "/ves.io.schema.network_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_policy_rule", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_rule", false)
	mdr.PkgsInfo["ves.io.schema.network_policy_rule"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy_rule/object.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy_rule/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_policy_rule.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_policy_rule.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy_rule/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy_rule/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.network_policy_rule.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_policy_rule.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_policy_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_policy_rule.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_policy_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_policy_rule.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_policy_rule.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_policy_rule.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_policy_rules/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_policy_rule.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.network_policy_rule.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.network_policy_rule.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.network_policy_rule.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.network_policy_rule.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.network_policy_rule.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy_rule/types.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy_rule/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_policy_rule.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_rule/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.network_policy_rule.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy_rule/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy_rule/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.network_policy_rule.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_policy_rule.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_policy_rule/Objects", "/ves.io.schema.network_policy_rule/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_policy_rule.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_policy_rule/Object/{object_uid}", "/ves.io.schema.network_policy_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_policy_rule.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_rule/Object/{object_uid}", "/ves.io.schema.network_policy_rule/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_policy_rule.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_rule/Objects", "/ves.io.schema.network_policy_rule/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.network_policy_rule.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_rule/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_policy_rule.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_policy_rule/Object/{object_uid}", "/ves.io.schema.network_policy_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_policy_rule.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_policy_set", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_set", false)
	mdr.PkgsInfo["ves.io.schema.network_policy_set"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy_set/object.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy_set/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_policy_set.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.network_policy_set.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy_set/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy_set/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.network_policy_set.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_policy_set.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_sets/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_set.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_policy_set.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_sets"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_set.API.List"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_policy_set.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.network_policy_set.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.network_policy_set.ListRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy_set/types.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy_set/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.network_policy_set.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_set/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.network_policy_set.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/network_policy_set/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/network_policy_set/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.network_policy_set.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.network_policy_set.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_policy_set/Objects", "/ves.io.schema.network_policy_set/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_set.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.network_policy_set.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_policy_set/Object/{object_uid}", "/ves.io.schema.network_policy_set/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_set.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.network_policy_set.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_set/Object/{object_uid}", "/ves.io.schema.network_policy_set/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_set.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.network_policy_set.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_set/Objects", "/ves.io.schema.network_policy_set/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_set.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.network_policy_set.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_set/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_set.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.network_policy_set.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_policy_set/Object/{object_uid}", "/ves.io.schema.network_policy_set/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.network_policy_set.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.network_policy_set.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.nfv_service", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nfv_service", false)
	mdr.PkgsInfo["ves.io.schema.nfv_service"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nfv_service/object.proto")
	pInfo.FilesInfo["ves.io/schema/nfv_service/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.nfv_service.Object.spec.gc_spec.service_provider_choice.f5_big_ip_aws_service.admin_password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000007),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.nfv_service.Object.spec.gc_spec.service_provider_choice.palo_alto_fw_service.panaroma_connection.panorama_server.authorization_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000011),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.nfv_service.Object.spec.gc_spec.service_provider_choice.palo_alto_fw_service.setup_options.auto_setup.ssh_keys_choice.manual_ssh_keys.private_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000012),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.nfv_service.Object.spec.gc_spec.service_provider_choice.palo_alto_fw_service.setup_options.auto_setup.admin_password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000013),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.nfv_service.Object.spec.gc_spec.service_provider_choice.f5_big_ip_bare_metal_type.admin_password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000015),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.nfv_service.Object.spec.gc_spec.service_provider_choice.f5_big_ip_bare_metal_type.bigiq_instance.password"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000021),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.nfv_service.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.nfv_service.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nfv_service/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/nfv_service/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.nfv_service.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.nfv_service.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/nfv_services"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.nfv_service.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/nfv_services/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.nfv_service.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/nfv_services/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.nfv_service.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/nfv_services"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.nfv_service.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/nfv_services/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.nfv_service.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.nfv_service.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.nfv_service.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.nfv_service.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.nfv_service.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.nfv_service.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nfv_service/public_custom_api.proto")
	pInfo.FilesInfo["ves.io/schema/nfv_service/public_custom_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.nfv_service.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ForceDeleteNFVService", "ves.io.schema.nfv_service.ForceDeleteNFVServiceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/nfv_service/{name}/force-delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("ForceDeleteNFVService")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.CustomAPI.ForceDeleteNFVService"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.nfv_service.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nfv_service/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/nfv_service/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.nfv_service.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Metrics", "ves.io.schema.nfv_service.MetricsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/nfv_services/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("Metrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.CustomDataAPI.Metrics"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.nfv_service.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nfv_service/types.proto")
	pInfo.FilesInfo["ves.io/schema/nfv_service/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.nfv_service.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nfv_service/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.nfv_service.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nfv_service/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/nfv_service/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.nfv_service.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.nfv_service.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.nfv_service/Objects", "/ves.io.schema.nfv_service/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.nfv_service.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.nfv_service/Object/{object_uid}", "/ves.io.schema.nfv_service/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.nfv_service.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.nfv_service/Object/{object_uid}", "/ves.io.schema.nfv_service/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.nfv_service.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.nfv_service/Objects", "/ves.io.schema.nfv_service/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.nfv_service.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.nfv_service/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.nfv_service.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.nfv_service/Object/{object_uid}", "/ves.io.schema.nfv_service/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nfv_service.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.nfv_service.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.nginx.nms.agent_certs", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nginx/nms/agent_certs", false)
	mdr.PkgsInfo["ves.io.schema.nginx.nms.agent_certs"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nginx/nms/agent_certs/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/nginx/nms/agent_certs/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "", false)

	rpcInfo = svcfw.NewRPCInfo("GenerateAgentCert", "ves.io.schema.nginx.nms.agent_certs.GenerateAgentCertRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/agent-certs"}}

	aInfo.RPCsInfo[svcfw.RPCName("GenerateAgentCert")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nginx.nms.agent_certs.CustomAPI.GenerateAgentCert"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RevokeAgentCert", "ves.io.schema.nginx.nms.agent_certs.RevokeAgentCertRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/agent-certs/revoke"}}

	aInfo.RPCsInfo[svcfw.RPCName("RevokeAgentCert")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nginx.nms.agent_certs.CustomAPI.RevokeAgentCert"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.nginx.nms.agent_certs.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nginx/nms/agent_certs/types.proto")
	pInfo.FilesInfo["ves.io/schema/nginx/nms/agent_certs/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.nginx.nms.subscription", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nginx/nms/subscription", false)
	mdr.PkgsInfo["ves.io.schema.nginx.nms.subscription"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nginx/nms/subscription/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/nginx/nms/subscription/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "", false)

	rpcInfo = svcfw.NewRPCInfo("Subscribe", "ves.io.schema.nginx.nms.subscription.SubscribeRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/nms/namespaces/system/subscribe"}}

	aInfo.RPCsInfo[svcfw.RPCName("Subscribe")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nginx.nms.subscription.CustomAPI.Subscribe"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Unsubscribe", "ves.io.schema.nginx.nms.subscription.UnsubscribeRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/nms/namespaces/system/unsubscribe"}}

	aInfo.RPCsInfo[svcfw.RPCName("Unsubscribe")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nginx.nms.subscription.CustomAPI.Unsubscribe"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.nginx.nms.subscription.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nginx/nms/subscription/types.proto")
	pInfo.FilesInfo["ves.io/schema/nginx/nms/subscription/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.nginx.one.subscription", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nginx/one/subscription", false)
	mdr.PkgsInfo["ves.io.schema.nginx.one.subscription"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/nginx/one/subscription/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/nginx/one/subscription/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "", false)

	rpcInfo = svcfw.NewRPCInfo("Subscribe", "ves.io.schema.nginx.one.subscription.SubscribeRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/n1/subscribe"}}

	aInfo.RPCsInfo[svcfw.RPCName("Subscribe")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nginx.one.subscription.CustomAPI.Subscribe"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Unsubscribe", "ves.io.schema.nginx.one.subscription.UnsubscribeRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/n1/unsubscribe"}}

	aInfo.RPCsInfo[svcfw.RPCName("Unsubscribe")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.nginx.one.subscription.CustomAPI.Unsubscribe"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.nginx.one.subscription.CustomAPI"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.policer", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policer", false)
	mdr.PkgsInfo["ves.io.schema.policer"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/policer/object.proto")
	pInfo.FilesInfo["ves.io/schema/policer/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.policer.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.policer.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/policer/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/policer/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.policer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.policer.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/policers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.policer.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/policers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.policer.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/policers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.policer.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/policers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.policer.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/policers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.policer.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.policer.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.policer.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.policer.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.policer.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.policer.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/policer/types.proto")
	pInfo.FilesInfo["ves.io/schema/policer/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.policer.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policer/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.policer.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/policer/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/policer/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.policer.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.policer.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.policer/Objects", "/ves.io.schema.policer/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.policer.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.policer/Object/{object_uid}", "/ves.io.schema.policer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.policer.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.policer/Object/{object_uid}", "/ves.io.schema.policer/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.policer.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.policer/Objects", "/ves.io.schema.policer/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.policer.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.policer/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.policer.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.policer/Object/{object_uid}", "/ves.io.schema.policer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.policer.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.policer.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy", false)
	mdr.PkgsInfo["ves.io.schema.policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.protocol_inspection", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/protocol_inspection", false)
	mdr.PkgsInfo["ves.io.schema.protocol_inspection"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/protocol_inspection/object.proto")
	pInfo.FilesInfo["ves.io/schema/protocol_inspection/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.protocol_inspection.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.protocol_inspection.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/protocol_inspection/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/protocol_inspection/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.protocol_inspection.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.protocol_inspection.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/protocol_inspections"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.protocol_inspection.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/protocol_inspections/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.protocol_inspection.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/protocol_inspections/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.protocol_inspection.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/protocol_inspections"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.protocol_inspection.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/protocol_inspections/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.protocol_inspection.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.protocol_inspection.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.protocol_inspection.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.protocol_inspection.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.protocol_inspection.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.protocol_inspection.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/protocol_inspection/types.proto")
	pInfo.FilesInfo["ves.io/schema/protocol_inspection/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.protocol_inspection.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/protocol_inspection/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.protocol_inspection.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/protocol_inspection/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/protocol_inspection/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.protocol_inspection.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.protocol_inspection.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.protocol_inspection/Objects", "/ves.io.schema.protocol_inspection/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.protocol_inspection.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.protocol_inspection/Object/{object_uid}", "/ves.io.schema.protocol_inspection/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.protocol_inspection.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_inspection/Object/{object_uid}", "/ves.io.schema.protocol_inspection/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.protocol_inspection.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_inspection/Objects", "/ves.io.schema.protocol_inspection/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.protocol_inspection.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_inspection/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.protocol_inspection.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.protocol_inspection/Object/{object_uid}", "/ves.io.schema.protocol_inspection/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_inspection.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.protocol_inspection.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.protocol_policer", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/protocol_policer", false)
	mdr.PkgsInfo["ves.io.schema.protocol_policer"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/protocol_policer/object.proto")
	pInfo.FilesInfo["ves.io/schema/protocol_policer/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.protocol_policer.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.protocol_policer.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/protocol_policer/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/protocol_policer/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.protocol_policer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.protocol_policer.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/protocol_policers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.protocol_policer.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/protocol_policers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.protocol_policer.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/protocol_policers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.protocol_policer.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/protocol_policers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.protocol_policer.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/protocol_policers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.protocol_policer.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.protocol_policer.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.protocol_policer.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.protocol_policer.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.protocol_policer.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.protocol_policer.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/protocol_policer/types.proto")
	pInfo.FilesInfo["ves.io/schema/protocol_policer/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.protocol_policer.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/protocol_policer/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.protocol_policer.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/protocol_policer/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/protocol_policer/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.protocol_policer.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.protocol_policer.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.protocol_policer/Objects", "/ves.io.schema.protocol_policer/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.protocol_policer.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.protocol_policer/Object/{object_uid}", "/ves.io.schema.protocol_policer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.protocol_policer.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_policer/Object/{object_uid}", "/ves.io.schema.protocol_policer/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.protocol_policer.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_policer/Objects", "/ves.io.schema.protocol_policer/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.protocol_policer.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_policer/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.protocol_policer.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.protocol_policer/Object/{object_uid}", "/ves.io.schema.protocol_policer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.protocol_policer.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.public_ip", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/public_ip", false)
	mdr.PkgsInfo["ves.io.schema.public_ip"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/public_ip/object.proto")
	pInfo.FilesInfo["ves.io/schema/public_ip/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.public_ip.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.public_ip.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/public_ip/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/public_ip/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.public_ip.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.public_ip.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/public_ips/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.public_ip.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/public_ips"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.public_ip.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/public_ips/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.public_ip.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.public_ip.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.public_ip.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.public_ip.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/public_ip/types.proto")
	pInfo.FilesInfo["ves.io/schema/public_ip/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.public_ip.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/public_ip/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.public_ip.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/public_ip/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/public_ip/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.public_ip.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.public_ip.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.public_ip/Objects", "/ves.io.schema.public_ip/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.public_ip.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.public_ip/Object/{object_uid}", "/ves.io.schema.public_ip/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.public_ip.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.public_ip/Object/{object_uid}", "/ves.io.schema.public_ip/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.public_ip.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.public_ip/Objects", "/ves.io.schema.public_ip/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.public_ip.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.public_ip/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.public_ip.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.public_ip/Object/{object_uid}", "/ves.io.schema.public_ip/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.public_ip.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.rate_limiter", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter", false)
	mdr.PkgsInfo["ves.io.schema.rate_limiter"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/rate_limiter/object.proto")
	pInfo.FilesInfo["ves.io/schema/rate_limiter/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.rate_limiter.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.rate_limiter.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/rate_limiter/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/rate_limiter/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.rate_limiter.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.rate_limiter.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/rate_limiters"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.rate_limiter.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/rate_limiters/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.rate_limiter.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/rate_limiters/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.rate_limiter.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/rate_limiters"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.rate_limiter.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/rate_limiters/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.rate_limiter.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.rate_limiter.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.rate_limiter.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.rate_limiter.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.rate_limiter.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.rate_limiter.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/rate_limiter/types.proto")
	pInfo.FilesInfo["ves.io/schema/rate_limiter/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.rate_limiter.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.rate_limiter.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/rate_limiter/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/rate_limiter/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.rate_limiter.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.rate_limiter.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.rate_limiter/Objects", "/ves.io.schema.rate_limiter/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.rate_limiter.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.rate_limiter/Object/{object_uid}", "/ves.io.schema.rate_limiter/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.rate_limiter.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.rate_limiter/Object/{object_uid}", "/ves.io.schema.rate_limiter/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.rate_limiter.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.rate_limiter/Objects", "/ves.io.schema.rate_limiter/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.rate_limiter.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.rate_limiter/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.rate_limiter.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.rate_limiter/Object/{object_uid}", "/ves.io.schema.rate_limiter/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.rate_limiter.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.registration", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/registration", false)
	mdr.PkgsInfo["ves.io.schema.registration"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/registration/object.proto")
	pInfo.FilesInfo["ves.io/schema/registration/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.registration.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/registration/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/registration/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.registration.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.registration.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/registrations"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.registration.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/registrations/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.registration.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.registration.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.registration.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/registration/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/registration/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.registration.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.registration.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/registrations/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.CustomAPI.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.registration.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/registrations/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.CustomAPI.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.registration.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/registrations"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.CustomAPI.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListRegistrationsBySite", "ves.io.schema.registration.ListBySiteReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/registrations_by_site/{site_name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListRegistrationsBySite")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.CustomAPI.ListRegistrationsBySite"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListRegistrationsByState", "ves.io.schema.registration.ListStateReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/listregistrationsbystate"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListRegistrationsByState")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.CustomAPI.ListRegistrationsByState"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RegistrationApprove", "ves.io.schema.registration.ApprovalReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/registration/{name}/approve"}}

	aInfo.RPCsInfo[svcfw.RPCName("RegistrationApprove")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.CustomAPI.RegistrationApprove"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RegistrationConfig", "ves.io.schema.registration.ConfigReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/requestConfig"}}

	aInfo.RPCsInfo[svcfw.RPCName("RegistrationConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.CustomAPI.RegistrationConfig"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RegistrationCreate", "ves.io.schema.registration.RegistrationCreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/registerBootstrap"}}

	aInfo.RPCsInfo[svcfw.RPCName("RegistrationCreate")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.CustomAPI.RegistrationCreate"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.registration.CustomAPI"] = aInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.registration.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.registration.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.registration.ListRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/registration/types.proto")
	pInfo.FilesInfo["ves.io/schema/registration/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.registration.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/registration/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.registration.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/registration/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/registration/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.registration.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.registration.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.registration/Objects", "/ves.io.schema.registration/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.registration.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.registration/Object/{object_uid}", "/ves.io.schema.registration/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.registration.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.registration/Object/{object_uid}", "/ves.io.schema.registration/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.registration.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.registration/Objects", "/ves.io.schema.registration/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.registration.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.registration/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.registration.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.registration/Object/{object_uid}", "/ves.io.schema.registration/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.registration.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.registration.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.role", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/role", false)
	mdr.PkgsInfo["ves.io.schema.role"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/role/object.proto")
	pInfo.FilesInfo["ves.io/schema/role/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.role.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.role.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/role/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/role/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.role.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.role.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.role.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/roles/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.role.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/roles/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.role.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.role.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/roles/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.role.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.role.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.role.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.role.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.role.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.role.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/role/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/role/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.role.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CustomCreate", "ves.io.schema.role.CustomCreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("CustomCreate")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.CustomAPI.CustomCreate"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CustomGet", "ves.io.schema.role.CustomGetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/roles/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("CustomGet")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.CustomAPI.CustomGet"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CustomList", "ves.io.schema.role.CustomListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("CustomList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.CustomAPI.CustomList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CustomReplace", "ves.io.schema.role.CustomReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/custom/namespaces/{namespace}/roles/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("CustomReplace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.CustomAPI.CustomReplace"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.role.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/role/types.proto")
	pInfo.FilesInfo["ves.io/schema/role/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.role.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/role/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.role.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/role/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/role/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.role.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.role.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.role/Objects", "/ves.io.schema.role/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.role.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.role/Object/{object_uid}", "/ves.io.schema.role/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.role.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.role/Object/{object_uid}", "/ves.io.schema.role/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.role.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.role/Objects", "/ves.io.schema.role/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.role.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.role/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.role.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.role/Object/{object_uid}", "/ves.io.schema.role/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.role.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.role.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.route", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route", false)
	mdr.PkgsInfo["ves.io.schema.route"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/route/object.proto")
	pInfo.FilesInfo["ves.io/schema/route/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.route.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.route.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/route/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/route/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.route.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.route.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/routes"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.route.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/routes/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.route.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/routes/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.route.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/routes"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.route.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/routes/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.route.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.route.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.route.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.route.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.route.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.route.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/route/types.proto")
	pInfo.FilesInfo["ves.io/schema/route/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.route.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.route.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/route/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/route/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.route.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.route.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.route/Objects", "/ves.io.schema.route/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.route.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.route/Object/{object_uid}", "/ves.io.schema.route/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.route.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.route/Object/{object_uid}", "/ves.io.schema.route/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.route.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.route/Objects", "/ves.io.schema.route/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.route.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.route/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.route.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.route/Object/{object_uid}", "/ves.io.schema.route/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.route.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.route.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.secret_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy", false)
	mdr.PkgsInfo["ves.io.schema.secret_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.secret_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.secret_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.secret_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.secret_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/secret_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.secret_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/secret_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.secret_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.secret_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.secret_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/secret_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.secret_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy/public_custom_policy_api.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy/public_custom_policy_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.secret_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("DeletePolicy", "ves.io.schema.secret_policy.SoftDeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/secret_policy/{name}/softdelete"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeletePolicy")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.CustomAPI.DeletePolicy"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListPolicy", "ves.io.schema.secret_policy.ListPolicyRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policy/list_policy/{policy_state}"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListPolicy")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.CustomAPI.ListPolicy"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RecoverPolicy", "ves.io.schema.secret_policy.RecoverRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/secret_policy/{name}/recover"}}

	aInfo.RPCsInfo[svcfw.RPCName("RecoverPolicy")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.CustomAPI.RecoverPolicy"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.secret_policy.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.secret_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.secret_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.secret_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.secret_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.secret_policy/Objects", "/ves.io.schema.secret_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.secret_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.secret_policy/Object/{object_uid}", "/ves.io.schema.secret_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.secret_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy/Object/{object_uid}", "/ves.io.schema.secret_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.secret_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy/Objects", "/ves.io.schema.secret_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.secret_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.secret_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.secret_policy/Object/{object_uid}", "/ves.io.schema.secret_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.secret_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.secret_policy_rule", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy_rule", false)
	mdr.PkgsInfo["ves.io.schema.secret_policy_rule"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy_rule/object.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy_rule/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.secret_policy_rule.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.secret_policy_rule.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy_rule/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy_rule/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.secret_policy_rule.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.secret_policy_rule.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/secret_policy_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.secret_policy_rule.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/secret_policy_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.secret_policy_rule.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policy_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.secret_policy_rule.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policy_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.secret_policy_rule.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/secret_policy_rules/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.secret_policy_rule.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy_rule.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy_rule.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy_rule.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy_rule.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.secret_policy_rule.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy_rule/types.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy_rule/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.secret_policy_rule.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy_rule/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.secret_policy_rule.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/secret_policy_rule/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/secret_policy_rule/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.secret_policy_rule.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.secret_policy_rule.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.secret_policy_rule/Objects", "/ves.io.schema.secret_policy_rule/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.secret_policy_rule.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.secret_policy_rule/Object/{object_uid}", "/ves.io.schema.secret_policy_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.secret_policy_rule.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy_rule/Object/{object_uid}", "/ves.io.schema.secret_policy_rule/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.secret_policy_rule.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy_rule/Objects", "/ves.io.schema.secret_policy_rule/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.secret_policy_rule.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy_rule/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.secret_policy_rule.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.secret_policy_rule/Object/{object_uid}", "/ves.io.schema.secret_policy_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.secret_policy_rule.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.service_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy", false)
	mdr.PkgsInfo["ves.io.schema.service_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.service_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.service_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.service_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.service_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/service_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.service_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/service_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.service_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.service_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.service_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/service_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.service_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.service_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.service_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.service_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.service_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.service_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.service_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ServicePolicyHits", "ves.io.schema.service_policy.ServicePolicyHitsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/service_policy/hits"}}

	aInfo.RPCsInfo[svcfw.RPCName("ServicePolicyHits")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.CustomDataAPI.ServicePolicyHits"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ServicePolicyHitsLatency", "ves.io.schema.service_policy.ServicePolicyHitsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/service_policy/latency"}}

	aInfo.RPCsInfo[svcfw.RPCName("ServicePolicyHitsLatency")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.CustomDataAPI.ServicePolicyHitsLatency"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.service_policy.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.service_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.service_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.service_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.service_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.service_policy/Objects", "/ves.io.schema.service_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.service_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.service_policy/Object/{object_uid}", "/ves.io.schema.service_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.service_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy/Object/{object_uid}", "/ves.io.schema.service_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.service_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy/Objects", "/ves.io.schema.service_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.service_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.service_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.service_policy/Object/{object_uid}", "/ves.io.schema.service_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.service_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.service_policy_rule", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule", false)
	mdr.PkgsInfo["ves.io.schema.service_policy_rule"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy_rule/object.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy_rule/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.service_policy_rule.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.service_policy_rule.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy_rule/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy_rule/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.service_policy_rule.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.service_policy_rule.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/service_policy_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.service_policy_rule.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/service_policy_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.service_policy_rule.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_policy_rules/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.service_policy_rule.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_policy_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.service_policy_rule.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/service_policy_rules/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.service_policy_rule.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.service_policy_rule.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.service_policy_rule.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.service_policy_rule.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.service_policy_rule.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.service_policy_rule.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy_rule/types.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy_rule/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.service_policy_rule.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.service_policy_rule.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/service_policy_rule/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/service_policy_rule/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.service_policy_rule.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.service_policy_rule.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.service_policy_rule/Objects", "/ves.io.schema.service_policy_rule/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.service_policy_rule.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.service_policy_rule/Object/{object_uid}", "/ves.io.schema.service_policy_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.service_policy_rule.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy_rule/Object/{object_uid}", "/ves.io.schema.service_policy_rule/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.service_policy_rule.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy_rule/Objects", "/ves.io.schema.service_policy_rule/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.service_policy_rule.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy_rule/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.service_policy_rule.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.service_policy_rule/Object/{object_uid}", "/ves.io.schema.service_policy_rule/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.service_policy_rule.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.signup", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/signup", false)
	mdr.PkgsInfo["ves.io.schema.signup"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/signup/object.proto")
	pInfo.FilesInfo["ves.io/schema/signup/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.signup.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.signup.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/signup/private_customapi_eywaprime.proto")
	pInfo.FilesInfo["ves.io/schema/signup/private_customapi_eywaprime.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomPrivateAPIEywaprime", "CUSTOM_PRIVATE", "ves.io.schema.signup.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CreateV2", "ves.io.schema.signup.CreateV2Request", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema/introspect/write/v2/signup"}}

	aInfo.RPCsInfo[svcfw.RPCName("CreateV2")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.CustomPrivateAPIEywaprime.CreateV2"] = rpcInfo

	fInfo.APIsInfo["CustomPrivateAPIEywaprime"] = aInfo
	mdr.APIIdx["ves.io.schema.signup.CustomPrivateAPIEywaprime"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/signup/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/signup/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.signup.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.signup.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/no_auth/signup/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.CustomAPI.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListCities", "ves.io.schema.signup.ListCitiesRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/no_auth/countries/{country_code}/states/{state_code}/cities/{prefix}", "/public/custom/countries/{country_code}/states/{state_code}/cities/{prefix}"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListCities")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.CustomAPI.ListCities"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListCountries", "ves.io.schema.signup.ListCountriesRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/no_auth/countries/{prefix}", "/public/custom/countries/{prefix}"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListCountries")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.CustomAPI.ListCountries"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStates", "ves.io.schema.signup.ListStatesRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/no_auth/countries/{country_code}/states/{prefix}", "/public/custom/countries/{country_code}/states/{prefix}"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStates")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.CustomAPI.ListStates"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SendPasswordEmail", "ves.io.schema.signup.SendPasswordEmailRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/no_auth/send_password_email"}}

	aInfo.RPCsInfo[svcfw.RPCName("SendPasswordEmail")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.CustomAPI.SendPasswordEmail"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ValidateContact", "ves.io.schema.signup.ValidateContactRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/no_auth/validate_contact"}}

	aInfo.RPCsInfo[svcfw.RPCName("ValidateContact")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.CustomAPI.ValidateContact"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ValidateRegistration", "ves.io.schema.signup.ValidateRegistrationRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/no_auth/login/validate_registration"}}

	aInfo.RPCsInfo[svcfw.RPCName("ValidateRegistration")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.CustomAPI.ValidateRegistration"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.signup.CustomAPI"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.signup.GetRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/signup/types.proto")
	pInfo.FilesInfo["ves.io/schema/signup/types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/signup/types_v2.proto")
	pInfo.FilesInfo["ves.io/schema/signup/types_v2.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.signup.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/signup/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.signup.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/signup/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/signup/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.signup.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.signup.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.signup/Objects", "/ves.io.schema.signup/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.signup.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.signup/Object/{object_uid}", "/ves.io.schema.signup/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.signup.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.signup/Object/{object_uid}", "/ves.io.schema.signup/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.signup.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.signup/Objects", "/ves.io.schema.signup/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.signup.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.signup/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.signup.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.signup/Object/{object_uid}", "/ves.io.schema.signup/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.signup.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.signup.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site", false)
	mdr.PkgsInfo["ves.io.schema.site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/object.proto")
	pInfo.FilesInfo["ves.io/schema/site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.site.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.site.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/private_config_kubeconfig.proto")
	pInfo.FilesInfo["ves.io/schema/site/private_config_kubeconfig.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("PrivateConfigKubeConfigAPI", "CUSTOM_PRIVATE", "ves.io.schema.site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GlobalAccessEnabled", "ves.io.schema.site.GlobalAccessCheckRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema/introspect/read/private/namespaces/{namespace}/sites/{name}/global_access_check"}}

	aInfo.RPCsInfo[svcfw.RPCName("GlobalAccessEnabled")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.PrivateConfigKubeConfigAPI.GlobalAccessEnabled"] = rpcInfo

	fInfo.APIsInfo["PrivateConfigKubeConfigAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.site.PrivateConfigKubeConfigAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/public_config_kubeconfig.proto")
	pInfo.FilesInfo["ves.io/schema/site/public_config_kubeconfig.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("ConfigKubeConfigAPI", "CUSTOM_PUBLIC", "ves.io.schema.site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CreateLocalKubeConfig", "ves.io.schema.site.CreateKubeConfigReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/sites/{name}/local-kubeconfig"}}

	aInfo.RPCsInfo[svcfw.RPCName("CreateLocalKubeConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.ConfigKubeConfigAPI.CreateLocalKubeConfig"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListLocalKubeConfig", "ves.io.schema.site.ListKubeConfigReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/sites/{name}/local-kubeconfigs"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListLocalKubeConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.ConfigKubeConfigAPI.ListLocalKubeConfig"] = rpcInfo

	fInfo.APIsInfo["ConfigKubeConfigAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.site.ConfigKubeConfigAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/site/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.site.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.site.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.site.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/sites/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.site.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.site.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.site.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.site.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/public_custom_data_k8s_api.proto")
	pInfo.FilesInfo["ves.io/schema/site/public_custom_data_k8s_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataK8SAPI", "CUSTOM_PUBLIC", "ves.io.schema.site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ConfigMapList", "ves.io.schema.site.ConfigMapListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/configmaps", "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/configmaps"}}

	aInfo.RPCsInfo[svcfw.RPCName("ConfigMapList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.ConfigMapList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CronJobList", "ves.io.schema.site.CronJobListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/batch/v1beta1/cronjobs", "/public/namespaces/system/site/{site}/apis/batch/v1beta1/namespaces/{namespace}/cronjobs"}}

	aInfo.RPCsInfo[svcfw.RPCName("CronJobList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.CronJobList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DaemonSetList", "ves.io.schema.site.DaemonSetListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/apps/v1/daemonsets", "/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/daemonsets"}}

	aInfo.RPCsInfo[svcfw.RPCName("DaemonSetList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.DaemonSetList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DeploymentList", "ves.io.schema.site.DeploymentListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/apps/v1/deployments", "/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/deployments"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeploymentList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.DeploymentList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("EndpointsList", "ves.io.schema.site.EndpointsListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/endpoints", "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/endpoints"}}

	aInfo.RPCsInfo[svcfw.RPCName("EndpointsList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.EndpointsList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("JobList", "ves.io.schema.site.JobListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/batch/v1/jobs", "/public/namespaces/system/site/{site}/apis/batch/v1/namespaces/{namespace}/jobs"}}

	aInfo.RPCsInfo[svcfw.RPCName("JobList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.JobList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("NamespaceList", "ves.io.schema.site.NamespaceListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces"}}

	aInfo.RPCsInfo[svcfw.RPCName("NamespaceList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.NamespaceList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("NodeList", "ves.io.schema.site.NodeListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/nodes"}}

	aInfo.RPCsInfo[svcfw.RPCName("NodeList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.NodeList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("PersistentVolumeClaimList", "ves.io.schema.site.PersistentVolumeClaimListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/persistentvolumeclaims", "/public/namespaces/system/site/{site}/api/v1/persistentvolumeclaims"}}

	aInfo.RPCsInfo[svcfw.RPCName("PersistentVolumeClaimList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeClaimList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("PersistentVolumeList", "ves.io.schema.site.PersistentVolumeListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/persistentvolumes"}}

	aInfo.RPCsInfo[svcfw.RPCName("PersistentVolumeList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("PodList", "ves.io.schema.site.PodListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/pods", "/public/namespaces/system/site/{site}/api/v1/pods"}}

	aInfo.RPCsInfo[svcfw.RPCName("PodList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.PodList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("PodsMetrics", "ves.io.schema.site.PodsMetricsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/site/{site}/namespaces/{namespace}/pods/metrics", "/public/namespaces/system/site/{site}/pods/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("PodsMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.PodsMetrics"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ReplicaSetList", "ves.io.schema.site.ReplicaSetListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/replicasets", "/public/namespaces/system/site/{site}/apis/apps/v1/replicasets"}}

	aInfo.RPCsInfo[svcfw.RPCName("ReplicaSetList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.ReplicaSetList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SecretList", "ves.io.schema.site.SecretListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/secrets", "/public/namespaces/system/site/{site}/api/v1/secrets"}}

	aInfo.RPCsInfo[svcfw.RPCName("SecretList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.SecretList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ServiceList", "ves.io.schema.site.ServiceListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/services", "/public/namespaces/system/site/{site}/api/v1/services"}}

	aInfo.RPCsInfo[svcfw.RPCName("ServiceList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.ServiceList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("StatefulSetList", "ves.io.schema.site.StatefulSetListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/statefulsets", "/public/namespaces/system/site/{site}/apis/apps/v1/statefulsets"}}

	aInfo.RPCsInfo[svcfw.RPCName("StatefulSetList")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.StatefulSetList"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("VirtualMachineInstancesMetrics", "ves.io.schema.site.VirtualMachineInstancesMetricsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/site/{site}/namespaces/{namespace}/virtualmachineinstances/metrics", "/public/namespaces/system/site/{site}/virtualmachineinstances/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("VirtualMachineInstancesMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.VirtualMachineInstancesMetrics"] = rpcInfo

	fInfo.APIsInfo["CustomDataK8SAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.site.CustomDataK8SAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/site/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomStateAPI", "CUSTOM_PUBLIC", "ves.io.schema.site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("SetState", "ves.io.schema.site.SetStateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{name}/state"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetState")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomStateAPI.SetState"] = rpcInfo

	fInfo.APIsInfo["CustomStateAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.site.CustomStateAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/public_uam_kubeconfig.proto")
	pInfo.FilesInfo["ves.io/schema/site/public_uam_kubeconfig.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("UamKubeConfigAPI", "CUSTOM_PUBLIC", "ves.io.schema.site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CreateGlobalKubeConfig", "ves.io.schema.site.CreateGlobalKubeConfigReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/sites/{site}/global-kubeconfigs"}}

	aInfo.RPCsInfo[svcfw.RPCName("CreateGlobalKubeConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.UamKubeConfigAPI.CreateGlobalKubeConfig"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListGlobalKubeConfig", "ves.io.schema.site.ListGlobalKubeConfigReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/sites/{site}/global-kubeconfigs"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListGlobalKubeConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.UamKubeConfigAPI.ListGlobalKubeConfig"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RevokeGlobalKubeConfig", "ves.io.schema.site.RevokeKubeConfigReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/revoke/global-kubeconfigs"}}

	aInfo.RPCsInfo[svcfw.RPCName("RevokeGlobalKubeConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.UamKubeConfigAPI.RevokeGlobalKubeConfig"] = rpcInfo

	fInfo.APIsInfo["UamKubeConfigAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.site.UamKubeConfigAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/public_upgradeapi.proto")
	pInfo.FilesInfo["ves.io/schema/site/public_upgradeapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("UpgradeAPI", "CUSTOM_PUBLIC", "ves.io.schema.site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("UpgradeOS", "ves.io.schema.site.UpgradeOSRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/sites/{name}/upgrade_os"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpgradeOS")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.UpgradeAPI.UpgradeOS"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpgradeSW", "ves.io.schema.site.UpgradeSWRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/sites/{name}/upgrade_sw"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpgradeSW")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.UpgradeAPI.UpgradeSW"] = rpcInfo

	fInfo.APIsInfo["UpgradeAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.site.UpgradeAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/site_status_info.proto")
	pInfo.FilesInfo["ves.io/schema/site/site_status_info.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomSiteStatusAPI", "CUSTOM_PUBLIC", "ves.io.schema.site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("SiteStatusMetrics", "ves.io.schema.site.SiteStatusMetricsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/status/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("SiteStatusMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.CustomSiteStatusAPI.SiteStatusMetrics"] = rpcInfo

	fInfo.APIsInfo["CustomSiteStatusAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.site.CustomSiteStatusAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/types.proto")
	pInfo.FilesInfo["ves.io/schema/site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.site/Objects", "/ves.io.schema.site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.site/Object/{object_uid}", "/ves.io.schema.site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site/Object/{object_uid}", "/ves.io.schema.site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site/Objects", "/ves.io.schema.site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.site/Object/{object_uid}", "/ves.io.schema.site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.site_mesh_group", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site_mesh_group", false)
	mdr.PkgsInfo["ves.io.schema.site_mesh_group"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site_mesh_group/object.proto")
	pInfo.FilesInfo["ves.io/schema/site_mesh_group/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.site_mesh_group.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.site_mesh_group.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site_mesh_group/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/site_mesh_group/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.site_mesh_group.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.site_mesh_group.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/site_mesh_groups"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.site_mesh_group.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/site_mesh_groups/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.site_mesh_group.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/site_mesh_groups/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.site_mesh_group.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/site_mesh_groups"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.site_mesh_group.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/site_mesh_groups/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.site_mesh_group.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.site_mesh_group.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.site_mesh_group.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.site_mesh_group.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.site_mesh_group.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.site_mesh_group.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site_mesh_group/types.proto")
	pInfo.FilesInfo["ves.io/schema/site_mesh_group/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.site_mesh_group.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site_mesh_group/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.site_mesh_group.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/site_mesh_group/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/site_mesh_group/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.site_mesh_group.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.site_mesh_group.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.site_mesh_group/Objects", "/ves.io.schema.site_mesh_group/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.site_mesh_group.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.site_mesh_group/Object/{object_uid}", "/ves.io.schema.site_mesh_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.site_mesh_group.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site_mesh_group/Object/{object_uid}", "/ves.io.schema.site_mesh_group/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.site_mesh_group.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site_mesh_group/Objects", "/ves.io.schema.site_mesh_group/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.site_mesh_group.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site_mesh_group/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.site_mesh_group.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.site_mesh_group/Object/{object_uid}", "/ves.io.schema.site_mesh_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.site_mesh_group.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.stored_object", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/stored_object", false)
	mdr.PkgsInfo["ves.io.schema.stored_object"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/stored_object/common_types.proto")
	pInfo.FilesInfo["ves.io/schema/stored_object/common_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/stored_object/object.proto")
	pInfo.FilesInfo["ves.io/schema/stored_object/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.stored_object.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.stored_object.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/stored_object/private_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/stored_object/private_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomPrivateAPI", "CUSTOM_PRIVATE", "ves.io.schema.stored_object.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CreateObject", "ves.io.schema.stored_object.CreateObjectRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/private/namespaces/{namespace}/stored_objects/{object_type}/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("CreateObject")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.CustomPrivateAPI.CreateObject"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DeleteObject", "ves.io.schema.stored_object.DeleteObjectRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/private/namespaces/{namespace}/stored_objects/{object_type}/{name}", "/private/namespaces/{namespace}/stored_objects/{object_type}/{name}/{version}"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeleteObject")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.CustomPrivateAPI.DeleteObject"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetObject", "ves.io.schema.stored_object.GetObjectRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/private/namespaces/{namespace}/stored_objects/{object_type}/{name}/{version}", "/ves.io.schema/introspect/read/private/namespaces/{namespace}/stored_objects/{object_type}/{name}/{version}"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetObject")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.CustomPrivateAPI.GetObject"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListObjects", "ves.io.schema.stored_object.ListObjectsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/private/namespaces/{namespace}/stored_objects/{object_type}", "/ves.io.schema/introspect/read/private/namespaces/{namespace}/stored_objects/{object_type}"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListObjects")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.CustomPrivateAPI.ListObjects"] = rpcInfo

	fInfo.APIsInfo["CustomPrivateAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.stored_object.CustomPrivateAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/stored_object/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/stored_object/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.stored_object.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CreateObject", "ves.io.schema.stored_object.CreateObjectRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{namespace}/stored_objects/{object_type}/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("CreateObject")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.CustomAPI.CreateObject"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DeleteObject", "ves.io.schema.stored_object.DeleteObjectRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/stored_objects/{object_type}/{name}", "/public/namespaces/{namespace}/stored_objects/{object_type}/{name}/{version}"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeleteObject")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.CustomAPI.DeleteObject"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetObject", "ves.io.schema.stored_object.GetObjectRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/stored_objects/{object_type}/{name}/{version}"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetObject")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.CustomAPI.GetObject"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListObjects", "ves.io.schema.stored_object.ListObjectsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/stored_objects/{object_type}"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListObjects")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.CustomAPI.ListObjects"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.stored_object.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/stored_object/public_customapi_mobile_integrator.proto")
	pInfo.FilesInfo["ves.io/schema/stored_object/public_customapi_mobile_integrator.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("MobileIntegratorCustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.stored_object.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetMobileIntegrator", "ves.io.schema.stored_object.GetObjectRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/stored_objects/mobile-integrator/{name}/{version}"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetMobileIntegrator")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.MobileIntegratorCustomAPI.GetMobileIntegrator"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListMobileIntegrators", "ves.io.schema.stored_object.ListObjectsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/stored_objects/mobile-integrator"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListMobileIntegrators")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.MobileIntegratorCustomAPI.ListMobileIntegrators"] = rpcInfo

	fInfo.APIsInfo["MobileIntegratorCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.stored_object.MobileIntegratorCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/stored_object/types.proto")
	pInfo.FilesInfo["ves.io/schema/stored_object/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.stored_object.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/stored_object/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.stored_object.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/stored_object/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/stored_object/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.stored_object.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.stored_object.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.stored_object/Objects", "/ves.io.schema.stored_object/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.stored_object.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.stored_object/Object/{object_uid}", "/ves.io.schema.stored_object/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.stored_object.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.stored_object/Object/{object_uid}", "/ves.io.schema.stored_object/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.stored_object.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.stored_object/Objects", "/ves.io.schema.stored_object/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.stored_object.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.stored_object/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.stored_object.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.stored_object/Object/{object_uid}", "/ves.io.schema.stored_object/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.stored_object.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.stored_object.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.tenant", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tenant", false)
	mdr.PkgsInfo["ves.io.schema.tenant"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/tenant/custom_api.proto")
	pInfo.FilesInfo["ves.io/schema/tenant/custom_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "", false)

	rpcInfo = svcfw.NewRPCInfo("AssignDomainOwner", "ves.io.schema.tenant.AssignDomainOwnerRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/tenant/domain_owner/assign"}}

	aInfo.RPCsInfo[svcfw.RPCName("AssignDomainOwner")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.AssignDomainOwner"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CreateDebugUser", "ves.io.schema.tenant.CreateDebugUserRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/tenant/debug/user"}}

	aInfo.RPCsInfo[svcfw.RPCName("CreateDebugUser")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.CreateDebugUser"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DeleteDebugUser", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/system/tenant/debug/user"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeleteDebugUser")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.DeleteDebugUser"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DeleteImage", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/system/tenant/settings/tenant/image"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeleteImage")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.DeleteImage"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DeleteTenant", "ves.io.schema.tenant.DeleteTenantRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/tenant/request-delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeleteTenant")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.DeleteTenant"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DisableTenantLevelOTP", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/tenant/settings/otp/disable"}}

	aInfo.RPCsInfo[svcfw.RPCName("DisableTenantLevelOTP")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.DisableTenantLevelOTP"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("EnableTenantLevelOTP", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/tenant/settings/otp/enable"}}

	aInfo.RPCsInfo[svcfw.RPCName("EnableTenantLevelOTP")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.EnableTenantLevelOTP"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetDebugUser", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/debug/user"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetDebugUser")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetDebugUser"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetFavIcon", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/settings/tenant/favicon", "/public/static/namespaces/system/tenant/settings/tenant/favicon"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetFavIcon")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetFavIcon"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetIDMSettings", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/idm/settings"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetIDMSettings")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetIDMSettings"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetImage", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/settings/tenant/image", "/public/static/namespaces/system/tenant/settings/tenant/image"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetImage")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetImage"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetLastLoginMap", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/idm/events/last_login"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetLastLoginMap")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetLastLoginMap"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetLoginEvents", "ves.io.schema.tenant.GetLoginEventsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/idm/events/login"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetLoginEvents")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetLoginEvents"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetLoginEventsInTimeFrame", "ves.io.schema.tenant.GetLoginEventsInTimeFrameRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/tenant/idm/events/login_in_time"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetLoginEventsInTimeFrame")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetLoginEventsInTimeFrame"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetLogo", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/settings/tenant/logo"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetLogo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetLogo"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetPasswordPolicy", "ves.io.schema.tenant.GetPasswordPolicyRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/no_auth/tenant/idm/settings/password_policy"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetPasswordPolicy")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetPasswordPolicy"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetSupportInfo", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/support-info"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetSupportInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetSupportInfo"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetTenantEscalationDoc", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/tenant-escalation-doc"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetTenantEscalationDoc")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetTenantEscalationDoc"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetTenantSettings", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/settings"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetTenantSettings")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.GetTenantSettings"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListInactiveUsers", "ves.io.schema.tenant.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/tenant/idm/users/inactive"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListInactiveUsers")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.ListInactiveUsers"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("LookupCname", "ves.io.schema.tenant.LookupCnameRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/no_auth/cname/lookup", "/public/namespaces/system/tenant/lookup"}}

	aInfo.RPCsInfo[svcfw.RPCName("LookupCname")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.LookupCname"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UnassignDomainOwner", "ves.io.schema.tenant.UnassignDomainOwnerRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/tenant/domain_owner/unassign"}}

	aInfo.RPCsInfo[svcfw.RPCName("UnassignDomainOwner")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.UnassignDomainOwner"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateIDMSettings", "ves.io.schema.views.tenant_configuration.GlobalSpecType", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/tenant/idm/settings"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateIDMSettings")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.UpdateIDMSettings"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateImage", "ves.io.schema.tenant.UpdateImageRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/tenant/settings/tenant/image"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateImage")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.UpdateImage"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateTenantSettings", "ves.io.schema.tenant.UpdateTenantSettingsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/tenant/settings"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateTenantSettings")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.CustomAPI.UpdateTenantSettings"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.tenant.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/tenant/object.proto")
	pInfo.FilesInfo["ves.io/schema/tenant/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.tenant.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.tenant.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/tenant/types.proto")
	pInfo.FilesInfo["ves.io/schema/tenant/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.tenant.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tenant/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.tenant.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/tenant/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/tenant/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.tenant.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.tenant.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.tenant/Objects", "/ves.io.schema.tenant/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.tenant.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.tenant/Object/{object_uid}", "/ves.io.schema.tenant/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.tenant.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tenant/Object/{object_uid}", "/ves.io.schema.tenant/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.tenant.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tenant/Objects", "/ves.io.schema.tenant/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.tenant.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tenant/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.tenant.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.tenant/Object/{object_uid}", "/ves.io.schema.tenant/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tenant.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.tenant.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.token", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/token", false)
	mdr.PkgsInfo["ves.io.schema.token"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/token/object.proto")
	pInfo.FilesInfo["ves.io/schema/token/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.token.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.token.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/token/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/token/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.token.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.token.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/tokens"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.token.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/tokens/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.token.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tokens/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.token.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tokens"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.token.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/tokens/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.token.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.token.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.token.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.token.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.token.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.token.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/token/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/token/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.token.Object", false)

	rpcInfo = svcfw.NewRPCInfo("TokenState", "ves.io.schema.token.StateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/tokens/{name}/state"}}

	aInfo.RPCsInfo[svcfw.RPCName("TokenState")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.CustomAPI.TokenState"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.token.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/token/types.proto")
	pInfo.FilesInfo["ves.io/schema/token/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.token.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/token/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.token.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/token/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/token/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.token.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.token.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.token/Objects", "/ves.io.schema.token/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.token.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.token/Object/{object_uid}", "/ves.io.schema.token/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.token.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.token/Object/{object_uid}", "/ves.io.schema.token/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.token.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.token/Objects", "/ves.io.schema.token/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.token.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.token/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.token.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.token/Object/{object_uid}", "/ves.io.schema.token/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.token.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.token.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology", false)
	mdr.PkgsInfo["ves.io.schema.topology"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/private_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/topology/private_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("PrivateCustomAPI", "CUSTOM_PRIVATE", "ves.io.schema.topology.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ListCloudNetworkTagKeys", "ves.io.schema.topology.ListCloudNetworkTagKeysRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/private/custom/namespaces/{namespace}/network_tag_keys", "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/network_tag_keys"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListCloudNetworkTagKeys")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagKeys"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListCloudNetworkTagValues", "ves.io.schema.topology.ListCloudNetworkTagValuesRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/private/custom/namespaces/{namespace}/network_tag_values", "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/network_tag_values"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListCloudNetworkTagValues")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagValues"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListCloudSubnetTagKeys", "ves.io.schema.topology.ListCloudSubnetTagKeysRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/private/custom/namespaces/{namespace}/subnet_tag_keys", "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/subnet_tag_keys"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListCloudSubnetTagKeys")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.PrivateCustomAPI.ListCloudSubnetTagKeys"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListCloudSubnetTagValues", "ves.io.schema.topology.ListCloudSubnetTagValuesRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/private/custom/namespaces/{namespace}/subnet_tag_values", "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/subnet_tag_values"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListCloudSubnetTagValues")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.PrivateCustomAPI.ListCloudSubnetTagValues"] = rpcInfo

	fInfo.APIsInfo["PrivateCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.PrivateCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.topology.Object", false)

	rpcInfo = svcfw.NewRPCInfo("DCClusterGroupsSummary", "ves.io.schema.topology.DCClusterGroupsSummaryRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/topology/dc_cluster_groups"}}

	aInfo.RPCsInfo[svcfw.RPCName("DCClusterGroupsSummary")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.CustomDataAPI.DCClusterGroupsSummary"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DCClusterTopology", "ves.io.schema.topology.DCClusterTopologyRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/topology/dc_cluster_group/{dc_cluster_group}"}}

	aInfo.RPCsInfo[svcfw.RPCName("DCClusterTopology")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.CustomDataAPI.DCClusterTopology"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetRouteTable", "ves.io.schema.topology.RouteTableRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/topology/route_table/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetRouteTable")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.CustomDataAPI.GetRouteTable"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SiteMeshGroupsSummary", "ves.io.schema.topology.SiteMeshGroupsSummaryRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/topology/site_mesh_groups"}}

	aInfo.RPCsInfo[svcfw.RPCName("SiteMeshGroupsSummary")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.CustomDataAPI.SiteMeshGroupsSummary"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SiteMeshTopology", "ves.io.schema.topology.SiteMeshTopologyRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/topology/site_mesh_group/{site_mesh_group}"}}

	aInfo.RPCsInfo[svcfw.RPCName("SiteMeshTopology")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.CustomDataAPI.SiteMeshTopology"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SiteTopology", "ves.io.schema.topology.SiteTopologyRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/topology/site/{site}"}}

	aInfo.RPCsInfo[svcfw.RPCName("SiteTopology")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.CustomDataAPI.SiteTopology"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_cloud_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_cloud_policy", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_cloud_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_cloud_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_cloud_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_cloud_policy.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_cloud_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_cloud_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_cloud_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_cloud_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_cloud_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_cloud_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_cloud_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_cloud_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_cloud_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_cloud_policy/Objects", "/ves.io.schema.topology.topology_cloud_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_cloud_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_cloud_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_cloud_policy/Object/{object_uid}", "/ves.io.schema.topology.topology_cloud_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_cloud_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_cloud_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_cloud_policy/Object/{object_uid}", "/ves.io.schema.topology.topology_cloud_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_cloud_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_cloud_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_cloud_policy/Objects", "/ves.io.schema.topology.topology_cloud_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_cloud_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_cloud_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_cloud_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_cloud_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_cloud_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_cloud_policy/Object/{object_uid}", "/ves.io.schema.topology.topology_cloud_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_cloud_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_cloud_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_dc_cluster_group", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_dc_cluster_group", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_dc_cluster_group"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_dc_cluster_group/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_dc_cluster_group/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_dc_cluster_group.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_dc_cluster_group/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_dc_cluster_group/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_dc_cluster_group.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_dc_cluster_group/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_dc_cluster_group.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_dc_cluster_group/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_dc_cluster_group/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_dc_cluster_group.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_dc_cluster_group.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_dc_cluster_group/Objects", "/ves.io.schema.topology.topology_dc_cluster_group/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_dc_cluster_group.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_dc_cluster_group.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_dc_cluster_group/Object/{object_uid}", "/ves.io.schema.topology.topology_dc_cluster_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_dc_cluster_group.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_dc_cluster_group.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_dc_cluster_group/Object/{object_uid}", "/ves.io.schema.topology.topology_dc_cluster_group/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_dc_cluster_group.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_dc_cluster_group.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_dc_cluster_group/Objects", "/ves.io.schema.topology.topology_dc_cluster_group/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_dc_cluster_group.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_dc_cluster_group.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_dc_cluster_group/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_dc_cluster_group.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_dc_cluster_group.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_dc_cluster_group/Object/{object_uid}", "/ves.io.schema.topology.topology_dc_cluster_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_dc_cluster_group.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_dc_cluster_group.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_instance", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_instance", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_instance"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_instance/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_instance/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_instance.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_instance/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_instance/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_instance.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_instance/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_instance.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_instance/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_instance/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_instance.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_instance.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_instance/Objects", "/ves.io.schema.topology.topology_instance/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_instance.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_instance.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_instance/Object/{object_uid}", "/ves.io.schema.topology.topology_instance/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_instance.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_instance.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_instance/Object/{object_uid}", "/ves.io.schema.topology.topology_instance/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_instance.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_instance.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_instance/Objects", "/ves.io.schema.topology.topology_instance/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_instance.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_instance.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_instance/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_instance.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_instance.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_instance/Object/{object_uid}", "/ves.io.schema.topology.topology_instance/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_instance.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_instance.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_network", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_network", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_network"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_network/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_network/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_network.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_network/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_network/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_network.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_network/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_network.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_network/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_network/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_network.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_network.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_network/Objects", "/ves.io.schema.topology.topology_network/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_network.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_network/Object/{object_uid}", "/ves.io.schema.topology.topology_network/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_network.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_network/Object/{object_uid}", "/ves.io.schema.topology.topology_network/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_network.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_network/Objects", "/ves.io.schema.topology.topology_network/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_network.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_network/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_network.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_network/Object/{object_uid}", "/ves.io.schema.topology.topology_network/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_network.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_network_peer", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_network_peer", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_network_peer"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_network_peer/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_network_peer/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_network_peer.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_network_peer/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_network_peer/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_network_peer.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_network_peer/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_network_peer.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_network_peer/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_network_peer/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_network_peer.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_network_peer.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_network_peer/Objects", "/ves.io.schema.topology.topology_network_peer/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network_peer.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_network_peer.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_network_peer/Object/{object_uid}", "/ves.io.schema.topology.topology_network_peer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network_peer.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_network_peer.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_network_peer/Object/{object_uid}", "/ves.io.schema.topology.topology_network_peer/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network_peer.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_network_peer.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_network_peer/Objects", "/ves.io.schema.topology.topology_network_peer/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network_peer.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_network_peer.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_network_peer/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network_peer.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_network_peer.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_network_peer/Object/{object_uid}", "/ves.io.schema.topology.topology_network_peer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_network_peer.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_network_peer.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_region", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_region", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_region"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_region/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_region/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_region.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_region/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_region/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_region.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_region/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_region.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_region/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_region/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_region.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_region.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_region/Objects", "/ves.io.schema.topology.topology_region/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_region.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_region.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_region/Object/{object_uid}", "/ves.io.schema.topology.topology_region/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_region.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_region.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_region/Object/{object_uid}", "/ves.io.schema.topology.topology_region/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_region.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_region.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_region/Objects", "/ves.io.schema.topology.topology_region/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_region.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_region.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_region/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_region.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_region.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_region/Object/{object_uid}", "/ves.io.schema.topology.topology_region/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_region.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_region.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_route_table", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_route_table", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_route_table"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_route_table/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_route_table/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_route_table.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_route_table/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_route_table/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_route_table.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_route_table/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_route_table.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_route_table/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_route_table/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_route_table.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_route_table.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_route_table/Objects", "/ves.io.schema.topology.topology_route_table/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_route_table.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_route_table.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_route_table/Object/{object_uid}", "/ves.io.schema.topology.topology_route_table/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_route_table.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_route_table.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_route_table/Object/{object_uid}", "/ves.io.schema.topology.topology_route_table/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_route_table.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_route_table.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_route_table/Objects", "/ves.io.schema.topology.topology_route_table/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_route_table.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_route_table.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_route_table/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_route_table.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_route_table.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_route_table/Object/{object_uid}", "/ves.io.schema.topology.topology_route_table/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_route_table.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_route_table.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_site", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_site/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_site.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_site/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_site/Objects", "/ves.io.schema.topology.topology_site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_site/Object/{object_uid}", "/ves.io.schema.topology.topology_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_site/Object/{object_uid}", "/ves.io.schema.topology.topology_site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_site/Objects", "/ves.io.schema.topology.topology_site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_site/Object/{object_uid}", "/ves.io.schema.topology.topology_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_site_mesh_group", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_site_mesh_group", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_site_mesh_group"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_site_mesh_group/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_site_mesh_group/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_site_mesh_group.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_site_mesh_group/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_site_mesh_group/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_site_mesh_group.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_site_mesh_group/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_site_mesh_group.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_site_mesh_group/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_site_mesh_group/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_site_mesh_group.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_site_mesh_group.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_site_mesh_group/Objects", "/ves.io.schema.topology.topology_site_mesh_group/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site_mesh_group.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_site_mesh_group.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_site_mesh_group/Object/{object_uid}", "/ves.io.schema.topology.topology_site_mesh_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site_mesh_group.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_site_mesh_group.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_site_mesh_group/Object/{object_uid}", "/ves.io.schema.topology.topology_site_mesh_group/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site_mesh_group.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_site_mesh_group.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_site_mesh_group/Objects", "/ves.io.schema.topology.topology_site_mesh_group/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site_mesh_group.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_site_mesh_group.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_site_mesh_group/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site_mesh_group.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_site_mesh_group.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_site_mesh_group/Object/{object_uid}", "/ves.io.schema.topology.topology_site_mesh_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_site_mesh_group.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_site_mesh_group.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_subnet", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_subnet", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_subnet"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_subnet/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_subnet/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_subnet.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_subnet/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_subnet/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_subnet.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_subnet/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_subnet.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_subnet/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_subnet/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_subnet.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_subnet.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_subnet/Objects", "/ves.io.schema.topology.topology_subnet/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_subnet.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_subnet.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_subnet/Object/{object_uid}", "/ves.io.schema.topology.topology_subnet/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_subnet.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_subnet.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_subnet/Object/{object_uid}", "/ves.io.schema.topology.topology_subnet/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_subnet.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_subnet.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_subnet/Objects", "/ves.io.schema.topology.topology_subnet/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_subnet.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_subnet.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_subnet/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_subnet.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_subnet.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_subnet/Object/{object_uid}", "/ves.io.schema.topology.topology_subnet/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_subnet.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_subnet.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_transit_gateway", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_transit_gateway", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_transit_gateway"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_transit_gateway/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_transit_gateway/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_transit_gateway.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_transit_gateway/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_transit_gateway/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_transit_gateway.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_transit_gateway/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_transit_gateway.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_transit_gateway/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_transit_gateway/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_transit_gateway.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_transit_gateway.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_transit_gateway/Objects", "/ves.io.schema.topology.topology_transit_gateway/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_transit_gateway.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_transit_gateway.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_transit_gateway/Object/{object_uid}", "/ves.io.schema.topology.topology_transit_gateway/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_transit_gateway.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_transit_gateway.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_transit_gateway/Object/{object_uid}", "/ves.io.schema.topology.topology_transit_gateway/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_transit_gateway.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_transit_gateway.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_transit_gateway/Objects", "/ves.io.schema.topology.topology_transit_gateway/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_transit_gateway.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_transit_gateway.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_transit_gateway/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_transit_gateway.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_transit_gateway.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_transit_gateway/Object/{object_uid}", "/ves.io.schema.topology.topology_transit_gateway/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_transit_gateway.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_transit_gateway.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_tunnel", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_tunnel", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_tunnel"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_tunnel/object.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_tunnel/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.topology.topology_tunnel.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_tunnel/types.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_tunnel/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.topology.topology_tunnel.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology/topology_tunnel/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.topology.topology_tunnel.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/topology/topology_tunnel/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/topology/topology_tunnel/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.topology.topology_tunnel.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.topology.topology_tunnel.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.topology.topology_tunnel/Objects", "/ves.io.schema.topology.topology_tunnel/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_tunnel.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.topology.topology_tunnel.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.topology.topology_tunnel/Object/{object_uid}", "/ves.io.schema.topology.topology_tunnel/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_tunnel.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.topology.topology_tunnel.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_tunnel/Object/{object_uid}", "/ves.io.schema.topology.topology_tunnel/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_tunnel.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.topology.topology_tunnel.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_tunnel/Objects", "/ves.io.schema.topology.topology_tunnel/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_tunnel.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.topology.topology_tunnel.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.topology.topology_tunnel/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_tunnel.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.topology.topology_tunnel.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.topology.topology_tunnel/Object/{object_uid}", "/ves.io.schema.topology.topology_tunnel/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.topology.topology_tunnel.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.topology.topology_tunnel.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.trusted_ca_list", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/trusted_ca_list", false)
	mdr.PkgsInfo["ves.io.schema.trusted_ca_list"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/trusted_ca_list/object.proto")
	pInfo.FilesInfo["ves.io/schema/trusted_ca_list/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.trusted_ca_list.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.trusted_ca_list.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/trusted_ca_list/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/trusted_ca_list/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.trusted_ca_list.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.trusted_ca_list.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/trusted_ca_lists"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.trusted_ca_list.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/trusted_ca_lists/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.trusted_ca_list.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/trusted_ca_lists/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.trusted_ca_list.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/trusted_ca_lists"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.trusted_ca_list.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/trusted_ca_lists/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.trusted_ca_list.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.trusted_ca_list.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.trusted_ca_list.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.trusted_ca_list.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.trusted_ca_list.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.trusted_ca_list.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/trusted_ca_list/types.proto")
	pInfo.FilesInfo["ves.io/schema/trusted_ca_list/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.trusted_ca_list.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/trusted_ca_list/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.trusted_ca_list.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/trusted_ca_list/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/trusted_ca_list/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.trusted_ca_list.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.trusted_ca_list.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.trusted_ca_list/Objects", "/ves.io.schema.trusted_ca_list/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.trusted_ca_list.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.trusted_ca_list/Object/{object_uid}", "/ves.io.schema.trusted_ca_list/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.trusted_ca_list.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.trusted_ca_list/Object/{object_uid}", "/ves.io.schema.trusted_ca_list/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.trusted_ca_list.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.trusted_ca_list/Objects", "/ves.io.schema.trusted_ca_list/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.trusted_ca_list.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.trusted_ca_list/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.trusted_ca_list.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.trusted_ca_list/Object/{object_uid}", "/ves.io.schema.trusted_ca_list/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.trusted_ca_list.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.trusted_ca_list.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.tunnel", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tunnel", false)
	mdr.PkgsInfo["ves.io.schema.tunnel"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/tunnel/object.proto")
	pInfo.FilesInfo["ves.io/schema/tunnel/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.tunnel.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.tunnel.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/tunnel/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/tunnel/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.tunnel.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.tunnel.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/tunnels"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.tunnel.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/tunnels/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.tunnel.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tunnels/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.tunnel.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tunnels"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.tunnel.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/tunnels/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.tunnel.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.tunnel.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.tunnel.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.tunnel.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.tunnel.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.tunnel.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/tunnel/types.proto")
	pInfo.FilesInfo["ves.io/schema/tunnel/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.tunnel.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tunnel/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.tunnel.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/tunnel/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/tunnel/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.tunnel.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.tunnel.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.tunnel/Objects", "/ves.io.schema.tunnel/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.tunnel.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.tunnel/Object/{object_uid}", "/ves.io.schema.tunnel/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.tunnel.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tunnel/Object/{object_uid}", "/ves.io.schema.tunnel/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.tunnel.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tunnel/Objects", "/ves.io.schema.tunnel/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.tunnel.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tunnel/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.tunnel.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.tunnel/Object/{object_uid}", "/ves.io.schema.tunnel/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.tunnel.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.ui.static_component", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ui/static_component", false)
	mdr.PkgsInfo["ves.io.schema.ui.static_component"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/ui/static_component/object.proto")
	pInfo.FilesInfo["ves.io/schema/ui/static_component/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.ui.static_component.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/ui/static_component/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/ui/static_component/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.ui.static_component.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.ui.static_component.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/static_components/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ui.static_component.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.ui.static_component.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/static_components"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ui.static_component.API.List"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.ui.static_component.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.ui.static_component.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.ui.static_component.ListRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/ui/static_component/types.proto")
	pInfo.FilesInfo["ves.io/schema/ui/static_component/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.ui.static_component.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ui/static_component/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.ui.static_component.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/ui/static_component/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/ui/static_component/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.ui.static_component.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.ui.static_component.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.ui.static_component/Objects", "/ves.io.schema.ui.static_component/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ui.static_component.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.ui.static_component.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.ui.static_component/Object/{object_uid}", "/ves.io.schema.ui.static_component/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ui.static_component.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.ui.static_component.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ui.static_component/Object/{object_uid}", "/ves.io.schema.ui.static_component/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ui.static_component.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.ui.static_component.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ui.static_component/Objects", "/ves.io.schema.ui.static_component/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ui.static_component.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.ui.static_component.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ui.static_component/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ui.static_component.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.ui.static_component.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.ui.static_component/Object/{object_uid}", "/ves.io.schema.ui.static_component/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.ui.static_component.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.ui.static_component.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.usb_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/usb_policy", false)
	mdr.PkgsInfo["ves.io.schema.usb_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/usb_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/usb_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.usb_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.usb_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/usb_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/usb_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.usb_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.usb_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/usb_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.usb_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/usb_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.usb_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/usb_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.usb_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/usb_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.usb_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/usb_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.usb_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.usb_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.usb_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.usb_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.usb_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.usb_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/usb_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/usb_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.usb_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/usb_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.usb_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/usb_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/usb_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.usb_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.usb_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.usb_policy/Objects", "/ves.io.schema.usb_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.usb_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.usb_policy/Object/{object_uid}", "/ves.io.schema.usb_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.usb_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.usb_policy/Object/{object_uid}", "/ves.io.schema.usb_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.usb_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.usb_policy/Objects", "/ves.io.schema.usb_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.usb_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.usb_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.usb_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.usb_policy/Object/{object_uid}", "/ves.io.schema.usb_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.usb_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.user", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user", false)
	mdr.PkgsInfo["ves.io.schema.user"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user/object.proto")
	pInfo.FilesInfo["ves.io/schema/user/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.user.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.user.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user/private_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/user/private_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomPrivateAPI", "CUSTOM_PRIVATE", "ves.io.schema.user.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CascadeDelete", "ves.io.schema.user.PrivateCascadeDeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema/introspect/write/namespaces/{namespace}/users/cascade_delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("CascadeDelete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomPrivateAPI.CascadeDelete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListByNotificationPreferences", "ves.io.schema.user.ListByNotifPrefRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema/introspect/restricted/read/users/list-by-notification-preferences"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListByNotificationPreferences")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomPrivateAPI.ListByNotificationPreferences"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateLastLogin", "ves.io.schema.user.LastLoginUpdateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema/introspect/write/private/custom/namespaces/system/users/update_last_login"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateLastLogin")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomPrivateAPI.UpdateLastLogin"] = rpcInfo

	fInfo.APIsInfo["CustomPrivateAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.user.CustomPrivateAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/user/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.user.Object", false)

	rpcInfo = svcfw.NewRPCInfo("AcceptTOS", "ves.io.schema.user.AcceptTOSRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/accept_tos"}}

	aInfo.RPCsInfo[svcfw.RPCName("AcceptTOS")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.AcceptTOS"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("AddUserToGroup", "ves.io.schema.user.UserGroupRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/custom/namespaces/system/users/group_add"}}

	aInfo.RPCsInfo[svcfw.RPCName("AddUserToGroup")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.AddUserToGroup"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("AssignRole", "ves.io.schema.user.AssignRoleRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/role_users"}}

	aInfo.RPCsInfo[svcfw.RPCName("AssignRole")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.AssignRole"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CascadeDelete", "ves.io.schema.user.CascadeDeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/users/cascade_delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("CascadeDelete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.CascadeDelete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.user.UserRoleRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/user_roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.user.GetUserRoleRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/whoami"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetTOS", "ves.io.schema.user.GetTOSRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/tos"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetTOS")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.GetTOS"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.user.ListUserRoleRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/user_roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RemoveUserFromGroup", "ves.io.schema.user.UserGroupRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/custom/namespaces/system/users/group_remove"}}

	aInfo.RPCsInfo[svcfw.RPCName("RemoveUserFromGroup")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.RemoveUserFromGroup"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.user.UserRoleRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/user_roles/{name}"}, "PUT": []string{"/public/custom/namespaces/{namespace}/user_roles"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.Replace"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ResetPassword", "ves.io.schema.user.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/password/reset"}}

	aInfo.RPCsInfo[svcfw.RPCName("ResetPassword")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.ResetPassword"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ResetPasswordByAdmin", "ves.io.schema.user.ResetPasswordByAdminRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/password/admin_reset"}}

	aInfo.RPCsInfo[svcfw.RPCName("ResetPasswordByAdmin")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.ResetPasswordByAdmin"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SendPasswordEmail", "ves.io.schema.user.SendPasswordEmailRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/send_password_email"}}

	aInfo.RPCsInfo[svcfw.RPCName("SendPasswordEmail")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.SendPasswordEmail"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SyncUser", "ves.io.schema.user.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/idm/user/sync"}}

	aInfo.RPCsInfo[svcfw.RPCName("SyncUser")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.CustomAPI.SyncUser"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.user.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user/types.proto")
	pInfo.FilesInfo["ves.io/schema/user/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.user.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.user.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/user/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.user.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.user.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.user/Objects", "/ves.io.schema.user/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.user.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.user/Object/{object_uid}", "/ves.io.schema.user/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.user.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user/Object/{object_uid}", "/ves.io.schema.user/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.user.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user/Objects", "/ves.io.schema.user/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.user.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.user.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.user/Object/{object_uid}", "/ves.io.schema.user/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.user.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.user.setting", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user/setting", false)
	mdr.PkgsInfo["ves.io.schema.user.setting"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user/setting/custom_api.proto")
	pInfo.FilesInfo["ves.io/schema/user/setting/custom_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.user.Object", false)

	rpcInfo = svcfw.NewRPCInfo("DeleteUserImage", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/system/user/settings/image"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeleteUserImage")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.DeleteUserImage"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DisableUserInIDM", "ves.io.schema.user.setting.UserEmail", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/settings/idm/disable"}}

	aInfo.RPCsInfo[svcfw.RPCName("DisableUserInIDM")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.DisableUserInIDM"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("EnableUserInIDM", "ves.io.schema.user.setting.UserEmail", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/settings/idm/enable"}}

	aInfo.RPCsInfo[svcfw.RPCName("EnableUserInIDM")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.EnableUserInIDM"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/user/settings"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetAdminNtfnPreferences", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/user/admin_notifications"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAdminNtfnPreferences")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.GetAdminNtfnPreferences"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetCombinedNtfnPreferences", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/user/combined_notifications"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetCombinedNtfnPreferences")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.GetCombinedNtfnPreferences"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetNtfnPreferences", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/user/notifications"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetNtfnPreferences")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.GetNtfnPreferences"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetUserImage", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/user/settings/image"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetUserImage")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.GetUserImage"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetUserSessions", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/user/sessions"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetUserSessions")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.GetUserSessions"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetViewPreference", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/user/settings/view_preference"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetViewPreference")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.GetViewPreference"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RequestInitialAccess", "ves.io.schema.user.setting.Empty", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/settings/request_initial_access"}}

	aInfo.RPCsInfo[svcfw.RPCName("RequestInitialAccess")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.RequestInitialAccess"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ResetOtpDeviceByAdmin", "ves.io.schema.user.setting.UserEmail", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/otp/admin_reset"}}

	aInfo.RPCsInfo[svcfw.RPCName("ResetOtpDeviceByAdmin")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.ResetOtpDeviceByAdmin"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetViewPreference", "ves.io.schema.user.setting.SetViewPreferenceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/settings/view_preference"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetViewPreference")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.SetViewPreference"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UnsetAdminNtfnPreference", "ves.io.schema.user.setting.NtfnToUnset", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/admin_notifications/unset"}}

	aInfo.RPCsInfo[svcfw.RPCName("UnsetAdminNtfnPreference")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.UnsetAdminNtfnPreference"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UnsetNtfnPreference", "ves.io.schema.user.setting.NtfnToUnset", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/notifications/unset"}}

	aInfo.RPCsInfo[svcfw.RPCName("UnsetNtfnPreference")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.UnsetNtfnPreference"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Update", "ves.io.schema.user.setting.UserSettingsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/settings"}}

	aInfo.RPCsInfo[svcfw.RPCName("Update")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.Update"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateAdminNtfnPreferences", "ves.io.schema.user.setting.NtfnPreferencesMap", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/admin_notifications"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateAdminNtfnPreferences")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.UpdateAdminNtfnPreferences"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateCombinedNtfnPreferences", "ves.io.schema.user.setting.NtfnPreferencesMap", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/combined_notifications"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateCombinedNtfnPreferences")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.UpdateCombinedNtfnPreferences"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateNtfnPreferences", "ves.io.schema.user.setting.NtfnPreferencesMap", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/notifications"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateNtfnPreferences")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.UpdateNtfnPreferences"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateUserImage", "ves.io.schema.user.setting.UpdateImageRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/system/user/settings/image"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateUserImage")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user.setting.CustomAPI.UpdateUserImage"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.user.setting.CustomAPI"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.user_identification", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user_identification", false)
	mdr.PkgsInfo["ves.io.schema.user_identification"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user_identification/object.proto")
	pInfo.FilesInfo["ves.io/schema/user_identification/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.user_identification.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.user_identification.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user_identification/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/user_identification/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.user_identification.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.user_identification.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/user_identifications"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.user_identification.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/user_identifications/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.user_identification.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/user_identifications/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.user_identification.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/user_identifications"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.user_identification.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/user_identifications/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.user_identification.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.user_identification.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.user_identification.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.user_identification.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.user_identification.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.user_identification.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user_identification/types.proto")
	pInfo.FilesInfo["ves.io/schema/user_identification/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.user_identification.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user_identification/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.user_identification.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/user_identification/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/user_identification/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.user_identification.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.user_identification.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.user_identification/Objects", "/ves.io.schema.user_identification/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.user_identification.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.user_identification/Object/{object_uid}", "/ves.io.schema.user_identification/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.user_identification.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user_identification/Object/{object_uid}", "/ves.io.schema.user_identification/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.user_identification.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user_identification/Objects", "/ves.io.schema.user_identification/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.user_identification.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user_identification/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.user_identification.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.user_identification/Object/{object_uid}", "/ves.io.schema.user_identification/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.user_identification.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.vesenv", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv", false)
	mdr.PkgsInfo["ves.io.schema.vesenv"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/vesenv/all_addon_service_groups.proto")
	pInfo.FilesInfo["ves.io/schema/vesenv/all_addon_service_groups.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/vesenv/all_addon_services.proto")
	pInfo.FilesInfo["ves.io/schema/vesenv/all_addon_services.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/vesenv/all_api_groups.proto")
	pInfo.FilesInfo["ves.io/schema/vesenv/all_api_groups.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/vesenv/all_route_targets.proto")
	pInfo.FilesInfo["ves.io/schema/vesenv/all_route_targets.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/vesenv/all_services.proto")
	pInfo.FilesInfo["ves.io/schema/vesenv/all_services.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/vesenv/options.proto")
	pInfo.FilesInfo["ves.io/schema/vesenv/options.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/vesenv/quota_resource_keys.proto")
	pInfo.FilesInfo["ves.io/schema/vesenv/quota_resource_keys.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views", false)
	mdr.PkgsInfo["ves.io.schema.views"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/site_types.proto")
	pInfo.FilesInfo["ves.io/schema/views/site_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/storage_types.proto")
	pInfo.FilesInfo["ves.io/schema/views/storage_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.api_definition", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_definition", false)
	mdr.PkgsInfo["ves.io.schema.views.api_definition"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_definition/custom_api.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_definition/custom_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PRIVATE", "", false)

	rpcInfo = svcfw.NewRPCInfo("GetApiEndpointPathsSuggestions", "ves.io.schema.views.api_definition.GetApiEndpointPathsSuggestionsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/namespaces/{namespace}/api_definitions/{name}/api_endpoint_path/suggestion"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetApiEndpointPathsSuggestions")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.CustomAPI.GetApiEndpointPathsSuggestions"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetBasePathSuggestions", "ves.io.schema.views.api_definition.GetBasePathSuggestionsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/namespaces/{namespace}/api_definitions/{name}/base_path/suggestion"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetBasePathSuggestions")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.CustomAPI.GetBasePathSuggestions"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetMethodsSuggestions", "ves.io.schema.views.api_definition.GetMethodsSuggestionsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/namespaces/{namespace}/api_definitions/{name}/api_endpoint_method/suggestion"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetMethodsSuggestions")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.CustomAPI.GetMethodsSuggestions"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.api_definition.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_definition/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_definition/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.api_definition.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.api_definition.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_definition/private_config_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_definition/private_config_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("PrivateConfigCustomAPI", "CUSTOM_PRIVATE", "ves.io.schema.views.api_definition.Object", false)

	rpcInfo = svcfw.NewRPCInfo("UpdateAPIInventoryOpenAPISpecs", "ves.io.schema.views.api_definition.UpdateAPIInventoryOpenAPISpecsReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/namespaces/{namespace}/api_definitions/{name}/update_inventory_specs"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateAPIInventoryOpenAPISpecs")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.PrivateConfigCustomAPI.UpdateAPIInventoryOpenAPISpecs"] = rpcInfo

	fInfo.APIsInfo["PrivateConfigCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.api_definition.PrivateConfigCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_definition/public_apiep_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_definition/public_apiep_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("PublicApiepCustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.api_definition.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetAPIEndpointsSchemaUpdates", "ves.io.schema.views.api_definition.GetAPIEndpointsSchemaUpdatesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_definitions/{name}/api_inventory/api_endpoints/get_schema_updates"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpointsSchemaUpdates")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.PublicApiepCustomAPI.GetAPIEndpointsSchemaUpdates"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateAPIEndpointsSchemas", "ves.io.schema.views.api_definition.UpdateAPIEndpointsSchemasReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_definitions/{name}/api_inventory/api_endpoints/update_schemas"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateAPIEndpointsSchemas")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.PublicApiepCustomAPI.UpdateAPIEndpointsSchemas"] = rpcInfo

	fInfo.APIsInfo["PublicApiepCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.api_definition.PublicApiepCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_definition/public_config_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_definition/public_config_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("PublicConfigCustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.api_definition.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetReferencingHttpLoadbalancers", "ves.io.schema.views.api_definition.GetReferencingLoadbalancersReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_definitions/{name}/http_loadbalancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetReferencingHttpLoadbalancers")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.PublicConfigCustomAPI.GetReferencingHttpLoadbalancers"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("MarkAsNonAPI", "ves.io.schema.views.api_definition.APInventoryReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_definitions/{name}/mark_as_non_api"}}

	aInfo.RPCsInfo[svcfw.RPCName("MarkAsNonAPI")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.PublicConfigCustomAPI.MarkAsNonAPI"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("MoveToAPInventory", "ves.io.schema.views.api_definition.APInventoryReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_definitions/{name}/move_to_inventory"}}

	aInfo.RPCsInfo[svcfw.RPCName("MoveToAPInventory")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.PublicConfigCustomAPI.MoveToAPInventory"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("RemoveFromAPInventory", "ves.io.schema.views.api_definition.APInventoryReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_definitions/{name}/remove_from_inventory"}}

	aInfo.RPCsInfo[svcfw.RPCName("RemoveFromAPInventory")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.PublicConfigCustomAPI.RemoveFromAPInventory"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UnmarkAsNonAPI", "ves.io.schema.views.api_definition.APInventoryReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_definitions/{name}/unmark_as_non_api"}}

	aInfo.RPCsInfo[svcfw.RPCName("UnmarkAsNonAPI")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.PublicConfigCustomAPI.UnmarkAsNonAPI"] = rpcInfo

	fInfo.APIsInfo["PublicConfigCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.api_definition.PublicConfigCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_definition/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_definition/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.api_definition.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.api_definition.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/api_definitions"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.api_definition.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/api_definitions/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.api_definition.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_definitions/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.api_definition.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_definitions"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.api_definition.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/api_definitions/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.api_definition.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.api_definition.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.api_definition.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.api_definition.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.api_definition.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.api_definition.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_definition/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_definition/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.api_definition.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_definition/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.api_definition.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_definition/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_definition/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.api_definition.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.api_definition.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.api_definition/Objects", "/ves.io.schema.views.api_definition/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.api_definition.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.api_definition/Object/{object_uid}", "/ves.io.schema.views.api_definition/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.api_definition.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.api_definition/Object/{object_uid}", "/ves.io.schema.views.api_definition/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.api_definition.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.api_definition/Objects", "/ves.io.schema.views.api_definition/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.api_definition.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.api_definition/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.api_definition.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.api_definition/Object/{object_uid}", "/ves.io.schema.views.api_definition/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_definition.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.api_definition.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.api_inventory", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_inventory", false)
	mdr.PkgsInfo["ves.io.schema.views.api_inventory"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_inventory/custom_api.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_inventory/custom_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPIPrivate", "CUSTOM_PRIVATE", "ves.io.schema.views.api_inventory.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetPathSuggestions", "ves.io.schema.views.api_inventory.GetPathSuggestionsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/namespaces/{namespace}/api_inventories/{name}/api_endpoint_path/suggestion"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetPathSuggestions")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_inventory.CustomAPIPrivate.GetPathSuggestions"] = rpcInfo

	fInfo.APIsInfo["CustomAPIPrivate"] = aInfo
	mdr.APIIdx["ves.io.schema.views.api_inventory.CustomAPIPrivate"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_inventory/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_inventory/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.api_inventory.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.api_inventory.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_inventory/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_inventory/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.api_inventory.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_inventory/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.api_inventory.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/api_inventory/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/api_inventory/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.api_inventory.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.api_inventory.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.api_inventory/Objects", "/ves.io.schema.views.api_inventory/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_inventory.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.api_inventory.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.api_inventory/Object/{object_uid}", "/ves.io.schema.views.api_inventory/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_inventory.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.api_inventory.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.api_inventory/Object/{object_uid}", "/ves.io.schema.views.api_inventory/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_inventory.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.api_inventory.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.api_inventory/Objects", "/ves.io.schema.views.api_inventory/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_inventory.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.api_inventory.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.api_inventory/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_inventory.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.api_inventory.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.api_inventory/Object/{object_uid}", "/ves.io.schema.views.api_inventory/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.api_inventory.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.api_inventory.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.app_api_group", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/app_api_group", false)
	mdr.PkgsInfo["ves.io.schema.views.app_api_group"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/app_api_group/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/app_api_group/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.app_api_group.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.app_api_group.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/app_api_group/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/app_api_group/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.app_api_group.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.app_api_group.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/app_api_groups"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.app_api_group.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/app_api_groups/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.app_api_group.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_api_groups/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.app_api_group.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_api_groups"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.app_api_group.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/app_api_groups/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.app_api_group.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.app_api_group.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.app_api_group.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.app_api_group.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.app_api_group.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.app_api_group.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/app_api_group/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/app_api_group/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.app_api_group.Object", false)

	rpcInfo = svcfw.NewRPCInfo("EvaluateApiGroup", "ves.io.schema.views.app_api_group.EvaluateApiGroupReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_api_groups/evaluate"}}

	aInfo.RPCsInfo[svcfw.RPCName("EvaluateApiGroup")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.CustomAPI.EvaluateApiGroup"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetApiGroupsStats", "ves.io.schema.views.app_api_group.GetApiGroupsStatsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_api_groups/stats"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetApiGroupsStats")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.CustomAPI.GetApiGroupsStats"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.app_api_group.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/app_api_group/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/app_api_group/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.app_api_group.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/app_api_group/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.app_api_group.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/app_api_group/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/app_api_group/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.app_api_group.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.app_api_group.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.app_api_group/Objects", "/ves.io.schema.views.app_api_group/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.app_api_group.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.app_api_group/Object/{object_uid}", "/ves.io.schema.views.app_api_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.app_api_group.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.app_api_group/Object/{object_uid}", "/ves.io.schema.views.app_api_group/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.app_api_group.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.app_api_group/Objects", "/ves.io.schema.views.app_api_group/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.app_api_group.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.app_api_group/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.app_api_group.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.app_api_group/Object/{object_uid}", "/ves.io.schema.views.app_api_group/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.app_api_group.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.app_api_group.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.aws_tgw_site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_tgw_site", false)
	mdr.PkgsInfo["ves.io.schema.views.aws_tgw_site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_tgw_site/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.aws_tgw_site.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.aws_tgw_site.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_tgw_site/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.aws_tgw_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.aws_tgw_site.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/aws_tgw_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.aws_tgw_site.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/aws_tgw_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.aws_tgw_site.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/aws_tgw_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.aws_tgw_site.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/aws_tgw_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.aws_tgw_site.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/aws_tgw_sites/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.aws_tgw_site.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_tgw_site/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.aws_tgw_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("SetTGWInfo", "ves.io.schema.views.aws_tgw_site.SetTGWInfoRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_tgw_site/{name}/set_tgw_info"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetTGWInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.CustomAPI.SetTGWInfo"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetVIPInfo", "ves.io.schema.views.aws_tgw_site.SetVIPInfoRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_tgw_site/{name}/set_vip_info"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetVIPInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.CustomAPI.SetVIPInfo"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetVPCIpPrefixes", "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_tgw_site/{name}/set_vpc_ip_prefixes"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetVPCIpPrefixes")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.CustomAPI.SetVPCIpPrefixes"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetVPNTunnels", "ves.io.schema.views.aws_tgw_site.SetVPNTunnelsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_tgw_site/{name}/set_vpn_tunnels"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetVPNTunnels")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.CustomAPI.SetVPNTunnels"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.aws_tgw_site.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_tgw_site/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.aws_tgw_site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_tgw_site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.aws_tgw_site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_tgw_site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.aws_tgw_site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.aws_tgw_site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.aws_tgw_site/Objects", "/ves.io.schema.views.aws_tgw_site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.aws_tgw_site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.aws_tgw_site/Object/{object_uid}", "/ves.io.schema.views.aws_tgw_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.aws_tgw_site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_tgw_site/Object/{object_uid}", "/ves.io.schema.views.aws_tgw_site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.aws_tgw_site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_tgw_site/Objects", "/ves.io.schema.views.aws_tgw_site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.aws_tgw_site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_tgw_site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.aws_tgw_site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.aws_tgw_site/Object/{object_uid}", "/ves.io.schema.views.aws_tgw_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.aws_tgw_site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.aws_vpc_site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_vpc_site", false)
	mdr.PkgsInfo["ves.io.schema.views.aws_vpc_site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_vpc_site/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.aws_vpc_site.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.aws_vpc_site.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_vpc_site/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.aws_vpc_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.aws_vpc_site.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/aws_vpc_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.aws_vpc_site.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/aws_vpc_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.aws_vpc_site.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/aws_vpc_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.aws_vpc_site.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/aws_vpc_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.aws_vpc_site.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/aws_vpc_sites/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.aws_vpc_site.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_vpc_site/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.aws_vpc_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("SetCloudSiteInfo", "ves.io.schema.views.aws_vpc_site.SetCloudSiteInfoRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_vpc_site/{name}/set_cloud_site_info"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetCloudSiteInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.CustomAPI.SetCloudSiteInfo"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetVIPInfo", "ves.io.schema.views.aws_vpc_site.SetVIPInfoRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_vpc_site/{name}/set_vip_info"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetVIPInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.CustomAPI.SetVIPInfo"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetVPCK8SHostnames", "ves.io.schema.views.aws_vpc_site.SetVPCK8SHostnamesRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_vpc_site/{name}/storage/set_vpc_k8s_hostnames"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetVPCK8SHostnames")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.CustomAPI.SetVPCK8SHostnames"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.aws_vpc_site.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_vpc_site/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.aws_vpc_site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_vpc_site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.aws_vpc_site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/aws_vpc_site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.aws_vpc_site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.aws_vpc_site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.aws_vpc_site/Objects", "/ves.io.schema.views.aws_vpc_site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.aws_vpc_site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.aws_vpc_site/Object/{object_uid}", "/ves.io.schema.views.aws_vpc_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.aws_vpc_site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_vpc_site/Object/{object_uid}", "/ves.io.schema.views.aws_vpc_site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.aws_vpc_site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_vpc_site/Objects", "/ves.io.schema.views.aws_vpc_site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.aws_vpc_site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_vpc_site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.aws_vpc_site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.aws_vpc_site/Object/{object_uid}", "/ves.io.schema.views.aws_vpc_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.aws_vpc_site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.azure_vnet_site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/azure_vnet_site", false)
	mdr.PkgsInfo["ves.io.schema.views.azure_vnet_site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/azure_vnet_site/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.views.azure_vnet_site.Object.spec.gc_spec.site_type.ingress_egress_gw.hub_choice.hub.express_route_choice.express_route_enabled.connections.subscription_choice.other_subscription.authorized_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000010),
		WKTenantPrefix: "",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.views.azure_vnet_site.Object.spec.gc_spec.site_type.ingress_egress_gw_ar.hub_choice.hub.express_route_choice.express_route_enabled.connections.subscription_choice.other_subscription.authorized_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000010),
		WKTenantPrefix: "",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.azure_vnet_site.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.azure_vnet_site.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/azure_vnet_site/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.azure_vnet_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.azure_vnet_site.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/azure_vnet_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.azure_vnet_site.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/azure_vnet_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.azure_vnet_site.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/azure_vnet_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.azure_vnet_site.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/azure_vnet_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.azure_vnet_site.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/azure_vnet_sites/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.azure_vnet_site.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/azure_vnet_site/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.azure_vnet_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("SetCloudSiteInfo", "ves.io.schema.views.azure_vnet_site.SetCloudSiteInfoRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/azure_vnet_site/{name}/set_cloud_site_info"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetCloudSiteInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.CustomAPI.SetCloudSiteInfo"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("SetVIPInfo", "ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/azure_vnet_site/{name}/set_vip_info"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetVIPInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.CustomAPI.SetVIPInfo"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.azure_vnet_site.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/azure_vnet_site/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.azure_vnet_site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/azure_vnet_site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.azure_vnet_site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/azure_vnet_site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.azure_vnet_site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.azure_vnet_site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.azure_vnet_site/Objects", "/ves.io.schema.views.azure_vnet_site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.azure_vnet_site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.azure_vnet_site/Object/{object_uid}", "/ves.io.schema.views.azure_vnet_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.azure_vnet_site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.azure_vnet_site/Object/{object_uid}", "/ves.io.schema.views.azure_vnet_site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.azure_vnet_site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.azure_vnet_site/Objects", "/ves.io.schema.views.azure_vnet_site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.azure_vnet_site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.azure_vnet_site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.azure_vnet_site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.azure_vnet_site/Object/{object_uid}", "/ves.io.schema.views.azure_vnet_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.azure_vnet_site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.bot_defense_app_infrastructure", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/bot_defense_app_infrastructure", false)
	mdr.PkgsInfo["ves.io.schema.views.bot_defense_app_infrastructure"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/bot_defense_app_infrastructure/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/bot_defense_app_infrastructure/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.bot_defense_app_infrastructure.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/bot_defense_app_infrastructure/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/bot_defense_app_infrastructure/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.bot_defense_app_infrastructure.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.bot_defense_app_infrastructure.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/bot_defense_app_infrastructures"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.bot_defense_app_infrastructure.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/bot_defense_app_infrastructures/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.bot_defense_app_infrastructure.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bot_defense_app_infrastructures/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.bot_defense_app_infrastructure.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bot_defense_app_infrastructures"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.bot_defense_app_infrastructure.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/bot_defense_app_infrastructures/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.bot_defense_app_infrastructure.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.bot_defense_app_infrastructure.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.bot_defense_app_infrastructure.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.bot_defense_app_infrastructure.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.bot_defense_app_infrastructure.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.bot_defense_app_infrastructure.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/bot_defense_app_infrastructure/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/bot_defense_app_infrastructure/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.bot_defense_app_infrastructure.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/bot_defense_app_infrastructure/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.bot_defense_app_infrastructure.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/bot_defense_app_infrastructure/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/bot_defense_app_infrastructure/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.bot_defense_app_infrastructure.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.bot_defense_app_infrastructure.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.bot_defense_app_infrastructure/Objects", "/ves.io.schema.views.bot_defense_app_infrastructure/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.bot_defense_app_infrastructure.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.bot_defense_app_infrastructure/Object/{object_uid}", "/ves.io.schema.views.bot_defense_app_infrastructure/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.bot_defense_app_infrastructure.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.bot_defense_app_infrastructure/Object/{object_uid}", "/ves.io.schema.views.bot_defense_app_infrastructure/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.bot_defense_app_infrastructure.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.bot_defense_app_infrastructure/Objects", "/ves.io.schema.views.bot_defense_app_infrastructure/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.bot_defense_app_infrastructure.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.bot_defense_app_infrastructure/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.bot_defense_app_infrastructure.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.bot_defense_app_infrastructure/Object/{object_uid}", "/ves.io.schema.views.bot_defense_app_infrastructure/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.bot_defense_app_infrastructure.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.bot_defense_app_infrastructure.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.cdn_loadbalancer", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/cdn_loadbalancer", false)
	mdr.PkgsInfo["ves.io.schema.views.cdn_loadbalancer"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/cdn_loadbalancer/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/cdn_loadbalancer/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	oInfo.ReEncryptSecrets["ves.io.schema.views.cdn_loadbalancer.Object.spec.gc_spec.loadbalancer_type.https.tls_parameters.tls_certificates.private_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000008),
		WKTenantPrefix: "ves-io-cdn-",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.views.cdn_loadbalancer.Object.spec.gc_spec.more_option.header_options.request_headers_to_add.value_choice.secret_value"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000008),
		WKTenantPrefix: "ves-io-cdn-",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.views.cdn_loadbalancer.Object.spec.gc_spec.more_option.header_options.response_headers_to_add.value_choice.secret_value"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000008),
		WKTenantPrefix: "ves-io-cdn-",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.views.cdn_loadbalancer.Object.spec.gc_spec.more_option.security_options.auth_options.auth_options.jwt.secret_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000008),
		WKTenantPrefix: "ves-io-cdn-",
	}
	oInfo.ReEncryptSecrets["ves.io.schema.views.cdn_loadbalancer.Object.spec.gc_spec.more_option.security_options.auth_options.auth_options.jwt.backup_key"] = &svcfw.ReEncryptBFSecretInfo{
		PolicyID:       uint64(1000008),
		WKTenantPrefix: "ves-io-cdn-",
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.cdn_loadbalancer.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.cdn_loadbalancer.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/cdn_loadbalancer/private_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/cdn_loadbalancer/private_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("PrivateCustomAPI", "CUSTOM_PRIVATE", "ves.io.schema.views.cdn_loadbalancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("UpdateServiceDomains", "ves.io.schema.views.cdn_loadbalancer.UpdateServiceDomainsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/custom/namespaces/{namespace}/cdn_loadbalancer/{name}/update_service_domains", "/ves.io.schema/introspect/write/custom/namespaces/{namespace}/cdn_loadbalancer/{name}/update_service_domains"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateServiceDomains")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI.UpdateServiceDomains"] = rpcInfo

	fInfo.APIsInfo["PrivateCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.cdn_loadbalancer.PrivateCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/cdn_loadbalancer/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/cdn_loadbalancer/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.cdn_loadbalancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.cdn_loadbalancer.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/cdn_loadbalancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.cdn_loadbalancer.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/cdn_loadbalancers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.cdn_loadbalancer.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cdn_loadbalancers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.cdn_loadbalancer.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cdn_loadbalancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.cdn_loadbalancer.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/cdn_loadbalancers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.cdn_loadbalancer.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.cdn_loadbalancer.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.cdn_loadbalancer.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.cdn_loadbalancer.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.cdn_loadbalancer.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.cdn_loadbalancer.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/cdn_loadbalancer/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/cdn_loadbalancer/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.cdn_loadbalancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("CDNAccessLogAggregationQuery", "ves.io.schema.views.cdn_loadbalancer.CDNAccessLogAggregationRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/cdn_loadbalancer/access_logs/aggregation"}}

	aInfo.RPCsInfo[svcfw.RPCName("CDNAccessLogAggregationQuery")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI.CDNAccessLogAggregationQuery"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CDNAccessLogs", "ves.io.schema.views.cdn_loadbalancer.CDNAccessLogRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/cdn_loadbalancer/access_logs"}}

	aInfo.RPCsInfo[svcfw.RPCName("CDNAccessLogs")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI.CDNAccessLogs"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CDNCachePurge", "ves.io.schema.views.cdn_loadbalancer.LilacCDNCachePurgeRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/cdn_loadbalancer/{name}/cache-purge"}}

	aInfo.RPCsInfo[svcfw.RPCName("CDNCachePurge")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI.CDNCachePurge"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("CDNMetrics", "ves.io.schema.views.cdn_loadbalancer.LilacCDNMetricsRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/cdn_loadbalancer/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("CDNMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI.CDNMetrics"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetServiceOperation", "ves.io.schema.views.cdn_loadbalancer.GetServiceOperationReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/cdn_loadbalancer/get-service-operation-status"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetServiceOperation")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI.GetServiceOperation"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListServiceOperations", "ves.io.schema.views.cdn_loadbalancer.ListServiceOperationsReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/cdn_loadbalancer/list-service-operations-status"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListServiceOperations")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI.ListServiceOperations"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Subscribe", "ves.io.schema.views.cdn_loadbalancer.SubscribeRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/lilac-cdn/addon/subscribe"}}

	aInfo.RPCsInfo[svcfw.RPCName("Subscribe")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI.Subscribe"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Unsubscribe", "ves.io.schema.views.cdn_loadbalancer.UnsubscribeRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/lilac-cdn/addon/unsubscribe"}}

	aInfo.RPCsInfo[svcfw.RPCName("Unsubscribe")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI.Unsubscribe"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.cdn_loadbalancer.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/cdn_loadbalancer/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/cdn_loadbalancer/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.cdn_loadbalancer.access_log", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/cdn_loadbalancer/access_log", false)
	mdr.PkgsInfo["ves.io.schema.views.cdn_loadbalancer.access_log"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/cdn_loadbalancer/access_log/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/cdn_loadbalancer/access_log/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.cdn_loadbalancer.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/cdn_loadbalancer/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.cdn_loadbalancer.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/cdn_loadbalancer/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/cdn_loadbalancer/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.cdn_loadbalancer.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.cdn_loadbalancer.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.cdn_loadbalancer/Objects", "/ves.io.schema.views.cdn_loadbalancer/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.cdn_loadbalancer.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.cdn_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.cdn_loadbalancer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.cdn_loadbalancer.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.cdn_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.cdn_loadbalancer/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.cdn_loadbalancer.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.cdn_loadbalancer/Objects", "/ves.io.schema.views.cdn_loadbalancer/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.cdn_loadbalancer.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.cdn_loadbalancer/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.cdn_loadbalancer.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.cdn_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.cdn_loadbalancer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.cdn_loadbalancer.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.cdn_loadbalancer.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.forward_proxy_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/forward_proxy_policy", false)
	mdr.PkgsInfo["ves.io.schema.views.forward_proxy_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/forward_proxy_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.forward_proxy_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.forward_proxy_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/forward_proxy_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.forward_proxy_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.forward_proxy_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/forward_proxy_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.forward_proxy_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/forward_proxy_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.forward_proxy_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/forward_proxy_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.forward_proxy_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/forward_proxy_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.forward_proxy_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/forward_proxy_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.forward_proxy_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/forward_proxy_policy/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.forward_proxy_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ForwardProxyPolicyHits", "ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/forward_proxy_policy/hits"}}

	aInfo.RPCsInfo[svcfw.RPCName("ForwardProxyPolicyHits")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.CustomDataAPI.ForwardProxyPolicyHits"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.forward_proxy_policy.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/forward_proxy_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.forward_proxy_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/forward_proxy_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.forward_proxy_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/forward_proxy_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.forward_proxy_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.forward_proxy_policy/Objects", "/ves.io.schema.views.forward_proxy_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.forward_proxy_policy/Object/{object_uid}", "/ves.io.schema.views.forward_proxy_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.forward_proxy_policy/Object/{object_uid}", "/ves.io.schema.views.forward_proxy_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.forward_proxy_policy/Objects", "/ves.io.schema.views.forward_proxy_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.forward_proxy_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.forward_proxy_policy/Object/{object_uid}", "/ves.io.schema.views.forward_proxy_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.gcp_vpc_site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/gcp_vpc_site", false)
	mdr.PkgsInfo["ves.io.schema.views.gcp_vpc_site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/gcp_vpc_site/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.gcp_vpc_site.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.gcp_vpc_site.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/gcp_vpc_site/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.gcp_vpc_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.gcp_vpc_site.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/gcp_vpc_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.gcp_vpc_site.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/gcp_vpc_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.gcp_vpc_site.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/gcp_vpc_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.gcp_vpc_site.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/gcp_vpc_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.gcp_vpc_site.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/gcp_vpc_sites/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.gcp_vpc_site.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/gcp_vpc_site/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.gcp_vpc_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("SetCloudSiteInfo", "ves.io.schema.views.gcp_vpc_site.SetCloudSiteInfoRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/gcp_vpc_site/{name}/set_cloud_site_info"}}

	aInfo.RPCsInfo[svcfw.RPCName("SetCloudSiteInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.CustomAPI.SetCloudSiteInfo"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.gcp_vpc_site.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/gcp_vpc_site/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.gcp_vpc_site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/gcp_vpc_site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.gcp_vpc_site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/gcp_vpc_site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.gcp_vpc_site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.gcp_vpc_site/Objects", "/ves.io.schema.views.gcp_vpc_site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.gcp_vpc_site/Object/{object_uid}", "/ves.io.schema.views.gcp_vpc_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.gcp_vpc_site/Object/{object_uid}", "/ves.io.schema.views.gcp_vpc_site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.gcp_vpc_site/Objects", "/ves.io.schema.views.gcp_vpc_site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.gcp_vpc_site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.gcp_vpc_site/Object/{object_uid}", "/ves.io.schema.views.gcp_vpc_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.http_loadbalancer", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer", false)
	mdr.PkgsInfo["ves.io.schema.views.http_loadbalancer"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/http_loadbalancer/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.http_loadbalancer.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.http_loadbalancer.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("ApiepLBCustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.http_loadbalancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetAPIEndpointsForGroups", "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsForGroupsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/api_endpoints"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpointsForGroups")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI.GetAPIEndpointsForGroups"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetSwaggerSpec", "ves.io.schema.views.http_loadbalancer.SwaggerSpecReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/api_endpoints/swagger_spec"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetSwaggerSpec")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI.GetSwaggerSpec"] = rpcInfo

	fInfo.APIsInfo["ApiepLBCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/http_loadbalancer/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.http_loadbalancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.http_loadbalancer.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/http_loadbalancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.http_loadbalancer.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.http_loadbalancer.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.http_loadbalancer.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.http_loadbalancer.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/http_loadbalancers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.http_loadbalancer.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/http_loadbalancer/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.http_loadbalancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("AssignAPIDefinition", "ves.io.schema.views.http_loadbalancer.AssignAPIDefinitionReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/api_definitions/assign"}}

	aInfo.RPCsInfo[svcfw.RPCName("AssignAPIDefinition")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.CustomAPI.AssignAPIDefinition"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("DeleteDoSAutoMitigationRule", "ves.io.schema.views.http_loadbalancer.DeleteDoSAutoMitigationRuleReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/dos_automitigation_rules/{dos_automitigation_rule_name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("DeleteDoSAutoMitigationRule")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.CustomAPI.DeleteDoSAutoMitigationRule"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetDnsInfo", "ves.io.schema.views.http_loadbalancer.GetDnsInfoRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/get-dns-info"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetDnsInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.CustomAPI.GetDnsInfo"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetDoSAutoMitigationRules", "ves.io.schema.views.http_loadbalancer.GetDoSAutoMitigationRulesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/dos_automitigation_rules"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetDoSAutoMitigationRules")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.CustomAPI.GetDoSAutoMitigationRules"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetSecurityConfig", "ves.io.schema.views.http_loadbalancer.GetSecurityConfigReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/http_loadbalancers/get_security_config"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetSecurityConfig")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.CustomAPI.GetSecurityConfig"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListAvailableAPIDefinitions", "ves.io.schema.views.http_loadbalancer.ListAvailableAPIDefinitionsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/api_definitions/available"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListAvailableAPIDefinitions")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.CustomAPI.ListAvailableAPIDefinitions"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.http_loadbalancer.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/http_loadbalancer/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.http_loadbalancer.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.http_loadbalancer.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/http_loadbalancer/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.http_loadbalancer.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.http_loadbalancer.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.http_loadbalancer/Objects", "/ves.io.schema.views.http_loadbalancer/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.http_loadbalancer.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.http_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.http_loadbalancer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.http_loadbalancer.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.http_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.http_loadbalancer/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.http_loadbalancer.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.http_loadbalancer/Objects", "/ves.io.schema.views.http_loadbalancer/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.http_loadbalancer.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.http_loadbalancer/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.http_loadbalancer.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.http_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.http_loadbalancer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.http_loadbalancer.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.k8s_manifest_params", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/k8s_manifest_params", false)
	mdr.PkgsInfo["ves.io.schema.views.k8s_manifest_params"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/k8s_manifest_params/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/k8s_manifest_params/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.k8s_manifest_params.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.k8s_manifest_params.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/k8s_manifest_params/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/k8s_manifest_params/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.k8s_manifest_params.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/k8s_manifest_params/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.k8s_manifest_params.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/k8s_manifest_params/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/k8s_manifest_params/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.k8s_manifest_params.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.k8s_manifest_params.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.k8s_manifest_params/Objects", "/ves.io.schema.views.k8s_manifest_params/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.k8s_manifest_params.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.k8s_manifest_params.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.k8s_manifest_params/Object/{object_uid}", "/ves.io.schema.views.k8s_manifest_params/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.k8s_manifest_params.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.k8s_manifest_params.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.k8s_manifest_params/Object/{object_uid}", "/ves.io.schema.views.k8s_manifest_params/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.k8s_manifest_params.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.k8s_manifest_params.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.k8s_manifest_params/Objects", "/ves.io.schema.views.k8s_manifest_params/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.k8s_manifest_params.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.k8s_manifest_params.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.k8s_manifest_params/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.k8s_manifest_params.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.k8s_manifest_params.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.k8s_manifest_params/Object/{object_uid}", "/ves.io.schema.views.k8s_manifest_params/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.k8s_manifest_params.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.k8s_manifest_params.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.network_policy_view", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/network_policy_view", false)
	mdr.PkgsInfo["ves.io.schema.views.network_policy_view"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/network_policy_view/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.network_policy_view.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.network_policy_view.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/network_policy_view/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.network_policy_view.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.network_policy_view.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_policy_views"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.network_policy_view.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_policy_views/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.network_policy_view.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_views/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.network_policy_view.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_views"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.network_policy_view.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_policy_views/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.network_policy_view.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.network_policy_view.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.network_policy_view.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.network_policy_view.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.network_policy_view.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.network_policy_view.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/network_policy_view/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.network_policy_view.Object", false)

	rpcInfo = svcfw.NewRPCInfo("NetworkPolicyHits", "ves.io.schema.views.network_policy_view.NetworkPolicyHitsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/network_policy_view/hits"}}

	aInfo.RPCsInfo[svcfw.RPCName("NetworkPolicyHits")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.CustomDataAPI.NetworkPolicyHits"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.network_policy_view.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/network_policy_view/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.network_policy_view.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/network_policy_view/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.network_policy_view.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/network_policy_view/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.network_policy_view.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.network_policy_view.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.network_policy_view/Objects", "/ves.io.schema.views.network_policy_view/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.network_policy_view.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.network_policy_view/Object/{object_uid}", "/ves.io.schema.views.network_policy_view/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.network_policy_view.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.network_policy_view/Object/{object_uid}", "/ves.io.schema.views.network_policy_view/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.network_policy_view.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.network_policy_view/Objects", "/ves.io.schema.views.network_policy_view/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.network_policy_view.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.network_policy_view/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.network_policy_view.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.network_policy_view/Object/{object_uid}", "/ves.io.schema.views.network_policy_view/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.network_policy_view.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.origin_pool", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool", false)
	mdr.PkgsInfo["ves.io.schema.views.origin_pool"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/origin_pool/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/origin_pool/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.origin_pool.Object"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/origin_pool/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/origin_pool/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.origin_pool.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.origin_pool.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/origin_pools"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.origin_pool.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/origin_pools/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.origin_pool.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/origin_pools/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.origin_pool.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/origin_pools"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.origin_pool.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/origin_pools/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.origin_pool.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.origin_pool.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.origin_pool.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.origin_pool.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.origin_pool.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.origin_pool.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/origin_pool/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/origin_pool/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.origin_pool.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.origin_pool.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/origin_pool/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/origin_pool/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.origin_pool.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.origin_pool.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.origin_pool/Objects", "/ves.io.schema.views.origin_pool/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.origin_pool.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.origin_pool/Object/{object_uid}", "/ves.io.schema.views.origin_pool/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.origin_pool.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.origin_pool/Object/{object_uid}", "/ves.io.schema.views.origin_pool/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.origin_pool.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.origin_pool/Objects", "/ves.io.schema.views.origin_pool/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.origin_pool.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.origin_pool/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.origin_pool.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.origin_pool/Object/{object_uid}", "/ves.io.schema.views.origin_pool/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.origin_pool.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.rate_limiter_policy", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy", false)
	mdr.PkgsInfo["ves.io.schema.views.rate_limiter_policy"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/rate_limiter_policy/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/rate_limiter_policy/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.rate_limiter_policy.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.rate_limiter_policy.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/rate_limiter_policy/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/rate_limiter_policy/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.rate_limiter_policy.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.rate_limiter_policy.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/rate_limiter_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.rate_limiter_policy.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/rate_limiter_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.rate_limiter_policy.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/rate_limiter_policys/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.rate_limiter_policy.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/rate_limiter_policys"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.rate_limiter_policy.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/rate_limiter_policys/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.rate_limiter_policy.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/rate_limiter_policy/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/rate_limiter_policy/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.rate_limiter_policy.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.rate_limiter_policy.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/rate_limiter_policy/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/rate_limiter_policy/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.rate_limiter_policy.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.rate_limiter_policy/Objects", "/ves.io.schema.views.rate_limiter_policy/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.rate_limiter_policy/Object/{object_uid}", "/ves.io.schema.views.rate_limiter_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.rate_limiter_policy/Object/{object_uid}", "/ves.io.schema.views.rate_limiter_policy/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.rate_limiter_policy/Objects", "/ves.io.schema.views.rate_limiter_policy/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.rate_limiter_policy/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.rate_limiter_policy/Object/{object_uid}", "/ves.io.schema.views.rate_limiter_policy/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.securemesh_site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/securemesh_site", false)
	mdr.PkgsInfo["ves.io.schema.views.securemesh_site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/securemesh_site/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/securemesh_site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.securemesh_site.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.securemesh_site.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/securemesh_site/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/securemesh_site/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.securemesh_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.securemesh_site.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/securemesh_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.securemesh_site.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/securemesh_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.securemesh_site.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/securemesh_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.securemesh_site.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/securemesh_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.securemesh_site.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/securemesh_sites/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.securemesh_site.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.securemesh_site.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.securemesh_site.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.securemesh_site.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.securemesh_site.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.securemesh_site.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/securemesh_site/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/securemesh_site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.securemesh_site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/securemesh_site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.securemesh_site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/securemesh_site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/securemesh_site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.securemesh_site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.securemesh_site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.securemesh_site/Objects", "/ves.io.schema.views.securemesh_site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.securemesh_site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.securemesh_site/Object/{object_uid}", "/ves.io.schema.views.securemesh_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.securemesh_site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.securemesh_site/Object/{object_uid}", "/ves.io.schema.views.securemesh_site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.securemesh_site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.securemesh_site/Objects", "/ves.io.schema.views.securemesh_site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.securemesh_site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.securemesh_site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.securemesh_site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.securemesh_site/Object/{object_uid}", "/ves.io.schema.views.securemesh_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.securemesh_site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.securemesh_site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.tcp_loadbalancer", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tcp_loadbalancer", false)
	mdr.PkgsInfo["ves.io.schema.views.tcp_loadbalancer"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tcp_loadbalancer/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.tcp_loadbalancer.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.tcp_loadbalancer.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tcp_loadbalancer/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.tcp_loadbalancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.tcp_loadbalancer.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/tcp_loadbalancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.tcp_loadbalancer.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/tcp_loadbalancers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.tcp_loadbalancer.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tcp_loadbalancers/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.tcp_loadbalancer.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tcp_loadbalancers"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.tcp_loadbalancer.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/tcp_loadbalancers/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.tcp_loadbalancer.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tcp_loadbalancer/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.tcp_loadbalancer.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetDnsInfo", "ves.io.schema.views.tcp_loadbalancer.GetDnsInfoRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tcp_loadbalancers/{name}/get-dns-info"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetDnsInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.CustomAPI.GetDnsInfo"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.tcp_loadbalancer.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tcp_loadbalancer/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.tcp_loadbalancer.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tcp_loadbalancer/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.tcp_loadbalancer.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tcp_loadbalancer/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.tcp_loadbalancer.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.tcp_loadbalancer/Objects", "/ves.io.schema.views.tcp_loadbalancer/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.tcp_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.tcp_loadbalancer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tcp_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.tcp_loadbalancer/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tcp_loadbalancer/Objects", "/ves.io.schema.views.tcp_loadbalancer/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tcp_loadbalancer/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.tcp_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.tcp_loadbalancer/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.tenant_configuration", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tenant_configuration", false)
	mdr.PkgsInfo["ves.io.schema.views.tenant_configuration"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tenant_configuration/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/tenant_configuration/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.tenant_configuration.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.tenant_configuration.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tenant_configuration/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/tenant_configuration/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.tenant_configuration.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.tenant_configuration.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/tenant_configurations"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.tenant_configuration.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/tenant_configurations/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.tenant_configuration.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tenant_configurations/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.tenant_configuration.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tenant_configurations"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.tenant_configuration.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/tenant_configurations/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.tenant_configuration.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.tenant_configuration.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.tenant_configuration.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.tenant_configuration.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.tenant_configuration.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.tenant_configuration.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tenant_configuration/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/tenant_configuration/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.tenant_configuration.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tenant_configuration/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.tenant_configuration.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/tenant_configuration/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/tenant_configuration/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.tenant_configuration.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.tenant_configuration.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.tenant_configuration/Objects", "/ves.io.schema.views.tenant_configuration/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.tenant_configuration.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.tenant_configuration/Object/{object_uid}", "/ves.io.schema.views.tenant_configuration/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.tenant_configuration.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tenant_configuration/Object/{object_uid}", "/ves.io.schema.views.tenant_configuration/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.tenant_configuration.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tenant_configuration/Objects", "/ves.io.schema.views.tenant_configuration/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.tenant_configuration.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tenant_configuration/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.tenant_configuration.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.tenant_configuration/Object/{object_uid}", "/ves.io.schema.views.tenant_configuration/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.tenant_configuration.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.tenant_configuration.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.terraform_parameters", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/terraform_parameters", false)
	mdr.PkgsInfo["ves.io.schema.views.terraform_parameters"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/aws_types.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/aws_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/azure_types.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/azure_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/bigip_types.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/bigip_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/gcp_types.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/gcp_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.terraform_parameters.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.terraform_parameters.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/pan_types.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/pan_types.proto"] = fInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/public_custom_actionapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/public_custom_actionapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomActionAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.terraform_parameters.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ForceDelete", "ves.io.schema.views.terraform_parameters.ForceDeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/terraform/{view_kind}/{view_name}/force-delete"}}

	aInfo.RPCsInfo[svcfw.RPCName("ForceDelete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.CustomActionAPI.ForceDelete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Run", "ves.io.schema.views.terraform_parameters.RunRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/terraform/{view_kind}/{view_name}/run"}}

	aInfo.RPCsInfo[svcfw.RPCName("Run")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.CustomActionAPI.Run"] = rpcInfo

	fInfo.APIsInfo["CustomActionAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.views.terraform_parameters.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.terraform_parameters.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/terraform_parameters/{view_kind}/{view_name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.CustomAPI.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetStatus", "ves.io.schema.views.terraform_parameters.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/terraform_parameters/{view_kind}/{view_name}/status"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetStatus")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.CustomAPI.GetStatus"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.terraform_parameters.CustomAPI"] = aInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GetRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.terraform_parameters.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/terraform_parameters/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.terraform_parameters.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/terraform_parameters/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.terraform_parameters.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.terraform_parameters.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.terraform_parameters/Objects", "/ves.io.schema.views.terraform_parameters/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.terraform_parameters.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.terraform_parameters/Object/{object_uid}", "/ves.io.schema.views.terraform_parameters/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.terraform_parameters.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/Object/{object_uid}", "/ves.io.schema.views.terraform_parameters/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.terraform_parameters.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/Objects", "/ves.io.schema.views.terraform_parameters/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.terraform_parameters.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.terraform_parameters.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.terraform_parameters/Object/{object_uid}", "/ves.io.schema.views.terraform_parameters/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.terraform_parameters.crudapi.API"] = aInfo
	aInfo = svcfw.NewAPIInfo("StatusAPI", "AUTO_CRUD", "ves.io.schema.views.terraform_parameters.StatusObject", false)

	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/StatusObjects", "/ves.io.schema.views.terraform_parameters/introspect/read/StatusObjects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusAPI.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/StatusObjects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusAPI.ListStream"] = rpcInfo

	fInfo.APIsInfo["StatusAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusAPI"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.voltstack_site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/voltstack_site", false)
	mdr.PkgsInfo["ves.io.schema.views.voltstack_site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/voltstack_site/object.proto")
	pInfo.FilesInfo["ves.io/schema/views/voltstack_site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.voltstack_site.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.views.voltstack_site.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/voltstack_site/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/views/voltstack_site/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.views.voltstack_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.voltstack_site.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/voltstack_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.voltstack_site.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/voltstack_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.voltstack_site.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/voltstack_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.voltstack_site.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/voltstack_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.voltstack_site.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/voltstack_sites/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.voltstack_site.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.views.voltstack_site.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.views.voltstack_site.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.views.voltstack_site.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.views.voltstack_site.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.views.voltstack_site.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/voltstack_site/types.proto")
	pInfo.FilesInfo["ves.io/schema/views/voltstack_site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.views.voltstack_site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/voltstack_site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.views.voltstack_site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/views/voltstack_site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/views/voltstack_site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.views.voltstack_site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.views.voltstack_site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.voltstack_site/Objects", "/ves.io.schema.views.voltstack_site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.views.voltstack_site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.voltstack_site/Object/{object_uid}", "/ves.io.schema.views.voltstack_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.views.voltstack_site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.voltstack_site/Object/{object_uid}", "/ves.io.schema.views.voltstack_site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.views.voltstack_site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.voltstack_site/Objects", "/ves.io.schema.views.voltstack_site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.views.voltstack_site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.voltstack_site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.views.voltstack_site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.voltstack_site/Object/{object_uid}", "/ves.io.schema.views.voltstack_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.views.voltstack_site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_host", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host", false)
	mdr.PkgsInfo["ves.io.schema.virtual_host"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_host/object.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_host/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_host.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_host.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_host/public_apiep_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_host/public_apiep_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("ApiepCustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.virtual_host.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetAPICallSummary", "ves.io.schema.virtual_host.GetAPICallSummaryReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoints/summary/calls_by_response_code"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAPICallSummary")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetAPICallSummary"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetAPIEndpoint", "ves.io.schema.virtual_host.APIEndpointReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoint"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpoint")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetAPIEndpoint"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetAPIEndpointLearntSchema", "ves.io.schema.virtual_host.APIEndpointLearntSchemaReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoint/learnt_schema"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpointLearntSchema")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetAPIEndpointLearntSchema"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetAPIEndpointPDF", "ves.io.schema.virtual_host.APIEndpointPDFReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoint/pdf"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpointPDF")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetAPIEndpointPDF"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetAPIEndpoints", "ves.io.schema.virtual_host.APIEndpointsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoints"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpoints")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetAPIEndpoints"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetApiEndpointsStats", "ves.io.schema.virtual_host.ApiEndpointsStatsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoints/stats"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetApiEndpointsStats")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetApiEndpointsStats"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetSwaggerSpec", "ves.io.schema.virtual_host.SwaggerSpecReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoints/swagger_spec"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetSwaggerSpec")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetSwaggerSpec"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetTopAPIEndpoints", "ves.io.schema.virtual_host.GetTopAPIEndpointsReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoints/summary/top_active"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetTopAPIEndpoints")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetTopAPIEndpoints"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetTopSensitiveData", "ves.io.schema.virtual_host.GetTopSensitiveDataReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoints/summary/top_sensitive_data"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetTopSensitiveData")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetTopSensitiveData"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("GetVulnerabilities", "ves.io.schema.virtual_host.GetVulnerabilitiesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/vulnerabilities"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetVulnerabilities")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetVulnerabilities"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("UpdateVulnerabilitiesState", "ves.io.schema.virtual_host.UpdateVulnerabilitiesStateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/vulnerability/update_state"}}

	aInfo.RPCsInfo[svcfw.RPCName("UpdateVulnerabilitiesState")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.UpdateVulnerabilitiesState"] = rpcInfo

	fInfo.APIsInfo["ApiepCustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_host.ApiepCustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_host/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_host/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.virtual_host.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_host.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/virtual_hosts"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_host.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_host.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_host.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_host.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/virtual_hosts/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_host.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.virtual_host.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.virtual_host.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.virtual_host.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.virtual_host.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.virtual_host.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_host/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_host/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.virtual_host.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetDnsInfo", "ves.io.schema.virtual_host.GetDnsInfoRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/get-dns-info"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetDnsInfo")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.CustomAPI.GetDnsInfo"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_host.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_host/types.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_host/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_host.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.virtual_host.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_host/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_host/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.virtual_host.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_host.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_host/Objects", "/ves.io.schema.virtual_host/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_host.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_host/Object/{object_uid}", "/ves.io.schema.virtual_host/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_host.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host/Object/{object_uid}", "/ves.io.schema.virtual_host/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_host.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host/Objects", "/ves.io.schema.virtual_host/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.virtual_host.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_host.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_host/Object/{object_uid}", "/ves.io.schema.virtual_host/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_host.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_host_dns_info", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info", false)
	mdr.PkgsInfo["ves.io.schema.virtual_host_dns_info"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_host_dns_info/object.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_host_dns_info/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_host_dns_info.Object"] = oInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_host_dns_info.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.virtual_host_dns_info.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_host_dns_info/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_host_dns_info/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.virtual_host_dns_info.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_host_dns_info.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_host_dns_info/Objects", "/ves.io.schema.virtual_host_dns_info/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_host_dns_info.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_host_dns_info/Object/{object_uid}", "/ves.io.schema.virtual_host_dns_info/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_host_dns_info.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host_dns_info/Object/{object_uid}", "/ves.io.schema.virtual_host_dns_info/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_host_dns_info.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host_dns_info/Objects", "/ves.io.schema.virtual_host_dns_info/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.virtual_host_dns_info.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host_dns_info/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_host_dns_info.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_host_dns_info/Object/{object_uid}", "/ves.io.schema.virtual_host_dns_info/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_host_dns_info.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_k8s", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_k8s", false)
	mdr.PkgsInfo["ves.io.schema.virtual_k8s"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_k8s/object.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_k8s.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_k8s.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_k8s/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.virtual_k8s.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_k8s.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/virtual_k8ss"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_k8s.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/virtual_k8ss/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_k8s.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_k8ss/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_k8s.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_k8ss"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_k8s.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/virtual_k8ss/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_k8s.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.virtual_k8s.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.virtual_k8s.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.virtual_k8s.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.virtual_k8s.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.virtual_k8s.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_k8s/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.virtual_k8s.Object", false)

	rpcInfo = svcfw.NewRPCInfo("PVCMetrics", "ves.io.schema.virtual_k8s.PVCMetricsRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_k8s/pvc/metrics"}}

	aInfo.RPCsInfo[svcfw.RPCName("PVCMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.CustomDataAPI.PVCMetrics"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_k8s.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_k8s/types.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_k8s.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_k8s/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.virtual_k8s.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_k8s/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.virtual_k8s.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_k8s.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_k8s/Objects", "/ves.io.schema.virtual_k8s/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_k8s.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_k8s/Object/{object_uid}", "/ves.io.schema.virtual_k8s/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_k8s.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_k8s/Object/{object_uid}", "/ves.io.schema.virtual_k8s/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_k8s.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_k8s/Objects", "/ves.io.schema.virtual_k8s/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.virtual_k8s.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_k8s/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_k8s.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_k8s/Object/{object_uid}", "/ves.io.schema.virtual_k8s/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_k8s.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_network", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network", false)
	mdr.PkgsInfo["ves.io.schema.virtual_network"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_network/object.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_network/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_network.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_network.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_network/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_network/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.virtual_network.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_network.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/virtual_networks"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_network.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/virtual_networks/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_network.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_networks/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_network.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_networks"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_network.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/virtual_networks/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_network.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.virtual_network.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.virtual_network.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.virtual_network.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.virtual_network.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.virtual_network.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_network/public_custom_data_api.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_network/public_custom_data_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomDataAPI", "CUSTOM_PUBLIC", "ves.io.schema.virtual_network.Object", false)

	rpcInfo = svcfw.NewRPCInfo("SIDCounters", "ves.io.schema.virtual_network.SIDCounterRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_network/sid_counters"}}

	aInfo.RPCsInfo[svcfw.RPCName("SIDCounters")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.CustomDataAPI.SIDCounters"] = rpcInfo

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_network.CustomDataAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_network/types.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_network/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_network.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.virtual_network.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_network/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_network/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.virtual_network.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_network.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_network/Objects", "/ves.io.schema.virtual_network/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_network.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_network/Object/{object_uid}", "/ves.io.schema.virtual_network/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_network.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_network/Object/{object_uid}", "/ves.io.schema.virtual_network/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_network.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_network/Objects", "/ves.io.schema.virtual_network/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.virtual_network.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_network/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_network.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_network/Object/{object_uid}", "/ves.io.schema.virtual_network/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_network.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_site", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_site", false)
	mdr.PkgsInfo["ves.io.schema.virtual_site"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_site/object.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_site/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_site.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.virtual_site.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_site/public_crudapi.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_site/public_crudapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD_PUBLIC", "ves.io.schema.virtual_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_site.CreateRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/virtual_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_site.DeleteRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/virtual_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_site.GetRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_sites/{name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_site.ListRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_sites"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_site.ReplaceRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/virtual_sites/{metadata.name}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_site.API"] = aInfo

	mInfo = svcfw.NewMsgInfo("CreateRequest")
	mdr.MsgIdx["ves.io.schema.virtual_site.CreateRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("DeleteRequest")
	mdr.MsgIdx["ves.io.schema.virtual_site.DeleteRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("GetRequest")
	mdr.MsgIdx["ves.io.schema.virtual_site.GetRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ListRequest")
	mdr.MsgIdx["ves.io.schema.virtual_site.ListRequest"] = mInfo

	mInfo = svcfw.NewMsgInfo("ReplaceRequest")
	mdr.MsgIdx["ves.io.schema.virtual_site.ReplaceRequest"] = mInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_site/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_site/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("CustomAPI", "CUSTOM_PUBLIC", "ves.io.schema.virtual_site.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetSelectees", "ves.io.schema.virtual_site.SelecteeRequest", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_sites/{name}/selectees"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetSelectees")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.CustomAPI.GetSelectees"] = rpcInfo

	fInfo.APIsInfo["CustomAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_site.CustomAPI"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_site/types.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_site/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.virtual_site.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_site/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.virtual_site.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/virtual_site/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/virtual_site/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.virtual_site.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.virtual_site.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_site/Objects", "/ves.io.schema.virtual_site/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.virtual_site.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_site/Object/{object_uid}", "/ves.io.schema.virtual_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.virtual_site.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_site/Object/{object_uid}", "/ves.io.schema.virtual_site/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.virtual_site.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_site/Objects", "/ves.io.schema.virtual_site/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.virtual_site.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_site/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.virtual_site.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_site/Object/{object_uid}", "/ves.io.schema.virtual_site/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.virtual_site.crudapi.API"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.waf", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf", false)
	mdr.PkgsInfo["ves.io.schema.waf"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/waf/public_waf_monitoring.proto")
	pInfo.FilesInfo["ves.io/schema/waf/public_waf_monitoring.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("WAFMonitoringAPI", "CUSTOM_PUBLIC", "ves.io.schema.waf.Object", false)

	rpcInfo = svcfw.NewRPCInfo("ClientRuleHitsMetrics", "ves.io.schema.waf.RuleHitsCountRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/wafs/metrics/client/rule_hits"}}

	aInfo.RPCsInfo[svcfw.RPCName("ClientRuleHitsMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf.WAFMonitoringAPI.ClientRuleHitsMetrics"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ClientSecurityEventsMetrics", "ves.io.schema.waf.SecurityEventsCountRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/wafs/metrics/client/security_events"}}

	aInfo.RPCsInfo[svcfw.RPCName("ClientSecurityEventsMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf.WAFMonitoringAPI.ClientSecurityEventsMetrics"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ServerRuleHitsMetrics", "ves.io.schema.waf.RuleHitsCountRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/wafs/metrics/server/rule_hits"}}

	aInfo.RPCsInfo[svcfw.RPCName("ServerRuleHitsMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf.WAFMonitoringAPI.ServerRuleHitsMetrics"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ServerSecurityEventsMetrics", "ves.io.schema.waf.SecurityEventsCountRequest", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/wafs/metrics/server/security_events"}}

	aInfo.RPCsInfo[svcfw.RPCName("ServerSecurityEventsMetrics")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf.WAFMonitoringAPI.ServerSecurityEventsMetrics"] = rpcInfo

	fInfo.APIsInfo["WAFMonitoringAPI"] = aInfo
	mdr.APIIdx["ves.io.schema.waf.WAFMonitoringAPI"] = aInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.waf_signatures_changelog", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_signatures_changelog", false)
	mdr.PkgsInfo["ves.io.schema.waf_signatures_changelog"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/waf_signatures_changelog/object.proto")
	pInfo.FilesInfo["ves.io/schema/waf_signatures_changelog/object.proto"] = fInfo

	oInfo = svcfw.NewObjInfo("Object", true)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	mdr.ObjIdx["ves.io.schema.waf_signatures_changelog.Object"] = oInfo
	oInfo = svcfw.NewObjInfo("StatusObject", false)

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	mdr.ObjIdx["ves.io.schema.waf_signatures_changelog.StatusObject"] = oInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/waf_signatures_changelog/public_custom_ml_api.proto")
	pInfo.FilesInfo["ves.io/schema/waf_signatures_changelog/public_custom_ml_api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("SignatureCustomApi", "CUSTOM_PUBLIC", "ves.io.schema.waf_signatures_changelog.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetStagedSignatures", "ves.io.schema.waf_signatures_changelog.StagedSignaturesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_hosts/{vh_name}/staged_signatures"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetStagedSignatures")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf_signatures_changelog.SignatureCustomApi.GetStagedSignatures"] = rpcInfo

	fInfo.APIsInfo["SignatureCustomApi"] = aInfo
	mdr.APIIdx["ves.io.schema.waf_signatures_changelog.SignatureCustomApi"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/waf_signatures_changelog/public_customapi.proto")
	pInfo.FilesInfo["ves.io/schema/waf_signatures_changelog/public_customapi.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("WafSignatureChangelogCustomApi", "CUSTOM_PUBLIC", "ves.io.schema.waf_signatures_changelog.Object", false)

	rpcInfo = svcfw.NewRPCInfo("GetReleasedSignatures", "ves.io.schema.waf_signatures_changelog.ReleasedSignaturesReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{vh_name}/released_signatures"}}

	aInfo.RPCsInfo[svcfw.RPCName("GetReleasedSignatures")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf_signatures_changelog.WafSignatureChangelogCustomApi.GetReleasedSignatures"] = rpcInfo

	fInfo.APIsInfo["WafSignatureChangelogCustomApi"] = aInfo
	mdr.APIIdx["ves.io.schema.waf_signatures_changelog.WafSignatureChangelogCustomApi"] = aInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/waf_signatures_changelog/types.proto")
	pInfo.FilesInfo["ves.io/schema/waf_signatures_changelog/types.proto"] = fInfo

	pInfo = svcfw.NewPkgInfo("ves.io.schema.waf_signatures_changelog.crudapi", "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_signatures_changelog/crudapi", false)
	mdr.PkgsInfo["ves.io.schema.waf_signatures_changelog.crudapi"] = pInfo

	fInfo = svcfw.NewFileInfo("ves.io/schema/waf_signatures_changelog/crudapi/api.proto")
	pInfo.FilesInfo["ves.io/schema/waf_signatures_changelog/crudapi/api.proto"] = fInfo

	aInfo = svcfw.NewAPIInfo("API", "AUTO_CRUD", "ves.io.schema.waf_signatures_changelog.Object", true)

	rpcInfo = svcfw.NewRPCInfo("Create", "ves.io.schema.waf_signatures_changelog.crudapi.ObjectCreateReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.waf_signatures_changelog/Objects", "/ves.io.schema.waf_signatures_changelog/introspect/write/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf_signatures_changelog.crudapi.API.Create"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Delete", "ves.io.schema.waf_signatures_changelog.crudapi.ObjectDeleteReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.waf_signatures_changelog/Object/{object_uid}", "/ves.io.schema.waf_signatures_changelog/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf_signatures_changelog.crudapi.API.Delete"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Get", "ves.io.schema.waf_signatures_changelog.crudapi.ObjectGetReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_signatures_changelog/Object/{object_uid}", "/ves.io.schema.waf_signatures_changelog/introspect/read/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf_signatures_changelog.crudapi.API.Get"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("List", "ves.io.schema.waf_signatures_changelog.crudapi.ObjectListReq", true, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_signatures_changelog/Objects", "/ves.io.schema.waf_signatures_changelog/introspect/read/Objects"}}

	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf_signatures_changelog.crudapi.API.List"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("ListStream", "ves.io.schema.waf_signatures_changelog.crudapi.ObjectListReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_signatures_changelog/Objects/stream"}}

	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf_signatures_changelog.crudapi.API.ListStream"] = rpcInfo
	rpcInfo = svcfw.NewRPCInfo("Replace", "ves.io.schema.waf_signatures_changelog.crudapi.ObjectReplaceReq", false, false)
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.waf_signatures_changelog/Object/{object_uid}", "/ves.io.schema.waf_signatures_changelog/introspect/write/Object/{object_uid}"}}

	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	mdr.RPCIdx["ves.io.schema.waf_signatures_changelog.crudapi.API.Replace"] = rpcInfo

	fInfo.APIsInfo["API"] = aInfo
	mdr.APIIdx["ves.io.schema.waf_signatures_changelog.crudapi.API"] = aInfo

}

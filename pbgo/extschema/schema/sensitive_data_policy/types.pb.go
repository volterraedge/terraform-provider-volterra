// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/sensitive_data_policy/types.proto

package sensitive_data_policy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	data_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/data_type"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of sensitive_data_policy in the storage backend.
type GlobalSpecType struct {
	// compliances
	//
	// x-displayName: "Compliance Frameworks"
	// Select relevant compliance frameworks, such as GDPR, HIPAA, or PCI-DSS, to ensure monitoring under your sensitive data discovery.
	Compliances []data_type.Compliance `protobuf:"varint,1,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
	// disabled_predefined_data_types
	//
	// x-displayName: "Disabled Built-In Sensitive Data Types"
	// Select which pre-configured data types to disable, disabled data types will not be shown as sensitive in the API discovery
	DisabledPredefinedDataTypes []string `protobuf:"bytes,2,rep,name=disabled_predefined_data_types,json=disabledPredefinedDataTypes,proto3" json:"disabled_predefined_data_types,omitempty"`
	// custom_data_types
	//
	// x-displayName: "Defined Custom Sensitive Data Types"
	// Select your custom data types to be monitored in the API discovery
	CustomDataTypes []*CustomDataTypeRef `protobuf:"bytes,3,rep,name=custom_data_types,json=customDataTypes,proto3" json:"custom_data_types,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a0e760d7a29f35, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetCompliances() []data_type.Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *GlobalSpecType) GetDisabledPredefinedDataTypes() []string {
	if m != nil {
		return m.DisabledPredefinedDataTypes
	}
	return nil
}

func (m *GlobalSpecType) GetCustomDataTypes() []*CustomDataTypeRef {
	if m != nil {
		return m.CustomDataTypes
	}
	return nil
}

// Create sensitive data discovery
//
// x-displayName: "Create Sensitive Data Discovery"
// Create sensitive_data_policy creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Compliances                 []data_type.Compliance `protobuf:"varint,1,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
	DisabledPredefinedDataTypes []string               `protobuf:"bytes,2,rep,name=disabled_predefined_data_types,json=disabledPredefinedDataTypes,proto3" json:"disabled_predefined_data_types,omitempty"`
	CustomDataTypes             []*CustomDataTypeRef   `protobuf:"bytes,3,rep,name=custom_data_types,json=customDataTypes,proto3" json:"custom_data_types,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a0e760d7a29f35, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetCompliances() []data_type.Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *CreateSpecType) GetDisabledPredefinedDataTypes() []string {
	if m != nil {
		return m.DisabledPredefinedDataTypes
	}
	return nil
}

func (m *CreateSpecType) GetCustomDataTypes() []*CustomDataTypeRef {
	if m != nil {
		return m.CustomDataTypes
	}
	return nil
}

// Replace sensitive data discovery
//
// x-displayName: "Replace Sensitive Data Discovery"
// Replace sensitive_data_policy replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Compliances                 []data_type.Compliance `protobuf:"varint,1,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
	DisabledPredefinedDataTypes []string               `protobuf:"bytes,2,rep,name=disabled_predefined_data_types,json=disabledPredefinedDataTypes,proto3" json:"disabled_predefined_data_types,omitempty"`
	CustomDataTypes             []*CustomDataTypeRef   `protobuf:"bytes,3,rep,name=custom_data_types,json=customDataTypes,proto3" json:"custom_data_types,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a0e760d7a29f35, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetCompliances() []data_type.Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *ReplaceSpecType) GetDisabledPredefinedDataTypes() []string {
	if m != nil {
		return m.DisabledPredefinedDataTypes
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomDataTypes() []*CustomDataTypeRef {
	if m != nil {
		return m.CustomDataTypes
	}
	return nil
}

// Get sensitive data discovery
//
// x-displayName: "Get Sensitive Data Discovery"
// Get sensitive_data_policy reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Compliances                 []data_type.Compliance `protobuf:"varint,1,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
	DisabledPredefinedDataTypes []string               `protobuf:"bytes,2,rep,name=disabled_predefined_data_types,json=disabledPredefinedDataTypes,proto3" json:"disabled_predefined_data_types,omitempty"`
	CustomDataTypes             []*CustomDataTypeRef   `protobuf:"bytes,3,rep,name=custom_data_types,json=customDataTypes,proto3" json:"custom_data_types,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a0e760d7a29f35, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetCompliances() []data_type.Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *GetSpecType) GetDisabledPredefinedDataTypes() []string {
	if m != nil {
		return m.DisabledPredefinedDataTypes
	}
	return nil
}

func (m *GetSpecType) GetCustomDataTypes() []*CustomDataTypeRef {
	if m != nil {
		return m.CustomDataTypes
	}
	return nil
}

type SensitiveDataPolicy struct {
	DisabledPredefinedDataTypes []string               `protobuf:"bytes,1,rep,name=disabled_predefined_data_types,json=disabledPredefinedDataTypes,proto3" json:"disabled_predefined_data_types,omitempty"`
	CustomDataTypes             []*data_type.Object    `protobuf:"bytes,2,rep,name=custom_data_types,json=customDataTypes,proto3" json:"custom_data_types,omitempty"`
	Compliances                 []data_type.Compliance `protobuf:"varint,3,rep,packed,name=compliances,proto3,enum=ves.io.schema.data_type.Compliance" json:"compliances,omitempty"`
}

func (m *SensitiveDataPolicy) Reset()      { *m = SensitiveDataPolicy{} }
func (*SensitiveDataPolicy) ProtoMessage() {}
func (*SensitiveDataPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a0e760d7a29f35, []int{4}
}
func (m *SensitiveDataPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensitiveDataPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SensitiveDataPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveDataPolicy.Merge(m, src)
}
func (m *SensitiveDataPolicy) XXX_Size() int {
	return m.Size()
}
func (m *SensitiveDataPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveDataPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveDataPolicy proto.InternalMessageInfo

func (m *SensitiveDataPolicy) GetDisabledPredefinedDataTypes() []string {
	if m != nil {
		return m.DisabledPredefinedDataTypes
	}
	return nil
}

func (m *SensitiveDataPolicy) GetCustomDataTypes() []*data_type.Object {
	if m != nil {
		return m.CustomDataTypes
	}
	return nil
}

func (m *SensitiveDataPolicy) GetCompliances() []data_type.Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

// custom_data_type_ref
//
// x-displayName: "Defined Custom Sensitive Data Types"
// List of custom data types to monitor
type CustomDataTypeRef struct {
	// custom_data_type_ref
	//
	// x-displayName: "Defined Custom Sensitive Data Type"
	// List of custom data types to monitor
	CustomDataTypeRef *views.ObjectRefType `protobuf:"bytes,2,opt,name=custom_data_type_ref,json=customDataTypeRef,proto3" json:"custom_data_type_ref,omitempty"`
}

func (m *CustomDataTypeRef) Reset()      { *m = CustomDataTypeRef{} }
func (*CustomDataTypeRef) ProtoMessage() {}
func (*CustomDataTypeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a0e760d7a29f35, []int{5}
}
func (m *CustomDataTypeRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomDataTypeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomDataTypeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomDataTypeRef.Merge(m, src)
}
func (m *CustomDataTypeRef) XXX_Size() int {
	return m.Size()
}
func (m *CustomDataTypeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomDataTypeRef.DiscardUnknown(m)
}

var xxx_messageInfo_CustomDataTypeRef proto.InternalMessageInfo

func (m *CustomDataTypeRef) GetCustomDataTypeRef() *views.ObjectRefType {
	if m != nil {
		return m.CustomDataTypeRef
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.sensitive_data_policy.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.sensitive_data_policy.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.sensitive_data_policy.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.sensitive_data_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.sensitive_data_policy.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.sensitive_data_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.sensitive_data_policy.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.sensitive_data_policy.GetSpecType")
	proto.RegisterType((*SensitiveDataPolicy)(nil), "ves.io.schema.sensitive_data_policy.SensitiveDataPolicy")
	golang_proto.RegisterType((*SensitiveDataPolicy)(nil), "ves.io.schema.sensitive_data_policy.SensitiveDataPolicy")
	proto.RegisterType((*CustomDataTypeRef)(nil), "ves.io.schema.sensitive_data_policy.CustomDataTypeRef")
	golang_proto.RegisterType((*CustomDataTypeRef)(nil), "ves.io.schema.sensitive_data_policy.CustomDataTypeRef")
}

func init() {
	proto.RegisterFile("ves.io/schema/sensitive_data_policy/types.proto", fileDescriptor_c1a0e760d7a29f35)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/sensitive_data_policy/types.proto", fileDescriptor_c1a0e760d7a29f35)
}

var fileDescriptor_c1a0e760d7a29f35 = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0xf5, 0xb5, 0x01, 0x81, 0xa3, 0x17, 0x48, 0xde, 0x7b, 0x52, 0x1e, 0x3c, 0x0d, 0x91, 0xa9,
	0xd4, 0xa8, 0x12, 0x76, 0x05, 0x52, 0x17, 0x2c, 0xaa, 0x2a, 0x69, 0xc5, 0xb2, 0xc8, 0x74, 0xd3,
	0x6e, 0x22, 0x7f, 0x8c, 0xcd, 0xb4, 0x4e, 0xc6, 0xf5, 0x4c, 0x52, 0x22, 0x15, 0x09, 0xf5, 0x17,
	0x50, 0x5a, 0xa9, 0x7f, 0xa1, 0xea, 0x4f, 0x00, 0x16, 0x6c, 0x2a, 0xa1, 0xae, 0x58, 0xb2, 0x04,
	0x67, 0x43, 0x77, 0x48, 0xdd, 0x74, 0x59, 0xd9, 0x60, 0x13, 0x27, 0x40, 0x11, 0xea, 0x92, 0xdd,
	0x75, 0xee, 0x3d, 0xe7, 0xdc, 0x7b, 0x66, 0x32, 0x33, 0xb2, 0xd6, 0xc6, 0x4c, 0x25, 0x54, 0x63,
	0xd6, 0x0a, 0x6e, 0x18, 0x1a, 0xc3, 0x4d, 0x46, 0x38, 0x69, 0xe3, 0xba, 0x6d, 0x70, 0xa3, 0xee,
	0x53, 0x8f, 0x58, 0x1d, 0x8d, 0x77, 0x7c, 0xcc, 0x54, 0x3f, 0xa0, 0x9c, 0x16, 0x67, 0x4e, 0x01,
	0xea, 0x29, 0x40, 0xbd, 0x10, 0x30, 0x39, 0xeb, 0x12, 0xbe, 0xd2, 0x32, 0x55, 0x8b, 0x36, 0x34,
	0x97, 0xba, 0x54, 0x8b, 0xb1, 0x66, 0xcb, 0x89, 0xbf, 0xe2, 0x8f, 0x38, 0x3a, 0xe5, 0x9c, 0xbc,
	0x93, 0x6d, 0x22, 0x66, 0x8a, 0x34, 0x35, 0x6a, 0xbe, 0xc4, 0x16, 0x3f, 0xab, 0x9a, 0xb9, 0xac,
	0xaa, 0xa7, 0xbd, 0xc9, 0xa9, 0x6c, 0x11, 0xf5, 0x39, 0xa1, 0xcd, 0x24, 0xf9, 0x5f, 0x36, 0xd9,
	0x8b, 0xfb, 0x3f, 0x9b, 0x6a, 0x1b, 0x1e, 0xb1, 0x0d, 0x8e, 0xcf, 0xb2, 0xe5, 0xbe, 0x2c, 0xc1,
	0x6f, 0xea, 0x59, 0xea, 0xe9, 0xc1, 0x0a, 0xd6, 0x2b, 0xa0, 0xfc, 0x14, 0xe5, 0xfc, 0xa2, 0x47,
	0x4d, 0xc3, 0x5b, 0xf6, 0xb1, 0xf5, 0xac, 0xe3, 0xe3, 0xe2, 0x6b, 0x39, 0x67, 0xd1, 0x86, 0xef,
	0x11, 0xa3, 0x69, 0x61, 0x56, 0x82, 0xb2, 0x54, 0xc9, 0xcf, 0xcd, 0xa8, 0x59, 0x83, 0xd3, 0x31,
	0xd5, 0x5a, 0x5a, 0x5b, 0xbd, 0x77, 0xbc, 0x0d, 0xb0, 0xf5, 0x7d, 0x57, 0xfa, 0x6b, 0x13, 0x64,
	0x65, 0xf4, 0x1d, 0x0c, 0x4f, 0x80, 0x02, 0x42, 0xf4, 0xcb, 0xf0, 0x26, 0x88, 0x13, 0x85, 0x24,
	0x2a, 0x81, 0xde, 0xab, 0x51, 0x5c, 0x95, 0x91, 0x4d, 0x98, 0x61, 0x7a, 0xd8, 0xae, 0xfb, 0x01,
	0xb6, 0xb1, 0x43, 0x9a, 0xd8, 0xae, 0xa7, 0x22, 0xac, 0x24, 0x96, 0xa5, 0xca, 0x58, 0x75, 0x7e,
	0x7d, 0x07, 0x60, 0x6b, 0x07, 0xf2, 0xa3, 0x50, 0x81, 0xfb, 0xb0, 0x30, 0x62, 0xd1, 0xa6, 0x43,
	0xdc, 0x54, 0xc0, 0x3e, 0x17, 0x88, 0xa2, 0xa1, 0x40, 0x2c, 0x3d, 0xd2, 0xa7, 0x12, 0xea, 0xa5,
	0x94, 0xf9, 0xb1, 0xc1, 0x8d, 0x68, 0x56, 0x56, 0xec, 0xc8, 0x05, 0xab, 0xc5, 0x38, 0x6d, 0xf4,
	0x8a, 0x49, 0x65, 0xa9, 0x92, 0x9b, 0x7b, 0xa0, 0x5e, 0x63, 0x4f, 0xa9, 0xb5, 0x18, 0x9d, 0x10,
	0xea, 0xd8, 0xa9, 0xfe, 0x7b, 0xde, 0x44, 0x78, 0xf8, 0x55, 0x1a, 0xd9, 0xdc, 0x01, 0x71, 0x02,
	0xf4, 0x71, 0x2b, 0x53, 0xc9, 0x94, 0x0f, 0xa2, 0x9c, 0xaf, 0x05, 0xd8, 0xe0, 0x38, 0xb5, 0xfe,
	0xc9, 0x4d, 0xad, 0xcf, 0xda, 0x59, 0xbb, 0x9e, 0x9d, 0x57, 0x3b, 0x63, 0xfe, 0x71, 0x67, 0x06,
	0x2c, 0x58, 0x28, 0x7c, 0x7b, 0xd8, 0xb7, 0xfb, 0x94, 0x8f, 0xa2, 0x3c, 0xae, 0x63, 0xdf, 0x33,
	0xac, 0x5b, 0x5b, 0x7a, 0x6c, 0xd9, 0x10, 0xe5, 0xdc, 0x22, 0xe6, 0xb7, 0x96, 0x9c, 0x5b, 0xf2,
	0x03, 0xe4, 0xbf, 0x97, 0x13, 0xbe, 0xa8, 0x72, 0x29, 0x66, 0xbb, 0xc6, 0x4c, 0xf0, 0xfb, 0x99,
	0x96, 0x2e, 0x9a, 0x49, 0x8c, 0x67, 0x9a, 0xbe, 0xd4, 0xe5, 0xa7, 0xf1, 0xbd, 0x50, 0x95, 0x76,
	0xd7, 0x06, 0xff, 0xee, 0xfd, 0x2b, 0x26, 0xdd, 0x6c, 0xc5, 0x94, 0xf7, 0x20, 0x17, 0x06, 0xfc,
	0x2a, 0xbe, 0x95, 0xff, 0xe9, 0x6f, 0xb7, 0x1e, 0x60, 0xa7, 0x24, 0x96, 0xa1, 0x92, 0x9b, 0x53,
	0xfa, 0x54, 0xe2, 0x6b, 0xe0, 0xac, 0x5b, 0x1d, 0x3b, 0x11, 0x49, 0xf5, 0xee, 0x97, 0xb5, 0xb1,
	0x14, 0x3b, 0x78, 0xc4, 0x46, 0x27, 0xd9, 0xd0, 0xde, 0x36, 0x88, 0x7a, 0xc1, 0x1a, 0x38, 0xf1,
	0x3e, 0xc1, 0xfe, 0x11, 0x12, 0x0e, 0x8e, 0x90, 0x70, 0x72, 0x84, 0x60, 0x3d, 0x44, 0xf0, 0x39,
	0x44, 0xb0, 0x17, 0x22, 0xd8, 0x0f, 0x11, 0x1c, 0x84, 0x08, 0x0e, 0x43, 0x04, 0xc7, 0x21, 0x12,
	0x4e, 0x42, 0x04, 0x1b, 0x5d, 0x24, 0xec, 0x76, 0x11, 0xec, 0x77, 0x91, 0x70, 0xd0, 0x45, 0xc2,
	0x8b, 0xe7, 0x2e, 0xf5, 0x5f, 0xb9, 0x6a, 0x9b, 0x7a, 0x1c, 0x07, 0x81, 0xa1, 0xb6, 0x98, 0x16,
	0x07, 0x0e, 0x0d, 0x1a, 0xb3, 0x7e, 0x40, 0xdb, 0xc4, 0xc6, 0xc1, 0x6c, 0x92, 0xd6, 0x7c, 0xd3,
	0xa5, 0x1a, 0x5e, 0xe5, 0xc9, 0xdb, 0xe0, 0x8a, 0x27, 0x82, 0x39, 0x12, 0xdf, 0x72, 0xf3, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x60, 0x67, 0x7a, 0xc5, 0x50, 0x08, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	if len(this.DisabledPredefinedDataTypes) != len(that1.DisabledPredefinedDataTypes) {
		return false
	}
	for i := range this.DisabledPredefinedDataTypes {
		if this.DisabledPredefinedDataTypes[i] != that1.DisabledPredefinedDataTypes[i] {
			return false
		}
	}
	if len(this.CustomDataTypes) != len(that1.CustomDataTypes) {
		return false
	}
	for i := range this.CustomDataTypes {
		if !this.CustomDataTypes[i].Equal(that1.CustomDataTypes[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	if len(this.DisabledPredefinedDataTypes) != len(that1.DisabledPredefinedDataTypes) {
		return false
	}
	for i := range this.DisabledPredefinedDataTypes {
		if this.DisabledPredefinedDataTypes[i] != that1.DisabledPredefinedDataTypes[i] {
			return false
		}
	}
	if len(this.CustomDataTypes) != len(that1.CustomDataTypes) {
		return false
	}
	for i := range this.CustomDataTypes {
		if !this.CustomDataTypes[i].Equal(that1.CustomDataTypes[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	if len(this.DisabledPredefinedDataTypes) != len(that1.DisabledPredefinedDataTypes) {
		return false
	}
	for i := range this.DisabledPredefinedDataTypes {
		if this.DisabledPredefinedDataTypes[i] != that1.DisabledPredefinedDataTypes[i] {
			return false
		}
	}
	if len(this.CustomDataTypes) != len(that1.CustomDataTypes) {
		return false
	}
	for i := range this.CustomDataTypes {
		if !this.CustomDataTypes[i].Equal(that1.CustomDataTypes[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	if len(this.DisabledPredefinedDataTypes) != len(that1.DisabledPredefinedDataTypes) {
		return false
	}
	for i := range this.DisabledPredefinedDataTypes {
		if this.DisabledPredefinedDataTypes[i] != that1.DisabledPredefinedDataTypes[i] {
			return false
		}
	}
	if len(this.CustomDataTypes) != len(that1.CustomDataTypes) {
		return false
	}
	for i := range this.CustomDataTypes {
		if !this.CustomDataTypes[i].Equal(that1.CustomDataTypes[i]) {
			return false
		}
	}
	return true
}
func (this *SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DisabledPredefinedDataTypes) != len(that1.DisabledPredefinedDataTypes) {
		return false
	}
	for i := range this.DisabledPredefinedDataTypes {
		if this.DisabledPredefinedDataTypes[i] != that1.DisabledPredefinedDataTypes[i] {
			return false
		}
	}
	if len(this.CustomDataTypes) != len(that1.CustomDataTypes) {
		return false
	}
	for i := range this.CustomDataTypes {
		if !this.CustomDataTypes[i].Equal(that1.CustomDataTypes[i]) {
			return false
		}
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	return true
}
func (this *CustomDataTypeRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataTypeRef)
	if !ok {
		that2, ok := that.(CustomDataTypeRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomDataTypeRef.Equal(that1.CustomDataTypeRef) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sensitive_data_policy.GlobalSpecType{")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "DisabledPredefinedDataTypes: "+fmt.Sprintf("%#v", this.DisabledPredefinedDataTypes)+",\n")
	if this.CustomDataTypes != nil {
		s = append(s, "CustomDataTypes: "+fmt.Sprintf("%#v", this.CustomDataTypes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sensitive_data_policy.CreateSpecType{")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "DisabledPredefinedDataTypes: "+fmt.Sprintf("%#v", this.DisabledPredefinedDataTypes)+",\n")
	if this.CustomDataTypes != nil {
		s = append(s, "CustomDataTypes: "+fmt.Sprintf("%#v", this.CustomDataTypes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sensitive_data_policy.ReplaceSpecType{")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "DisabledPredefinedDataTypes: "+fmt.Sprintf("%#v", this.DisabledPredefinedDataTypes)+",\n")
	if this.CustomDataTypes != nil {
		s = append(s, "CustomDataTypes: "+fmt.Sprintf("%#v", this.CustomDataTypes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sensitive_data_policy.GetSpecType{")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "DisabledPredefinedDataTypes: "+fmt.Sprintf("%#v", this.DisabledPredefinedDataTypes)+",\n")
	if this.CustomDataTypes != nil {
		s = append(s, "CustomDataTypes: "+fmt.Sprintf("%#v", this.CustomDataTypes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sensitive_data_policy.SensitiveDataPolicy{")
	s = append(s, "DisabledPredefinedDataTypes: "+fmt.Sprintf("%#v", this.DisabledPredefinedDataTypes)+",\n")
	if this.CustomDataTypes != nil {
		s = append(s, "CustomDataTypes: "+fmt.Sprintf("%#v", this.CustomDataTypes)+",\n")
	}
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomDataTypeRef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sensitive_data_policy.CustomDataTypeRef{")
	if this.CustomDataTypeRef != nil {
		s = append(s, "CustomDataTypeRef: "+fmt.Sprintf("%#v", this.CustomDataTypeRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomDataTypes) > 0 {
		for iNdEx := len(m.CustomDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomDataTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for iNdEx := len(m.DisabledPredefinedDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisabledPredefinedDataTypes[iNdEx])
			copy(dAtA[i:], m.DisabledPredefinedDataTypes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DisabledPredefinedDataTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Compliances) > 0 {
		dAtA2 := make([]byte, len(m.Compliances)*10)
		var j1 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomDataTypes) > 0 {
		for iNdEx := len(m.CustomDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomDataTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for iNdEx := len(m.DisabledPredefinedDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisabledPredefinedDataTypes[iNdEx])
			copy(dAtA[i:], m.DisabledPredefinedDataTypes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DisabledPredefinedDataTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Compliances) > 0 {
		dAtA4 := make([]byte, len(m.Compliances)*10)
		var j3 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomDataTypes) > 0 {
		for iNdEx := len(m.CustomDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomDataTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for iNdEx := len(m.DisabledPredefinedDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisabledPredefinedDataTypes[iNdEx])
			copy(dAtA[i:], m.DisabledPredefinedDataTypes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DisabledPredefinedDataTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Compliances) > 0 {
		dAtA6 := make([]byte, len(m.Compliances)*10)
		var j5 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTypes(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomDataTypes) > 0 {
		for iNdEx := len(m.CustomDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomDataTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for iNdEx := len(m.DisabledPredefinedDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisabledPredefinedDataTypes[iNdEx])
			copy(dAtA[i:], m.DisabledPredefinedDataTypes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DisabledPredefinedDataTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Compliances) > 0 {
		dAtA8 := make([]byte, len(m.Compliances)*10)
		var j7 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTypes(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SensitiveDataPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Compliances) > 0 {
		dAtA10 := make([]byte, len(m.Compliances)*10)
		var j9 int
		for _, num := range m.Compliances {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintTypes(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CustomDataTypes) > 0 {
		for iNdEx := len(m.CustomDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomDataTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for iNdEx := len(m.DisabledPredefinedDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisabledPredefinedDataTypes[iNdEx])
			copy(dAtA[i:], m.DisabledPredefinedDataTypes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DisabledPredefinedDataTypes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomDataTypeRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomDataTypeRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataTypeRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomDataTypeRef != nil {
		{
			size, err := m.CustomDataTypeRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for _, s := range m.DisabledPredefinedDataTypes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CustomDataTypes) > 0 {
		for _, e := range m.CustomDataTypes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for _, s := range m.DisabledPredefinedDataTypes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CustomDataTypes) > 0 {
		for _, e := range m.CustomDataTypes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for _, s := range m.DisabledPredefinedDataTypes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CustomDataTypes) > 0 {
		for _, e := range m.CustomDataTypes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for _, s := range m.DisabledPredefinedDataTypes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CustomDataTypes) > 0 {
		for _, e := range m.CustomDataTypes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DisabledPredefinedDataTypes) > 0 {
		for _, s := range m.DisabledPredefinedDataTypes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CustomDataTypes) > 0 {
		for _, e := range m.CustomDataTypes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Compliances) > 0 {
		l = 0
		for _, e := range m.Compliances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *CustomDataTypeRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomDataTypeRef != nil {
		l = m.CustomDataTypeRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCustomDataTypes := "[]*CustomDataTypeRef{"
	for _, f := range this.CustomDataTypes {
		repeatedStringForCustomDataTypes += strings.Replace(f.String(), "CustomDataTypeRef", "CustomDataTypeRef", 1) + ","
	}
	repeatedStringForCustomDataTypes += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`DisabledPredefinedDataTypes:` + fmt.Sprintf("%v", this.DisabledPredefinedDataTypes) + `,`,
		`CustomDataTypes:` + repeatedStringForCustomDataTypes + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCustomDataTypes := "[]*CustomDataTypeRef{"
	for _, f := range this.CustomDataTypes {
		repeatedStringForCustomDataTypes += strings.Replace(f.String(), "CustomDataTypeRef", "CustomDataTypeRef", 1) + ","
	}
	repeatedStringForCustomDataTypes += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`DisabledPredefinedDataTypes:` + fmt.Sprintf("%v", this.DisabledPredefinedDataTypes) + `,`,
		`CustomDataTypes:` + repeatedStringForCustomDataTypes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCustomDataTypes := "[]*CustomDataTypeRef{"
	for _, f := range this.CustomDataTypes {
		repeatedStringForCustomDataTypes += strings.Replace(f.String(), "CustomDataTypeRef", "CustomDataTypeRef", 1) + ","
	}
	repeatedStringForCustomDataTypes += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`DisabledPredefinedDataTypes:` + fmt.Sprintf("%v", this.DisabledPredefinedDataTypes) + `,`,
		`CustomDataTypes:` + repeatedStringForCustomDataTypes + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCustomDataTypes := "[]*CustomDataTypeRef{"
	for _, f := range this.CustomDataTypes {
		repeatedStringForCustomDataTypes += strings.Replace(f.String(), "CustomDataTypeRef", "CustomDataTypeRef", 1) + ","
	}
	repeatedStringForCustomDataTypes += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`DisabledPredefinedDataTypes:` + fmt.Sprintf("%v", this.DisabledPredefinedDataTypes) + `,`,
		`CustomDataTypes:` + repeatedStringForCustomDataTypes + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCustomDataTypes := "[]*Object{"
	for _, f := range this.CustomDataTypes {
		repeatedStringForCustomDataTypes += strings.Replace(fmt.Sprintf("%v", f), "Object", "data_type.Object", 1) + ","
	}
	repeatedStringForCustomDataTypes += "}"
	s := strings.Join([]string{`&SensitiveDataPolicy{`,
		`DisabledPredefinedDataTypes:` + fmt.Sprintf("%v", this.DisabledPredefinedDataTypes) + `,`,
		`CustomDataTypes:` + repeatedStringForCustomDataTypes + `,`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataTypeRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataTypeRef{`,
		`CustomDataTypeRef:` + strings.Replace(fmt.Sprintf("%v", this.CustomDataTypeRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v data_type.Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= data_type.Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]data_type.Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v data_type.Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= data_type.Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledPredefinedDataTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledPredefinedDataTypes = append(m.DisabledPredefinedDataTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDataTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomDataTypes = append(m.CustomDataTypes, &CustomDataTypeRef{})
			if err := m.CustomDataTypes[len(m.CustomDataTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v data_type.Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= data_type.Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]data_type.Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v data_type.Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= data_type.Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledPredefinedDataTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledPredefinedDataTypes = append(m.DisabledPredefinedDataTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDataTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomDataTypes = append(m.CustomDataTypes, &CustomDataTypeRef{})
			if err := m.CustomDataTypes[len(m.CustomDataTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v data_type.Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= data_type.Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]data_type.Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v data_type.Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= data_type.Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledPredefinedDataTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledPredefinedDataTypes = append(m.DisabledPredefinedDataTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDataTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomDataTypes = append(m.CustomDataTypes, &CustomDataTypeRef{})
			if err := m.CustomDataTypes[len(m.CustomDataTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v data_type.Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= data_type.Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]data_type.Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v data_type.Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= data_type.Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledPredefinedDataTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledPredefinedDataTypes = append(m.DisabledPredefinedDataTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDataTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomDataTypes = append(m.CustomDataTypes, &CustomDataTypeRef{})
			if err := m.CustomDataTypes[len(m.CustomDataTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensitiveDataPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensitiveDataPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensitiveDataPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledPredefinedDataTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledPredefinedDataTypes = append(m.DisabledPredefinedDataTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDataTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomDataTypes = append(m.CustomDataTypes, &data_type.Object{})
			if err := m.CustomDataTypes[len(m.CustomDataTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v data_type.Compliance
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= data_type.Compliance(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Compliances = append(m.Compliances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Compliances) == 0 {
					m.Compliances = make([]data_type.Compliance, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v data_type.Compliance
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= data_type.Compliance(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Compliances = append(m.Compliances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomDataTypeRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomDataTypeRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomDataTypeRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDataTypeRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDataTypeRef == nil {
				m.CustomDataTypeRef = &views.ObjectRefType{}
			}
			if err := m.CustomDataTypeRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

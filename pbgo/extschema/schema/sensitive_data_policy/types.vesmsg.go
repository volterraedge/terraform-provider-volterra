// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package sensitive_data_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_data_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/data_type"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCustomDataTypesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetCustomDataTypesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCustomDataTypes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetCustomDataTypes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomDataTypes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("custom_data_types[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) CompliancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_data_type.Compliance)
		return int32(i)
	}
	// ves_io_schema_data_type.Compliance_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_data_type.Compliance_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compliances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_data_type.Compliance, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for compliances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_data_type.Compliance)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_data_type.Compliance, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated compliances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items compliances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DisabledPredefinedDataTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for disabled_predefined_data_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disabled_predefined_data_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disabled_predefined_data_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disabled_predefined_data_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CustomDataTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for custom_data_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*CustomDataTypeRef, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CustomDataTypeRefValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for custom_data_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*CustomDataTypeRef)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*CustomDataTypeRef, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated custom_data_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_data_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {
		vOpts := append(opts, db.WithValidateField("compliances"))
		if err := fv(ctx, m.GetCompliances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_data_types"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_data_types"))
		if err := fv(ctx, m.GetCustomDataTypes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_predefined_data_types"]; exists {
		vOpts := append(opts, db.WithValidateField("disabled_predefined_data_types"))
		if err := fv(ctx, m.GetDisabledPredefinedDataTypes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCompliances := v.CompliancesValidationRuleHandler
	rulesCompliances := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "17",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCompliances(rulesCompliances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.compliances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compliances"] = vFn

	vrhDisabledPredefinedDataTypes := v.DisabledPredefinedDataTypesValidationRuleHandler
	rulesDisabledPredefinedDataTypes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhDisabledPredefinedDataTypes(rulesDisabledPredefinedDataTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.disabled_predefined_data_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disabled_predefined_data_types"] = vFn

	vrhCustomDataTypes := v.CustomDataTypesValidationRuleHandler
	rulesCustomDataTypes := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhCustomDataTypes(rulesCustomDataTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.custom_data_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_data_types"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomDataTypeRef) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomDataTypeRef) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomDataTypeRef) DeepCopy() *CustomDataTypeRef {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomDataTypeRef{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomDataTypeRef) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomDataTypeRef) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomDataTypeRefValidator().Validate(ctx, m, opts...)
}

func (m *CustomDataTypeRef) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCustomDataTypeRefDRefInfo()

}

func (m *CustomDataTypeRef) GetCustomDataTypeRefDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCustomDataTypeRef()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("data_type.Object")
	dri := db.DRefInfo{
		RefdType:   "data_type.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "custom_data_type_ref",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCustomDataTypeRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CustomDataTypeRef) GetCustomDataTypeRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "data_type.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: data_type")
	}

	vref := m.GetCustomDataTypeRef()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "data_type.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateCustomDataTypeRef struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomDataTypeRef) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomDataTypeRef)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomDataTypeRef got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["custom_data_type_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_data_type_ref"))
		if err := fv(ctx, m.GetCustomDataTypeRef(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomDataTypeRefValidator = func() *ValidateCustomDataTypeRef {
	v := &ValidateCustomDataTypeRef{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["custom_data_type_ref"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func CustomDataTypeRefValidator() db.Validator {
	return DefaultCustomDataTypeRefValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCustomDataTypesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetCustomDataTypesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCustomDataTypes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetCustomDataTypes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomDataTypes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("custom_data_types[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) CompliancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_data_type.Compliance)
		return int32(i)
	}
	// ves_io_schema_data_type.Compliance_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_data_type.Compliance_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compliances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_data_type.Compliance, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for compliances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_data_type.Compliance)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_data_type.Compliance, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated compliances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items compliances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DisabledPredefinedDataTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for disabled_predefined_data_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disabled_predefined_data_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disabled_predefined_data_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disabled_predefined_data_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CustomDataTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for custom_data_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*CustomDataTypeRef, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CustomDataTypeRefValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for custom_data_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*CustomDataTypeRef)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*CustomDataTypeRef, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated custom_data_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_data_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {
		vOpts := append(opts, db.WithValidateField("compliances"))
		if err := fv(ctx, m.GetCompliances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_data_types"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_data_types"))
		if err := fv(ctx, m.GetCustomDataTypes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_predefined_data_types"]; exists {
		vOpts := append(opts, db.WithValidateField("disabled_predefined_data_types"))
		if err := fv(ctx, m.GetDisabledPredefinedDataTypes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCompliances := v.CompliancesValidationRuleHandler
	rulesCompliances := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "17",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCompliances(rulesCompliances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.compliances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compliances"] = vFn

	vrhDisabledPredefinedDataTypes := v.DisabledPredefinedDataTypesValidationRuleHandler
	rulesDisabledPredefinedDataTypes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhDisabledPredefinedDataTypes(rulesDisabledPredefinedDataTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.disabled_predefined_data_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disabled_predefined_data_types"] = vFn

	vrhCustomDataTypes := v.CustomDataTypesValidationRuleHandler
	rulesCustomDataTypes := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhCustomDataTypes(rulesCustomDataTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.custom_data_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_data_types"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCustomDataTypesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetCustomDataTypesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCustomDataTypes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetCustomDataTypes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomDataTypes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("custom_data_types[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) CompliancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_data_type.Compliance)
		return int32(i)
	}
	// ves_io_schema_data_type.Compliance_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_data_type.Compliance_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compliances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_data_type.Compliance, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for compliances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_data_type.Compliance)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_data_type.Compliance, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated compliances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items compliances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DisabledPredefinedDataTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for disabled_predefined_data_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disabled_predefined_data_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disabled_predefined_data_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disabled_predefined_data_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CustomDataTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for custom_data_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*CustomDataTypeRef, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CustomDataTypeRefValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for custom_data_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*CustomDataTypeRef)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*CustomDataTypeRef, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated custom_data_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_data_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {
		vOpts := append(opts, db.WithValidateField("compliances"))
		if err := fv(ctx, m.GetCompliances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_data_types"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_data_types"))
		if err := fv(ctx, m.GetCustomDataTypes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_predefined_data_types"]; exists {
		vOpts := append(opts, db.WithValidateField("disabled_predefined_data_types"))
		if err := fv(ctx, m.GetDisabledPredefinedDataTypes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCompliances := v.CompliancesValidationRuleHandler
	rulesCompliances := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "17",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCompliances(rulesCompliances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.compliances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compliances"] = vFn

	vrhDisabledPredefinedDataTypes := v.DisabledPredefinedDataTypesValidationRuleHandler
	rulesDisabledPredefinedDataTypes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhDisabledPredefinedDataTypes(rulesDisabledPredefinedDataTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.disabled_predefined_data_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disabled_predefined_data_types"] = vFn

	vrhCustomDataTypes := v.CustomDataTypesValidationRuleHandler
	rulesCustomDataTypes := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhCustomDataTypes(rulesCustomDataTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.custom_data_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_data_types"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCustomDataTypesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetCustomDataTypesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCustomDataTypes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetCustomDataTypes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomDataTypes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("custom_data_types[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) CompliancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_data_type.Compliance)
		return int32(i)
	}
	// ves_io_schema_data_type.Compliance_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_data_type.Compliance_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compliances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_data_type.Compliance, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for compliances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_data_type.Compliance)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_data_type.Compliance, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated compliances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items compliances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DisabledPredefinedDataTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for disabled_predefined_data_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disabled_predefined_data_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disabled_predefined_data_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disabled_predefined_data_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CustomDataTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for custom_data_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*CustomDataTypeRef, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CustomDataTypeRefValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for custom_data_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*CustomDataTypeRef)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*CustomDataTypeRef, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated custom_data_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_data_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {
		vOpts := append(opts, db.WithValidateField("compliances"))
		if err := fv(ctx, m.GetCompliances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_data_types"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_data_types"))
		if err := fv(ctx, m.GetCustomDataTypes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_predefined_data_types"]; exists {
		vOpts := append(opts, db.WithValidateField("disabled_predefined_data_types"))
		if err := fv(ctx, m.GetDisabledPredefinedDataTypes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCompliances := v.CompliancesValidationRuleHandler
	rulesCompliances := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "17",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCompliances(rulesCompliances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.compliances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compliances"] = vFn

	vrhDisabledPredefinedDataTypes := v.DisabledPredefinedDataTypesValidationRuleHandler
	rulesDisabledPredefinedDataTypes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.max_len":     "64",
	}
	vFn, err = vrhDisabledPredefinedDataTypes(rulesDisabledPredefinedDataTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.disabled_predefined_data_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disabled_predefined_data_types"] = vFn

	vrhCustomDataTypes := v.CustomDataTypesValidationRuleHandler
	rulesCustomDataTypes := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhCustomDataTypes(rulesCustomDataTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.custom_data_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_data_types"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SensitiveDataPolicy) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SensitiveDataPolicy) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SensitiveDataPolicy) DeepCopy() *SensitiveDataPolicy {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SensitiveDataPolicy{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SensitiveDataPolicy) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SensitiveDataPolicy) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SensitiveDataPolicyValidator().Validate(ctx, m, opts...)
}

func (m *SensitiveDataPolicy) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return nil, nil

}

type ValidateSensitiveDataPolicy struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSensitiveDataPolicy) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SensitiveDataPolicy)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SensitiveDataPolicy got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {

		vOpts := append(opts, db.WithValidateField("compliances"))
		for idx, item := range m.GetCompliances() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["custom_data_types"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_data_types"))
		for idx, item := range m.GetCustomDataTypes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disabled_predefined_data_types"]; exists {

		vOpts := append(opts, db.WithValidateField("disabled_predefined_data_types"))
		for idx, item := range m.GetDisabledPredefinedDataTypes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSensitiveDataPolicyValidator = func() *ValidateSensitiveDataPolicy {
	v := &ValidateSensitiveDataPolicy{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["custom_data_types"] = ves_io_schema_data_type.ObjectValidator().Validate

	return v
}()

func SensitiveDataPolicyValidator() db.Validator {
	return DefaultSensitiveDataPolicyValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Compliances = f.GetCompliances()
	m.CustomDataTypes = f.GetCustomDataTypes()
	m.DisabledPredefinedDataTypes = f.GetDisabledPredefinedDataTypes()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Compliances = m1.Compliances
	f.CustomDataTypes = m1.CustomDataTypes
	f.DisabledPredefinedDataTypes = m1.DisabledPredefinedDataTypes
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Compliances = f.GetCompliances()
	m.CustomDataTypes = f.GetCustomDataTypes()
	m.DisabledPredefinedDataTypes = f.GetDisabledPredefinedDataTypes()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Compliances = m1.Compliances
	f.CustomDataTypes = m1.CustomDataTypes
	f.DisabledPredefinedDataTypes = m1.DisabledPredefinedDataTypes
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Compliances = f.GetCompliances()
	m.CustomDataTypes = f.GetCustomDataTypes()
	m.DisabledPredefinedDataTypes = f.GetDisabledPredefinedDataTypes()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Compliances = m1.Compliances
	f.CustomDataTypes = m1.CustomDataTypes
	f.DisabledPredefinedDataTypes = m1.DisabledPredefinedDataTypes
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

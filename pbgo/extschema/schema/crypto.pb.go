// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/crypto.proto

// Crypto
//
// Commonly used Crypto Algorithms

package schema

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EncryptionAlgorithm
//
// x-displayName: "Encryption Algorithm"
// Definitions for Encryption Algorithms
type EncryptionAlgorithm int32

const (
	// Default Encryption
	//
	// x-displayName: "Default Encryption(AES256_GCM)"
	// Select default Encryption Algorithm
	ENC_ALG_DEFAULT EncryptionAlgorithm = 0
	// AES128_CBC
	//
	// x-displayName: "AES128_CBC"
	// Select AES128_CBC encryption algorithm
	AES128_CBC EncryptionAlgorithm = 1
	// AES192_CBC
	//
	// x-displayName: "AES192_CBC"
	// Select AES192_CBC encryption algorithm
	AES192_CBC EncryptionAlgorithm = 2
	// AES256_CBC
	//
	// x-displayName: "AES256_CBC"
	// Select AES256_CBC encryption algorithm
	AES256_CBC EncryptionAlgorithm = 3
	// TRIPLE_DES_CBC
	//
	// x-displayName: "TRIPLE_DES_CBC"
	// Select TRIPLE_DES_CBC encryption algorithm
	TRIPLE_DES_CBC EncryptionAlgorithm = 4
	// AES128_GCM
	//
	// x-displayName: "AES128_GCM"
	// Select AES128_GCM AEAD algorithm
	AES128_GCM EncryptionAlgorithm = 5
	// AES192_GCM
	//
	// x-displayName: "AES192_GCM"
	// Select AES192_GCM AEAD algorithm
	AES192_GCM EncryptionAlgorithm = 6
	// AES256_GCM
	//
	// x-displayName: "AES256_GCM"
	// Select AES256_GCM AEAD algorithm
	AES256_GCM EncryptionAlgorithm = 7
)

var EncryptionAlgorithm_name = map[int32]string{
	0: "ENC_ALG_DEFAULT",
	1: "AES128_CBC",
	2: "AES192_CBC",
	3: "AES256_CBC",
	4: "TRIPLE_DES_CBC",
	5: "AES128_GCM",
	6: "AES192_GCM",
	7: "AES256_GCM",
}

var EncryptionAlgorithm_value = map[string]int32{
	"ENC_ALG_DEFAULT": 0,
	"AES128_CBC":      1,
	"AES192_CBC":      2,
	"AES256_CBC":      3,
	"TRIPLE_DES_CBC":  4,
	"AES128_GCM":      5,
	"AES192_GCM":      6,
	"AES256_GCM":      7,
}

func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93a1b357b411c65c, []int{0}
}

// AuthenticationAlgorithm
//
// x-displayName: "AuthenticationAlgorithm"
// Definitions for Authentication Algorithms
type AuthenticationAlgorithm int32

const (
	// Default Authentication
	//
	// x-displayName: "Default Authentication"
	// Use Default Authentication (SHA256)
	AUTH_ALG_DEFAULT AuthenticationAlgorithm = 0
	// SHA256_HMAC
	//
	// x-displayName: "SHA256_HMAC"
	// Use SHA256_HMAC Authentication
	SHA256_HMAC AuthenticationAlgorithm = 1
	// SHA384_HMAC
	//
	// x-displayName: "SHA384_HMAC"
	// Use SHA384_HMAC Authentication
	SHA384_HMAC AuthenticationAlgorithm = 2
	// SHA512_HMAC
	//
	// x-displayName: "SHA512_HMAC"
	// Use SHA512_HMAC Authentication
	SHA512_HMAC AuthenticationAlgorithm = 3
	// No Authentication
	//
	// x-displayName: "No Authentication"
	// Select No Authentication if AEAD encryption is selected
	AUTH_ALG_NONE AuthenticationAlgorithm = 4
)

var AuthenticationAlgorithm_name = map[int32]string{
	0: "AUTH_ALG_DEFAULT",
	1: "SHA256_HMAC",
	2: "SHA384_HMAC",
	3: "SHA512_HMAC",
	4: "AUTH_ALG_NONE",
}

var AuthenticationAlgorithm_value = map[string]int32{
	"AUTH_ALG_DEFAULT": 0,
	"SHA256_HMAC":      1,
	"SHA384_HMAC":      2,
	"SHA512_HMAC":      3,
	"AUTH_ALG_NONE":    4,
}

func (AuthenticationAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93a1b357b411c65c, []int{1}
}

// PseudoRandomFunction
//
// x-displayName: "Pseudo-Random-Function"
// Definitions for PseudoRandomFunction(PRF)
type PseudoRandomFunction int32

const (
	// Default Pseudo Random Function
	//
	// x-displayName: "Default Pseudo Random Function"
	// Use Default Pseudo Random Function (PRFSHA256)
	PRF_DEFAULT PseudoRandomFunction = 0
	// PRFSHA256
	//
	// x-displayName: "PRFSHA256"
	// Use PRFSHA256 Pseudo Random Function
	PRFSHA256 PseudoRandomFunction = 1
	// PRFSHA384
	//
	// x-displayName: "PRFSHA384"
	// Use PRFSHA384 Pseudo Random Function
	PRFSHA384 PseudoRandomFunction = 2
	// PRFSHA512
	//
	// x-displayName: "PRFSHA512"
	// Use PRFSHA512 Pseudo Random Function
	PRFSHA512 PseudoRandomFunction = 3
)

var PseudoRandomFunction_name = map[int32]string{
	0: "PRF_DEFAULT",
	1: "PRFSHA256",
	2: "PRFSHA384",
	3: "PRFSHA512",
}

var PseudoRandomFunction_value = map[string]int32{
	"PRF_DEFAULT": 0,
	"PRFSHA256":   1,
	"PRFSHA384":   2,
	"PRFSHA512":   3,
}

func (PseudoRandomFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93a1b357b411c65c, []int{2}
}

// DHGroup
//
// x-displayName: "Diffie Hellman Group"
// Definitions for DH Groups
type DHGroup int32

const (
	// Use Default DH Group
	//
	// x-displayName: "Default DH Group(19)"
	// Use default DH group (DH Group 19)
	DH_GROUP_DEFAULT DHGroup = 0
	// DH_GROUP_14
	//
	// x-displayName: "DH_GROUP_14"
	// Use DH_GROUP_14 Diffie Hellman Group
	DH_GROUP_14 DHGroup = 1
	// DH_GROUP_15
	//
	// x-displayName: "DH_GROUP_15"
	// Use DH_GROUP_15 Diffie Hellman Group
	DH_GROUP_15 DHGroup = 2
	// DH_GROUP_16
	//
	// x-displayName: "DH_GROUP_16"
	// Use DH_GROUP_16 Diffie Hellman Group
	DH_GROUP_16 DHGroup = 3
	// DH_GROUP_17
	//
	// x-displayName: "DH_GROUP_17"
	// Use DH_GROUP_17 Diffie Hellman Group
	DH_GROUP_17 DHGroup = 4
	// DH_GROUP_18
	//
	// x-displayName: "DH_GROUP_18"
	// Use DH_GROUP_18 Diffie Hellman Group
	DH_GROUP_18 DHGroup = 5
	// DH_GROUP_19
	//
	// x-displayName: "DH_GROUP_19"
	// Use DH_GROUP_19 Diffie Hellman Group
	DH_GROUP_19 DHGroup = 6
	// DH_GROUP_20
	//
	// x-displayName: "DH_GROUP_20"
	// Use DH_GROUP_20 Diffie Hellman Group
	DH_GROUP_20 DHGroup = 7
	// DH_GROUP_21
	//
	// x-displayName: "DH_GROUP_21"
	// Use DH_GROUP_21 Diffie Hellman Group
	DH_GROUP_21 DHGroup = 8
	// DH_GROUP_26
	//
	// x-displayName: "DH_GROUP_26"
	// Use DH_GROUP_26 Diffie Hellman Group
	DH_GROUP_26 DHGroup = 9
)

var DHGroup_name = map[int32]string{
	0: "DH_GROUP_DEFAULT",
	1: "DH_GROUP_14",
	2: "DH_GROUP_15",
	3: "DH_GROUP_16",
	4: "DH_GROUP_17",
	5: "DH_GROUP_18",
	6: "DH_GROUP_19",
	7: "DH_GROUP_20",
	8: "DH_GROUP_21",
	9: "DH_GROUP_26",
}

var DHGroup_value = map[string]int32{
	"DH_GROUP_DEFAULT": 0,
	"DH_GROUP_14":      1,
	"DH_GROUP_15":      2,
	"DH_GROUP_16":      3,
	"DH_GROUP_17":      4,
	"DH_GROUP_18":      5,
	"DH_GROUP_19":      6,
	"DH_GROUP_20":      7,
	"DH_GROUP_21":      8,
	"DH_GROUP_26":      9,
}

func (DHGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93a1b357b411c65c, []int{3}
}

func init() {
	proto.RegisterEnum("ves.io.schema.EncryptionAlgorithm", EncryptionAlgorithm_name, EncryptionAlgorithm_value)
	golang_proto.RegisterEnum("ves.io.schema.EncryptionAlgorithm", EncryptionAlgorithm_name, EncryptionAlgorithm_value)
	proto.RegisterEnum("ves.io.schema.AuthenticationAlgorithm", AuthenticationAlgorithm_name, AuthenticationAlgorithm_value)
	golang_proto.RegisterEnum("ves.io.schema.AuthenticationAlgorithm", AuthenticationAlgorithm_name, AuthenticationAlgorithm_value)
	proto.RegisterEnum("ves.io.schema.PseudoRandomFunction", PseudoRandomFunction_name, PseudoRandomFunction_value)
	golang_proto.RegisterEnum("ves.io.schema.PseudoRandomFunction", PseudoRandomFunction_name, PseudoRandomFunction_value)
	proto.RegisterEnum("ves.io.schema.DHGroup", DHGroup_name, DHGroup_value)
	golang_proto.RegisterEnum("ves.io.schema.DHGroup", DHGroup_name, DHGroup_value)
}

func init() { proto.RegisterFile("ves.io/schema/crypto.proto", fileDescriptor_93a1b357b411c65c) }
func init() { golang_proto.RegisterFile("ves.io/schema/crypto.proto", fileDescriptor_93a1b357b411c65c) }

var fileDescriptor_93a1b357b411c65c = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x6e, 0xda, 0x40,
	0x18, 0x85, 0x3d, 0xe0, 0x80, 0x99, 0x88, 0x64, 0xea, 0x46, 0x6a, 0x43, 0xa5, 0x51, 0xc5, 0x12,
	0x09, 0xbb, 0x98, 0x4b, 0xc9, 0xd2, 0x01, 0x03, 0x95, 0x08, 0x41, 0x5c, 0x16, 0xed, 0xc6, 0xe2,
	0xe2, 0x18, 0xab, 0xc1, 0x63, 0xf9, 0x42, 0x9b, 0x4a, 0x95, 0xd2, 0x37, 0xe8, 0x63, 0xf4, 0x05,
	0xba, 0xac, 0xd4, 0x65, 0x97, 0x2c, 0x59, 0x16, 0xb3, 0xe9, 0x32, 0x8f, 0x50, 0xd9, 0x26, 0x84,
	0x89, 0xb2, 0xf2, 0x7c, 0xdf, 0xf1, 0x9c, 0xf9, 0x47, 0x1a, 0x98, 0x59, 0x68, 0x8e, 0x60, 0x10,
	0xd1, 0x99, 0xcc, 0xb4, 0xf9, 0x48, 0x9c, 0xd8, 0x37, 0x96, 0x4b, 0x04, 0xcb, 0x26, 0x2e, 0xe1,
	0xd3, 0x51, 0x26, 0x44, 0x59, 0x26, 0xaf, 0x1b, 0xee, 0xcc, 0x1b, 0x0b, 0x13, 0x32, 0x17, 0x75,
	0xa2, 0x13, 0x31, 0xfc, 0x6b, 0xec, 0x5d, 0x85, 0x14, 0x42, 0xb8, 0x8a, 0x76, 0x67, 0x5e, 0xd1,
	0xcd, 0xc4, 0x72, 0x0d, 0x62, 0x3a, 0xdb, 0xf0, 0x94, 0x0e, 0xdd, 0x1b, 0x4b, 0xbb, 0x8f, 0x5e,
	0xd3, 0xd1, 0xc2, 0xd0, 0x3e, 0xa9, 0xd4, 0xe6, 0xdc, 0x4f, 0x00, 0x9f, 0x2b, 0x66, 0x38, 0xaa,
	0x41, 0x4c, 0xf9, 0x5a, 0x27, 0xb6, 0xe1, 0xce, 0xe6, 0xfc, 0x4b, 0x78, 0xac, 0x74, 0x6a, 0xaa,
	0xdc, 0x6e, 0xaa, 0x75, 0xa5, 0x21, 0x0f, 0xdb, 0x03, 0xc4, 0x64, 0xe2, 0xb7, 0x5f, 0x01, 0x7f,
	0x04, 0xa1, 0xac, 0xf4, 0x0b, 0x52, 0x55, 0xad, 0x9d, 0xd7, 0xd0, 0x8e, 0xcf, 0xa4, 0x90, 0x63,
	0x5b, 0x96, 0xca, 0x95, 0x90, 0xe3, 0x3c, 0x0f, 0x8f, 0x06, 0xbd, 0x77, 0xdd, 0xb6, 0xa2, 0xd6,
	0x95, 0x7e, 0xe8, 0xd8, 0xbd, 0x8e, 0x66, 0xed, 0x02, 0x1d, 0xec, 0x75, 0x04, 0x9c, 0xd8, 0xeb,
	0x08, 0x38, 0x99, 0x65, 0x39, 0x0e, 0x71, 0x59, 0x96, 0x4b, 0xa1, 0x54, 0x96, 0xe5, 0x20, 0x82,
	0xb9, 0x2f, 0xf0, 0x85, 0xec, 0xb9, 0x33, 0xcd, 0x74, 0x8d, 0xc9, 0x88, 0x1e, 0xfd, 0x14, 0x22,
	0x79, 0x38, 0x68, 0x3d, 0x35, 0xfb, 0x31, 0x3c, 0xec, 0xb7, 0xe4, 0xa0, 0xb7, 0x75, 0x21, 0x07,
	0xc3, 0x47, 0xa2, 0x58, 0x2d, 0x45, 0x22, 0xb6, 0x15, 0xe5, 0x82, 0x14, 0x89, 0x38, 0xff, 0x0c,
	0xa6, 0x77, 0x6d, 0x9d, 0xcb, 0x8e, 0x82, 0xd8, 0xdc, 0x7b, 0x78, 0xd2, 0x75, 0x34, 0x6f, 0x4a,
	0x7a, 0x23, 0x73, 0x4a, 0xe6, 0x0d, 0xcf, 0x9c, 0x04, 0x13, 0xf0, 0x27, 0xf0, 0xb0, 0xdb, 0x6b,
	0x3c, 0x3e, 0x33, 0x0d, 0x53, 0xdd, 0x5e, 0x23, 0x3a, 0x16, 0xed, 0x61, 0xb1, 0x5a, 0x42, 0xb1,
	0x07, 0x2c, 0x17, 0x24, 0x14, 0xcf, 0xfd, 0x02, 0x30, 0x59, 0x6f, 0x35, 0x6d, 0xe2, 0x59, 0xc1,
	0x3d, 0xea, 0x2d, 0xb5, 0xd9, 0xbb, 0x1c, 0x76, 0x9f, 0xb8, 0xc7, 0x2e, 0x2a, 0x94, 0xd0, 0x23,
	0x51, 0x8e, 0xee, 0xf1, 0x20, 0x2a, 0x28, 0x4e, 0x8b, 0xb7, 0x88, 0xa5, 0x45, 0x15, 0x1d, 0xd0,
	0xe2, 0x0c, 0x25, 0x28, 0x21, 0xbd, 0x41, 0x49, 0x5a, 0x14, 0x10, 0x47, 0x8b, 0x0a, 0x4a, 0x9d,
	0x7f, 0x03, 0xcb, 0x35, 0x66, 0x56, 0x6b, 0xcc, 0xdc, 0xad, 0x31, 0xb8, 0xf5, 0x31, 0xf8, 0xe1,
	0x63, 0xf0, 0xc7, 0xc7, 0x60, 0xe9, 0x63, 0xb0, 0xf2, 0x31, 0xf8, 0xeb, 0x63, 0xf0, 0xcf, 0xc7,
	0xcc, 0x9d, 0x8f, 0xc1, 0xf7, 0x0d, 0x66, 0x7e, 0x6f, 0x30, 0x58, 0x6e, 0x30, 0xb3, 0xda, 0x60,
	0xe6, 0x43, 0x4d, 0x27, 0xd6, 0x47, 0x5d, 0x58, 0x90, 0x6b, 0x57, 0xb3, 0xed, 0x91, 0xe0, 0x39,
	0x62, 0xb8, 0xb8, 0x22, 0xf6, 0x3c, 0x6f, 0xd9, 0x64, 0x61, 0x4c, 0x35, 0x3b, 0x7f, 0x1f, 0x8b,
	0xd6, 0x58, 0x27, 0xa2, 0xf6, 0xd9, 0xdd, 0x3e, 0xef, 0xe8, 0x33, 0x4e, 0x84, 0x2f, 0xbb, 0xf8,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0x95, 0x6b, 0x1b, 0x71, 0x8f, 0x03, 0x00, 0x00,
}

func (x EncryptionAlgorithm) String() string {
	s, ok := EncryptionAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthenticationAlgorithm) String() string {
	s, ok := AuthenticationAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PseudoRandomFunction) String() string {
	s, ok := PseudoRandomFunction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DHGroup) String() string {
	s, ok := DHGroup_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

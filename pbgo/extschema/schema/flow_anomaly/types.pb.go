// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/flow_anomaly/types.proto

package flow_anomaly

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Flow Anomaly specification
//
// x-displayName: "Specification"
// Desired state for flow anomaly
type GlobalSpecType struct {
	// Service State
	//
	// x-displayName: "Service State"
	// x-example: "AS_SUB_ALLOWED"
	// result of addon service subscription check
	ServiceState schema.AddonServiceState `protobuf:"varint,1,opt,name=service_state,json=serviceState,proto3,enum=ves.io.schema.AddonServiceState" json:"service_state,omitempty"`
	// Last Enabled Time
	//
	// x-displayName: "Last Enabled Time"
	// x-example: "2024-05-08T09:46:10Z"
	// Last enabled time for flow anomaly add on service
	LastEnabledTime *types.Timestamp `protobuf:"bytes,2,opt,name=last_enabled_time,json=lastEnabledTime,proto3" json:"last_enabled_time,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0a9fed49291aad5, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetServiceState() schema.AddonServiceState {
	if m != nil {
		return m.ServiceState
	}
	return schema.AS_NONE
}

func (m *GlobalSpecType) GetLastEnabledTime() *types.Timestamp {
	if m != nil {
		return m.LastEnabledTime
	}
	return nil
}

// Create Flow Anomaly
//
// x-displayName: "Create Flow Anomaly"
// Shape of the flow anomaly specification
type CreateSpecType struct {
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0a9fed49291aad5, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

// Replace Flow Anomaly
//
// x-displayName: "Replace Flow Anomaly"
// Shape of the flow anomaly specification
type ReplaceSpecType struct {
	ServiceState    schema.AddonServiceState `protobuf:"varint,1,opt,name=service_state,json=serviceState,proto3,enum=ves.io.schema.AddonServiceState" json:"service_state,omitempty"`
	LastEnabledTime *types.Timestamp         `protobuf:"bytes,2,opt,name=last_enabled_time,json=lastEnabledTime,proto3" json:"last_enabled_time,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0a9fed49291aad5, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetServiceState() schema.AddonServiceState {
	if m != nil {
		return m.ServiceState
	}
	return schema.AS_NONE
}

func (m *ReplaceSpecType) GetLastEnabledTime() *types.Timestamp {
	if m != nil {
		return m.LastEnabledTime
	}
	return nil
}

// Get Flow Anomaly
//
// x-displayName: "Get Flow Anomaly"
// Shape of the flow anomaly specification
type GetSpecType struct {
	ServiceState    schema.AddonServiceState `protobuf:"varint,1,opt,name=service_state,json=serviceState,proto3,enum=ves.io.schema.AddonServiceState" json:"service_state,omitempty"`
	LastEnabledTime *types.Timestamp         `protobuf:"bytes,2,opt,name=last_enabled_time,json=lastEnabledTime,proto3" json:"last_enabled_time,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0a9fed49291aad5, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetServiceState() schema.AddonServiceState {
	if m != nil {
		return m.ServiceState
	}
	return schema.AS_NONE
}

func (m *GetSpecType) GetLastEnabledTime() *types.Timestamp {
	if m != nil {
		return m.LastEnabledTime
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.flow_anomaly.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.flow_anomaly.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.flow_anomaly.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.flow_anomaly.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.flow_anomaly.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.flow_anomaly.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.flow_anomaly.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.flow_anomaly.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/flow_anomaly/types.proto", fileDescriptor_b0a9fed49291aad5)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/flow_anomaly/types.proto", fileDescriptor_b0a9fed49291aad5)
}

var fileDescriptor_b0a9fed49291aad5 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x86, 0x3d, 0x14, 0x14, 0x3e, 0xc8, 0xe9, 0x52, 0x1d, 0x06, 0xed, 0x45, 0x41, 0x42, 0xd7,
	0x64, 0x2d, 0x1d, 0x1d, 0x05, 0x12, 0xa0, 0xe3, 0x5a, 0x94, 0x5c, 0x45, 0x63, 0xad, 0xed, 0x89,
	0x6f, 0xc5, 0x3a, 0xb3, 0xda, 0xdd, 0xf8, 0x48, 0xc7, 0x13, 0x20, 0xde, 0x80, 0x96, 0x8e, 0x82,
	0x17, 0xa0, 0x44, 0x54, 0x29, 0x53, 0x92, 0x4d, 0x43, 0x79, 0x8f, 0x80, 0x62, 0x27, 0x22, 0x3e,
	0xee, 0x01, 0xb8, 0x6e, 0xc6, 0xff, 0x37, 0xe3, 0x7f, 0x7e, 0xd9, 0xe1, 0x93, 0x0a, 0x2d, 0x97,
	0x14, 0xdb, 0xec, 0x02, 0x4b, 0x11, 0x8f, 0x15, 0x5d, 0x26, 0x62, 0x42, 0xa5, 0x50, 0xb3, 0xd8,
	0xcd, 0x34, 0x5a, 0xae, 0x0d, 0x39, 0xea, 0x46, 0x0d, 0xc7, 0x1b, 0x8e, 0xef, 0x72, 0xd1, 0xa0,
	0x90, 0xee, 0x62, 0x9a, 0xf2, 0x8c, 0xca, 0xb8, 0xa0, 0x82, 0xe2, 0x7a, 0x24, 0x9d, 0x8e, 0xeb,
	0xae, 0x6e, 0xea, 0xaa, 0x59, 0x15, 0x1d, 0x15, 0x44, 0x85, 0xc2, 0xbf, 0x94, 0x93, 0x25, 0x5a,
	0x27, 0x4a, 0xbd, 0x01, 0x1e, 0xb6, 0x3d, 0x91, 0x76, 0x92, 0x26, 0x1b, 0x23, 0xd1, 0x83, 0xb6,
	0xb8, 0xe3, 0x31, 0x7a, 0xd4, 0x96, 0x2a, 0xa1, 0x64, 0x2e, 0x1c, 0x6e, 0xd4, 0xde, 0x35, 0x55,
	0xe2, 0x65, 0xd2, 0x5e, 0x7d, 0xf4, 0x2f, 0x61, 0x77, 0x5f, 0xd0, 0xff, 0x0c, 0x61, 0xe7, 0x4c,
	0x51, 0x2a, 0xd4, 0x48, 0x63, 0x76, 0x3e, 0xd3, 0xd8, 0x3d, 0x0d, 0xef, 0x5b, 0x34, 0x95, 0xcc,
	0x30, 0xb1, 0x4e, 0x38, 0x3c, 0x84, 0x1e, 0x1c, 0x77, 0x4e, 0x7a, 0xbc, 0x9d, 0xd7, 0x8b, 0x3c,
	0xa7, 0xc9, 0xa8, 0x01, 0x47, 0x6b, 0x6e, 0x78, 0xcf, 0xee, 0x74, 0xdd, 0xd7, 0xe1, 0x81, 0x12,
	0xd6, 0x25, 0x38, 0x11, 0xa9, 0xc2, 0x3c, 0x59, 0x47, 0x72, 0x78, 0xa7, 0x07, 0xc7, 0x7b, 0x27,
	0x11, 0x6f, 0xf2, 0xe2, 0xdb, 0xbc, 0xf8, 0xf9, 0x36, 0xaf, 0xe1, 0xfe, 0x7a, 0xe8, 0xb4, 0x99,
	0x59, 0x3f, 0xed, 0x3f, 0x0e, 0x3b, 0xaf, 0x0c, 0x0a, 0x87, 0x5b, 0x83, 0xcf, 0x0e, 0x7e, 0x3e,
	0xbf, 0xe6, 0xb9, 0xff, 0x0d, 0xc2, 0xfd, 0x21, 0x6a, 0x25, 0x32, 0xfc, 0x4f, 0xef, 0xb8, 0xc9,
	0xf5, 0x57, 0x08, 0xf7, 0xce, 0xd0, 0xdd, 0x1e, 0xc7, 0x2f, 0x3f, 0xc2, 0x7c, 0xc9, 0x82, 0xc5,
	0x92, 0x05, 0x57, 0x4b, 0x06, 0x1f, 0x3c, 0x83, 0x2f, 0x9e, 0xc1, 0x0f, 0xcf, 0x60, 0xee, 0x19,
	0x2c, 0x3c, 0x83, 0x5f, 0x9e, 0xc1, 0x6f, 0xcf, 0x82, 0x2b, 0xcf, 0xe0, 0xd3, 0x8a, 0x05, 0xdf,
	0x57, 0x0c, 0xe6, 0x2b, 0x16, 0x2c, 0x56, 0x2c, 0x78, 0xfb, 0xa6, 0x20, 0xfd, 0xae, 0xe0, 0x15,
	0x29, 0x87, 0xc6, 0x08, 0x3e, 0xb5, 0x71, 0x5d, 0x8c, 0xc9, 0x94, 0x03, 0x6d, 0xa8, 0x92, 0x39,
	0x9a, 0xc1, 0x56, 0x8e, 0x75, 0x5a, 0x50, 0x8c, 0xef, 0xdd, 0xe6, 0xeb, 0xbd, 0xe1, 0x87, 0x4e,
	0xef, 0xd6, 0x87, 0x3c, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x91, 0xb0, 0xe5, 0xf5, 0x03,
	0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceState != that1.ServiceState {
		return false
	}
	if !this.LastEnabledTime.Equal(that1.LastEnabledTime) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceState != that1.ServiceState {
		return false
	}
	if !this.LastEnabledTime.Equal(that1.LastEnabledTime) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceState != that1.ServiceState {
		return false
	}
	if !this.LastEnabledTime.Equal(that1.LastEnabledTime) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&flow_anomaly.GlobalSpecType{")
	s = append(s, "ServiceState: "+fmt.Sprintf("%#v", this.ServiceState)+",\n")
	if this.LastEnabledTime != nil {
		s = append(s, "LastEnabledTime: "+fmt.Sprintf("%#v", this.LastEnabledTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&flow_anomaly.CreateSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&flow_anomaly.ReplaceSpecType{")
	s = append(s, "ServiceState: "+fmt.Sprintf("%#v", this.ServiceState)+",\n")
	if this.LastEnabledTime != nil {
		s = append(s, "LastEnabledTime: "+fmt.Sprintf("%#v", this.LastEnabledTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&flow_anomaly.GetSpecType{")
	s = append(s, "ServiceState: "+fmt.Sprintf("%#v", this.ServiceState)+",\n")
	if this.LastEnabledTime != nil {
		s = append(s, "LastEnabledTime: "+fmt.Sprintf("%#v", this.LastEnabledTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastEnabledTime != nil {
		{
			size, err := m.LastEnabledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ServiceState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastEnabledTime != nil {
		{
			size, err := m.LastEnabledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ServiceState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastEnabledTime != nil {
		{
			size, err := m.LastEnabledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ServiceState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceState != 0 {
		n += 1 + sovTypes(uint64(m.ServiceState))
	}
	if m.LastEnabledTime != nil {
		l = m.LastEnabledTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceState != 0 {
		n += 1 + sovTypes(uint64(m.ServiceState))
	}
	if m.LastEnabledTime != nil {
		l = m.LastEnabledTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceState != 0 {
		n += 1 + sovTypes(uint64(m.ServiceState))
	}
	if m.LastEnabledTime != nil {
		l = m.LastEnabledTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ServiceState:` + fmt.Sprintf("%v", this.ServiceState) + `,`,
		`LastEnabledTime:` + strings.Replace(fmt.Sprintf("%v", this.LastEnabledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ServiceState:` + fmt.Sprintf("%v", this.ServiceState) + `,`,
		`LastEnabledTime:` + strings.Replace(fmt.Sprintf("%v", this.LastEnabledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ServiceState:` + fmt.Sprintf("%v", this.ServiceState) + `,`,
		`LastEnabledTime:` + strings.Replace(fmt.Sprintf("%v", this.LastEnabledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceState", wireType)
			}
			m.ServiceState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceState |= schema.AddonServiceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEnabledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastEnabledTime == nil {
				m.LastEnabledTime = &types.Timestamp{}
			}
			if err := m.LastEnabledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceState", wireType)
			}
			m.ServiceState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceState |= schema.AddonServiceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEnabledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastEnabledTime == nil {
				m.LastEnabledTime = &types.Timestamp{}
			}
			if err := m.LastEnabledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceState", wireType)
			}
			m.ServiceState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceState |= schema.AddonServiceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEnabledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastEnabledTime == nil {
				m.LastEnabledTime = &types.Timestamp{}
			}
			if err := m.LastEnabledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

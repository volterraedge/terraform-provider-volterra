// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_site/public_customapi.proto

// virtual site
//
// x-displayName: "Virtual Site"
// Virtual site object is mechanism to create arbitrary set of sites
// It selects all the sites for which label selector expression return true.
// Selector is goes thru all customer edge sites for a given tenant and all regional sites from volterra

package virtual_site

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Selectee Request
//
// x-displayName: "Selectee Request"
// Request to get the objects selected by a Virtual Site based on its selector label expression
type SelecteeRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace of the Virtual Site whose Site selections are to be found
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of the Virtual Site whose Site selections are to be found
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SelecteeRequest) Reset()      { *m = SelecteeRequest{} }
func (*SelecteeRequest) ProtoMessage() {}
func (*SelecteeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8e7ee3fff5e5f3c, []int{0}
}
func (m *SelecteeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelecteeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelecteeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelecteeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelecteeRequest.Merge(m, src)
}
func (m *SelecteeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SelecteeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SelecteeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SelecteeRequest proto.InternalMessageInfo

func (m *SelecteeRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SelecteeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Selectee Response
//
// x-displayName: "Selectee Response"
// Response indicating the objects selected by a Virtual Site based on its selector label expression
type SelecteeResponse struct {
	// Error
	//
	// x-displayName: "Error"
	// Error type
	Error *schema.ErrorType `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Items
	//
	// x-displayName: "Items"
	// List of selected objects
	Items []*SelecteeItemType `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SelecteeResponse) Reset()      { *m = SelecteeResponse{} }
func (*SelecteeResponse) ProtoMessage() {}
func (*SelecteeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8e7ee3fff5e5f3c, []int{1}
}
func (m *SelecteeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelecteeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelecteeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelecteeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelecteeResponse.Merge(m, src)
}
func (m *SelecteeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SelecteeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SelecteeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SelecteeResponse proto.InternalMessageInfo

func (m *SelecteeResponse) GetError() *schema.ErrorType {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SelecteeResponse) GetItems() []*SelecteeItemType {
	if m != nil {
		return m.Items
	}
	return nil
}

// Selectee Item
//
// x-displayName: "Selectee Item"
// An individual object that has been selected by the Virtual Site
type SelecteeItemType struct {
	// Kind
	//
	// x-displayName: "Kind"
	// x-example: "value"
	// Kind of the selected object belongs to
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Tenant
	//
	// x-displayName: "Tenant"
	// x-example: "value"
	// Tenant the selected object belongs to
	Tenant string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace the selected object belongs to
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of the selected object
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SelecteeItemType) Reset()      { *m = SelecteeItemType{} }
func (*SelecteeItemType) ProtoMessage() {}
func (*SelecteeItemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8e7ee3fff5e5f3c, []int{2}
}
func (m *SelecteeItemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelecteeItemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelecteeItemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelecteeItemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelecteeItemType.Merge(m, src)
}
func (m *SelecteeItemType) XXX_Size() int {
	return m.Size()
}
func (m *SelecteeItemType) XXX_DiscardUnknown() {
	xxx_messageInfo_SelecteeItemType.DiscardUnknown(m)
}

var xxx_messageInfo_SelecteeItemType proto.InternalMessageInfo

func (m *SelecteeItemType) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *SelecteeItemType) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *SelecteeItemType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SelecteeItemType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*SelecteeRequest)(nil), "ves.io.schema.virtual_site.SelecteeRequest")
	golang_proto.RegisterType((*SelecteeRequest)(nil), "ves.io.schema.virtual_site.SelecteeRequest")
	proto.RegisterType((*SelecteeResponse)(nil), "ves.io.schema.virtual_site.SelecteeResponse")
	golang_proto.RegisterType((*SelecteeResponse)(nil), "ves.io.schema.virtual_site.SelecteeResponse")
	proto.RegisterType((*SelecteeItemType)(nil), "ves.io.schema.virtual_site.SelecteeItemType")
	golang_proto.RegisterType((*SelecteeItemType)(nil), "ves.io.schema.virtual_site.SelecteeItemType")
}

func init() {
	proto.RegisterFile("ves.io/schema/virtual_site/public_customapi.proto", fileDescriptor_a8e7ee3fff5e5f3c)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/virtual_site/public_customapi.proto", fileDescriptor_a8e7ee3fff5e5f3c)
}

var fileDescriptor_a8e7ee3fff5e5f3c = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xce, 0x64, 0xdb, 0xc2, 0xa6, 0x82, 0x25, 0x07, 0x89, 0xb1, 0x0c, 0x75, 0x0f, 0x52, 0xb0,
	0xc9, 0xe0, 0x7a, 0x16, 0xb1, 0x45, 0xa4, 0x27, 0xcb, 0xea, 0xc9, 0x4b, 0x49, 0xb2, 0x6f, 0xd3,
	0xb1, 0x9b, 0xcc, 0x38, 0x33, 0x59, 0x2c, 0x52, 0x90, 0x1e, 0x3c, 0x78, 0x2a, 0xf8, 0x27, 0xfc,
	0x09, 0x42, 0x2f, 0xbd, 0xd9, 0x93, 0xac, 0x7a, 0xe9, 0xd1, 0xcd, 0x7a, 0xf0, 0xd8, 0x9f, 0x20,
	0x3b, 0x49, 0xba, 0x9b, 0xd2, 0x96, 0xde, 0xde, 0xcb, 0xf7, 0xbe, 0x97, 0xef, 0x7b, 0xf9, 0x62,
	0x3d, 0x1a, 0x80, 0xf4, 0x29, 0x23, 0x32, 0xda, 0x81, 0x24, 0x20, 0x03, 0x2a, 0x54, 0x16, 0xf4,
	0xb7, 0x25, 0x55, 0x40, 0x78, 0x16, 0xf6, 0x69, 0xb4, 0x1d, 0x65, 0x52, 0xb1, 0x24, 0xe0, 0xd4,
	0xe7, 0x82, 0x29, 0x66, 0xbb, 0x05, 0xc5, 0x2f, 0x28, 0xfe, 0x2c, 0xc5, 0xf5, 0x62, 0xaa, 0x76,
	0xb2, 0xd0, 0x8f, 0x58, 0x42, 0x62, 0x16, 0x33, 0xa2, 0x29, 0x61, 0xd6, 0xd3, 0x9d, 0x6e, 0x74,
	0x55, 0xac, 0x72, 0x97, 0x63, 0xc6, 0xe2, 0x3e, 0x90, 0x80, 0x53, 0x12, 0xa4, 0x29, 0x53, 0x81,
	0xa2, 0x2c, 0x95, 0x25, 0xea, 0xd6, 0xb5, 0x81, 0x10, 0x4c, 0x54, 0xd8, 0xbd, 0x3a, 0xc6, 0xf8,
	0x2c, 0xf1, 0x6e, 0x1d, 0x54, 0x7b, 0x1c, 0x2a, 0xa8, 0x75, 0xc1, 0x2f, 0x48, 0x48, 0x07, 0x17,
	0xe8, 0x0f, 0xae, 0xb9, 0xc9, 0xcc, 0xae, 0xd6, 0x86, 0x75, 0xfb, 0x15, 0xf4, 0x21, 0x52, 0x00,
	0x1d, 0x78, 0x97, 0x81, 0x54, 0xf6, 0xb2, 0xd5, 0x4c, 0x83, 0x04, 0x24, 0x0f, 0x22, 0x70, 0xd0,
	0x0a, 0x5a, 0x6d, 0x76, 0xa6, 0x0f, 0x6c, 0xdb, 0x9a, 0x9b, 0x34, 0x8e, 0xa9, 0x01, 0x5d, 0xb7,
	0x3e, 0x21, 0x6b, 0x69, 0xba, 0x45, 0x72, 0x96, 0x4a, 0xb0, 0x7d, 0x6b, 0x5e, 0xbb, 0xd5, 0x2b,
	0x16, 0xdb, 0x8e, 0x5f, 0x3f, 0xf9, 0xf3, 0x09, 0xf6, 0x7a, 0x8f, 0x43, 0xa7, 0x18, 0xb3, 0xd7,
	0xad, 0x79, 0xaa, 0x20, 0x91, 0x8e, 0xb9, 0xd2, 0x58, 0x5d, 0x6c, 0xaf, 0xf9, 0x57, 0x7f, 0x22,
	0xbf, 0x7a, 0xd9, 0xa6, 0x82, 0xa4, 0xd8, 0xa1, 0xa9, 0x2d, 0x3e, 0xd5, 0x51, 0x41, 0x13, 0xc1,
	0xbb, 0x34, 0xed, 0x96, 0x4e, 0x74, 0x6d, 0xdf, 0xb1, 0x16, 0x14, 0xa4, 0x41, 0xaa, 0x4a, 0x1b,
	0x65, 0x57, 0xb7, 0xde, 0xb8, 0xca, 0xfa, 0xdc, 0xd4, 0x7a, 0xfb, 0xd0, 0xb4, 0x9a, 0x1b, 0x3a,
	0x5c, 0xcf, 0xb6, 0x36, 0xed, 0x9f, 0xc8, 0xba, 0xf5, 0x02, 0x54, 0xa5, 0x41, 0xda, 0x0f, 0x6f,
	0xe2, 0xa2, 0x3c, 0xbc, 0xbb, 0x76, 0xb3, 0xe1, 0xe2, 0xbe, 0xad, 0xde, 0xc9, 0x37, 0x13, 0xe5,
	0xdf, 0x9d, 0x49, 0x50, 0x3c, 0xca, 0xbc, 0x72, 0xda, 0x9b, 0x4c, 0x4b, 0x4f, 0x40, 0xd0, 0x3d,
	0xf8, 0xfd, 0xf7, 0x8b, 0xf9, 0xd4, 0x7e, 0x52, 0xfe, 0x04, 0xe4, 0xdc, 0x89, 0x24, 0x1f, 0xce,
	0xeb, 0xfd, 0x5a, 0x36, 0x4a, 0x64, 0x9f, 0xc8, 0xca, 0x82, 0x4b, 0x8e, 0x8f, 0x50, 0xe3, 0xd7,
	0x11, 0xba, 0x7f, 0x8d, 0xb8, 0x97, 0xe1, 0x5b, 0x88, 0xd4, 0xc1, 0x0f, 0xc7, 0x5c, 0x42, 0xeb,
	0x9f, 0xd1, 0x70, 0x84, 0x8d, 0xd3, 0x11, 0x36, 0xce, 0x46, 0x18, 0x7d, 0xcc, 0x31, 0xfa, 0x9a,
	0x63, 0x74, 0x92, 0x63, 0x34, 0xcc, 0x31, 0xfa, 0x93, 0x63, 0xf4, 0x2f, 0xc7, 0xc6, 0x59, 0x8e,
	0xd1, 0xe1, 0x18, 0x1b, 0xc7, 0x63, 0x8c, 0x86, 0x63, 0x6c, 0x9c, 0x8e, 0xb1, 0xf1, 0x66, 0x2b,
	0x66, 0x7c, 0x37, 0xf6, 0x07, 0xac, 0xaf, 0x40, 0x88, 0xc0, 0xcf, 0x24, 0xd1, 0x45, 0x8f, 0x89,
	0xc4, 0xe3, 0x82, 0x0d, 0x68, 0x17, 0x84, 0x57, 0xc1, 0x84, 0x87, 0x31, 0x23, 0xf0, 0x5e, 0x95,
	0x21, 0xbf, 0x24, 0xeb, 0xe1, 0x82, 0x8e, 0xf9, 0xe3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x11,
	0x1b, 0x48, 0x3b, 0x24, 0x04, 0x00, 0x00,
}

func (this *SelecteeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelecteeRequest)
	if !ok {
		that2, ok := that.(SelecteeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SelecteeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelecteeResponse)
	if !ok {
		that2, ok := that.(SelecteeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *SelecteeItemType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelecteeItemType)
	if !ok {
		that2, ok := that.(SelecteeItemType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SelecteeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_site.SelecteeRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelecteeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_site.SelecteeResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelecteeItemType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_site.SelecteeItemType{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Get Selected Sites
	//
	// x-displayName: "Get Selectees"
	// Get the list of objects selected by this Virtual Site based on its selector label expression
	GetSelectees(ctx context.Context, in *SelecteeRequest, opts ...grpc.CallOption) (*SelecteeResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) GetSelectees(ctx context.Context, in *SelecteeRequest, opts ...grpc.CallOption) (*SelecteeResponse, error) {
	out := new(SelecteeResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_site.CustomAPI/GetSelectees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Get Selected Sites
	//
	// x-displayName: "Get Selectees"
	// Get the list of objects selected by this Virtual Site based on its selector label expression
	GetSelectees(context.Context, *SelecteeRequest) (*SelecteeResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) GetSelectees(ctx context.Context, req *SelecteeRequest) (*SelecteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelectees not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_GetSelectees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelecteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetSelectees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_site.CustomAPI/GetSelectees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetSelectees(ctx, req.(*SelecteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.virtual_site.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSelectees",
			Handler:    _CustomAPI_GetSelectees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/virtual_site/public_customapi.proto",
}

func (m *SelecteeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelecteeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelecteeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SelecteeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelecteeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelecteeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SelecteeItemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelecteeItemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelecteeItemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SelecteeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *SelecteeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *SelecteeItemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SelecteeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SelecteeRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SelecteeResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*SelecteeItemType{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "SelecteeItemType", "SelecteeItemType", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&SelecteeResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorType", "schema.ErrorType", 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *SelecteeItemType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SelecteeItemType{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SelecteeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelecteeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelecteeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelecteeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelecteeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelecteeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &schema.ErrorType{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SelecteeItemType{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelecteeItemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelecteeItemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelecteeItemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/waf_rule_list/types.proto

package waf_rule_list

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WAF Rule ID
//
// x-displayName: "WAF Rule ID"
// Supported WAF rule IDs
type WafRuleID int32

const (
	// x-displayName: "Skip All Rules (internal use only)"
	// Used internally to instruct the modsec code in envoy to skip all rules
	WAF_RULE_ALL WafRuleID = 0
	// x-displayName: "910000"
	// Request from Known Malicious Client (Based on previous traffic violations).
	WAF_RULE_910000 WafRuleID = 910000
	// x-displayName: "910100"
	// Client IP is from a HIGH Risk Country Location.
	WAF_RULE_910100 WafRuleID = 910100
	// x-displayName: "910150"
	// HTTP Blacklist match for search engine IP
	WAF_RULE_910150 WafRuleID = 910150
	// x-displayName: "910160"
	// HTTP Blacklist match for spammer IP
	WAF_RULE_910160 WafRuleID = 910160
	// x-displayName: "910170"
	// HTTP Blacklist match for suspicious IP
	WAF_RULE_910170 WafRuleID = 910170
	// x-displayName: "910180"
	// HTTP Blacklist match for harvester IP
	WAF_RULE_910180 WafRuleID = 910180
	// x-displayName: "911100"
	// Method is not allowed by policy
	WAF_RULE_911100 WafRuleID = 911100
	// x-displayName: "912120"
	// Denial of Service (DoS) attack identified from %{tx.real_ip} (%{tx.dos_block_counter} hits since last alert)
	WAF_RULE_912120 WafRuleID = 912120
	// x-displayName: "913100"
	// Found User-Agent associated with security scanner
	WAF_RULE_913100 WafRuleID = 913100
	// x-displayName: "913101"
	// Found User-Agent associated with scripting/generic HTTP client
	WAF_RULE_913101 WafRuleID = 913101
	// x-displayName: "913102"
	// Found User-Agent associated with web crawler/bot
	WAF_RULE_913102 WafRuleID = 913102
	// x-displayName: "913110"
	// Found request header associated with security scanner
	WAF_RULE_913110 WafRuleID = 913110
	// x-displayName: "913120"
	// Found request filename/argument associated with security scanner
	WAF_RULE_913120 WafRuleID = 913120
	// x-displayName: "920100"
	// Invalid HTTP Request Line
	WAF_RULE_920100 WafRuleID = 920100
	// x-displayName: "920120"
	// Attempted multipart/form-data bypass
	WAF_RULE_920120 WafRuleID = 920120
	// x-displayName: "920121"
	// Attempted multipart/form-data bypass
	WAF_RULE_920121 WafRuleID = 920121
	// x-displayName: "920130"
	// Failed to parse request body.
	WAF_RULE_920130 WafRuleID = 920130
	// x-displayName: "920140"
	// Multipart request body failed strict validation:PE %{REQBODY_PROCESSOR_ERROR},BQ %{MULTIPART_BOUNDARY_QUOTED},BW %{MULTIPART_BOUNDARY_WHITESPACE},DB %{MULTIPART_DATA_BEFORE},DA %{MULTIPART_DATA_AFTER},HF %{MULTIPART_HEADER_FOLDING},LF %{MULTIPART_LF_LINE},SM %{MULTIPART_MISSING_SEMICOLON},IQ %{MULTIPART_INVALID_QUOTING},IH %{MULTIPART_INVALID_HEADER_FOLDING},FLE %{MULTIPART_FILE_LIMIT_EXCEEDED}
	WAF_RULE_920140 WafRuleID = 920140
	// x-displayName: "920160"
	// Content-Length HTTP header is not numeric.
	WAF_RULE_920160 WafRuleID = 920160
	// x-displayName: "920170"
	// GET or HEAD Request with Body Content.
	WAF_RULE_920170 WafRuleID = 920170
	// x-displayName: "920171"
	// GET or HEAD Request with Transfer-Encoding.
	WAF_RULE_920171 WafRuleID = 920171
	// x-displayName: "920180"
	// POST without Content-Length or Transfer-Encoding headers.
	WAF_RULE_920180 WafRuleID = 920180
	// x-displayName: "920190"
	// Range: Invalid Last Byte Value.
	WAF_RULE_920190 WafRuleID = 920190
	// x-displayName: "920200"
	// Range: Too many fields (6 or more)
	WAF_RULE_920200 WafRuleID = 920200
	// x-displayName: "920201"
	// Range: Too many fields for pdf request (63 or more)
	WAF_RULE_920201 WafRuleID = 920201
	// x-displayName: "920202"
	// Range: Too many fields for pdf request (6 or more)
	WAF_RULE_920202 WafRuleID = 920202
	// x-displayName: "920210"
	// Multiple/Conflicting Connection Header Data Found.
	WAF_RULE_920210 WafRuleID = 920210
	// x-displayName: "920220"
	// URL Encoding Abuse Attack Attempt
	WAF_RULE_920220 WafRuleID = 920220
	// x-displayName: "920230"
	// Multiple URL Encoding Detected
	WAF_RULE_920230 WafRuleID = 920230
	// x-displayName: "920240"
	// URL Encoding Abuse Attack Attempt
	WAF_RULE_920240 WafRuleID = 920240
	// x-displayName: "920250"
	// UTF8 Encoding Abuse Attack Attempt
	WAF_RULE_920250 WafRuleID = 920250
	// x-displayName: "920260"
	// Unicode Full/Half Width Abuse Attack Attempt
	WAF_RULE_920260 WafRuleID = 920260
	// x-displayName: "920270"
	// Invalid character in request (null character)
	WAF_RULE_920270 WafRuleID = 920270
	// x-displayName: "920271"
	// Invalid character in request (non printable characters)
	WAF_RULE_920271 WafRuleID = 920271
	// x-displayName: "920272"
	// Invalid character in request (outside of printable chars below ascii 127)
	WAF_RULE_920272 WafRuleID = 920272
	// x-displayName: "920273"
	// Invalid character in request (outside of very strict set)
	WAF_RULE_920273 WafRuleID = 920273
	// x-displayName: "920274"
	// Invalid character in request headers (outside of very strict set)
	WAF_RULE_920274 WafRuleID = 920274
	// x-displayName: "920341"
	// Request Containing Content Requires Content-Type header
	WAF_RULE_920341 WafRuleID = 920341
	// x-displayName: "920350"
	// Host header is a numeric IP address
	WAF_RULE_920350 WafRuleID = 920350
	// x-displayName: "920360"
	// Argument name too long
	WAF_RULE_920360 WafRuleID = 920360
	// x-displayName: "920370"
	// Argument value too long
	WAF_RULE_920370 WafRuleID = 920370
	// x-displayName: "920380"
	// Too many arguments in request
	WAF_RULE_920380 WafRuleID = 920380
	// x-displayName: "920390"
	// Total arguments size exceeded
	WAF_RULE_920390 WafRuleID = 920390
	// x-displayName: "920400"
	// Uploaded file size too large
	WAF_RULE_920400 WafRuleID = 920400
	// x-displayName: "920410"
	// Total uploaded files size too large
	WAF_RULE_920410 WafRuleID = 920410
	// x-displayName: "920420"
	// Request content type is not allowed by policy
	WAF_RULE_920420 WafRuleID = 920420
	// x-displayName: "920430"
	// HTTP protocol version is not allowed by policy
	WAF_RULE_920430 WafRuleID = 920430
	// x-displayName: "920440"
	// URL file extension is restricted by policy
	WAF_RULE_920440 WafRuleID = 920440
	// x-displayName: "920450"
	// HTTP header is restricted by policy (%{MATCHED_VAR})
	WAF_RULE_920450 WafRuleID = 920450
	// x-displayName: "920460"
	// Abnormal character escapes in request
	WAF_RULE_920460 WafRuleID = 920460
	// x-displayName: "920470"
	// Illegal Content-Type header
	WAF_RULE_920470 WafRuleID = 920470
	// x-displayName: "920480"
	// Request content type charset is not allowed by policy
	WAF_RULE_920480 WafRuleID = 920480
	// x-displayName: "921110"
	// HTTP Request Smuggling Attack
	WAF_RULE_921110 WafRuleID = 921110
	// x-displayName: "921120"
	// HTTP Response Splitting Attack
	WAF_RULE_921120 WafRuleID = 921120
	// x-displayName: "921130"
	// HTTP Response Splitting Attack
	WAF_RULE_921130 WafRuleID = 921130
	// x-displayName: "921140"
	// HTTP Header Injection Attack via headers
	WAF_RULE_921140 WafRuleID = 921140
	// x-displayName: "921150"
	// HTTP Header Injection Attack via payload (CR/LF detected)
	WAF_RULE_921150 WafRuleID = 921150
	// x-displayName: "921151"
	// HTTP Header Injection Attack via payload (CR/LF detected)
	WAF_RULE_921151 WafRuleID = 921151
	// x-displayName: "921160"
	// HTTP Header Injection Attack via payload (CR/LF and header-name detected)
	WAF_RULE_921160 WafRuleID = 921160
	// x-displayName: "930100"
	// Path Traversal Attack (/../)
	WAF_RULE_930100 WafRuleID = 930100
	// x-displayName: "930110"
	// Path Traversal Attack (/../)
	WAF_RULE_930110 WafRuleID = 930110
	// x-displayName: "930120"
	// OS File Access Attempt
	WAF_RULE_930120 WafRuleID = 930120
	// x-displayName: "930130"
	// Restricted File Access Attempt
	WAF_RULE_930130 WafRuleID = 930130
	// x-displayName: "931100"
	// Possible Remote File Inclusion (RFI) Attack: URL Parameter using IP Address
	WAF_RULE_931100 WafRuleID = 931100
	// x-displayName: "931110"
	// Possible Remote File Inclusion (RFI) Attack: Common RFI Vulnerable Parameter Name used w/URL Payload
	WAF_RULE_931110 WafRuleID = 931110
	// x-displayName: "931120"
	// Possible Remote File Inclusion (RFI) Attack: URL Payload Used w/Trailing Question Mark Character (?)
	WAF_RULE_931120 WafRuleID = 931120
	// x-displayName: "931130"
	// Possible Remote File Inclusion (RFI) Attack: Off-Domain Reference/Link
	WAF_RULE_931130 WafRuleID = 931130
	// x-displayName: "932100"
	// Remote Command Execution: Unix Command Injection
	WAF_RULE_932100 WafRuleID = 932100
	// x-displayName: "932105"
	// Remote Command Execution: Unix Command Injection
	WAF_RULE_932105 WafRuleID = 932105
	// x-displayName: "932106"
	// Remote Command Execution: Unix Command Injection
	WAF_RULE_932106 WafRuleID = 932106
	// x-displayName: "932110"
	// Remote Command Execution: Windows Command Injection
	WAF_RULE_932110 WafRuleID = 932110
	// x-displayName: "932115"
	// Remote Command Execution: Windows Command Injection
	WAF_RULE_932115 WafRuleID = 932115
	// x-displayName: "932120"
	// Remote Command Execution: Windows PowerShell Command Found
	WAF_RULE_932120 WafRuleID = 932120
	// x-displayName: "932130"
	// Remote Command Execution: Unix Shell Expression Found
	WAF_RULE_932130 WafRuleID = 932130
	// x-displayName: "932140"
	// Remote Command Execution: Windows FOR/IF Command Found
	WAF_RULE_932140 WafRuleID = 932140
	// x-displayName: "932150"
	// Remote Command Execution: Direct Unix Command Execution
	WAF_RULE_932150 WafRuleID = 932150
	// x-displayName: "932160"
	// Remote Command Execution: Unix Shell Code Found
	WAF_RULE_932160 WafRuleID = 932160
	// x-displayName: "932170"
	// Remote Command Execution: Shellshock (CVE-2014-6271)
	WAF_RULE_932170 WafRuleID = 932170
	// x-displayName: "932171"
	// Remote Command Execution: Shellshock (CVE-2014-6271)
	WAF_RULE_932171 WafRuleID = 932171
	// x-displayName: "932180"
	// Restricted File Upload Attempt
	WAF_RULE_932180 WafRuleID = 932180
	// x-displayName: "932190"
	// Remote Command Execution: Wildcard bypass technique attempt
	WAF_RULE_932190 WafRuleID = 932190
	// x-displayName: "933100"
	// PHP Injection Attack: PHP Open Tag Found
	WAF_RULE_933100 WafRuleID = 933100
	// x-displayName: "933110"
	// PHP Injection Attack: PHP Script File Upload Found
	WAF_RULE_933110 WafRuleID = 933110
	// x-displayName: "933111"
	// PHP Injection Attack: PHP Script File Upload Found
	WAF_RULE_933111 WafRuleID = 933111
	// x-displayName: "933120"
	// PHP Injection Attack: Configuration Directive Found
	WAF_RULE_933120 WafRuleID = 933120
	// x-displayName: "933130"
	// PHP Injection Attack: Variables Found
	WAF_RULE_933130 WafRuleID = 933130
	// x-displayName: "933131"
	// PHP Injection Attack: Variables Found
	WAF_RULE_933131 WafRuleID = 933131
	// x-displayName: "933140"
	// PHP Injection Attack: I/O Stream Found
	WAF_RULE_933140 WafRuleID = 933140
	// x-displayName: "933150"
	// PHP Injection Attack: High-Risk PHP Function Name Found
	WAF_RULE_933150 WafRuleID = 933150
	// x-displayName: "933151"
	// PHP Injection Attack: Medium-Risk PHP Function Name Found
	WAF_RULE_933151 WafRuleID = 933151
	// x-displayName: "933160"
	// PHP Injection Attack: High-Risk PHP Function Call Found
	WAF_RULE_933160 WafRuleID = 933160
	// x-displayName: "933161"
	// PHP Injection Attack: Low-Value PHP Function Call Found
	WAF_RULE_933161 WafRuleID = 933161
	// x-displayName: "933170"
	// PHP Injection Attack: Serialized Object Injection
	WAF_RULE_933170 WafRuleID = 933170
	// x-displayName: "933180"
	// PHP Injection Attack: Variable Function Call Found
	WAF_RULE_933180 WafRuleID = 933180
	// x-displayName: "933190"
	// PHP Injection Attack: PHP Closing Tag Found
	WAF_RULE_933190 WafRuleID = 933190
	// x-displayName: "941100"
	// XSS Attack Detected via libinjection
	WAF_RULE_941100 WafRuleID = 941100
	// x-displayName: "941101"
	// XSS Attack Detected via libinjection
	WAF_RULE_941101 WafRuleID = 941101
	// x-displayName: "941110"
	// XSS Filter - Category 1: Script Tag Vector
	WAF_RULE_941110 WafRuleID = 941110
	// x-displayName: "941120"
	// XSS Filter - Category 2: Event Handler Vector
	WAF_RULE_941120 WafRuleID = 941120
	// x-displayName: "941130"
	// XSS Filter - Category 3: Attribute Vector
	WAF_RULE_941130 WafRuleID = 941130
	// x-displayName: "941140"
	// XSS Filter - Category 4: Javascript URI Vector
	WAF_RULE_941140 WafRuleID = 941140
	// x-displayName: "941150"
	// XSS Filter - Category 5: Disallowed HTML Attributes
	WAF_RULE_941150 WafRuleID = 941150
	// x-displayName: "941160"
	// NoScript XSS InjectionChecker: HTML Injection
	WAF_RULE_941160 WafRuleID = 941160
	// x-displayName: "941170"
	// NoScript XSS InjectionChecker: Attribute Injection
	WAF_RULE_941170 WafRuleID = 941170
	// x-displayName: "941180"
	// Node-Validator Blacklist Keywords
	WAF_RULE_941180 WafRuleID = 941180
	// x-displayName: "941190"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941190 WafRuleID = 941190
	// x-displayName: "941200"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941200 WafRuleID = 941200
	// x-displayName: "941210"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941210 WafRuleID = 941210
	// x-displayName: "941220"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941220 WafRuleID = 941220
	// x-displayName: "941230"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941230 WafRuleID = 941230
	// x-displayName: "941240"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941240 WafRuleID = 941240
	// x-displayName: "941250"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941250 WafRuleID = 941250
	// x-displayName: "941260"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941260 WafRuleID = 941260
	// x-displayName: "941270"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941270 WafRuleID = 941270
	// x-displayName: "941280"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941280 WafRuleID = 941280
	// x-displayName: "941290"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941290 WafRuleID = 941290
	// x-displayName: "941300"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941300 WafRuleID = 941300
	// x-displayName: "941310"
	// US-ASCII Malformed Encoding XSS Filter - Attack Detected.
	WAF_RULE_941310 WafRuleID = 941310
	// x-displayName: "941320"
	// Possible XSS Attack Detected - HTML Tag Handler
	WAF_RULE_941320 WafRuleID = 941320
	// x-displayName: "941330"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941330 WafRuleID = 941330
	// x-displayName: "941340"
	// IE XSS Filters - Attack Detected.
	WAF_RULE_941340 WafRuleID = 941340
	// x-displayName: "941350"
	// UTF-7 Encoding IE XSS - Attack Detected.
	WAF_RULE_941350 WafRuleID = 941350
	// x-displayName: "942100"
	// SQL Injection Attack Detected via libinjection
	WAF_RULE_942100 WafRuleID = 942100
	// x-displayName: "942110"
	// SQL Injection Attack: Common Injection Testing Detected
	WAF_RULE_942110 WafRuleID = 942110
	// x-displayName: "942120"
	// SQL Injection Attack: SQL Operator Detected
	WAF_RULE_942120 WafRuleID = 942120
	// x-displayName: "942130"
	// SQL Injection Attack: SQL Tautology Detected.
	WAF_RULE_942130 WafRuleID = 942130
	// x-displayName: "942140"
	// SQL Injection Attack: Common DB Names Detected
	WAF_RULE_942140 WafRuleID = 942140
	// x-displayName: "942150"
	// SQL Injection Attack
	WAF_RULE_942150 WafRuleID = 942150
	// x-displayName: "942160"
	// Detects blind sqli tests using sleep() or benchmark().
	WAF_RULE_942160 WafRuleID = 942160
	// x-displayName: "942170"
	// Detects SQL benchmark and sleep injection attempts including conditional queries
	WAF_RULE_942170 WafRuleID = 942170
	// x-displayName: "942180"
	// Detects basic SQL authentication bypass attempts 1/3
	WAF_RULE_942180 WafRuleID = 942180
	// x-displayName: "942190"
	// Detects MSSQL code execution and information gathering attempts
	WAF_RULE_942190 WafRuleID = 942190
	// x-displayName: "942200"
	// Detects MySQL comment-/space-obfuscated injections and backtick termination
	WAF_RULE_942200 WafRuleID = 942200
	// x-displayName: "942210"
	// Detects chained SQL injection attempts 1/2
	WAF_RULE_942210 WafRuleID = 942210
	// x-displayName: "942220"
	// Looking for integer overflow attacks, these are taken from skipfish, except 3.0.00738585072007e-308 is the \
	WAF_RULE_942220 WafRuleID = 942220
	// x-displayName: "942230"
	// Detects conditional SQL injection attempts
	WAF_RULE_942230 WafRuleID = 942230
	// x-displayName: "942240"
	// Detects MySQL charset switch and MSSQL DoS attempts
	WAF_RULE_942240 WafRuleID = 942240
	// x-displayName: "942250"
	// Detects MATCH AGAINST, MERGE and EXECUTE IMMEDIATE injections
	WAF_RULE_942250 WafRuleID = 942250
	// x-displayName: "942251"
	// Detects HAVING injections
	WAF_RULE_942251 WafRuleID = 942251
	// x-displayName: "942260"
	// Detects basic SQL authentication bypass attempts 2/3
	WAF_RULE_942260 WafRuleID = 942260
	// x-displayName: "942270"
	// Looking for basic sql injection. Common attack string for mysql, oracle and others.
	WAF_RULE_942270 WafRuleID = 942270
	// x-displayName: "942280"
	// Detects Postgres pg_sleep injection, waitfor delay attacks and database shutdown attempts
	WAF_RULE_942280 WafRuleID = 942280
	// x-displayName: "942290"
	// Finds basic MongoDB SQL injection attempts
	WAF_RULE_942290 WafRuleID = 942290
	// x-displayName: "942300"
	// Detects MySQL comments, conditions and ch(a)r injections
	WAF_RULE_942300 WafRuleID = 942300
	// x-displayName: "942310"
	// Detects chained SQL injection attempts 2/2
	WAF_RULE_942310 WafRuleID = 942310
	// x-displayName: "942320"
	// Detects MySQL and PostgreSQL stored procedure/function injections
	WAF_RULE_942320 WafRuleID = 942320
	// x-displayName: "942330"
	// Detects classic SQL injection probings 1/3
	WAF_RULE_942330 WafRuleID = 942330
	// x-displayName: "942340"
	// Detects basic SQL authentication bypass attempts 3/3
	WAF_RULE_942340 WafRuleID = 942340
	// x-displayName: "942350"
	// Detects MySQL UDF injection and other data/structure manipulation attempts
	WAF_RULE_942350 WafRuleID = 942350
	// x-displayName: "942360"
	// Detects concatenated basic SQL injection and SQLLFI attempts
	WAF_RULE_942360 WafRuleID = 942360
	// x-displayName: "942361"
	// Detects basic SQL injection based on keyword alter or union
	WAF_RULE_942361 WafRuleID = 942361
	// x-displayName: "942370"
	// Detects classic SQL injection probings 2/3
	WAF_RULE_942370 WafRuleID = 942370
	// x-displayName: "942380"
	// SQL Injection Attack
	WAF_RULE_942380 WafRuleID = 942380
	// x-displayName: "942390"
	// SQL Injection Attack
	WAF_RULE_942390 WafRuleID = 942390
	// x-displayName: "942400"
	// SQL Injection Attack
	WAF_RULE_942400 WafRuleID = 942400
	// x-displayName: "942410"
	// SQL Injection Attack
	WAF_RULE_942410 WafRuleID = 942410
	// x-displayName: "942420"
	// Restricted SQL Character Anomaly Detection (cookies): # of special characters exceeded (8)
	WAF_RULE_942420 WafRuleID = 942420
	// x-displayName: "942421"
	// Restricted SQL Character Anomaly Detection (cookies): # of special characters exceeded (3)
	WAF_RULE_942421 WafRuleID = 942421
	// x-displayName: "942430"
	// Restricted SQL Character Anomaly Detection (args): # of special characters exceeded (12)
	WAF_RULE_942430 WafRuleID = 942430
	// x-displayName: "942431"
	// Restricted SQL Character Anomaly Detection (args): # of special characters exceeded (6)
	WAF_RULE_942431 WafRuleID = 942431
	// x-displayName: "942432"
	// Restricted SQL Character Anomaly Detection (args): # of special characters exceeded (2)
	WAF_RULE_942432 WafRuleID = 942432
	// x-displayName: "942440"
	// SQL Comment Sequence Detected.
	WAF_RULE_942440 WafRuleID = 942440
	// x-displayName: "942450"
	// SQL Hex Encoding Identified
	WAF_RULE_942450 WafRuleID = 942450
	// x-displayName: "942460"
	// Meta-Character Anomaly Detection Alert - Repetitive Non-Word Characters
	WAF_RULE_942460 WafRuleID = 942460
	// x-displayName: "942470"
	// SQL Injection Attack
	WAF_RULE_942470 WafRuleID = 942470
	// x-displayName: "942480"
	// SQL Injection Attack
	WAF_RULE_942480 WafRuleID = 942480
	// x-displayName: "942490"
	// Detects classic SQL injection probings 3/3
	WAF_RULE_942490 WafRuleID = 942490
	// x-displayName: "943100"
	// Possible Session Fixation Attack: Setting Cookie Values in HTML
	WAF_RULE_943100 WafRuleID = 943100
	// x-displayName: "943110"
	// Possible Session Fixation Attack: SessionID Parameter Name with Off-Domain Referer
	WAF_RULE_943110 WafRuleID = 943110
	// x-displayName: "943120"
	// Possible Session Fixation Attack: SessionID Parameter Name with No Referer
	WAF_RULE_943120 WafRuleID = 943120
	// x-displayName: "944100"
	// Remote Command Execution: Suspicious Java class detected
	WAF_RULE_944100 WafRuleID = 944100
	// x-displayName: "944110"
	// Remote Command Execution: Java process spawn (CVE-2017-9805)
	WAF_RULE_944110 WafRuleID = 944110
	// x-displayName: "944120"
	// Remote Command Execution: Java serialization (CVE-2015-5842)
	WAF_RULE_944120 WafRuleID = 944120
	// x-displayName: "944130"
	// Suspicious Java class detected
	WAF_RULE_944130 WafRuleID = 944130
	// x-displayName: "944200"
	// Magic bytes Detected, probable java serialization in use
	WAF_RULE_944200 WafRuleID = 944200
	// x-displayName: "944210"
	// Magic bytes Detected Base64 Encoded, probable java serialization in use
	WAF_RULE_944210 WafRuleID = 944210
	// x-displayName: "944240"
	// Remote Command Execution: Java serialization (CVE-2015-5842)
	WAF_RULE_944240 WafRuleID = 944240
	// x-displayName: "944250"
	// Remote Command Execution: Suspicious Java method detected
	WAF_RULE_944250 WafRuleID = 944250
	// x-displayName: "944300"
	// Base64 encoded string matched suspicious keyword
	WAF_RULE_944300 WafRuleID = 944300
	// x-displayName: "950100"
	// The Application Returned a 500-Level Status Code
	WAF_RULE_950100 WafRuleID = 950100
	// x-displayName: "950130"
	// Directory Listing
	WAF_RULE_950130 WafRuleID = 950130
	// x-displayName: "951110"
	// Microsoft Access SQL Information Leakage
	WAF_RULE_951110 WafRuleID = 951110
	// x-displayName: "951120"
	// Oracle SQL Information Leakage
	WAF_RULE_951120 WafRuleID = 951120
	// x-displayName: "951130"
	// DB2 SQL Information Leakage
	WAF_RULE_951130 WafRuleID = 951130
	// x-displayName: "951140"
	// EMC SQL Information Leakage
	WAF_RULE_951140 WafRuleID = 951140
	// x-displayName: "951150"
	// firebird SQL Information Leakage
	WAF_RULE_951150 WafRuleID = 951150
	// x-displayName: "951160"
	// Frontbase SQL Information Leakage
	WAF_RULE_951160 WafRuleID = 951160
	// x-displayName: "951170"
	// hsqldb SQL Information Leakage
	WAF_RULE_951170 WafRuleID = 951170
	// x-displayName: "951180"
	// informix SQL Information Leakage
	WAF_RULE_951180 WafRuleID = 951180
	// x-displayName: "951190"
	// ingres SQL Information Leakage
	WAF_RULE_951190 WafRuleID = 951190
	// x-displayName: "951200"
	// interbase SQL Information Leakage
	WAF_RULE_951200 WafRuleID = 951200
	// x-displayName: "951210"
	// maxDB SQL Information Leakage
	WAF_RULE_951210 WafRuleID = 951210
	// x-displayName: "951220"
	// mssql SQL Information Leakage
	WAF_RULE_951220 WafRuleID = 951220
	// x-displayName: "951230"
	// mysql SQL Information Leakage
	WAF_RULE_951230 WafRuleID = 951230
	// x-displayName: "951240"
	// postgres SQL Information Leakage
	WAF_RULE_951240 WafRuleID = 951240
	// x-displayName: "951250"
	// sqlite SQL Information Leakage
	WAF_RULE_951250 WafRuleID = 951250
	// x-displayName: "951260"
	// Sybase SQL Information Leakage
	WAF_RULE_951260 WafRuleID = 951260
	// x-displayName: "952100"
	// Java Source Code Leakage
	WAF_RULE_952100 WafRuleID = 952100
	// x-displayName: "952110"
	// Java Errors
	WAF_RULE_952110 WafRuleID = 952110
	// x-displayName: "953100"
	// PHP Information Leakage
	WAF_RULE_953100 WafRuleID = 953100
	// x-displayName: "953110"
	// PHP source code leakage
	WAF_RULE_953110 WafRuleID = 953110
	// x-displayName: "953120"
	// PHP source code leakage
	WAF_RULE_953120 WafRuleID = 953120
	// x-displayName: "954100"
	// Disclosure of IIS install location
	WAF_RULE_954100 WafRuleID = 954100
	// x-displayName: "954110"
	// Application Availability Error
	WAF_RULE_954110 WafRuleID = 954110
	// x-displayName: "954120"
	// IIS Information Leakage
	WAF_RULE_954120 WafRuleID = 954120
	// x-displayName: "954130"
	// IIS Information Leakage
	WAF_RULE_954130 WafRuleID = 954130
	// x-displayName: "4295001"
	// Enable Drupal specific CRS exclusions
	WAF_RULE_4295001 WafRuleID = 4295001
	// x-displayName: "4295002"
	// Enable Wordpress specific CRS exclusions
	WAF_RULE_4295002 WafRuleID = 4295002
	// x-displayName: "4295003"
	// Enable Cpanel specific CRS exclusions
	WAF_RULE_4295003 WafRuleID = 4295003
	// x-displayName: "4295004"
	// Enable Dokuwiki specific CRS exclusions
	WAF_RULE_4295004 WafRuleID = 4295004
	// x-displayName: "4295005"
	// Enable Nextcloud specific CRS exclusions
	WAF_RULE_4295005 WafRuleID = 4295005
	// x-displayName: "4295006"
	// Enable Xenforo specific CRS exclusions
	WAF_RULE_4295006 WafRuleID = 4295006
)

var WafRuleID_name = map[int32]string{
	0:       "WAF_RULE_ALL",
	910000:  "WAF_RULE_910000",
	910100:  "WAF_RULE_910100",
	910150:  "WAF_RULE_910150",
	910160:  "WAF_RULE_910160",
	910170:  "WAF_RULE_910170",
	910180:  "WAF_RULE_910180",
	911100:  "WAF_RULE_911100",
	912120:  "WAF_RULE_912120",
	913100:  "WAF_RULE_913100",
	913101:  "WAF_RULE_913101",
	913102:  "WAF_RULE_913102",
	913110:  "WAF_RULE_913110",
	913120:  "WAF_RULE_913120",
	920100:  "WAF_RULE_920100",
	920120:  "WAF_RULE_920120",
	920121:  "WAF_RULE_920121",
	920130:  "WAF_RULE_920130",
	920140:  "WAF_RULE_920140",
	920160:  "WAF_RULE_920160",
	920170:  "WAF_RULE_920170",
	920171:  "WAF_RULE_920171",
	920180:  "WAF_RULE_920180",
	920190:  "WAF_RULE_920190",
	920200:  "WAF_RULE_920200",
	920201:  "WAF_RULE_920201",
	920202:  "WAF_RULE_920202",
	920210:  "WAF_RULE_920210",
	920220:  "WAF_RULE_920220",
	920230:  "WAF_RULE_920230",
	920240:  "WAF_RULE_920240",
	920250:  "WAF_RULE_920250",
	920260:  "WAF_RULE_920260",
	920270:  "WAF_RULE_920270",
	920271:  "WAF_RULE_920271",
	920272:  "WAF_RULE_920272",
	920273:  "WAF_RULE_920273",
	920274:  "WAF_RULE_920274",
	920341:  "WAF_RULE_920341",
	920350:  "WAF_RULE_920350",
	920360:  "WAF_RULE_920360",
	920370:  "WAF_RULE_920370",
	920380:  "WAF_RULE_920380",
	920390:  "WAF_RULE_920390",
	920400:  "WAF_RULE_920400",
	920410:  "WAF_RULE_920410",
	920420:  "WAF_RULE_920420",
	920430:  "WAF_RULE_920430",
	920440:  "WAF_RULE_920440",
	920450:  "WAF_RULE_920450",
	920460:  "WAF_RULE_920460",
	920470:  "WAF_RULE_920470",
	920480:  "WAF_RULE_920480",
	921110:  "WAF_RULE_921110",
	921120:  "WAF_RULE_921120",
	921130:  "WAF_RULE_921130",
	921140:  "WAF_RULE_921140",
	921150:  "WAF_RULE_921150",
	921151:  "WAF_RULE_921151",
	921160:  "WAF_RULE_921160",
	930100:  "WAF_RULE_930100",
	930110:  "WAF_RULE_930110",
	930120:  "WAF_RULE_930120",
	930130:  "WAF_RULE_930130",
	931100:  "WAF_RULE_931100",
	931110:  "WAF_RULE_931110",
	931120:  "WAF_RULE_931120",
	931130:  "WAF_RULE_931130",
	932100:  "WAF_RULE_932100",
	932105:  "WAF_RULE_932105",
	932106:  "WAF_RULE_932106",
	932110:  "WAF_RULE_932110",
	932115:  "WAF_RULE_932115",
	932120:  "WAF_RULE_932120",
	932130:  "WAF_RULE_932130",
	932140:  "WAF_RULE_932140",
	932150:  "WAF_RULE_932150",
	932160:  "WAF_RULE_932160",
	932170:  "WAF_RULE_932170",
	932171:  "WAF_RULE_932171",
	932180:  "WAF_RULE_932180",
	932190:  "WAF_RULE_932190",
	933100:  "WAF_RULE_933100",
	933110:  "WAF_RULE_933110",
	933111:  "WAF_RULE_933111",
	933120:  "WAF_RULE_933120",
	933130:  "WAF_RULE_933130",
	933131:  "WAF_RULE_933131",
	933140:  "WAF_RULE_933140",
	933150:  "WAF_RULE_933150",
	933151:  "WAF_RULE_933151",
	933160:  "WAF_RULE_933160",
	933161:  "WAF_RULE_933161",
	933170:  "WAF_RULE_933170",
	933180:  "WAF_RULE_933180",
	933190:  "WAF_RULE_933190",
	941100:  "WAF_RULE_941100",
	941101:  "WAF_RULE_941101",
	941110:  "WAF_RULE_941110",
	941120:  "WAF_RULE_941120",
	941130:  "WAF_RULE_941130",
	941140:  "WAF_RULE_941140",
	941150:  "WAF_RULE_941150",
	941160:  "WAF_RULE_941160",
	941170:  "WAF_RULE_941170",
	941180:  "WAF_RULE_941180",
	941190:  "WAF_RULE_941190",
	941200:  "WAF_RULE_941200",
	941210:  "WAF_RULE_941210",
	941220:  "WAF_RULE_941220",
	941230:  "WAF_RULE_941230",
	941240:  "WAF_RULE_941240",
	941250:  "WAF_RULE_941250",
	941260:  "WAF_RULE_941260",
	941270:  "WAF_RULE_941270",
	941280:  "WAF_RULE_941280",
	941290:  "WAF_RULE_941290",
	941300:  "WAF_RULE_941300",
	941310:  "WAF_RULE_941310",
	941320:  "WAF_RULE_941320",
	941330:  "WAF_RULE_941330",
	941340:  "WAF_RULE_941340",
	941350:  "WAF_RULE_941350",
	942100:  "WAF_RULE_942100",
	942110:  "WAF_RULE_942110",
	942120:  "WAF_RULE_942120",
	942130:  "WAF_RULE_942130",
	942140:  "WAF_RULE_942140",
	942150:  "WAF_RULE_942150",
	942160:  "WAF_RULE_942160",
	942170:  "WAF_RULE_942170",
	942180:  "WAF_RULE_942180",
	942190:  "WAF_RULE_942190",
	942200:  "WAF_RULE_942200",
	942210:  "WAF_RULE_942210",
	942220:  "WAF_RULE_942220",
	942230:  "WAF_RULE_942230",
	942240:  "WAF_RULE_942240",
	942250:  "WAF_RULE_942250",
	942251:  "WAF_RULE_942251",
	942260:  "WAF_RULE_942260",
	942270:  "WAF_RULE_942270",
	942280:  "WAF_RULE_942280",
	942290:  "WAF_RULE_942290",
	942300:  "WAF_RULE_942300",
	942310:  "WAF_RULE_942310",
	942320:  "WAF_RULE_942320",
	942330:  "WAF_RULE_942330",
	942340:  "WAF_RULE_942340",
	942350:  "WAF_RULE_942350",
	942360:  "WAF_RULE_942360",
	942361:  "WAF_RULE_942361",
	942370:  "WAF_RULE_942370",
	942380:  "WAF_RULE_942380",
	942390:  "WAF_RULE_942390",
	942400:  "WAF_RULE_942400",
	942410:  "WAF_RULE_942410",
	942420:  "WAF_RULE_942420",
	942421:  "WAF_RULE_942421",
	942430:  "WAF_RULE_942430",
	942431:  "WAF_RULE_942431",
	942432:  "WAF_RULE_942432",
	942440:  "WAF_RULE_942440",
	942450:  "WAF_RULE_942450",
	942460:  "WAF_RULE_942460",
	942470:  "WAF_RULE_942470",
	942480:  "WAF_RULE_942480",
	942490:  "WAF_RULE_942490",
	943100:  "WAF_RULE_943100",
	943110:  "WAF_RULE_943110",
	943120:  "WAF_RULE_943120",
	944100:  "WAF_RULE_944100",
	944110:  "WAF_RULE_944110",
	944120:  "WAF_RULE_944120",
	944130:  "WAF_RULE_944130",
	944200:  "WAF_RULE_944200",
	944210:  "WAF_RULE_944210",
	944240:  "WAF_RULE_944240",
	944250:  "WAF_RULE_944250",
	944300:  "WAF_RULE_944300",
	950100:  "WAF_RULE_950100",
	950130:  "WAF_RULE_950130",
	951110:  "WAF_RULE_951110",
	951120:  "WAF_RULE_951120",
	951130:  "WAF_RULE_951130",
	951140:  "WAF_RULE_951140",
	951150:  "WAF_RULE_951150",
	951160:  "WAF_RULE_951160",
	951170:  "WAF_RULE_951170",
	951180:  "WAF_RULE_951180",
	951190:  "WAF_RULE_951190",
	951200:  "WAF_RULE_951200",
	951210:  "WAF_RULE_951210",
	951220:  "WAF_RULE_951220",
	951230:  "WAF_RULE_951230",
	951240:  "WAF_RULE_951240",
	951250:  "WAF_RULE_951250",
	951260:  "WAF_RULE_951260",
	952100:  "WAF_RULE_952100",
	952110:  "WAF_RULE_952110",
	953100:  "WAF_RULE_953100",
	953110:  "WAF_RULE_953110",
	953120:  "WAF_RULE_953120",
	954100:  "WAF_RULE_954100",
	954110:  "WAF_RULE_954110",
	954120:  "WAF_RULE_954120",
	954130:  "WAF_RULE_954130",
	4295001: "WAF_RULE_4295001",
	4295002: "WAF_RULE_4295002",
	4295003: "WAF_RULE_4295003",
	4295004: "WAF_RULE_4295004",
	4295005: "WAF_RULE_4295005",
	4295006: "WAF_RULE_4295006",
}

var WafRuleID_value = map[string]int32{
	"WAF_RULE_ALL":     0,
	"WAF_RULE_910000":  910000,
	"WAF_RULE_910100":  910100,
	"WAF_RULE_910150":  910150,
	"WAF_RULE_910160":  910160,
	"WAF_RULE_910170":  910170,
	"WAF_RULE_910180":  910180,
	"WAF_RULE_911100":  911100,
	"WAF_RULE_912120":  912120,
	"WAF_RULE_913100":  913100,
	"WAF_RULE_913101":  913101,
	"WAF_RULE_913102":  913102,
	"WAF_RULE_913110":  913110,
	"WAF_RULE_913120":  913120,
	"WAF_RULE_920100":  920100,
	"WAF_RULE_920120":  920120,
	"WAF_RULE_920121":  920121,
	"WAF_RULE_920130":  920130,
	"WAF_RULE_920140":  920140,
	"WAF_RULE_920160":  920160,
	"WAF_RULE_920170":  920170,
	"WAF_RULE_920171":  920171,
	"WAF_RULE_920180":  920180,
	"WAF_RULE_920190":  920190,
	"WAF_RULE_920200":  920200,
	"WAF_RULE_920201":  920201,
	"WAF_RULE_920202":  920202,
	"WAF_RULE_920210":  920210,
	"WAF_RULE_920220":  920220,
	"WAF_RULE_920230":  920230,
	"WAF_RULE_920240":  920240,
	"WAF_RULE_920250":  920250,
	"WAF_RULE_920260":  920260,
	"WAF_RULE_920270":  920270,
	"WAF_RULE_920271":  920271,
	"WAF_RULE_920272":  920272,
	"WAF_RULE_920273":  920273,
	"WAF_RULE_920274":  920274,
	"WAF_RULE_920341":  920341,
	"WAF_RULE_920350":  920350,
	"WAF_RULE_920360":  920360,
	"WAF_RULE_920370":  920370,
	"WAF_RULE_920380":  920380,
	"WAF_RULE_920390":  920390,
	"WAF_RULE_920400":  920400,
	"WAF_RULE_920410":  920410,
	"WAF_RULE_920420":  920420,
	"WAF_RULE_920430":  920430,
	"WAF_RULE_920440":  920440,
	"WAF_RULE_920450":  920450,
	"WAF_RULE_920460":  920460,
	"WAF_RULE_920470":  920470,
	"WAF_RULE_920480":  920480,
	"WAF_RULE_921110":  921110,
	"WAF_RULE_921120":  921120,
	"WAF_RULE_921130":  921130,
	"WAF_RULE_921140":  921140,
	"WAF_RULE_921150":  921150,
	"WAF_RULE_921151":  921151,
	"WAF_RULE_921160":  921160,
	"WAF_RULE_930100":  930100,
	"WAF_RULE_930110":  930110,
	"WAF_RULE_930120":  930120,
	"WAF_RULE_930130":  930130,
	"WAF_RULE_931100":  931100,
	"WAF_RULE_931110":  931110,
	"WAF_RULE_931120":  931120,
	"WAF_RULE_931130":  931130,
	"WAF_RULE_932100":  932100,
	"WAF_RULE_932105":  932105,
	"WAF_RULE_932106":  932106,
	"WAF_RULE_932110":  932110,
	"WAF_RULE_932115":  932115,
	"WAF_RULE_932120":  932120,
	"WAF_RULE_932130":  932130,
	"WAF_RULE_932140":  932140,
	"WAF_RULE_932150":  932150,
	"WAF_RULE_932160":  932160,
	"WAF_RULE_932170":  932170,
	"WAF_RULE_932171":  932171,
	"WAF_RULE_932180":  932180,
	"WAF_RULE_932190":  932190,
	"WAF_RULE_933100":  933100,
	"WAF_RULE_933110":  933110,
	"WAF_RULE_933111":  933111,
	"WAF_RULE_933120":  933120,
	"WAF_RULE_933130":  933130,
	"WAF_RULE_933131":  933131,
	"WAF_RULE_933140":  933140,
	"WAF_RULE_933150":  933150,
	"WAF_RULE_933151":  933151,
	"WAF_RULE_933160":  933160,
	"WAF_RULE_933161":  933161,
	"WAF_RULE_933170":  933170,
	"WAF_RULE_933180":  933180,
	"WAF_RULE_933190":  933190,
	"WAF_RULE_941100":  941100,
	"WAF_RULE_941101":  941101,
	"WAF_RULE_941110":  941110,
	"WAF_RULE_941120":  941120,
	"WAF_RULE_941130":  941130,
	"WAF_RULE_941140":  941140,
	"WAF_RULE_941150":  941150,
	"WAF_RULE_941160":  941160,
	"WAF_RULE_941170":  941170,
	"WAF_RULE_941180":  941180,
	"WAF_RULE_941190":  941190,
	"WAF_RULE_941200":  941200,
	"WAF_RULE_941210":  941210,
	"WAF_RULE_941220":  941220,
	"WAF_RULE_941230":  941230,
	"WAF_RULE_941240":  941240,
	"WAF_RULE_941250":  941250,
	"WAF_RULE_941260":  941260,
	"WAF_RULE_941270":  941270,
	"WAF_RULE_941280":  941280,
	"WAF_RULE_941290":  941290,
	"WAF_RULE_941300":  941300,
	"WAF_RULE_941310":  941310,
	"WAF_RULE_941320":  941320,
	"WAF_RULE_941330":  941330,
	"WAF_RULE_941340":  941340,
	"WAF_RULE_941350":  941350,
	"WAF_RULE_942100":  942100,
	"WAF_RULE_942110":  942110,
	"WAF_RULE_942120":  942120,
	"WAF_RULE_942130":  942130,
	"WAF_RULE_942140":  942140,
	"WAF_RULE_942150":  942150,
	"WAF_RULE_942160":  942160,
	"WAF_RULE_942170":  942170,
	"WAF_RULE_942180":  942180,
	"WAF_RULE_942190":  942190,
	"WAF_RULE_942200":  942200,
	"WAF_RULE_942210":  942210,
	"WAF_RULE_942220":  942220,
	"WAF_RULE_942230":  942230,
	"WAF_RULE_942240":  942240,
	"WAF_RULE_942250":  942250,
	"WAF_RULE_942251":  942251,
	"WAF_RULE_942260":  942260,
	"WAF_RULE_942270":  942270,
	"WAF_RULE_942280":  942280,
	"WAF_RULE_942290":  942290,
	"WAF_RULE_942300":  942300,
	"WAF_RULE_942310":  942310,
	"WAF_RULE_942320":  942320,
	"WAF_RULE_942330":  942330,
	"WAF_RULE_942340":  942340,
	"WAF_RULE_942350":  942350,
	"WAF_RULE_942360":  942360,
	"WAF_RULE_942361":  942361,
	"WAF_RULE_942370":  942370,
	"WAF_RULE_942380":  942380,
	"WAF_RULE_942390":  942390,
	"WAF_RULE_942400":  942400,
	"WAF_RULE_942410":  942410,
	"WAF_RULE_942420":  942420,
	"WAF_RULE_942421":  942421,
	"WAF_RULE_942430":  942430,
	"WAF_RULE_942431":  942431,
	"WAF_RULE_942432":  942432,
	"WAF_RULE_942440":  942440,
	"WAF_RULE_942450":  942450,
	"WAF_RULE_942460":  942460,
	"WAF_RULE_942470":  942470,
	"WAF_RULE_942480":  942480,
	"WAF_RULE_942490":  942490,
	"WAF_RULE_943100":  943100,
	"WAF_RULE_943110":  943110,
	"WAF_RULE_943120":  943120,
	"WAF_RULE_944100":  944100,
	"WAF_RULE_944110":  944110,
	"WAF_RULE_944120":  944120,
	"WAF_RULE_944130":  944130,
	"WAF_RULE_944200":  944200,
	"WAF_RULE_944210":  944210,
	"WAF_RULE_944240":  944240,
	"WAF_RULE_944250":  944250,
	"WAF_RULE_944300":  944300,
	"WAF_RULE_950100":  950100,
	"WAF_RULE_950130":  950130,
	"WAF_RULE_951110":  951110,
	"WAF_RULE_951120":  951120,
	"WAF_RULE_951130":  951130,
	"WAF_RULE_951140":  951140,
	"WAF_RULE_951150":  951150,
	"WAF_RULE_951160":  951160,
	"WAF_RULE_951170":  951170,
	"WAF_RULE_951180":  951180,
	"WAF_RULE_951190":  951190,
	"WAF_RULE_951200":  951200,
	"WAF_RULE_951210":  951210,
	"WAF_RULE_951220":  951220,
	"WAF_RULE_951230":  951230,
	"WAF_RULE_951240":  951240,
	"WAF_RULE_951250":  951250,
	"WAF_RULE_951260":  951260,
	"WAF_RULE_952100":  952100,
	"WAF_RULE_952110":  952110,
	"WAF_RULE_953100":  953100,
	"WAF_RULE_953110":  953110,
	"WAF_RULE_953120":  953120,
	"WAF_RULE_954100":  954100,
	"WAF_RULE_954110":  954110,
	"WAF_RULE_954120":  954120,
	"WAF_RULE_954130":  954130,
	"WAF_RULE_4295001": 4295001,
	"WAF_RULE_4295002": 4295002,
	"WAF_RULE_4295003": 4295003,
	"WAF_RULE_4295004": 4295004,
	"WAF_RULE_4295005": 4295005,
	"WAF_RULE_4295006": 4295006,
}

func (WafRuleID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5796b6839475ee5, []int{0}
}

// GlobalSpecType
//
// x-displayName: "WAF Rule List Specification"
type GlobalSpecType struct {
	// WAF Rule List
	//
	// x-displayName: "WAF Rule List"
	// List of rule ids
	RuleIds []WafRuleID `protobuf:"varint,1,rep,packed,name=rule_ids,json=ruleIds,proto3,enum=ves.io.schema.waf_rule_list.WafRuleID" json:"rule_ids,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5796b6839475ee5, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetRuleIds() []WafRuleID {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

// Create WAF Rule List
//
// x-displayName: "Create WAF Rule List"
// WAF object is used to create a WAF instance associated with a VHOST or ROUTE
// A WAF instance can be shared by multiple "virtual_host" or "route"
// A "virtual_host" or "route" shall refer to one WAF instance
type CreateSpecType struct {
	RuleIds []WafRuleID `protobuf:"varint,1,rep,packed,name=rule_ids,json=ruleIds,proto3,enum=ves.io.schema.waf_rule_list.WafRuleID" json:"rule_ids,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5796b6839475ee5, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetRuleIds() []WafRuleID {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

// Replace WAF Rule List
//
// x-displayName: "Replace WAF Rule List"
// Update the configuration by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write.
type ReplaceSpecType struct {
	RuleIds []WafRuleID `protobuf:"varint,1,rep,packed,name=rule_ids,json=ruleIds,proto3,enum=ves.io.schema.waf_rule_list.WafRuleID" json:"rule_ids,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5796b6839475ee5, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetRuleIds() []WafRuleID {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

// Get WAF Rule List
//
// x-displayName: "Get WAF Rule List"
// Get WAF will read the configuration from namespace metadata.namespace
type GetSpecType struct {
	RuleIds []WafRuleID `protobuf:"varint,1,rep,packed,name=rule_ids,json=ruleIds,proto3,enum=ves.io.schema.waf_rule_list.WafRuleID" json:"rule_ids,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5796b6839475ee5, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetRuleIds() []WafRuleID {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.waf_rule_list.WafRuleID", WafRuleID_name, WafRuleID_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.waf_rule_list.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.waf_rule_list.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.waf_rule_list.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.waf_rule_list.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/waf_rule_list/types.proto", fileDescriptor_d5796b6839475ee5)
}

var fileDescriptor_d5796b6839475ee5 = []byte{
	// 1419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0xd8, 0x5b, 0x68, 0x1c, 0xd7,
	0x19, 0x07, 0x70, 0xad, 0xd3, 0xeb, 0xb6, 0x38, 0xff, 0x8a, 0x5e, 0x52, 0xa5, 0x2c, 0xc6, 0x0f,
	0x69, 0x29, 0x78, 0xf7, 0x7f, 0xe6, 0xb6, 0xbb, 0x7e, 0x28, 0x38, 0xbd, 0x84, 0x80, 0x5f, 0xea,
	0xb6, 0x18, 0xfa, 0x22, 0x56, 0xd2, 0x48, 0x59, 0xba, 0xee, 0x2e, 0xab, 0x95, 0xd2, 0xbc, 0x05,
	0x11, 0xd4, 0xc4, 0x11, 0x46, 0xa8, 0x8a, 0x9a, 0x06, 0x55, 0x15, 0xc1, 0x18, 0xd7, 0x55, 0x83,
	0x09, 0xc2, 0x38, 0x4a, 0x50, 0x55, 0xb7, 0x55, 0x85, 0xea, 0x24, 0x1b, 0xa1, 0x04, 0x57, 0x75,
	0x54, 0x79, 0x2d, 0x8a, 0xeb, 0x16, 0x21, 0x84, 0x69, 0x55, 0x23, 0x4c, 0x99, 0xb1, 0x23, 0xaa,
	0x3d, 0x7f, 0xfa, 0x10, 0xf0, 0xdb, 0xcc, 0xef, 0x3b, 0x7b, 0xbe, 0x9d, 0xe1, 0xcc, 0xf7, 0x9d,
	0x99, 0xe4, 0x97, 0xfb, 0xc3, 0xde, 0x74, 0xb1, 0x9c, 0xe9, 0xed, 0x7c, 0x22, 0x3c, 0x51, 0xc8,
	0x3c, 0x59, 0xe8, 0x6e, 0xaf, 0xf6, 0x95, 0xc2, 0xf6, 0x52, 0xb1, 0xb7, 0x96, 0xa9, 0x3d, 0x55,
	0x09, 0x7b, 0xd3, 0x95, 0x6a, 0xb9, 0x56, 0x6e, 0x7d, 0xf8, 0xee, 0xc0, 0xf4, 0xdd, 0x81, 0xe9,
	0x3d, 0x03, 0xdb, 0x0e, 0xf5, 0x14, 0x6b, 0x4f, 0xf4, 0x75, 0xa4, 0x3b, 0xcb, 0x27, 0x32, 0x3d,
	0xe5, 0x9e, 0x72, 0x26, 0xfe, 0x4d, 0x47, 0x5f, 0x77, 0x7c, 0x16, 0x9f, 0xc4, 0x47, 0x77, 0xe7,
	0x6a, 0x7b, 0x78, 0x6f, 0xd2, 0x72, 0xa5, 0x56, 0x2c, 0xff, 0xf0, 0x5e, 0xa2, 0xb6, 0x2f, 0xee,
	0x0d, 0xfe, 0xcf, 0x7f, 0x68, 0xfb, 0xd2, 0xde, 0x50, 0x7f, 0xa1, 0x54, 0xec, 0x2a, 0xd4, 0xc2,
	0x7b, 0xd1, 0x03, 0x4d, 0xd1, 0x62, 0xf8, 0x64, 0xfb, 0x9e, 0xa9, 0x0f, 0x16, 0x93, 0xfb, 0x1f,
	0x2b, 0x95, 0x3b, 0x0a, 0xa5, 0xef, 0x54, 0xc2, 0xce, 0xef, 0x3e, 0x55, 0x09, 0x5b, 0x8f, 0x27,
	0x3f, 0x11, 0x5f, 0x45, 0xb1, 0xab, 0xf7, 0xa1, 0xc4, 0x81, 0x07, 0xbe, 0xb2, 0xdf, 0x79, 0x24,
	0xfd, 0x7f, 0x2e, 0x34, 0x7d, 0xbc, 0xd0, 0x7d, 0xac, 0xaf, 0x14, 0x3e, 0xfe, 0x8d, 0x47, 0x3f,
	0x3b, 0xf3, 0xf7, 0xb9, 0x07, 0x3e, 0x3a, 0x92, 0xd8, 0x87, 0x03, 0x1f, 0x1c, 0x3d, 0x94, 0x38,
	0xf6, 0xf1, 0x68, 0xe8, 0xe3, 0x5d, 0xbd, 0x07, 0xbb, 0x93, 0xfb, 0xbf, 0x5e, 0x0d, 0x0b, 0xb5,
	0x70, 0x37, 0xd5, 0x91, 0x0f, 0x9b, 0x6a, 0x77, 0xd2, 0xc3, 0x9f, 0x59, 0xfc, 0x5a, 0xd3, 0x05,
	0x1c, 0xec, 0x49, 0x3e, 0x78, 0x2c, 0xac, 0x94, 0x0a, 0x9d, 0xf7, 0x3b, 0x51, 0x67, 0xf2, 0x53,
	0x8f, 0x85, 0xb5, 0xfb, 0x9b, 0xe4, 0xab, 0xaf, 0x3f, 0x92, 0xfc, 0xe4, 0xee, 0xc8, 0xd6, 0xcf,
	0x27, 0x3f, 0x7d, 0xfc, 0xc8, 0xb7, 0xda, 0x8f, 0x7d, 0xef, 0xe8, 0x37, 0xdb, 0x8f, 0x1c, 0x3d,
	0x8a, 0x96, 0xb6, 0x8f, 0xcc, 0xbd, 0x9e, 0x48, 0xb4, 0x7e, 0x2e, 0xf9, 0xe0, 0xae, 0xe7, 0x0d,
	0x49, 0xe2, 0xfc, 0x1f, 0xb2, 0xcd, 0x6c, 0x48, 0x8c, 0xce, 0xdb, 0xec, 0x13, 0xf3, 0x82, 0x03,
	0xa2, 0x2e, 0x38, 0x4b, 0xac, 0x08, 0xce, 0x11, 0xeb, 0x16, 0x9b, 0x28, 0xe5, 0xce, 0x9b, 0xcd,
	0xec, 0x18, 0x87, 0xd8, 0x7e, 0xb7, 0x99, 0xdd, 0x68, 0xf4, 0xe5, 0xf7, 0x05, 0x1b, 0xbc, 0xa9,
	0xd8, 0xc1, 0x5b, 0x82, 0x0d, 0xf1, 0x9e, 0x60, 0x87, 0x58, 0x6b, 0x66, 0x27, 0xbe, 0x27, 0xa7,
	0x47, 0x73, 0x16, 0x3b, 0xc4, 0x45, 0xc5, 0x06, 0xaf, 0x09, 0x76, 0x89, 0x4b, 0x82, 0x3d, 0xe2,
	0xb2, 0xe0, 0x80, 0x58, 0x13, 0x9c, 0x25, 0x6e, 0x2a, 0x36, 0xf8, 0x87, 0xe0, 0x1c, 0x71, 0x4b,
	0x70, 0x9e, 0xb8, 0x63, 0xb3, 0x43, 0xe2, 0xd9, 0x17, 0x04, 0x1b, 0x3c, 0xa7, 0xd8, 0xc1, 0x49,
	0xc1, 0x86, 0x18, 0x11, 0xec, 0x10, 0xe3, 0x82, 0x5d, 0xe2, 0x8c, 0x60, 0x8f, 0x38, 0x2f, 0xd8,
	0x27, 0x66, 0x04, 0x07, 0xc4, 0xef, 0x05, 0x67, 0x89, 0xb7, 0x14, 0x1b, 0xbc, 0xad, 0xd8, 0x41,
	0x5d, 0xb1, 0x8b, 0x77, 0x14, 0x7b, 0x58, 0xb2, 0xd9, 0xf5, 0x0c, 0x5e, 0x18, 0xb3, 0xd9, 0x27,
	0x26, 0x04, 0x07, 0xc4, 0x59, 0xc1, 0x59, 0xe2, 0x55, 0xc1, 0x39, 0xe2, 0x0d, 0xc1, 0x79, 0x62,
	0xde, 0x66, 0x8f, 0x44, 0x5d, 0xb0, 0x21, 0x56, 0x04, 0x3b, 0xc4, 0xba, 0x60, 0x97, 0xd8, 0x10,
	0xec, 0x11, 0xdb, 0x82, 0x7d, 0x62, 0xe0, 0xa7, 0x36, 0x07, 0xc4, 0x90, 0xe0, 0x2c, 0x31, 0x26,
	0x38, 0x47, 0x4c, 0x5a, 0x1c, 0x95, 0x08, 0x8c, 0x8d, 0xdb, 0xec, 0x10, 0x93, 0x82, 0x5d, 0xe2,
	0x9c, 0x60, 0x8f, 0x98, 0x16, 0xec, 0x13, 0xb3, 0x8a, 0x0d, 0x7e, 0x23, 0x38, 0x20, 0x16, 0x9a,
	0xd9, 0x8d, 0x2b, 0xc4, 0x74, 0xc3, 0x66, 0x43, 0xcc, 0x0a, 0x76, 0x88, 0x05, 0xc1, 0x2e, 0xb1,
	0x64, 0x71, 0x5c, 0x1e, 0xc7, 0x6f, 0xda, 0x6c, 0x88, 0x33, 0x82, 0x1d, 0xe2, 0xbc, 0x60, 0x97,
	0x98, 0xb1, 0xd8, 0x89, 0xe6, 0x7e, 0x66, 0x4b, 0xb0, 0x8f, 0xe7, 0x14, 0x07, 0x38, 0x29, 0xd8,
	0x10, 0xa7, 0x14, 0xfb, 0xf8, 0x89, 0x60, 0x87, 0x78, 0x51, 0xb0, 0x4b, 0xbc, 0x2c, 0xd8, 0x23,
	0xa6, 0x04, 0xfb, 0xc4, 0x05, 0xc1, 0x01, 0x31, 0x27, 0x38, 0x4b, 0x2c, 0x2a, 0x36, 0xf8, 0x93,
	0xe0, 0x1c, 0xb1, 0x2c, 0x38, 0x4f, 0xac, 0x5a, 0x1c, 0xb7, 0xa3, 0x7f, 0xfe, 0xc7, 0x66, 0x43,
	0xfc, 0x4b, 0xb1, 0xc1, 0xbf, 0x05, 0x3b, 0xc4, 0xd3, 0xb7, 0x6d, 0x76, 0x89, 0x93, 0x8a, 0x0d,
	0x9e, 0x17, 0xec, 0x11, 0xa3, 0x82, 0xa3, 0xea, 0xa3, 0xd8, 0xe0, 0x17, 0x82, 0xa3, 0xa2, 0xa4,
	0xd8, 0xe0, 0x97, 0x82, 0xa3, 0x5a, 0x25, 0x38, 0xaa, 0x55, 0x82, 0xa3, 0x5a, 0xd5, 0xcc, 0x5e,
	0xbc, 0xbe, 0xa7, 0x2e, 0xe6, 0x6d, 0x36, 0xf8, 0xb5, 0x60, 0x43, 0x5c, 0x10, 0xec, 0x10, 0x73,
	0x82, 0x5d, 0x62, 0x51, 0xb0, 0x47, 0x2c, 0x0b, 0xf6, 0x89, 0x55, 0xc1, 0x01, 0x71, 0x43, 0x70,
	0x96, 0xd8, 0x12, 0x9c, 0x23, 0x76, 0x04, 0xe7, 0x89, 0xc1, 0xd7, 0x2c, 0x8e, 0x9a, 0xee, 0xb0,
	0x60, 0x43, 0xbc, 0x24, 0xd8, 0x21, 0x4e, 0x0b, 0x76, 0x89, 0x57, 0x04, 0x7b, 0xc4, 0x45, 0xc1,
	0x3e, 0x71, 0x49, 0x70, 0x40, 0x5c, 0x16, 0x9c, 0x25, 0xde, 0x13, 0x9c, 0x23, 0xd6, 0x04, 0xe7,
	0x89, 0x9b, 0x36, 0xbb, 0x24, 0x6e, 0x09, 0x36, 0xc4, 0x1d, 0xc1, 0x0e, 0xf1, 0xec, 0x8c, 0xcd,
	0x2e, 0x31, 0x22, 0xd8, 0x23, 0xc6, 0x05, 0xfb, 0xc4, 0x19, 0x8b, 0xe3, 0x82, 0x37, 0x3a, 0x67,
	0xb3, 0x21, 0x26, 0x04, 0x3b, 0xc4, 0x59, 0xc1, 0x2e, 0xf1, 0xaa, 0x60, 0x8f, 0x78, 0x43, 0x70,
	0xb4, 0x75, 0x16, 0x1c, 0x6d, 0x9d, 0x05, 0x47, 0x5b, 0x67, 0xc1, 0xd1, 0xd6, 0x59, 0x70, 0x9e,
	0xd8, 0xb0, 0x39, 0x5a, 0x55, 0xdb, 0x82, 0x0d, 0x31, 0xf0, 0x5b, 0x9b, 0x1d, 0x62, 0x48, 0xb0,
	0x4b, 0x8c, 0x09, 0xf6, 0x88, 0x49, 0xc1, 0x3e, 0x71, 0x4e, 0xb1, 0xc1, 0xaf, 0x04, 0x07, 0xc4,
	0xb4, 0xe0, 0x2c, 0x31, 0x2b, 0x38, 0x47, 0x2c, 0x08, 0xce, 0x13, 0x4b, 0x36, 0x47, 0x8b, 0xed,
	0xaa, 0x60, 0x43, 0xfc, 0x4d, 0xb0, 0x43, 0x6c, 0x0a, 0x76, 0x89, 0xdb, 0x82, 0x3d, 0xe2, 0x99,
	0x4b, 0x36, 0xfb, 0xc4, 0x29, 0xc1, 0x01, 0xf1, 0xa2, 0x62, 0x83, 0x9f, 0x09, 0xce, 0x12, 0x2f,
	0x0b, 0xce, 0x11, 0x53, 0x82, 0xf3, 0xc4, 0x05, 0x9b, 0xa3, 0x8d, 0xdf, 0x9c, 0x60, 0x43, 0x2c,
	0x0a, 0x76, 0x88, 0x65, 0xc5, 0x06, 0xef, 0x0a, 0x76, 0x89, 0x55, 0xc5, 0x06, 0x7f, 0x55, 0xec,
	0x60, 0x4d, 0xb0, 0x47, 0xdc, 0x10, 0xec, 0x13, 0x5b, 0x82, 0x03, 0x62, 0x47, 0x70, 0x96, 0x18,
	0xfc, 0x9d, 0xcd, 0x39, 0x62, 0x58, 0x70, 0x9e, 0x78, 0xc9, 0xe2, 0xb8, 0x73, 0xef, 0xfc, 0xd1,
	0x66, 0x43, 0x0c, 0x2e, 0xd8, 0xec, 0x10, 0xc3, 0x16, 0x7b, 0xd1, 0x24, 0xeb, 0x6f, 0xdb, 0x6c,
	0x88, 0x0d, 0xc1, 0xd1, 0x2b, 0xad, 0x60, 0x97, 0x18, 0xa8, 0x5b, 0x1c, 0x3d, 0xc5, 0x0b, 0x82,
	0x0d, 0xb1, 0x24, 0xd8, 0x23, 0x36, 0x05, 0xfb, 0xc4, 0x6d, 0x9b, 0xa3, 0x87, 0x64, 0xea, 0x9d,
	0x26, 0xf6, 0xe3, 0x7d, 0xec, 0xf2, 0x1d, 0x9b, 0x5d, 0x62, 0xcb, 0xe2, 0xb8, 0x17, 0xcf, 0x0f,
	0x1e, 0xb6, 0xd8, 0x21, 0xea, 0x82, 0x5d, 0x62, 0x45, 0xb0, 0x47, 0xac, 0x0b, 0xf6, 0x89, 0x0d,
	0xc1, 0x01, 0xb1, 0x2d, 0x38, 0x4b, 0x0c, 0xfc, 0xd8, 0xe6, 0x1c, 0x31, 0x24, 0x38, 0x4f, 0x8c,
	0xd9, 0x1c, 0xdd, 0xef, 0x49, 0xc1, 0x86, 0x38, 0x27, 0xd8, 0x21, 0xa6, 0x05, 0xbb, 0xc4, 0xac,
	0x60, 0x8f, 0x58, 0x10, 0xec, 0x13, 0x4b, 0x82, 0x03, 0xe2, 0xaa, 0xc5, 0x71, 0xf3, 0x3a, 0x7d,
	0xca, 0x66, 0x43, 0xbc, 0x62, 0x71, 0xbc, 0xbe, 0x87, 0xc6, 0x6c, 0x8e, 0xde, 0xa5, 0x04, 0x47,
	0xef, 0x52, 0x16, 0xc7, 0xeb, 0xfb, 0xd6, 0xcf, 0x6d, 0x8e, 0x3a, 0xb7, 0xe0, 0xa8, 0x73, 0x4f,
	0xd8, 0x1c, 0x75, 0xee, 0x89, 0xc3, 0xad, 0x5f, 0x48, 0x62, 0x97, 0x3d, 0x27, 0xef, 0x93, 0x06,
	0x7f, 0x1e, 0x19, 0xdc, 0x27, 0x02, 0x0e, 0x56, 0x74, 0xc0, 0xc5, 0x5f, 0x74, 0xc0, 0xc3, 0x55,
	0x1d, 0xf0, 0xf1, 0xbe, 0x0e, 0x04, 0x58, 0x1d, 0x19, 0xdc, 0xf7, 0xe8, 0xf3, 0x89, 0xfa, 0xb5,
	0x54, 0xcb, 0x95, 0x6b, 0xa9, 0x96, 0xcd, 0x6b, 0xa9, 0xc4, 0xd3, 0x8d, 0x54, 0xe2, 0x6c, 0x23,
	0x95, 0x58, 0x68, 0xa4, 0x12, 0xf5, 0x46, 0x2a, 0x71, 0xa5, 0x91, 0x4a, 0xac, 0x35, 0x52, 0x89,
	0x1b, 0x8d, 0x54, 0xcb, 0x66, 0x23, 0x95, 0x18, 0xbe, 0x9e, 0x6a, 0xa9, 0x5f, 0x4f, 0xb5, 0x5c,
	0xb9, 0x9e, 0x6a, 0xf9, 0xfe, 0xb7, 0x7b, 0xca, 0x95, 0x1f, 0xf4, 0xa4, 0xfb, 0xcb, 0xa5, 0x5a,
	0x58, 0xad, 0x16, 0xd2, 0x7d, 0xbd, 0x99, 0xf8, 0xa0, 0xbb, 0x5c, 0x3d, 0x71, 0xa8, 0x52, 0x2d,
	0xf7, 0x17, 0xbb, 0xc2, 0xea, 0xa1, 0x0f, 0xc2, 0x99, 0x4a, 0x47, 0x4f, 0x39, 0x13, 0xfe, 0xa8,
	0x76, 0xef, 0x53, 0xab, 0xfa, 0x78, 0xdc, 0xf1, 0xb1, 0xf8, 0x9b, 0xab, 0xfb, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x51, 0x63, 0x17, 0x36, 0x62, 0x16, 0x00, 0x00,
}

func (x WafRuleID) String() string {
	s, ok := WafRuleID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RuleIds) != len(that1.RuleIds) {
		return false
	}
	for i := range this.RuleIds {
		if this.RuleIds[i] != that1.RuleIds[i] {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RuleIds) != len(that1.RuleIds) {
		return false
	}
	for i := range this.RuleIds {
		if this.RuleIds[i] != that1.RuleIds[i] {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RuleIds) != len(that1.RuleIds) {
		return false
	}
	for i := range this.RuleIds {
		if this.RuleIds[i] != that1.RuleIds[i] {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RuleIds) != len(that1.RuleIds) {
		return false
	}
	for i := range this.RuleIds {
		if this.RuleIds[i] != that1.RuleIds[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_rule_list.GlobalSpecType{")
	s = append(s, "RuleIds: "+fmt.Sprintf("%#v", this.RuleIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_rule_list.CreateSpecType{")
	s = append(s, "RuleIds: "+fmt.Sprintf("%#v", this.RuleIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_rule_list.ReplaceSpecType{")
	s = append(s, "RuleIds: "+fmt.Sprintf("%#v", this.RuleIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_rule_list.GetSpecType{")
	s = append(s, "RuleIds: "+fmt.Sprintf("%#v", this.RuleIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		dAtA2 := make([]byte, len(m.RuleIds)*10)
		var j1 int
		for _, num := range m.RuleIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		dAtA4 := make([]byte, len(m.RuleIds)*10)
		var j3 int
		for _, num := range m.RuleIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		dAtA6 := make([]byte, len(m.RuleIds)*10)
		var j5 int
		for _, num := range m.RuleIds {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTypes(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		dAtA8 := make([]byte, len(m.RuleIds)*10)
		var j7 int
		for _, num := range m.RuleIds {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTypes(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		l = 0
		for _, e := range m.RuleIds {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		l = 0
		for _, e := range m.RuleIds {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		l = 0
		for _, e := range m.RuleIds {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RuleIds) > 0 {
		l = 0
		for _, e := range m.RuleIds {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`RuleIds:` + fmt.Sprintf("%v", this.RuleIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`RuleIds:` + fmt.Sprintf("%v", this.RuleIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`RuleIds:` + fmt.Sprintf("%v", this.RuleIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`RuleIds:` + fmt.Sprintf("%v", this.RuleIds) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v WafRuleID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= WafRuleID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RuleIds = append(m.RuleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.RuleIds) == 0 {
					m.RuleIds = make([]WafRuleID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v WafRuleID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= WafRuleID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RuleIds = append(m.RuleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v WafRuleID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= WafRuleID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RuleIds = append(m.RuleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.RuleIds) == 0 {
					m.RuleIds = make([]WafRuleID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v WafRuleID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= WafRuleID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RuleIds = append(m.RuleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v WafRuleID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= WafRuleID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RuleIds = append(m.RuleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.RuleIds) == 0 {
					m.RuleIds = make([]WafRuleID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v WafRuleID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= WafRuleID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RuleIds = append(m.RuleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v WafRuleID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= WafRuleID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RuleIds = append(m.RuleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.RuleIds) == 0 {
					m.RuleIds = make([]WafRuleID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v WafRuleID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= WafRuleID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RuleIds = append(m.RuleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

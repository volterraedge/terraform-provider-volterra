// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_zone/object.proto

package dns_zone

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DNS Zone Deployment Status
//
// x-displayName: "DNS Zone Deployment Status"
// Deployment Status of DNS Zone
type DNSDeploymentStatus int32

const (
	// x-displayName: "DNS Zone Active"
	// DNS Zone is successfully deployed and active
	DNS_ZONE_ACTIVE DNSDeploymentStatus = 0
	// x-displayName: "DNS Zone Pending"
	// Deployment of DNS Zone is pending
	DNS_ZONE_PENDING DNSDeploymentStatus = 1
	// x-displayName: "DNS Zone Disabled"
	// DNS Zone has been disabled.
	DNS_ZONE_DISABLED DNSDeploymentStatus = 2
	// x-displayName: "DNS Zone Deployment Failed"
	// DNS Zone deployment encountered an error.
	DNS_ZONE_FAILED DNSDeploymentStatus = 3
)

var DNSDeploymentStatus_name = map[int32]string{
	0: "DNS_ZONE_ACTIVE",
	1: "DNS_ZONE_PENDING",
	2: "DNS_ZONE_DISABLED",
	3: "DNS_ZONE_FAILED",
}

var DNSDeploymentStatus_value = map[string]int32{
	"DNS_ZONE_ACTIVE":   0,
	"DNS_ZONE_PENDING":  1,
	"DNS_ZONE_DISABLED": 2,
	"DNS_ZONE_FAILED":   3,
}

func (DNSDeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b363da65d28addf, []int{0}
}

// DNS Zone
//
// x-displayName: "DNS Zone"
// DNS Zone object
type Object struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard object's metadata
	Metadata *schema.ObjectMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// System generated object's metadata
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// Specification of the desired behavior of the DNS Zone
	Spec *SpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Object) Reset()      { *m = Object{} }
func (*Object) ProtoMessage() {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b363da65d28addf, []int{0}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *Object) GetSpec() *SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// DNS Zone specification
//
// x-displayName: "Specification"
// Shape of the DNS Zone specification
type SpecType struct {
	// gc_spec
	//
	// x-displayName: "GC Spec"
	GcSpec *GlobalSpecType `protobuf:"bytes,2,opt,name=gc_spec,json=gcSpec,proto3" json:"gc_spec,omitempty"`
}

func (m *SpecType) Reset()      { *m = SpecType{} }
func (*SpecType) ProtoMessage() {}
func (*SpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b363da65d28addf, []int{1}
}
func (m *SpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecType.Merge(m, src)
}
func (m *SpecType) XXX_Size() int {
	return m.Size()
}
func (m *SpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecType proto.InternalMessageInfo

func (m *SpecType) GetGcSpec() *GlobalSpecType {
	if m != nil {
		return m.GcSpec
	}
	return nil
}

// DNS Zone Status
//
// x-displayName: "DNS Zone Status"
// Status DNS Zone
type DNSZoneStatus struct {
	// F5XC Nameservers
	//
	// x-displayName: "F5XC Nameservers"
	// Status of DNS domain verification process.
	VolterraNameservers []string `protobuf:"bytes,1,rep,name=volterra_nameservers,json=volterraNameservers,proto3" json:"volterra_nameservers,omitempty"`
	// DNS Zone Deployment Status
	//
	// x-displayName: "DNS Zone Deployment Status"
	// Status of DNS Zone Deployment
	DeploymentStatus DNSDeploymentStatus `protobuf:"varint,2,opt,name=deployment_status,json=deploymentStatus,proto3,enum=ves.io.schema.dns_zone.DNSDeploymentStatus" json:"deployment_status,omitempty"`
	// DNSSEC
	//
	// x-displayName: "DNSSEC"
	Dnssec *DNSSECStatus `protobuf:"bytes,3,opt,name=dnssec,proto3" json:"dnssec,omitempty"`
}

func (m *DNSZoneStatus) Reset()      { *m = DNSZoneStatus{} }
func (*DNSZoneStatus) ProtoMessage() {}
func (*DNSZoneStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b363da65d28addf, []int{2}
}
func (m *DNSZoneStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSZoneStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSZoneStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSZoneStatus.Merge(m, src)
}
func (m *DNSZoneStatus) XXX_Size() int {
	return m.Size()
}
func (m *DNSZoneStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSZoneStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DNSZoneStatus proto.InternalMessageInfo

func (m *DNSZoneStatus) GetVolterraNameservers() []string {
	if m != nil {
		return m.VolterraNameservers
	}
	return nil
}

func (m *DNSZoneStatus) GetDeploymentStatus() DNSDeploymentStatus {
	if m != nil {
		return m.DeploymentStatus
	}
	return DNS_ZONE_ACTIVE
}

func (m *DNSZoneStatus) GetDnssec() *DNSSECStatus {
	if m != nil {
		return m.Dnssec
	}
	return nil
}

// Status of DNS Zone
//
// x-displayName: "Status"
// Most recently observed status of object
type StatusObject struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard status's metadata
	Metadata *schema.StatusMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// object_refs
	//
	// x-displayName: "Config Object"
	// Reference to object for current status
	ObjectRefs []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
	// conditions
	//
	// x-displayName: "Conditions"
	// Conditions reported by various component of the system
	Conditions []*schema.ConditionType `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Verification Status
	//
	// x-displayName: "Verification Status"
	// Verification Status of the DNS domain
	VerificationStatus *DNSZoneStatus `protobuf:"bytes,4,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
}

func (m *StatusObject) Reset()      { *m = StatusObject{} }
func (*StatusObject) ProtoMessage() {}
func (*StatusObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b363da65d28addf, []int{3}
}
func (m *StatusObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatusObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusObject.Merge(m, src)
}
func (m *StatusObject) XXX_Size() int {
	return m.Size()
}
func (m *StatusObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusObject.DiscardUnknown(m)
}

var xxx_messageInfo_StatusObject proto.InternalMessageInfo

func (m *StatusObject) GetMetadata() *schema.StatusMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StatusObject) GetObjectRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.ObjectRefs
	}
	return nil
}

func (m *StatusObject) GetConditions() []*schema.ConditionType {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *StatusObject) GetVerificationStatus() *DNSZoneStatus {
	if m != nil {
		return m.VerificationStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.dns_zone.DNSDeploymentStatus", DNSDeploymentStatus_name, DNSDeploymentStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.DNSDeploymentStatus", DNSDeploymentStatus_name, DNSDeploymentStatus_value)
	proto.RegisterType((*Object)(nil), "ves.io.schema.dns_zone.Object")
	golang_proto.RegisterType((*Object)(nil), "ves.io.schema.dns_zone.Object")
	proto.RegisterType((*SpecType)(nil), "ves.io.schema.dns_zone.SpecType")
	golang_proto.RegisterType((*SpecType)(nil), "ves.io.schema.dns_zone.SpecType")
	proto.RegisterType((*DNSZoneStatus)(nil), "ves.io.schema.dns_zone.DNSZoneStatus")
	golang_proto.RegisterType((*DNSZoneStatus)(nil), "ves.io.schema.dns_zone.DNSZoneStatus")
	proto.RegisterType((*StatusObject)(nil), "ves.io.schema.dns_zone.StatusObject")
	golang_proto.RegisterType((*StatusObject)(nil), "ves.io.schema.dns_zone.StatusObject")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_zone/object.proto", fileDescriptor_0b363da65d28addf)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_zone/object.proto", fileDescriptor_0b363da65d28addf)
}

var fileDescriptor_0b363da65d28addf = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0xc7, 0x33, 0x49, 0x94, 0x2e, 0x93, 0xb2, 0x4d, 0x9d, 0x82, 0x42, 0x01, 0x2b, 0x4a, 0x01,
	0xad, 0x00, 0xdb, 0x62, 0x5b, 0x90, 0xa8, 0x68, 0x57, 0xbb, 0x71, 0x58, 0x05, 0xd2, 0x14, 0xc5,
	0x55, 0x85, 0xf6, 0x62, 0x4d, 0xec, 0x17, 0xd7, 0x10, 0x7b, 0xac, 0x99, 0xb1, 0xdb, 0x20, 0x21,
	0x21, 0x8e, 0x9c, 0xf8, 0x04, 0x88, 0x23, 0xe2, 0x4b, 0xd0, 0x72, 0xe2, 0xb8, 0xaa, 0x38, 0xac,
	0x38, 0xb1, 0xce, 0x85, 0x63, 0x3f, 0x02, 0xca, 0x38, 0x4e, 0x37, 0x51, 0xb2, 0xaa, 0x7a, 0x1b,
	0xbf, 0xf7, 0x7f, 0xbf, 0x99, 0xf7, 0xde, 0xbc, 0x31, 0xbe, 0x96, 0x00, 0xd7, 0x7d, 0x6a, 0x70,
	0xe7, 0x01, 0x04, 0xc4, 0x70, 0x43, 0x6e, 0x7f, 0x47, 0x43, 0x30, 0xe8, 0xf0, 0x1b, 0x70, 0x84,
	0x1e, 0x31, 0x2a, 0xa8, 0xf2, 0x7a, 0x26, 0xd2, 0x33, 0x91, 0x9e, 0x8b, 0xae, 0x6a, 0x9e, 0x2f,
	0x1e, 0xc4, 0x43, 0xdd, 0xa1, 0x81, 0xe1, 0x51, 0x8f, 0x1a, 0x52, 0x3e, 0x8c, 0x47, 0xf2, 0x4b,
	0x7e, 0xc8, 0x55, 0x86, 0xb9, 0xba, 0x69, 0x2f, 0x37, 0xe4, 0x1c, 0x9c, 0xb9, 0xa8, 0xb5, 0x41,
	0x24, 0x26, 0x11, 0xf0, 0xb9, 0xe6, 0xcd, 0x65, 0x0d, 0x8d, 0x84, 0x4f, 0xc3, 0xdc, 0xf9, 0xc6,
	0xb2, 0xf3, 0x6c, 0xdc, 0x0a, 0x3b, 0x01, 0x0e, 0x61, 0xb2, 0x12, 0xde, 0x5c, 0xd1, 0xf8, 0xf0,
	0xd0, 0x5e, 0x52, 0xb4, 0x7e, 0x29, 0xe3, 0xca, 0x5d, 0x59, 0x1e, 0xe5, 0x53, 0xbc, 0x15, 0x80,
	0x20, 0x2e, 0x11, 0xa4, 0x81, 0x9a, 0x68, 0xa7, 0xba, 0xfb, 0xb6, 0xbe, 0x5c, 0xab, 0x4c, 0x78,
	0x07, 0x04, 0xb9, 0x37, 0x89, 0x60, 0xb0, 0x90, 0x2b, 0x3d, 0x7c, 0x89, 0x4f, 0xb8, 0x80, 0xc0,
	0x5e, 0x10, 0x8a, 0x92, 0x70, 0x6d, 0x85, 0x60, 0x49, 0xd5, 0x0a, 0x67, 0x3b, 0x8b, 0xbd, 0x93,
	0xd3, 0x6e, 0xe0, 0x32, 0x8f, 0xc0, 0x69, 0x94, 0x24, 0xa2, 0xa9, 0xaf, 0x6f, 0x98, 0x6e, 0x45,
	0xe0, 0xc8, 0x78, 0xa9, 0xbe, 0xf9, 0x77, 0xf1, 0xc7, 0xbd, 0x4a, 0x46, 0xfa, 0xf3, 0x49, 0xa3,
	0xf4, 0x2b, 0x42, 0x4f, 0x9f, 0x34, 0xfe, 0x28, 0xe2, 0x5b, 0xb8, 0x74, 0x08, 0x42, 0xf9, 0x24,
	0x01, 0xae, 0xf9, 0x54, 0xf3, 0xc3, 0x11, 0x23, 0x5c, 0xb0, 0xd8, 0x11, 0x31, 0x03, 0x8d, 0x01,
	0x71, 0x3f, 0x6c, 0x36, 0x47, 0x1f, 0x3f, 0x72, 0x34, 0x37, 0xe4, 0x1a, 0x17, 0x24, 0x74, 0x09,
	0x73, 0xb5, 0x80, 0x86, 0xbe, 0xa0, 0x0c, 0xef, 0xe1, 0x0b, 0x03, 0x88, 0xc6, 0xc4, 0x01, 0xe5,
	0xc6, 0x7a, 0xc4, 0x43, 0xe6, 0x0b, 0x58, 0xcb, 0x88, 0x39, 0x30, 0x7c, 0x1b, 0x57, 0xda, 0x0c,
	0x88, 0x78, 0xd9, 0xf8, 0x5b, 0xb8, 0x62, 0xc2, 0x18, 0x04, 0x28, 0xd7, 0xcf, 0x8d, 0xdf, 0xb8,
	0x7d, 0xb9, 0xe7, 0xf3, 0x97, 0xce, 0xbf, 0xf5, 0x25, 0xde, 0xca, 0x0b, 0xad, 0xec, 0xe1, 0x0b,
	0x9e, 0x63, 0xcb, 0xde, 0x64, 0xed, 0x7d, 0x6f, 0x53, 0x6f, 0x0e, 0xc7, 0x74, 0x48, 0xc6, 0x8b,
	0x0e, 0x55, 0x3c, 0x67, 0xb6, 0x6e, 0xfd, 0x83, 0xf0, 0xab, 0x66, 0xdf, 0x3a, 0xa2, 0x21, 0x58,
	0x82, 0x88, 0x98, 0x2b, 0x1f, 0xe1, 0x2b, 0x09, 0x1d, 0x0b, 0x60, 0x8c, 0xd8, 0x21, 0x09, 0x80,
	0x03, 0x4b, 0x80, 0xf1, 0x06, 0x6a, 0x96, 0x76, 0x5e, 0x19, 0xd4, 0x73, 0x5f, 0xff, 0xb9, 0x4b,
	0xf9, 0x1a, 0x5f, 0x76, 0x21, 0x1a, 0xd3, 0x49, 0x00, 0xa1, 0xb0, 0xb9, 0xe4, 0xc8, 0xf3, 0x6c,
	0xef, 0x7e, 0xb0, 0xe9, 0x3c, 0x66, 0xdf, 0x32, 0x17, 0x31, 0xd9, 0xd6, 0x83, 0x9a, 0xbb, 0x62,
	0x51, 0x3e, 0xc3, 0x95, 0x6c, 0x7c, 0xe7, 0x57, 0xef, 0x9d, 0x73, 0x70, 0x56, 0xa7, 0x3d, 0xe7,
	0xcc, 0x63, 0x5a, 0x8f, 0x8b, 0xf8, 0x62, 0x66, 0x7a, 0xe1, 0x81, 0xca, 0xe4, 0x6b, 0x06, 0xea,
	0x0b, 0x5c, 0xcd, 0x1e, 0x2d, 0x9b, 0xc1, 0x68, 0x96, 0x5d, 0x69, 0xa7, 0xba, 0xfb, 0xd6, 0xda,
	0x71, 0x1c, 0xc0, 0x68, 0x16, 0x7c, 0x50, 0xfd, 0xfd, 0xfb, 0xad, 0xfc, 0x80, 0x03, 0x4c, 0x73,
	0xdf, 0x2c, 0x2b, 0xec, 0xd0, 0xd0, 0xf5, 0xe5, 0xd8, 0x37, 0x4a, 0x6b, 0x51, 0xed, 0x5c, 0x20,
	0xcf, 0x71, 0x46, 0xaf, 0xdc, 0xc7, 0xf5, 0x04, 0x98, 0x3f, 0xf2, 0x1d, 0x32, 0x33, 0xe4, 0xf5,
	0x2e, 0xcb, 0x7c, 0xde, 0x3d, 0xa7, 0x40, 0xcf, 0x9b, 0x3c, 0x50, 0xce, 0x12, 0x32, 0xdb, 0xcd,
	0xfa, 0xd3, 0xdb, 0x35, 0xbc, 0x8d, 0x2f, 0xe6, 0x29, 0xeb, 0xb1, 0xef, 0xbe, 0x3f, 0xc6, 0xf5,
	0x35, 0x9d, 0x52, 0xea, 0xf8, 0x92, 0xd9, 0xb7, 0xec, 0xa3, 0xbb, 0xfd, 0x8e, 0xbd, 0xdf, 0xbe,
	0xd7, 0xbd, 0xdf, 0xa9, 0x15, 0x94, 0x2b, 0xb8, 0xb6, 0x30, 0x7e, 0xd5, 0xe9, 0x9b, 0xdd, 0xfe,
	0x61, 0x0d, 0x29, 0xaf, 0xe1, 0xcb, 0x0b, 0xab, 0xd9, 0xb5, 0xf6, 0x0f, 0x7a, 0x1d, 0xb3, 0x56,
	0x5c, 0x22, 0x7c, 0xbe, 0xdf, 0x9d, 0x19, 0x4b, 0x07, 0x3f, 0xa1, 0xe3, 0x53, 0xb5, 0x70, 0x72,
	0xaa, 0x16, 0x9e, 0x9d, 0xaa, 0xe8, 0x87, 0x54, 0x45, 0xbf, 0xa5, 0x2a, 0xfa, 0x2b, 0x55, 0xd1,
	0x71, 0xaa, 0xa2, 0x93, 0x54, 0x45, 0xff, 0xa6, 0x2a, 0xfa, 0x2f, 0x55, 0x0b, 0xcf, 0x52, 0x15,
	0xfd, 0x3c, 0x55, 0x0b, 0x8f, 0xa7, 0x2a, 0x3a, 0x9e, 0xaa, 0x85, 0x93, 0xa9, 0x5a, 0x38, 0xea,
	0x79, 0x34, 0xfa, 0xd6, 0xd3, 0xf3, 0x2b, 0xaa, 0xc7, 0xdc, 0x90, 0x8b, 0x11, 0x65, 0x81, 0x16,
	0x31, 0x9a, 0xf8, 0x2e, 0x30, 0x2d, 0x77, 0x1b, 0xd1, 0xd0, 0xa3, 0x06, 0x3c, 0x12, 0xf3, 0xb7,
	0x78, 0xe5, 0x97, 0x30, 0xac, 0xc8, 0xf7, 0xf8, 0xfa, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b,
	0x0d, 0x04, 0x2c, 0xc4, 0x06, 0x00, 0x00,
}

func (x DNSDeploymentStatus) String() string {
	s, ok := DNSDeploymentStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Object) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Object)
	if !ok {
		that2, ok := that.(Object)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *SpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecType)
	if !ok {
		that2, ok := that.(SpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcSpec.Equal(that1.GcSpec) {
		return false
	}
	return true
}
func (this *DNSZoneStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSZoneStatus)
	if !ok {
		that2, ok := that.(DNSZoneStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VolterraNameservers) != len(that1.VolterraNameservers) {
		return false
	}
	for i := range this.VolterraNameservers {
		if this.VolterraNameservers[i] != that1.VolterraNameservers[i] {
			return false
		}
	}
	if this.DeploymentStatus != that1.DeploymentStatus {
		return false
	}
	if !this.Dnssec.Equal(that1.Dnssec) {
		return false
	}
	return true
}
func (this *StatusObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusObject)
	if !ok {
		that2, ok := that.(StatusObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.ObjectRefs) != len(that1.ObjectRefs) {
		return false
	}
	for i := range this.ObjectRefs {
		if !this.ObjectRefs[i].Equal(that1.ObjectRefs[i]) {
			return false
		}
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	if !this.VerificationStatus.Equal(that1.VerificationStatus) {
		return false
	}
	return true
}
func (this *Object) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_zone.Object{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_zone.SpecType{")
	if this.GcSpec != nil {
		s = append(s, "GcSpec: "+fmt.Sprintf("%#v", this.GcSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSZoneStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_zone.DNSZoneStatus{")
	s = append(s, "VolterraNameservers: "+fmt.Sprintf("%#v", this.VolterraNameservers)+",\n")
	s = append(s, "DeploymentStatus: "+fmt.Sprintf("%#v", this.DeploymentStatus)+",\n")
	if this.Dnssec != nil {
		s = append(s, "Dnssec: "+fmt.Sprintf("%#v", this.Dnssec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dns_zone.StatusObject{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ObjectRefs != nil {
		s = append(s, "ObjectRefs: "+fmt.Sprintf("%#v", this.ObjectRefs)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	if this.VerificationStatus != nil {
		s = append(s, "VerificationStatus: "+fmt.Sprintf("%#v", this.VerificationStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringObject(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GcSpec != nil {
		{
			size, err := m.GcSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *DNSZoneStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSZoneStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSZoneStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Dnssec != nil {
		{
			size, err := m.Dnssec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeploymentStatus != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.DeploymentStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VolterraNameservers) > 0 {
		for iNdEx := len(m.VolterraNameservers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VolterraNameservers[iNdEx])
			copy(dAtA[i:], m.VolterraNameservers[iNdEx])
			i = encodeVarintObject(dAtA, i, uint64(len(m.VolterraNameservers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatusObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerificationStatus != nil {
		{
			size, err := m.VerificationStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ObjectRefs) > 0 {
		for iNdEx := len(m.ObjectRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObjectRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *SpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcSpec != nil {
		l = m.GcSpec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *DNSZoneStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VolterraNameservers) > 0 {
		for _, s := range m.VolterraNameservers {
			l = len(s)
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.DeploymentStatus != 0 {
		n += 1 + sovObject(uint64(m.DeploymentStatus))
	}
	if m.Dnssec != nil {
		l = m.Dnssec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *StatusObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if len(m.ObjectRefs) > 0 {
		for _, e := range m.ObjectRefs {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.VerificationStatus != nil {
		l = m.VerificationStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func sovObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObject(x uint64) (n int) {
	return sovObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Object) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Object{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "SpecType", "SpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecType{`,
		`GcSpec:` + strings.Replace(fmt.Sprintf("%v", this.GcSpec), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSZoneStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSZoneStatus{`,
		`VolterraNameservers:` + fmt.Sprintf("%v", this.VolterraNameservers) + `,`,
		`DeploymentStatus:` + fmt.Sprintf("%v", this.DeploymentStatus) + `,`,
		`Dnssec:` + strings.Replace(fmt.Sprintf("%v", this.Dnssec), "DNSSECStatus", "DNSSECStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusObject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjectRefs := "[]*ObjectRefType{"
	for _, f := range this.ObjectRefs {
		repeatedStringForObjectRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForObjectRefs += "}"
	repeatedStringForConditions := "[]*ConditionType{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(fmt.Sprintf("%v", f), "ConditionType", "schema.ConditionType", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&StatusObject{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "StatusMetaType", "schema.StatusMetaType", 1) + `,`,
		`ObjectRefs:` + repeatedStringForObjectRefs + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`VerificationStatus:` + strings.Replace(this.VerificationStatus.String(), "DNSZoneStatus", "DNSZoneStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringObject(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GcSpec == nil {
				m.GcSpec = &GlobalSpecType{}
			}
			if err := m.GcSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSZoneStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSZoneStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSZoneStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraNameservers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraNameservers = append(m.VolterraNameservers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentStatus", wireType)
			}
			m.DeploymentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeploymentStatus |= DNSDeploymentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dnssec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dnssec == nil {
				m.Dnssec = &DNSSECStatus{}
			}
			if err := m.Dnssec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.StatusMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectRefs = append(m.ObjectRefs, &schema.ObjectRefType{})
			if err := m.ObjectRefs[len(m.ObjectRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &schema.ConditionType{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerificationStatus == nil {
				m.VerificationStatus = &DNSZoneStatus{}
			}
			if err := m.VerificationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObject = fmt.Errorf("proto: unexpected end of group")
)

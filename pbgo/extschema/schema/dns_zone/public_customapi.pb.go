// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_zone/public_customapi.proto

// Import DNS Zone
//
// x-displayName: "DNS Zone"
// Import DNS Zone

package dns_zone

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Import F5 Cloud Services DNS zone
//
// x-displayName: "Import F5 Cloud Services DNS zone"
// Import F5 Cloud Services DNS zone
type ImportF5CSZoneRequest struct {
	// DNS zone configuration
	//
	// x-displayName: "DNS zone configuration"
	// Configuration of DNS primary or secondary zone to import
	Configuration *F5CSDNSZoneConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (m *ImportF5CSZoneRequest) Reset()      { *m = ImportF5CSZoneRequest{} }
func (*ImportF5CSZoneRequest) ProtoMessage() {}
func (*ImportF5CSZoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{0}
}
func (m *ImportF5CSZoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportF5CSZoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportF5CSZoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportF5CSZoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportF5CSZoneRequest.Merge(m, src)
}
func (m *ImportF5CSZoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportF5CSZoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportF5CSZoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportF5CSZoneRequest proto.InternalMessageInfo

func (m *ImportF5CSZoneRequest) GetConfiguration() *F5CSDNSZoneConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// Import F5 Cloud Services DNS zone response
//
// x-displayName: "Import F5 Cloud Services DNS zone response"
// Import F5 Cloud Services DNS zone response
type ImportF5CSZoneResponse struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes of the object like name, labels etc.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system metadata
	//
	// x-displayName: "System Metadata"
	// System generated attributes all this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,3,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object created
	Spec *GetSpecType `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ImportF5CSZoneResponse) Reset()      { *m = ImportF5CSZoneResponse{} }
func (*ImportF5CSZoneResponse) ProtoMessage() {}
func (*ImportF5CSZoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{1}
}
func (m *ImportF5CSZoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportF5CSZoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportF5CSZoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportF5CSZoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportF5CSZoneResponse.Merge(m, src)
}
func (m *ImportF5CSZoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportF5CSZoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportF5CSZoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportF5CSZoneResponse proto.InternalMessageInfo

func (m *ImportF5CSZoneResponse) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ImportF5CSZoneResponse) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ImportF5CSZoneResponse) GetSpec() *GetSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// F5 Cloud Services DNS zone configuration
//
// x-displayName: "F5 Cloud Services DNS zone configuration"
// F5 Cloud Services DNS primary or secondary zone configuration
type F5CSDNSZoneConfiguration struct {
	// DNS zone type
	//
	// x-displayName: "DNS service configuration"
	// F5 Cloud Services DNS service primary or secondary zone configuration
	//
	// Types that are valid to be assigned to DnsType:
	//	*F5CSDNSZoneConfiguration_DnsService
	//	*F5CSDNSZoneConfiguration_AdnsService
	DnsType isF5CSDNSZoneConfiguration_DnsType `protobuf_oneof:"dns_type"`
}

func (m *F5CSDNSZoneConfiguration) Reset()      { *m = F5CSDNSZoneConfiguration{} }
func (*F5CSDNSZoneConfiguration) ProtoMessage() {}
func (*F5CSDNSZoneConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{2}
}
func (m *F5CSDNSZoneConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5CSDNSZoneConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_F5CSDNSZoneConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *F5CSDNSZoneConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5CSDNSZoneConfiguration.Merge(m, src)
}
func (m *F5CSDNSZoneConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *F5CSDNSZoneConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_F5CSDNSZoneConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_F5CSDNSZoneConfiguration proto.InternalMessageInfo

type isF5CSDNSZoneConfiguration_DnsType interface {
	isF5CSDNSZoneConfiguration_DnsType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type F5CSDNSZoneConfiguration_DnsService struct {
	DnsService *types.Struct `protobuf:"bytes,2,opt,name=dns_service,json=dnsService,proto3,oneof" json:"dns_service,omitempty"`
}
type F5CSDNSZoneConfiguration_AdnsService struct {
	AdnsService *types.Struct `protobuf:"bytes,3,opt,name=adns_service,json=adnsService,proto3,oneof" json:"adns_service,omitempty"`
}

func (*F5CSDNSZoneConfiguration_DnsService) isF5CSDNSZoneConfiguration_DnsType()  {}
func (*F5CSDNSZoneConfiguration_AdnsService) isF5CSDNSZoneConfiguration_DnsType() {}

func (m *F5CSDNSZoneConfiguration) GetDnsType() isF5CSDNSZoneConfiguration_DnsType {
	if m != nil {
		return m.DnsType
	}
	return nil
}

func (m *F5CSDNSZoneConfiguration) GetDnsService() *types.Struct {
	if x, ok := m.GetDnsType().(*F5CSDNSZoneConfiguration_DnsService); ok {
		return x.DnsService
	}
	return nil
}

func (m *F5CSDNSZoneConfiguration) GetAdnsService() *types.Struct {
	if x, ok := m.GetDnsType().(*F5CSDNSZoneConfiguration_AdnsService); ok {
		return x.AdnsService
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*F5CSDNSZoneConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*F5CSDNSZoneConfiguration_DnsService)(nil),
		(*F5CSDNSZoneConfiguration_AdnsService)(nil),
	}
}

// Import DNS Zone
//
// x-displayName: "Import DNS Zone"
// DNS zone import via AXFR
type ImportAXFRRequest struct {
	// Primary Server
	//
	// x-displayName: "Primary DNS Server"
	// x-required
	// x-example: "1.2.3.4"
	PrimaryServer string `protobuf:"bytes,3,opt,name=primary_server,json=primaryServer,proto3" json:"primary_server,omitempty"`
	// Domain Name
	//
	// x-displayName: "Domain Name"
	// x-required
	// x-example: "example.com"
	// Name of the zone to be imported
	DomainName string `protobuf:"bytes,7,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// TSIG Configuration
	//
	// x-displayName: "TSIG Configuration"
	// TSIG Configuration
	TsigConfiguration *TSIGConfiguration `protobuf:"bytes,8,opt,name=tsig_configuration,json=tsigConfiguration,proto3" json:"tsig_configuration,omitempty"`
}

func (m *ImportAXFRRequest) Reset()      { *m = ImportAXFRRequest{} }
func (*ImportAXFRRequest) ProtoMessage() {}
func (*ImportAXFRRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{3}
}
func (m *ImportAXFRRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportAXFRRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportAXFRRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportAXFRRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAXFRRequest.Merge(m, src)
}
func (m *ImportAXFRRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportAXFRRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAXFRRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAXFRRequest proto.InternalMessageInfo

func (m *ImportAXFRRequest) GetPrimaryServer() string {
	if m != nil {
		return m.PrimaryServer
	}
	return ""
}

func (m *ImportAXFRRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ImportAXFRRequest) GetTsigConfiguration() *TSIGConfiguration {
	if m != nil {
		return m.TsigConfiguration
	}
	return nil
}

// TSIG Configuration
//
// x-displayName: "TSIG Configuration"
type TSIGConfiguration struct {
	// TSIG Key Name
	//
	// x-displayName: "TSIG key name"
	// x-example: "my-tsig-key"
	// TSIG key name as used in TSIG protocol extension
	TsigKeyName string `protobuf:"bytes,1,opt,name=tsig_key_name,json=tsigKeyName,proto3" json:"tsig_key_name,omitempty"`
	// TSIG Key Algorithm
	//
	// x-displayName: "TSIG Key algorithm"
	// x-example: "hmac-sha512"
	// TSIG key value must be compatible with the specified algorithm
	TsigKeyAlgorithm TSIGKeyAlgorithm `protobuf:"varint,2,opt,name=tsig_key_algorithm,json=tsigKeyAlgorithm,proto3,enum=ves.io.schema.dns_zone.TSIGKeyAlgorithm" json:"tsig_key_algorithm,omitempty"`
	// TSIG Key value
	//
	// x-displayName: "TSIG key value in base 64 format"
	// x-example: "my-tsig-value"
	TsigKeyValue *schema.SecretType `protobuf:"bytes,3,opt,name=tsig_key_value,json=tsigKeyValue,proto3" json:"tsig_key_value,omitempty"`
}

func (m *TSIGConfiguration) Reset()      { *m = TSIGConfiguration{} }
func (*TSIGConfiguration) ProtoMessage() {}
func (*TSIGConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{4}
}
func (m *TSIGConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSIGConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSIGConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSIGConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSIGConfiguration.Merge(m, src)
}
func (m *TSIGConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TSIGConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TSIGConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TSIGConfiguration proto.InternalMessageInfo

func (m *TSIGConfiguration) GetTsigKeyName() string {
	if m != nil {
		return m.TsigKeyName
	}
	return ""
}

func (m *TSIGConfiguration) GetTsigKeyAlgorithm() TSIGKeyAlgorithm {
	if m != nil {
		return m.TsigKeyAlgorithm
	}
	return UNDEFINED
}

func (m *TSIGConfiguration) GetTsigKeyValue() *schema.SecretType {
	if m != nil {
		return m.TsigKeyValue
	}
	return nil
}

// Import Response
//
// x-displayName: "Import Response"
// Import AXFR Response
type ImportAXFRResponse struct {
	// DNS Zone Configuration
	//
	// x-displayName: "Primary DNS Configuration"
	Configuration *PrimaryDNSGetSpecType `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (m *ImportAXFRResponse) Reset()      { *m = ImportAXFRResponse{} }
func (*ImportAXFRResponse) ProtoMessage() {}
func (*ImportAXFRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{5}
}
func (m *ImportAXFRResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportAXFRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportAXFRResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportAXFRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAXFRResponse.Merge(m, src)
}
func (m *ImportAXFRResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportAXFRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAXFRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAXFRResponse proto.InternalMessageInfo

func (m *ImportAXFRResponse) GetConfiguration() *PrimaryDNSGetSpecType {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// Get remote zone file Request
//
// x-displayName: "Get remote zone file Request"
// Get remote zone file Request
type GetRemoteZoneFileRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Namespace is always system for dns_zone
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "example.com"
	// Name dns_zone object which is also the DNS zone
	DnsZoneName string `protobuf:"bytes,2,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
}

func (m *GetRemoteZoneFileRequest) Reset()      { *m = GetRemoteZoneFileRequest{} }
func (*GetRemoteZoneFileRequest) ProtoMessage() {}
func (*GetRemoteZoneFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{6}
}
func (m *GetRemoteZoneFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRemoteZoneFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRemoteZoneFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRemoteZoneFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRemoteZoneFileRequest.Merge(m, src)
}
func (m *GetRemoteZoneFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRemoteZoneFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRemoteZoneFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRemoteZoneFileRequest proto.InternalMessageInfo

func (m *GetRemoteZoneFileRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetRemoteZoneFileRequest) GetDnsZoneName() string {
	if m != nil {
		return m.DnsZoneName
	}
	return ""
}

// Get remote zone file Response
//
// x-displayName: "Get remote zone file Response"
// Get remote zone file Response
type GetRemoteZoneFileResponse struct {
	// Remote zone file
	//
	// x-displayName: "Remote zone file"
	// Remote zone file from primary dns
	ZoneFile string `protobuf:"bytes,1,opt,name=zone_file,json=zoneFile,proto3" json:"zone_file,omitempty"`
}

func (m *GetRemoteZoneFileResponse) Reset()      { *m = GetRemoteZoneFileResponse{} }
func (*GetRemoteZoneFileResponse) ProtoMessage() {}
func (*GetRemoteZoneFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{7}
}
func (m *GetRemoteZoneFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRemoteZoneFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRemoteZoneFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRemoteZoneFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRemoteZoneFileResponse.Merge(m, src)
}
func (m *GetRemoteZoneFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRemoteZoneFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRemoteZoneFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRemoteZoneFileResponse proto.InternalMessageInfo

func (m *GetRemoteZoneFileResponse) GetZoneFile() string {
	if m != nil {
		return m.ZoneFile
	}
	return ""
}

// Get local zone file Request
//
// x-displayName: "Get local zone file Request"
// Get local zone file Request
type GetLocalZoneFileRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Namespace is always system for dns_zone
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "example.com"
	// Name dns_zone object which is also the DNS zone
	DnsZoneName string `protobuf:"bytes,2,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
}

func (m *GetLocalZoneFileRequest) Reset()      { *m = GetLocalZoneFileRequest{} }
func (*GetLocalZoneFileRequest) ProtoMessage() {}
func (*GetLocalZoneFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{8}
}
func (m *GetLocalZoneFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLocalZoneFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLocalZoneFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLocalZoneFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLocalZoneFileRequest.Merge(m, src)
}
func (m *GetLocalZoneFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLocalZoneFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLocalZoneFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLocalZoneFileRequest proto.InternalMessageInfo

func (m *GetLocalZoneFileRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetLocalZoneFileRequest) GetDnsZoneName() string {
	if m != nil {
		return m.DnsZoneName
	}
	return ""
}

// Get local zone file Response
//
// x-displayName: "Get local zone file Response"
// Get local zone file Response
type GetLocalZoneFileResponse struct {
	// Last AXFR timestamp
	//
	// x-displayName: "Last successful AXFR timestamp"
	// Last successful zone transfer timestamp.
	LastAxfrTimestamp *types.Timestamp `protobuf:"bytes,9,opt,name=last_axfr_timestamp,json=lastAxfrTimestamp,proto3" json:"last_axfr_timestamp,omitempty"`
	// Local zone file
	//
	// x-displayName: "Local zone file"
	// Local zone file from secondary dns
	ZoneFile string `protobuf:"bytes,2,opt,name=zone_file,json=zoneFile,proto3" json:"zone_file,omitempty"`
}

func (m *GetLocalZoneFileResponse) Reset()      { *m = GetLocalZoneFileResponse{} }
func (*GetLocalZoneFileResponse) ProtoMessage() {}
func (*GetLocalZoneFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{9}
}
func (m *GetLocalZoneFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLocalZoneFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLocalZoneFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLocalZoneFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLocalZoneFileResponse.Merge(m, src)
}
func (m *GetLocalZoneFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLocalZoneFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLocalZoneFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLocalZoneFileResponse proto.InternalMessageInfo

func (m *GetLocalZoneFileResponse) GetLastAxfrTimestamp() *types.Timestamp {
	if m != nil {
		return m.LastAxfrTimestamp
	}
	return nil
}

func (m *GetLocalZoneFileResponse) GetZoneFile() string {
	if m != nil {
		return m.ZoneFile
	}
	return ""
}

// Clone Request
//
// x-displayName: "Clone Request"
// Clone Request
type CloneReq struct {
}

func (m *CloneReq) Reset()      { *m = CloneReq{} }
func (*CloneReq) ProtoMessage() {}
func (*CloneReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{10}
}
func (m *CloneReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloneReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloneReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloneReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloneReq.Merge(m, src)
}
func (m *CloneReq) XXX_Size() int {
	return m.Size()
}
func (m *CloneReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloneReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloneReq proto.InternalMessageInfo

// Clone Response
//
// x-displayName: "Response"
// Clone Response
type CloneResp struct {
	// Zones succeeded
	//
	// x-displayName: "Zones succeeded"
	// Zones succeeded
	SuccessZones []string `protobuf:"bytes,1,rep,name=success_zones,json=successZones,proto3" json:"success_zones,omitempty"`
	// Zones failed
	//
	// x-displayName: "Zones failed"
	// Zones failed
	FailedZones []string `protobuf:"bytes,2,rep,name=failed_zones,json=failedZones,proto3" json:"failed_zones,omitempty"`
}

func (m *CloneResp) Reset()      { *m = CloneResp{} }
func (*CloneResp) ProtoMessage() {}
func (*CloneResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8810baad339dc204, []int{11}
}
func (m *CloneResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloneResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloneResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloneResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloneResp.Merge(m, src)
}
func (m *CloneResp) XXX_Size() int {
	return m.Size()
}
func (m *CloneResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CloneResp.DiscardUnknown(m)
}

var xxx_messageInfo_CloneResp proto.InternalMessageInfo

func (m *CloneResp) GetSuccessZones() []string {
	if m != nil {
		return m.SuccessZones
	}
	return nil
}

func (m *CloneResp) GetFailedZones() []string {
	if m != nil {
		return m.FailedZones
	}
	return nil
}

func init() {
	proto.RegisterType((*ImportF5CSZoneRequest)(nil), "ves.io.schema.dns_zone.ImportF5CSZoneRequest")
	golang_proto.RegisterType((*ImportF5CSZoneRequest)(nil), "ves.io.schema.dns_zone.ImportF5CSZoneRequest")
	proto.RegisterType((*ImportF5CSZoneResponse)(nil), "ves.io.schema.dns_zone.ImportF5CSZoneResponse")
	golang_proto.RegisterType((*ImportF5CSZoneResponse)(nil), "ves.io.schema.dns_zone.ImportF5CSZoneResponse")
	proto.RegisterType((*F5CSDNSZoneConfiguration)(nil), "ves.io.schema.dns_zone.F5CSDNSZoneConfiguration")
	golang_proto.RegisterType((*F5CSDNSZoneConfiguration)(nil), "ves.io.schema.dns_zone.F5CSDNSZoneConfiguration")
	proto.RegisterType((*ImportAXFRRequest)(nil), "ves.io.schema.dns_zone.ImportAXFRRequest")
	golang_proto.RegisterType((*ImportAXFRRequest)(nil), "ves.io.schema.dns_zone.ImportAXFRRequest")
	proto.RegisterType((*TSIGConfiguration)(nil), "ves.io.schema.dns_zone.TSIGConfiguration")
	golang_proto.RegisterType((*TSIGConfiguration)(nil), "ves.io.schema.dns_zone.TSIGConfiguration")
	proto.RegisterType((*ImportAXFRResponse)(nil), "ves.io.schema.dns_zone.ImportAXFRResponse")
	golang_proto.RegisterType((*ImportAXFRResponse)(nil), "ves.io.schema.dns_zone.ImportAXFRResponse")
	proto.RegisterType((*GetRemoteZoneFileRequest)(nil), "ves.io.schema.dns_zone.GetRemoteZoneFileRequest")
	golang_proto.RegisterType((*GetRemoteZoneFileRequest)(nil), "ves.io.schema.dns_zone.GetRemoteZoneFileRequest")
	proto.RegisterType((*GetRemoteZoneFileResponse)(nil), "ves.io.schema.dns_zone.GetRemoteZoneFileResponse")
	golang_proto.RegisterType((*GetRemoteZoneFileResponse)(nil), "ves.io.schema.dns_zone.GetRemoteZoneFileResponse")
	proto.RegisterType((*GetLocalZoneFileRequest)(nil), "ves.io.schema.dns_zone.GetLocalZoneFileRequest")
	golang_proto.RegisterType((*GetLocalZoneFileRequest)(nil), "ves.io.schema.dns_zone.GetLocalZoneFileRequest")
	proto.RegisterType((*GetLocalZoneFileResponse)(nil), "ves.io.schema.dns_zone.GetLocalZoneFileResponse")
	golang_proto.RegisterType((*GetLocalZoneFileResponse)(nil), "ves.io.schema.dns_zone.GetLocalZoneFileResponse")
	proto.RegisterType((*CloneReq)(nil), "ves.io.schema.dns_zone.CloneReq")
	golang_proto.RegisterType((*CloneReq)(nil), "ves.io.schema.dns_zone.CloneReq")
	proto.RegisterType((*CloneResp)(nil), "ves.io.schema.dns_zone.CloneResp")
	golang_proto.RegisterType((*CloneResp)(nil), "ves.io.schema.dns_zone.CloneResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_zone/public_customapi.proto", fileDescriptor_8810baad339dc204)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_zone/public_customapi.proto", fileDescriptor_8810baad339dc204)
}

var fileDescriptor_8810baad339dc204 = []byte{
	// 1340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xf7, 0xd8, 0x4e, 0x62, 0x4f, 0x7e, 0xe0, 0xcc, 0x57, 0x5f, 0x30, 0x86, 0xef, 0x7e, 0xc3,
	0x22, 0x55, 0x80, 0xe2, 0xdd, 0x00, 0x42, 0x45, 0x11, 0x45, 0xca, 0x8f, 0x26, 0xc4, 0x40, 0x40,
	0x6b, 0x84, 0x2a, 0x5a, 0xd5, 0x1a, 0xaf, 0xc7, 0x9b, 0x2d, 0xbb, 0x3b, 0xdb, 0x99, 0xb1, 0x89,
	0x41, 0x48, 0x88, 0xfe, 0x38, 0x57, 0xea, 0xad, 0xa7, 0x1e, 0xab, 0xaa, 0x7f, 0x41, 0x51, 0x25,
	0x6e, 0x54, 0x3d, 0x54, 0x69, 0x7b, 0xe1, 0x58, 0x1c, 0x0e, 0xed, 0x0d, 0xf5, 0x8c, 0xaa, 0x6a,
	0x67, 0xd7, 0x8e, 0xbd, 0xb1, 0x43, 0x4a, 0x7b, 0xca, 0x7a, 0xe6, 0xf3, 0x3e, 0xef, 0x7d, 0xde,
	0xbc, 0xf7, 0x66, 0x02, 0x8b, 0x4d, 0xc2, 0x35, 0x9b, 0xea, 0xdc, 0xdc, 0x20, 0x2e, 0xd6, 0x6b,
	0x1e, 0xaf, 0xdc, 0xa5, 0x1e, 0xd1, 0xfd, 0x46, 0xd5, 0xb1, 0xcd, 0x8a, 0xd9, 0xe0, 0x82, 0xba,
	0xd8, 0xb7, 0x35, 0x9f, 0x51, 0x41, 0xd1, 0xc1, 0x10, 0xae, 0x85, 0x70, 0xad, 0x03, 0x2f, 0x14,
	0x2d, 0x5b, 0x6c, 0x34, 0xaa, 0x9a, 0x49, 0x5d, 0xdd, 0xa2, 0x16, 0xd5, 0x25, 0xbc, 0xda, 0xa8,
	0xcb, 0x5f, 0xf2, 0x87, 0xfc, 0x0a, 0x69, 0x0a, 0x47, 0x2d, 0x4a, 0x2d, 0x87, 0xe8, 0xd8, 0xb7,
	0x75, 0xec, 0x79, 0x54, 0x60, 0x61, 0x53, 0x8f, 0xc7, 0x76, 0xbb, 0x1c, 0x5c, 0xb0, 0x86, 0x29,
	0xa2, 0xdd, 0xff, 0xc7, 0x77, 0x85, 0xed, 0x12, 0x2e, 0xb0, 0xeb, 0x47, 0x80, 0xe3, 0x43, 0x24,
	0xd1, 0xea, 0x07, 0xa4, 0xcb, 0xa2, 0x0e, 0x01, 0x89, 0x96, 0x4f, 0x3a, 0x71, 0x1c, 0xe9, 0xc7,
	0x50, 0xbf, 0x37, 0xc8, 0xc3, 0xfd, 0x9b, 0xbd, 0x76, 0x47, 0xfb, 0xb7, 0x9a, 0xd8, 0xb1, 0x6b,
	0x58, 0x90, 0xc1, 0x9e, 0x9b, 0x84, 0x13, 0xaf, 0x19, 0x23, 0x9f, 0x89, 0x61, 0x6c, 0x72, 0xa7,
	0xd2, 0x87, 0x50, 0x29, 0xfc, 0xef, 0x9a, 0xeb, 0x53, 0x26, 0x56, 0xce, 0x2d, 0x95, 0x6f, 0x51,
	0x8f, 0x18, 0xe4, 0xc3, 0x06, 0xe1, 0x02, 0xdd, 0x84, 0x93, 0x26, 0xf5, 0xea, 0xb6, 0xd5, 0x60,
	0x32, 0xa9, 0x79, 0x30, 0x03, 0x4e, 0x8c, 0x9f, 0x99, 0xd3, 0x06, 0x9f, 0x9c, 0x16, 0xd8, 0x2f,
	0xaf, 0x4b, 0x8a, 0xa5, 0x5e, 0x3b, 0xa3, 0x9f, 0x46, 0x7d, 0x09, 0xe0, 0xc1, 0xb8, 0x47, 0xee,
	0x53, 0x8f, 0x13, 0x74, 0x01, 0x66, 0x5c, 0x22, 0x70, 0x0d, 0x0b, 0x1c, 0x79, 0x9b, 0x89, 0x79,
	0xbb, 0x26, 0x53, 0xbf, 0x4a, 0xc4, 0x55, 0x22, 0xf0, 0x8d, 0x96, 0x4f, 0x8c, 0xae, 0x05, 0xba,
	0x06, 0x0f, 0xf0, 0x16, 0x17, 0xc4, 0xad, 0x74, 0x49, 0x52, 0x92, 0xe4, 0x8d, 0x18, 0x49, 0x59,
	0xa2, 0x76, 0x53, 0x4d, 0x85, 0xe6, 0x57, 0x3b, 0x84, 0x97, 0x60, 0x9a, 0xfb, 0xc4, 0xcc, 0x27,
	0x25, 0xcb, 0xf1, 0x61, 0xc2, 0x57, 0x89, 0x28, 0xfb, 0xc4, 0x0c, 0x28, 0x16, 0x0f, 0x7c, 0x71,
	0x7f, 0x22, 0xb0, 0xd1, 0x2c, 0xb3, 0x12, 0xfc, 0x35, 0x24, 0xc3, 0x7c, 0xf6, 0x87, 0x8b, 0xa3,
	0xa1, 0x3f, 0xf5, 0x1b, 0x00, 0xf3, 0xc3, 0x52, 0x85, 0xe6, 0xe1, 0x78, 0x40, 0xcb, 0x09, 0x6b,
	0xda, 0x26, 0x89, 0x1c, 0x1f, 0xd2, 0xc2, 0x42, 0xd5, 0x3a, 0x85, 0xaa, 0x95, 0x65, 0x19, 0x5f,
	0x4a, 0x18, 0xb0, 0xe6, 0xf1, 0x72, 0x08, 0x46, 0x17, 0xe0, 0x04, 0xee, 0x35, 0x4e, 0xbd, 0xca,
	0x78, 0x1c, 0xef, 0x58, 0x2f, 0xe6, 0x60, 0x26, 0x30, 0x0e, 0xaa, 0x0f, 0xa5, 0xb7, 0x1e, 0x01,
	0x50, 0x4a, 0x67, 0x40, 0x2e, 0xa9, 0xfe, 0x09, 0xe0, 0x74, 0x78, 0x5a, 0x0b, 0xef, 0xac, 0x18,
	0x9d, 0xda, 0x98, 0x83, 0x53, 0x3e, 0xb3, 0x5d, 0xcc, 0x5a, 0xd2, 0x1d, 0x61, 0xd2, 0x5b, 0x76,
	0x31, 0xfb, 0xed, 0xef, 0x8f, 0x53, 0x69, 0x96, 0xdc, 0x04, 0xc6, 0x64, 0x04, 0x28, 0xcb, 0x7d,
	0xa4, 0xc3, 0xf1, 0x1a, 0x75, 0xb1, 0xed, 0x55, 0x3c, 0xec, 0x92, 0xfc, 0x98, 0x84, 0x4f, 0x05,
	0xf0, 0x2c, 0x1b, 0xcb, 0x81, 0xfc, 0x83, 0xe4, 0x06, 0x30, 0x60, 0x08, 0x59, 0xc7, 0x2e, 0x41,
	0xef, 0x43, 0x24, 0xb8, 0x6d, 0x55, 0xfa, 0x6b, 0x30, 0x23, 0x45, 0x9d, 0x1c, 0x76, 0x14, 0x37,
	0xca, 0x6b, 0xab, 0x7d, 0x19, 0x5d, 0x94, 0x5a, 0x8c, 0xe9, 0x80, 0xaa, 0x6f, 0x63, 0x3e, 0xf3,
	0xc7, 0xc5, 0x91, 0x37, 0x67, 0xcf, 0xce, 0x9e, 0x0f, 0x85, 0x96, 0xd2, 0x99, 0x64, 0x2e, 0x55,
	0x4a, 0x67, 0xd2, 0xb9, 0x91, 0x52, 0x3a, 0x33, 0x92, 0x1b, 0x2d, 0xa5, 0x33, 0xa3, 0xb9, 0x31,
	0xf5, 0x39, 0x80, 0xd3, 0xbb, 0x68, 0xd1, 0x1c, 0x9c, 0x94, 0xd1, 0xdd, 0x26, 0xad, 0x50, 0x10,
	0x90, 0x82, 0x26, 0x02, 0x41, 0x63, 0x6c, 0x24, 0x94, 0x33, 0x1e, 0x40, 0x2e, 0x93, 0x96, 0xd4,
	0x73, 0x33, 0xd2, 0x13, 0x58, 0x60, 0xc7, 0xa2, 0xcc, 0x16, 0x1b, 0xae, 0x3c, 0xe1, 0xa9, 0x33,
	0x27, 0xf6, 0xd2, 0x73, 0x99, 0xb4, 0x16, 0x3a, 0x78, 0x23, 0x17, 0x51, 0x76, 0x57, 0xd0, 0xdb,
	0x70, 0xaa, 0xcb, 0xdb, 0xc4, 0x4e, 0xa3, 0x73, 0xf0, 0x87, 0xe3, 0x45, 0x4f, 0x4c, 0x46, 0x84,
	0x2c, 0xd2, 0x30, 0x27, 0x13, 0x11, 0xd5, 0xcd, 0xc0, 0x48, 0xb5, 0x21, 0xea, 0x3d, 0xe6, 0xa8,
	0x21, 0xcb, 0x83, 0x67, 0x40, 0x71, 0x58, 0xbc, 0xd7, 0xc3, 0x33, 0x5f, 0x5e, 0x2f, 0xf7, 0x34,
	0x45, 0x7c, 0x00, 0xbc, 0x07, 0xf3, 0xab, 0x44, 0x18, 0xc4, 0xa5, 0x82, 0x04, 0x2d, 0xb0, 0x62,
	0x3b, 0xdd, 0xa1, 0x73, 0x14, 0x66, 0x83, 0x74, 0x72, 0x1f, 0x9b, 0x51, 0x4e, 0x8d, 0x9d, 0x05,
	0xa4, 0xc2, 0xc9, 0x8e, 0xab, 0x30, 0xeb, 0x49, 0x89, 0x08, 0x7a, 0x26, 0x20, 0x0a, 0xf2, 0xac,
	0x9e, 0x87, 0x87, 0x07, 0xb0, 0x47, 0x7a, 0x8e, 0xc0, 0xac, 0x34, 0xae, 0xdb, 0x4e, 0x87, 0x3e,
	0x73, 0x37, 0x02, 0xa9, 0xef, 0xc2, 0x43, 0xab, 0x44, 0x5c, 0xa1, 0x26, 0x76, 0xfe, 0xfd, 0xb0,
	0x3e, 0x02, 0x52, 0x75, 0x8c, 0x3d, 0x0a, 0xab, 0x04, 0xff, 0xe3, 0x60, 0x2e, 0x2a, 0x78, 0xb3,
	0xce, 0x2a, 0xdd, 0x5b, 0x28, 0x9f, 0x95, 0xc9, 0x2e, 0xec, 0xea, 0xe0, 0x1b, 0x1d, 0x84, 0x31,
	0x1d, 0x98, 0x2d, 0x6c, 0xd6, 0x59, 0x77, 0xa9, 0x5f, 0x62, 0x32, 0x26, 0x11, 0xc2, 0xcc, 0x92,
	0x13, 0xce, 0x78, 0xb5, 0x0c, 0xb3, 0xd1, 0x37, 0xf7, 0xd1, 0x71, 0x38, 0xc9, 0x1b, 0xa6, 0x49,
	0x78, 0x28, 0x83, 0xe7, 0xc1, 0x4c, 0xea, 0x44, 0xd6, 0x98, 0x88, 0x16, 0x83, 0x88, 0x39, 0x3a,
	0x06, 0x27, 0xea, 0xd8, 0x76, 0x48, 0x2d, 0xc2, 0x24, 0x25, 0x66, 0x3c, 0x5c, 0x93, 0x90, 0x33,
	0x5f, 0x67, 0x61, 0x76, 0x49, 0x5e, 0xf5, 0x0b, 0xd7, 0xd7, 0xd0, 0x53, 0x00, 0xa7, 0xfa, 0x47,
	0x3d, 0x1a, 0x5a, 0x3a, 0x03, 0x2f, 0xa1, 0x82, 0xb6, 0x5f, 0x78, 0x98, 0x49, 0xd5, 0x6a, 0x3f,
	0xc9, 0x07, 0x37, 0x61, 0xd1, 0xa6, 0x45, 0xdb, 0xab, 0x33, 0x1c, 0xde, 0xf8, 0x0d, 0x46, 0x8a,
	0x77, 0x98, 0x2d, 0xc8, 0x6c, 0xfd, 0xdc, 0xa6, 0x59, 0xac, 0x79, 0xbc, 0x58, 0xc5, 0xdc, 0x36,
	0x8b, 0x0d, 0x4e, 0xd8, 0xc3, 0x5f, 0x9e, 0x7f, 0x9e, 0xd4, 0xd4, 0x93, 0xd1, 0x53, 0x45, 0xef,
	0x1e, 0x2c, 0xd7, 0xc3, 0x0b, 0x61, 0xe7, 0x52, 0xb7, 0xa5, 0xd7, 0x79, 0x70, 0x0a, 0xfd, 0x04,
	0x20, 0xdc, 0x69, 0x18, 0x74, 0x72, 0xef, 0x38, 0x7b, 0x66, 0x67, 0xe1, 0xd4, 0x7e, 0xa0, 0x91,
	0x1c, 0xe7, 0x75, 0xe5, 0x9c, 0x55, 0xb5, 0x7d, 0xcb, 0x91, 0x65, 0x17, 0x68, 0x7a, 0x90, 0x84,
	0xd3, 0xbb, 0x7a, 0x07, 0xcd, 0xed, 0x71, 0xef, 0x0d, 0x6c, 0xe2, 0xc2, 0xe9, 0xbf, 0x61, 0x11,
	0x09, 0xfd, 0x04, 0xb4, 0x9f, 0xe4, 0x4f, 0x0f, 0x56, 0xca, 0x08, 0xae, 0xc5, 0x85, 0xba, 0xd4,
	0xb3, 0x05, 0x0d, 0xb5, 0x96, 0xd0, 0xa5, 0x01, 0x5a, 0xef, 0x75, 0xbf, 0xef, 0xef, 0x08, 0xbe,
	0xd7, 0xd7, 0xa7, 0xf7, 0x75, 0x26, 0xa3, 0xa9, 0x74, 0x1b, 0x06, 0xbd, 0x04, 0x30, 0x17, 0x6f,
	0x53, 0xa4, 0xef, 0xa1, 0x67, 0xd0, 0xb8, 0x28, 0xcc, 0xed, 0xdf, 0x20, 0xd2, 0xff, 0xf1, 0x3f,
	0xd0, 0xbf, 0x86, 0x56, 0x5f, 0x57, 0xbf, 0x13, 0x04, 0xd3, 0x23, 0xff, 0x3b, 0x00, 0x91, 0x1c,
	0x0a, 0x2b, 0x8c, 0xba, 0xcb, 0xeb, 0xe5, 0x65, 0x79, 0x1f, 0xa3, 0x99, 0x61, 0x7a, 0x3a, 0xc3,
	0xa4, 0x70, 0xec, 0x15, 0x08, 0xee, 0xab, 0xd5, 0xf6, 0x93, 0xfc, 0x91, 0x3d, 0x6a, 0x59, 0x6a,
	0x79, 0x4b, 0x3d, 0xbf, 0x8f, 0xba, 0x35, 0x1d, 0x19, 0x31, 0xa3, 0x6e, 0x25, 0x58, 0x0b, 0x5f,
	0x0d, 0xf3, 0xe0, 0x54, 0x61, 0xf6, 0xf1, 0x23, 0x90, 0xfa, 0xf9, 0x11, 0xf8, 0xdf, 0x90, 0x68,
	0xc2, 0x37, 0xd8, 0xc3, 0x1f, 0xf3, 0xa9, 0x2f, 0x01, 0x58, 0xfc, 0x14, 0x6c, 0x3d, 0x53, 0x12,
	0x4f, 0x9f, 0x29, 0x89, 0x17, 0xcf, 0x14, 0xf0, 0xa0, 0xad, 0x80, 0xaf, 0xda, 0x0a, 0xf8, 0xbe,
	0xad, 0x80, 0xad, 0xb6, 0x02, 0x7e, 0x6d, 0x2b, 0xe0, 0xb7, 0xb6, 0x92, 0x78, 0xd1, 0x56, 0xc0,
	0x67, 0xdb, 0x4a, 0xe2, 0xf1, 0xb6, 0x02, 0xb6, 0xb6, 0x95, 0xc4, 0xd3, 0x6d, 0x25, 0x71, 0xeb,
	0x8a, 0x45, 0xfd, 0xdb, 0x96, 0xd6, 0xa4, 0x8e, 0x20, 0x8c, 0x61, 0xad, 0xc1, 0x75, 0xf9, 0x51,
	0xa7, 0xcc, 0x2d, 0xfa, 0x8c, 0x36, 0xed, 0x1a, 0x61, 0xc5, 0xce, 0xb6, 0xee, 0x57, 0x2d, 0xaa,
	0x93, 0x4d, 0x11, 0x3d, 0xc3, 0x63, 0xff, 0x2b, 0x54, 0x47, 0xe5, 0x68, 0x3f, 0xfb, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x23, 0x1a, 0x39, 0x77, 0x44, 0x0d, 0x00, 0x00,
}

func (this *ImportF5CSZoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportF5CSZoneRequest)
	if !ok {
		that2, ok := that.(ImportF5CSZoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	return true
}
func (this *ImportF5CSZoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportF5CSZoneResponse)
	if !ok {
		that2, ok := that.(ImportF5CSZoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *F5CSDNSZoneConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5CSDNSZoneConfiguration)
	if !ok {
		that2, ok := that.(F5CSDNSZoneConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DnsType == nil {
		if this.DnsType != nil {
			return false
		}
	} else if this.DnsType == nil {
		return false
	} else if !this.DnsType.Equal(that1.DnsType) {
		return false
	}
	return true
}
func (this *F5CSDNSZoneConfiguration_DnsService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5CSDNSZoneConfiguration_DnsService)
	if !ok {
		that2, ok := that.(F5CSDNSZoneConfiguration_DnsService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsService.Equal(that1.DnsService) {
		return false
	}
	return true
}
func (this *F5CSDNSZoneConfiguration_AdnsService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5CSDNSZoneConfiguration_AdnsService)
	if !ok {
		that2, ok := that.(F5CSDNSZoneConfiguration_AdnsService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdnsService.Equal(that1.AdnsService) {
		return false
	}
	return true
}
func (this *ImportAXFRRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAXFRRequest)
	if !ok {
		that2, ok := that.(ImportAXFRRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PrimaryServer != that1.PrimaryServer {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	if !this.TsigConfiguration.Equal(that1.TsigConfiguration) {
		return false
	}
	return true
}
func (this *TSIGConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSIGConfiguration)
	if !ok {
		that2, ok := that.(TSIGConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TsigKeyName != that1.TsigKeyName {
		return false
	}
	if this.TsigKeyAlgorithm != that1.TsigKeyAlgorithm {
		return false
	}
	if !this.TsigKeyValue.Equal(that1.TsigKeyValue) {
		return false
	}
	return true
}
func (this *ImportAXFRResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAXFRResponse)
	if !ok {
		that2, ok := that.(ImportAXFRResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	return true
}
func (this *GetRemoteZoneFileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRemoteZoneFileRequest)
	if !ok {
		that2, ok := that.(GetRemoteZoneFileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.DnsZoneName != that1.DnsZoneName {
		return false
	}
	return true
}
func (this *GetRemoteZoneFileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRemoteZoneFileResponse)
	if !ok {
		that2, ok := that.(GetRemoteZoneFileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ZoneFile != that1.ZoneFile {
		return false
	}
	return true
}
func (this *GetLocalZoneFileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLocalZoneFileRequest)
	if !ok {
		that2, ok := that.(GetLocalZoneFileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.DnsZoneName != that1.DnsZoneName {
		return false
	}
	return true
}
func (this *GetLocalZoneFileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLocalZoneFileResponse)
	if !ok {
		that2, ok := that.(GetLocalZoneFileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LastAxfrTimestamp.Equal(that1.LastAxfrTimestamp) {
		return false
	}
	if this.ZoneFile != that1.ZoneFile {
		return false
	}
	return true
}
func (this *CloneReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloneReq)
	if !ok {
		that2, ok := that.(CloneReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CloneResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloneResp)
	if !ok {
		that2, ok := that.(CloneResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SuccessZones) != len(that1.SuccessZones) {
		return false
	}
	for i := range this.SuccessZones {
		if this.SuccessZones[i] != that1.SuccessZones[i] {
			return false
		}
	}
	if len(this.FailedZones) != len(that1.FailedZones) {
		return false
	}
	for i := range this.FailedZones {
		if this.FailedZones[i] != that1.FailedZones[i] {
			return false
		}
	}
	return true
}
func (this *ImportF5CSZoneRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_zone.ImportF5CSZoneRequest{")
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportF5CSZoneResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_zone.ImportF5CSZoneResponse{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *F5CSDNSZoneConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.F5CSDNSZoneConfiguration{")
	if this.DnsType != nil {
		s = append(s, "DnsType: "+fmt.Sprintf("%#v", this.DnsType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *F5CSDNSZoneConfiguration_DnsService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.F5CSDNSZoneConfiguration_DnsService{` +
		`DnsService:` + fmt.Sprintf("%#v", this.DnsService) + `}`}, ", ")
	return s
}
func (this *F5CSDNSZoneConfiguration_AdnsService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.F5CSDNSZoneConfiguration_AdnsService{` +
		`AdnsService:` + fmt.Sprintf("%#v", this.AdnsService) + `}`}, ", ")
	return s
}
func (this *ImportAXFRRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_zone.ImportAXFRRequest{")
	s = append(s, "PrimaryServer: "+fmt.Sprintf("%#v", this.PrimaryServer)+",\n")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	if this.TsigConfiguration != nil {
		s = append(s, "TsigConfiguration: "+fmt.Sprintf("%#v", this.TsigConfiguration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TSIGConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_zone.TSIGConfiguration{")
	s = append(s, "TsigKeyName: "+fmt.Sprintf("%#v", this.TsigKeyName)+",\n")
	s = append(s, "TsigKeyAlgorithm: "+fmt.Sprintf("%#v", this.TsigKeyAlgorithm)+",\n")
	if this.TsigKeyValue != nil {
		s = append(s, "TsigKeyValue: "+fmt.Sprintf("%#v", this.TsigKeyValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportAXFRResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_zone.ImportAXFRResponse{")
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRemoteZoneFileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.GetRemoteZoneFileRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "DnsZoneName: "+fmt.Sprintf("%#v", this.DnsZoneName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRemoteZoneFileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_zone.GetRemoteZoneFileResponse{")
	s = append(s, "ZoneFile: "+fmt.Sprintf("%#v", this.ZoneFile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLocalZoneFileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.GetLocalZoneFileRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "DnsZoneName: "+fmt.Sprintf("%#v", this.DnsZoneName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLocalZoneFileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.GetLocalZoneFileResponse{")
	if this.LastAxfrTimestamp != nil {
		s = append(s, "LastAxfrTimestamp: "+fmt.Sprintf("%#v", this.LastAxfrTimestamp)+",\n")
	}
	s = append(s, "ZoneFile: "+fmt.Sprintf("%#v", this.ZoneFile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloneReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dns_zone.CloneReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloneResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.CloneResp{")
	s = append(s, "SuccessZones: "+fmt.Sprintf("%#v", this.SuccessZones)+",\n")
	s = append(s, "FailedZones: "+fmt.Sprintf("%#v", this.FailedZones)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Import F5 Cloud Services DNS Zone
	//
	// x-displayName: "Import F5 Cloud Services DNS Zone"
	// Import F5 Cloud Services DNS Zone
	ImportF5CSZone(ctx context.Context, in *ImportF5CSZoneRequest, opts ...grpc.CallOption) (*ImportF5CSZoneResponse, error)
	// Import DNS Zone
	//
	// x-displayName: "Import DNS Zone"
	// Import DNS Zone via AXFR
	ImportAXFR(ctx context.Context, in *ImportAXFRRequest, opts ...grpc.CallOption) (*ImportAXFRResponse, error)
	// Get remote zone file
	//
	// x-displayName: "Get remote zone file"
	// get remote zone file from primary dns
	GetRemoteZoneFile(ctx context.Context, in *GetRemoteZoneFileRequest, opts ...grpc.CallOption) (*GetRemoteZoneFileResponse, error)
	// Get local zone file
	//
	// x-displayName: "Get local zone file"
	// get local zone file from secondary dns
	GetLocalZoneFile(ctx context.Context, in *GetLocalZoneFileRequest, opts ...grpc.CallOption) (*GetLocalZoneFileResponse, error)
	// Clone From DNSDomain
	//
	// x-displayName: "Clone from DNSDomain"
	// cloning dns domain to DNSZone.
	CloneFromDNSDomain(ctx context.Context, in *CloneReq, opts ...grpc.CallOption) (*CloneResp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) ImportF5CSZone(ctx context.Context, in *ImportF5CSZoneRequest, opts ...grpc.CallOption) (*ImportF5CSZoneResponse, error) {
	out := new(ImportF5CSZoneResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.CustomAPI/ImportF5CSZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ImportAXFR(ctx context.Context, in *ImportAXFRRequest, opts ...grpc.CallOption) (*ImportAXFRResponse, error) {
	out := new(ImportAXFRResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.CustomAPI/ImportAXFR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetRemoteZoneFile(ctx context.Context, in *GetRemoteZoneFileRequest, opts ...grpc.CallOption) (*GetRemoteZoneFileResponse, error) {
	out := new(GetRemoteZoneFileResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.CustomAPI/GetRemoteZoneFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetLocalZoneFile(ctx context.Context, in *GetLocalZoneFileRequest, opts ...grpc.CallOption) (*GetLocalZoneFileResponse, error) {
	out := new(GetLocalZoneFileResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.CustomAPI/GetLocalZoneFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) CloneFromDNSDomain(ctx context.Context, in *CloneReq, opts ...grpc.CallOption) (*CloneResp, error) {
	out := new(CloneResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.CustomAPI/CloneFromDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Import F5 Cloud Services DNS Zone
	//
	// x-displayName: "Import F5 Cloud Services DNS Zone"
	// Import F5 Cloud Services DNS Zone
	ImportF5CSZone(context.Context, *ImportF5CSZoneRequest) (*ImportF5CSZoneResponse, error)
	// Import DNS Zone
	//
	// x-displayName: "Import DNS Zone"
	// Import DNS Zone via AXFR
	ImportAXFR(context.Context, *ImportAXFRRequest) (*ImportAXFRResponse, error)
	// Get remote zone file
	//
	// x-displayName: "Get remote zone file"
	// get remote zone file from primary dns
	GetRemoteZoneFile(context.Context, *GetRemoteZoneFileRequest) (*GetRemoteZoneFileResponse, error)
	// Get local zone file
	//
	// x-displayName: "Get local zone file"
	// get local zone file from secondary dns
	GetLocalZoneFile(context.Context, *GetLocalZoneFileRequest) (*GetLocalZoneFileResponse, error)
	// Clone From DNSDomain
	//
	// x-displayName: "Clone from DNSDomain"
	// cloning dns domain to DNSZone.
	CloneFromDNSDomain(context.Context, *CloneReq) (*CloneResp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) ImportF5CSZone(ctx context.Context, req *ImportF5CSZoneRequest) (*ImportF5CSZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportF5CSZone not implemented")
}
func (*UnimplementedCustomAPIServer) ImportAXFR(ctx context.Context, req *ImportAXFRRequest) (*ImportAXFRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAXFR not implemented")
}
func (*UnimplementedCustomAPIServer) GetRemoteZoneFile(ctx context.Context, req *GetRemoteZoneFileRequest) (*GetRemoteZoneFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteZoneFile not implemented")
}
func (*UnimplementedCustomAPIServer) GetLocalZoneFile(ctx context.Context, req *GetLocalZoneFileRequest) (*GetLocalZoneFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalZoneFile not implemented")
}
func (*UnimplementedCustomAPIServer) CloneFromDNSDomain(ctx context.Context, req *CloneReq) (*CloneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneFromDNSDomain not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_ImportF5CSZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportF5CSZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ImportF5CSZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.CustomAPI/ImportF5CSZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ImportF5CSZone(ctx, req.(*ImportF5CSZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ImportAXFR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAXFRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ImportAXFR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.CustomAPI/ImportAXFR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ImportAXFR(ctx, req.(*ImportAXFRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetRemoteZoneFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteZoneFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetRemoteZoneFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.CustomAPI/GetRemoteZoneFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetRemoteZoneFile(ctx, req.(*GetRemoteZoneFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetLocalZoneFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocalZoneFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetLocalZoneFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.CustomAPI/GetLocalZoneFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetLocalZoneFile(ctx, req.(*GetLocalZoneFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_CloneFromDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CloneFromDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.CustomAPI/CloneFromDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CloneFromDNSDomain(ctx, req.(*CloneReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.dns_zone.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportF5CSZone",
			Handler:    _CustomAPI_ImportF5CSZone_Handler,
		},
		{
			MethodName: "ImportAXFR",
			Handler:    _CustomAPI_ImportAXFR_Handler,
		},
		{
			MethodName: "GetRemoteZoneFile",
			Handler:    _CustomAPI_GetRemoteZoneFile_Handler,
		},
		{
			MethodName: "GetLocalZoneFile",
			Handler:    _CustomAPI_GetLocalZoneFile_Handler,
		},
		{
			MethodName: "CloneFromDNSDomain",
			Handler:    _CustomAPI_CloneFromDNSDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/dns_zone/public_customapi.proto",
}

func (m *ImportF5CSZoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportF5CSZoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportF5CSZoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportF5CSZoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportF5CSZoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportF5CSZoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *F5CSDNSZoneConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5CSDNSZoneConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5CSDNSZoneConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsType != nil {
		{
			size := m.DnsType.Size()
			i -= size
			if _, err := m.DnsType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *F5CSDNSZoneConfiguration_DnsService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5CSDNSZoneConfiguration_DnsService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsService != nil {
		{
			size, err := m.DnsService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *F5CSDNSZoneConfiguration_AdnsService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5CSDNSZoneConfiguration_AdnsService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdnsService != nil {
		{
			size, err := m.AdnsService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ImportAXFRRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportAXFRRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportAXFRRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TsigConfiguration != nil {
		{
			size, err := m.TsigConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PrimaryServer) > 0 {
		i -= len(m.PrimaryServer)
		copy(dAtA[i:], m.PrimaryServer)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.PrimaryServer)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *TSIGConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSIGConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSIGConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TsigKeyValue != nil {
		{
			size, err := m.TsigKeyValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TsigKeyAlgorithm != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.TsigKeyAlgorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TsigKeyName) > 0 {
		i -= len(m.TsigKeyName)
		copy(dAtA[i:], m.TsigKeyName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.TsigKeyName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportAXFRResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportAXFRResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportAXFRResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRemoteZoneFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRemoteZoneFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRemoteZoneFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsZoneName) > 0 {
		i -= len(m.DnsZoneName)
		copy(dAtA[i:], m.DnsZoneName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DnsZoneName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRemoteZoneFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRemoteZoneFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRemoteZoneFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZoneFile) > 0 {
		i -= len(m.ZoneFile)
		copy(dAtA[i:], m.ZoneFile)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ZoneFile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLocalZoneFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalZoneFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLocalZoneFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsZoneName) > 0 {
		i -= len(m.DnsZoneName)
		copy(dAtA[i:], m.DnsZoneName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DnsZoneName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLocalZoneFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalZoneFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLocalZoneFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastAxfrTimestamp != nil {
		{
			size, err := m.LastAxfrTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ZoneFile) > 0 {
		i -= len(m.ZoneFile)
		copy(dAtA[i:], m.ZoneFile)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ZoneFile)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CloneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloneReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloneReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CloneResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloneResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloneResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailedZones) > 0 {
		for iNdEx := len(m.FailedZones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FailedZones[iNdEx])
			copy(dAtA[i:], m.FailedZones[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.FailedZones[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SuccessZones) > 0 {
		for iNdEx := len(m.SuccessZones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SuccessZones[iNdEx])
			copy(dAtA[i:], m.SuccessZones[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.SuccessZones[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImportF5CSZoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ImportF5CSZoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *F5CSDNSZoneConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsType != nil {
		n += m.DnsType.Size()
	}
	return n
}

func (m *F5CSDNSZoneConfiguration_DnsService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsService != nil {
		l = m.DnsService.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *F5CSDNSZoneConfiguration_AdnsService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdnsService != nil {
		l = m.AdnsService.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ImportAXFRRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrimaryServer)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.TsigConfiguration != nil {
		l = m.TsigConfiguration.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *TSIGConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TsigKeyName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.TsigKeyAlgorithm != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.TsigKeyAlgorithm))
	}
	if m.TsigKeyValue != nil {
		l = m.TsigKeyValue.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ImportAXFRResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetRemoteZoneFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.DnsZoneName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetRemoteZoneFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneFile)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetLocalZoneFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.DnsZoneName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetLocalZoneFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneFile)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.LastAxfrTimestamp != nil {
		l = m.LastAxfrTimestamp.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CloneReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CloneResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuccessZones) > 0 {
		for _, s := range m.SuccessZones {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.FailedZones) > 0 {
		for _, s := range m.FailedZones {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImportF5CSZoneRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportF5CSZoneRequest{`,
		`Configuration:` + strings.Replace(this.Configuration.String(), "F5CSDNSZoneConfiguration", "F5CSDNSZoneConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportF5CSZoneResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportF5CSZoneResponse{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "GetSpecType", "GetSpecType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5CSDNSZoneConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5CSDNSZoneConfiguration{`,
		`DnsType:` + fmt.Sprintf("%v", this.DnsType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5CSDNSZoneConfiguration_DnsService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5CSDNSZoneConfiguration_DnsService{`,
		`DnsService:` + strings.Replace(fmt.Sprintf("%v", this.DnsService), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5CSDNSZoneConfiguration_AdnsService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5CSDNSZoneConfiguration_AdnsService{`,
		`AdnsService:` + strings.Replace(fmt.Sprintf("%v", this.AdnsService), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAXFRRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAXFRRequest{`,
		`PrimaryServer:` + fmt.Sprintf("%v", this.PrimaryServer) + `,`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`TsigConfiguration:` + strings.Replace(this.TsigConfiguration.String(), "TSIGConfiguration", "TSIGConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TSIGConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TSIGConfiguration{`,
		`TsigKeyName:` + fmt.Sprintf("%v", this.TsigKeyName) + `,`,
		`TsigKeyAlgorithm:` + fmt.Sprintf("%v", this.TsigKeyAlgorithm) + `,`,
		`TsigKeyValue:` + strings.Replace(fmt.Sprintf("%v", this.TsigKeyValue), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAXFRResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAXFRResponse{`,
		`Configuration:` + strings.Replace(fmt.Sprintf("%v", this.Configuration), "PrimaryDNSGetSpecType", "PrimaryDNSGetSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRemoteZoneFileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRemoteZoneFileRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`DnsZoneName:` + fmt.Sprintf("%v", this.DnsZoneName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRemoteZoneFileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRemoteZoneFileResponse{`,
		`ZoneFile:` + fmt.Sprintf("%v", this.ZoneFile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLocalZoneFileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLocalZoneFileRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`DnsZoneName:` + fmt.Sprintf("%v", this.DnsZoneName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLocalZoneFileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLocalZoneFileResponse{`,
		`ZoneFile:` + fmt.Sprintf("%v", this.ZoneFile) + `,`,
		`LastAxfrTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.LastAxfrTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloneReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloneReq{`,
		`}`,
	}, "")
	return s
}
func (this *CloneResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloneResp{`,
		`SuccessZones:` + fmt.Sprintf("%v", this.SuccessZones) + `,`,
		`FailedZones:` + fmt.Sprintf("%v", this.FailedZones) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImportF5CSZoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportF5CSZoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportF5CSZoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &F5CSDNSZoneConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportF5CSZoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportF5CSZoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportF5CSZoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &GetSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5CSDNSZoneConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5CSDNSZoneConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5CSDNSZoneConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &F5CSDNSZoneConfiguration_DnsService{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdnsService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &F5CSDNSZoneConfiguration_AdnsService{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportAXFRRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportAXFRRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportAXFRRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsigConfiguration == nil {
				m.TsigConfiguration = &TSIGConfiguration{}
			}
			if err := m.TsigConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSIGConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSIGConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSIGConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TsigKeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyAlgorithm", wireType)
			}
			m.TsigKeyAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsigKeyAlgorithm |= TSIGKeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsigKeyValue == nil {
				m.TsigKeyValue = &schema.SecretType{}
			}
			if err := m.TsigKeyValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportAXFRResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportAXFRResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportAXFRResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &PrimaryDNSGetSpecType{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRemoteZoneFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRemoteZoneFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRemoteZoneFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRemoteZoneFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRemoteZoneFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRemoteZoneFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalZoneFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalZoneFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalZoneFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalZoneFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalZoneFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalZoneFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAxfrTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastAxfrTimestamp == nil {
				m.LastAxfrTimestamp = &types.Timestamp{}
			}
			if err := m.LastAxfrTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloneResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloneResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloneResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessZones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessZones = append(m.SuccessZones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedZones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedZones = append(m.FailedZones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

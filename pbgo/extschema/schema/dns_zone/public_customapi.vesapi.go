// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package dns_zone

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCCloneFromDNSDomain(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CloneReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.CloneReq", yamlReq)
	}
	rsp, err := c.grpcClient.CloneFromDNSDomain(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCExportZoneFile(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ExportZoneFileRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ExportZoneFileRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ExportZoneFile(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGetLocalZoneFile(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetLocalZoneFileRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.GetLocalZoneFileRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetLocalZoneFile(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGetRemoteZoneFile(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRemoteZoneFileRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.GetRemoteZoneFileRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetRemoteZoneFile(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCImportAXFR(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ImportAXFRRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ImportAXFRRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ImportAXFR(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCImportBINDCreate(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ImportBINDCreateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ImportBINDCreateRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ImportBINDCreate(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCImportBINDValidate(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ImportBINDValidateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ImportBINDValidateRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ImportBINDValidate(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCImportF5CSZone(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ImportF5CSZoneRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ImportF5CSZoneRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ImportF5CSZone(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["CloneFromDNSDomain"] = ccl.doRPCCloneFromDNSDomain

	rpcFns["ExportZoneFile"] = ccl.doRPCExportZoneFile

	rpcFns["GetLocalZoneFile"] = ccl.doRPCGetLocalZoneFile

	rpcFns["GetRemoteZoneFile"] = ccl.doRPCGetRemoteZoneFile

	rpcFns["ImportAXFR"] = ccl.doRPCImportAXFR

	rpcFns["ImportBINDCreate"] = ccl.doRPCImportBINDCreate

	rpcFns["ImportBINDValidate"] = ccl.doRPCImportBINDValidate

	rpcFns["ImportF5CSZone"] = ccl.doRPCImportF5CSZone

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCCloneFromDNSDomain(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CloneReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.CloneReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("tenant", fmt.Sprintf("%v", req.Tenant))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CloneResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.CloneResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCExportZoneFile(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ExportZoneFileRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ExportZoneFileRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("dns_zone_name", fmt.Sprintf("%v", req.DnsZoneName))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ExportZoneFileResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.ExportZoneFileResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGetLocalZoneFile(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetLocalZoneFileRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.GetLocalZoneFileRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("dns_zone_name", fmt.Sprintf("%v", req.DnsZoneName))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetLocalZoneFileResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.GetLocalZoneFileResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGetRemoteZoneFile(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRemoteZoneFileRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.GetRemoteZoneFileRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("dns_zone_name", fmt.Sprintf("%v", req.DnsZoneName))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetRemoteZoneFileResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.GetRemoteZoneFileResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCImportAXFR(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ImportAXFRRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ImportAXFRRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("domain_name", fmt.Sprintf("%v", req.DomainName))
		q.Add("primary_server", fmt.Sprintf("%v", req.PrimaryServer))
		q.Add("tsig_configuration", fmt.Sprintf("%v", req.TsigConfiguration))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ImportAXFRResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.ImportAXFRResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCImportBINDCreate(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ImportBINDCreateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ImportBINDCreateRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("description", fmt.Sprintf("%v", req.Description))
		q.Add("file", fmt.Sprintf("%v", req.File))
		for _, item := range req.IgnoreZoneList {
			q.Add("ignore_zone_list", fmt.Sprintf("%v", item))
		}

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ImportBINDResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.ImportBINDResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCImportBINDValidate(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ImportBINDValidateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ImportBINDValidateRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("description", fmt.Sprintf("%v", req.Description))
		q.Add("file", fmt.Sprintf("%v", req.File))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ImportBINDResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.ImportBINDResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCImportF5CSZone(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ImportF5CSZoneRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.ImportF5CSZoneRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("configuration", fmt.Sprintf("%v", req.Configuration))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ImportF5CSZoneResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.ImportF5CSZoneResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["CloneFromDNSDomain"] = ccl.doRPCCloneFromDNSDomain

	rpcFns["ExportZoneFile"] = ccl.doRPCExportZoneFile

	rpcFns["GetLocalZoneFile"] = ccl.doRPCGetLocalZoneFile

	rpcFns["GetRemoteZoneFile"] = ccl.doRPCGetRemoteZoneFile

	rpcFns["ImportAXFR"] = ccl.doRPCImportAXFR

	rpcFns["ImportBINDCreate"] = ccl.doRPCImportBINDCreate

	rpcFns["ImportBINDValidate"] = ccl.doRPCImportBINDValidate

	rpcFns["ImportF5CSZone"] = ccl.doRPCImportF5CSZone

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) CloneFromDNSDomain(ctx context.Context, in *CloneReq, opts ...grpc.CallOption) (*CloneResp, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.CustomAPI.CloneFromDNSDomain")
	return c.CustomAPIServer.CloneFromDNSDomain(ctx, in)
}
func (c *customAPIInprocClient) ExportZoneFile(ctx context.Context, in *ExportZoneFileRequest, opts ...grpc.CallOption) (*ExportZoneFileResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.CustomAPI.ExportZoneFile")
	return c.CustomAPIServer.ExportZoneFile(ctx, in)
}
func (c *customAPIInprocClient) GetLocalZoneFile(ctx context.Context, in *GetLocalZoneFileRequest, opts ...grpc.CallOption) (*GetLocalZoneFileResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.CustomAPI.GetLocalZoneFile")
	return c.CustomAPIServer.GetLocalZoneFile(ctx, in)
}
func (c *customAPIInprocClient) GetRemoteZoneFile(ctx context.Context, in *GetRemoteZoneFileRequest, opts ...grpc.CallOption) (*GetRemoteZoneFileResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.CustomAPI.GetRemoteZoneFile")
	return c.CustomAPIServer.GetRemoteZoneFile(ctx, in)
}
func (c *customAPIInprocClient) ImportAXFR(ctx context.Context, in *ImportAXFRRequest, opts ...grpc.CallOption) (*ImportAXFRResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.CustomAPI.ImportAXFR")
	return c.CustomAPIServer.ImportAXFR(ctx, in)
}
func (c *customAPIInprocClient) ImportBINDCreate(ctx context.Context, in *ImportBINDCreateRequest, opts ...grpc.CallOption) (*ImportBINDResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.CustomAPI.ImportBINDCreate")
	return c.CustomAPIServer.ImportBINDCreate(ctx, in)
}
func (c *customAPIInprocClient) ImportBINDValidate(ctx context.Context, in *ImportBINDValidateRequest, opts ...grpc.CallOption) (*ImportBINDResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.CustomAPI.ImportBINDValidate")
	return c.CustomAPIServer.ImportBINDValidate(ctx, in)
}
func (c *customAPIInprocClient) ImportF5CSZone(ctx context.Context, in *ImportF5CSZoneRequest, opts ...grpc.CallOption) (*ImportF5CSZoneResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.CustomAPI.ImportF5CSZone")
	return c.CustomAPIServer.ImportF5CSZone(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) CloneFromDNSDomain(ctx context.Context, in *CloneReq) (*CloneResp, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *CloneResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.CloneReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.CloneFromDNSDomain' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomAPI.CloneFromDNSDomain"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CloneFromDNSDomain(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.CloneResp", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ExportZoneFile(ctx context.Context, in *ExportZoneFileRequest) (*ExportZoneFileResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ExportZoneFileResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ExportZoneFileRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ExportZoneFile' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomAPI.ExportZoneFile"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ExportZoneFile(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ExportZoneFileResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) GetLocalZoneFile(ctx context.Context, in *GetLocalZoneFileRequest) (*GetLocalZoneFileResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *GetLocalZoneFileResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.GetLocalZoneFileRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.GetLocalZoneFile' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomAPI.GetLocalZoneFile"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetLocalZoneFile(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.GetLocalZoneFileResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) GetRemoteZoneFile(ctx context.Context, in *GetRemoteZoneFileRequest) (*GetRemoteZoneFileResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *GetRemoteZoneFileResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.GetRemoteZoneFileRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.GetRemoteZoneFile' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomAPI.GetRemoteZoneFile"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetRemoteZoneFile(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.GetRemoteZoneFileResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ImportAXFR(ctx context.Context, in *ImportAXFRRequest) (*ImportAXFRResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ImportAXFRResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ImportAXFRRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ImportAXFR' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomAPI.ImportAXFR"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ImportAXFR(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ImportAXFRResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ImportBINDCreate(ctx context.Context, in *ImportBINDCreateRequest) (*ImportBINDResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ImportBINDResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ImportBINDCreateRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ImportBINDCreate' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomAPI.ImportBINDCreate"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ImportBINDCreate(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ImportBINDResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ImportBINDValidate(ctx context.Context, in *ImportBINDValidateRequest) (*ImportBINDResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ImportBINDResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ImportBINDValidateRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ImportBINDValidate' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomAPI.ImportBINDValidate"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ImportBINDValidate(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ImportBINDResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ImportF5CSZone(ctx context.Context, in *ImportF5CSZoneRequest) (*ImportF5CSZoneResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ImportF5CSZoneResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ImportF5CSZoneRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ImportF5CSZone' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomAPI.ImportF5CSZone"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ImportF5CSZone(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.ImportF5CSZoneResponse", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Import DNS Zone",
        "description": "Import DNS Zone",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/system/dns_zone/clone_from_dns_domain": {
            "post": {
                "summary": "Clone from DNSDomain",
                "description": "cloning dns domain to DNSZone.",
                "operationId": "ves.io.schema.dns_zone.CustomAPI.CloneFromDNSDomain",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneCloneResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dns_zoneCloneReq"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-customapi-clonefromdnsdomain"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.CustomAPI.CloneFromDNSDomain"
            },
            "x-displayname": "DNS Zone Custom API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/dns_zone/import": {
            "post": {
                "summary": "Import F5 Cloud Services DNS Zone",
                "description": "Import F5 Cloud Services DNS Zone",
                "operationId": "ves.io.schema.dns_zone.CustomAPI.ImportF5CSZone",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneImportF5CSZoneResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dns_zoneImportF5CSZoneRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-customapi-importf5cszone"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.CustomAPI.ImportF5CSZone"
            },
            "x-displayname": "DNS Zone Custom API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/dns_zone/import_axfr": {
            "post": {
                "summary": "Import DNS Zone",
                "description": "Import DNS Zone via AXFR",
                "operationId": "ves.io.schema.dns_zone.CustomAPI.ImportAXFR",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneImportAXFRResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dns_zoneImportAXFRRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-customapi-importaxfr"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.CustomAPI.ImportAXFR"
            },
            "x-displayname": "DNS Zone Custom API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/dns_zone/import_bind_create": {
            "post": {
                "summary": "Import BIND Files",
                "description": "Import BIND Files to Create DNS Zones",
                "operationId": "ves.io.schema.dns_zone.CustomAPI.ImportBINDCreate",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneImportBINDResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dns_zoneImportBINDCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-customapi-importbindcreate"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.CustomAPI.ImportBINDCreate"
            },
            "x-displayname": "DNS Zone Custom API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/dns_zone/import_bind_validate": {
            "post": {
                "summary": "Validate BIND Files",
                "description": "Validate BIND Files for Import",
                "operationId": "ves.io.schema.dns_zone.CustomAPI.ImportBINDValidate",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneImportBINDResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dns_zoneImportBINDValidateRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-customapi-importbindvalidate"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.CustomAPI.ImportBINDValidate"
            },
            "x-displayname": "DNS Zone Custom API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/dns_zone/{dns_zone_name}/local_zone_file": {
            "get": {
                "summary": "Get Local Zone File",
                "description": "get local zone file from secondary dns",
                "operationId": "ves.io.schema.dns_zone.CustomAPI.GetLocalZoneFile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneGetLocalZoneFileResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"system\"\nNamespace is always system for dns_zone",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "dns_zone_name",
                        "description": "Name\n\nx-example: \"example.com\"\nName dns_zone object which is also the DNS zone",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-customapi-getlocalzonefile"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.CustomAPI.GetLocalZoneFile"
            },
            "x-displayname": "DNS Zone Custom API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/dns_zone/{dns_zone_name}/remote_zone_file": {
            "get": {
                "summary": "Get Remote Zone File",
                "description": "get remote zone file from primary dns",
                "operationId": "ves.io.schema.dns_zone.CustomAPI.GetRemoteZoneFile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneGetRemoteZoneFileResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"system\"\nNamespace is always system for dns_zone",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "dns_zone_name",
                        "description": "Name\n\nx-example: \"example.com\"\nName dns_zone object which is also the DNS zone",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-customapi-getremotezonefile"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.CustomAPI.GetRemoteZoneFile"
            },
            "x-displayname": "DNS Zone Custom API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/dns_zone/{dns_zone_name}/zone_file/export": {
            "get": {
                "summary": "Export Zone File",
                "description": "Export Zone File",
                "operationId": "ves.io.schema.dns_zone.CustomAPI.ExportZoneFile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneExportZoneFileResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"system\"\nNamespace is always system for dns_zone",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "dns_zone_name",
                        "description": "Name\n\nx-example: \"example.com\"\nName dns_zone object which is also the DNS zone",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-customapi-exportzonefile"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.CustomAPI.ExportZoneFile"
            },
            "x-displayname": "DNS Zone Custom API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "dns_zoneAFSDBRecordSubtype": {
            "type": "string",
            "description": "AFS Volume Location Server or DCE Authentication Server.\n\n - NONE: NONE\n\n - AFSVolumeLocationServer: AFS Volume Location Server\n\n - DCEAuthenticationServer: DCE Authentication Server\n",
            "title": "AFSDB Record Subtype",
            "enum": [
                "NONE",
                "AFSVolumeLocationServer",
                "DCEAuthenticationServer"
            ],
            "default": "NONE",
            "x-displayname": "AFSDB Record Subtype",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.AFSDBRecordSubtype"
        },
        "dns_zoneAFSDBRecordValue": {
            "type": "object",
            "title": "AFSDBRecordValue",
            "x-displayname": "AFSDBRecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.AFSDBRecordValue",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Server name of the AFS cell database server or the DCE name server.\n\nExample: - \"mail.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.hostname: true\n",
                    "title": "Hostname",
                    "x-displayname": "Hostname",
                    "x-ves-example": "mail.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "subtype": {
                    "description": " AFSDB Record Subtype.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Subtype",
                    "$ref": "#/definitions/dns_zoneAFSDBRecordSubtype",
                    "x-displayname": "Subtype",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "dns_zoneCERTAlgorithm": {
            "type": "string",
            "description": "CERT algorithm value must be compatible with the specified algorithm.\n\n - RESERVEDALGORITHM: RESERVEDALGORITHM\n\n - RSAMD5: RSAMD5\n\n - DH: DH\n\n - DSASHA1: DSASHA1\n\n - ECC: ECC\n\n - RSASHA1ALGORITHM: RSA-SHA1\n\n - INDIRECT: INDIRECT\n\n - PRIVATEDNS: PRIVATEDNS\n\n - PRIVATEOID: PRIVATEOID\n",
            "title": "CERT Algorithm",
            "enum": [
                "RESERVEDALGORITHM",
                "RSAMD5",
                "DH",
                "DSASHA1",
                "ECC",
                "RSASHA1ALGORITHM",
                "INDIRECT",
                "PRIVATEDNS",
                "PRIVATEOID"
            ],
            "default": "RESERVEDALGORITHM",
            "x-displayname": "CERT Algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.CERTAlgorithm"
        },
        "dns_zoneCERTRecordValue": {
            "type": "object",
            "title": "CERTRecordValue",
            "x-displayname": "CERTRecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CERTRecordValue",
            "properties": {
                "algorithm": {
                    "description": "\nExample: - \"3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Algorithm",
                    "$ref": "#/definitions/dns_zoneCERTAlgorithm",
                    "x-displayname": "Algorithm",
                    "x-ves-example": "3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "cert_key_tag": {
                    "type": "integer",
                    "description": "\nExample: - \"3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Key Tag",
                    "format": "int64",
                    "x-displayname": "Key Tag",
                    "x-ves-example": "3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "cert_type": {
                    "description": "\nExample: - \"PKIX\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Type",
                    "$ref": "#/definitions/dns_zoneCERTType",
                    "x-displayname": "Type",
                    "x-ves-example": "PKIX",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "certificate": {
                    "type": "string",
                    "description": " Certificate in base 64 format.\n\nExample: - \"Ab100cFg\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 4096\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certificate",
                    "minLength": 1,
                    "maxLength": 4096,
                    "x-displayname": "Certificate",
                    "x-ves-example": "Ab100cFg",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "4096",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "dns_zoneCERTResourceRecord": {
            "type": "object",
            "description": "DNS CERT Record",
            "title": "CERTResourceRecord",
            "x-displayname": "DNS CERT Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CERTResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CERT Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "CERT Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneCERTRecordValue"
                    },
                    "x-displayname": "CERT Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneCERTType": {
            "type": "string",
            "description": "CERT type value must be compatible with the specified types.\n\n - INVALIDCERTTYPE: INVALIDCERTTYPE\n\n - PKIX: PKIX\n\n - SPKI: SPKI\n\n - PGP: PGP\n\n - IPKIX: IPKIX\n\n - ISPKI: ISPKI\n\n - IPGP: IPGP\n\n - ACPKIX: ACPKIX\n\n - IACPKIX: IACPKIX\n\n - URI_: URI\n\n - OID: OID\n",
            "title": "CERT Type",
            "enum": [
                "INVALIDCERTTYPE",
                "PKIX",
                "SPKI",
                "PGP",
                "IPKIX",
                "ISPKI",
                "IPGP",
                "ACPKIX",
                "IACPKIX",
                "URI_",
                "OID"
            ],
            "default": "INVALIDCERTTYPE",
            "x-displayname": "CERT Type",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.CERTType"
        },
        "dns_zoneCertificationAuthorityAuthorization": {
            "type": "object",
            "title": "CertificationAuthorityAuthorization",
            "x-displayname": "CertificationAuthorityAuthorization",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CertificationAuthorityAuthorization",
            "properties": {
                "flags": {
                    "type": "integer",
                    "description": " This flag should be an integer between 0 and 255.\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 255\n",
                    "title": "Certification authority authorization flags",
                    "format": "int64",
                    "x-displayname": "Flags",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "255"
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "\n\nExample: - \"issue\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"issue\\\", \\\"issuewild\\\", \\\"iodef\\\"]\n",
                    "title": "Certification authority authorization tag",
                    "x-displayname": "Tag",
                    "x-ves-example": "issue",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"issue\\\", \\\"issuewild\\\", \\\"iodef\\\"]"
                    }
                },
                "value": {
                    "type": "string",
                    "description": "\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 1024\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certification authority authorization value",
                    "minLength": 1,
                    "maxLength": 1024,
                    "x-displayname": "Value",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "1024",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "dns_zoneCloneReq": {
            "type": "object",
            "description": "Clone Request",
            "title": "Clone Request",
            "x-displayname": "Clone Request",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CloneReq",
            "properties": {
                "tenant": {
                    "type": "string",
                    "description": " Tenant for which dns domain cloned",
                    "title": "Tenant name",
                    "x-displayname": "Tenant name"
                }
            }
        },
        "dns_zoneCloneResp": {
            "type": "object",
            "description": "Clone Response",
            "title": "Clone Response",
            "x-displayname": "Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CloneResp",
            "properties": {
                "failed_zones": {
                    "type": "array",
                    "description": " Zones failed",
                    "title": "Zones failed",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Zones Failed"
                },
                "success_zones": {
                    "type": "array",
                    "description": " Zones succeeded",
                    "title": "Zones succeeded",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Zones Succeeded"
                }
            }
        },
        "dns_zoneDLVResourceRecord": {
            "type": "object",
            "description": "x-displayName: \"DNS DLV Record\"\nDNS DLV Record",
            "title": "DLVResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Record Name (Excluding Domain name)\"\nx-example: \"www or mail or * or ww* or *ab\"\nDLV Record name, please provide only the specific subdomain or record name without the base domain.",
                    "title": "Record Name"
                },
                "values": {
                    "type": "array",
                    "description": "x-displayName: \"DLV Value\"\nx-example: \"values\"\nx-required\nIt uses the same format as the DS record.",
                    "title": "DLV Value",
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    }
                }
            }
        },
        "dns_zoneDNSAAAAResourceRecord": {
            "type": "object",
            "description": "RecordSet for AAAA Records",
            "title": "DNSAAAAResourceRecord",
            "x-displayname": "DNSAAAAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAAAAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " AAAA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": " A valid IPv6 address, for example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n\nExample: - \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv6: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "IPv6 addresses",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv6 Addresses",
                    "x-ves-example": "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv6": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSAFSDBRecord": {
            "type": "object",
            "description": "DNS AFSDB Record",
            "title": "DNSAFSDBRecord",
            "x-displayname": "DNS AFSDB Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAFSDBRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " AFSDB Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "AFSDB Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneAFSDBRecordValue"
                    },
                    "x-displayname": "AFSDB Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSAResourceRecord": {
            "type": "object",
            "description": "A Records",
            "title": "DNSAResourceRecord",
            "x-displayname": "DNSAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " A Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": " A valid IPv4 address, for example: 1.1.1.1\n\nExample: - \"1.1.1.1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv4: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "IPv4 addresses",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv4 Addresses",
                    "x-ves-example": "1.1.1.1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv4": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSAliasResourceRecord": {
            "type": "object",
            "title": "DNSAliasResourceRecord",
            "x-displayname": "DNSAliasResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAliasResourceRecord",
            "properties": {
                "value": {
                    "type": "string",
                    "description": " A valid domain name, for example: example.com\n\nExample: - \"example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Domain",
                    "maxLength": 255,
                    "x-displayname": "Domain",
                    "x-ves-example": "example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                }
            }
        },
        "dns_zoneDNSCAAResourceRecord": {
            "type": "object",
            "title": "DNSCAAResourceRecord",
            "x-displayname": "DNSCAAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCAAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CAA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 100\n",
                    "title": "CAA Record Value",
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneCertificationAuthorityAuthorization"
                    },
                    "x-displayname": "CAA Record Value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "100"
                    }
                }
            }
        },
        "dns_zoneDNSCDSRecord": {
            "type": "object",
            "description": "DNS CDS Record",
            "title": "DNSCDSRecord",
            "x-displayname": "DNS CDS Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCDSRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CDS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "DS Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    },
                    "x-displayname": "DS Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSCNAMEResourceRecord": {
            "type": "object",
            "title": "DNSCNAMEResourceRecord",
            "x-displayname": "DNSCNAMEResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCNAMEResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CName Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.pattern: ^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.pattern": "^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "value": {
                    "type": "string",
                    "description": "\n\nExample: - \"example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Domain",
                    "maxLength": 255,
                    "x-displayname": "Domain",
                    "x-ves-example": "example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                }
            }
        },
        "dns_zoneDNSDSRecord": {
            "type": "object",
            "description": "DNS DS Record",
            "title": "DNSDSRecord",
            "x-displayname": "DNS DS Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSDSRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " DS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "DS Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    },
                    "x-displayname": "DS Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSEUI48ResourceRecord": {
            "type": "object",
            "description": "DNS EUI48 Record",
            "title": "DNSEUI48ResourceRecord",
            "x-displayname": "DNS EUI48 Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSEUI48ResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " EUI48 Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "value": {
                    "type": "string",
                    "description": " A valid eui48 identifier, for example: 01-23-45-67-89-ab\n\nExample: - \"01-23-45-67-89-ab\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 17\n  ves.io.schema.rules.string.min_len: 17\n  ves.io.schema.rules.string.pattern: ^([0-9A-Fa-f]{2}-){5}([0-9A-Fa-f]{2})$\n",
                    "title": "EUI48 Identifier",
                    "minLength": 17,
                    "maxLength": 17,
                    "x-displayname": "EUI48 Identifier",
                    "x-ves-example": "01-23-45-67-89-ab",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "17",
                        "ves.io.schema.rules.string.min_len": "17",
                        "ves.io.schema.rules.string.pattern": "^([0-9A-Fa-f]{2}-){5}([0-9A-Fa-f]{2})$"
                    }
                }
            }
        },
        "dns_zoneDNSEUI64ResourceRecord": {
            "type": "object",
            "description": "DNS EUI64 Record",
            "title": "DNSEUI64ResourceRecord",
            "x-displayname": "DNS EUI64 Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSEUI64ResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " EUI64 Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "value": {
                    "type": "string",
                    "description": " A valid EUI64 identifier, for example: 01-23-45-67-89-ab-cd-ef\n\nExample: - \"01-23-45-67-89-ab-cd-ef\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 23\n  ves.io.schema.rules.string.min_len: 23\n  ves.io.schema.rules.string.pattern: ^([0-9A-Fa-f]{2}-){7}([0-9A-Fa-f]{2})$\n",
                    "title": "EUI64 Identifier",
                    "minLength": 23,
                    "maxLength": 23,
                    "x-displayname": "EUI64 Identifier",
                    "x-ves-example": "01-23-45-67-89-ab-cd-ef",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "23",
                        "ves.io.schema.rules.string.min_len": "23",
                        "ves.io.schema.rules.string.pattern": "^([0-9A-Fa-f]{2}-){7}([0-9A-Fa-f]{2})$"
                    }
                }
            }
        },
        "dns_zoneDNSLBResourceRecord": {
            "type": "object",
            "description": "DNS Load Balancer Record",
            "title": "DNSLBResourcerecord",
            "x-displayname": "DNS Load Balancer Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSLBResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Load Balancer record name (except for SRV DNS Load balancer record) should be a simple record name and not a subdomain of a subdomain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Record Name",
                    "maxLength": 255,
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                },
                "value": {
                    "title": "DNS LB Record",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "DNS Load Balancer Record"
                }
            }
        },
        "dns_zoneDNSLOCResourceRecord": {
            "type": "object",
            "description": "DNS LOC Record",
            "title": "DNSLOCResourceRecord",
            "x-displayname": "DNS LOC Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSLOCResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " LOC Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"32 7 19 S 116 2 25 E 10m\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "LOC Values",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneLOCValue"
                    },
                    "x-displayname": "LOC Value",
                    "x-ves-example": "32 7 19 S 116 2 25 E 10m",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSMXResourceRecord": {
            "type": "object",
            "title": "DNSMXResourceRecord",
            "x-displayname": "DNSMXResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSMXResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " MX Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n",
                    "title": "Value",
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneMailExchanger"
                    },
                    "x-displayname": "MX Record Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100"
                    }
                }
            }
        },
        "dns_zoneDNSNAPTRResourceRecord": {
            "type": "object",
            "description": "DNS NAPTR Record",
            "title": "DNSNAPTRResourceRecord",
            "x-displayname": "DNS NAPTR Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSNAPTRResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " NAPTR Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "NAPTR Values",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneNAPTRValue"
                    },
                    "x-displayname": "NAPTR Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSNSResourceRecord": {
            "type": "object",
            "title": "DNSNSResourceRecord",
            "x-displayname": "DNSNSResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSNSResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " NS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.we\" or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.we\" or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"ns1.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Name-servers",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Name Servers",
                    "x-ves-example": "ns1.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSPTRResourceRecord": {
            "type": "object",
            "title": "DNSPTRResourceRecord",
            "x-displayname": "DNSPTRResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSPTRResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " PTR Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"my.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Domain names",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domain Name",
                    "x-ves-example": "my.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSSECMode": {
            "type": "object",
            "title": "DNSSEC Mode Disable",
            "x-displayname": "Disable",
            "x-ves-oneof-field-mode": "[\"disable\",\"enable\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSSECMode",
            "properties": {
                "disable": {
                    "description": "Exclusive with [enable]\n DNSSEC disabled",
                    "title": "Disable",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable"
                },
                "enable": {
                    "description": "Exclusive with [disable]\n DNSSEC enable",
                    "title": "Enable",
                    "$ref": "#/definitions/dns_zoneDNSSECModeEnable",
                    "x-displayname": "Enable"
                }
            }
        },
        "dns_zoneDNSSECModeEnable": {
            "type": "object",
            "description": "DNSSEC enable",
            "title": "Enable",
            "x-displayname": "Enable",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSSECModeEnable"
        },
        "dns_zoneDNSSRVResourceRecord": {
            "type": "object",
            "title": "DNSSRVResourceRecord",
            "x-displayname": "DNSSRVResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSSRVResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " SRV Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.pattern: ^([*]|[a-zA-Z0-9-_]{1,63})([.][a-zA-Z0-9-_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.pattern": "^([*]|[a-zA-Z0-9-_]{1,63})([.][a-zA-Z0-9-_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "SRV Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneSRVService"
                    },
                    "x-displayname": "SRV Value",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSTXTResourceRecord": {
            "type": "object",
            "title": "DNSTXTResourceRecord",
            "x-displayname": "DNSTXTResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSTXTResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " TXT Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.max_len: 4000\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Text",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string",
                        "maxLength": 4000
                    },
                    "x-displayname": "Text",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.max_len": "4000",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDSKeyAlgorithm": {
            "type": "string",
            "description": "DS key value must be compatible with the specified algorithm.\n\n - UNSPECIFIED: UNSPECIFIED\n\n - RSASHA1: RSASHA1\n\n - RSASHA1NSEC3SHA1: RSASHA1-NSEC3-SHA1\n\n - RSASHA256: RSASHA256\n\n - RSASHA512: RSASHA512\n\n - ECDSAP256SHA256: ECDSAP256SHA256\n\n - ECDSAP384SHA384: ECDSAP384SHA384\n\n - ED25519: ED25519\n\n - ED448: ED448\n",
            "title": "DS Key Algorithm",
            "enum": [
                "UNSPECIFIED",
                "RSASHA1",
                "RSASHA1NSEC3SHA1",
                "RSASHA256",
                "RSASHA512",
                "ECDSAP256SHA256",
                "ECDSAP384SHA384",
                "ED25519",
                "ED448"
            ],
            "default": "UNSPECIFIED",
            "x-displayname": "DS Key algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.DSKeyAlgorithm"
        },
        "dns_zoneDSRecordValue": {
            "type": "object",
            "title": "DSRecordValue",
            "x-displayname": "DSRecordValue",
            "x-ves-oneof-field-digest_choice": "[\"sha1_digest\",\"sha256_digest\",\"sha384_digest\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DSRecordValue",
            "properties": {
                "ds_key_algorithm": {
                    "description": " DS key value must be compatible with the specified algorithm.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DS Key Algorithm",
                    "$ref": "#/definitions/dns_zoneDSKeyAlgorithm",
                    "x-displayname": "DS Key algorithm",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "key_tag": {
                    "type": "integer",
                    "description": " A short numeric value which can help quickly identify the referenced DNSKEY-record.\n\nExample: - \"15228\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Key Tag",
                    "format": "int64",
                    "x-displayname": "Key Tag",
                    "x-ves-example": "15228",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "sha1_digest": {
                    "description": "Exclusive with [sha256_digest sha384_digest]\n",
                    "title": "SHA1 Digest",
                    "$ref": "#/definitions/dns_zoneSHA1Digest",
                    "x-displayname": "SHA1 Digest"
                },
                "sha256_digest": {
                    "description": "Exclusive with [sha1_digest sha384_digest]\n",
                    "title": "SHA256 Digest",
                    "$ref": "#/definitions/dns_zoneSHA256Digest",
                    "x-displayname": "SHA256 Digest"
                },
                "sha384_digest": {
                    "description": "Exclusive with [sha1_digest sha256_digest]\n",
                    "title": "SHA384 Digest",
                    "$ref": "#/definitions/dns_zoneSHA384Digest",
                    "x-displayname": "SHA384 Digest"
                }
            }
        },
        "dns_zoneExportZoneFileResponse": {
            "type": "object",
            "description": "Export Zone File Response",
            "title": "Export Zone File Response",
            "x-displayname": "Export Zone File Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ExportZoneFileResponse",
            "properties": {
                "html_data": {
                    "type": "string",
                    "description": " Base64-encoded zone file",
                    "title": "HTML data",
                    "x-displayname": "HTML Data"
                }
            }
        },
        "dns_zoneF5CSDNSZoneConfiguration": {
            "type": "object",
            "description": "F5 Cloud Services DNS primary or secondary zone configuration",
            "title": "F5 Cloud Services DNS zone configuration",
            "x-displayname": "F5 Cloud Services DNS Zone Configuration",
            "x-ves-oneof-field-dns_type": "[\"adns_service\",\"dns_service\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.F5CSDNSZoneConfiguration",
            "properties": {
                "adns_service": {
                    "type": "object",
                    "description": "Exclusive with [dns_service]\n F5 Cloud Services secondary zone configuration",
                    "title": "Secondary zone configuration",
                    "x-displayname": "Secondary Zone Configuration"
                },
                "dns_service": {
                    "type": "object",
                    "description": "Exclusive with [adns_service]\n F5 Cloud Services primary zone configuration",
                    "title": "Primary zone configuration",
                    "x-displayname": "Primary Zone Configuration"
                }
            }
        },
        "dns_zoneGetLocalZoneFileResponse": {
            "type": "object",
            "description": "Get local zone file Response",
            "title": "Get local zone file Response",
            "x-displayname": "Get Local Zone File Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.GetLocalZoneFileResponse",
            "properties": {
                "last_axfr_timestamp": {
                    "type": "string",
                    "description": " Last successful zone transfer timestamp.",
                    "title": "Last AXFR timestamp",
                    "format": "date-time",
                    "x-displayname": "Last Successful AXFR Timestamp"
                },
                "zone_file": {
                    "type": "string",
                    "description": " Local zone file from secondary dns",
                    "title": "Local zone file",
                    "x-displayname": "Local Zone File"
                }
            }
        },
        "dns_zoneGetRemoteZoneFileResponse": {
            "type": "object",
            "description": "Get remote zone file Response",
            "title": "Get remote zone file Response",
            "x-displayname": "Get Remote Zone File Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.GetRemoteZoneFileResponse",
            "properties": {
                "zone_file": {
                    "type": "string",
                    "description": " Remote zone file from primary dns",
                    "title": "Remote zone file",
                    "x-displayname": "Remote Zone File"
                }
            }
        },
        "dns_zoneGetSpecType": {
            "type": "object",
            "description": "Get DNS Zone details.",
            "title": "Get DNS Zone",
            "x-displayname": "Get DNS Zone",
            "x-ves-oneof-field-dns_type": "[\"primary\",\"secondary\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.GetSpecType",
            "properties": {
                "domain": {
                    "type": "string"
                },
                "num_of_dns_records": {
                    "type": "integer",
                    "description": " Number of DNS records displays number of dns records for each zone",
                    "format": "int64",
                    "x-displayname": "Number of DNS records"
                },
                "primary": {
                    "description": "Exclusive with [secondary]\n Primary DNS",
                    "$ref": "#/definitions/dns_zonePrimaryDNSGetSpecType",
                    "x-displayname": "Primary DNS Configuration"
                },
                "secondary": {
                    "description": "Exclusive with [primary]\n Secondary DNS",
                    "$ref": "#/definitions/dns_zoneSecondaryDNSGetSpecType",
                    "x-displayname": "Secondary DNS Configuration"
                }
            }
        },
        "dns_zoneImportAXFRRequest": {
            "type": "object",
            "description": "DNS zone import via AXFR",
            "title": "Import DNS Zone",
            "x-displayname": "Import DNS Zone",
            "x-ves-displayorder": "7,3,8",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ImportAXFRRequest",
            "properties": {
                "domain_name": {
                    "type": "string",
                    "description": " Name of the zone to be imported\n\nExample: - \"example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 256\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Domain Name",
                    "minLength": 1,
                    "maxLength": 256,
                    "x-displayname": "Domain Name",
                    "x-ves-example": "example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "256",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "primary_server": {
                    "type": "string",
                    "description": "\nExample: - \"1.2.3.4\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "Primary Server",
                    "x-displayname": "Primary DNS Server",
                    "x-ves-example": "1.2.3.4",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "tsig_configuration": {
                    "description": " TSIG Configuration",
                    "title": "TSIG Configuration",
                    "$ref": "#/definitions/dns_zoneTSIGConfiguration",
                    "x-displayname": "TSIG Configuration"
                }
            }
        },
        "dns_zoneImportAXFRResponse": {
            "type": "object",
            "description": "Import AXFR Response",
            "title": "Import Response",
            "x-displayname": "Import Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ImportAXFRResponse",
            "properties": {
                "configuration": {
                    "title": "DNS Zone Configuration",
                    "$ref": "#/definitions/dns_zonePrimaryDNSGetSpecType",
                    "x-displayname": "Primary DNS Configuration"
                }
            }
        },
        "dns_zoneImportBINDCreateRequest": {
            "type": "object",
            "title": "Import BIND Create Request",
            "x-displayname": "Import BIND Create Request",
            "x-ves-displayorder": "2,1",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ImportBINDCreateRequest",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " Optional description about zone, import method, etc.",
                    "title": "Description",
                    "x-displayname": "Description"
                },
                "file": {
                    "type": "string",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.bytes.max_len: 2097152\n  ves.io.schema.rules.message.required: true\n",
                    "title": "BIND Zip File",
                    "format": "byte",
                    "maximum": 2097152,
                    "x-displayname": "BIND Zip File",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.bytes.max_len": "2097152",
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "dns_zoneImportBINDResponse": {
            "type": "object",
            "title": "Import BIND Response",
            "x-displayname": "Import BIND Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ImportBINDResponse",
            "properties": {
                "invalid_zone_list": {
                    "type": "array",
                    "description": " Zones that we failed to parse. On submission, objects will not be created for any detected zone in this list.",
                    "title": "Invalid Zone List",
                    "items": {
                        "$ref": "#/definitions/dns_zoneInvalidZone"
                    },
                    "x-displayname": "Invalid Zone List"
                },
                "success_created_zone_count": {
                    "type": "integer",
                    "title": "Success Created Zone Count",
                    "format": "int64",
                    "x-displayname": "Success Created Zone Count"
                },
                "valid_zone_list": {
                    "type": "array",
                    "description": " Zones that we parsed succcessfully. On submission, objects will be created for every zone in this list. ",
                    "title": "Valid Zone List",
                    "items": {
                        "$ref": "#/definitions/dns_zoneValidZone"
                    },
                    "x-displayname": "Valid Zone List"
                }
            }
        },
        "dns_zoneImportBINDValidateRequest": {
            "type": "object",
            "title": "Import BIND Validate Request",
            "x-displayname": "Import BIND Validate Request",
            "x-ves-displayorder": "2,1",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ImportBINDValidateRequest",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " Optional description about zone, import method, etc.",
                    "title": "Description",
                    "x-displayname": "Description"
                },
                "file": {
                    "type": "string",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.bytes.max_len: 2097152\n  ves.io.schema.rules.message.required: true\n",
                    "title": "BIND Zip File",
                    "format": "byte",
                    "maximum": 2097152,
                    "x-displayname": "BIND Zip File",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.bytes.max_len": "2097152",
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "dns_zoneImportF5CSZoneRequest": {
            "type": "object",
            "description": "Import F5 Cloud Services DNS zone",
            "title": "Import F5 Cloud Services DNS zone",
            "x-displayname": "Import F5 Cloud Services DNS zone",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ImportF5CSZoneRequest",
            "properties": {
                "configuration": {
                    "description": " Configuration of DNS primary or secondary zone to import",
                    "title": "DNS zone configuration",
                    "$ref": "#/definitions/dns_zoneF5CSDNSZoneConfiguration",
                    "x-displayname": "DNS Zone Configuration"
                }
            }
        },
        "dns_zoneImportF5CSZoneResponse": {
            "type": "object",
            "description": "Import F5 Cloud Services DNS zone response",
            "title": "Import F5 Cloud Services DNS zone response",
            "x-displayname": "Import F5 Cloud Services DNS Zone Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ImportF5CSZoneResponse",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the DNS Zone",
                    "title": "spec",
                    "$ref": "#/definitions/dns_zoneGetSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "dns_zoneInvalidZone": {
            "type": "object",
            "title": "Invalid Zone",
            "x-displayname": "Invalid Zone",
            "x-ves-proto-message": "ves.io.schema.dns_zone.InvalidZone",
            "properties": {
                "validation_error": {
                    "type": "string",
                    "title": "Validation Error",
                    "x-displayname": "Validation Error"
                },
                "zone_name": {
                    "type": "string",
                    "title": "Zone Name",
                    "x-displayname": "Zone Name"
                }
            }
        },
        "dns_zoneLOCValue": {
            "type": "object",
            "title": "LOCValue",
            "x-displayname": "LOCValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.LOCValue",
            "properties": {
                "altitude": {
                    "type": "number",
                    "description": " Altitude in meters\n\nExample: - \"20.3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: -100000.00\n  ves.io.schema.rules.float.lte: 42849672.95\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Altitude",
                    "format": "float",
                    "x-displayname": "Altitude",
                    "x-ves-example": "20.3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "-100000.00",
                        "ves.io.schema.rules.float.lte": "42849672.95",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "horizontal_precision": {
                    "type": "number",
                    "description": " Horizontal Precision in meters\n\nExample: - \"30.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Horizontal Precision",
                    "format": "float",
                    "x-displayname": "Horizontal Precision",
                    "x-ves-example": "30.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                },
                "latitude_degree": {
                    "type": "integer",
                    "description": " Latitude degree, an integer between 0 and 90, including 0 and 90\n\nExample: - \"51\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 90\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Latitude degree",
                    "format": "int32",
                    "x-displayname": "Latitude degree",
                    "x-ves-example": "51",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "90",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "latitude_hemisphere": {
                    "description": " Latitude hemisphere, N or S\n\nExample: - \"N\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Latitude hemisphere",
                    "$ref": "#/definitions/dns_zoneLatitudeHemisphere",
                    "x-displayname": "Latitude hemisphere",
                    "x-ves-example": "N",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "latitude_minute": {
                    "type": "integer",
                    "description": " Latitude minute, an integer between 0 and 59, including 0 and 59\n\nExample: - \"30\"-\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 59\n",
                    "title": "Latitude minute",
                    "format": "int32",
                    "x-displayname": "Latitude minute",
                    "x-ves-example": "30",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "59"
                    }
                },
                "latitude_second": {
                    "type": "number",
                    "description": " Latitude second, an decimal between 0 and 59.999, including 0 and 59.999\n\nExample: - \"12.000\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 59.999\n",
                    "title": "Latitude second",
                    "format": "float",
                    "x-displayname": "Latitude second",
                    "x-ves-example": "12.000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "59.999"
                    }
                },
                "location_diameter": {
                    "type": "number",
                    "description": " Diameter of a sphere enclosing the described entity, in meters\n\nExample: - \"30.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Size",
                    "format": "float",
                    "x-displayname": "Size",
                    "x-ves-example": "30.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                },
                "longitude_degree": {
                    "type": "integer",
                    "description": " Longitude degree, an integer between 0 and 180, including 0 and 180\n\nExample: - \"51\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 180\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Longitude degree",
                    "format": "int32",
                    "x-displayname": "Longitude degree",
                    "x-ves-example": "51",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "180",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "longitude_hemisphere": {
                    "description": " Longitude hemisphere, E or W\n\nExample: - \"E\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Longitude hemisphere",
                    "$ref": "#/definitions/dns_zoneLongitudeHemisphere",
                    "x-displayname": "Longitude hemisphere",
                    "x-ves-example": "E",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "longitude_minute": {
                    "type": "integer",
                    "description": " Longitude minute, an integer between 0 and 59, including 0 and 59\n\nExample: - \"30\"-\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 59\n",
                    "title": "Longitude minute",
                    "format": "int32",
                    "x-displayname": "Longitude minute",
                    "x-ves-example": "30",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "59"
                    }
                },
                "longitude_second": {
                    "type": "number",
                    "description": " Longitude second, an decimal between 0 and 59.999, including 0 and 59.999\n\nExample: - \"12.000\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 59.999\n",
                    "title": "Longitude second",
                    "format": "float",
                    "x-displayname": "Longitude second",
                    "x-ves-example": "12.000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "59.999"
                    }
                },
                "vertical_precision": {
                    "type": "number",
                    "description": " Vertical Precision in meters\n\nExample: - \"10.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Vertical Precision",
                    "format": "float",
                    "x-displayname": "Vertical Precision",
                    "x-ves-example": "10.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                }
            }
        },
        "dns_zoneLatitudeHemisphere": {
            "type": "string",
            "description": "Latitude hemisphere can only be N or S\n\n - N: North Hemisphere\n\n - S: South Hemisphere\n",
            "title": "Latitude Hemisphere",
            "enum": [
                "N",
                "S"
            ],
            "default": "N",
            "x-displayname": "Latitude hemisphere",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.LatitudeHemisphere"
        },
        "dns_zoneLongitudeHemisphere": {
            "type": "string",
            "description": "Longitude hemisphere can only be E or W\n\n - E: East Hemisphere\n\n - W: West Hemisphere\n",
            "title": "Longitude Hemisphere",
            "enum": [
                "E",
                "W"
            ],
            "default": "E",
            "x-displayname": "Longitude hemisphere",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.LongitudeHemisphere"
        },
        "dns_zoneMailExchanger": {
            "type": "object",
            "title": "MailExchanger",
            "x-displayname": "MailExchanger",
            "x-ves-proto-message": "ves.io.schema.dns_zone.MailExchanger",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": " Mail exchanger domain name, please provide the full hostname, for example: mail.example.com\n\nExample: - \"mail.example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n",
                    "title": "Domain",
                    "x-displayname": "Domain",
                    "x-ves-example": "mail.example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": " Mail exchanger priority code\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                }
            }
        },
        "dns_zoneNAPTRValue": {
            "type": "object",
            "title": "NAPTRValue",
            "x-displayname": "NAPTRValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.NAPTRValue",
            "properties": {
                "flags": {
                    "type": "string",
                    "description": " Flag to control aspects of the rewriting and interpretation of the fields in the record. At this time only four flags, S/A/U/P, are defined.\n\nExample: - \"\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 255\n  ves.io.schema.rules.string.pattern: ^(S|s|A|a|U|u|P|p)$\n",
                    "title": "Flags",
                    "maxLength": 255,
                    "x-displayname": "Flags",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "255",
                        "ves.io.schema.rules.string.pattern": "^(S|s|A|a|U|u|P|p)$"
                    }
                },
                "order": {
                    "type": "integer",
                    "description": " Order in which the NAPTR records must be processed. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Order",
                    "format": "int64",
                    "x-displayname": "Order",
                    "x-ves-example": "10",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "preference": {
                    "type": "integer",
                    "description": " Preference when records have the same order. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Preference",
                    "format": "int64",
                    "x-displayname": "Preference",
                    "x-ves-example": "10",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "regexp": {
                    "type": "string",
                    "description": " Regular expression to construct the next domain name to lookup.\n\nExample: - \"\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Regular Expression",
                    "maxLength": 255,
                    "x-displayname": "Regular Expression",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                },
                "replacement": {
                    "type": "string",
                    "description": " The next NAME to query for NAPTR, SRV, or address records depending on the value of the flags field.\n\nExample: - \"\"-",
                    "title": "Replacement",
                    "x-displayname": "Replacement"
                },
                "service": {
                    "type": "string",
                    "description": " Specifies the service(s) available down this rewrite path.\n\nExample: - \"\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n  ves.io.schema.rules.string.pattern: ^([A-Za-z][A-Za-z0-9]{0,31}(\\\\+[A-Za-z][A-Za-z0-9]{0,31})*$|^$)\n",
                    "title": "Protocol Resolution Service",
                    "maxLength": 255,
                    "x-displayname": "Protocol Resolution Service",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255",
                        "ves.io.schema.rules.string.pattern": "^([A-Za-z][A-Za-z0-9]{0,31}(\\\\+[A-Za-z][A-Za-z0-9]{0,31})*$|^$)"
                    }
                }
            }
        },
        "dns_zonePrimaryDNSGetSpecType": {
            "type": "object",
            "title": "PrimaryDNSGetSpecType",
            "x-displayname": "PrimaryDNSGetSpecType",
            "x-ves-displayorder": "5,12,13,8,9,11,10",
            "x-ves-oneof-field-soa_record_parameters_choice": "[\"default_soa_parameters\",\"soa_parameters\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.PrimaryDNSGetSpecType",
            "properties": {
                "admin": {
                    "type": "string"
                },
                "allow_http_lb_managed_records": {
                    "type": "boolean",
                    "description": " Option to allow user-created HTTP, TCP, and CDN load balancer related resource records to be automatically managed in a protected RRset.",
                    "format": "boolean"
                },
                "default_rr_set_group": {
                    "type": "array",
                    "description": " Collection of DNS record sets in the default group.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 50000\n",
                    "maxItems": 50000,
                    "items": {
                        "$ref": "#/definitions/dns_zoneRRSet"
                    },
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "50000"
                    }
                },
                "default_soa_parameters": {
                    "description": "Exclusive with [soa_parameters]\n Use default parameters",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "dnssec_mode": {
                    "$ref": "#/definitions/dns_zoneDNSSECMode"
                },
                "rr_set_group": {
                    "type": "array",
                    "description": " Collection of additional DNS resource record sets\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 50\n  ves.io.schema.rules.repeated.unique_metadata_name: true\n",
                    "maxItems": 50,
                    "items": {
                        "$ref": "#/definitions/dns_zoneRRSetGroup"
                    },
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "50",
                        "ves.io.schema.rules.repeated.unique_metadata_name": "true"
                    }
                },
                "serial": {
                    "type": "integer",
                    "description": " Secondary nameservers should initiate a zone transfer when this number is incremented",
                    "format": "int64"
                },
                "soa_parameters": {
                    "description": "Exclusive with [default_soa_parameters]\n Configure SOA Record parameters",
                    "$ref": "#/definitions/dns_zoneSOARecordParameterConfig"
                }
            }
        },
        "dns_zoneRRSet": {
            "type": "object",
            "title": "RRSet is a set of Resource Record Sets for specific type",
            "x-displayname": "Resource Record Set",
            "x-ves-oneof-field-type_record_set": "[\"a_record\",\"aaaa_record\",\"afsdb_record\",\"alias_record\",\"caa_record\",\"cds_record\",\"cert_record\",\"cname_record\",\"ds_record\",\"eui48_record\",\"eui64_record\",\"lb_record\",\"loc_record\",\"mx_record\",\"naptr_record\",\"ns_record\",\"ptr_record\",\"srv_record\",\"sshfp_record\",\"tlsa_record\",\"txt_record\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.RRSet",
            "properties": {
                "a_record": {
                    "description": "Exclusive with [aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "A Record",
                    "$ref": "#/definitions/dns_zoneDNSAResourceRecord",
                    "x-displayname": "A"
                },
                "aaaa_record": {
                    "description": "Exclusive with [a_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "AAAA Record",
                    "$ref": "#/definitions/dns_zoneDNSAAAAResourceRecord",
                    "x-displayname": "AAAA"
                },
                "afsdb_record": {
                    "description": "Exclusive with [a_record aaaa_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "AFSDB Record",
                    "$ref": "#/definitions/dns_zoneDNSAFSDBRecord",
                    "x-displayname": "AFSDB"
                },
                "alias_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "ALIAS Record",
                    "$ref": "#/definitions/dns_zoneDNSAliasResourceRecord",
                    "x-displayname": "ALIAS"
                },
                "caa_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CAA Record",
                    "$ref": "#/definitions/dns_zoneDNSCAAResourceRecord",
                    "x-displayname": "CAA"
                },
                "cds_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CDS Record",
                    "$ref": "#/definitions/dns_zoneDNSCDSRecord",
                    "x-displayname": "CDS"
                },
                "cert_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CERT Record",
                    "$ref": "#/definitions/dns_zoneCERTResourceRecord",
                    "x-displayname": "CERT"
                },
                "cname_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CNAME Record",
                    "$ref": "#/definitions/dns_zoneDNSCNAMEResourceRecord",
                    "x-displayname": "CNAME"
                },
                "description": {
                    "type": "string",
                    "description": "\n\nExample: - \"Comment\"-",
                    "title": "Comment",
                    "x-displayname": "Comment",
                    "x-ves-example": "Comment"
                },
                "ds_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "DS Record",
                    "$ref": "#/definitions/dns_zoneDNSDSRecord",
                    "x-displayname": "DS"
                },
                "eui48_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "EUI48 Record",
                    "$ref": "#/definitions/dns_zoneDNSEUI48ResourceRecord",
                    "x-displayname": "EUI48"
                },
                "eui64_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "EUI64 Record",
                    "$ref": "#/definitions/dns_zoneDNSEUI64ResourceRecord",
                    "x-displayname": "EUI64"
                },
                "lb_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "DNS LB Record",
                    "$ref": "#/definitions/dns_zoneDNSLBResourceRecord",
                    "x-displayname": "DNS Load Balancer"
                },
                "loc_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "LOC Record",
                    "$ref": "#/definitions/dns_zoneDNSLOCResourceRecord",
                    "x-displayname": "LOC"
                },
                "mx_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "MX Record",
                    "$ref": "#/definitions/dns_zoneDNSMXResourceRecord",
                    "x-displayname": "MX"
                },
                "naptr_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "NAPTR Record",
                    "$ref": "#/definitions/dns_zoneDNSNAPTRResourceRecord",
                    "x-displayname": "NAPTR"
                },
                "ns_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "NS Record",
                    "$ref": "#/definitions/dns_zoneDNSNSResourceRecord",
                    "x-displayname": "NS"
                },
                "ptr_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "PTR Record",
                    "$ref": "#/definitions/dns_zoneDNSPTRResourceRecord",
                    "x-displayname": "PTR"
                },
                "srv_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record sshfp_record tlsa_record txt_record]\n",
                    "title": "SRV Record",
                    "$ref": "#/definitions/dns_zoneDNSSRVResourceRecord",
                    "x-displayname": "SRV"
                },
                "sshfp_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record tlsa_record txt_record]\n",
                    "title": "SSHFP Record",
                    "$ref": "#/definitions/dns_zoneSSHFPResourceRecord",
                    "x-displayname": "SSHFP"
                },
                "tlsa_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record txt_record]\n",
                    "title": "TLSA Record",
                    "$ref": "#/definitions/dns_zoneTLSAResourceRecord",
                    "x-displayname": "TLSA"
                },
                "ttl": {
                    "type": "integer",
                    "description": "\n\nExample: - \"3600\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 60\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "TTL",
                    "format": "int64",
                    "x-displayname": "Time to live",
                    "x-ves-example": "3600",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "60",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "txt_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record]\n",
                    "title": "TXT Record",
                    "$ref": "#/definitions/dns_zoneDNSTXTResourceRecord",
                    "x-displayname": "TXT"
                }
            }
        },
        "dns_zoneRRSetGroup": {
            "type": "object",
            "title": "Logical Group of Resource Record Sets",
            "x-displayname": "Group of Resource Record Sets",
            "x-ves-proto-message": "ves.io.schema.dns_zone.RRSetGroup",
            "properties": {
                "metadata": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaMessageMetaType",
                    "x-displayname": "Metadata",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "rr_set": {
                    "type": "array",
                    "description": " Collection of DNS resource record sets\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 50000\n",
                    "title": "Record Sets",
                    "maxItems": 50000,
                    "items": {
                        "$ref": "#/definitions/dns_zoneRRSet"
                    },
                    "x-displayname": "Resource Record Sets",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "50000"
                    }
                }
            }
        },
        "dns_zoneSHA1Digest": {
            "type": "object",
            "title": "SHA1 Digest",
            "x-displayname": "SHA1 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA1Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"addf120b430021c36c232c99ef8d926aea2acd6b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 40\n  ves.io.schema.rules.string.min_len: 40\n",
                    "title": "Digest",
                    "minLength": 40,
                    "maxLength": 40,
                    "x-displayname": "Digest",
                    "x-ves-example": "addf120b430021c36c232c99ef8d926aea2acd6b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "40",
                        "ves.io.schema.rules.string.min_len": "40"
                    }
                }
            }
        },
        "dns_zoneSHA1Fingerprint": {
            "type": "object",
            "title": "SHA1 Fingerprint",
            "x-displayname": "SHA1 Fingerprint",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA1Fingerprint",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": " The 'fingerprint' is the DS key and the actual contents of the DS record. \n\nExample: - \"addf120b430021c36c232c99ef8d926aea2acd6b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 40\n  ves.io.schema.rules.string.min_len: 40\n",
                    "title": "Fingerprint",
                    "minLength": 40,
                    "maxLength": 40,
                    "x-displayname": "Fingerprint",
                    "x-ves-example": "addf120b430021c36c232c99ef8d926aea2acd6b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "40",
                        "ves.io.schema.rules.string.min_len": "40"
                    }
                }
            }
        },
        "dns_zoneSHA256Digest": {
            "type": "object",
            "title": "SHA256 Digest",
            "x-displayname": "SHA256 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA256Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 64\n",
                    "title": "Digest",
                    "minLength": 64,
                    "maxLength": 64,
                    "x-displayname": "Digest",
                    "x-ves-example": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "64"
                    }
                }
            }
        },
        "dns_zoneSHA256Fingerprint": {
            "type": "object",
            "title": "SHA256 Fingerprint",
            "x-displayname": "SHA256 Fingerprint",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA256Fingerprint",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": " The 'fingerprint' is the DS key and the actual contents of the DS record. \n\nExample: - \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 64\n",
                    "title": "Fingerprint",
                    "minLength": 64,
                    "maxLength": 64,
                    "x-displayname": "Fingerprint",
                    "x-ves-example": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "64"
                    }
                }
            }
        },
        "dns_zoneSHA384Digest": {
            "type": "object",
            "title": "SHA384 Digest",
            "x-displayname": "SHA384 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA384Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"b4a9b28d142d91968ca232b95dfca771ee66f99924148b85026dfa686f6288d0edbfa71c98a798fda71e130f48e8f0f8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 96\n  ves.io.schema.rules.string.min_len: 96\n",
                    "title": "Digest",
                    "minLength": 96,
                    "maxLength": 96,
                    "x-displayname": "Digest",
                    "x-ves-example": "b4a9b28d142d91968ca232b95dfca771ee66f99924148b85026dfa686f6288d0edbfa71c98a798fda71e130f48e8f0f8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "96",
                        "ves.io.schema.rules.string.min_len": "96"
                    }
                }
            }
        },
        "dns_zoneSOARecordParameterConfig": {
            "type": "object",
            "title": "SOARecordParameterConfig",
            "x-displayname": "SOARecordParameterConfig",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SOARecordParameterConfig",
            "properties": {
                "expire": {
                    "type": "integer",
                    "description": " expire value indicates when secondary nameservers should stop answering request for this zone if primary does not respond\n\nExample: - \"360000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "Expire (in seconds)",
                    "format": "int64",
                    "x-displayname": "Expire",
                    "x-ves-example": "360000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "negative_ttl": {
                    "type": "integer",
                    "description": " negative ttl value indicates how long to cache non-existent resource record for this zone\n\nExample: - \"1800\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "Negative TTL (in seconds)",
                    "format": "int64",
                    "x-displayname": "Negative TTL",
                    "x-ves-example": "1800",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "refresh": {
                    "type": "integer",
                    "description": " refresh value indicates when secondary nameservers should query for the SOA record to detect zone changes\n\nExample: - \"86400\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 3600\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "Refresh (in seconds)",
                    "format": "int64",
                    "x-displayname": "Refresh interval",
                    "x-ves-example": "86400",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "3600",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "retry": {
                    "type": "integer",
                    "description": " retry value indicates when secondary nameservers should retry to request the serial number if primary does not respond\n\nExample: - \"7200\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 60\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "Retry (in seconds)",
                    "format": "int64",
                    "x-displayname": "Retry Interval",
                    "x-ves-example": "7200",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "60",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": " SOA record time to live (in seconds)\n\nExample: - \"86400\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "TTL",
                    "format": "int64",
                    "x-displayname": "TTL",
                    "x-ves-example": "86400",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                }
            }
        },
        "dns_zoneSRVService": {
            "type": "object",
            "title": "SRVService",
            "x-displayname": "SRVService",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SRVService",
            "properties": {
                "port": {
                    "type": "integer",
                    "description": " Port on which the service can be found\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Port",
                    "format": "int64",
                    "x-displayname": "Port",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the target. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "target": {
                    "type": "string",
                    "description": " Hostname of the machine providing the service\n\nExample: - \"my.example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^[.]$|^([a-zA-Z0-9]{1}[a-zA-Z0-9_-]{0,62})(\\\\.[a-zA-Z0-9_]{1}[a-zA-Z0-9_-]{0,62})*?(\\\\.[a-zA-Z]{1}[a-zA-Z0-9]{0,62})\\\\.?$\n",
                    "title": "Target",
                    "x-displayname": "Target",
                    "x-ves-example": "my.example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^[.]$|^([a-zA-Z0-9]{1}[a-zA-Z0-9_-]{0,62})(\\\\.[a-zA-Z0-9_]{1}[a-zA-Z0-9_-]{0,62})*?(\\\\.[a-zA-Z]{1}[a-zA-Z0-9]{0,62})\\\\.?$"
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": " Weight of the target. A higher number indicates a higher preference.\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Weight",
                    "format": "int64",
                    "x-displayname": "Weight",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                }
            }
        },
        "dns_zoneSSHFPAlgorithm": {
            "type": "string",
            "description": "SSHFP algorithm value must be compatible with the specified algorithm.\n\n - UNSPECIFIEDALGORITHM: UNSPECIFIEDALGORITHM\n\n - RSA: RSA\n\n - DSA: DSA\n\n - ECDSA: ECDSA\n\n - Ed25519: Ed25519\n\n - Ed448: Ed448\n",
            "title": "SSHFP Algorithm",
            "enum": [
                "UNSPECIFIEDALGORITHM",
                "RSA",
                "DSA",
                "ECDSA",
                "Ed25519",
                "Ed448"
            ],
            "default": "UNSPECIFIEDALGORITHM",
            "x-displayname": "SSHFP Algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.SSHFPAlgorithm"
        },
        "dns_zoneSSHFPFingerprintType": {
            "type": "string",
            "description": "x-displayName: \"SSHFP Fingerprint Type\"\nSSHFP Fingerprint Type must be compatible with the specified values.\n\n - INVALIDFINGERPRINTTYPE: INVALIDFINGERPRINTTYPE\n\nx-displayName: \"Invalid Fingerprint Type\"\n - SHA1ALGORITHM: SHA1ALGORITHM\n\nx-displayName: \"SHA1\"\n - SHA256ALGORITHM: SHA256ALGORITHM\n\nx-displayName: \"SHA256\"",
            "title": "SSHFP Fingerprint Type",
            "enum": [
                "INVALIDFINGERPRINTTYPE",
                "SHA1ALGORITHM",
                "SHA256ALGORITHM"
            ],
            "default": "INVALIDFINGERPRINTTYPE"
        },
        "dns_zoneSSHFPRecordValue": {
            "type": "object",
            "title": "SSHFPRecordValue",
            "x-displayname": "SSHFPRecordValue",
            "x-ves-oneof-field-fingerprint_type": "[\"sha1_fingerprint\",\"sha256_fingerprint\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SSHFPRecordValue",
            "properties": {
                "algorithm": {
                    "description": " Algorithm of the public key.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "SSHFP Algorithm",
                    "$ref": "#/definitions/dns_zoneSSHFPAlgorithm",
                    "x-displayname": "SSHFP Algorithm",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "sha1_fingerprint": {
                    "description": "Exclusive with [sha256_fingerprint]\n",
                    "title": "SHA1 Fingerprint",
                    "$ref": "#/definitions/dns_zoneSHA1Fingerprint",
                    "x-displayname": "SHA1 Fingerprint"
                },
                "sha256_fingerprint": {
                    "description": "Exclusive with [sha1_fingerprint]\n",
                    "title": "SHA256 Digest",
                    "$ref": "#/definitions/dns_zoneSHA256Fingerprint",
                    "x-displayname": "SHA256 Fingerprint"
                }
            }
        },
        "dns_zoneSSHFPResourceRecord": {
            "type": "object",
            "description": "DNS SSHFP Record",
            "title": "SSHFPResourceRecord",
            "x-displayname": "DNS SSHFP Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SSHFPResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " SSHFP Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "SSHFP Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneSSHFPRecordValue"
                    },
                    "x-displayname": "SSHFP Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneSecondaryDNSGetSpecType": {
            "type": "object",
            "title": "SecondaryDNSGetSpecType",
            "x-displayname": "SecondaryDNSGetSpecType",
            "x-ves-displayorder": "5,6,7,8,9",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SecondaryDNSGetSpecType",
            "properties": {
                "last_axfr_timestamp": {
                    "type": "string",
                    "description": " Last successful zone transfer timestamp.",
                    "format": "date-time"
                },
                "primary_servers": {
                    "type": "array",
                    "description": "\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv4: true\n  ves.io.schema.rules.repeated.max_items: 10\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "minItems": 1,
                    "maxItems": 10,
                    "items": {
                        "type": "string"
                    },
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv4": "true",
                        "ves.io.schema.rules.repeated.max_items": "10",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "tsig_key_algorithm": {
                    "description": " TSIG key value must be compatible with the specified algorithm",
                    "$ref": "#/definitions/dns_zoneTSIGKeyAlgorithm"
                },
                "tsig_key_name": {
                    "type": "string",
                    "description": " TSIG key name as used in TSIG protocol extension\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "tsig_key_value": {
                    "$ref": "#/definitions/schemaSecretType"
                }
            }
        },
        "dns_zoneTLSARecordCSelector": {
            "type": "string",
            "description": "\n - FullCertificate: Full Certificate\n\n - UseSubjectPublicKey: Use Subject Public Key\n",
            "title": "TLSA Record Selector",
            "enum": [
                "FullCertificate",
                "UseSubjectPublicKey"
            ],
            "default": "FullCertificate",
            "x-displayname": "TLSA Record Selector",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordCSelector"
        },
        "dns_zoneTLSARecordCertificateUsage": {
            "type": "string",
            "description": "\n - CertificateAuthorityConstraint: Certificate Authority Constraint\n\n - ServiceCertificateConstraint: Service Certificate Constraint\n\n - TrustAnchorAssertion: Trust Anchor Assertion\n\n - DomainIssuedCertificate: Domain Issued Certificate\n",
            "title": "TLSA Record Certificate Usage",
            "enum": [
                "CertificateAuthorityConstraint",
                "ServiceCertificateConstraint",
                "TrustAnchorAssertion",
                "DomainIssuedCertificate"
            ],
            "default": "CertificateAuthorityConstraint",
            "x-displayname": "TLSA Record Certificate Usage",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordCertificateUsage"
        },
        "dns_zoneTLSARecordMatchingType": {
            "type": "string",
            "description": "\n - NoHash: No Hash\n\n - SHA256: SHA-256\n\n - SHA512: SHA-512\n",
            "title": "TLSA Record Matching Type",
            "enum": [
                "NoHash",
                "SHA256",
                "SHA512"
            ],
            "default": "NoHash",
            "x-displayname": "TLSA Record Matching Type",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordMatchingType"
        },
        "dns_zoneTLSARecordValue": {
            "type": "object",
            "title": "TLSARecordValue",
            "x-displayname": "TLSARecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.TLSARecordValue",
            "properties": {
                "certificate_association_data": {
                    "type": "string",
                    "description": " The actual data to be matched given the settings of the other fields.\n\nExample: - \"Certificate Association Data\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.hex: true\n  ves.io.schema.rules.string.max_len: 4096\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certificate Association Data",
                    "minLength": 1,
                    "maxLength": 4096,
                    "x-displayname": "Certificate Association Data",
                    "x-ves-example": "Certificate Association Data",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.hex": "true",
                        "ves.io.schema.rules.string.max_len": "4096",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "certificate_usage": {
                    "description": " x-example: \n TLSA Record Certificate Usage.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Certificate Usage",
                    "$ref": "#/definitions/dns_zoneTLSARecordCertificateUsage",
                    "x-displayname": "Certificate Usage",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "matching_type": {
                    "description": " TLSA Record Matching Type.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Matching Type",
                    "$ref": "#/definitions/dns_zoneTLSARecordMatchingType",
                    "x-displayname": "Matching Type",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "selector": {
                    "description": " TLSA Record Selector.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Selector",
                    "$ref": "#/definitions/dns_zoneTLSARecordCSelector",
                    "x-displayname": "Selector",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "dns_zoneTLSAResourceRecord": {
            "type": "object",
            "description": "DNS TLSA Record",
            "title": "TLSAResourceRecord",
            "x-displayname": "DNS TLSA Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.TLSAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " TLSA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "TLSA Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneTLSARecordValue"
                    },
                    "x-displayname": "TLSA Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneTSIGConfiguration": {
            "type": "object",
            "title": "TSIG Configuration",
            "x-displayname": "TSIG Configuration",
            "x-ves-proto-message": "ves.io.schema.dns_zone.TSIGConfiguration",
            "properties": {
                "tsig_key_algorithm": {
                    "description": " TSIG key value must be compatible with the specified algorithm\n\nExample: - \"hmac-sha512\"-",
                    "title": "TSIG Key Algorithm",
                    "$ref": "#/definitions/dns_zoneTSIGKeyAlgorithm",
                    "x-displayname": "TSIG Key Algorithm",
                    "x-ves-example": "hmac-sha512"
                },
                "tsig_key_name": {
                    "type": "string",
                    "description": " TSIG key name as used in TSIG protocol extension\n\nExample: - \"my-tsig-key\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "TSIG Key Name",
                    "maxLength": 256,
                    "x-displayname": "TSIG Key Name",
                    "x-ves-example": "my-tsig-key",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "tsig_key_value": {
                    "description": "\n\nExample: - \"my-tsig-value\"-",
                    "title": "TSIG Key Value",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "TSIG Key Value in Base 64 Format",
                    "x-ves-example": "my-tsig-value"
                }
            }
        },
        "dns_zoneTSIGKeyAlgorithm": {
            "type": "string",
            "description": "TSIG key value must be compatible with the specified algorithm\n\n - UNDEFINED: UNDEFINED\n\n - HMAC_MD5: HMAC_MD5\n\n - HMAC_SHA1: HMAC_SHA1\n\n - HMAC_SHA224: HMAC_SHA224\n\n - HMAC_SHA256: HMAC_SHA256\n\n - HMAC_SHA384: HMAC_SHA384\n\n - HMAC_SHA512: HMAC_SHA512\n",
            "title": "TSIG Key Algorithm",
            "enum": [
                "UNDEFINED",
                "HMAC_MD5",
                "HMAC_SHA1",
                "HMAC_SHA224",
                "HMAC_SHA256",
                "HMAC_SHA384",
                "HMAC_SHA512"
            ],
            "default": "UNDEFINED",
            "x-displayname": "TSIG Key Algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TSIGKeyAlgorithm"
        },
        "dns_zoneValidZone": {
            "type": "object",
            "title": "Valid Zone",
            "x-displayname": "Valid Zone",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ValidZone",
            "properties": {
                "record_count": {
                    "type": "integer",
                    "title": "Record Count",
                    "format": "int64",
                    "x-displayname": "Record Count"
                },
                "zone_name": {
                    "type": "string",
                    "title": "Zone Name",
                    "x-displayname": "Zone Name"
                }
            }
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "protobufNullValue": {
            "type": "string",
            "description": "-NullValue- is a singleton enumeration to represent the null value for the\n-Value- type union.\n\n The JSON representation for -NullValue- is JSON -null-.\n\n - NULL_VALUE: Null value.",
            "enum": [
                "NULL_VALUE"
            ],
            "default": "NULL_VALUE"
        },
        "schemaBlindfoldSecretInfoType": {
            "type": "object",
            "description": "BlindfoldSecretInfoType specifies information about the Secret managed by F5XC Secret Management",
            "title": "BlindfoldSecretInfoType",
            "x-displayname": "Blindfold Secret",
            "x-ves-displayorder": "3,1,2",
            "x-ves-proto-message": "ves.io.schema.BlindfoldSecretInfoType",
            "properties": {
                "decryption_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the backend Secret Management service.\n\nExample: - \"value\"-",
                    "title": "Decryption Provider",
                    "x-displayname": "Decryption Provider",
                    "x-ves-example": "value"
                },
                "location": {
                    "type": "string",
                    "description": " Location is the uri_ref. It could be in url format for string:///\n Or it could be a path if the store provider is an http/https location\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "Location",
                    "x-displayname": "Location",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                },
                "store_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"value\"-",
                    "title": "Store Provider",
                    "x-displayname": "Store Provider",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaClearSecretInfoType": {
            "type": "object",
            "description": "ClearSecretInfoType specifies information about the Secret that is not encrypted.",
            "title": "ClearSecretInfoType",
            "x-displayname": "In-Clear Secret",
            "x-ves-displayorder": "2,1",
            "x-ves-proto-message": "ves.io.schema.ClearSecretInfoType",
            "properties": {
                "provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"box-provider\"-",
                    "title": "Provider",
                    "x-displayname": "Provider",
                    "x-ves-example": "box-provider"
                },
                "url": {
                    "type": "string",
                    "description": " URL of the secret. Currently supported URL schemes is string:///.\n For string:/// scheme, Secret needs to be encoded Base64 format.\n When asked for this secret, caller will get Secret bytes after Base64 decoding.\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "URL",
                    "maxLength": 131072,
                    "x-displayname": "URL",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaMessageMetaType": {
            "type": "object",
            "description": "MessageMetaType is metadata (common attributes) of a message that only certain messages\nhave. This information is propagated to the metadata of a child object that gets created\nfrom the containing message during view processing.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "MessageMetaType",
            "x-displayname": "Message Metadata",
            "x-ves-proto-message": "ves.io.schema.MessageMetaType",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " Human readable description.\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "description",
                    "maxLength": 256,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of the message.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.ves_object_name: true\n",
                    "title": "name",
                    "minLength": 1,
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.ves_object_name": "true"
                    }
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaSecretEncodingType": {
            "type": "string",
            "description": "x-displayName: \"Secret Encoding\"\nSecretEncodingType defines the encoding type of the secret before handled by the Secret Management Service.\n\n - EncodingNone: x-displayName: \"None\"\nNo Encoding\n - EncodingBase64: Base64\n\nx-displayName: \"Base64\"\nBase64 encoding",
            "title": "SecretEncodingType",
            "enum": [
                "EncodingNone",
                "EncodingBase64"
            ],
            "default": "EncodingNone"
        },
        "schemaSecretType": {
            "type": "object",
            "description": "SecretType is used in an object to indicate a sensitive/confidential field",
            "title": "SecretType",
            "x-displayname": "Secret",
            "x-ves-oneof-field-secret_info_oneof": "[\"blindfold_secret_info\",\"clear_secret_info\"]",
            "x-ves-proto-message": "ves.io.schema.SecretType",
            "properties": {
                "blindfold_secret_info": {
                    "description": "Exclusive with [clear_secret_info]\n Blindfold Secret is used for the secrets managed by F5XC Secret Management Service",
                    "title": "Blindfold Secret",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType",
                    "x-displayname": "Blindfold Secret"
                },
                "clear_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info]\n Clear Secret is used for the secrets that are not encrypted",
                    "title": "Clear Secret",
                    "$ref": "#/definitions/schemaClearSecretInfoType",
                    "x-displayname": "Clear Secret"
                }
            }
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n\n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n\n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the operator or software. Values here can be interpreted\n by software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).\n\nExample: - \"'ves.io/soft-deleted''true'\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "'ves.io/soft-deleted': 'true'"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaVaultSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Vault Secret\"\nVaultSecretInfoType specifies information about the Secret managed by Hashicorp Vault.",
            "title": "VaultSecretInfoType",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "x-displayName: \"Key\"\nx-example: \"key_pem\"\nKey of the individual secret. Vault Secrets are stored as key-value pair.\nIf user is only interested in one value from the map, this field should be set to the corresponding key.\nIf not provided entire secret will be returned.",
                    "title": "Key"
                },
                "location": {
                    "type": "string",
                    "description": "x-displayName: \"Location\"\nx-required\nx-example: \"v1/data/vhost_key\"\nPath to secret in Vault.",
                    "title": "Location"
                },
                "provider": {
                    "type": "string",
                    "description": "x-displayName: \"Provider\"\nx-required\nx-example: \"vault-vh-provider\"\nName of the Secret Management Access object that contains information about the backend Vault.",
                    "title": "Provider"
                },
                "secret_encoding": {
                    "description": "x-displayName: \"Secret Encoding\"\nThis field defines the encoding type of the secret BEFORE the secret is put into Hashicorp Vault.",
                    "title": "secret_encoding",
                    "$ref": "#/definitions/schemaSecretEncodingType"
                },
                "version": {
                    "type": "integer",
                    "description": "x-displayName: \"Version\"\nx-example: \"1\"\nVersion of the secret to be fetched. As vault secrets are versioned, user can specify this field to fetch specific version.\nIf not provided latest version will be returned.",
                    "title": "Version",
                    "format": "int64"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaWingmanSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Wingman Secret\"\nWingmanSecretInfoType specifies the handle to the wingman secret",
            "title": "WingmanSecretInfoType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-required\nx-example: \"ChargeBack-API-Key\"\nName of the secret.",
                    "title": "Name"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 128\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "name",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "128",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "namespace",
                    "maxLength": 64,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "tenant",
                    "maxLength": 64,
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                }
            }
        }
    },
    "x-displayname": "DNS Zone",
    "x-ves-proto-file": "ves.io/schema/dns_zone/public_customapi.proto"
}`

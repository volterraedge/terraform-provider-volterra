// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package dns_zone

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/client/configapi"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

const (
	// CreateRequestFQN is the fully-qualified-name of the CreateRequest message
	CreateRequestFQN = "ves.io.schema.dns_zone.CreateRequest"
	// CreateResponseFQN is the fully-qualified-name of the CreateResponse message
	CreateResponseFQN = "ves.io.schema.dns_zone.CreateResponse"
	// ReplaceRequestFQN is the fully-qualified-name of the ReplaceRequest message
	ReplaceRequestFQN = "ves.io.schema.dns_zone.ReplaceRequest"
	// ReplaceResponseFQN is the fully-qualified-name of the ReplaceResponse message
	ReplaceResponseFQN = "ves.io.schema.dns_zone.ReplaceResponse"
	// GetRequestFQN is the fully-qualified-name of the GetRequest message
	GetRequestFQN = "ves.io.schema.dns_zone.GetRequest"
	// GetResponseFQN is the fully-qualified-name of the GetResponse message
	GetResponseFQN = "ves.io.schema.dns_zone.GetResponse"
	// ListRequestFQN is the fully-qualified-name of the ListRequest message
	ListRequestFQN = "ves.io.schema.dns_zone.ListRequest"
	// ListResponseFQN is the fully-qualified-name of the ListResponse message
	ListResponseFQN = "ves.io.schema.dns_zone.ListResponse"
	// DeleteRequestFQN is the fully-qualified-name of the DeleteRequest message
	DeleteRequestFQN = "ves.io.schema.dns_zone.DeleteRequest"
	// DeleteResponseFQN is the fully-qualified-name of the DeleteResponse message
	DeleteResponseFQN = "ves.io.schema.dns_zone.DeleteResponse"
)

// CLIENT side
func NewCreateRequest(e db.Entry) (*CreateRequest, error) {
	r := &CreateRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewReplaceRequest(e db.Entry) (*ReplaceRequest, error) {
	r := &ReplaceRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewGetRequest(key string, opts ...server.CRUDCallOpt) (*GetRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	var rspFmt GetResponseFormatCode
	switch ccOpts.ResponseFormat {
	case server.DefaultForm:
		rspFmt = GET_RSP_FORMAT_DEFAULT
	case server.CreateRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_CREATE
	case server.ReplaceRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_REPLACE
	case server.StatusForm:
		rspFmt = GET_RSP_FORMAT_STATUS
	case server.GetSpecForm:
		rspFmt = GET_RSP_FORMAT_READ
	case server.BrokenRefsForm:
		rspFmt = GET_RSP_FORMAT_BROKEN_REFERENCES
	default:
		return nil, fmt.Errorf("Unsupported Response Format %s", ccOpts.ResponseFormat)
	}
	return &GetRequest{Namespace: strs[0], Name: strs[1], ResponseFormat: rspFmt}, nil
}
func (m *GetRequest) ResponseFormatString() string {
	return m.GetResponseFormat().String()
}

func NewListRequest(opts ...server.CRUDCallOpt) *ListRequest {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	return &ListRequest{Namespace: ccOpts.Namespace}
}

func NewDeleteRequest(key string) (*DeleteRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	return &DeleteRequest{Namespace: strs[0], Name: strs[1]}, nil
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Create")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Replace")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return nil

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(nil)
		gRsp.ToObject(obj)
		return obj, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	req.ReportFields = cco.ReportFields
	req.ReportStatusFields = cco.ReportStatusFields
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.RequestJSON != "" {
		got++
	}
	if got != 1 {
		return nil, fmt.Errorf("Only one of entry(%v), WithRequestProto()(%v) or WithRequestJSON()(%v) should be specified", e, cco.RequestProto, cco.RequestJSON)
	}

	var jsn string
	if cco.RequestJSON != "" {
		jsn = cco.RequestJSON
	} else {
		var req *CreateRequest
		if cco.RequestProto != nil {
			r, ok := cco.RequestProto.(*CreateRequest)
			if !ok {
				return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
			}
			req = r
		} else {
			r, err := NewCreateRequest(e)
			if err != nil {
				return nil, errors.Wrap(err, "Creating new create request")
			}
			req = r
			if cco.ObjToMsgConverter != nil {
				if err := cco.ObjToMsgConverter(e, req); err != nil {
					return nil, err
				}
			}
		}

		j, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "RestClient Create")
		}
		jsn = j
	}

	var namespace string
	reqMap := make(map[string]interface{})
	if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
		return nil, errors.Wrapf(err, "Unmarshaling json to find namespace/name")
	}
	md, ok := reqMap["metadata"].(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("Request %s does not have 'metadata'", jsn)
	}
	if val, ok := md["namespace"].(string); ok {
		namespace = val
	} else {
		return nil, fmt.Errorf("Request %s does not have 'metadata.namespace'", jsn)
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/dns_zones", c.baseURL, namespace)

	hReq, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &CreateResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	configapi.TranscribeCall(ctx, jsn, string(body))
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}

	obj := NewDBObject(nil)
	rspo.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rspo, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.RequestJSON != "" {
		got++
	}
	if got != 1 {
		return fmt.Errorf("Only one of entry(%v), WithRequestProto()(%v) or WithRequestJSON()(%v) should be specified", e, cco.RequestProto, cco.RequestJSON)
	}

	var jsn string
	if cco.RequestJSON != "" {
		jsn = cco.RequestJSON
	} else {
		var rReq *ReplaceRequest
		if cco.RequestProto != nil {
			r, ok := cco.RequestProto.(*ReplaceRequest)
			if !ok {
				return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
			}
			rReq = r
		} else {
			r, err := NewReplaceRequest(e)
			if err != nil {
				return errors.Wrap(err, "Creating new replace request")
			}
			rReq = r
			if cco.ObjToMsgConverter != nil {
				if err := cco.ObjToMsgConverter(e, rReq); err != nil {
					return err
				}
			}
		}

		rReq.ResourceVersion = cco.ResourceVersion
		j, err := codec.ToJSON(rReq, codec.ToWithUseProtoFieldName())
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		jsn = j
	}

	var namespace, name string
	_ = namespace
	reqMap := make(map[string]interface{})
	if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
		return errors.Wrapf(err, "Unmarshaling json to find namespace/name")
	}
	md, ok := reqMap["metadata"].(map[string]interface{})
	if !ok {
		return fmt.Errorf("Request %s does not have 'metadata'", jsn)
	}

	if val, ok := md["namespace"].(string); ok {
		namespace = val
	} else {
		return fmt.Errorf("Request %s does not have 'metadata.namespace'", jsn)
	}

	if val, ok := md["name"].(string); ok {
		name = val
	} else {
		return fmt.Errorf("Request %s does not have 'metadata.name'", jsn)
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/dns_zones/%s", c.baseURL, namespace, name)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	hReq = hReq.WithContext(ctx)
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}

	if _, err := io.ReadAll(rsp.Body); err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	configapi.TranscribeCall(ctx, jsn, nil)
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/dns_zones/%s", c.baseURL, req.Namespace, req.Name)
	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	q.Add("response_format", fmt.Sprintf("%d", req.ResponseFormat))
	hReq.URL.RawQuery += q.Encode()

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &GetResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(nil)
		gRsp.ToObject(obj)
		return obj, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)
	_ = req
	url := fmt.Sprintf("%s/public/namespaces/%s/dns_zones", c.baseURL, req.Namespace)

	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}
	for _, fName := range cco.ReportStatusFields {
		q.Add("report_status_fields", fName)
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ListResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/dns_zones/%s", c.baseURL, dReq.Namespace, dReq.Name)
	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}

	_, err = io.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	configapi.TranscribeCall(ctx, dReq, nil)

	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	var bURL string
	if strings.HasSuffix(baseURL, "/") {
		bURL = baseURL[:len(baseURL)-1]
	} else {
		bURL = baseURL
	}
	crcl := &crudAPIRestClient{bURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	svc svcfw.Service
}

func (c *APIInprocClient) Create(ctx context.Context, req *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.dns_zone.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.dns_zone")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.API.Create")
	rsp, err := oah.Create(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.dns_zone.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.dns_zone")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.API.Replace")
	if rsp, err := oah.Replace(ctx, req); err != nil {
		return rsp, err
	}
	return NewObjectReplaceRsp(nil)
}

func (c *APIInprocClient) Get(ctx context.Context, req *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.dns_zone.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.dns_zone")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.API.Get")
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) List(ctx context.Context, req *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.dns_zone.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.dns_zone")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.API.List")
	rsp, err := oah.List(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Delete(ctx context.Context, req *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.dns_zone.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.dns_zone")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.API.Delete")
	rsp, err := oah.Delete(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	return &APIInprocClient{svc: svc}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	cl APIClient
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewCreateRequest(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return nil, err
		}
	}

	rsp, err := c.cl.Create(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if err != nil {
		return nil, err
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewReplaceRequest(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return err
		}
	}

	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.cl.Replace(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	rsp, err := c.cl.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(nil)
		gRsp.ToObject(obj)
		return obj, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewListRequest(opts...)
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	rsp, err := c.cl.List(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	rsp, err := c.cl.Delete(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	return &crudAPIInprocClient{cl: NewAPIInprocClient(svc)}
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper

	// resource handler function pointers
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.dns_zone.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.dns_zone.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.dns_zone.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.dns_zone.API.Create"), zap.Error(err))
			}
		}
	}
	reqMsgFQN := "ves.io.schema.dns_zone.CreateRequest"
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, reqMsgFQN, req)
	var retErr error
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'ves.io.schema.dns_zone.API.Create' operation on 'dns_zone'"
		if retErr == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	obj := NewDBObject(nil)
	req.ToObject(obj)
	if conv, exists := s.sf.Config().MsgToObjConverters[reqMsgFQN]; exists {
		if err := conv(req, obj); err != nil {
			retErr = err
			return nil, err
		}
	}
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}
	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResource"))
		retErr = err
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResponse"))
		retErr = err
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.dns_zone.CreateResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			retErr = err
			return nil, err
		}
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.dns_zone.API.CreateResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		err := fmt.Errorf("Nil spec in Replace Request")
		return nil, svcfw.NewInvalidInputError(err.Error(), err)
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.dns_zone.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.dns_zone.API.Replace"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.dns_zone.API.ReplaceRequest", req)
	var retErr error
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'ves.io.schema.dns_zone.API.Replace' operation on 'dns_zone'"
		if retErr == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResource"))
		retErr = err
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResponse"))
		retErr = err
		return nil, server.GRPCStatusFromError(err).Err()
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.dns_zone.API.ReplaceResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.dns_zone.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	tenant := server.TenantFromContext(ctx)
	rsrcReq := &server.ResourceGetRequest{IsPublic: true, Tenant: tenant, Namespace: req.GetNamespace(), Name: req.GetName()}
	switch req.ResponseFormat {
	case GET_RSP_FORMAT_FOR_CREATE:
		rsrcReq.RspInCreateForm = true

	case GET_RSP_FORMAT_FOR_REPLACE:
		rsrcReq.RspInReplaceForm = true

	case GET_RSP_FORMAT_READ:
		rsrcReq.RspInReadForm = true

	case GET_RSP_FORMAT_STATUS:
		rsrcReq.RspInStatusForm = true

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		rsrcReq.RspInReferringObjectsForm = true

	case GET_RSP_FORMAT_BROKEN_REFERENCES:
		rsrcReq.RspInBrokenReferencesForm = true

	}

	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectGetRsp(ctx, s.sf, req, rsrcRsp)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.dns_zone.GetResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.dns_zone.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		Namespace:   req.Namespace,
		LabelFilter: req.LabelFilter,
		RspStreamed: false,
	}
	if len(req.ReportStatusFields) > 0 {
		rsrcReq.ReportStatusFields = &req.ReportStatusFields
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResource"))
	}
	rsp, err := NewListResponse(ctx, req, s.sf, rsrcRsp)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResponse allocation failed"))
	}
	if merr != nil {
		if rsp == nil {
			return nil, merr
		}
		rsp.Errors = append(rsp.Errors, &ves_io_schema.ErrorType{
			Code:    ves_io_schema.EINTERNAL,
			Message: merr.Error(),
		})

	}
	return rsp, nil
}

func (s *APISrv) Delete(ctx context.Context, req *DeleteRequest) (*google_protobuf.Empty, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.dns_zone.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.dns_zone.API.Delete"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.dns_zone.API.DeleteRequest", req)
	var retErr error
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'ves.io.schema.dns_zone.API.Delete' operation on 'dns_zone'"
		if retErr == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	tenant := server.TenantFromContext(ctx)
	key := fmt.Sprintf("%s/%s/%s", tenant, req.GetNamespace(), req.GetName())
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	rsrcReq.FailIfReferred = req.FailIfReferred
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "DeleteResource"))
		retErr = err
		return nil, server.GRPCStatusFromError(err).Err()
	}
	return &google_protobuf.Empty{}, nil
}

// Assert that APISrv implements the generated gRPC APIServer interface
var _ APIServer = &APISrv{}

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.API", strings.Join(sl[:len(sl)-1], "."))
}

func (r *Object) Key() string {
	m := r.GetMetadata()
	if m == nil {
		return ""
	}
	return strings.Join([]string{m.Namespace, m.Name}, "/")
}

func (r *Object) Uid() string {
	return r.SystemMetadata.Uid
}

func (r *ListResponse) GetKeys() []string {
	var ret []string
	for _, i := range r.Items {
		ret = append(ret, i.Namespace+"/"+i.Name)
	}
	return ret
}

// Implement server.SROListItem interface on ListResponseItem
func (l *ListResponseItem) GetObjUid() string {
	return l.Uid
}

func (l *ListResponseItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ListResponseItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ListResponseItem) GetObjName() string {
	return l.Name
}

func (l *ListResponseItem) GetObjLabels() map[string]string {
	return l.Labels
}

func NewObjectCreateRsp(e db.Entry) (*CreateResponse, error) {
	switch e.(type) {
	case nil:
		return nil, nil
	case *DBObject:
		rsp := &CreateResponse{}
		rsp.FromObject(e)
		return rsp, nil
	}
	return nil, fmt.Errorf("Entry not of type *DBObject in NewObjectCreateRsp")
}

func NewObjectReplaceRsp(e db.Entry) (*ReplaceResponse, error) {
	return &ReplaceResponse{}, nil
}

func NewObjectGetRsp(ctx context.Context, sf svcfw.Service, req *GetRequest, rsrcRsp *server.ResourceGetResponse) (*GetResponse, error) {
	rsp := &GetResponse{}
	e := rsrcRsp.Entry
	if e == nil {
		return rsp, nil
	}
	o, ok := e.(*DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *DBObject in NewObjectGetRsp")
	}

	rsp.ResourceVersion = rsrcRsp.ResourceVersion
	var merr *multierror.Error
	buildReadForm := func() {
		rsp.Metadata = &ves_io_schema.ObjectGetMetaType{}
		rsp.Metadata.FromObjectMetaType(o.Metadata)
		rsp.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
		rsp.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)
		rsp.Spec = &GetSpecType{}
		if redactor, ok := e.(db.Redactor); ok {
			if err := redactor.Redact(ctx); err != nil {
				merr = multierror.Append(merr, errors.WithMessage(err, "Error while redacting entry"))
				return
			}
		}
		rsp.Spec.FromGlobalSpecType(o.Spec.GcSpec)

	}
	_ = buildReadForm
	buildStatusForm := func() {
		for _, statusEnt := range rsrcRsp.BackRefs {
			statusObj, ok := statusEnt.ToStore().(*StatusObject)
			if !ok {
				merr = multierror.Append(merr, fmt.Errorf("%T is not *StatusObject", statusEnt))
				continue
			}
			rsp.Status = append(rsp.Status, statusObj)
		}

	}
	_ = buildStatusForm
	buildReferringObjectsForm := func() {
		for _, br := range rsrcRsp.ReferringObjects {
			rsp.ReferringObjects = append(rsp.ReferringObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildReferringObjectsForm
	buildBrokenReferencesForm := func() {
		for _, br := range rsrcRsp.DeletedReferredObjects {
			rsp.DeletedReferredObjects = append(rsp.DeletedReferredObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}
		for _, br := range rsrcRsp.DisabledReferredObjects {
			rsp.DisabledReferredObjects = append(rsp.DisabledReferredObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildBrokenReferencesForm

	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_CREATE:
		createReq, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building CreateRequest from entry")
		}
		// Name has to be specified for a new create
		createReq.Metadata.Name = ""
		rsp.CreateForm = createReq

	case GET_RSP_FORMAT_FOR_REPLACE:
		replaceReq, err := NewReplaceRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building ReplaceRequest from entry")
		}
		rsp.ReplaceForm = replaceReq

	case GET_RSP_FORMAT_STATUS:
		buildStatusForm()

	case GET_RSP_FORMAT_READ:
		buildReadForm()

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		buildReferringObjectsForm()

	case GET_RSP_FORMAT_BROKEN_REFERENCES:
		buildBrokenReferencesForm()

	default:
		buildReadForm()

		buildStatusForm()
	}

	return rsp, errors.ErrOrNil(merr)
}

func NewListResponse(ctx context.Context, req *ListRequest, sf svcfw.Service, rsrcRsp *server.ResourceListResponse) (*ListResponse, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ListRequest")
	}
	if rsrcRsp == nil {
		return nil, fmt.Errorf("Nil ResourceResponse")
	}

	errStrs := []string{}
	resp := &ListResponse{}
	resp.Items = []*ListResponseItem{}

	for _, rsrcItem := range rsrcRsp.Items {
		if rsrcItem == nil {
			errStrs = append(errStrs, fmt.Sprintf("Nil ResourceListResponseItem"))
			continue
		}

		e := rsrcItem.Entry
		o, ok := e.(*DBObject)
		if !ok {
			resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
				Code:    ves_io_schema.EINTERNAL,
				Message: fmt.Sprintf("Entry %T not of type *DBObject in NewListResponse", e),
			})

			continue
		}
		if redactor, ok := e.(db.Redactor); ok {
			if err := redactor.Redact(ctx); err != nil {
				resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
					Code:    ves_io_schema.EINTERNAL,
					Message: fmt.Sprintf("Error while redacting in NewListResponse: %s", err),
				})
				continue
			}
		}
		item := &ListResponseItem{
			Tenant:    o.GetSystemMetadata().GetTenant(),
			Namespace: o.GetMetadata().GetNamespace(),
			Name:      o.GetMetadata().GetName(),
			Uid:       o.GetMetadata().GetUid(),
			OwnerView: o.GetSystemMetadata().GetOwnerView(),
			Labels:    o.GetMetadata().GetLabels(),
		}

		item.Description = o.GetMetadata().GetDescription()
		item.Annotations = o.GetMetadata().GetAnnotations()
		item.Disabled = o.GetMetadata().GetDisable()

		if len(req.ReportFields) > 0 {
			item.Metadata = &ves_io_schema.ObjectGetMetaType{}
			item.Metadata.FromObjectMetaType(o.Metadata)
			item.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
			item.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)

			if o.Object.GetSpec().GetGcSpec() != nil {
				msgFQN := "ves.io.schema.dns_zone.GetResponse"
				if conv, exists := sf.Config().ObjToMsgConverters[msgFQN]; exists {
					getSpec := &GetSpecType{}
					getSpec.FromGlobalSpecType(o.Spec.GcSpec)
					getRsp := &GetResponse{Spec: getSpec}
					if err := conv(o, getRsp); err != nil {
						resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
							Code:    ves_io_schema.EINTERNAL,
							Message: fmt.Sprintf("Converting entry to getResponse: %s", err),
						})

						continue
					}
					item.GetSpec = getRsp.Spec
				} else {
					item.GetSpec = &GetSpecType{}
					item.GetSpec.FromGlobalSpecType(o.Spec.GcSpec)
				}
			}

		}

		if len(req.ReportStatusFields) > 0 {
			for _, sroStatus := range rsrcItem.StatusSet {
				statusDBO, ok := sroStatus.(*DBStatusObject)
				if !ok {
					resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
						Code:    ves_io_schema.EINTERNAL,
						Message: fmt.Sprintf("sro.Status %T is not of type *DBStatusObject in NewListResponse", sroStatus),
					})

					continue
				}
				item.StatusSet = append(item.StatusSet, statusDBO.StatusObject)
			}
		}

		resp.Items = append(resp.Items, item)
	}
	return resp, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "DNS Zone",
        "description": "DNS Zone object is used for configuring Primary and Secondary DNS zones.\n\nUser configures zone \"example.com\"\n\nStatus for this object will show following\n\n* List of nameservers\n\nUser can configure DNS records for a Primary zone and a Secondary zone will\ntransfer the DNS records from the primary DNS servers.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{metadata.namespace}/dns_zones": {
            "post": {
                "summary": "Create DNS Zone",
                "description": "Create DNS Zone in a given namespace. If one already exist it will give a error.",
                "operationId": "ves.io.schema.dns_zone.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created.\nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dns_zoneCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-api-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.API.Create"
            },
            "x-displayname": "DNS Zone",
            "x-ves-proto-service": "ves.io.schema.dns_zone.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{metadata.namespace}/dns_zones/{metadata.name}": {
            "put": {
                "summary": "Replace DNS Zone",
                "description": "Replace DNS Zone in a given namespace.",
                "operationId": "ves.io.schema.dns_zone.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneReplaceResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created.\nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "metadata.name",
                        "description": "name\n\nx-example: \"acmecorp-web\"\nThe configuration object to be replaced will be looked up by name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dns_zoneReplaceRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-api-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.API.Replace"
            },
            "x-displayname": "DNS Zone",
            "x-ves-proto-service": "ves.io.schema.dns_zone.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/dns_zones": {
            "get": {
                "summary": "List DNS Zone",
                "description": "List the set of dns_zone in a namespace",
                "operationId": "ves.io.schema.dns_zone.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of dns_zone",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "label_filter",
                        "description": "x-example: \"env in (staging, testing), tier in (web, db)\"\nA LabelSelectorType expression that every item in list response will satisfy",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Label Filter"
                    },
                    {
                        "name": "report_fields",
                        "description": "x-example: \"\"\nExtra fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Fields"
                    },
                    {
                        "name": "report_status_fields",
                        "description": "x-example: \"\"\nExtra status fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Status Fields"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-api-list"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.API.List"
            },
            "x-displayname": "DNS Zone",
            "x-ves-proto-service": "ves.io.schema.dns_zone.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/dns_zones/{name}": {
            "get": {
                "summary": "Get DNS Zone",
                "description": "Get DNS Zone details.",
                "operationId": "ves.io.schema.dns_zone.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_zoneGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe namespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nThe name of the configuration object to be fetched",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "response_format",
                        "description": "The format in which the configuration object is to be fetched. This could be for example\n    - in GetSpec form for the contents of object\n    - in CreateRequest form to create a new similar object\n    - to ReplaceRequest form to replace changeable values\n\nDefault format of returned resource\nResponse should be in CreateRequest format\nResponse should be in ReplaceRequest format\nResponse should be in StatusObject(s) format\nResponse should be in format of GetSpecType\nResponse should have other objects referring to this object\nResponse should have deleted and disabled objects referrred by this object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "GET_RSP_FORMAT_DEFAULT",
                            "GET_RSP_FORMAT_FOR_CREATE",
                            "GET_RSP_FORMAT_FOR_REPLACE",
                            "GET_RSP_FORMAT_STATUS",
                            "GET_RSP_FORMAT_READ",
                            "GET_RSP_FORMAT_REFERRING_OBJECTS",
                            "GET_RSP_FORMAT_BROKEN_REFERENCES"
                        ],
                        "default": "GET_RSP_FORMAT_DEFAULT",
                        "x-displayname": "Broken Referred Objects"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-api-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.API.Get"
            },
            "delete": {
                "summary": "Delete DNS Zone",
                "description": "Delete the specified dns_zone",
                "operationId": "ves.io.schema.dns_zone.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nName of the configuration object",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dns_zoneDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-api-delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.API.Delete"
            },
            "x-displayname": "DNS Zone",
            "x-ves-proto-service": "ves.io.schema.dns_zone.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        }
    },
    "definitions": {
        "dns_zoneAFSDBRecordSubtype": {
            "type": "string",
            "description": "AFS Volume Location Server or DCE Authentication Server.\n\n - NONE: NONE\n\n - AFSVolumeLocationServer: AFS Volume Location Server\n\n - DCEAuthenticationServer: DCE Authentication Server\n",
            "title": "AFSDB Record Subtype",
            "enum": [
                "NONE",
                "AFSVolumeLocationServer",
                "DCEAuthenticationServer"
            ],
            "default": "NONE",
            "x-displayname": "AFSDB Record Subtype",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.AFSDBRecordSubtype"
        },
        "dns_zoneAFSDBRecordValue": {
            "type": "object",
            "title": "AFSDBRecordValue",
            "x-displayname": "AFSDBRecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.AFSDBRecordValue",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Server name of the AFS cell database server or the DCE name server.\n\nExample: - \"mail.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.hostname: true\n",
                    "title": "Hostname",
                    "x-displayname": "Hostname",
                    "x-ves-example": "mail.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "subtype": {
                    "description": " AFSDB Record Subtype.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Subtype",
                    "$ref": "#/definitions/dns_zoneAFSDBRecordSubtype",
                    "x-displayname": "Subtype",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "dns_zoneCERTAlgorithm": {
            "type": "string",
            "description": "CERT algorithm value must be compatible with the specified algorithm.\n\n - RESERVEDALGORITHM: RESERVEDALGORITHM\n\n - RSAMD5: RSAMD5\n\n - DH: DH\n\n - DSASHA1: DSASHA1\n\n - ECC: ECC\n\n - RSASHA1ALGORITHM: RSA-SHA1\n\n - INDIRECT: INDIRECT\n\n - PRIVATEDNS: PRIVATEDNS\n\n - PRIVATEOID: PRIVATEOID\n",
            "title": "CERT Algorithm",
            "enum": [
                "RESERVEDALGORITHM",
                "RSAMD5",
                "DH",
                "DSASHA1",
                "ECC",
                "RSASHA1ALGORITHM",
                "INDIRECT",
                "PRIVATEDNS",
                "PRIVATEOID"
            ],
            "default": "RESERVEDALGORITHM",
            "x-displayname": "CERT Algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.CERTAlgorithm"
        },
        "dns_zoneCERTRecordValue": {
            "type": "object",
            "title": "CERTRecordValue",
            "x-displayname": "CERTRecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CERTRecordValue",
            "properties": {
                "algorithm": {
                    "description": "\nExample: - \"3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Algorithm",
                    "$ref": "#/definitions/dns_zoneCERTAlgorithm",
                    "x-displayname": "Algorithm",
                    "x-ves-example": "3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "cert_key_tag": {
                    "type": "integer",
                    "description": "\nExample: - \"3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Key Tag",
                    "format": "int64",
                    "x-displayname": "Key Tag",
                    "x-ves-example": "3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "cert_type": {
                    "description": "\nExample: - \"PKIX\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Type",
                    "$ref": "#/definitions/dns_zoneCERTType",
                    "x-displayname": "Type",
                    "x-ves-example": "PKIX",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "certificate": {
                    "type": "string",
                    "description": " Certificate in base 64 format.\n\nExample: - \"Ab100cFg\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 4096\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certificate",
                    "minLength": 1,
                    "maxLength": 4096,
                    "x-displayname": "Certificate",
                    "x-ves-example": "Ab100cFg",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "4096",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "dns_zoneCERTResourceRecord": {
            "type": "object",
            "description": "DNS CERT Record",
            "title": "CERTResourceRecord",
            "x-displayname": "DNS CERT Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CERTResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CERT Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "CERT Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneCERTRecordValue"
                    },
                    "x-displayname": "CERT Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneCERTType": {
            "type": "string",
            "description": "CERT type value must be compatible with the specified types.\n\n - INVALIDCERTTYPE: INVALIDCERTTYPE\n\n - PKIX: PKIX\n\n - SPKI: SPKI\n\n - PGP: PGP\n\n - IPKIX: IPKIX\n\n - ISPKI: ISPKI\n\n - IPGP: IPGP\n\n - ACPKIX: ACPKIX\n\n - IACPKIX: IACPKIX\n\n - URI_: URI\n\n - OID: OID\n",
            "title": "CERT Type",
            "enum": [
                "INVALIDCERTTYPE",
                "PKIX",
                "SPKI",
                "PGP",
                "IPKIX",
                "ISPKI",
                "IPGP",
                "ACPKIX",
                "IACPKIX",
                "URI_",
                "OID"
            ],
            "default": "INVALIDCERTTYPE",
            "x-displayname": "CERT Type",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.CERTType"
        },
        "dns_zoneCertificationAuthorityAuthorization": {
            "type": "object",
            "title": "CertificationAuthorityAuthorization",
            "x-displayname": "CertificationAuthorityAuthorization",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CertificationAuthorityAuthorization",
            "properties": {
                "flags": {
                    "type": "integer",
                    "description": " This flag should be an integer between 0 and 255.\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 255\n",
                    "title": "Certification authority authorization flags",
                    "format": "int64",
                    "x-displayname": "Flags",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "255"
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "\n\nExample: - \"issue\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"issue\\\", \\\"issuewild\\\", \\\"iodef\\\"]\n",
                    "title": "Certification authority authorization tag",
                    "x-displayname": "Tag",
                    "x-ves-example": "issue",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"issue\\\", \\\"issuewild\\\", \\\"iodef\\\"]"
                    }
                },
                "value": {
                    "type": "string",
                    "description": "\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 1024\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certification authority authorization value",
                    "minLength": 1,
                    "maxLength": 1024,
                    "x-displayname": "Value",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "1024",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "dns_zoneCreateRequest": {
            "type": "object",
            "description": "This is the input message of the 'Create' RPC",
            "title": "CreateRequest is used to create an instance of dns_zone",
            "x-displayname": "Create Request",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CreateRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectCreateMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the DNS Zone",
                    "title": "spec",
                    "$ref": "#/definitions/dns_zoneCreateSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "dns_zoneCreateResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CreateResponse",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the DNS Zone",
                    "title": "spec",
                    "$ref": "#/definitions/dns_zoneGetSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "dns_zoneCreateSpecType": {
            "type": "object",
            "description": "Create DNS Zone in a given namespace. If one already exist it will give a error.",
            "title": "Create DNS Zone",
            "x-displayname": "Create DNS Zone",
            "x-ves-oneof-field-dns_type": "[\"primary\",\"secondary\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CreateSpecType",
            "properties": {
                "primary": {
                    "description": "Exclusive with [secondary]\n Primary DNS",
                    "$ref": "#/definitions/dns_zonePrimaryDNSCreateSpecType",
                    "x-displayname": "Primary DNS Configuration"
                },
                "secondary": {
                    "description": "Exclusive with [primary]\n Secondary DNS",
                    "$ref": "#/definitions/dns_zoneSecondaryDNSCreateSpecType",
                    "x-displayname": "Secondary DNS Configuration"
                }
            }
        },
        "dns_zoneDLVResourceRecord": {
            "type": "object",
            "description": "x-displayName: \"DNS DLV Record\"\nDNS DLV Record",
            "title": "DLVResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Record Name (Excluding Domain name)\"\nx-example: \"www or mail or * or ww* or *ab\"\nDLV Record name, please provide only the specific subdomain or record name without the base domain.",
                    "title": "Record Name"
                },
                "values": {
                    "type": "array",
                    "description": "x-displayName: \"DLV Value\"\nx-example: \"values\"\nx-required\nIt uses the same format as the DS record.",
                    "title": "DLV Value",
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    }
                }
            }
        },
        "dns_zoneDNSAAAAResourceRecord": {
            "type": "object",
            "description": "RecordSet for AAAA Records",
            "title": "DNSAAAAResourceRecord",
            "x-displayname": "DNSAAAAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAAAAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " AAAA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": " A valid IPv6 address, for example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n\nExample: - \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv6: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "IPv6 addresses",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv6 Addresses",
                    "x-ves-example": "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv6": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSAFSDBRecord": {
            "type": "object",
            "description": "DNS AFSDB Record",
            "title": "DNSAFSDBRecord",
            "x-displayname": "DNS AFSDB Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAFSDBRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " AFSDB Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "AFSDB Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneAFSDBRecordValue"
                    },
                    "x-displayname": "AFSDB Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSAResourceRecord": {
            "type": "object",
            "description": "A Records",
            "title": "DNSAResourceRecord",
            "x-displayname": "DNSAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " A Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": " A valid IPv4 address, for example: 1.1.1.1\n\nExample: - \"1.1.1.1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv4: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "IPv4 addresses",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv4 Addresses",
                    "x-ves-example": "1.1.1.1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv4": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSAliasResourceRecord": {
            "type": "object",
            "title": "DNSAliasResourceRecord",
            "x-displayname": "DNSAliasResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAliasResourceRecord",
            "properties": {
                "value": {
                    "type": "string",
                    "description": " A valid domain name, for example: example.com\n\nExample: - \"example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Domain",
                    "maxLength": 255,
                    "x-displayname": "Domain",
                    "x-ves-example": "example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                }
            }
        },
        "dns_zoneDNSCAAResourceRecord": {
            "type": "object",
            "title": "DNSCAAResourceRecord",
            "x-displayname": "DNSCAAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCAAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CAA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 100\n",
                    "title": "CAA Record Value",
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneCertificationAuthorityAuthorization"
                    },
                    "x-displayname": "CAA Record Value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "100"
                    }
                }
            }
        },
        "dns_zoneDNSCDSRecord": {
            "type": "object",
            "description": "DNS CDS Record",
            "title": "DNSCDSRecord",
            "x-displayname": "DNS CDS Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCDSRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CDS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "DS Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    },
                    "x-displayname": "DS Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSCNAMEResourceRecord": {
            "type": "object",
            "title": "DNSCNAMEResourceRecord",
            "x-displayname": "DNSCNAMEResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCNAMEResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CName Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.pattern: ^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.pattern": "^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "value": {
                    "type": "string",
                    "description": "\n\nExample: - \"example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Domain",
                    "maxLength": 255,
                    "x-displayname": "Domain",
                    "x-ves-example": "example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                }
            }
        },
        "dns_zoneDNSDSRecord": {
            "type": "object",
            "description": "DNS DS Record",
            "title": "DNSDSRecord",
            "x-displayname": "DNS DS Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSDSRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " DS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "DS Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    },
                    "x-displayname": "DS Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSDeploymentStatus": {
            "type": "string",
            "description": "Deployment Status of DNS Zone\n\nDNS Zone is successfully deployed and active\nDeployment of DNS Zone is pending\nDNS Zone has been disabled.\nDNS Zone deployment encountered an error.",
            "title": "DNS Zone Deployment Status",
            "enum": [
                "DNS_ZONE_ACTIVE",
                "DNS_ZONE_PENDING",
                "DNS_ZONE_DISABLED",
                "DNS_ZONE_FAILED"
            ],
            "default": "DNS_ZONE_ACTIVE",
            "x-displayname": "DNS Zone Deployment Status",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.DNSDeploymentStatus"
        },
        "dns_zoneDNSEUI48ResourceRecord": {
            "type": "object",
            "description": "DNS EUI48 Record",
            "title": "DNSEUI48ResourceRecord",
            "x-displayname": "DNS EUI48 Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSEUI48ResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " EUI48 Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "value": {
                    "type": "string",
                    "description": " A valid eui48 identifier, for example: 01-23-45-67-89-ab\n\nExample: - \"01-23-45-67-89-ab\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 17\n  ves.io.schema.rules.string.min_len: 17\n  ves.io.schema.rules.string.pattern: ^([0-9A-Fa-f]{2}-){5}([0-9A-Fa-f]{2})$\n",
                    "title": "EUI48 Identifier",
                    "minLength": 17,
                    "maxLength": 17,
                    "x-displayname": "EUI48 Identifier",
                    "x-ves-example": "01-23-45-67-89-ab",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "17",
                        "ves.io.schema.rules.string.min_len": "17",
                        "ves.io.schema.rules.string.pattern": "^([0-9A-Fa-f]{2}-){5}([0-9A-Fa-f]{2})$"
                    }
                }
            }
        },
        "dns_zoneDNSEUI64ResourceRecord": {
            "type": "object",
            "description": "DNS EUI64 Record",
            "title": "DNSEUI64ResourceRecord",
            "x-displayname": "DNS EUI64 Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSEUI64ResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " EUI64 Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "value": {
                    "type": "string",
                    "description": " A valid EUI64 identifier, for example: 01-23-45-67-89-ab-cd-ef\n\nExample: - \"01-23-45-67-89-ab-cd-ef\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 23\n  ves.io.schema.rules.string.min_len: 23\n  ves.io.schema.rules.string.pattern: ^([0-9A-Fa-f]{2}-){7}([0-9A-Fa-f]{2})$\n",
                    "title": "EUI64 Identifier",
                    "minLength": 23,
                    "maxLength": 23,
                    "x-displayname": "EUI64 Identifier",
                    "x-ves-example": "01-23-45-67-89-ab-cd-ef",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "23",
                        "ves.io.schema.rules.string.min_len": "23",
                        "ves.io.schema.rules.string.pattern": "^([0-9A-Fa-f]{2}-){7}([0-9A-Fa-f]{2})$"
                    }
                }
            }
        },
        "dns_zoneDNSLBResourceRecord": {
            "type": "object",
            "description": "DNS Load Balancer Record",
            "title": "DNSLBResourcerecord",
            "x-displayname": "DNS Load Balancer Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSLBResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Load Balancer record name (except for SRV DNS Load balancer record) should be a simple record name and not a subdomain of a subdomain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Record Name",
                    "maxLength": 255,
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                },
                "value": {
                    "title": "DNS LB Record",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "DNS Load Balancer Record"
                }
            }
        },
        "dns_zoneDNSLOCResourceRecord": {
            "type": "object",
            "description": "DNS LOC Record",
            "title": "DNSLOCResourceRecord",
            "x-displayname": "DNS LOC Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSLOCResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " LOC Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"32 7 19 S 116 2 25 E 10m\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "LOC Values",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneLOCValue"
                    },
                    "x-displayname": "LOC Value",
                    "x-ves-example": "32 7 19 S 116 2 25 E 10m",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSMXResourceRecord": {
            "type": "object",
            "title": "DNSMXResourceRecord",
            "x-displayname": "DNSMXResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSMXResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " MX Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n",
                    "title": "Value",
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneMailExchanger"
                    },
                    "x-displayname": "MX Record Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100"
                    }
                }
            }
        },
        "dns_zoneDNSNAPTRResourceRecord": {
            "type": "object",
            "description": "DNS NAPTR Record",
            "title": "DNSNAPTRResourceRecord",
            "x-displayname": "DNS NAPTR Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSNAPTRResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " NAPTR Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "NAPTR Values",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneNAPTRValue"
                    },
                    "x-displayname": "NAPTR Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSNSResourceRecord": {
            "type": "object",
            "title": "DNSNSResourceRecord",
            "x-displayname": "DNSNSResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSNSResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " NS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.we\" or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.we\" or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"ns1.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Name-servers",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Name Servers",
                    "x-ves-example": "ns1.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSPTRResourceRecord": {
            "type": "object",
            "title": "DNSPTRResourceRecord",
            "x-displayname": "DNSPTRResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSPTRResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " PTR Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"my.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Domain names",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domain Name",
                    "x-ves-example": "my.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSSECMode": {
            "type": "object",
            "title": "DNSSEC Mode Disable",
            "x-displayname": "Disable",
            "x-ves-oneof-field-mode": "[\"disable\",\"enable\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSSECMode",
            "properties": {
                "disable": {
                    "description": "Exclusive with [enable]\n DNSSEC disabled",
                    "title": "Disable",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable"
                },
                "enable": {
                    "description": "Exclusive with [disable]\n DNSSEC enable",
                    "title": "Enable",
                    "$ref": "#/definitions/dns_zoneDNSSECModeEnable",
                    "x-displayname": "Enable"
                }
            }
        },
        "dns_zoneDNSSECModeEnable": {
            "type": "object",
            "description": "DNSSEC enable",
            "title": "Enable",
            "x-displayname": "Enable",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSSECModeEnable"
        },
        "dns_zoneDNSSECStatus": {
            "type": "object",
            "description": "DNSSEC details.",
            "title": "DNSSEC",
            "x-displayname": "DNSSEC",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSSECStatus",
            "properties": {
                "ds_records": {
                    "type": "array",
                    "title": "DNSSEC DS Records",
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecord"
                    },
                    "x-displayname": "DS Records"
                },
                "mode": {
                    "title": "DNSSEC Mode",
                    "$ref": "#/definitions/dns_zoneDNSSECMode",
                    "x-displayname": "DNSSEC Mode"
                }
            }
        },
        "dns_zoneDNSSRVResourceRecord": {
            "type": "object",
            "title": "DNSSRVResourceRecord",
            "x-displayname": "DNSSRVResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSSRVResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " SRV Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.pattern: ^([*]|[a-zA-Z0-9-_]{1,63})([.][a-zA-Z0-9-_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.pattern": "^([*]|[a-zA-Z0-9-_]{1,63})([.][a-zA-Z0-9-_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "SRV Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneSRVService"
                    },
                    "x-displayname": "SRV Value",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSTXTResourceRecord": {
            "type": "object",
            "title": "DNSTXTResourceRecord",
            "x-displayname": "DNSTXTResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSTXTResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " TXT Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.max_len: 4000\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Text",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string",
                        "maxLength": 4000
                    },
                    "x-displayname": "Text",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.max_len": "4000",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSZoneStatus": {
            "type": "object",
            "description": "Status DNS Zone",
            "title": "DNS Zone Status",
            "x-displayname": "DNS Zone Status",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSZoneStatus",
            "properties": {
                "deployment_status": {
                    "description": " Status of DNS Zone Deployment",
                    "title": "DNS Zone Deployment Status",
                    "$ref": "#/definitions/dns_zoneDNSDeploymentStatus",
                    "x-displayname": "DNS Zone Deployment Status"
                },
                "dnssec": {
                    "title": "DNSSEC",
                    "$ref": "#/definitions/dns_zoneDNSSECStatus",
                    "x-displayname": "DNSSEC"
                },
                "volterra_nameservers": {
                    "type": "array",
                    "description": " Status of DNS domain verification process.",
                    "title": "F5XC Nameservers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "F5XC Nameservers"
                }
            }
        },
        "dns_zoneDSKeyAlgorithm": {
            "type": "string",
            "description": "DS key value must be compatible with the specified algorithm.\n\n - UNSPECIFIED: UNSPECIFIED\n\n - RSASHA1: RSASHA1\n\n - RSASHA1NSEC3SHA1: RSASHA1-NSEC3-SHA1\n\n - RSASHA256: RSASHA256\n\n - RSASHA512: RSASHA512\n\n - ECDSAP256SHA256: ECDSAP256SHA256\n\n - ECDSAP384SHA384: ECDSAP384SHA384\n\n - ED25519: ED25519\n\n - ED448: ED448\n",
            "title": "DS Key Algorithm",
            "enum": [
                "UNSPECIFIED",
                "RSASHA1",
                "RSASHA1NSEC3SHA1",
                "RSASHA256",
                "RSASHA512",
                "ECDSAP256SHA256",
                "ECDSAP384SHA384",
                "ED25519",
                "ED448"
            ],
            "default": "UNSPECIFIED",
            "x-displayname": "DS Key algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.DSKeyAlgorithm"
        },
        "dns_zoneDSRecord": {
            "type": "object",
            "description": "DNSSEC Record details",
            "title": "DS Record",
            "x-displayname": "DS Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DSRecord",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": " DNSSEC Algorithm\n https://datatracker.ietf.org/doc/html/rfc2535#section-3.2\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DNSSEC Algorithm",
                    "x-displayname": "DNSSEC Algorithm",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "digest": {
                    "type": "string",
                    "description": " DNSSEC Digest https://datatracker.ietf.org/doc/html/rfc4034#section-5.1.4\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DNSSEC Digest",
                    "x-displayname": "DNSSEC Digest",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "digest_type": {
                    "type": "string",
                    "description": " DNSSEC Digest Type\n https://datatracker.ietf.org/doc/html/rfc4034#appendix-A.2\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DNSSEC Digest Type",
                    "x-displayname": "DNSSEC Digest Type",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "flags": {
                    "type": "integer",
                    "description": " DNSSEC Flags https://datatracker.ietf.org/doc/html/rfc4034#section-2.1.1\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DNSSEC Flags",
                    "format": "int64",
                    "x-displayname": "DNSSEC Flags",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "key_tag": {
                    "type": "integer",
                    "description": " DNSSEC Key Tag https://datatracker.ietf.org/doc/html/rfc2535#section-3.2\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DNSSEC Key Tag",
                    "format": "int64",
                    "x-displayname": "DNSSEC Key Tag",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "public_key": {
                    "type": "string",
                    "description": " DNSSEC Public Key https://datatracker.ietf.org/doc/html/rfc4034#section-2",
                    "title": "DNSSEC Public Key",
                    "x-displayname": "DNSSEC Public Key"
                },
                "ttl": {
                    "type": "integer",
                    "description": " DNSSEC TTL https://datatracker.ietf.org/doc/html/rfc4034#section-5.1.4\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "DNSSEC TTL",
                    "format": "int64",
                    "x-displayname": "DNSSEC TTL",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                }
            }
        },
        "dns_zoneDSRecordValue": {
            "type": "object",
            "title": "DSRecordValue",
            "x-displayname": "DSRecordValue",
            "x-ves-oneof-field-digest_choice": "[\"sha1_digest\",\"sha256_digest\",\"sha384_digest\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DSRecordValue",
            "properties": {
                "ds_key_algorithm": {
                    "description": " DS key value must be compatible with the specified algorithm.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DS Key Algorithm",
                    "$ref": "#/definitions/dns_zoneDSKeyAlgorithm",
                    "x-displayname": "DS Key algorithm",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "key_tag": {
                    "type": "integer",
                    "description": " A short numeric value which can help quickly identify the referenced DNSKEY-record.\n\nExample: - \"15228\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Key Tag",
                    "format": "int64",
                    "x-displayname": "Key Tag",
                    "x-ves-example": "15228",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "sha1_digest": {
                    "description": "Exclusive with [sha256_digest sha384_digest]\n",
                    "title": "SHA1 Digest",
                    "$ref": "#/definitions/dns_zoneSHA1Digest",
                    "x-displayname": "SHA1 Digest"
                },
                "sha256_digest": {
                    "description": "Exclusive with [sha1_digest sha384_digest]\n",
                    "title": "SHA256 Digest",
                    "$ref": "#/definitions/dns_zoneSHA256Digest",
                    "x-displayname": "SHA256 Digest"
                },
                "sha384_digest": {
                    "description": "Exclusive with [sha1_digest sha256_digest]\n",
                    "title": "SHA384 Digest",
                    "$ref": "#/definitions/dns_zoneSHA384Digest",
                    "x-displayname": "SHA384 Digest"
                }
            }
        },
        "dns_zoneDeleteRequest": {
            "type": "object",
            "description": "This is the input message of the 'Delete' RPC.",
            "title": "DeleteRequest is used to delete a dns_zone",
            "x-displayname": "Delete Request",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DeleteRequest",
            "properties": {
                "fail_if_referred": {
                    "type": "boolean",
                    "description": " Fail the delete operation if this object is being referred by other objects",
                    "title": "fail_if_referred",
                    "format": "boolean",
                    "x-displayname": "Fail-If-Referred"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the configuration object\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace in which the configuration object is present\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "dns_zoneGetResponse": {
            "type": "object",
            "description": "This is the output message of the 'Get' RPC",
            "title": "GetResponse is the shape of a read dns_zone",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.GetResponse",
            "properties": {
                "create_form": {
                    "description": "Format used to create a new similar object",
                    "title": "create_form",
                    "$ref": "#/definitions/dns_zoneCreateRequest",
                    "x-displayname": "CreateRequest Format"
                },
                "deleted_referred_objects": {
                    "type": "array",
                    "description": "The set of deleted objects that are referred by this object",
                    "title": "deleted_referred_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Deleted Referred Objects"
                },
                "disabled_referred_objects": {
                    "type": "array",
                    "description": "The set of deleted objects that are referred by this object",
                    "title": "disabled_referred_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Disabled Referred Objects"
                },
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "referring_objects": {
                    "type": "array",
                    "description": "The set of objects that are referring to this object in their spec",
                    "title": "referring_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Referring Objects"
                },
                "replace_form": {
                    "description": "Format to replace changeable values in object",
                    "title": "replace_form",
                    "$ref": "#/definitions/dns_zoneReplaceRequest",
                    "x-displayname": "ReplaceRequest Format"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the DNS Zone",
                    "title": "spec",
                    "$ref": "#/definitions/dns_zoneGetSpecType",
                    "x-displayname": "Spec"
                },
                "status": {
                    "type": "array",
                    "description": "The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/dns_zoneStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "dns_zoneGetResponseFormatCode": {
            "type": "string",
            "description": "x-displayName: \"Get Response Format\"\nThis is the various forms that can be requested to be sent in the GetResponse\n\n - GET_RSP_FORMAT_DEFAULT: x-displayName: \"Default Format\"\nDefault format of returned resource\n - GET_RSP_FORMAT_FOR_CREATE: x-displayName: \"Create request Format\"\nResponse should be in CreateRequest format\n - GET_RSP_FORMAT_FOR_REPLACE: x-displayName: \"Replace request format\"\nResponse should be in ReplaceRequest format\n - GET_RSP_FORMAT_STATUS: x-displayName: \"Status format\"\nResponse should be in StatusObject(s) format\n - GET_RSP_FORMAT_READ: x-displayName: \"GetSpecType format\"\nResponse should be in format of GetSpecType\n - GET_RSP_FORMAT_REFERRING_OBJECTS: x-displayName: \"Referring Objects\"\nResponse should have other objects referring to this object\n - GET_RSP_FORMAT_BROKEN_REFERENCES: x-displayName: \"Broken Referred Objects\"\nResponse should have deleted and disabled objects referrred by this object",
            "title": "GetResponseFormatCode",
            "enum": [
                "GET_RSP_FORMAT_DEFAULT",
                "GET_RSP_FORMAT_FOR_CREATE",
                "GET_RSP_FORMAT_FOR_REPLACE",
                "GET_RSP_FORMAT_STATUS",
                "GET_RSP_FORMAT_READ",
                "GET_RSP_FORMAT_REFERRING_OBJECTS",
                "GET_RSP_FORMAT_BROKEN_REFERENCES"
            ],
            "default": "GET_RSP_FORMAT_DEFAULT"
        },
        "dns_zoneGetSpecType": {
            "type": "object",
            "description": "Get DNS Zone details.",
            "title": "Get DNS Zone",
            "x-displayname": "Get DNS Zone",
            "x-ves-oneof-field-dns_type": "[\"primary\",\"secondary\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.GetSpecType",
            "properties": {
                "domain": {
                    "type": "string"
                },
                "num_of_dns_records": {
                    "type": "integer",
                    "description": " Number of DNS records displays number of dns records for each zone",
                    "format": "int64",
                    "x-displayname": "Number of DNS records"
                },
                "primary": {
                    "description": "Exclusive with [secondary]\n Primary DNS",
                    "$ref": "#/definitions/dns_zonePrimaryDNSGetSpecType",
                    "x-displayname": "Primary DNS Configuration"
                },
                "secondary": {
                    "description": "Exclusive with [primary]\n Secondary DNS",
                    "$ref": "#/definitions/dns_zoneSecondaryDNSGetSpecType",
                    "x-displayname": "Secondary DNS Configuration"
                }
            }
        },
        "dns_zoneLOCValue": {
            "type": "object",
            "title": "LOCValue",
            "x-displayname": "LOCValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.LOCValue",
            "properties": {
                "altitude": {
                    "type": "number",
                    "description": " Altitude in meters\n\nExample: - \"20.3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: -100000.00\n  ves.io.schema.rules.float.lte: 42849672.95\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Altitude",
                    "format": "float",
                    "x-displayname": "Altitude",
                    "x-ves-example": "20.3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "-100000.00",
                        "ves.io.schema.rules.float.lte": "42849672.95",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "horizontal_precision": {
                    "type": "number",
                    "description": " Horizontal Precision in meters\n\nExample: - \"30.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Horizontal Precision",
                    "format": "float",
                    "x-displayname": "Horizontal Precision",
                    "x-ves-example": "30.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                },
                "latitude_degree": {
                    "type": "integer",
                    "description": " Latitude degree, an integer between 0 and 90, including 0 and 90\n\nExample: - \"51\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 90\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Latitude degree",
                    "format": "int32",
                    "x-displayname": "Latitude degree",
                    "x-ves-example": "51",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "90",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "latitude_hemisphere": {
                    "description": " Latitude hemisphere, N or S\n\nExample: - \"N\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Latitude hemisphere",
                    "$ref": "#/definitions/dns_zoneLatitudeHemisphere",
                    "x-displayname": "Latitude hemisphere",
                    "x-ves-example": "N",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "latitude_minute": {
                    "type": "integer",
                    "description": " Latitude minute, an integer between 0 and 59, including 0 and 59\n\nExample: - \"30\"-\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 59\n",
                    "title": "Latitude minute",
                    "format": "int32",
                    "x-displayname": "Latitude minute",
                    "x-ves-example": "30",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "59"
                    }
                },
                "latitude_second": {
                    "type": "number",
                    "description": " Latitude second, an decimal between 0 and 59.999, including 0 and 59.999\n\nExample: - \"12.000\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 59.999\n",
                    "title": "Latitude second",
                    "format": "float",
                    "x-displayname": "Latitude second",
                    "x-ves-example": "12.000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "59.999"
                    }
                },
                "location_diameter": {
                    "type": "number",
                    "description": " Diameter of a sphere enclosing the described entity, in meters\n\nExample: - \"30.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Size",
                    "format": "float",
                    "x-displayname": "Size",
                    "x-ves-example": "30.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                },
                "longitude_degree": {
                    "type": "integer",
                    "description": " Longitude degree, an integer between 0 and 180, including 0 and 180\n\nExample: - \"51\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 180\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Longitude degree",
                    "format": "int32",
                    "x-displayname": "Longitude degree",
                    "x-ves-example": "51",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "180",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "longitude_hemisphere": {
                    "description": " Longitude hemisphere, E or W\n\nExample: - \"E\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Longitude hemisphere",
                    "$ref": "#/definitions/dns_zoneLongitudeHemisphere",
                    "x-displayname": "Longitude hemisphere",
                    "x-ves-example": "E",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "longitude_minute": {
                    "type": "integer",
                    "description": " Longitude minute, an integer between 0 and 59, including 0 and 59\n\nExample: - \"30\"-\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 59\n",
                    "title": "Longitude minute",
                    "format": "int32",
                    "x-displayname": "Longitude minute",
                    "x-ves-example": "30",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "59"
                    }
                },
                "longitude_second": {
                    "type": "number",
                    "description": " Longitude second, an decimal between 0 and 59.999, including 0 and 59.999\n\nExample: - \"12.000\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 59.999\n",
                    "title": "Longitude second",
                    "format": "float",
                    "x-displayname": "Longitude second",
                    "x-ves-example": "12.000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "59.999"
                    }
                },
                "vertical_precision": {
                    "type": "number",
                    "description": " Vertical Precision in meters\n\nExample: - \"10.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Vertical Precision",
                    "format": "float",
                    "x-displayname": "Vertical Precision",
                    "x-ves-example": "10.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                }
            }
        },
        "dns_zoneLatitudeHemisphere": {
            "type": "string",
            "description": "Latitude hemisphere can only be N or S\n\n - N: North Hemisphere\n\n - S: South Hemisphere\n",
            "title": "Latitude Hemisphere",
            "enum": [
                "N",
                "S"
            ],
            "default": "N",
            "x-displayname": "Latitude hemisphere",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.LatitudeHemisphere"
        },
        "dns_zoneListResponse": {
            "type": "object",
            "description": "This is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of dns_zone",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ListResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/dns_zoneListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "dns_zoneListResponseItem": {
            "type": "object",
            "description": "By default a summary of dns_zone is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of dns_zone",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ListResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this dns_zone",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this dns_zone",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates dns_zone is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/dns_zoneGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this dns_zone",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this dns_zone\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "status_set": {
                    "type": "array",
                    "description": " The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/dns_zoneStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this dns_zone\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "dns_zoneLongitudeHemisphere": {
            "type": "string",
            "description": "Longitude hemisphere can only be E or W\n\n - E: East Hemisphere\n\n - W: West Hemisphere\n",
            "title": "Longitude Hemisphere",
            "enum": [
                "E",
                "W"
            ],
            "default": "E",
            "x-displayname": "Longitude hemisphere",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.LongitudeHemisphere"
        },
        "dns_zoneMailExchanger": {
            "type": "object",
            "title": "MailExchanger",
            "x-displayname": "MailExchanger",
            "x-ves-proto-message": "ves.io.schema.dns_zone.MailExchanger",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": " Mail exchanger domain name, please provide the full hostname, for example: mail.example.com\n\nExample: - \"mail.example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n",
                    "title": "Domain",
                    "x-displayname": "Domain",
                    "x-ves-example": "mail.example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": " Mail exchanger priority code\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                }
            }
        },
        "dns_zoneNAPTRValue": {
            "type": "object",
            "title": "NAPTRValue",
            "x-displayname": "NAPTRValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.NAPTRValue",
            "properties": {
                "flags": {
                    "type": "string",
                    "description": " Flag to control aspects of the rewriting and interpretation of the fields in the record. At this time only four flags, S/A/U/P, are defined.\n\nExample: - \"\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 255\n  ves.io.schema.rules.string.pattern: ^(S|s|A|a|U|u|P|p)$\n",
                    "title": "Flags",
                    "maxLength": 255,
                    "x-displayname": "Flags",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "255",
                        "ves.io.schema.rules.string.pattern": "^(S|s|A|a|U|u|P|p)$"
                    }
                },
                "order": {
                    "type": "integer",
                    "description": " Order in which the NAPTR records must be processed. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Order",
                    "format": "int64",
                    "x-displayname": "Order",
                    "x-ves-example": "10",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "preference": {
                    "type": "integer",
                    "description": " Preference when records have the same order. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Preference",
                    "format": "int64",
                    "x-displayname": "Preference",
                    "x-ves-example": "10",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "regexp": {
                    "type": "string",
                    "description": " Regular expression to construct the next domain name to lookup.\n\nExample: - \"\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Regular Expression",
                    "maxLength": 255,
                    "x-displayname": "Regular Expression",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                },
                "replacement": {
                    "type": "string",
                    "description": " The next NAME to query for NAPTR, SRV, or address records depending on the value of the flags field.\n\nExample: - \"\"-",
                    "title": "Replacement",
                    "x-displayname": "Replacement"
                },
                "service": {
                    "type": "string",
                    "description": " Specifies the service(s) available down this rewrite path.\n\nExample: - \"\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n  ves.io.schema.rules.string.pattern: ^([A-Za-z][A-Za-z0-9]{0,31}(\\\\+[A-Za-z][A-Za-z0-9]{0,31})*$|^$)\n",
                    "title": "Protocol Resolution Service",
                    "maxLength": 255,
                    "x-displayname": "Protocol Resolution Service",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255",
                        "ves.io.schema.rules.string.pattern": "^([A-Za-z][A-Za-z0-9]{0,31}(\\\\+[A-Za-z][A-Za-z0-9]{0,31})*$|^$)"
                    }
                }
            }
        },
        "dns_zonePrimaryDNSCreateSpecType": {
            "type": "object",
            "title": "PrimaryDNSCreateSpecType",
            "x-displayname": "PrimaryDNSCreateSpecType",
            "x-ves-oneof-field-soa_record_parameters_choice": "[\"default_soa_parameters\",\"soa_parameters\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.PrimaryDNSCreateSpecType",
            "properties": {
                "allow_http_lb_managed_records": {
                    "type": "boolean",
                    "description": " Option to allow user-created HTTP, TCP, and CDN load balancer related resource records to be automatically managed in a protected RRset.",
                    "format": "boolean"
                },
                "default_rr_set_group": {
                    "type": "array",
                    "description": " Collection of DNS record sets in the default group.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 50000\n",
                    "maxItems": 50000,
                    "items": {
                        "$ref": "#/definitions/dns_zoneRRSet"
                    },
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "50000"
                    }
                },
                "default_soa_parameters": {
                    "description": "Exclusive with [soa_parameters]\n Use default parameters",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "dnssec_mode": {
                    "$ref": "#/definitions/dns_zoneDNSSECMode"
                },
                "rr_set_group": {
                    "type": "array",
                    "description": " Collection of additional DNS resource record sets\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 50\n  ves.io.schema.rules.repeated.unique_metadata_name: true\n",
                    "maxItems": 50,
                    "items": {
                        "$ref": "#/definitions/dns_zoneRRSetGroup"
                    },
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "50",
                        "ves.io.schema.rules.repeated.unique_metadata_name": "true"
                    }
                },
                "soa_parameters": {
                    "description": "Exclusive with [default_soa_parameters]\n Configure SOA Record parameters",
                    "$ref": "#/definitions/dns_zoneSOARecordParameterConfig"
                }
            }
        },
        "dns_zonePrimaryDNSGetSpecType": {
            "type": "object",
            "title": "PrimaryDNSGetSpecType",
            "x-displayname": "PrimaryDNSGetSpecType",
            "x-ves-displayorder": "5,12,13,8,9,11,10",
            "x-ves-oneof-field-soa_record_parameters_choice": "[\"default_soa_parameters\",\"soa_parameters\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.PrimaryDNSGetSpecType",
            "properties": {
                "admin": {
                    "type": "string"
                },
                "allow_http_lb_managed_records": {
                    "type": "boolean",
                    "description": " Option to allow user-created HTTP, TCP, and CDN load balancer related resource records to be automatically managed in a protected RRset.",
                    "format": "boolean"
                },
                "default_rr_set_group": {
                    "type": "array",
                    "description": " Collection of DNS record sets in the default group.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 50000\n",
                    "maxItems": 50000,
                    "items": {
                        "$ref": "#/definitions/dns_zoneRRSet"
                    },
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "50000"
                    }
                },
                "default_soa_parameters": {
                    "description": "Exclusive with [soa_parameters]\n Use default parameters",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "dnssec_mode": {
                    "$ref": "#/definitions/dns_zoneDNSSECMode"
                },
                "rr_set_group": {
                    "type": "array",
                    "description": " Collection of additional DNS resource record sets\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 50\n  ves.io.schema.rules.repeated.unique_metadata_name: true\n",
                    "maxItems": 50,
                    "items": {
                        "$ref": "#/definitions/dns_zoneRRSetGroup"
                    },
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "50",
                        "ves.io.schema.rules.repeated.unique_metadata_name": "true"
                    }
                },
                "serial": {
                    "type": "integer",
                    "description": " Secondary nameservers should initiate a zone transfer when this number is incremented",
                    "format": "int64"
                },
                "soa_parameters": {
                    "description": "Exclusive with [default_soa_parameters]\n Configure SOA Record parameters",
                    "$ref": "#/definitions/dns_zoneSOARecordParameterConfig"
                }
            }
        },
        "dns_zoneRRSet": {
            "type": "object",
            "title": "RRSet is a set of Resource Record Sets for specific type",
            "x-displayname": "Resource Record Set",
            "x-ves-oneof-field-type_record_set": "[\"a_record\",\"aaaa_record\",\"afsdb_record\",\"alias_record\",\"caa_record\",\"cds_record\",\"cert_record\",\"cname_record\",\"ds_record\",\"eui48_record\",\"eui64_record\",\"lb_record\",\"loc_record\",\"mx_record\",\"naptr_record\",\"ns_record\",\"ptr_record\",\"srv_record\",\"sshfp_record\",\"tlsa_record\",\"txt_record\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.RRSet",
            "properties": {
                "a_record": {
                    "description": "Exclusive with [aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "A Record",
                    "$ref": "#/definitions/dns_zoneDNSAResourceRecord",
                    "x-displayname": "A"
                },
                "aaaa_record": {
                    "description": "Exclusive with [a_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "AAAA Record",
                    "$ref": "#/definitions/dns_zoneDNSAAAAResourceRecord",
                    "x-displayname": "AAAA"
                },
                "afsdb_record": {
                    "description": "Exclusive with [a_record aaaa_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "AFSDB Record",
                    "$ref": "#/definitions/dns_zoneDNSAFSDBRecord",
                    "x-displayname": "AFSDB"
                },
                "alias_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "ALIAS Record",
                    "$ref": "#/definitions/dns_zoneDNSAliasResourceRecord",
                    "x-displayname": "ALIAS"
                },
                "caa_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CAA Record",
                    "$ref": "#/definitions/dns_zoneDNSCAAResourceRecord",
                    "x-displayname": "CAA"
                },
                "cds_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CDS Record",
                    "$ref": "#/definitions/dns_zoneDNSCDSRecord",
                    "x-displayname": "CDS"
                },
                "cert_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CERT Record",
                    "$ref": "#/definitions/dns_zoneCERTResourceRecord",
                    "x-displayname": "CERT"
                },
                "cname_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CNAME Record",
                    "$ref": "#/definitions/dns_zoneDNSCNAMEResourceRecord",
                    "x-displayname": "CNAME"
                },
                "description": {
                    "type": "string",
                    "description": "\n\nExample: - \"Comment\"-",
                    "title": "Comment",
                    "x-displayname": "Comment",
                    "x-ves-example": "Comment"
                },
                "ds_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "DS Record",
                    "$ref": "#/definitions/dns_zoneDNSDSRecord",
                    "x-displayname": "DS"
                },
                "eui48_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "EUI48 Record",
                    "$ref": "#/definitions/dns_zoneDNSEUI48ResourceRecord",
                    "x-displayname": "EUI48"
                },
                "eui64_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "EUI64 Record",
                    "$ref": "#/definitions/dns_zoneDNSEUI64ResourceRecord",
                    "x-displayname": "EUI64"
                },
                "lb_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "DNS LB Record",
                    "$ref": "#/definitions/dns_zoneDNSLBResourceRecord",
                    "x-displayname": "DNS Load Balancer"
                },
                "loc_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "LOC Record",
                    "$ref": "#/definitions/dns_zoneDNSLOCResourceRecord",
                    "x-displayname": "LOC"
                },
                "mx_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "MX Record",
                    "$ref": "#/definitions/dns_zoneDNSMXResourceRecord",
                    "x-displayname": "MX"
                },
                "naptr_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "NAPTR Record",
                    "$ref": "#/definitions/dns_zoneDNSNAPTRResourceRecord",
                    "x-displayname": "NAPTR"
                },
                "ns_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "NS Record",
                    "$ref": "#/definitions/dns_zoneDNSNSResourceRecord",
                    "x-displayname": "NS"
                },
                "ptr_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "PTR Record",
                    "$ref": "#/definitions/dns_zoneDNSPTRResourceRecord",
                    "x-displayname": "PTR"
                },
                "srv_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record sshfp_record tlsa_record txt_record]\n",
                    "title": "SRV Record",
                    "$ref": "#/definitions/dns_zoneDNSSRVResourceRecord",
                    "x-displayname": "SRV"
                },
                "sshfp_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record tlsa_record txt_record]\n",
                    "title": "SSHFP Record",
                    "$ref": "#/definitions/dns_zoneSSHFPResourceRecord",
                    "x-displayname": "SSHFP"
                },
                "tlsa_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record txt_record]\n",
                    "title": "TLSA Record",
                    "$ref": "#/definitions/dns_zoneTLSAResourceRecord",
                    "x-displayname": "TLSA"
                },
                "ttl": {
                    "type": "integer",
                    "description": "\n\nExample: - \"3600\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 60\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "TTL",
                    "format": "int64",
                    "x-displayname": "Time to live",
                    "x-ves-example": "3600",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "60",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "txt_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record]\n",
                    "title": "TXT Record",
                    "$ref": "#/definitions/dns_zoneDNSTXTResourceRecord",
                    "x-displayname": "TXT"
                }
            }
        },
        "dns_zoneRRSetGroup": {
            "type": "object",
            "title": "Logical Group of Resource Record Sets",
            "x-displayname": "Group of Resource Record Sets",
            "x-ves-proto-message": "ves.io.schema.dns_zone.RRSetGroup",
            "properties": {
                "metadata": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaMessageMetaType",
                    "x-displayname": "Metadata",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "rr_set": {
                    "type": "array",
                    "description": " Collection of DNS resource record sets\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 50000\n",
                    "title": "Record Sets",
                    "maxItems": 50000,
                    "items": {
                        "$ref": "#/definitions/dns_zoneRRSet"
                    },
                    "x-displayname": "Resource Record Sets",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "50000"
                    }
                }
            }
        },
        "dns_zoneReplaceRequest": {
            "type": "object",
            "description": "This is the input message of the 'Replace' RPC",
            "title": "ReplaceRequest is used to replace contents of a dns_zone",
            "x-displayname": "Replace Request",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ReplaceRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectReplaceMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the DNS Zone",
                    "title": "spec",
                    "$ref": "#/definitions/dns_zoneReplaceSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "dns_zoneReplaceResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ReplaceResponse"
        },
        "dns_zoneReplaceSpecType": {
            "type": "object",
            "description": "Replace DNS Zone in a given namespace.",
            "title": "Replace DNS Zone",
            "x-displayname": "Replace DNS Zone",
            "x-ves-oneof-field-dns_type": "[\"primary\",\"secondary\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.ReplaceSpecType",
            "properties": {
                "primary": {
                    "description": "Exclusive with [secondary]\n Primary DNS",
                    "$ref": "#/definitions/dns_zonePrimaryDNSCreateSpecType",
                    "x-displayname": "Primary DNS Configuration"
                },
                "secondary": {
                    "description": "Exclusive with [primary]\n Secondary DNS",
                    "$ref": "#/definitions/dns_zoneSecondaryDNSCreateSpecType",
                    "x-displayname": "Secondary DNS Configuration"
                }
            }
        },
        "dns_zoneSHA1Digest": {
            "type": "object",
            "title": "SHA1 Digest",
            "x-displayname": "SHA1 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA1Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"addf120b430021c36c232c99ef8d926aea2acd6b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 40\n  ves.io.schema.rules.string.min_len: 40\n",
                    "title": "Digest",
                    "minLength": 40,
                    "maxLength": 40,
                    "x-displayname": "Digest",
                    "x-ves-example": "addf120b430021c36c232c99ef8d926aea2acd6b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "40",
                        "ves.io.schema.rules.string.min_len": "40"
                    }
                }
            }
        },
        "dns_zoneSHA1Fingerprint": {
            "type": "object",
            "title": "SHA1 Fingerprint",
            "x-displayname": "SHA1 Fingerprint",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA1Fingerprint",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": " The 'fingerprint' is the DS key and the actual contents of the DS record. \n\nExample: - \"addf120b430021c36c232c99ef8d926aea2acd6b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 40\n  ves.io.schema.rules.string.min_len: 40\n",
                    "title": "Fingerprint",
                    "minLength": 40,
                    "maxLength": 40,
                    "x-displayname": "Fingerprint",
                    "x-ves-example": "addf120b430021c36c232c99ef8d926aea2acd6b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "40",
                        "ves.io.schema.rules.string.min_len": "40"
                    }
                }
            }
        },
        "dns_zoneSHA256Digest": {
            "type": "object",
            "title": "SHA256 Digest",
            "x-displayname": "SHA256 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA256Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 64\n",
                    "title": "Digest",
                    "minLength": 64,
                    "maxLength": 64,
                    "x-displayname": "Digest",
                    "x-ves-example": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "64"
                    }
                }
            }
        },
        "dns_zoneSHA256Fingerprint": {
            "type": "object",
            "title": "SHA256 Fingerprint",
            "x-displayname": "SHA256 Fingerprint",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA256Fingerprint",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": " The 'fingerprint' is the DS key and the actual contents of the DS record. \n\nExample: - \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 64\n",
                    "title": "Fingerprint",
                    "minLength": 64,
                    "maxLength": 64,
                    "x-displayname": "Fingerprint",
                    "x-ves-example": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "64"
                    }
                }
            }
        },
        "dns_zoneSHA384Digest": {
            "type": "object",
            "title": "SHA384 Digest",
            "x-displayname": "SHA384 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA384Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"b4a9b28d142d91968ca232b95dfca771ee66f99924148b85026dfa686f6288d0edbfa71c98a798fda71e130f48e8f0f8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 96\n  ves.io.schema.rules.string.min_len: 96\n",
                    "title": "Digest",
                    "minLength": 96,
                    "maxLength": 96,
                    "x-displayname": "Digest",
                    "x-ves-example": "b4a9b28d142d91968ca232b95dfca771ee66f99924148b85026dfa686f6288d0edbfa71c98a798fda71e130f48e8f0f8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "96",
                        "ves.io.schema.rules.string.min_len": "96"
                    }
                }
            }
        },
        "dns_zoneSOARecordParameterConfig": {
            "type": "object",
            "title": "SOARecordParameterConfig",
            "x-displayname": "SOARecordParameterConfig",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SOARecordParameterConfig",
            "properties": {
                "expire": {
                    "type": "integer",
                    "description": " expire value indicates when secondary nameservers should stop answering request for this zone if primary does not respond\n\nExample: - \"360000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "Expire (in seconds)",
                    "format": "int64",
                    "x-displayname": "Expire",
                    "x-ves-example": "360000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "negative_ttl": {
                    "type": "integer",
                    "description": " negative ttl value indicates how long to cache non-existent resource record for this zone\n\nExample: - \"1800\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "Negative TTL (in seconds)",
                    "format": "int64",
                    "x-displayname": "Negative TTL",
                    "x-ves-example": "1800",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "refresh": {
                    "type": "integer",
                    "description": " refresh value indicates when secondary nameservers should query for the SOA record to detect zone changes\n\nExample: - \"86400\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 3600\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "Refresh (in seconds)",
                    "format": "int64",
                    "x-displayname": "Refresh interval",
                    "x-ves-example": "86400",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "3600",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "retry": {
                    "type": "integer",
                    "description": " retry value indicates when secondary nameservers should retry to request the serial number if primary does not respond\n\nExample: - \"7200\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 60\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "Retry (in seconds)",
                    "format": "int64",
                    "x-displayname": "Retry Interval",
                    "x-ves-example": "7200",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "60",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": " SOA record time to live (in seconds)\n\nExample: - \"86400\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "TTL",
                    "format": "int64",
                    "x-displayname": "TTL",
                    "x-ves-example": "86400",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                }
            }
        },
        "dns_zoneSRVService": {
            "type": "object",
            "title": "SRVService",
            "x-displayname": "SRVService",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SRVService",
            "properties": {
                "port": {
                    "type": "integer",
                    "description": " Port on which the service can be found\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Port",
                    "format": "int64",
                    "x-displayname": "Port",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the target. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "target": {
                    "type": "string",
                    "description": " Hostname of the machine providing the service\n\nExample: - \"my.example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^[.]$|^([a-zA-Z0-9]{1}[a-zA-Z0-9_-]{0,62})(\\\\.[a-zA-Z0-9_]{1}[a-zA-Z0-9_-]{0,62})*?(\\\\.[a-zA-Z]{1}[a-zA-Z0-9]{0,62})\\\\.?$\n",
                    "title": "Target",
                    "x-displayname": "Target",
                    "x-ves-example": "my.example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^[.]$|^([a-zA-Z0-9]{1}[a-zA-Z0-9_-]{0,62})(\\\\.[a-zA-Z0-9_]{1}[a-zA-Z0-9_-]{0,62})*?(\\\\.[a-zA-Z]{1}[a-zA-Z0-9]{0,62})\\\\.?$"
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": " Weight of the target. A higher number indicates a higher preference.\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Weight",
                    "format": "int64",
                    "x-displayname": "Weight",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                }
            }
        },
        "dns_zoneSSHFPAlgorithm": {
            "type": "string",
            "description": "SSHFP algorithm value must be compatible with the specified algorithm.\n\n - UNSPECIFIEDALGORITHM: UNSPECIFIEDALGORITHM\n\n - RSA: RSA\n\n - DSA: DSA\n\n - ECDSA: ECDSA\n\n - Ed25519: Ed25519\n\n - Ed448: Ed448\n",
            "title": "SSHFP Algorithm",
            "enum": [
                "UNSPECIFIEDALGORITHM",
                "RSA",
                "DSA",
                "ECDSA",
                "Ed25519",
                "Ed448"
            ],
            "default": "UNSPECIFIEDALGORITHM",
            "x-displayname": "SSHFP Algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.SSHFPAlgorithm"
        },
        "dns_zoneSSHFPFingerprintType": {
            "type": "string",
            "description": "x-displayName: \"SSHFP Fingerprint Type\"\nSSHFP Fingerprint Type must be compatible with the specified values.\n\n - INVALIDFINGERPRINTTYPE: INVALIDFINGERPRINTTYPE\n\nx-displayName: \"Invalid Fingerprint Type\"\n - SHA1ALGORITHM: SHA1ALGORITHM\n\nx-displayName: \"SHA1\"\n - SHA256ALGORITHM: SHA256ALGORITHM\n\nx-displayName: \"SHA256\"",
            "title": "SSHFP Fingerprint Type",
            "enum": [
                "INVALIDFINGERPRINTTYPE",
                "SHA1ALGORITHM",
                "SHA256ALGORITHM"
            ],
            "default": "INVALIDFINGERPRINTTYPE"
        },
        "dns_zoneSSHFPRecordValue": {
            "type": "object",
            "title": "SSHFPRecordValue",
            "x-displayname": "SSHFPRecordValue",
            "x-ves-oneof-field-fingerprint_type": "[\"sha1_fingerprint\",\"sha256_fingerprint\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SSHFPRecordValue",
            "properties": {
                "algorithm": {
                    "description": " Algorithm of the public key.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "SSHFP Algorithm",
                    "$ref": "#/definitions/dns_zoneSSHFPAlgorithm",
                    "x-displayname": "SSHFP Algorithm",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "sha1_fingerprint": {
                    "description": "Exclusive with [sha256_fingerprint]\n",
                    "title": "SHA1 Fingerprint",
                    "$ref": "#/definitions/dns_zoneSHA1Fingerprint",
                    "x-displayname": "SHA1 Fingerprint"
                },
                "sha256_fingerprint": {
                    "description": "Exclusive with [sha1_fingerprint]\n",
                    "title": "SHA256 Digest",
                    "$ref": "#/definitions/dns_zoneSHA256Fingerprint",
                    "x-displayname": "SHA256 Fingerprint"
                }
            }
        },
        "dns_zoneSSHFPResourceRecord": {
            "type": "object",
            "description": "DNS SSHFP Record",
            "title": "SSHFPResourceRecord",
            "x-displayname": "DNS SSHFP Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SSHFPResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " SSHFP Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "SSHFP Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneSSHFPRecordValue"
                    },
                    "x-displayname": "SSHFP Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneSecondaryDNSCreateSpecType": {
            "type": "object",
            "title": "SecondaryDNSCreateSpecType",
            "x-displayname": "SecondaryDNSCreateSpecType",
            "x-ves-displayorder": "5,6,7,8",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SecondaryDNSCreateSpecType",
            "properties": {
                "primary_servers": {
                    "type": "array",
                    "description": "\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv4: true\n  ves.io.schema.rules.repeated.max_items: 10\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "List of zone primary servers",
                    "minItems": 1,
                    "maxItems": 10,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "DNS Primary Server IP",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv4": "true",
                        "ves.io.schema.rules.repeated.max_items": "10",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "tsig_key_algorithm": {
                    "description": " TSIG key value must be compatible with the specified algorithm",
                    "title": "TSIG Key Algorithm",
                    "$ref": "#/definitions/dns_zoneTSIGKeyAlgorithm",
                    "x-displayname": "TSIG Key Algorithm"
                },
                "tsig_key_name": {
                    "type": "string",
                    "description": " TSIG key name as used in TSIG protocol extension\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n",
                    "title": "TSIG Key Name",
                    "x-displayname": "TSIG Key Name",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "tsig_key_value": {
                    "title": "TSIG Key value",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "TSIG Key Value in Base 64 Format"
                }
            }
        },
        "dns_zoneSecondaryDNSGetSpecType": {
            "type": "object",
            "title": "SecondaryDNSGetSpecType",
            "x-displayname": "SecondaryDNSGetSpecType",
            "x-ves-displayorder": "5,6,7,8,9",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SecondaryDNSGetSpecType",
            "properties": {
                "last_axfr_timestamp": {
                    "type": "string",
                    "description": " Last successful zone transfer timestamp.",
                    "format": "date-time"
                },
                "primary_servers": {
                    "type": "array",
                    "description": "\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv4: true\n  ves.io.schema.rules.repeated.max_items: 10\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "minItems": 1,
                    "maxItems": 10,
                    "items": {
                        "type": "string"
                    },
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv4": "true",
                        "ves.io.schema.rules.repeated.max_items": "10",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "tsig_key_algorithm": {
                    "description": " TSIG key value must be compatible with the specified algorithm",
                    "$ref": "#/definitions/dns_zoneTSIGKeyAlgorithm"
                },
                "tsig_key_name": {
                    "type": "string",
                    "description": " TSIG key name as used in TSIG protocol extension\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "tsig_key_value": {
                    "$ref": "#/definitions/schemaSecretType"
                }
            }
        },
        "dns_zoneStatusObject": {
            "type": "object",
            "description": "Most recently observed status of object",
            "title": "Status of DNS Zone",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.dns_zone.StatusObject",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": " Conditions reported by various component of the system",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " Reference to object for current status",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "verification_status": {
                    "description": " Verification Status of the DNS domain",
                    "title": "Verification Status",
                    "$ref": "#/definitions/dns_zoneDNSZoneStatus",
                    "x-displayname": "Verification Status"
                }
            }
        },
        "dns_zoneTLSARecordCSelector": {
            "type": "string",
            "description": "\n - FullCertificate: Full Certificate\n\n - UseSubjectPublicKey: Use Subject Public Key\n",
            "title": "TLSA Record Selector",
            "enum": [
                "FullCertificate",
                "UseSubjectPublicKey"
            ],
            "default": "FullCertificate",
            "x-displayname": "TLSA Record Selector",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordCSelector"
        },
        "dns_zoneTLSARecordCertificateUsage": {
            "type": "string",
            "description": "\n - CertificateAuthorityConstraint: Certificate Authority Constraint\n\n - ServiceCertificateConstraint: Service Certificate Constraint\n\n - TrustAnchorAssertion: Trust Anchor Assertion\n\n - DomainIssuedCertificate: Domain Issued Certificate\n",
            "title": "TLSA Record Certificate Usage",
            "enum": [
                "CertificateAuthorityConstraint",
                "ServiceCertificateConstraint",
                "TrustAnchorAssertion",
                "DomainIssuedCertificate"
            ],
            "default": "CertificateAuthorityConstraint",
            "x-displayname": "TLSA Record Certificate Usage",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordCertificateUsage"
        },
        "dns_zoneTLSARecordMatchingType": {
            "type": "string",
            "description": "\n - NoHash: No Hash\n\n - SHA256: SHA-256\n\n - SHA512: SHA-512\n",
            "title": "TLSA Record Matching Type",
            "enum": [
                "NoHash",
                "SHA256",
                "SHA512"
            ],
            "default": "NoHash",
            "x-displayname": "TLSA Record Matching Type",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordMatchingType"
        },
        "dns_zoneTLSARecordValue": {
            "type": "object",
            "title": "TLSARecordValue",
            "x-displayname": "TLSARecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.TLSARecordValue",
            "properties": {
                "certificate_association_data": {
                    "type": "string",
                    "description": " The actual data to be matched given the settings of the other fields.\n\nExample: - \"Certificate Association Data\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.hex: true\n  ves.io.schema.rules.string.max_len: 4096\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certificate Association Data",
                    "minLength": 1,
                    "maxLength": 4096,
                    "x-displayname": "Certificate Association Data",
                    "x-ves-example": "Certificate Association Data",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.hex": "true",
                        "ves.io.schema.rules.string.max_len": "4096",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "certificate_usage": {
                    "description": " x-example: \n TLSA Record Certificate Usage.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Certificate Usage",
                    "$ref": "#/definitions/dns_zoneTLSARecordCertificateUsage",
                    "x-displayname": "Certificate Usage",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "matching_type": {
                    "description": " TLSA Record Matching Type.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Matching Type",
                    "$ref": "#/definitions/dns_zoneTLSARecordMatchingType",
                    "x-displayname": "Matching Type",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "selector": {
                    "description": " TLSA Record Selector.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Selector",
                    "$ref": "#/definitions/dns_zoneTLSARecordCSelector",
                    "x-displayname": "Selector",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "dns_zoneTLSAResourceRecord": {
            "type": "object",
            "description": "DNS TLSA Record",
            "title": "TLSAResourceRecord",
            "x-displayname": "DNS TLSA Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.TLSAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " TLSA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "TLSA Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneTLSARecordValue"
                    },
                    "x-displayname": "TLSA Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneTSIGKeyAlgorithm": {
            "type": "string",
            "description": "TSIG key value must be compatible with the specified algorithm\n\n - UNDEFINED: UNDEFINED\n\n - HMAC_MD5: HMAC_MD5\n\n - HMAC_SHA1: HMAC_SHA1\n\n - HMAC_SHA224: HMAC_SHA224\n\n - HMAC_SHA256: HMAC_SHA256\n\n - HMAC_SHA384: HMAC_SHA384\n\n - HMAC_SHA512: HMAC_SHA512\n",
            "title": "TSIG Key Algorithm",
            "enum": [
                "UNDEFINED",
                "HMAC_MD5",
                "HMAC_SHA1",
                "HMAC_SHA224",
                "HMAC_SHA256",
                "HMAC_SHA384",
                "HMAC_SHA512"
            ],
            "default": "UNDEFINED",
            "x-displayname": "TSIG Key Algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TSIGKeyAlgorithm"
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaBlindfoldSecretInfoType": {
            "type": "object",
            "description": "BlindfoldSecretInfoType specifies information about the Secret managed by F5XC Secret Management",
            "title": "BlindfoldSecretInfoType",
            "x-displayname": "Blindfold Secret",
            "x-ves-displayorder": "3,1,2",
            "x-ves-proto-message": "ves.io.schema.BlindfoldSecretInfoType",
            "properties": {
                "decryption_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the backend Secret Management service.\n\nExample: - \"value\"-",
                    "title": "Decryption Provider",
                    "x-displayname": "Decryption Provider",
                    "x-ves-example": "value"
                },
                "location": {
                    "type": "string",
                    "description": " Location is the uri_ref. It could be in url format for string:///\n Or it could be a path if the store provider is an http/https location\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "Location",
                    "x-displayname": "Location",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                },
                "store_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"value\"-",
                    "title": "Store Provider",
                    "x-displayname": "Store Provider",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaClearSecretInfoType": {
            "type": "object",
            "description": "ClearSecretInfoType specifies information about the Secret that is not encrypted.",
            "title": "ClearSecretInfoType",
            "x-displayname": "In-Clear Secret",
            "x-ves-displayorder": "2,1",
            "x-ves-proto-message": "ves.io.schema.ClearSecretInfoType",
            "properties": {
                "provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"box-provider\"-",
                    "title": "Provider",
                    "x-displayname": "Provider",
                    "x-ves-example": "box-provider"
                },
                "url": {
                    "type": "string",
                    "description": " URL of the secret. Currently supported URL schemes is string:///.\n For string:/// scheme, Secret needs to be encoded Base64 format.\n When asked for this secret, caller will get Secret bytes after Base64 decoding.\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "URL",
                    "maxLength": 131072,
                    "x-displayname": "URL",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed.\n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]\n",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]"
                    }
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Validation\\\",\\\"Operational\\\"]\n",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Validation\\\",\\\"Operational\\\"]"
                    }
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error\n - EPARTIAL: Partial error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL",
                "EPARTIAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaMessageMetaType": {
            "type": "object",
            "description": "MessageMetaType is metadata (common attributes) of a message that only certain messages\nhave. This information is propagated to the metadata of a child object that gets created\nfrom the containing message during view processing.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "MessageMetaType",
            "x-displayname": "Message Metadata",
            "x-ves-proto-message": "ves.io.schema.MessageMetaType",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " Human readable description.\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "description",
                    "maxLength": 256,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of the message.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.ves_object_name: true\n",
                    "title": "name",
                    "minLength": 1,
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.ves_object_name": "true"
                    }
                }
            }
        },
        "schemaObjectCreateMetaType": {
            "type": "object",
            "description": "ObjectCreateMetaType is metadata that can be specified in Create request of an object.",
            "title": "ObjectCreateMetaType",
            "x-displayname": "Create Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectCreateMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectReplaceMetaType": {
            "type": "object",
            "description": "ObjectReplaceMetaType is metadata that can be specified in Replace request of an object.",
            "title": "ObjectReplaceMetaType",
            "x-displayname": "Replace Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectReplaceMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaSecretEncodingType": {
            "type": "string",
            "description": "x-displayName: \"Secret Encoding\"\nSecretEncodingType defines the encoding type of the secret before handled by the Secret Management Service.\n\n - EncodingNone: x-displayName: \"None\"\nNo Encoding\n - EncodingBase64: Base64\n\nx-displayName: \"Base64\"\nBase64 encoding",
            "title": "SecretEncodingType",
            "enum": [
                "EncodingNone",
                "EncodingBase64"
            ],
            "default": "EncodingNone"
        },
        "schemaSecretType": {
            "type": "object",
            "description": "SecretType is used in an object to indicate a sensitive/confidential field",
            "title": "SecretType",
            "x-displayname": "Secret",
            "x-ves-oneof-field-secret_info_oneof": "[\"blindfold_secret_info\",\"clear_secret_info\"]",
            "x-ves-proto-message": "ves.io.schema.SecretType",
            "properties": {
                "blindfold_secret_info": {
                    "description": "Exclusive with [clear_secret_info]\n Blindfold Secret is used for the secrets managed by F5XC Secret Management Service",
                    "title": "Blindfold Secret",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType",
                    "x-displayname": "Blindfold Secret"
                },
                "clear_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info]\n Clear Secret is used for the secrets that are not encrypted",
                    "title": "Clear Secret",
                    "$ref": "#/definitions/schemaClearSecretInfoType",
                    "x-displayname": "Clear Secret"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status\n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Origin of this status exchanged by VTRP.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do Not Publish\n\nDo not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Publish\n\nPropagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Status Publish Type",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n\n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n\n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the operator or software. Values here can be interpreted\n by software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).\n\nExample: - \"'ves.io/soft-deleted''true'\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "'ves.io/soft-deleted': 'true'"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaVaultSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Vault Secret\"\nVaultSecretInfoType specifies information about the Secret managed by Hashicorp Vault.",
            "title": "VaultSecretInfoType",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "x-displayName: \"Key\"\nx-example: \"key_pem\"\nKey of the individual secret. Vault Secrets are stored as key-value pair.\nIf user is only interested in one value from the map, this field should be set to the corresponding key.\nIf not provided entire secret will be returned.",
                    "title": "Key"
                },
                "location": {
                    "type": "string",
                    "description": "x-displayName: \"Location\"\nx-required\nx-example: \"v1/data/vhost_key\"\nPath to secret in Vault.",
                    "title": "Location"
                },
                "provider": {
                    "type": "string",
                    "description": "x-displayName: \"Provider\"\nx-required\nx-example: \"vault-vh-provider\"\nName of the Secret Management Access object that contains information about the backend Vault.",
                    "title": "Provider"
                },
                "secret_encoding": {
                    "description": "x-displayName: \"Secret Encoding\"\nThis field defines the encoding type of the secret BEFORE the secret is put into Hashicorp Vault.",
                    "title": "secret_encoding",
                    "$ref": "#/definitions/schemaSecretEncodingType"
                },
                "version": {
                    "type": "integer",
                    "description": "x-displayName: \"Version\"\nx-example: \"1\"\nVersion of the secret to be fetched. As vault secrets are versioned, user can specify this field to fetch specific version.\nIf not provided latest version will be returned.",
                    "title": "Version",
                    "format": "int64"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaWingmanSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Wingman Secret\"\nWingmanSecretInfoType specifies the handle to the wingman secret",
            "title": "WingmanSecretInfoType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-required\nx-example: \"ChargeBack-API-Key\"\nName of the secret.",
                    "title": "Name"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 128\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "name",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "128",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "namespace",
                    "maxLength": 64,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "tenant",
                    "maxLength": 64,
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                }
            }
        }
    },
    "x-displayname": "DNS Zone",
    "x-ves-proto-file": "ves.io/schema/dns_zone/public_crudapi.proto"
}`

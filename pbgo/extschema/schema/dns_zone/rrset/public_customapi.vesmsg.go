// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package rrset

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_dns_zone "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_zone"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateRequest) DeepCopy() *CreateRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateRequestValidator().Validate(ctx, m, opts...)
}

func (m *CreateRequest) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRrsetDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateRequest) GetRrsetDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRrset() == nil {
		return nil, nil
	}

	drInfos, err := m.GetRrset().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetRrset().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "rrset." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateRequest) DnsZoneNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_zone_name")
	}

	return validatorFn, nil
}

func (v *ValidateCreateRequest) GroupNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for group_name")
	}

	return validatorFn, nil
}

func (v *ValidateCreateRequest) RrsetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for rrset")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_dns_zone.RRSetValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_zone_name"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_zone_name"))
		if err := fv(ctx, m.GetDnsZoneName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group_name"]; exists {

		vOpts := append(opts, db.WithValidateField("group_name"))
		if err := fv(ctx, m.GetGroupName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rrset"]; exists {

		vOpts := append(opts, db.WithValidateField("rrset"))
		if err := fv(ctx, m.GetRrset(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateRequestValidator = func() *ValidateCreateRequest {
	v := &ValidateCreateRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsZoneName := v.DnsZoneNameValidationRuleHandler
	rulesDnsZoneName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "([0-9a-z]([.a-z0-9-]*[a-z0-9])?)",
	}
	vFn, err = vrhDnsZoneName(rulesDnsZoneName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateRequest.dns_zone_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_zone_name"] = vFn

	vrhGroupName := v.GroupNameValidationRuleHandler
	rulesGroupName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.min_len":   "1",
		"ves.io.schema.rules.string.pattern":   "([a-z]([-a-z0-9_]*[a-z0-9])?)",
	}
	vFn, err = vrhGroupName(rulesGroupName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateRequest.group_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group_name"] = vFn

	vrhRrset := v.RrsetValidationRuleHandler
	rulesRrset := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRrset(rulesRrset)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateRequest.rrset: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rrset"] = vFn

	return v
}()

func CreateRequestValidator() db.Validator {
	return DefaultCreateRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *DeleteRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DeleteRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DeleteRequest) DeepCopy() *DeleteRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DeleteRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DeleteRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DeleteRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DeleteRequestValidator().Validate(ctx, m, opts...)
}

type ValidateDeleteRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDeleteRequest) DnsZoneNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_zone_name")
	}

	return validatorFn, nil
}

func (v *ValidateDeleteRequest) GroupNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for group_name")
	}

	return validatorFn, nil
}

func (v *ValidateDeleteRequest) RecordNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for record_name")
	}

	return validatorFn, nil
}

func (v *ValidateDeleteRequest) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateDeleteRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DeleteRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DeleteRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_zone_name"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_zone_name"))
		if err := fv(ctx, m.GetDnsZoneName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group_name"]; exists {

		vOpts := append(opts, db.WithValidateField("group_name"))
		if err := fv(ctx, m.GetGroupName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["record_name"]; exists {

		vOpts := append(opts, db.WithValidateField("record_name"))
		if err := fv(ctx, m.GetRecordName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDeleteRequestValidator = func() *ValidateDeleteRequest {
	v := &ValidateDeleteRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsZoneName := v.DnsZoneNameValidationRuleHandler
	rulesDnsZoneName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "([0-9a-z]([.a-z0-9-]*[a-z0-9])?)",
	}
	vFn, err = vrhDnsZoneName(rulesDnsZoneName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DeleteRequest.dns_zone_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_zone_name"] = vFn

	vrhGroupName := v.GroupNameValidationRuleHandler
	rulesGroupName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.min_len":   "1",
		"ves.io.schema.rules.string.pattern":   "([a-z]([-a-z0-9_]*[a-z0-9])?)",
	}
	vFn, err = vrhGroupName(rulesGroupName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DeleteRequest.group_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group_name"] = vFn

	vrhRecordName := v.RecordNameValidationRuleHandler
	rulesRecordName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRecordName(rulesRecordName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DeleteRequest.record_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["record_name"] = vFn

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"A\",\"AAAA\",\"ALIAS\",\"CAA\",\"CNAME\",\"MX\",\"NS\",\"PTR\",\"SRV\",\"TXT\",\"DNSLB\",\"NAPTR\",\"AFSDB\",\"EUI48\",\"EUI64\",\"DS\",\"CDS\",\"LOC\",\"SSHFP\",\"TLSA\",\"CERT\"]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DeleteRequest.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	return v
}()

func DeleteRequestValidator() db.Validator {
	return DefaultDeleteRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *GetRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetRequest) DeepCopy() *GetRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetRequestValidator().Validate(ctx, m, opts...)
}

type ValidateGetRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetRequest) DnsZoneNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_zone_name")
	}

	return validatorFn, nil
}

func (v *ValidateGetRequest) GroupNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for group_name")
	}

	return validatorFn, nil
}

func (v *ValidateGetRequest) RecordNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for record_name")
	}

	return validatorFn, nil
}

func (v *ValidateGetRequest) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateGetRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_zone_name"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_zone_name"))
		if err := fv(ctx, m.GetDnsZoneName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group_name"]; exists {

		vOpts := append(opts, db.WithValidateField("group_name"))
		if err := fv(ctx, m.GetGroupName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["record_name"]; exists {

		vOpts := append(opts, db.WithValidateField("record_name"))
		if err := fv(ctx, m.GetRecordName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetRequestValidator = func() *ValidateGetRequest {
	v := &ValidateGetRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsZoneName := v.DnsZoneNameValidationRuleHandler
	rulesDnsZoneName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "([0-9a-z]([.a-z0-9-]*[a-z0-9])?)",
	}
	vFn, err = vrhDnsZoneName(rulesDnsZoneName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetRequest.dns_zone_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_zone_name"] = vFn

	vrhGroupName := v.GroupNameValidationRuleHandler
	rulesGroupName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.min_len":   "1",
		"ves.io.schema.rules.string.pattern":   "([a-z]([-a-z0-9_]*[a-z0-9])?)",
	}
	vFn, err = vrhGroupName(rulesGroupName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetRequest.group_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group_name"] = vFn

	vrhRecordName := v.RecordNameValidationRuleHandler
	rulesRecordName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRecordName(rulesRecordName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetRequest.record_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["record_name"] = vFn

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"A\",\"AAAA\",\"ALIAS\",\"CAA\",\"CNAME\",\"MX\",\"NS\",\"PTR\",\"SRV\",\"TXT\",\"DNSLB\",\"NAPTR\",\"AFSDB\",\"EUI48\",\"EUI64\",\"DS\",\"CDS\",\"LOC\",\"SSHFP\",\"TLSA\",\"CERT\"]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetRequest.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	return v
}()

func GetRequestValidator() db.Validator {
	return DefaultGetRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceRequest) DeepCopy() *ReplaceRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceRequestValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceRequest) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRrsetDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceRequest) GetRrsetDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRrset() == nil {
		return nil, nil
	}

	drInfos, err := m.GetRrset().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetRrset().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "rrset." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceRequest) DnsZoneNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_zone_name")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceRequest) GroupNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for group_name")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceRequest) RecordNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for record_name")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceRequest) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceRequest) RrsetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for rrset")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_dns_zone.RRSetValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_zone_name"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_zone_name"))
		if err := fv(ctx, m.GetDnsZoneName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group_name"]; exists {

		vOpts := append(opts, db.WithValidateField("group_name"))
		if err := fv(ctx, m.GetGroupName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["record_name"]; exists {

		vOpts := append(opts, db.WithValidateField("record_name"))
		if err := fv(ctx, m.GetRecordName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rrset"]; exists {

		vOpts := append(opts, db.WithValidateField("rrset"))
		if err := fv(ctx, m.GetRrset(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceRequestValidator = func() *ValidateReplaceRequest {
	v := &ValidateReplaceRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsZoneName := v.DnsZoneNameValidationRuleHandler
	rulesDnsZoneName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "([0-9a-z]([.a-z0-9-]*[a-z0-9])?)",
	}
	vFn, err = vrhDnsZoneName(rulesDnsZoneName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceRequest.dns_zone_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_zone_name"] = vFn

	vrhGroupName := v.GroupNameValidationRuleHandler
	rulesGroupName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.min_len":   "1",
		"ves.io.schema.rules.string.pattern":   "([a-z]([-a-z0-9_]*[a-z0-9])?)",
	}
	vFn, err = vrhGroupName(rulesGroupName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceRequest.group_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group_name"] = vFn

	vrhRecordName := v.RecordNameValidationRuleHandler
	rulesRecordName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRecordName(rulesRecordName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceRequest.record_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["record_name"] = vFn

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"A\",\"AAAA\",\"ALIAS\",\"CAA\",\"CNAME\",\"MX\",\"NS\",\"PTR\",\"SRV\",\"TXT\",\"DNSLB\",\"NAPTR\",\"AFSDB\",\"EUI48\",\"EUI64\",\"DS\",\"CDS\",\"LOC\",\"SSHFP\",\"TLSA\",\"CERT\"]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceRequest.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhRrset := v.RrsetValidationRuleHandler
	rulesRrset := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRrset(rulesRrset)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceRequest.rrset: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rrset"] = vFn

	return v
}()

func ReplaceRequestValidator() db.Validator {
	return DefaultReplaceRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *Response) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Response) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Response) DeepCopy() *Response {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Response{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Response) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Response) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ResponseValidator().Validate(ctx, m, opts...)
}

func (m *Response) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRrsetDRefInfo()

}

// GetDRefInfo for the field's type
func (m *Response) GetRrsetDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRrset() == nil {
		return nil, nil
	}

	drInfos, err := m.GetRrset().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetRrset().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "rrset." + dri.DRField
	}
	return drInfos, err

}

type ValidateResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateResponse) RrsetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for rrset")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_dns_zone.RRSetValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Response)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Response got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_zone_name"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_zone_name"))
		if err := fv(ctx, m.GetDnsZoneName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group_name"]; exists {

		vOpts := append(opts, db.WithValidateField("group_name"))
		if err := fv(ctx, m.GetGroupName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["record_name"]; exists {

		vOpts := append(opts, db.WithValidateField("record_name"))
		if err := fv(ctx, m.GetRecordName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rrset"]; exists {

		vOpts := append(opts, db.WithValidateField("rrset"))
		if err := fv(ctx, m.GetRrset(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultResponseValidator = func() *ValidateResponse {
	v := &ValidateResponse{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRrset := v.RrsetValidationRuleHandler
	rulesRrset := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRrset(rulesRrset)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Response.rrset: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rrset"] = vFn

	return v
}()

func ResponseValidator() db.Validator {
	return DefaultResponseValidator
}

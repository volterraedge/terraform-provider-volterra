// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package rrset

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCCreate(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.rrset.CreateRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Create(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCDelete(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.rrset.DeleteRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Delete(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGet(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.rrset.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Get(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCReplace(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ReplaceRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.rrset.ReplaceRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Replace(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["Create"] = ccl.doRPCCreate

	rpcFns["Delete"] = ccl.doRPCDelete

	rpcFns["Get"] = ccl.doRPCGet

	rpcFns["Replace"] = ccl.doRPCReplace

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCCreate(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.rrset.CreateRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("dns_zone_name", fmt.Sprintf("%v", req.DnsZoneName))
		q.Add("group_name", fmt.Sprintf("%v", req.GroupName))
		q.Add("rrset", fmt.Sprintf("%v", req.Rrset))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Response{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.rrset.Response", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCDelete(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.rrset.DeleteRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("dns_zone_name", fmt.Sprintf("%v", req.DnsZoneName))
		q.Add("group_name", fmt.Sprintf("%v", req.GroupName))
		q.Add("record_name", fmt.Sprintf("%v", req.RecordName))
		q.Add("type", fmt.Sprintf("%v", req.Type))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Response{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.rrset.Response", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGet(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.rrset.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("dns_zone_name", fmt.Sprintf("%v", req.DnsZoneName))
		q.Add("group_name", fmt.Sprintf("%v", req.GroupName))
		q.Add("record_name", fmt.Sprintf("%v", req.RecordName))
		q.Add("type", fmt.Sprintf("%v", req.Type))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Response{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.rrset.Response", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCReplace(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ReplaceRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.rrset.ReplaceRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("dns_zone_name", fmt.Sprintf("%v", req.DnsZoneName))
		q.Add("group_name", fmt.Sprintf("%v", req.GroupName))
		q.Add("record_name", fmt.Sprintf("%v", req.RecordName))
		q.Add("rrset", fmt.Sprintf("%v", req.Rrset))
		q.Add("type", fmt.Sprintf("%v", req.Type))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Response{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.rrset.Response", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["Create"] = ccl.doRPCCreate

	rpcFns["Delete"] = ccl.doRPCDelete

	rpcFns["Get"] = ccl.doRPCGet

	rpcFns["Replace"] = ccl.doRPCReplace

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.rrset.CustomAPI.Create")
	return c.CustomAPIServer.Create(ctx, in)
}
func (c *customAPIInprocClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.rrset.CustomAPI.Delete")
	return c.CustomAPIServer.Delete(ctx, in)
}
func (c *customAPIInprocClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.rrset.CustomAPI.Get")
	return c.CustomAPIServer.Get(ctx, in)
}
func (c *customAPIInprocClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*Response, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_zone.rrset.CustomAPI.Replace")
	return c.CustomAPIServer.Replace(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) Create(ctx context.Context, in *CreateRequest) (*Response, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.rrset.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Response
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.rrset.CreateRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Create' operation on 'rrset'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.rrset.CustomAPI.Create"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Create(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.rrset.Response", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Delete(ctx context.Context, in *DeleteRequest) (*Response, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.rrset.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Response
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.rrset.DeleteRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Delete' operation on 'rrset'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.rrset.CustomAPI.Delete"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Delete(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.rrset.Response", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Get(ctx context.Context, in *GetRequest) (*Response, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.rrset.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Response
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.rrset.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Get' operation on 'rrset'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.rrset.CustomAPI.Get"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Get(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.rrset.Response", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Replace(ctx context.Context, in *ReplaceRequest) (*Response, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.rrset.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Response
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.rrset.ReplaceRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Replace' operation on 'rrset'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.rrset.CustomAPI.Replace"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Replace(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.rrset.Response", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "F5XC DNS Management RRSet API",
        "description": "x-required\nAPIs to create, update or delete individual records of a DNS zone without having to send the whole DNS zone information.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/system/dns_zones/{dns_zone_name}/rrsets/{group_name}": {
            "post": {
                "summary": "Create",
                "operationId": "ves.io.schema.dns_zone.rrset.CustomAPI.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/rrsetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "dns_zone_name",
                        "description": "dns_zone_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "dns zone name"
                    },
                    {
                        "name": "group_name",
                        "description": "group_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "group name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rrsetCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-rrset-customapi-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.rrset.CustomAPI.Create"
            },
            "x-displayname": "F5XC DNS Management RRSet API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.rrset.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/dns_zones/{dns_zone_name}/rrsets/{group_name}/{record_name}/{type}": {
            "get": {
                "summary": "Get",
                "operationId": "ves.io.schema.dns_zone.rrset.CustomAPI.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/rrsetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "dns_zone_name",
                        "description": "dns_zone_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "dns zone name"
                    },
                    {
                        "name": "group_name",
                        "description": "group_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "group name"
                    },
                    {
                        "name": "record_name",
                        "description": "record_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "record name"
                    },
                    {
                        "name": "type",
                        "description": "type\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "type"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-rrset-customapi-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.rrset.CustomAPI.Get"
            },
            "delete": {
                "summary": "Delete",
                "operationId": "ves.io.schema.dns_zone.rrset.CustomAPI.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/rrsetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "dns_zone_name",
                        "description": "dns_zone_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "dns zone name"
                    },
                    {
                        "name": "group_name",
                        "description": "group_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "group name"
                    },
                    {
                        "name": "record_name",
                        "description": "record_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "record name"
                    },
                    {
                        "name": "type",
                        "description": "type\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "type"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-rrset-customapi-delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.rrset.CustomAPI.Delete"
            },
            "put": {
                "summary": "Replace",
                "operationId": "ves.io.schema.dns_zone.rrset.CustomAPI.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/rrsetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "dns_zone_name",
                        "description": "dns_zone_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "dns zone name"
                    },
                    {
                        "name": "group_name",
                        "description": "group_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "group name"
                    },
                    {
                        "name": "record_name",
                        "description": "record_name\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "record name"
                    },
                    {
                        "name": "type",
                        "description": "type\n\nx-required",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "type"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rrsetReplaceRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_zone-rrset-customapi-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_zone.rrset.CustomAPI.Replace"
            },
            "x-displayname": "F5XC DNS Management RRSet API",
            "x-ves-proto-service": "ves.io.schema.dns_zone.rrset.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "dns_zoneAFSDBRecordSubtype": {
            "type": "string",
            "description": "AFS Volume Location Server or DCE Authentication Server.\n\n - NONE: NONE\n\n - AFSVolumeLocationServer: AFS Volume Location Server\n\n - DCEAuthenticationServer: DCE Authentication Server\n",
            "title": "AFSDB Record Subtype",
            "enum": [
                "NONE",
                "AFSVolumeLocationServer",
                "DCEAuthenticationServer"
            ],
            "default": "NONE",
            "x-displayname": "AFSDB Record Subtype",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.AFSDBRecordSubtype"
        },
        "dns_zoneAFSDBRecordValue": {
            "type": "object",
            "title": "AFSDBRecordValue",
            "x-displayname": "AFSDBRecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.AFSDBRecordValue",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Server name of the AFS cell database server or the DCE name server.\n\nExample: - \"mail.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.hostname: true\n",
                    "title": "Hostname",
                    "x-displayname": "Hostname",
                    "x-ves-example": "mail.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "subtype": {
                    "description": " AFSDB Record Subtype.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Subtype",
                    "$ref": "#/definitions/dns_zoneAFSDBRecordSubtype",
                    "x-displayname": "Subtype",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "dns_zoneCERTAlgorithm": {
            "type": "string",
            "description": "CERT algorithm value must be compatible with the specified algorithm.\n\n - RESERVEDALGORITHM: RESERVEDALGORITHM\n\n - RSAMD5: RSAMD5\n\n - DH: DH\n\n - DSASHA1: DSASHA1\n\n - ECC: ECC\n\n - RSASHA1ALGORITHM: RSA-SHA1\n\n - INDIRECT: INDIRECT\n\n - PRIVATEDNS: PRIVATEDNS\n\n - PRIVATEOID: PRIVATEOID\n",
            "title": "CERT Algorithm",
            "enum": [
                "RESERVEDALGORITHM",
                "RSAMD5",
                "DH",
                "DSASHA1",
                "ECC",
                "RSASHA1ALGORITHM",
                "INDIRECT",
                "PRIVATEDNS",
                "PRIVATEOID"
            ],
            "default": "RESERVEDALGORITHM",
            "x-displayname": "CERT Algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.CERTAlgorithm"
        },
        "dns_zoneCERTRecordValue": {
            "type": "object",
            "title": "CERTRecordValue",
            "x-displayname": "CERTRecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CERTRecordValue",
            "properties": {
                "algorithm": {
                    "description": "\nExample: - \"3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Algorithm",
                    "$ref": "#/definitions/dns_zoneCERTAlgorithm",
                    "x-displayname": "Algorithm",
                    "x-ves-example": "3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "cert_key_tag": {
                    "type": "integer",
                    "description": "\nExample: - \"3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Key Tag",
                    "format": "int64",
                    "x-displayname": "Key Tag",
                    "x-ves-example": "3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "cert_type": {
                    "description": "\nExample: - \"PKIX\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Type",
                    "$ref": "#/definitions/dns_zoneCERTType",
                    "x-displayname": "Type",
                    "x-ves-example": "PKIX",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "certificate": {
                    "type": "string",
                    "description": " Certificate in base 64 format.\n\nExample: - \"Ab100cFg\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 4096\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certificate",
                    "minLength": 1,
                    "maxLength": 4096,
                    "x-displayname": "Certificate",
                    "x-ves-example": "Ab100cFg",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "4096",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "dns_zoneCERTResourceRecord": {
            "type": "object",
            "description": "DNS CERT Record",
            "title": "CERTResourceRecord",
            "x-displayname": "DNS CERT Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CERTResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CERT Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "CERT Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneCERTRecordValue"
                    },
                    "x-displayname": "CERT Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneCERTType": {
            "type": "string",
            "description": "CERT type value must be compatible with the specified types.\n\n - INVALIDCERTTYPE: INVALIDCERTTYPE\n\n - PKIX: PKIX\n\n - SPKI: SPKI\n\n - PGP: PGP\n\n - IPKIX: IPKIX\n\n - ISPKI: ISPKI\n\n - IPGP: IPGP\n\n - ACPKIX: ACPKIX\n\n - IACPKIX: IACPKIX\n\n - URI_: URI\n\n - OID: OID\n",
            "title": "CERT Type",
            "enum": [
                "INVALIDCERTTYPE",
                "PKIX",
                "SPKI",
                "PGP",
                "IPKIX",
                "ISPKI",
                "IPGP",
                "ACPKIX",
                "IACPKIX",
                "URI_",
                "OID"
            ],
            "default": "INVALIDCERTTYPE",
            "x-displayname": "CERT Type",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.CERTType"
        },
        "dns_zoneCertificationAuthorityAuthorization": {
            "type": "object",
            "title": "CertificationAuthorityAuthorization",
            "x-displayname": "CertificationAuthorityAuthorization",
            "x-ves-proto-message": "ves.io.schema.dns_zone.CertificationAuthorityAuthorization",
            "properties": {
                "flags": {
                    "type": "integer",
                    "description": " This flag should be an integer between 0 and 255.\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 255\n",
                    "title": "Certification authority authorization flags",
                    "format": "int64",
                    "x-displayname": "Flags",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "255"
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "\n\nExample: - \"issue\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"issue\\\", \\\"issuewild\\\", \\\"iodef\\\"]\n",
                    "title": "Certification authority authorization tag",
                    "x-displayname": "Tag",
                    "x-ves-example": "issue",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"issue\\\", \\\"issuewild\\\", \\\"iodef\\\"]"
                    }
                },
                "value": {
                    "type": "string",
                    "description": "\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 1024\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certification authority authorization value",
                    "minLength": 1,
                    "maxLength": 1024,
                    "x-displayname": "Value",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "1024",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "dns_zoneDLVResourceRecord": {
            "type": "object",
            "description": "x-displayName: \"DNS DLV Record\"\nDNS DLV Record",
            "title": "DLVResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Record Name (Excluding Domain name)\"\nx-example: \"www or mail or * or ww* or *ab\"\nDLV Record name, please provide only the specific subdomain or record name without the base domain.",
                    "title": "Record Name"
                },
                "values": {
                    "type": "array",
                    "description": "x-displayName: \"DLV Value\"\nx-example: \"values\"\nx-required\nIt uses the same format as the DS record.",
                    "title": "DLV Value",
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    }
                }
            }
        },
        "dns_zoneDNSAAAAResourceRecord": {
            "type": "object",
            "description": "RecordSet for AAAA Records",
            "title": "DNSAAAAResourceRecord",
            "x-displayname": "DNSAAAAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAAAAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " AAAA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": " A valid IPv6 address, for example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n\nExample: - \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv6: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "IPv6 addresses",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv6 Addresses",
                    "x-ves-example": "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv6": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSAFSDBRecord": {
            "type": "object",
            "description": "DNS AFSDB Record",
            "title": "DNSAFSDBRecord",
            "x-displayname": "DNS AFSDB Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAFSDBRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " AFSDB Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "AFSDB Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneAFSDBRecordValue"
                    },
                    "x-displayname": "AFSDB Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSAResourceRecord": {
            "type": "object",
            "description": "A Records",
            "title": "DNSAResourceRecord",
            "x-displayname": "DNSAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " A Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": " A valid IPv4 address, for example: 1.1.1.1\n\nExample: - \"1.1.1.1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.ipv4: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "IPv4 addresses",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv4 Addresses",
                    "x-ves-example": "1.1.1.1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.ipv4": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSAliasResourceRecord": {
            "type": "object",
            "title": "DNSAliasResourceRecord",
            "x-displayname": "DNSAliasResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSAliasResourceRecord",
            "properties": {
                "value": {
                    "type": "string",
                    "description": " A valid domain name, for example: example.com\n\nExample: - \"example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Domain",
                    "maxLength": 255,
                    "x-displayname": "Domain",
                    "x-ves-example": "example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                }
            }
        },
        "dns_zoneDNSCAAResourceRecord": {
            "type": "object",
            "title": "DNSCAAResourceRecord",
            "x-displayname": "DNSCAAResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCAAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CAA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 100\n",
                    "title": "CAA Record Value",
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneCertificationAuthorityAuthorization"
                    },
                    "x-displayname": "CAA Record Value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "100"
                    }
                }
            }
        },
        "dns_zoneDNSCDSRecord": {
            "type": "object",
            "description": "DNS CDS Record",
            "title": "DNSCDSRecord",
            "x-displayname": "DNS CDS Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCDSRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CDS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "DS Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    },
                    "x-displayname": "DS Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSCNAMEResourceRecord": {
            "type": "object",
            "title": "DNSCNAMEResourceRecord",
            "x-displayname": "DNSCNAMEResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSCNAMEResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " CName Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.pattern: ^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.pattern": "^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "value": {
                    "type": "string",
                    "description": "\n\nExample: - \"example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Domain",
                    "maxLength": 255,
                    "x-displayname": "Domain",
                    "x-ves-example": "example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                }
            }
        },
        "dns_zoneDNSDSRecord": {
            "type": "object",
            "description": "DNS DS Record",
            "title": "DNSDSRecord",
            "x-displayname": "DNS DS Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSDSRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " DS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "DS Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneDSRecordValue"
                    },
                    "x-displayname": "DS Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSEUI48ResourceRecord": {
            "type": "object",
            "description": "DNS EUI48 Record",
            "title": "DNSEUI48ResourceRecord",
            "x-displayname": "DNS EUI48 Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSEUI48ResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " EUI48 Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "value": {
                    "type": "string",
                    "description": " A valid eui48 identifier, for example: 01-23-45-67-89-ab\n\nExample: - \"01-23-45-67-89-ab\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 17\n  ves.io.schema.rules.string.min_len: 17\n  ves.io.schema.rules.string.pattern: ^([0-9A-Fa-f]{2}-){5}([0-9A-Fa-f]{2})$\n",
                    "title": "EUI48 Identifier",
                    "minLength": 17,
                    "maxLength": 17,
                    "x-displayname": "EUI48 Identifier",
                    "x-ves-example": "01-23-45-67-89-ab",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "17",
                        "ves.io.schema.rules.string.min_len": "17",
                        "ves.io.schema.rules.string.pattern": "^([0-9A-Fa-f]{2}-){5}([0-9A-Fa-f]{2})$"
                    }
                }
            }
        },
        "dns_zoneDNSEUI64ResourceRecord": {
            "type": "object",
            "description": "DNS EUI64 Record",
            "title": "DNSEUI64ResourceRecord",
            "x-displayname": "DNS EUI64 Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSEUI64ResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " EUI64 Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "value": {
                    "type": "string",
                    "description": " A valid EUI64 identifier, for example: 01-23-45-67-89-ab-cd-ef\n\nExample: - \"01-23-45-67-89-ab-cd-ef\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 23\n  ves.io.schema.rules.string.min_len: 23\n  ves.io.schema.rules.string.pattern: ^([0-9A-Fa-f]{2}-){7}([0-9A-Fa-f]{2})$\n",
                    "title": "EUI64 Identifier",
                    "minLength": 23,
                    "maxLength": 23,
                    "x-displayname": "EUI64 Identifier",
                    "x-ves-example": "01-23-45-67-89-ab-cd-ef",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "23",
                        "ves.io.schema.rules.string.min_len": "23",
                        "ves.io.schema.rules.string.pattern": "^([0-9A-Fa-f]{2}-){7}([0-9A-Fa-f]{2})$"
                    }
                }
            }
        },
        "dns_zoneDNSLBResourceRecord": {
            "type": "object",
            "description": "DNS Load Balancer Record",
            "title": "DNSLBResourcerecord",
            "x-displayname": "DNS Load Balancer Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSLBResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Load Balancer record name (except for SRV DNS Load balancer record) should be a simple record name and not a subdomain of a subdomain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Record Name",
                    "maxLength": 255,
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                },
                "value": {
                    "title": "DNS LB Record",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "DNS Load Balancer Record"
                }
            }
        },
        "dns_zoneDNSLOCResourceRecord": {
            "type": "object",
            "description": "DNS LOC Record",
            "title": "DNSLOCResourceRecord",
            "x-displayname": "DNS LOC Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSLOCResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " LOC Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"32 7 19 S 116 2 25 E 10m\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "LOC Values",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneLOCValue"
                    },
                    "x-displayname": "LOC Value",
                    "x-ves-example": "32 7 19 S 116 2 25 E 10m",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSMXResourceRecord": {
            "type": "object",
            "title": "DNSMXResourceRecord",
            "x-displayname": "DNSMXResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSMXResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " MX Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n",
                    "title": "Value",
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneMailExchanger"
                    },
                    "x-displayname": "MX Record Value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100"
                    }
                }
            }
        },
        "dns_zoneDNSNAPTRResourceRecord": {
            "type": "object",
            "description": "DNS NAPTR Record",
            "title": "DNSNAPTRResourceRecord",
            "x-displayname": "DNS NAPTR Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSNAPTRResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " NAPTR Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "NAPTR Values",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneNAPTRValue"
                    },
                    "x-displayname": "NAPTR Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSNSResourceRecord": {
            "type": "object",
            "title": "DNSNSResourceRecord",
            "x-displayname": "DNSNSResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSNSResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " NS Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.we\" or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.we\" or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"ns1.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Name-servers",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Name Servers",
                    "x-ves-example": "ns1.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSPTRResourceRecord": {
            "type": "object",
            "title": "DNSPTRResourceRecord",
            "x-displayname": "DNSPTRResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSPTRResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " PTR Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"my.example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Domain names",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domain Name",
                    "x-ves-example": "my.example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDNSSRVResourceRecord": {
            "type": "object",
            "title": "DNSSRVResourceRecord",
            "x-displayname": "DNSSRVResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSSRVResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " SRV Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.pattern: ^([*]|[a-zA-Z0-9-_]{1,63})([.][a-zA-Z0-9-_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.pattern": "^([*]|[a-zA-Z0-9-_]{1,63})([.][a-zA-Z0-9-_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "SRV Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneSRVService"
                    },
                    "x-displayname": "SRV Value",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneDNSTXTResourceRecord": {
            "type": "object",
            "title": "DNSTXTResourceRecord",
            "x-displayname": "DNSTXTResourceRecord",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DNSTXTResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " TXT Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or corp.web or *.b\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or corp.web or *.b",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.max_len: 4000\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Text",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "type": "string",
                        "maxLength": 4000
                    },
                    "x-displayname": "Text",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.max_len": "4000",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "dns_zoneDSKeyAlgorithm": {
            "type": "string",
            "description": "DS key value must be compatible with the specified algorithm.\n\n - UNSPECIFIED: UNSPECIFIED\n\n - RSASHA1: RSASHA1\n\n - RSASHA1NSEC3SHA1: RSASHA1-NSEC3-SHA1\n\n - RSASHA256: RSASHA256\n\n - RSASHA512: RSASHA512\n\n - ECDSAP256SHA256: ECDSAP256SHA256\n\n - ECDSAP384SHA384: ECDSAP384SHA384\n\n - ED25519: ED25519\n\n - ED448: ED448\n",
            "title": "DS Key Algorithm",
            "enum": [
                "UNSPECIFIED",
                "RSASHA1",
                "RSASHA1NSEC3SHA1",
                "RSASHA256",
                "RSASHA512",
                "ECDSAP256SHA256",
                "ECDSAP384SHA384",
                "ED25519",
                "ED448"
            ],
            "default": "UNSPECIFIED",
            "x-displayname": "DS Key algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.DSKeyAlgorithm"
        },
        "dns_zoneDSRecordValue": {
            "type": "object",
            "title": "DSRecordValue",
            "x-displayname": "DSRecordValue",
            "x-ves-oneof-field-digest_choice": "[\"sha1_digest\",\"sha256_digest\",\"sha384_digest\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.DSRecordValue",
            "properties": {
                "ds_key_algorithm": {
                    "description": " DS key value must be compatible with the specified algorithm.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DS Key Algorithm",
                    "$ref": "#/definitions/dns_zoneDSKeyAlgorithm",
                    "x-displayname": "DS Key algorithm",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "key_tag": {
                    "type": "integer",
                    "description": " A short numeric value which can help quickly identify the referenced DNSKEY-record.\n\nExample: - \"15228\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Key Tag",
                    "format": "int64",
                    "x-displayname": "Key Tag",
                    "x-ves-example": "15228",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "sha1_digest": {
                    "description": "Exclusive with [sha256_digest sha384_digest]\n",
                    "title": "SHA1 Digest",
                    "$ref": "#/definitions/dns_zoneSHA1Digest",
                    "x-displayname": "SHA1 Digest"
                },
                "sha256_digest": {
                    "description": "Exclusive with [sha1_digest sha384_digest]\n",
                    "title": "SHA256 Digest",
                    "$ref": "#/definitions/dns_zoneSHA256Digest",
                    "x-displayname": "SHA256 Digest"
                },
                "sha384_digest": {
                    "description": "Exclusive with [sha1_digest sha256_digest]\n",
                    "title": "SHA384 Digest",
                    "$ref": "#/definitions/dns_zoneSHA384Digest",
                    "x-displayname": "SHA384 Digest"
                }
            }
        },
        "dns_zoneLOCValue": {
            "type": "object",
            "title": "LOCValue",
            "x-displayname": "LOCValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.LOCValue",
            "properties": {
                "altitude": {
                    "type": "number",
                    "description": " Altitude in meters\n\nExample: - \"20.3\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: -100000.00\n  ves.io.schema.rules.float.lte: 42849672.95\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Altitude",
                    "format": "float",
                    "x-displayname": "Altitude",
                    "x-ves-example": "20.3",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "-100000.00",
                        "ves.io.schema.rules.float.lte": "42849672.95",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "horizontal_precision": {
                    "type": "number",
                    "description": " Horizontal Precision in meters\n\nExample: - \"30.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Horizontal Precision",
                    "format": "float",
                    "x-displayname": "Horizontal Precision",
                    "x-ves-example": "30.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                },
                "latitude_degree": {
                    "type": "integer",
                    "description": " Latitude degree, an integer between 0 and 90, including 0 and 90\n\nExample: - \"51\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 90\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Latitude degree",
                    "format": "int32",
                    "x-displayname": "Latitude degree",
                    "x-ves-example": "51",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "90",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "latitude_hemisphere": {
                    "description": " Latitude hemisphere, N or S\n\nExample: - \"N\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Latitude hemisphere",
                    "$ref": "#/definitions/dns_zoneLatitudeHemisphere",
                    "x-displayname": "Latitude hemisphere",
                    "x-ves-example": "N",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "latitude_minute": {
                    "type": "integer",
                    "description": " Latitude minute, an integer between 0 and 59, including 0 and 59\n\nExample: - \"30\"-\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 59\n",
                    "title": "Latitude minute",
                    "format": "int32",
                    "x-displayname": "Latitude minute",
                    "x-ves-example": "30",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "59"
                    }
                },
                "latitude_second": {
                    "type": "number",
                    "description": " Latitude second, an decimal between 0 and 59.999, including 0 and 59.999\n\nExample: - \"12.000\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 59.999\n",
                    "title": "Latitude second",
                    "format": "float",
                    "x-displayname": "Latitude second",
                    "x-ves-example": "12.000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "59.999"
                    }
                },
                "location_diameter": {
                    "type": "number",
                    "description": " Diameter of a sphere enclosing the described entity, in meters\n\nExample: - \"30.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Size",
                    "format": "float",
                    "x-displayname": "Size",
                    "x-ves-example": "30.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                },
                "longitude_degree": {
                    "type": "integer",
                    "description": " Longitude degree, an integer between 0 and 180, including 0 and 180\n\nExample: - \"51\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 180\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Longitude degree",
                    "format": "int32",
                    "x-displayname": "Longitude degree",
                    "x-ves-example": "51",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "180",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "longitude_hemisphere": {
                    "description": " Longitude hemisphere, E or W\n\nExample: - \"E\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Longitude hemisphere",
                    "$ref": "#/definitions/dns_zoneLongitudeHemisphere",
                    "x-displayname": "Longitude hemisphere",
                    "x-ves-example": "E",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "longitude_minute": {
                    "type": "integer",
                    "description": " Longitude minute, an integer between 0 and 59, including 0 and 59\n\nExample: - \"30\"-\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: 0\n  ves.io.schema.rules.int32.lte: 59\n",
                    "title": "Longitude minute",
                    "format": "int32",
                    "x-displayname": "Longitude minute",
                    "x-ves-example": "30",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "0",
                        "ves.io.schema.rules.int32.lte": "59"
                    }
                },
                "longitude_second": {
                    "type": "number",
                    "description": " Longitude second, an decimal between 0 and 59.999, including 0 and 59.999\n\nExample: - \"12.000\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 59.999\n",
                    "title": "Longitude second",
                    "format": "float",
                    "x-displayname": "Longitude second",
                    "x-ves-example": "12.000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "59.999"
                    }
                },
                "vertical_precision": {
                    "type": "number",
                    "description": " Vertical Precision in meters\n\nExample: - \"10.00m\"-\n\nValidation Rules:\n  ves.io.schema.rules.float.gte: 0.0\n  ves.io.schema.rules.float.lte: 90000000.00\n",
                    "title": "Vertical Precision",
                    "format": "float",
                    "x-displayname": "Vertical Precision",
                    "x-ves-example": "10.00m",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.float.gte": "0.0",
                        "ves.io.schema.rules.float.lte": "90000000.00"
                    }
                }
            }
        },
        "dns_zoneLatitudeHemisphere": {
            "type": "string",
            "description": "Latitude hemisphere can only be N or S\n\n - N: North Hemisphere\n\n - S: South Hemisphere\n",
            "title": "Latitude Hemisphere",
            "enum": [
                "N",
                "S"
            ],
            "default": "N",
            "x-displayname": "Latitude hemisphere",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.LatitudeHemisphere"
        },
        "dns_zoneLongitudeHemisphere": {
            "type": "string",
            "description": "Longitude hemisphere can only be E or W\n\n - E: East Hemisphere\n\n - W: West Hemisphere\n",
            "title": "Longitude Hemisphere",
            "enum": [
                "E",
                "W"
            ],
            "default": "E",
            "x-displayname": "Longitude hemisphere",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.LongitudeHemisphere"
        },
        "dns_zoneMailExchanger": {
            "type": "object",
            "title": "MailExchanger",
            "x-displayname": "MailExchanger",
            "x-ves-proto-message": "ves.io.schema.dns_zone.MailExchanger",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": " Mail exchanger domain name, please provide the full hostname, for example: mail.example.com\n\nExample: - \"mail.example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n",
                    "title": "Domain",
                    "x-displayname": "Domain",
                    "x-ves-example": "mail.example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": " Mail exchanger priority code\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                }
            }
        },
        "dns_zoneNAPTRValue": {
            "type": "object",
            "title": "NAPTRValue",
            "x-displayname": "NAPTRValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.NAPTRValue",
            "properties": {
                "flags": {
                    "type": "string",
                    "description": " Flag to control aspects of the rewriting and interpretation of the fields in the record. At this time only four flags, S/A/U/P, are defined.\n\nExample: - \"\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 255\n  ves.io.schema.rules.string.pattern: ^(S|s|A|a|U|u|P|p)$\n",
                    "title": "Flags",
                    "maxLength": 255,
                    "x-displayname": "Flags",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "255",
                        "ves.io.schema.rules.string.pattern": "^(S|s|A|a|U|u|P|p)$"
                    }
                },
                "order": {
                    "type": "integer",
                    "description": " Order in which the NAPTR records must be processed. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Order",
                    "format": "int64",
                    "x-displayname": "Order",
                    "x-ves-example": "10",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "preference": {
                    "type": "integer",
                    "description": " Preference when records have the same order. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Preference",
                    "format": "int64",
                    "x-displayname": "Preference",
                    "x-ves-example": "10",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "regexp": {
                    "type": "string",
                    "description": " Regular expression to construct the next domain name to lookup.\n\nExample: - \"\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n",
                    "title": "Regular Expression",
                    "maxLength": 255,
                    "x-displayname": "Regular Expression",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255"
                    }
                },
                "replacement": {
                    "type": "string",
                    "description": " The next NAME to query for NAPTR, SRV, or address records depending on the value of the flags field.\n\nExample: - \"\"-",
                    "title": "Replacement",
                    "x-displayname": "Replacement"
                },
                "service": {
                    "type": "string",
                    "description": " Specifies the service(s) available down this rewrite path.\n\nExample: - \"\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 255\n  ves.io.schema.rules.string.pattern: ^([A-Za-z][A-Za-z0-9]{0,31}(\\\\+[A-Za-z][A-Za-z0-9]{0,31})*$|^$)\n",
                    "title": "Protocol Resolution Service",
                    "maxLength": 255,
                    "x-displayname": "Protocol Resolution Service",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "255",
                        "ves.io.schema.rules.string.pattern": "^([A-Za-z][A-Za-z0-9]{0,31}(\\\\+[A-Za-z][A-Za-z0-9]{0,31})*$|^$)"
                    }
                }
            }
        },
        "dns_zoneRRSet": {
            "type": "object",
            "title": "RRSet is a set of Resource Record Sets for specific type",
            "x-displayname": "Resource Record Set",
            "x-ves-oneof-field-type_record_set": "[\"a_record\",\"aaaa_record\",\"afsdb_record\",\"alias_record\",\"caa_record\",\"cds_record\",\"cert_record\",\"cname_record\",\"ds_record\",\"eui48_record\",\"eui64_record\",\"lb_record\",\"loc_record\",\"mx_record\",\"naptr_record\",\"ns_record\",\"ptr_record\",\"srv_record\",\"sshfp_record\",\"tlsa_record\",\"txt_record\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.RRSet",
            "properties": {
                "a_record": {
                    "description": "Exclusive with [aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "A Record",
                    "$ref": "#/definitions/dns_zoneDNSAResourceRecord",
                    "x-displayname": "A"
                },
                "aaaa_record": {
                    "description": "Exclusive with [a_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "AAAA Record",
                    "$ref": "#/definitions/dns_zoneDNSAAAAResourceRecord",
                    "x-displayname": "AAAA"
                },
                "afsdb_record": {
                    "description": "Exclusive with [a_record aaaa_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "AFSDB Record",
                    "$ref": "#/definitions/dns_zoneDNSAFSDBRecord",
                    "x-displayname": "AFSDB"
                },
                "alias_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "ALIAS Record",
                    "$ref": "#/definitions/dns_zoneDNSAliasResourceRecord",
                    "x-displayname": "ALIAS"
                },
                "caa_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CAA Record",
                    "$ref": "#/definitions/dns_zoneDNSCAAResourceRecord",
                    "x-displayname": "CAA"
                },
                "cds_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CDS Record",
                    "$ref": "#/definitions/dns_zoneDNSCDSRecord",
                    "x-displayname": "CDS"
                },
                "cert_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CERT Record",
                    "$ref": "#/definitions/dns_zoneCERTResourceRecord",
                    "x-displayname": "CERT"
                },
                "cname_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "CNAME Record",
                    "$ref": "#/definitions/dns_zoneDNSCNAMEResourceRecord",
                    "x-displayname": "CNAME"
                },
                "description": {
                    "type": "string",
                    "description": "\n\nExample: - \"Comment\"-",
                    "title": "Comment",
                    "x-displayname": "Comment",
                    "x-ves-example": "Comment"
                },
                "ds_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "DS Record",
                    "$ref": "#/definitions/dns_zoneDNSDSRecord",
                    "x-displayname": "DS"
                },
                "eui48_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "EUI48 Record",
                    "$ref": "#/definitions/dns_zoneDNSEUI48ResourceRecord",
                    "x-displayname": "EUI48"
                },
                "eui64_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "EUI64 Record",
                    "$ref": "#/definitions/dns_zoneDNSEUI64ResourceRecord",
                    "x-displayname": "EUI64"
                },
                "lb_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "DNS LB Record",
                    "$ref": "#/definitions/dns_zoneDNSLBResourceRecord",
                    "x-displayname": "DNS Load Balancer"
                },
                "loc_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "LOC Record",
                    "$ref": "#/definitions/dns_zoneDNSLOCResourceRecord",
                    "x-displayname": "LOC"
                },
                "mx_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "MX Record",
                    "$ref": "#/definitions/dns_zoneDNSMXResourceRecord",
                    "x-displayname": "MX"
                },
                "naptr_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record ns_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "NAPTR Record",
                    "$ref": "#/definitions/dns_zoneDNSNAPTRResourceRecord",
                    "x-displayname": "NAPTR"
                },
                "ns_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ptr_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "NS Record",
                    "$ref": "#/definitions/dns_zoneDNSNSResourceRecord",
                    "x-displayname": "NS"
                },
                "ptr_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record srv_record sshfp_record tlsa_record txt_record]\n",
                    "title": "PTR Record",
                    "$ref": "#/definitions/dns_zoneDNSPTRResourceRecord",
                    "x-displayname": "PTR"
                },
                "srv_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record sshfp_record tlsa_record txt_record]\n",
                    "title": "SRV Record",
                    "$ref": "#/definitions/dns_zoneDNSSRVResourceRecord",
                    "x-displayname": "SRV"
                },
                "sshfp_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record tlsa_record txt_record]\n",
                    "title": "SSHFP Record",
                    "$ref": "#/definitions/dns_zoneSSHFPResourceRecord",
                    "x-displayname": "SSHFP"
                },
                "tlsa_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record txt_record]\n",
                    "title": "TLSA Record",
                    "$ref": "#/definitions/dns_zoneTLSAResourceRecord",
                    "x-displayname": "TLSA"
                },
                "ttl": {
                    "type": "integer",
                    "description": "\n\nExample: - \"3600\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 60\n  ves.io.schema.rules.uint32.lte: 2147483647\n",
                    "title": "TTL",
                    "format": "int64",
                    "x-displayname": "Time to live",
                    "x-ves-example": "3600",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "60",
                        "ves.io.schema.rules.uint32.lte": "2147483647"
                    }
                },
                "txt_record": {
                    "description": "Exclusive with [a_record aaaa_record afsdb_record alias_record caa_record cds_record cert_record cname_record ds_record eui48_record eui64_record lb_record loc_record mx_record naptr_record ns_record ptr_record srv_record sshfp_record tlsa_record]\n",
                    "title": "TXT Record",
                    "$ref": "#/definitions/dns_zoneDNSTXTResourceRecord",
                    "x-displayname": "TXT"
                }
            }
        },
        "dns_zoneSHA1Digest": {
            "type": "object",
            "title": "SHA1 Digest",
            "x-displayname": "SHA1 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA1Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"addf120b430021c36c232c99ef8d926aea2acd6b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 40\n  ves.io.schema.rules.string.min_len: 40\n",
                    "title": "Digest",
                    "minLength": 40,
                    "maxLength": 40,
                    "x-displayname": "Digest",
                    "x-ves-example": "addf120b430021c36c232c99ef8d926aea2acd6b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "40",
                        "ves.io.schema.rules.string.min_len": "40"
                    }
                }
            }
        },
        "dns_zoneSHA1Fingerprint": {
            "type": "object",
            "title": "SHA1 Fingerprint",
            "x-displayname": "SHA1 Fingerprint",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA1Fingerprint",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": " The 'fingerprint' is the DS key and the actual contents of the DS record. \n\nExample: - \"addf120b430021c36c232c99ef8d926aea2acd6b\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 40\n  ves.io.schema.rules.string.min_len: 40\n",
                    "title": "Fingerprint",
                    "minLength": 40,
                    "maxLength": 40,
                    "x-displayname": "Fingerprint",
                    "x-ves-example": "addf120b430021c36c232c99ef8d926aea2acd6b",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "40",
                        "ves.io.schema.rules.string.min_len": "40"
                    }
                }
            }
        },
        "dns_zoneSHA256Digest": {
            "type": "object",
            "title": "SHA256 Digest",
            "x-displayname": "SHA256 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA256Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 64\n",
                    "title": "Digest",
                    "minLength": 64,
                    "maxLength": 64,
                    "x-displayname": "Digest",
                    "x-ves-example": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "64"
                    }
                }
            }
        },
        "dns_zoneSHA256Fingerprint": {
            "type": "object",
            "title": "SHA256 Fingerprint",
            "x-displayname": "SHA256 Fingerprint",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA256Fingerprint",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": " The 'fingerprint' is the DS key and the actual contents of the DS record. \n\nExample: - \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 64\n  ves.io.schema.rules.string.min_len: 64\n",
                    "title": "Fingerprint",
                    "minLength": 64,
                    "maxLength": 64,
                    "x-displayname": "Fingerprint",
                    "x-ves-example": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "64",
                        "ves.io.schema.rules.string.min_len": "64"
                    }
                }
            }
        },
        "dns_zoneSHA384Digest": {
            "type": "object",
            "title": "SHA384 Digest",
            "x-displayname": "SHA384 Digest",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SHA384Digest",
            "properties": {
                "digest": {
                    "type": "string",
                    "description": " The 'digest' is the DS key and the actual contents of the DS record. \n\nExample: - \"b4a9b28d142d91968ca232b95dfca771ee66f99924148b85026dfa686f6288d0edbfa71c98a798fda71e130f48e8f0f8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 96\n  ves.io.schema.rules.string.min_len: 96\n",
                    "title": "Digest",
                    "minLength": 96,
                    "maxLength": 96,
                    "x-displayname": "Digest",
                    "x-ves-example": "b4a9b28d142d91968ca232b95dfca771ee66f99924148b85026dfa686f6288d0edbfa71c98a798fda71e130f48e8f0f8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "96",
                        "ves.io.schema.rules.string.min_len": "96"
                    }
                }
            }
        },
        "dns_zoneSRVService": {
            "type": "object",
            "title": "SRVService",
            "x-displayname": "SRVService",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SRVService",
            "properties": {
                "port": {
                    "type": "integer",
                    "description": " Port on which the service can be found\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Port",
                    "format": "int64",
                    "x-displayname": "Port",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the target. A lower number indicates a higher preference.\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "target": {
                    "type": "string",
                    "description": " Hostname of the machine providing the service\n\nExample: - \"my.example.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^[.]$|^([a-zA-Z0-9]{1}[a-zA-Z0-9_-]{0,62})(\\\\.[a-zA-Z0-9_]{1}[a-zA-Z0-9_-]{0,62})*?(\\\\.[a-zA-Z]{1}[a-zA-Z0-9]{0,62})\\\\.?$\n",
                    "title": "Target",
                    "x-displayname": "Target",
                    "x-ves-example": "my.example.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^[.]$|^([a-zA-Z0-9]{1}[a-zA-Z0-9_-]{0,62})(\\\\.[a-zA-Z0-9_]{1}[a-zA-Z0-9_-]{0,62})*?(\\\\.[a-zA-Z]{1}[a-zA-Z0-9]{0,62})\\\\.?$"
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": " Weight of the target. A higher number indicates a higher preference.\n\nExample: - \"10\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Weight",
                    "format": "int64",
                    "x-displayname": "Weight",
                    "x-ves-example": "10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                }
            }
        },
        "dns_zoneSSHFPAlgorithm": {
            "type": "string",
            "description": "SSHFP algorithm value must be compatible with the specified algorithm.\n\n - UNSPECIFIEDALGORITHM: UNSPECIFIEDALGORITHM\n\n - RSA: RSA\n\n - DSA: DSA\n\n - ECDSA: ECDSA\n\n - Ed25519: Ed25519\n\n - Ed448: Ed448\n",
            "title": "SSHFP Algorithm",
            "enum": [
                "UNSPECIFIEDALGORITHM",
                "RSA",
                "DSA",
                "ECDSA",
                "Ed25519",
                "Ed448"
            ],
            "default": "UNSPECIFIEDALGORITHM",
            "x-displayname": "SSHFP Algorithm",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.SSHFPAlgorithm"
        },
        "dns_zoneSSHFPFingerprintType": {
            "type": "string",
            "description": "x-displayName: \"SSHFP Fingerprint Type\"\nSSHFP Fingerprint Type must be compatible with the specified values.\n\n - INVALIDFINGERPRINTTYPE: INVALIDFINGERPRINTTYPE\n\nx-displayName: \"Invalid Fingerprint Type\"\n - SHA1ALGORITHM: SHA1ALGORITHM\n\nx-displayName: \"SHA1\"\n - SHA256ALGORITHM: SHA256ALGORITHM\n\nx-displayName: \"SHA256\"",
            "title": "SSHFP Fingerprint Type",
            "enum": [
                "INVALIDFINGERPRINTTYPE",
                "SHA1ALGORITHM",
                "SHA256ALGORITHM"
            ],
            "default": "INVALIDFINGERPRINTTYPE"
        },
        "dns_zoneSSHFPRecordValue": {
            "type": "object",
            "title": "SSHFPRecordValue",
            "x-displayname": "SSHFPRecordValue",
            "x-ves-oneof-field-fingerprint_type": "[\"sha1_fingerprint\",\"sha256_fingerprint\"]",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SSHFPRecordValue",
            "properties": {
                "algorithm": {
                    "description": " Algorithm of the public key.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.enum.not_in: 0\n  ves.io.schema.rules.message.required: true\n",
                    "title": "SSHFP Algorithm",
                    "$ref": "#/definitions/dns_zoneSSHFPAlgorithm",
                    "x-displayname": "SSHFP Algorithm",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.enum.not_in": "0",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "sha1_fingerprint": {
                    "description": "Exclusive with [sha256_fingerprint]\n",
                    "title": "SHA1 Fingerprint",
                    "$ref": "#/definitions/dns_zoneSHA1Fingerprint",
                    "x-displayname": "SHA1 Fingerprint"
                },
                "sha256_fingerprint": {
                    "description": "Exclusive with [sha1_fingerprint]\n",
                    "title": "SHA256 Digest",
                    "$ref": "#/definitions/dns_zoneSHA256Fingerprint",
                    "x-displayname": "SHA256 Fingerprint"
                }
            }
        },
        "dns_zoneSSHFPResourceRecord": {
            "type": "object",
            "description": "DNS SSHFP Record",
            "title": "SSHFPResourceRecord",
            "x-displayname": "DNS SSHFP Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.SSHFPResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " SSHFP Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "SSHFP Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneSSHFPRecordValue"
                    },
                    "x-displayname": "SSHFP Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "dns_zoneTLSARecordCSelector": {
            "type": "string",
            "description": "\n - FullCertificate: Full Certificate\n\n - UseSubjectPublicKey: Use Subject Public Key\n",
            "title": "TLSA Record Selector",
            "enum": [
                "FullCertificate",
                "UseSubjectPublicKey"
            ],
            "default": "FullCertificate",
            "x-displayname": "TLSA Record Selector",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordCSelector"
        },
        "dns_zoneTLSARecordCertificateUsage": {
            "type": "string",
            "description": "\n - CertificateAuthorityConstraint: Certificate Authority Constraint\n\n - ServiceCertificateConstraint: Service Certificate Constraint\n\n - TrustAnchorAssertion: Trust Anchor Assertion\n\n - DomainIssuedCertificate: Domain Issued Certificate\n",
            "title": "TLSA Record Certificate Usage",
            "enum": [
                "CertificateAuthorityConstraint",
                "ServiceCertificateConstraint",
                "TrustAnchorAssertion",
                "DomainIssuedCertificate"
            ],
            "default": "CertificateAuthorityConstraint",
            "x-displayname": "TLSA Record Certificate Usage",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordCertificateUsage"
        },
        "dns_zoneTLSARecordMatchingType": {
            "type": "string",
            "description": "\n - NoHash: No Hash\n\n - SHA256: SHA-256\n\n - SHA512: SHA-512\n",
            "title": "TLSA Record Matching Type",
            "enum": [
                "NoHash",
                "SHA256",
                "SHA512"
            ],
            "default": "NoHash",
            "x-displayname": "TLSA Record Matching Type",
            "x-ves-proto-enum": "ves.io.schema.dns_zone.TLSARecordMatchingType"
        },
        "dns_zoneTLSARecordValue": {
            "type": "object",
            "title": "TLSARecordValue",
            "x-displayname": "TLSARecordValue",
            "x-ves-proto-message": "ves.io.schema.dns_zone.TLSARecordValue",
            "properties": {
                "certificate_association_data": {
                    "type": "string",
                    "description": " The actual data to be matched given the settings of the other fields.\n\nExample: - \"Certificate Association Data\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.hex: true\n  ves.io.schema.rules.string.max_len: 4096\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Certificate Association Data",
                    "minLength": 1,
                    "maxLength": 4096,
                    "x-displayname": "Certificate Association Data",
                    "x-ves-example": "Certificate Association Data",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.hex": "true",
                        "ves.io.schema.rules.string.max_len": "4096",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "certificate_usage": {
                    "description": " x-example: \n TLSA Record Certificate Usage.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Certificate Usage",
                    "$ref": "#/definitions/dns_zoneTLSARecordCertificateUsage",
                    "x-displayname": "Certificate Usage",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "matching_type": {
                    "description": " TLSA Record Matching Type.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Matching Type",
                    "$ref": "#/definitions/dns_zoneTLSARecordMatchingType",
                    "x-displayname": "Matching Type",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "selector": {
                    "description": " TLSA Record Selector.\n\nExample: - \"1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Selector",
                    "$ref": "#/definitions/dns_zoneTLSARecordCSelector",
                    "x-displayname": "Selector",
                    "x-ves-example": "1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "dns_zoneTLSAResourceRecord": {
            "type": "object",
            "description": "DNS TLSA Record",
            "title": "TLSAResourceRecord",
            "x-displayname": "DNS TLSA Record",
            "x-ves-proto-message": "ves.io.schema.dns_zone.TLSAResourceRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " TLSA Record name, please provide only the specific subdomain or record name without the base domain.\n\nExample: - \"www or mail or * or ww* or *ab\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.pattern: ^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}\n",
                    "title": "Record Name",
                    "x-displayname": "Record Name (Excluding Domain name)",
                    "x-ves-example": "www or mail or * or ww* or *ab",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}"
                    }
                },
                "values": {
                    "type": "array",
                    "description": "\nExample: - \"values\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 100\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "TLSA Value",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                        "$ref": "#/definitions/dns_zoneTLSARecordValue"
                    },
                    "x-displayname": "TLSA Value",
                    "x-ves-example": "values",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "100",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                }
            }
        },
        "rrsetCreateRequest": {
            "type": "object",
            "title": "CreateRequest",
            "x-displayname": "Create Request",
            "x-ves-proto-message": "ves.io.schema.dns_zone.rrset.CreateRequest",
            "properties": {
                "dns_zone_name": {
                    "type": "string",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.pattern: ([0-9a-z]([.a-z0-9-]*[a-z0-9])?)\n",
                    "title": "dns_zone_name",
                    "x-displayname": "dns zone name",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.pattern": "([0-9a-z]([.a-z0-9-]*[a-z0-9])?)"
                    }
                },
                "group_name": {
                    "type": "string",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.pattern: ([a-z]([-a-z0-9_]*[a-z0-9])?)\n",
                    "title": "group_name",
                    "minLength": 1,
                    "x-displayname": "group name",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.pattern": "([a-z]([-a-z0-9_]*[a-z0-9])?)"
                    }
                },
                "rrset": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "rrset",
                    "$ref": "#/definitions/dns_zoneRRSet",
                    "x-displayname": "rrset",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "rrsetReplaceRequest": {
            "type": "object",
            "title": "ReplaceRequest",
            "x-displayname": "Replace Request",
            "x-ves-proto-message": "ves.io.schema.dns_zone.rrset.ReplaceRequest",
            "properties": {
                "dns_zone_name": {
                    "type": "string",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.pattern: ([0-9a-z]([.a-z0-9-]*[a-z0-9])?)\n",
                    "title": "dns_zone_name",
                    "x-displayname": "dns zone name",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.pattern": "([0-9a-z]([.a-z0-9-]*[a-z0-9])?)"
                    }
                },
                "group_name": {
                    "type": "string",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.pattern: ([a-z]([-a-z0-9_]*[a-z0-9])?)\n",
                    "title": "group_name",
                    "minLength": 1,
                    "x-displayname": "group name",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.pattern": "([a-z]([-a-z0-9_]*[a-z0-9])?)"
                    }
                },
                "record_name": {
                    "type": "string",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "record_name",
                    "x-displayname": "record name",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "rrset": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "rrset",
                    "$ref": "#/definitions/dns_zoneRRSet",
                    "x-displayname": "rrset",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.in: [\\\"A\\\",\\\"AAAA\\\",\\\"ALIAS\\\",\\\"CAA\\\",\\\"CNAME\\\",\\\"MX\\\",\\\"NS\\\",\\\"PTR\\\",\\\"SRV\\\",\\\"TXT\\\",\\\"DNSLB\\\",\\\"NAPTR\\\",\\\"AFSDB\\\",\\\"EUI48\\\",\\\"EUI64\\\",\\\"DS\\\",\\\"CDS\\\",\\\"LOC\\\",\\\"SSHFP\\\",\\\"TLSA\\\",\\\"CERT\\\"]\n",
                    "title": "type",
                    "x-displayname": "type",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.in": "[\\\"A\\\",\\\"AAAA\\\",\\\"ALIAS\\\",\\\"CAA\\\",\\\"CNAME\\\",\\\"MX\\\",\\\"NS\\\",\\\"PTR\\\",\\\"SRV\\\",\\\"TXT\\\",\\\"DNSLB\\\",\\\"NAPTR\\\",\\\"AFSDB\\\",\\\"EUI48\\\",\\\"EUI64\\\",\\\"DS\\\",\\\"CDS\\\",\\\"LOC\\\",\\\"SSHFP\\\",\\\"TLSA\\\",\\\"CERT\\\"]"
                    }
                }
            }
        },
        "rrsetResponse": {
            "type": "object",
            "title": "Response",
            "x-displayname": "Response",
            "x-ves-proto-message": "ves.io.schema.dns_zone.rrset.Response",
            "properties": {
                "dns_zone_name": {
                    "type": "string",
                    "title": "dns_zone_name",
                    "x-displayname": "dns zone name"
                },
                "group_name": {
                    "type": "string",
                    "title": "group_name",
                    "x-displayname": "group name"
                },
                "namespace": {
                    "type": "string",
                    "title": "namespace",
                    "x-displayname": "namespace"
                },
                "record_name": {
                    "type": "string",
                    "title": "record_name",
                    "x-displayname": "record name"
                },
                "rrset": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "rrset",
                    "$ref": "#/definitions/dns_zoneRRSet",
                    "x-displayname": "rrset",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "type": {
                    "type": "string",
                    "title": "type",
                    "x-displayname": "type"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 128\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "name",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "128",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "namespace",
                    "maxLength": 64,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "tenant",
                    "maxLength": 64,
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                }
            }
        }
    },
    "x-displayname": "F5XC DNS Management RRSet API",
    "x-ves-proto-file": "ves.io/schema/dns_zone/rrset/public_customapi.proto"
}`

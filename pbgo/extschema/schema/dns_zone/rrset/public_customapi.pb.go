// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_zone/rrset/public_customapi.proto

// F5XC DNS Management RRSet API
//
// x-displayName: "F5XC DNS Management RRSet API"
// x-required
// APIs to create, update or delete individual records of a DNS zone without having to send the whole DNS zone information.

package rrset

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	dns_zone "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_zone"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreateRequest
//
// x-displayName: "Create Request"
type CreateRequest struct {
	// dns_zone_name
	//
	// x-displayName: "dns zone name"
	// x-required
	DnsZoneName string `protobuf:"bytes,1,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
	// group_name
	//
	// x-displayName: "group name"
	// x-required
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// rrset
	//
	// x-displayName: "rrset"
	// x-required
	Rrset *dns_zone.RRSet `protobuf:"bytes,5,opt,name=rrset,proto3" json:"rrset,omitempty"`
}

func (m *CreateRequest) Reset()      { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage() {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_973a8feeac956e8c, []int{0}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetDnsZoneName() string {
	if m != nil {
		return m.DnsZoneName
	}
	return ""
}

func (m *CreateRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CreateRequest) GetRrset() *dns_zone.RRSet {
	if m != nil {
		return m.Rrset
	}
	return nil
}

// ReplaceRequest
//
// x-displayName: "Replace Request"
type ReplaceRequest struct {
	// dns_zone_name
	//
	// x-displayName: "dns zone name"
	// x-required
	DnsZoneName string `protobuf:"bytes,1,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
	// group_name
	//
	// x-displayName: "group name"
	// x-required
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// record_name
	//
	// x-displayName: "record name"
	// x-required
	RecordName string `protobuf:"bytes,3,opt,name=record_name,json=recordName,proto3" json:"record_name,omitempty"`
	// type
	//
	// x-displayName: "type"
	// x-required
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// rrset
	//
	// x-displayName: "rrset"
	// x-required
	Rrset *dns_zone.RRSet `protobuf:"bytes,5,opt,name=rrset,proto3" json:"rrset,omitempty"`
}

func (m *ReplaceRequest) Reset()      { *m = ReplaceRequest{} }
func (*ReplaceRequest) ProtoMessage() {}
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_973a8feeac956e8c, []int{1}
}
func (m *ReplaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceRequest.Merge(m, src)
}
func (m *ReplaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceRequest proto.InternalMessageInfo

func (m *ReplaceRequest) GetDnsZoneName() string {
	if m != nil {
		return m.DnsZoneName
	}
	return ""
}

func (m *ReplaceRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *ReplaceRequest) GetRecordName() string {
	if m != nil {
		return m.RecordName
	}
	return ""
}

func (m *ReplaceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ReplaceRequest) GetRrset() *dns_zone.RRSet {
	if m != nil {
		return m.Rrset
	}
	return nil
}

// GetRequest
//
// x-displayName: "Get Request"
type GetRequest struct {
	// dns_zone_name
	//
	// x-displayName: "dns zone name"
	// x-required
	DnsZoneName string `protobuf:"bytes,1,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
	// group_name
	//
	// x-displayName: "group name"
	// x-required
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// record_name
	//
	// x-displayName: "record name"
	// x-required
	RecordName string `protobuf:"bytes,3,opt,name=record_name,json=recordName,proto3" json:"record_name,omitempty"`
	// type
	//
	// x-displayName: "type"
	// x-required
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_973a8feeac956e8c, []int{2}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetDnsZoneName() string {
	if m != nil {
		return m.DnsZoneName
	}
	return ""
}

func (m *GetRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *GetRequest) GetRecordName() string {
	if m != nil {
		return m.RecordName
	}
	return ""
}

func (m *GetRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// DeleteRequest
//
// x-displayName: "Delete Request"
type DeleteRequest struct {
	// dns_zone_name
	//
	// x-displayName: "dns zone name"
	// x-required
	DnsZoneName string `protobuf:"bytes,1,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
	// group_name
	//
	// x-displayName: "group name"
	// x-required
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// record_name
	//
	// x-displayName: "record name"
	// x-required
	RecordName string `protobuf:"bytes,3,opt,name=record_name,json=recordName,proto3" json:"record_name,omitempty"`
	// type
	//
	// x-displayName: "type"
	// x-required
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_973a8feeac956e8c, []int{3}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetDnsZoneName() string {
	if m != nil {
		return m.DnsZoneName
	}
	return ""
}

func (m *DeleteRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *DeleteRequest) GetRecordName() string {
	if m != nil {
		return m.RecordName
	}
	return ""
}

func (m *DeleteRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// Response
//
// x-displayName: "Response"
type Response struct {
	// namespace
	//
	// x-displayName: "namespace"
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// dns_zone_name
	//
	// x-displayName: "dns zone name"
	DnsZoneName string `protobuf:"bytes,2,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
	// group_name
	//
	// x-displayName: "group name"
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// record_name
	//
	// x-displayName: "record name"
	RecordName string `protobuf:"bytes,4,opt,name=record_name,json=recordName,proto3" json:"record_name,omitempty"`
	// type
	//
	// x-displayName: "type"
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// rrset
	//
	// x-displayName: "rrset"
	// x-required
	Rrset *dns_zone.RRSet `protobuf:"bytes,6,opt,name=rrset,proto3" json:"rrset,omitempty"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_973a8feeac956e8c, []int{4}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Response) GetDnsZoneName() string {
	if m != nil {
		return m.DnsZoneName
	}
	return ""
}

func (m *Response) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Response) GetRecordName() string {
	if m != nil {
		return m.RecordName
	}
	return ""
}

func (m *Response) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Response) GetRrset() *dns_zone.RRSet {
	if m != nil {
		return m.Rrset
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "ves.io.schema.dns_zone.rrset.CreateRequest")
	golang_proto.RegisterType((*CreateRequest)(nil), "ves.io.schema.dns_zone.rrset.CreateRequest")
	proto.RegisterType((*ReplaceRequest)(nil), "ves.io.schema.dns_zone.rrset.ReplaceRequest")
	golang_proto.RegisterType((*ReplaceRequest)(nil), "ves.io.schema.dns_zone.rrset.ReplaceRequest")
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.dns_zone.rrset.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.dns_zone.rrset.GetRequest")
	proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.dns_zone.rrset.DeleteRequest")
	golang_proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.dns_zone.rrset.DeleteRequest")
	proto.RegisterType((*Response)(nil), "ves.io.schema.dns_zone.rrset.Response")
	golang_proto.RegisterType((*Response)(nil), "ves.io.schema.dns_zone.rrset.Response")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_zone/rrset/public_customapi.proto", fileDescriptor_973a8feeac956e8c)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_zone/rrset/public_customapi.proto", fileDescriptor_973a8feeac956e8c)
}

var fileDescriptor_973a8feeac956e8c = []byte{
	// 1078 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x78, 0xd3, 0x40, 0x26, 0x4a, 0x85, 0xf6, 0x64, 0x42, 0xb2, 0x35, 0x23, 0x04, 0x4e,
	0xea, 0xd9, 0x8d, 0x92, 0x50, 0x11, 0x2e, 0xe0, 0xfc, 0x68, 0x88, 0x94, 0x84, 0x68, 0x1d, 0x50,
	0x95, 0x10, 0xac, 0xf5, 0x7a, 0xe2, 0x2e, 0xd8, 0x3b, 0xdb, 0x99, 0x59, 0xb7, 0x4d, 0x88, 0x54,
	0xf5, 0x0c, 0x28, 0xa2, 0x27, 0x90, 0x10, 0x1c, 0x39, 0xf5, 0x88, 0x10, 0x5c, 0x72, 0x22, 0x95,
	0xa8, 0x50, 0x24, 0x84, 0xd4, 0x23, 0x71, 0x38, 0x50, 0x04, 0x52, 0xff, 0x01, 0x24, 0xb4, 0x33,
	0x76, 0x93, 0x0d, 0x89, 0x63, 0x01, 0xa5, 0x45, 0xea, 0x65, 0xe7, 0xc7, 0x7b, 0xef, 0x7b, 0x3b,
	0xef, 0xdb, 0x6f, 0x67, 0x06, 0x8e, 0xd4, 0x08, 0x37, 0x3d, 0x6a, 0x71, 0xf7, 0x22, 0xa9, 0x3a,
	0x56, 0xc9, 0xe7, 0x85, 0x35, 0xea, 0x13, 0x8b, 0x31, 0x4e, 0x84, 0x15, 0x84, 0xc5, 0x8a, 0xe7,
	0x16, 0xdc, 0x90, 0x0b, 0x5a, 0x75, 0x02, 0xcf, 0x0c, 0x18, 0x15, 0x54, 0xef, 0x53, 0x41, 0xa6,
	0x0a, 0x32, 0x9b, 0x41, 0xa6, 0x0c, 0xea, 0xc5, 0x65, 0x4f, 0x5c, 0x0c, 0x8b, 0xa6, 0x4b, 0xab,
	0x56, 0x99, 0x96, 0xa9, 0x25, 0x83, 0x8a, 0xe1, 0xaa, 0x1c, 0xc9, 0x81, 0xec, 0x29, 0xb0, 0xde,
	0xbe, 0x32, 0xa5, 0xe5, 0x0a, 0xb1, 0x9c, 0xc0, 0xb3, 0x1c, 0xdf, 0xa7, 0xc2, 0x11, 0x1e, 0xf5,
	0x79, 0xc3, 0x8a, 0x8e, 0x79, 0x3f, 0x71, 0x35, 0x20, 0x4d, 0x9f, 0x67, 0xe2, 0x3e, 0x34, 0x38,
	0x08, 0xf0, 0x74, 0xdc, 0x78, 0x30, 0xae, 0x2f, 0x6e, 0xaa, 0x39, 0x15, 0xaf, 0xe4, 0x08, 0x72,
	0x74, 0xe6, 0x1a, 0xe1, 0xc4, 0xaf, 0x1d, 0x02, 0x4f, 0x1f, 0xf2, 0xf1, 0xc8, 0xe5, 0x42, 0xcc,
	0x03, 0xed, 0x01, 0xd8, 0x33, 0xc1, 0x88, 0x23, 0x88, 0x4d, 0x2e, 0x85, 0x84, 0x0b, 0x7d, 0x0e,
	0xf6, 0x34, 0x57, 0x51, 0xf0, 0x9d, 0x2a, 0x49, 0x81, 0x34, 0xc8, 0x74, 0x8d, 0x0f, 0x7c, 0x7d,
	0x77, 0x4b, 0x7b, 0x8e, 0xa1, 0xe1, 0x74, 0x66, 0x79, 0x08, 0x8f, 0x39, 0x78, 0x6d, 0x25, 0xb3,
	0x6c, 0x3a, 0x78, 0x6d, 0x08, 0x8f, 0xe1, 0x95, 0xc1, 0x65, 0xd5, 0x5b, 0x19, 0x78, 0x65, 0xc0,
	0xee, 0x2e, 0xf9, 0x7c, 0x89, 0xfa, 0x64, 0xde, 0xa9, 0x12, 0x7d, 0x1e, 0xc2, 0x32, 0xa3, 0x61,
	0xa0, 0xb0, 0x92, 0x12, 0xcb, 0x8a, 0xb0, 0x3a, 0x58, 0xf2, 0x29, 0x10, 0x75, 0x9e, 0x65, 0x67,
	0x86, 0xfb, 0x33, 0xcb, 0x0a, 0x11, 0x2b, 0x9c, 0x42, 0x1c, 0xb1, 0x4b, 0x42, 0x48, 0xbc, 0x11,
	0x78, 0x4a, 0xd2, 0x98, 0x3a, 0x95, 0x06, 0x99, 0xee, 0xe1, 0x7e, 0xf3, 0x18, 0xae, 0x6d, 0x3b,
	0x4f, 0x84, 0xad, 0x7c, 0xd1, 0x97, 0x1a, 0x3c, 0x6d, 0x93, 0xa0, 0xe2, 0xb8, 0xff, 0x97, 0x65,
	0x9e, 0x81, 0xdd, 0x8c, 0xb8, 0x94, 0x95, 0x14, 0xa0, 0x16, 0x01, 0xda, 0x50, 0x4d, 0x49, 0x87,
	0x9b, 0x00, 0x76, 0x44, 0x1f, 0x4b, 0xaa, 0x43, 0xe6, 0xfa, 0x58, 0xe6, 0xb8, 0x01, 0xd8, 0x26,
	0xb0, 0x3f, 0x00, 0xcb, 0x28, 0x87, 0xb2, 0x28, 0x97, 0xcb, 0xc9, 0x66, 0x76, 0x26, 0x97, 0x47,
	0x59, 0x34, 0x21, 0x47, 0x13, 0xf3, 0xb9, 0xb9, 0x29, 0x94, 0x45, 0x73, 0x17, 0x50, 0x16, 0xcd,
	0x47, 0xf3, 0x0b, 0x8b, 0x36, 0xca, 0xa2, 0xbc, 0xfd, 0x26, 0xca, 0xa2, 0xc5, 0x0b, 0x8b, 0x28,
	0x8b, 0x26, 0xe7, 0xf3, 0xb3, 0xe3, 0x91, 0x39, 0xa7, 0x6c, 0xb9, 0xf3, 0xf9, 0xc9, 0x68, 0x3c,
	0xf5, 0xc6, 0xcc, 0xe8, 0x4b, 0xaa, 0x3d, 0x37, 0x1a, 0xf9, 0x49, 0x58, 0xf9, 0x9c, 0x7d, 0x7d,
	0x22, 0x02, 0xc9, 0xbf, 0x76, 0x7e, 0x21, 0x82, 0x99, 0xcd, 0xcb, 0x5c, 0x53, 0xf6, 0x22, 0x5a,
	0xb1, 0xe5, 0x7b, 0xfe, 0x3d, 0xe2, 0xfe, 0x48, 0x42, 0x38, 0x4d, 0xc4, 0x63, 0xd2, 0x1e, 0x0e,
	0x69, 0xe8, 0x9a, 0x06, 0x7b, 0x26, 0x49, 0x85, 0x88, 0xc7, 0xba, 0x79, 0x58, 0x14, 0xfc, 0x08,
	0xe0, 0x93, 0x36, 0xe1, 0x01, 0xf5, 0x39, 0xd1, 0xfb, 0x60, 0x57, 0xb4, 0x2e, 0x1e, 0x38, 0x6e,
	0xa3, 0xf2, 0xf6, 0xfe, 0x84, 0x8e, 0x0e, 0x73, 0x23, 0xeb, 0x19, 0x2f, 0x78, 0x7f, 0xac, 0xe0,
	0xaa, 0x3e, 0xc7, 0xd7, 0xaf, 0xe3, 0x2f, 0xf5, 0xd3, 0x1b, 0xe5, 0x3b, 0x25, 0x2d, 0x87, 0xa4,
	0xdd, 0xd9, 0xbe, 0xb4, 0x87, 0x37, 0x4f, 0xc3, 0xae, 0x09, 0xb9, 0x71, 0xe7, 0x16, 0x66, 0xf4,
	0x0f, 0x35, 0xd8, 0xa9, 0xf6, 0x21, 0xfd, 0xac, 0xd9, 0x6a, 0xfb, 0x36, 0x63, 0xbb, 0x55, 0xef,
	0xf3, 0xad, 0x9d, 0x9b, 0x85, 0x43, 0x37, 0x93, 0xf5, 0xed, 0xd4, 0x68, 0x8d, 0x70, 0xec, 0x51,
	0xec, 0xf9, 0xab, 0xcc, 0xe1, 0x82, 0x85, 0xae, 0x08, 0x19, 0xc1, 0x97, 0x99, 0x27, 0x48, 0x36,
	0x9d, 0x5e, 0x7d, 0xf1, 0x8a, 0x8b, 0x4b, 0x3e, 0xc7, 0x5c, 0x38, 0x7e, 0xc9, 0x61, 0x25, 0x1c,
	0x72, 0xc2, 0x7e, 0xdd, 0x4e, 0x7d, 0x06, 0xe0, 0x60, 0x23, 0x54, 0xa5, 0x91, 0x5e, 0x51, 0x1a,
	0x4c, 0x8b, 0xef, 0x10, 0x57, 0x60, 0x99, 0x0d, 0xbb, 0x6a, 0x01, 0x97, 0x60, 0x47, 0x40, 0xb9,
	0xd0, 0xbd, 0xc6, 0xf9, 0xc4, 0xba, 0xcf, 0x10, 0xb7, 0xf8, 0x55, 0x2e, 0x48, 0xf5, 0xfe, 0x39,
	0x81, 0x5b, 0x27, 0xc9, 0x45, 0x9d, 0x74, 0x22, 0xbf, 0x16, 0x0a, 0xb8, 0xfe, 0xc3, 0xcf, 0x37,
	0x92, 0xb3, 0x68, 0xba, 0x9d, 0x84, 0xeb, 0xb1, 0x4f, 0x64, 0xa3, 0x89, 0xbf, 0xbe, 0xff, 0x55,
	0x6c, 0xbc, 0x0c, 0x06, 0xf5, 0x6d, 0x0d, 0x6a, 0xd3, 0x44, 0xe8, 0x99, 0xd6, 0x05, 0xde, 0xff,
	0x39, 0xb7, 0x4d, 0xc5, 0xef, 0xc9, 0x5b, 0x5f, 0x25, 0x41, 0x7d, 0x3b, 0x75, 0xee, 0x68, 0x3a,
	0x18, 0x71, 0x4a, 0x47, 0xb2, 0x51, 0xa5, 0xbe, 0x27, 0x68, 0x44, 0xc8, 0xb7, 0x00, 0xbe, 0xd0,
	0x0e, 0x21, 0x65, 0x22, 0xf4, 0x4f, 0x00, 0xd4, 0xa2, 0xf6, 0x23, 0xf0, 0x9f, 0xd1, 0x61, 0x65,
	0x5e, 0x7d, 0x4f, 0x3a, 0xe4, 0xf0, 0xd2, 0x10, 0x1e, 0x1b, 0x2c, 0x98, 0x78, 0xe5, 0xec, 0xc0,
	0x80, 0x75, 0x60, 0x4e, 0x4d, 0x49, 0xde, 0xde, 0xd6, 0xdf, 0xfa, 0x97, 0x78, 0xb3, 0xd6, 0x0f,
	0x68, 0x77, 0xc3, 0x5a, 0x8f, 0xc4, 0xb9, 0xa1, 0x7f, 0xa7, 0xc1, 0x27, 0x1a, 0x87, 0x1f, 0x3d,
	0x7b, 0x12, 0x47, 0x07, 0xcf, 0x48, 0x6d, 0x33, 0x7a, 0x37, 0x12, 0xd7, 0x48, 0x4b, 0x71, 0x1d,
	0xab, 0xad, 0x76, 0xa9, 0x0c, 0x42, 0x45, 0x65, 0xd4, 0x3e, 0xb2, 0x54, 0x3a, 0xbd, 0x0f, 0x94,
	0xca, 0x48, 0x97, 0xb7, 0x35, 0xd8, 0xa9, 0x76, 0xe4, 0x93, 0x7e, 0x94, 0xb1, 0x7d, 0xbb, 0x6d,
	0x2e, 0x7f, 0xfb, 0x07, 0x5c, 0xde, 0x6e, 0xf3, 0x3f, 0x59, 0x52, 0xef, 0xff, 0x29, 0x80, 0x9d,
	0x8d, 0xee, 0xa3, 0x2b, 0xce, 0xc1, 0x07, 0xca, 0x68, 0x6f, 0xf7, 0xd6, 0x37, 0x40, 0xbb, 0xfe,
	0x7d, 0x4a, 0xfb, 0x1c, 0x80, 0xf1, 0xf7, 0xc1, 0xce, 0xae, 0x91, 0xb8, 0xb3, 0x6b, 0x24, 0xee,
	0xed, 0x1a, 0xe0, 0x5a, 0xdd, 0x00, 0x5f, 0xd4, 0x0d, 0x70, 0xab, 0x6e, 0x80, 0x9d, 0xba, 0x01,
	0x7e, 0xaa, 0x1b, 0xe0, 0x97, 0xba, 0x91, 0xb8, 0x57, 0x37, 0xc0, 0xe6, 0x9e, 0x91, 0xd8, 0xda,
	0x33, 0xc0, 0xce, 0x9e, 0x91, 0xb8, 0xb3, 0x67, 0x24, 0x96, 0xec, 0x32, 0x0d, 0xde, 0x2d, 0x9b,
	0x35, 0x5a, 0x11, 0x84, 0x31, 0xc7, 0x0c, 0xb9, 0x25, 0x3b, 0xab, 0x94, 0x55, 0x71, 0xc0, 0x68,
	0xcd, 0x2b, 0x11, 0x86, 0x9b, 0x66, 0x2b, 0x28, 0x96, 0xa9, 0x45, 0xae, 0x88, 0xc6, 0xc5, 0xf0,
	0xc8, 0xdb, 0x75, 0xb1, 0x53, 0x5e, 0x11, 0x47, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x53, 0x43,
	0x89, 0xff, 0x84, 0x0f, 0x00, 0x00,
}

func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsZoneName != that1.DnsZoneName {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	if !this.Rrset.Equal(that1.Rrset) {
		return false
	}
	return true
}
func (this *ReplaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceRequest)
	if !ok {
		that2, ok := that.(ReplaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsZoneName != that1.DnsZoneName {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	if this.RecordName != that1.RecordName {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Rrset.Equal(that1.Rrset) {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsZoneName != that1.DnsZoneName {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	if this.RecordName != that1.RecordName {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsZoneName != that1.DnsZoneName {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	if this.RecordName != that1.RecordName {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.DnsZoneName != that1.DnsZoneName {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	if this.RecordName != that1.RecordName {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Rrset.Equal(that1.Rrset) {
		return false
	}
	return true
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rrset.CreateRequest{")
	s = append(s, "DnsZoneName: "+fmt.Sprintf("%#v", this.DnsZoneName)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	if this.Rrset != nil {
		s = append(s, "Rrset: "+fmt.Sprintf("%#v", this.Rrset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rrset.ReplaceRequest{")
	s = append(s, "DnsZoneName: "+fmt.Sprintf("%#v", this.DnsZoneName)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	s = append(s, "RecordName: "+fmt.Sprintf("%#v", this.RecordName)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Rrset != nil {
		s = append(s, "Rrset: "+fmt.Sprintf("%#v", this.Rrset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rrset.GetRequest{")
	s = append(s, "DnsZoneName: "+fmt.Sprintf("%#v", this.DnsZoneName)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	s = append(s, "RecordName: "+fmt.Sprintf("%#v", this.RecordName)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rrset.DeleteRequest{")
	s = append(s, "DnsZoneName: "+fmt.Sprintf("%#v", this.DnsZoneName)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	s = append(s, "RecordName: "+fmt.Sprintf("%#v", this.RecordName)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&rrset.Response{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "DnsZoneName: "+fmt.Sprintf("%#v", this.DnsZoneName)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	s = append(s, "RecordName: "+fmt.Sprintf("%#v", this.RecordName)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Rrset != nil {
		s = append(s, "Rrset: "+fmt.Sprintf("%#v", this.Rrset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Create
	//
	// x-displayName: "Create"
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error)
	// Get
	//
	// x-displayName: "Get"
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
	// Replace
	//
	// x-displayName: "Replace"
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete
	//
	// x-displayName: "Delete"
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.rrset.CustomAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.rrset.CustomAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.rrset.CustomAPI/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.rrset.CustomAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Create
	//
	// x-displayName: "Create"
	Create(context.Context, *CreateRequest) (*Response, error)
	// Get
	//
	// x-displayName: "Get"
	Get(context.Context, *GetRequest) (*Response, error)
	// Replace
	//
	// x-displayName: "Replace"
	Replace(context.Context, *ReplaceRequest) (*Response, error)
	// Delete
	//
	// x-displayName: "Delete"
	Delete(context.Context, *DeleteRequest) (*Response, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) Create(ctx context.Context, req *CreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCustomAPIServer) Get(ctx context.Context, req *GetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomAPIServer) Replace(ctx context.Context, req *ReplaceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (*UnimplementedCustomAPIServer) Delete(ctx context.Context, req *DeleteRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.rrset.CustomAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.rrset.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.rrset.CustomAPI/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.rrset.CustomAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.dns_zone.rrset.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CustomAPI_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _CustomAPI_Replace_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CustomAPI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/dns_zone/rrset/public_customapi.proto",
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rrset != nil {
		{
			size, err := m.Rrset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DnsZoneName) > 0 {
		i -= len(m.DnsZoneName)
		copy(dAtA[i:], m.DnsZoneName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DnsZoneName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rrset != nil {
		{
			size, err := m.Rrset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecordName) > 0 {
		i -= len(m.RecordName)
		copy(dAtA[i:], m.RecordName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.RecordName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DnsZoneName) > 0 {
		i -= len(m.DnsZoneName)
		copy(dAtA[i:], m.DnsZoneName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DnsZoneName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecordName) > 0 {
		i -= len(m.RecordName)
		copy(dAtA[i:], m.RecordName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.RecordName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DnsZoneName) > 0 {
		i -= len(m.DnsZoneName)
		copy(dAtA[i:], m.DnsZoneName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DnsZoneName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecordName) > 0 {
		i -= len(m.RecordName)
		copy(dAtA[i:], m.RecordName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.RecordName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DnsZoneName) > 0 {
		i -= len(m.DnsZoneName)
		copy(dAtA[i:], m.DnsZoneName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DnsZoneName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rrset != nil {
		{
			size, err := m.Rrset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RecordName) > 0 {
		i -= len(m.RecordName)
		copy(dAtA[i:], m.RecordName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.RecordName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DnsZoneName) > 0 {
		i -= len(m.DnsZoneName)
		copy(dAtA[i:], m.DnsZoneName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DnsZoneName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DnsZoneName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Rrset != nil {
		l = m.Rrset.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ReplaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DnsZoneName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.RecordName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Rrset != nil {
		l = m.Rrset.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DnsZoneName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.RecordName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DnsZoneName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.RecordName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.DnsZoneName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.RecordName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Rrset != nil {
		l = m.Rrset.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`DnsZoneName:` + fmt.Sprintf("%v", this.DnsZoneName) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`Rrset:` + strings.Replace(fmt.Sprintf("%v", this.Rrset), "RRSet", "dns_zone.RRSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceRequest{`,
		`DnsZoneName:` + fmt.Sprintf("%v", this.DnsZoneName) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`RecordName:` + fmt.Sprintf("%v", this.RecordName) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Rrset:` + strings.Replace(fmt.Sprintf("%v", this.Rrset), "RRSet", "dns_zone.RRSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`DnsZoneName:` + fmt.Sprintf("%v", this.DnsZoneName) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`RecordName:` + fmt.Sprintf("%v", this.RecordName) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`DnsZoneName:` + fmt.Sprintf("%v", this.DnsZoneName) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`RecordName:` + fmt.Sprintf("%v", this.RecordName) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`DnsZoneName:` + fmt.Sprintf("%v", this.DnsZoneName) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`RecordName:` + fmt.Sprintf("%v", this.RecordName) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Rrset:` + strings.Replace(fmt.Sprintf("%v", this.Rrset), "RRSet", "dns_zone.RRSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rrset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rrset == nil {
				m.Rrset = &dns_zone.RRSet{}
			}
			if err := m.Rrset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rrset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rrset == nil {
				m.Rrset = &dns_zone.RRSet{}
			}
			if err := m.Rrset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rrset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rrset == nil {
				m.Rrset = &dns_zone.RRSet{}
			}
			if err := m.Rrset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

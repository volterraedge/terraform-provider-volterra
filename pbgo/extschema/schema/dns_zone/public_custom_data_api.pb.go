// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_zone/public_custom_data_api.proto

// DNS Zone
//
// x-displayName: "DNS Zone"
// DNS Zone Metrics

package dns_zone

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Labels
//
// x-displayName: "Labels"
// Labels is used to select one or more fields for the data
type Label int32

const (
	// x-displayName: "Country code"
	// Identifies the country code .
	COUNTRY_CODE Label = 0
	// x-displayName: "Domain"
	// Identifies the domain.
	DOMAIN Label = 1
	// x-displayName: "Query type"
	// Identifies the query type.
	QUERY_TYPE Label = 2
	// x-displayName: "Response code"
	// Identifies the response code.
	RESPONSE_CODE Label = 3
	// x-displayName: "Dns zone name"
	// Identifies the dns zone name.
	DNS_ZONE_NAME Label = 4
	// x-displayName: "Client subnet"
	// Identifies the client subnet.
	CLIENT_SUBNET Label = 5
)

var Label_name = map[int32]string{
	0: "COUNTRY_CODE",
	1: "DOMAIN",
	2: "QUERY_TYPE",
	3: "RESPONSE_CODE",
	4: "DNS_ZONE_NAME",
	5: "CLIENT_SUBNET",
}

var Label_value = map[string]int32{
	"COUNTRY_CODE":  0,
	"DOMAIN":        1,
	"QUERY_TYPE":    2,
	"RESPONSE_CODE": 3,
	"DNS_ZONE_NAME": 4,
	"CLIENT_SUBNET": 5,
}

func (Label) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{0}
}

// Query Type
//
// x-displayName: "Query Type"
// Query Type
type QueryType int32

const (
	// None
	//
	// x-displayName: "None"
	None QueryType = 0
	// A
	//
	// x-displayName: "A"
	A QueryType = 1
	// NS
	//
	// x-displayName: "NS"
	NS QueryType = 2
	// MD
	//
	// x-displayName: "MD"
	MD QueryType = 3
	// MF
	//
	// x-displayName: "MF"
	MF QueryType = 4
	// CNAME
	//
	// x-displayName: "CNAME"
	CNAME QueryType = 5
	// SOA
	//
	// x-displayName: "SOA"
	SOA QueryType = 6
	// MB
	//
	// x-displayName: "MB"
	MB QueryType = 7
	// MG
	//
	// x-displayName: "MG"
	MG QueryType = 8
	// MR
	//
	// x-displayName: "MR"
	MR QueryType = 9
	// NULL
	//
	// x-displayName: "NULL"
	NULL QueryType = 10
	// PTR
	//
	// x-displayName: "PTR"
	PTR QueryType = 12
	// HINFO
	//
	// x-displayName: "HINFO"
	HINFO QueryType = 13
	// MINFO
	//
	// x-displayName: "MINFO"
	MINFO QueryType = 14
	// MX
	//
	// x-displayName: "MX"
	MX QueryType = 15
	// TXT
	//
	// x-displayName: "TXT"
	TXT QueryType = 16
	// RP
	//
	// x-displayName: "RP"
	RP QueryType = 17
	// AFSDB
	//
	// x-displayName: "AFSDB"
	AFSDB QueryType = 18
	// X25
	//
	// x-displayName: "X25"
	X25 QueryType = 19
	// ISDN
	//
	// x-displayName: "ISDN"
	ISDN QueryType = 20
	// RT
	//
	// x-displayName: "RT"
	RT QueryType = 21
	// NSAPPTR
	//
	// x-displayName: "NSAPPTR"
	NSAPPTR QueryType = 23
	// SIG
	//
	// x-displayName: "SIG"
	SIG QueryType = 24
	// KEY
	//
	// x-displayName: "KEY"
	KEY QueryType = 25
	// PX
	//
	// x-displayName: "PX"
	PX QueryType = 26
	// GPOS
	//
	// x-displayName: "GPOS"
	GPOS QueryType = 27
	// AAAA
	//
	// x-displayName: "AAAA"
	AAAA QueryType = 28
	// LOC
	//
	// x-displayName: "LOC"
	LOC QueryType = 29
	// NXT
	//
	// x-displayName: "NXT"
	NXT QueryType = 30
	// EID
	//
	// x-displayName: "EID"
	EID QueryType = 31
	// NIMLOC
	//
	// x-displayName: "NIMLOC"
	NIMLOC QueryType = 32
	// SRV
	//
	// x-displayName: "SRV"
	SRV QueryType = 33
	// ATMA
	//
	// x-displayName: "ATMA"
	ATMA QueryType = 34
	// NAPTR
	//
	// x-displayName: "NAPTR"
	NAPTR QueryType = 35
	// KX
	//
	// x-displayName: "KX"
	KX QueryType = 36
	// CERT
	//
	// x-displayName: "CERT"
	CERT QueryType = 37
	// DNAME
	//
	// x-displayName: "DNAME"
	DNAME QueryType = 39
	// OPT
	//
	// x-displayName: "OPT"
	OPT QueryType = 41
	// APL
	//
	// x-displayName: "APL"
	APL QueryType = 42
	// DS
	//
	// x-displayName: "DS"
	DS QueryType = 43
	// SSHFP
	//
	// x-displayName: "SSHFP"
	SSHFP QueryType = 44
	// IPSECKEY
	//
	// x-displayName: "IPSECKEY"
	IPSECKEY QueryType = 45
	// RRSIG
	//
	// x-displayName: "RRSIG"
	RRSIG QueryType = 46
	// NSEC
	//
	// x-displayName: "NSEC"
	NSEC QueryType = 47
	// DNSKEY
	//
	// x-displayName: "DNSKEY"
	DNSKEY QueryType = 48
	// DHCID
	//
	// x-displayName: "DHCID"
	DHCID QueryType = 49
	// NSEC3
	//
	// x-displayName: "NSEC3"
	NSEC3 QueryType = 50
	// NSEC3PARAM
	//
	// x-displayName: "NSEC3PARAM"
	NSEC3PARAM QueryType = 51
	// TLSA
	//
	// x-displayName: "TLSA"
	TLSA QueryType = 52
	// SMIMEA
	//
	// x-displayName: "SMIMEA"
	SMIMEA QueryType = 53
	// HIP
	//
	// x-displayName: "HIP"
	HIP QueryType = 55
	// NINFO
	//
	// x-displayName: "NINFO"
	NINFO QueryType = 56
	// RKEY
	//
	// x-displayName: "RKEY"
	RKEY QueryType = 57
	// TALINK
	//
	// x-displayName: "TALINK"
	TALINK QueryType = 58
	// CDS
	//
	// x-displayName: "CDS"
	CDS QueryType = 59
	// CDNSKEY
	//
	// x-displayName: "CDNSKEY"
	CDNSKEY QueryType = 60
	// OPENPGPKEY
	//
	// x-displayName: "OPENPGPKEY"
	OPENPGPKEY QueryType = 61
	// CSYNC
	//
	// x-displayName: "CSYNC"
	CSYNC QueryType = 62
	// ZONEMD
	//
	// x-displayName: "ZONEMD"
	ZONEMD QueryType = 63
	// SVCB
	//
	// x-displayName: "SVCB"
	SVCB QueryType = 64
	// HTTPS
	//
	// x-displayName: "HTTPS"
	HTTPS QueryType = 65
	// SPF
	//
	// x-displayName: "SPF"
	SPF QueryType = 99
	// UINFO
	//
	// x-displayName: "UINFO"
	UINFO QueryType = 100
	// UID
	//
	// x-displayName: "UID"
	UID QueryType = 101
	// GID
	//
	// x-displayName: "GID"
	GID QueryType = 102
	// UNSPEC
	//
	// x-displayName: "UNSPEC"
	UNSPEC QueryType = 103
	// NID
	//
	// x-displayName: "NID"
	NID QueryType = 104
	// L32
	//
	// x-displayName: "L32"
	L32 QueryType = 105
	// L64
	//
	// x-displayName: "L64"
	L64 QueryType = 106
	// LP
	//
	// x-displayName: "LP"
	LP QueryType = 107
	// EUI48
	//
	// x-displayName: "EUI48"
	EUI48 QueryType = 108
	// EUI64
	//
	// x-displayName: "EUI64"
	EUI64 QueryType = 109
	// URI
	//
	// x-displayName: "URI"
	URI QueryType = 256
	// CAA
	//
	// x-displayName: "CAA"
	CAA QueryType = 257
	// AVC
	//
	// x-displayName: "AVC"
	AVC QueryType = 258
	// AMTRELAY
	//
	// x-displayName: "AMTRELAY"
	AMTRELAY QueryType = 260
	// IXFR
	//
	// x-displayName: "IXFR"
	IXFR QueryType = 251
	// AXFR
	//
	// x-displayName: "AXFR"
	AXFR QueryType = 252
	// MAILB
	//
	// x-displayName: "MAILB"
	MAILB QueryType = 253
	// MAILA
	//
	// x-displayName: "MAILA"
	MAILA QueryType = 254
	// ANY
	//
	// x-displayName: "ANY"
	ANY QueryType = 255
	// TA
	//
	// x-displayName: "TA"
	TA QueryType = 32768
	// DLV
	//
	// x-displayName: "DLV"
	DLV QueryType = 32769
)

var QueryType_name = map[int32]string{
	0:     "None",
	1:     "A",
	2:     "NS",
	3:     "MD",
	4:     "MF",
	5:     "CNAME",
	6:     "SOA",
	7:     "MB",
	8:     "MG",
	9:     "MR",
	10:    "NULL",
	12:    "PTR",
	13:    "HINFO",
	14:    "MINFO",
	15:    "MX",
	16:    "TXT",
	17:    "RP",
	18:    "AFSDB",
	19:    "X25",
	20:    "ISDN",
	21:    "RT",
	23:    "NSAPPTR",
	24:    "SIG",
	25:    "KEY",
	26:    "PX",
	27:    "GPOS",
	28:    "AAAA",
	29:    "LOC",
	30:    "NXT",
	31:    "EID",
	32:    "NIMLOC",
	33:    "SRV",
	34:    "ATMA",
	35:    "NAPTR",
	36:    "KX",
	37:    "CERT",
	39:    "DNAME",
	41:    "OPT",
	42:    "APL",
	43:    "DS",
	44:    "SSHFP",
	45:    "IPSECKEY",
	46:    "RRSIG",
	47:    "NSEC",
	48:    "DNSKEY",
	49:    "DHCID",
	50:    "NSEC3",
	51:    "NSEC3PARAM",
	52:    "TLSA",
	53:    "SMIMEA",
	55:    "HIP",
	56:    "NINFO",
	57:    "RKEY",
	58:    "TALINK",
	59:    "CDS",
	60:    "CDNSKEY",
	61:    "OPENPGPKEY",
	62:    "CSYNC",
	63:    "ZONEMD",
	64:    "SVCB",
	65:    "HTTPS",
	99:    "SPF",
	100:   "UINFO",
	101:   "UID",
	102:   "GID",
	103:   "UNSPEC",
	104:   "NID",
	105:   "L32",
	106:   "L64",
	107:   "LP",
	108:   "EUI48",
	109:   "EUI64",
	256:   "URI",
	257:   "CAA",
	258:   "AVC",
	260:   "AMTRELAY",
	251:   "IXFR",
	252:   "AXFR",
	253:   "MAILB",
	254:   "MAILA",
	255:   "ANY",
	32768: "TA",
	32769: "DLV",
}

var QueryType_value = map[string]int32{
	"None":       0,
	"A":          1,
	"NS":         2,
	"MD":         3,
	"MF":         4,
	"CNAME":      5,
	"SOA":        6,
	"MB":         7,
	"MG":         8,
	"MR":         9,
	"NULL":       10,
	"PTR":        12,
	"HINFO":      13,
	"MINFO":      14,
	"MX":         15,
	"TXT":        16,
	"RP":         17,
	"AFSDB":      18,
	"X25":        19,
	"ISDN":       20,
	"RT":         21,
	"NSAPPTR":    23,
	"SIG":        24,
	"KEY":        25,
	"PX":         26,
	"GPOS":       27,
	"AAAA":       28,
	"LOC":        29,
	"NXT":        30,
	"EID":        31,
	"NIMLOC":     32,
	"SRV":        33,
	"ATMA":       34,
	"NAPTR":      35,
	"KX":         36,
	"CERT":       37,
	"DNAME":      39,
	"OPT":        41,
	"APL":        42,
	"DS":         43,
	"SSHFP":      44,
	"IPSECKEY":   45,
	"RRSIG":      46,
	"NSEC":       47,
	"DNSKEY":     48,
	"DHCID":      49,
	"NSEC3":      50,
	"NSEC3PARAM": 51,
	"TLSA":       52,
	"SMIMEA":     53,
	"HIP":        55,
	"NINFO":      56,
	"RKEY":       57,
	"TALINK":     58,
	"CDS":        59,
	"CDNSKEY":    60,
	"OPENPGPKEY": 61,
	"CSYNC":      62,
	"ZONEMD":     63,
	"SVCB":       64,
	"HTTPS":      65,
	"SPF":        99,
	"UINFO":      100,
	"UID":        101,
	"GID":        102,
	"UNSPEC":     103,
	"NID":        104,
	"L32":        105,
	"L64":        106,
	"LP":         107,
	"EUI48":      108,
	"EUI64":      109,
	"URI":        256,
	"CAA":        257,
	"AVC":        258,
	"AMTRELAY":   260,
	"IXFR":       251,
	"AXFR":       252,
	"MAILB":      253,
	"MAILA":      254,
	"ANY":        255,
	"TA":         32768,
	"DLV":        32769,
}

func (QueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{1}
}

// Response Code
//
// x-displayName: "Response Code"
// Response Code
type ResponseCode int32

const (
	// NOERROR
	//
	// x-displayName: "NOERROR"
	NOERROR ResponseCode = 0
	// FORMERR
	//
	// x-displayName: "FORMERR"
	FORMERR ResponseCode = 1
	// SERVFAIL
	//
	// x-displayName: "SERVFAIL"
	SERVFAIL ResponseCode = 2
	// NXDOMAIN
	//
	// x-displayName: "NXDOMAIN"
	NXDOMAIN ResponseCode = 3
	// REFUSED
	//
	// x-displayName: "REFUSED"
	REFUSED ResponseCode = 5
	// NOTAUTH
	//
	// x-displayName: "NOTAUTH"
	NOTAUTH ResponseCode = 9
)

var ResponseCode_name = map[int32]string{
	0: "NOERROR",
	1: "FORMERR",
	2: "SERVFAIL",
	3: "NXDOMAIN",
	5: "REFUSED",
	9: "NOTAUTH",
}

var ResponseCode_value = map[string]int32{
	"NOERROR":  0,
	"FORMERR":  1,
	"SERVFAIL": 2,
	"NXDOMAIN": 3,
	"REFUSED":  5,
	"NOTAUTH":  9,
}

func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{2}
}

// Dns Zone Metrics Request
//
// x-displayName: "Dns Zone Metrics Request"
type DnsZoneMetricsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Namespace is always system for dns_zone
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Filter"
	// x-example: "{COUNTRY_CODE=\"CH\"}"
	// filter is used to specify the list of matchers
	// syntax for filter := {[<matcher>]}
	// <matcher> := <label><operator>"<value>"
	//   <label> := string
	//     One or more labels defined in Label can be specified in the filter.
	//   <value> := string
	//   <operator> := ["="|"!="]
	//     =  : equal to
	//     != : not equal to
	//
	// Optional: If not specified, counter will be aggregated based on the group_by labels.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by labels specified in the group_by field
	GroupBy []Label `protobuf:"varint,4,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.dns_zone.Label" json:"group_by,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570194000"
	// start time of flow collection
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570197600"
	// end time of flow collection
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// sort order
	//
	// x-displayName: "Sort Order"
	// specifies whether the response should be sorted in ascending or descending order based on timestamp in the log
	// Optional: default is descending order
	Sort schema.SortOrder `protobuf:"varint,8,opt,name=sort,proto3,enum=ves.io.schema.SortOrder" json:"sort,omitempty"`
	// Limit
	//
	// x-displayName: "Limit"
	// x-example: "10"
	// Limits the number of domain or query types returned in the response
	// Default 10
	Limit uint32 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,10,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *DnsZoneMetricsRequest) Reset()      { *m = DnsZoneMetricsRequest{} }
func (*DnsZoneMetricsRequest) ProtoMessage() {}
func (*DnsZoneMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{0}
}
func (m *DnsZoneMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsZoneMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DnsZoneMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DnsZoneMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsZoneMetricsRequest.Merge(m, src)
}
func (m *DnsZoneMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DnsZoneMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsZoneMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DnsZoneMetricsRequest proto.InternalMessageInfo

func (m *DnsZoneMetricsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DnsZoneMetricsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *DnsZoneMetricsRequest) GetGroupBy() []Label {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *DnsZoneMetricsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *DnsZoneMetricsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *DnsZoneMetricsRequest) GetSort() schema.SortOrder {
	if m != nil {
		return m.Sort
	}
	return schema.DESCENDING
}

func (m *DnsZoneMetricsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DnsZoneMetricsRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// Dns Zone Metrics Response
//
// x-displayName: "Dns Zone Metrics Response"
type DnsZoneMetricsResponse struct {
	// Data
	//
	// x-displayName: "Data"
	// Metrics Data wraps the response for the dns zone metrics request
	Data []*MetricsData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "30m"
	// Actual step size used in the response.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	// total hits
	//
	// x-displayName: "Total Hits"
	// x-example: "100"
	// total number of log messages that matched the query.
	TotalHits uint64 `protobuf:"varint,3,opt,name=total_hits,json=totalHits,proto3" json:"total_hits,omitempty"`
}

func (m *DnsZoneMetricsResponse) Reset()      { *m = DnsZoneMetricsResponse{} }
func (*DnsZoneMetricsResponse) ProtoMessage() {}
func (*DnsZoneMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{1}
}
func (m *DnsZoneMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsZoneMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DnsZoneMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DnsZoneMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsZoneMetricsResponse.Merge(m, src)
}
func (m *DnsZoneMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DnsZoneMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsZoneMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DnsZoneMetricsResponse proto.InternalMessageInfo

func (m *DnsZoneMetricsResponse) GetData() []*MetricsData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DnsZoneMetricsResponse) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *DnsZoneMetricsResponse) GetTotalHits() uint64 {
	if m != nil {
		return m.TotalHits
	}
	return 0
}

// DnsZoneRequestLogRequest
//
// x-displayName: "Dns Zone Request Log Request"
// Request to fetch request logs.
type DnsZoneRequestLogRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// fetch request logs for a given namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Filter"
	// x-example: "{COUNTRY_CODE=\"CH\"}"
	// filter is used to specify the list of matchers
	// syntax for filter := {[<matcher>]}
	// <matcher> := <label><operator>"<value>"
	//   <label> := string
	//     One or more labels defined in Label can be specified in the filter.
	//   <value> := string
	//   <operator> := ["="|"!="]
	//     =  : equal to
	//     != : not equal to
	//
	// Optional: If not specified, counter will be aggregated based on the group_by labels.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// start time
	//
	// x-displayName: "Start Time"
	// x-example: "2019-09-23T12:30:11.733Z"
	// fetch request logs whose timestamp >= start_time
	// format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end time
	//
	// x-displayName: "End Time"
	// x-example: "2019-09-24T12:30:11.733Z"
	// fetch request logs whose timestamp <= end_time
	// format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// sort order
	//
	// x-displayName: "Sort Order"
	// specifies whether the response should be sorted in ascending or descending order based on timestamp in the log
	// Optional: default is descending order
	Sort schema.SortOrder `protobuf:"varint,5,opt,name=sort,proto3,enum=ves.io.schema.SortOrder" json:"sort,omitempty"`
	// limit
	//
	// x-displayName: "Limit"
	// x-example: "0"
	// limits the number of logs returned in the response
	// Optional: If not specified, first or last 500 log messages that matches the query (depending on the sort order) will be returned in the response.
	//           The maximum value for limit is 500.
	Limit uint32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *DnsZoneRequestLogRequest) Reset()      { *m = DnsZoneRequestLogRequest{} }
func (*DnsZoneRequestLogRequest) ProtoMessage() {}
func (*DnsZoneRequestLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{2}
}
func (m *DnsZoneRequestLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsZoneRequestLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DnsZoneRequestLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DnsZoneRequestLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsZoneRequestLogRequest.Merge(m, src)
}
func (m *DnsZoneRequestLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *DnsZoneRequestLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsZoneRequestLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DnsZoneRequestLogRequest proto.InternalMessageInfo

func (m *DnsZoneRequestLogRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DnsZoneRequestLogRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *DnsZoneRequestLogRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *DnsZoneRequestLogRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *DnsZoneRequestLogRequest) GetSort() schema.SortOrder {
	if m != nil {
		return m.Sort
	}
	return schema.DESCENDING
}

func (m *DnsZoneRequestLogRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// DnsZoneRequestLogResponse
//
// x-displayName: "Dns Zone Log Response"
// Response message for RequestLogRequest
type DnsZoneRequestLogResponse struct {
	// logs
	//
	// x-displayName: "Logs"
	// x-example: "value"
	// list of log messages that matched the query. Not all log messages that matched the query are returned in the response.
	Logs []*DnsZoneRequestLogsResponseData `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// total hits
	//
	// x-displayName: "Total Hits"
	// x-example: "100"
	// total number of log messages that matched the query.
	TotalHits uint64 `protobuf:"varint,2,opt,name=total_hits,json=totalHits,proto3" json:"total_hits,omitempty"`
}

func (m *DnsZoneRequestLogResponse) Reset()      { *m = DnsZoneRequestLogResponse{} }
func (*DnsZoneRequestLogResponse) ProtoMessage() {}
func (*DnsZoneRequestLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{3}
}
func (m *DnsZoneRequestLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsZoneRequestLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DnsZoneRequestLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DnsZoneRequestLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsZoneRequestLogResponse.Merge(m, src)
}
func (m *DnsZoneRequestLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *DnsZoneRequestLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsZoneRequestLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DnsZoneRequestLogResponse proto.InternalMessageInfo

func (m *DnsZoneRequestLogResponse) GetLogs() []*DnsZoneRequestLogsResponseData {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *DnsZoneRequestLogResponse) GetTotalHits() uint64 {
	if m != nil {
		return m.TotalHits
	}
	return 0
}

// Metrics Data
//
// x-displayName: "Metrics Data"
// Metrics Data contains key/value pairs that uniquely identifies the group_by labels specified in the request.
type MetricsData struct {
	// Labels
	//
	// x-displayName: "Labels"
	// Labels contains the name/value pair.
	// "name" is the label defined in Labels
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Value
	//
	// x-displayName: "Value"
	// List of metric values.
	Value []*schema.MetricValue `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricsData) Reset()      { *m = MetricsData{} }
func (*MetricsData) ProtoMessage() {}
func (*MetricsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{4}
}
func (m *MetricsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsData.Merge(m, src)
}
func (m *MetricsData) XXX_Size() int {
	return m.Size()
}
func (m *MetricsData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsData.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsData proto.InternalMessageInfo

func (m *MetricsData) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricsData) GetValue() []*schema.MetricValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Dns Zone Request Logs data item
//
// x-displayName: "Dns Zone Request log data item"
// Dns Zone Request-Log item
type DnsZoneRequestLogsResponseData struct {
	// Timestamp
	//
	// x-displayName: "Timestamp of the request log"
	// x-example: "2022-10-21T01:05:32.713Z"
	// x-required
	// Format: unix_timestamp|rfc 3339
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Country code
	//
	// x-displayName: "Country code"
	// x-example: "FRA"
	// Country Code
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "www.example.com"
	// Domain
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Query type
	//
	// x-displayName: "Query type"
	// x-example: "AAAA"
	// Query Type
	QueryType string `protobuf:"bytes,4,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	// Response code
	//
	// x-displayName: "Response code"
	// x-example: "NOERROR"
	// Response Code
	ResponseCode string `protobuf:"bytes,5,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// Client subnet
	//
	// x-displayName: "Client subnet"
	// x-example: "1.2.3.4"
	// Client Subnet
	ClientSubnet string `protobuf:"bytes,6,opt,name=client_subnet,json=clientSubnet,proto3" json:"client_subnet,omitempty"`
	// Dns zone name
	//
	// x-displayName: "Dns zone name"
	// x-example: "abc.com"
	// Identifies the dns zone name.
	DnsZoneName string `protobuf:"bytes,7,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
}

func (m *DnsZoneRequestLogsResponseData) Reset()      { *m = DnsZoneRequestLogsResponseData{} }
func (*DnsZoneRequestLogsResponseData) ProtoMessage() {}
func (*DnsZoneRequestLogsResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7feea21366f27619, []int{5}
}
func (m *DnsZoneRequestLogsResponseData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsZoneRequestLogsResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DnsZoneRequestLogsResponseData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DnsZoneRequestLogsResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsZoneRequestLogsResponseData.Merge(m, src)
}
func (m *DnsZoneRequestLogsResponseData) XXX_Size() int {
	return m.Size()
}
func (m *DnsZoneRequestLogsResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsZoneRequestLogsResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_DnsZoneRequestLogsResponseData proto.InternalMessageInfo

func (m *DnsZoneRequestLogsResponseData) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *DnsZoneRequestLogsResponseData) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *DnsZoneRequestLogsResponseData) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DnsZoneRequestLogsResponseData) GetQueryType() string {
	if m != nil {
		return m.QueryType
	}
	return ""
}

func (m *DnsZoneRequestLogsResponseData) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *DnsZoneRequestLogsResponseData) GetClientSubnet() string {
	if m != nil {
		return m.ClientSubnet
	}
	return ""
}

func (m *DnsZoneRequestLogsResponseData) GetDnsZoneName() string {
	if m != nil {
		return m.DnsZoneName
	}
	return ""
}

func init() {
	proto.RegisterEnum("ves.io.schema.dns_zone.Label", Label_name, Label_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.Label", Label_name, Label_value)
	proto.RegisterEnum("ves.io.schema.dns_zone.QueryType", QueryType_name, QueryType_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.QueryType", QueryType_name, QueryType_value)
	proto.RegisterEnum("ves.io.schema.dns_zone.ResponseCode", ResponseCode_name, ResponseCode_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.ResponseCode", ResponseCode_name, ResponseCode_value)
	proto.RegisterType((*DnsZoneMetricsRequest)(nil), "ves.io.schema.dns_zone.DnsZoneMetricsRequest")
	golang_proto.RegisterType((*DnsZoneMetricsRequest)(nil), "ves.io.schema.dns_zone.DnsZoneMetricsRequest")
	proto.RegisterType((*DnsZoneMetricsResponse)(nil), "ves.io.schema.dns_zone.DnsZoneMetricsResponse")
	golang_proto.RegisterType((*DnsZoneMetricsResponse)(nil), "ves.io.schema.dns_zone.DnsZoneMetricsResponse")
	proto.RegisterType((*DnsZoneRequestLogRequest)(nil), "ves.io.schema.dns_zone.DnsZoneRequestLogRequest")
	golang_proto.RegisterType((*DnsZoneRequestLogRequest)(nil), "ves.io.schema.dns_zone.DnsZoneRequestLogRequest")
	proto.RegisterType((*DnsZoneRequestLogResponse)(nil), "ves.io.schema.dns_zone.DnsZoneRequestLogResponse")
	golang_proto.RegisterType((*DnsZoneRequestLogResponse)(nil), "ves.io.schema.dns_zone.DnsZoneRequestLogResponse")
	proto.RegisterType((*MetricsData)(nil), "ves.io.schema.dns_zone.MetricsData")
	golang_proto.RegisterType((*MetricsData)(nil), "ves.io.schema.dns_zone.MetricsData")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.dns_zone.MetricsData.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.dns_zone.MetricsData.LabelsEntry")
	proto.RegisterType((*DnsZoneRequestLogsResponseData)(nil), "ves.io.schema.dns_zone.DnsZoneRequestLogsResponseData")
	golang_proto.RegisterType((*DnsZoneRequestLogsResponseData)(nil), "ves.io.schema.dns_zone.DnsZoneRequestLogsResponseData")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_zone/public_custom_data_api.proto", fileDescriptor_7feea21366f27619)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_zone/public_custom_data_api.proto", fileDescriptor_7feea21366f27619)
}

var fileDescriptor_7feea21366f27619 = []byte{
	// 1772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcf, 0x73, 0xdb, 0xc6,
	0x15, 0xe6, 0x82, 0xa4, 0x24, 0xae, 0x24, 0xe7, 0x05, 0x4d, 0x5c, 0x5a, 0xb1, 0x59, 0x86, 0xae,
	0xa7, 0x8a, 0x62, 0x92, 0xb2, 0x64, 0x39, 0x8e, 0xfa, 0x13, 0x22, 0x21, 0x09, 0x35, 0x09, 0x22,
	0x0b, 0x50, 0x23, 0xf9, 0xc2, 0x81, 0xc8, 0x15, 0x8d, 0x98, 0x04, 0x18, 0x00, 0x54, 0xa3, 0x76,
	0x3a, 0xa3, 0x78, 0x3a, 0x3e, 0x67, 0xa6, 0x97, 0x1e, 0x73, 0xec, 0x9f, 0xd0, 0xa9, 0x2f, 0x9e,
	0xe9, 0x21, 0x39, 0x65, 0x3c, 0xed, 0x25, 0xd3, 0xe9, 0xa1, 0x96, 0x7b, 0x68, 0x7b, 0xf2, 0x74,
	0x72, 0xeb, 0xaf, 0xcc, 0x5b, 0x80, 0x8a, 0x28, 0xc7, 0x8e, 0x72, 0xc2, 0xdb, 0xf7, 0xbe, 0xf7,
	0xbd, 0xdd, 0xf7, 0x3d, 0x82, 0x0b, 0xba, 0xbc, 0xcf, 0x83, 0x92, 0xe3, 0x95, 0x83, 0xf6, 0x1d,
	0xde, 0xb7, 0xcb, 0x1d, 0x37, 0x68, 0xfd, 0xdc, 0x73, 0x79, 0x79, 0x30, 0xdc, 0xed, 0x39, 0xed,
	0x56, 0x7b, 0x18, 0x84, 0x5e, 0xbf, 0xd5, 0xb1, 0x43, 0xbb, 0x65, 0x0f, 0x9c, 0xd2, 0xc0, 0xf7,
	0x42, 0x4f, 0x3e, 0x1f, 0x25, 0x95, 0xa2, 0xa4, 0xd2, 0x28, 0x69, 0xae, 0xd8, 0x75, 0xc2, 0x3b,
	0xc3, 0xdd, 0x52, 0xdb, 0xeb, 0x97, 0xbb, 0x5e, 0xd7, 0x2b, 0x0b, 0xf8, 0xee, 0x70, 0x4f, 0xac,
	0xc4, 0x42, 0x58, 0x11, 0xcd, 0xdc, 0xc5, 0xae, 0xe7, 0x75, 0x7b, 0xbc, 0x6c, 0x0f, 0x9c, 0xb2,
	0xed, 0xba, 0x5e, 0x68, 0x87, 0x8e, 0xe7, 0x06, 0x71, 0xf4, 0xd2, 0xf8, 0xce, 0x7a, 0x5e, 0xb7,
	0x1c, 0x1e, 0x0c, 0xf8, 0x28, 0xfc, 0xda, 0x78, 0xd8, 0x1b, 0x9c, 0xcc, 0xbd, 0x30, 0x1e, 0x3c,
	0x99, 0x77, 0x71, 0x3c, 0xb4, 0x6f, 0xf7, 0x9c, 0x8e, 0x1d, 0xf2, 0x38, 0x5a, 0x38, 0x15, 0xe5,
	0x01, 0x77, 0xf7, 0x4f, 0x91, 0xe7, 0x4f, 0x61, 0x1c, 0xfe, 0xb3, 0xd6, 0x18, 0xa2, 0xf0, 0xa9,
	0x44, 0x5f, 0xad, 0xba, 0xc1, 0x6d, 0xcf, 0xe5, 0x75, 0x1e, 0xfa, 0x4e, 0x3b, 0x60, 0xfc, 0xbd,
	0x21, 0x0f, 0x42, 0xf9, 0x22, 0xcd, 0xb8, 0x76, 0x9f, 0x07, 0x03, 0xbb, 0xcd, 0xb3, 0x24, 0x4f,
	0xe6, 0x33, 0xec, 0x4b, 0x87, 0x7c, 0x9e, 0x4e, 0xec, 0x39, 0xbd, 0x90, 0xfb, 0xd9, 0xa4, 0x08,
	0xc5, 0x2b, 0xf9, 0x26, 0x9d, 0xea, 0xfa, 0xde, 0x70, 0xd0, 0xda, 0x3d, 0xc8, 0xa6, 0xf2, 0xc9,
	0xf9, 0x73, 0x4b, 0x97, 0x4a, 0x5f, 0x2d, 0x41, 0xa9, 0x66, 0xef, 0xf2, 0x1e, 0x9b, 0x14, 0xf0,
	0xb5, 0x03, 0xf9, 0x0d, 0x4a, 0x83, 0xd0, 0xf6, 0xc3, 0x56, 0xe8, 0xf4, 0x79, 0x76, 0x02, 0x59,
	0xd7, 0xe8, 0xef, 0xff, 0xf1, 0x30, 0x99, 0xf6, 0x93, 0xbf, 0x49, 0x11, 0x96, 0x11, 0x51, 0xcb,
	0xe9, 0x73, 0xf9, 0x0a, 0x9d, 0xe2, 0x6e, 0x27, 0x02, 0x4e, 0x3e, 0x03, 0x9c, 0xe4, 0x6e, 0x47,
	0xc0, 0xae, 0xd2, 0x54, 0xe0, 0xf9, 0x61, 0x76, 0x2a, 0x4f, 0xe6, 0xcf, 0x2d, 0x65, 0x4f, 0xed,
	0xc3, 0xf4, 0xfc, 0xb0, 0xe1, 0x77, 0xb8, 0xcf, 0x04, 0x4a, 0xbe, 0x42, 0xd3, 0x3d, 0xa7, 0xef,
	0x84, 0xd9, 0x4c, 0x9e, 0xcc, 0xcf, 0xae, 0xbd, 0xf4, 0xe7, 0x07, 0x44, 0xba, 0xb6, 0x88, 0xbc,
	0xa9, 0x05, 0x29, 0xdb, 0x61, 0x51, 0x54, 0xce, 0xd1, 0x54, 0x10, 0xf2, 0x41, 0x96, 0x8e, 0xd5,
	0xfd, 0x28, 0x45, 0x98, 0xf0, 0x17, 0x3e, 0x24, 0xf4, 0xfc, 0xe9, 0x86, 0x06, 0x03, 0xcf, 0x0d,
	0xb8, 0xfc, 0x16, 0x4d, 0xe1, 0x74, 0x66, 0x49, 0x3e, 0x39, 0x3f, 0xbd, 0x74, 0xf9, 0x79, 0x7d,
	0x89, 0xd3, 0xaa, 0x76, 0x68, 0x33, 0x91, 0x70, 0x5c, 0x53, 0x1a, 0xab, 0xf9, 0x54, 0x8a, 0x6b,
	0xca, 0x97, 0x28, 0x0d, 0xbd, 0xd0, 0xee, 0xb5, 0xee, 0x38, 0x61, 0x20, 0x04, 0x49, 0xb1, 0x8c,
	0xf0, 0x6c, 0x3a, 0x61, 0x50, 0xf8, 0x17, 0xa1, 0xd9, 0x78, 0x4b, 0xb1, 0xb8, 0x35, 0xaf, 0xfb,
	0x4d, 0x65, 0x96, 0xc6, 0x64, 0x1e, 0x17, 0x2b, 0x79, 0x56, 0xb1, 0x52, 0x5f, 0x2f, 0x56, 0xfa,
	0x4c, 0x62, 0xe5, 0x47, 0x62, 0x4d, 0x08, 0xb1, 0x22, 0xc6, 0x85, 0x64, 0xf6, 0xf3, 0x64, 0xac,
	0x53, 0xe1, 0x3e, 0xa1, 0x17, 0xbe, 0xe2, 0xd0, 0xb1, 0x14, 0x3f, 0xa5, 0xa9, 0x9e, 0xd7, 0x0d,
	0x62, 0x29, 0x6e, 0x3c, 0x4f, 0x8a, 0x67, 0x08, 0x8e, 0xc5, 0x8c, 0xd4, 0x41, 0x8e, 0x53, 0xdd,
	0x97, 0x4e, 0x77, 0xff, 0x0f, 0x84, 0x4e, 0x9f, 0x90, 0x54, 0xde, 0xa0, 0x13, 0x3d, 0x9c, 0xfc,
	0x51, 0xf1, 0xf2, 0x19, 0xe6, 0x20, 0xfa, 0xad, 0x04, 0xaa, 0x1b, 0xfa, 0x07, 0x2c, 0x4e, 0x97,
	0x17, 0x69, 0x7a, 0xdf, 0xee, 0x0d, 0x79, 0x56, 0x12, 0x3c, 0x73, 0xa7, 0x78, 0xa2, 0xf4, 0x2d,
	0x44, 0xb0, 0x08, 0x38, 0xf7, 0x36, 0x9d, 0x3e, 0x41, 0x24, 0x03, 0x4d, 0xde, 0xe5, 0x07, 0xb1,
	0xe8, 0x68, 0xca, 0xaf, 0x7c, 0x49, 0x89, 0xbe, 0x68, 0xb1, 0x2a, 0xdd, 0x24, 0x85, 0xfb, 0x12,
	0xcd, 0xbd, 0xb8, 0x1b, 0x38, 0x49, 0x28, 0x72, 0x10, 0xda, 0xfd, 0xc1, 0x68, 0x92, 0x8e, 0x1d,
	0xf2, 0xeb, 0x74, 0xa6, 0xed, 0x0d, 0xb1, 0x6e, 0xab, 0xed, 0x75, 0x46, 0x15, 0xa6, 0x63, 0x5f,
	0xc5, 0xeb, 0x88, 0x61, 0xeb, 0x78, 0x7d, 0xdb, 0x71, 0x47, 0xef, 0x94, 0x68, 0x85, 0x0d, 0x7e,
	0x6f, 0xc8, 0xfd, 0x83, 0x16, 0xbe, 0x1c, 0xa3, 0x19, 0x62, 0x19, 0xe1, 0xb1, 0x0e, 0x06, 0x5c,
	0xbe, 0x4c, 0x67, 0xfd, 0x78, 0x1f, 0x11, 0x75, 0x5a, 0x20, 0x66, 0x46, 0x4e, 0xc1, 0x7d, 0x99,
	0xce, 0xb6, 0x7b, 0x0e, 0x77, 0xc3, 0x56, 0x30, 0xdc, 0x75, 0x79, 0x34, 0x38, 0x19, 0x36, 0x13,
	0x39, 0x4d, 0xe1, 0x93, 0x0b, 0x74, 0x76, 0xd4, 0xfd, 0x16, 0xfe, 0x06, 0xa2, 0x97, 0x0b, 0x9b,
	0xee, 0x44, 0x07, 0xd7, 0xed, 0x3e, 0x5f, 0x70, 0x69, 0x5a, 0xf4, 0x50, 0x06, 0x3a, 0x53, 0x69,
	0x34, 0x75, 0x8b, 0xed, 0xb4, 0x2a, 0x8d, 0xaa, 0x0a, 0x09, 0x99, 0xd2, 0x89, 0x6a, 0xa3, 0xae,
	0x68, 0x3a, 0x10, 0xf9, 0x1c, 0xa5, 0xef, 0x34, 0x55, 0xb6, 0xd3, 0xb2, 0x76, 0x0c, 0x15, 0x24,
	0xf9, 0x65, 0x3a, 0xcb, 0x54, 0xd3, 0x68, 0xe8, 0xa6, 0x1a, 0xc1, 0x93, 0xe8, 0xaa, 0xea, 0x66,
	0xeb, 0x76, 0x43, 0x57, 0x5b, 0xba, 0x52, 0x57, 0x21, 0x85, 0xae, 0x4a, 0x4d, 0x53, 0x75, 0xab,
	0x65, 0x36, 0xd7, 0x74, 0xd5, 0x82, 0xf4, 0xc2, 0x5f, 0x26, 0x68, 0xe6, 0x9d, 0xe3, 0xb3, 0x4e,
	0xd1, 0x94, 0xee, 0xb9, 0x1c, 0x12, 0x72, 0x9a, 0x12, 0x05, 0x88, 0x3c, 0x41, 0x25, 0xdd, 0x04,
	0x09, 0x9f, 0xf5, 0x2a, 0x24, 0xc5, 0x73, 0x1d, 0x52, 0x72, 0x86, 0xa6, 0x2b, 0x82, 0x34, 0x2d,
	0x4f, 0xd2, 0xa4, 0xd9, 0x50, 0x60, 0x42, 0xc4, 0xd6, 0x60, 0x52, 0x3c, 0x37, 0x60, 0x4a, 0x3c,
	0x19, 0x64, 0x04, 0x69, 0xb3, 0x56, 0x03, 0x8a, 0x50, 0xc3, 0x62, 0x30, 0x83, 0xe9, 0x9b, 0x9a,
	0xbe, 0xde, 0x80, 0x59, 0x34, 0xeb, 0xc2, 0x3c, 0x27, 0x12, 0xb6, 0xe1, 0x25, 0x84, 0x59, 0xdb,
	0x16, 0x00, 0x3a, 0x98, 0x01, 0x2f, 0x23, 0x46, 0x59, 0x37, 0xab, 0x6b, 0x20, 0x63, 0x6c, 0x7b,
	0x69, 0x05, 0xbe, 0x85, 0xac, 0x9a, 0x59, 0xd5, 0xe1, 0x15, 0x81, 0xb2, 0xe0, 0x55, 0x79, 0x9a,
	0x4e, 0xea, 0xa6, 0x62, 0x60, 0x85, 0x6f, 0x8b, 0x5d, 0x69, 0x1b, 0x90, 0x45, 0xe3, 0x96, 0xba,
	0x03, 0x17, 0x10, 0x66, 0x6c, 0xc3, 0x1c, 0x26, 0x6e, 0x18, 0x0d, 0x13, 0x5e, 0x43, 0x4b, 0x51,
	0x14, 0x05, 0x2e, 0x22, 0xa8, 0xd6, 0xa8, 0xc0, 0x25, 0x34, 0xf4, 0x6d, 0x0b, 0x72, 0x68, 0xa8,
	0x5a, 0x15, 0xbe, 0x83, 0x5d, 0xd7, 0xb5, 0x3a, 0x46, 0xf3, 0x82, 0x94, 0x6d, 0xc1, 0xeb, 0x22,
	0xd3, 0xaa, 0x2b, 0x50, 0xc0, 0xad, 0xe9, 0x0a, 0x96, 0xbc, 0x8c, 0x05, 0x6e, 0x6d, 0xc3, 0x77,
	0x31, 0x58, 0x51, 0x99, 0x05, 0x57, 0x30, 0x58, 0x15, 0x5d, 0xfa, 0x1e, 0xa6, 0x36, 0x0c, 0x0b,
	0xde, 0x40, 0x43, 0x31, 0x6a, 0xb0, 0x80, 0xf0, 0xaa, 0x09, 0x6f, 0x22, 0xc8, 0x34, 0x37, 0xd7,
	0x0d, 0xb8, 0x2a, 0xcf, 0xd0, 0x29, 0xcd, 0x30, 0xd5, 0x0a, 0x6e, 0xb8, 0x88, 0x01, 0xc6, 0xf0,
	0x10, 0x25, 0xd1, 0x42, 0x53, 0xad, 0x40, 0x59, 0x0c, 0x81, 0x6e, 0x22, 0x60, 0x51, 0xd0, 0x6f,
	0x56, 0xb4, 0x2a, 0x5c, 0x13, 0xdb, 0x30, 0xd5, 0xca, 0x32, 0x2c, 0xe1, 0x68, 0x08, 0xd3, 0x50,
	0x98, 0x52, 0x87, 0x65, 0xcc, 0xb5, 0x6a, 0xa6, 0x02, 0xd7, 0x31, 0xd7, 0xac, 0x6b, 0x75, 0x55,
	0x81, 0x15, 0xdc, 0xc6, 0xa6, 0x66, 0xc0, 0x5b, 0x22, 0x53, 0xf4, 0xff, 0x26, 0x22, 0x19, 0x32,
	0xbf, 0x8d, 0x48, 0x4b, 0xa9, 0x69, 0xfa, 0x2d, 0x58, 0x45, 0x64, 0xa5, 0x6a, 0xc2, 0xf7, 0xb1,
	0xbf, 0x95, 0xb8, 0xf6, 0x0f, 0xb0, 0x4a, 0xc3, 0x50, 0x75, 0x63, 0xc3, 0xc0, 0xf5, 0x0f, 0xc5,
	0x40, 0x98, 0x3b, 0x7a, 0x05, 0x7e, 0x84, 0xc9, 0x38, 0x74, 0xf5, 0x2a, 0xfc, 0x18, 0x29, 0xcd,
	0xad, 0xca, 0x1a, 0xfc, 0x44, 0x48, 0x6e, 0x59, 0x86, 0x09, 0x8a, 0x68, 0xa3, 0xb1, 0x0e, 0x6d,
	0xf4, 0x35, 0x45, 0xed, 0x0e, 0xfa, 0x9a, 0x5a, 0x15, 0x38, 0x1a, 0x1b, 0x5a, 0x15, 0xf6, 0x90,
	0xa6, 0xa9, 0x9b, 0x86, 0x5a, 0x81, 0xae, 0x90, 0x45, 0xab, 0xc2, 0x1d, 0x21, 0xd4, 0xf2, 0x12,
	0x38, 0xc2, 0xb8, 0x71, 0x1d, 0xde, 0xc5, 0x36, 0xd6, 0x0c, 0xb8, 0x8b, 0x5c, 0x6a, 0x53, 0xbb,
	0x7e, 0x13, 0x7a, 0xb1, 0x79, 0xe3, 0x3a, 0xf4, 0xe5, 0x29, 0x9a, 0x6c, 0x32, 0x0d, 0x0e, 0x25,
	0xb4, 0x2a, 0x8a, 0x02, 0x1f, 0x08, 0x4b, 0xd9, 0xaa, 0xc0, 0x3d, 0x49, 0x9e, 0xa5, 0x53, 0x4a,
	0xdd, 0x62, 0x6a, 0x4d, 0xd9, 0x81, 0x5f, 0x49, 0x72, 0x86, 0xa6, 0xb4, 0xed, 0x75, 0x06, 0xff,
	0x26, 0x68, 0x2a, 0x68, 0xfe, 0x87, 0xc8, 0x94, 0xa6, 0xeb, 0x8a, 0x56, 0x5b, 0x83, 0xff, 0x1e,
	0xdb, 0x0a, 0xfc, 0x8f, 0x08, 0x1a, 0x7d, 0x07, 0xfe, 0x8f, 0x96, 0x64, 0x29, 0x70, 0x78, 0x88,
	0x0c, 0xc9, 0x6a, 0x6d, 0x0b, 0x3e, 0x38, 0x94, 0xe6, 0x52, 0x0f, 0x1f, 0x90, 0xc4, 0x42, 0x87,
	0xce, 0xb0, 0x93, 0xef, 0x09, 0x9c, 0xd1, 0x86, 0xca, 0x58, 0x83, 0x41, 0x02, 0x17, 0xeb, 0x0d,
	0x56, 0x57, 0x19, 0x03, 0x82, 0xda, 0x9b, 0x2a, 0xdb, 0x5a, 0x57, 0xb4, 0x1a, 0x48, 0xb8, 0xd2,
	0xb7, 0xe3, 0x5f, 0x7b, 0x12, 0x81, 0x4c, 0x5d, 0x6f, 0x9a, 0x6a, 0x15, 0xd2, 0x11, 0x85, 0xa5,
	0x34, 0xad, 0x4d, 0xc8, 0x44, 0x55, 0x96, 0x3e, 0x4a, 0xd1, 0xd9, 0x8a, 0xb8, 0x9f, 0xe2, 0x9b,
	0x52, 0x31, 0x34, 0xf9, 0x9f, 0x84, 0x9e, 0x1b, 0xbf, 0x26, 0xc8, 0xc5, 0xaf, 0xf9, 0x17, 0x1a,
	0xbf, 0x9f, 0xcd, 0x95, 0xce, 0x0a, 0x8f, 0x4e, 0x57, 0x38, 0xf8, 0xe4, 0x77, 0x12, 0x39, 0xfa,
	0x38, 0x7b, 0x63, 0x9f, 0x07, 0x45, 0xc7, 0x2b, 0x3a, 0xee, 0x9e, 0x6f, 0x07, 0xa1, 0x3f, 0x6c,
	0x87, 0x43, 0x9f, 0x17, 0x7d, 0x6e, 0x77, 0xae, 0xe6, 0xf3, 0x7b, 0x2b, 0xef, 0xb7, 0x8b, 0x1d,
	0x37, 0x28, 0x06, 0xa1, 0xed, 0x76, 0x6c, 0xbf, 0x53, 0xec, 0x7b, 0xae, 0x13, 0x7a, 0xfe, 0xbd,
	0x3f, 0xfd, 0xed, 0xd7, 0xd2, 0x4a, 0x61, 0x31, 0xbe, 0x6e, 0x97, 0x8f, 0xef, 0x08, 0x41, 0xf9,
	0x17, 0xc7, 0xf6, 0x2f, 0x8f, 0x6f, 0xe5, 0x41, 0xb9, 0x1f, 0xd5, 0x5f, 0x25, 0x0b, 0xf2, 0xe7,
	0x84, 0xca, 0xcf, 0xfe, 0x79, 0xc8, 0x8b, 0x67, 0xfe, 0xdb, 0x1d, 0x9d, 0xf9, 0xda, 0x37, 0xc8,
	0x18, 0x1d, 0xfb, 0xe8, 0xe3, 0xec, 0xca, 0x8b, 0x8e, 0xfc, 0xe2, 0x13, 0xaf, 0x16, 0x56, 0xce,
	0x7c, 0x62, 0x3f, 0xaa, 0xde, 0xc2, 0x5b, 0xc1, 0x2a, 0x59, 0x98, 0x7b, 0xf3, 0xe1, 0x03, 0x92,
	0xfc, 0xe3, 0x03, 0x72, 0xe9, 0x39, 0x9b, 0x6e, 0xec, 0xbe, 0xcb, 0xdb, 0xe1, 0xbd, 0x4f, 0xb3,
	0x52, 0x96, 0xac, 0xdd, 0x27, 0x8f, 0x1e, 0xe7, 0x12, 0x9f, 0x3d, 0xce, 0x25, 0x9e, 0x3e, 0xce,
	0x91, 0xc3, 0xa3, 0x1c, 0xf9, 0xed, 0x51, 0x8e, 0x7c, 0x72, 0x94, 0x23, 0x8f, 0x8e, 0x72, 0xe4,
	0xaf, 0x47, 0x39, 0xf2, 0xf7, 0xa3, 0x5c, 0xe2, 0xe9, 0x51, 0x8e, 0x7c, 0xf8, 0x24, 0x97, 0x78,
	0xf8, 0x24, 0x47, 0x1e, 0x3d, 0xc9, 0x25, 0x3e, 0x7b, 0x92, 0x4b, 0xdc, 0xae, 0x75, 0xbd, 0xc1,
	0xdd, 0x6e, 0x69, 0xdf, 0xc3, 0xab, 0x99, 0x6f, 0x97, 0x86, 0x41, 0x59, 0x18, 0x7b, 0x9e, 0xdf,
	0x2f, 0x0e, 0x7c, 0x6f, 0xdf, 0xe9, 0x70, 0xbf, 0x38, 0x0a, 0x97, 0x07, 0xbb, 0x5d, 0xaf, 0xcc,
	0xdf, 0x0f, 0xe3, 0x8f, 0x82, 0x53, 0x9f, 0x53, 0xbb, 0x13, 0xe2, 0xc3, 0x60, 0xf9, 0x8b, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x34, 0x64, 0xd2, 0xf5, 0x6f, 0x0d, 0x00, 0x00,
}

func (x Label) String() string {
	s, ok := Label_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QueryType) String() string {
	s, ok := QueryType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ResponseCode) String() string {
	s, ok := ResponseCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DnsZoneMetricsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DnsZoneMetricsRequest)
	if !ok {
		that2, ok := that.(DnsZoneMetricsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Filter != that1.Filter {
		return false
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Sort != that1.Sort {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *DnsZoneMetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DnsZoneMetricsResponse)
	if !ok {
		that2, ok := that.(DnsZoneMetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if this.Step != that1.Step {
		return false
	}
	if this.TotalHits != that1.TotalHits {
		return false
	}
	return true
}
func (this *DnsZoneRequestLogRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DnsZoneRequestLogRequest)
	if !ok {
		that2, ok := that.(DnsZoneRequestLogRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Filter != that1.Filter {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Sort != that1.Sort {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *DnsZoneRequestLogResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DnsZoneRequestLogResponse)
	if !ok {
		that2, ok := that.(DnsZoneRequestLogResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Logs) != len(that1.Logs) {
		return false
	}
	for i := range this.Logs {
		if !this.Logs[i].Equal(that1.Logs[i]) {
			return false
		}
	}
	if this.TotalHits != that1.TotalHits {
		return false
	}
	return true
}
func (this *MetricsData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsData)
	if !ok {
		that2, ok := that.(MetricsData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !this.Value[i].Equal(that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *DnsZoneRequestLogsResponseData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DnsZoneRequestLogsResponseData)
	if !ok {
		that2, ok := that.(DnsZoneRequestLogsResponseData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.CountryCode != that1.CountryCode {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.QueryType != that1.QueryType {
		return false
	}
	if this.ResponseCode != that1.ResponseCode {
		return false
	}
	if this.ClientSubnet != that1.ClientSubnet {
		return false
	}
	if this.DnsZoneName != that1.DnsZoneName {
		return false
	}
	return true
}
func (this *DnsZoneMetricsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dns_zone.DnsZoneMetricsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Sort: "+fmt.Sprintf("%#v", this.Sort)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DnsZoneMetricsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_zone.DnsZoneMetricsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "TotalHits: "+fmt.Sprintf("%#v", this.TotalHits)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DnsZoneRequestLogRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dns_zone.DnsZoneRequestLogRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Sort: "+fmt.Sprintf("%#v", this.Sort)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DnsZoneRequestLogResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DnsZoneRequestLogResponse{")
	if this.Logs != nil {
		s = append(s, "Logs: "+fmt.Sprintf("%#v", this.Logs)+",\n")
	}
	s = append(s, "TotalHits: "+fmt.Sprintf("%#v", this.TotalHits)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.MetricsData{")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DnsZoneRequestLogsResponseData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dns_zone.DnsZoneRequestLogsResponseData{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "CountryCode: "+fmt.Sprintf("%#v", this.CountryCode)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "QueryType: "+fmt.Sprintf("%#v", this.QueryType)+",\n")
	s = append(s, "ResponseCode: "+fmt.Sprintf("%#v", this.ResponseCode)+",\n")
	s = append(s, "ClientSubnet: "+fmt.Sprintf("%#v", this.ClientSubnet)+",\n")
	s = append(s, "DnsZoneName: "+fmt.Sprintf("%#v", this.DnsZoneName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomDataAPIClient is the client API for CustomDataAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomDataAPIClient interface {
	// Dns Zone Metrics
	//
	// x-displayName: "Dns Zone Metrics"
	// Request to get dns zone metrics data
	DnsZoneMetrics(ctx context.Context, in *DnsZoneMetricsRequest, opts ...grpc.CallOption) (*DnsZoneMetricsResponse, error)
	// DnsZoneRequestLogs
	//
	// x-displayName: "Get Dns Zone Request Logs"
	// Retrieve Dns Zone Request Logs
	DnsZoneRequestLogs(ctx context.Context, in *DnsZoneRequestLogRequest, opts ...grpc.CallOption) (*DnsZoneRequestLogResponse, error)
}

type customDataAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataAPIClient(cc *grpc.ClientConn) CustomDataAPIClient {
	return &customDataAPIClient{cc}
}

func (c *customDataAPIClient) DnsZoneMetrics(ctx context.Context, in *DnsZoneMetricsRequest, opts ...grpc.CallOption) (*DnsZoneMetricsResponse, error) {
	out := new(DnsZoneMetricsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.CustomDataAPI/DnsZoneMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataAPIClient) DnsZoneRequestLogs(ctx context.Context, in *DnsZoneRequestLogRequest, opts ...grpc.CallOption) (*DnsZoneRequestLogResponse, error) {
	out := new(DnsZoneRequestLogResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_zone.CustomDataAPI/DnsZoneRequestLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomDataAPIServer is the server API for CustomDataAPI service.
type CustomDataAPIServer interface {
	// Dns Zone Metrics
	//
	// x-displayName: "Dns Zone Metrics"
	// Request to get dns zone metrics data
	DnsZoneMetrics(context.Context, *DnsZoneMetricsRequest) (*DnsZoneMetricsResponse, error)
	// DnsZoneRequestLogs
	//
	// x-displayName: "Get Dns Zone Request Logs"
	// Retrieve Dns Zone Request Logs
	DnsZoneRequestLogs(context.Context, *DnsZoneRequestLogRequest) (*DnsZoneRequestLogResponse, error)
}

// UnimplementedCustomDataAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomDataAPIServer struct {
}

func (*UnimplementedCustomDataAPIServer) DnsZoneMetrics(ctx context.Context, req *DnsZoneMetricsRequest) (*DnsZoneMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DnsZoneMetrics not implemented")
}
func (*UnimplementedCustomDataAPIServer) DnsZoneRequestLogs(ctx context.Context, req *DnsZoneRequestLogRequest) (*DnsZoneRequestLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DnsZoneRequestLogs not implemented")
}

func RegisterCustomDataAPIServer(s *grpc.Server, srv CustomDataAPIServer) {
	s.RegisterService(&_CustomDataAPI_serviceDesc, srv)
}

func _CustomDataAPI_DnsZoneMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DnsZoneMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).DnsZoneMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.CustomDataAPI/DnsZoneMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).DnsZoneMetrics(ctx, req.(*DnsZoneMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataAPI_DnsZoneRequestLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DnsZoneRequestLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).DnsZoneRequestLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_zone.CustomDataAPI/DnsZoneRequestLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).DnsZoneRequestLogs(ctx, req.(*DnsZoneRequestLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.dns_zone.CustomDataAPI",
	HandlerType: (*CustomDataAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DnsZoneMetrics",
			Handler:    _CustomDataAPI_DnsZoneMetrics_Handler,
		},
		{
			MethodName: "DnsZoneRequestLogs",
			Handler:    _CustomDataAPI_DnsZoneRequestLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/dns_zone/public_custom_data_api.proto",
}

func (m *DnsZoneMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsZoneMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsZoneMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x52
	}
	if m.Limit != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x48
	}
	if m.Sort != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x40
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GroupBy) > 0 {
		dAtA2 := make([]byte, len(m.GroupBy)*10)
		var j1 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DnsZoneMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsZoneMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsZoneMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalHits != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.TotalHits))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DnsZoneRequestLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsZoneRequestLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsZoneRequestLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.Sort != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DnsZoneRequestLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsZoneRequestLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsZoneRequestLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalHits != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.TotalHits))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DnsZoneRequestLogsResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsZoneRequestLogsResponseData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsZoneRequestLogsResponseData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsZoneName) > 0 {
		i -= len(m.DnsZoneName)
		copy(dAtA[i:], m.DnsZoneName)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.DnsZoneName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ClientSubnet) > 0 {
		i -= len(m.ClientSubnet)
		copy(dAtA[i:], m.ClientSubnet)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.ClientSubnet)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ResponseCode) > 0 {
		i -= len(m.ResponseCode)
		copy(dAtA[i:], m.ResponseCode)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.ResponseCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomDataApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomDataApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DnsZoneMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicCustomDataApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataApi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Sort))
	}
	if m.Limit != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Limit))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *DnsZoneMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if m.TotalHits != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.TotalHits))
	}
	return n
}

func (m *DnsZoneRequestLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Sort))
	}
	if m.Limit != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Limit))
	}
	return n
}

func (m *DnsZoneRequestLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	if m.TotalHits != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.TotalHits))
	}
	return n
}

func (m *MetricsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomDataApi(uint64(len(k))) + 1 + len(v) + sovPublicCustomDataApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomDataApi(uint64(mapEntrySize))
		}
	}
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *DnsZoneRequestLogsResponseData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.ResponseCode)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.ClientSubnet)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.DnsZoneName)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func sovPublicCustomDataApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomDataApi(x uint64) (n int) {
	return sovPublicCustomDataApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DnsZoneMetricsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DnsZoneMetricsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Sort:` + fmt.Sprintf("%v", this.Sort) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsZoneMetricsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*MetricsData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "MetricsData", "MetricsData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&DnsZoneMetricsResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`TotalHits:` + fmt.Sprintf("%v", this.TotalHits) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsZoneRequestLogRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DnsZoneRequestLogRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Sort:` + fmt.Sprintf("%v", this.Sort) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsZoneRequestLogResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLogs := "[]*DnsZoneRequestLogsResponseData{"
	for _, f := range this.Logs {
		repeatedStringForLogs += strings.Replace(f.String(), "DnsZoneRequestLogsResponseData", "DnsZoneRequestLogsResponseData", 1) + ","
	}
	repeatedStringForLogs += "}"
	s := strings.Join([]string{`&DnsZoneRequestLogResponse{`,
		`Logs:` + repeatedStringForLogs + `,`,
		`TotalHits:` + fmt.Sprintf("%v", this.TotalHits) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricsData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValue := "[]*MetricValue{"
	for _, f := range this.Value {
		repeatedStringForValue += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForValue += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&MetricsData{`,
		`Labels:` + mapStringForLabels + `,`,
		`Value:` + repeatedStringForValue + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsZoneRequestLogsResponseData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DnsZoneRequestLogsResponseData{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`CountryCode:` + fmt.Sprintf("%v", this.CountryCode) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`QueryType:` + fmt.Sprintf("%v", this.QueryType) + `,`,
		`ResponseCode:` + fmt.Sprintf("%v", this.ResponseCode) + `,`,
		`ClientSubnet:` + fmt.Sprintf("%v", this.ClientSubnet) + `,`,
		`DnsZoneName:` + fmt.Sprintf("%v", this.DnsZoneName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DnsZoneMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsZoneMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsZoneMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v Label
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Label(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]Label, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Label
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Label(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= schema.SortOrder(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DnsZoneMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsZoneMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsZoneMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &MetricsData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHits", wireType)
			}
			m.TotalHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DnsZoneRequestLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsZoneRequestLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsZoneRequestLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= schema.SortOrder(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DnsZoneRequestLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsZoneRequestLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsZoneRequestLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &DnsZoneRequestLogsResponseData{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHits", wireType)
			}
			m.TotalHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &schema.MetricValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DnsZoneRequestLogsResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsZoneRequestLogsResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsZoneRequestLogsResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSubnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSubnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomDataApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomDataApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomDataApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomDataApi = fmt.Errorf("proto: unexpected end of group")
)

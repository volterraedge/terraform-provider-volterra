//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package registration

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCListRegistrationsBySite(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListBySiteReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.ListBySiteReq", yamlReq)
	}
	rsp, err := c.grpcClient.ListRegistrationsBySite(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCListRegistrationsByState(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListStateReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.ListStateReq", yamlReq)
	}
	rsp, err := c.grpcClient.ListRegistrationsByState(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRegistrationApprove(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ApprovalReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.ApprovalReq", yamlReq)
	}
	rsp, err := c.grpcClient.RegistrationApprove(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRegistrationConfig(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ConfigReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.ConfigReq", yamlReq)
	}
	rsp, err := c.grpcClient.RegistrationConfig(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRegistrationCreate(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &RegistrationCreateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.RegistrationCreateRequest", yamlReq)
	}
	rsp, err := c.grpcClient.RegistrationCreate(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["ListRegistrationsBySite"] = ccl.doRPCListRegistrationsBySite

	rpcFns["ListRegistrationsByState"] = ccl.doRPCListRegistrationsByState

	rpcFns["RegistrationApprove"] = ccl.doRPCRegistrationApprove

	rpcFns["RegistrationConfig"] = ccl.doRPCRegistrationConfig

	rpcFns["RegistrationCreate"] = ccl.doRPCRegistrationCreate

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCListRegistrationsBySite(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListBySiteReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.ListBySiteReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site_name", fmt.Sprintf("%v", req.SiteName))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.registration.ListResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCListRegistrationsByState(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListStateReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.ListStateReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("state", fmt.Sprintf("%v", req.State))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.registration.ListResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRegistrationApprove(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ApprovalReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.ApprovalReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("annotations", fmt.Sprintf("%v", req.Annotations))
		q.Add("connected_region", fmt.Sprintf("%v", req.ConnectedRegion))
		q.Add("labels", fmt.Sprintf("%v", req.Labels))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("passport", fmt.Sprintf("%v", req.Passport))
		q.Add("state", fmt.Sprintf("%v", req.State))
		q.Add("tunnel_type", fmt.Sprintf("%v", req.TunnelType))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ObjectChangeResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.registration.ObjectChangeResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRegistrationConfig(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ConfigReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.ConfigReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("token", fmt.Sprintf("%v", req.Token))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ConfigResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.registration.ConfigResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRegistrationCreate(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &RegistrationCreateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.registration.RegistrationCreateRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("metadata", fmt.Sprintf("%v", req.Metadata))
		q.Add("spec", fmt.Sprintf("%v", req.Spec))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Object{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.registration.Object", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["ListRegistrationsBySite"] = ccl.doRPCListRegistrationsBySite

	rpcFns["ListRegistrationsByState"] = ccl.doRPCListRegistrationsByState

	rpcFns["RegistrationApprove"] = ccl.doRPCRegistrationApprove

	rpcFns["RegistrationConfig"] = ccl.doRPCRegistrationConfig

	rpcFns["RegistrationCreate"] = ccl.doRPCRegistrationCreate

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type CustomAPIInprocClient struct {
	svc svcfw.Service
}

func (c *CustomAPIInprocClient) ListRegistrationsBySite(ctx context.Context, in *ListBySiteReq, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.registration.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *ListResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.registration.ListBySiteReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ListRegistrationsBySite' operation on 'registration'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.registration.CustomAPI.ListRegistrationsBySite"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListRegistrationsBySite(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.registration.ListResponse", rsp)...)

	return rsp, nil
}
func (c *CustomAPIInprocClient) ListRegistrationsByState(ctx context.Context, in *ListStateReq, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.registration.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *ListResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.registration.ListStateReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ListRegistrationsByState' operation on 'registration'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.registration.CustomAPI.ListRegistrationsByState"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListRegistrationsByState(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.registration.ListResponse", rsp)...)

	return rsp, nil
}
func (c *CustomAPIInprocClient) RegistrationApprove(ctx context.Context, in *ApprovalReq, opts ...grpc.CallOption) (*ObjectChangeResp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.registration.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *ObjectChangeResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.registration.ApprovalReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.RegistrationApprove' operation on 'registration'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.registration.CustomAPI.RegistrationApprove"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RegistrationApprove(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.registration.ObjectChangeResp", rsp)...)

	return rsp, nil
}
func (c *CustomAPIInprocClient) RegistrationConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigResp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.registration.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *ConfigResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.registration.ConfigReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.RegistrationConfig' operation on 'registration'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.registration.CustomAPI.RegistrationConfig"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RegistrationConfig(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.registration.ConfigResp", rsp)...)

	return rsp, nil
}
func (c *CustomAPIInprocClient) RegistrationCreate(ctx context.Context, in *RegistrationCreateRequest, opts ...grpc.CallOption) (*Object, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.registration.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *Object
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.registration.RegistrationCreateRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.RegistrationCreate' operation on 'registration'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.registration.CustomAPI.RegistrationCreate"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RegistrationCreate(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.registration.Object", rsp)...)

	return rsp, nil
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &CustomAPIInprocClient{svc: svc}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "registration",
        "description": "registration object controls node admission process and stores all information about node itself. Valid token is required\nto be presented when registration is created using public custom API. Every node in given site is represented by it's registration.\nregistration must have unique hostname for given cluster_name. Registration state is changed to RETIRED in order to decommission node.\nRegistration can't be changed by user after creation.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{namespace}/listregistrationsbystate": {
            "post": {
                "summary": "List Registrations By Status",
                "description": "API endpoint for returning Registrations by status, e.g APPROVED, NEW, or RETIRED",
                "operationId": "ves.io.schema.registration.CustomAPI.ListRegistrationsByState",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/registrationListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nRegistration namespace, only \"system\" namespaces is accepted",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registrationListStateReq"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-registration-CustomAPI-ListRegistrationsByState"
                },
                "x-ves-proto-rpc": "ves.io.schema.registration.CustomAPI.ListRegistrationsByState"
            },
            "x-displayname": "Registration",
            "x-ves-proto-service": "ves.io.schema.registration.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/registration/{name}/approve": {
            "post": {
                "summary": "Change registration state",
                "description": "RegistrationApprove approved pending registration and it can also decommission by changing state to RETIRED.",
                "operationId": "ves.io.schema.registration.CustomAPI.RegistrationApprove",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/registrationObjectChangeResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nRegistration namespace, only \"system\" namespaces is accepted",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Name\n\nx-required\nx-example: \"r-e9030963-639e-41cd-aba6-261504f4a6be\"\nRegistration name (= \"r-\" + uid) to approve. Registration name is taken from listing pending registrations.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registrationApprovalReq"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-registration-CustomAPI-RegistrationApprove"
                },
                "x-ves-proto-rpc": "ves.io.schema.registration.CustomAPI.RegistrationApprove"
            },
            "x-displayname": "Registration",
            "x-ves-proto-service": "ves.io.schema.registration.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/registrations_by_site/{site_name}": {
            "get": {
                "summary": "List Registrations by site",
                "description": "List all registration in site",
                "operationId": "ves.io.schema.registration.CustomAPI.ListRegistrationsBySite",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/registrationListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nRegistration namespace, only \"system\" namespaces is accepted",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "site_name",
                        "description": "SiteName\n\nx-required\nx-example: \"ce02\"\nSite name to be used for registration filtering",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site name"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-registration-CustomAPI-ListRegistrationsBySite"
                },
                "x-ves-proto-rpc": "ves.io.schema.registration.CustomAPI.ListRegistrationsBySite"
            },
            "x-displayname": "Registration",
            "x-ves-proto-service": "ves.io.schema.registration.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/registerBootstrap": {
            "post": {
                "summary": "Create registration",
                "description": "Registration request to create registration is sent by the node on first boot. User never creates registration on her own.",
                "operationId": "ves.io.schema.registration.CustomAPI.RegistrationCreate",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/registrationObject"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registrationRegistrationCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-registration-CustomAPI-RegistrationCreate"
                },
                "x-ves-proto-rpc": "ves.io.schema.registration.CustomAPI.RegistrationCreate"
            },
            "x-displayname": "Registration",
            "x-ves-proto-service": "ves.io.schema.registration.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/requestConfig": {
            "post": {
                "summary": "Get configuration for registration",
                "description": "API endpoint for returning configuration for admitted registrations.\nIt will fail with known error for non-ADMITTED registration",
                "operationId": "ves.io.schema.registration.CustomAPI.RegistrationConfig",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/registrationConfigResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registrationConfigReq"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-registration-CustomAPI-RegistrationConfig"
                },
                "x-ves-proto-rpc": "ves.io.schema.registration.CustomAPI.RegistrationConfig"
            },
            "x-displayname": "Registration",
            "x-ves-proto-service": "ves.io.schema.registration.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "ioschemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "registrationApprovalReq": {
            "type": "object",
            "description": "Request for admission approval",
            "title": "Approval request",
            "x-displayname": "Approval",
            "x-ves-proto-message": "ves.io.schema.registration.ApprovalReq",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Optional.\n Annotations to set (add if missing, overwrite if exists)\n\nExample: - \"key:value\"-",
                    "title": "Annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "key:value"
                },
                "connected_region": {
                    "type": "string",
                    "description": " Optional.\n closest REs to which to connect in selected region. If there is more than one RE with the label\n then select 2 of them. Otherwise default \"geo-ip\" database is consulted to find closest RE(s) to\n public ip with which node registration request was received.\n\nExample: - \"value\"-",
                    "title": "Connected Region",
                    "x-displayname": "Connected Region",
                    "x-ves-example": "value"
                },
                "labels": {
                    "type": "object",
                    "description": " Optional.\n Labels to set (add if missing, overwrite if exists)\n\nExample: - \"key:value\"-",
                    "title": "Labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "key:value"
                },
                "name": {
                    "type": "string",
                    "description": " Registration name (= \"r-\" + uid) to approve. Registration name is taken from listing pending registrations.\n\nExample: - \"r-e9030963-639e-41cd-aba6-261504f4a6be\"-\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "r-e9030963-639e-41cd-aba6-261504f4a6be",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " Registration namespace, only \"system\" namespaces is accepted\n\nExample: - \"system\"-\nRequired: YES",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system",
                    "x-ves-required": "true"
                },
                "passport": {
                    "description": " Passport to be changed in registration, must be valid and always provided",
                    "title": "Passport",
                    "$ref": "#/definitions/registrationPassport",
                    "x-displayname": "Passport"
                },
                "state": {
                    "description": " State to approve (APPROVED or RETIRED)\nRequired: YES",
                    "title": "Target registration state",
                    "$ref": "#/definitions/registrationObjectState",
                    "x-displayname": "Target state",
                    "x-ves-required": "true"
                },
                "tunnel_type": {
                    "description": " Tunnel type specifies the type of tunnel to be used for traffic between the sites.",
                    "title": "Site to site tunnel type",
                    "$ref": "#/definitions/schemaSiteToSiteTunnelType",
                    "x-displayname": "Site to Site Tunnel Type"
                }
            }
        },
        "registrationConfigReq": {
            "type": "object",
            "description": "Request to get configuration",
            "title": "Configuration request",
            "x-displayname": "Configuration Request",
            "x-ves-proto-message": "ves.io.schema.registration.ConfigReq",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Registration name\n\nExample: - \"r-e9030963-639e-41cd-aba6-261504f4a6be\"-\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "r-e9030963-639e-41cd-aba6-261504f4a6be",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " Registration namespace\n\nExample: - \"system\"-\nRequired: YES",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system",
                    "x-ves-required": "true"
                },
                "token": {
                    "type": "string",
                    "description": " Token - verify node identity\n\nExample: - \"835af393-3056-46af-a9e4-57613fbe0339\"-\nRequired: YES",
                    "title": "Token",
                    "x-displayname": "Token",
                    "x-ves-example": "835af393-3056-46af-a9e4-57613fbe0339",
                    "x-ves-required": "true"
                }
            }
        },
        "registrationConfigResp": {
            "type": "object",
            "description": "Response for configuration request. This response is consumed by node.",
            "title": "Configuration",
            "x-displayname": "Configuration",
            "x-ves-proto-message": "ves.io.schema.registration.ConfigResp",
            "properties": {
                "hash": {
                    "type": "string",
                    "description": " Hash of workload map which is used to verify consistency\n and check changes",
                    "title": "Hash",
                    "x-displayname": "Hash"
                },
                "workload": {
                    "type": "object",
                    "description": " Configuration for applications and infrastructure",
                    "title": "Workload",
                    "x-displayname": "Workload"
                }
            }
        },
        "registrationInfra": {
            "type": "object",
            "description": "InfraMetadata stores information about instance infrastructure",
            "title": "Infrastructure information",
            "x-displayname": "Infra Information",
            "x-ves-proto-message": "ves.io.schema.registration.Infra",
            "properties": {
                "availability_zone": {
                    "type": "string",
                    "description": " An Availability Zone is a high-availability offering that protects your applications and data from datacenter failures.",
                    "title": "availability_zone",
                    "x-displayname": "Availability Zone"
                },
                "certified_hw": {
                    "type": "string",
                    "description": " certified HW name used to map with Volterra certified_hardware definition",
                    "title": "Certified hardware name",
                    "x-displayname": "Certified Hardware"
                },
                "domain": {
                    "type": "string",
                    "description": " Machine domain. It's used for Kubernetes cloud provider when domain must be \n different than Volterra",
                    "title": "Instance domain",
                    "x-displayname": "Instance Domain"
                },
                "hostname": {
                    "type": "string",
                    "description": " Must be unique in entire cluster and same as OS settings.\n '.' (dots) are not allowed in hostname\nRequired: YES",
                    "title": "Instance hostname",
                    "x-displayname": "Hostname",
                    "x-ves-required": "true"
                },
                "hw_info": {
                    "description": " HW information about node in the site",
                    "title": "Hardware information",
                    "$ref": "#/definitions/siteOsInfo",
                    "x-displayname": "Hardware Information"
                },
                "instance_id": {
                    "type": "string",
                    "description": " Instance id (assigned by infrastructure provider)",
                    "title": "Instance ID",
                    "x-displayname": "Instance ID"
                },
                "interfaces": {
                    "type": "object",
                    "description": " Machine interfaces present during registration time\nRequired: YES",
                    "title": "Interfaces",
                    "x-displayname": "Interfaces",
                    "x-ves-required": "true"
                },
                "internet_proxy": {
                    "description": " It will be used as the proxy URL for HTTP requests and HTTPS requests to Volterra public domains.",
                    "title": "Internet Proxy Configuration",
                    "$ref": "#/definitions/registrationInternetProxy",
                    "x-displayname": "Local HTTP/HTTPS proxy configuration"
                },
                "machine_id": {
                    "type": "string",
                    "description": " Machine id - generated by operating system",
                    "title": "Machine ID",
                    "x-displayname": "Machine ID"
                },
                "provider": {
                    "description": " Infrastructure provider detected by system",
                    "title": "Provider",
                    "$ref": "#/definitions/registrationProvider",
                    "x-displayname": "Provider"
                },
                "timestamp": {
                    "type": "string",
                    "description": " It's used to verify machine have acceptable time difference from server",
                    "title": "Timestamp",
                    "format": "date-time",
                    "x-displayname": "Current (machine) time"
                },
                "zone": {
                    "type": "string",
                    "description": " Instance zone (or region), depends on provider",
                    "title": "Zone",
                    "x-displayname": "Region"
                }
            }
        },
        "registrationInterface": {
            "type": "object",
            "description": "x-displayName: \"Machine Interface\"\nInterface describe network interface",
            "title": "Machine interface",
            "properties": {
                "addr": {
                    "type": "string",
                    "description": "x-displayName: \"IP Address\"\nx-example: \"192.168.100.1\"",
                    "title": "IP Address"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Interface Name\"\nx-example: \"eth0\"",
                    "title": "Interface name"
                },
                "plen": {
                    "type": "integer",
                    "description": "x-displayName: \"IP Prefix\"\nx-example: \"24\"",
                    "title": "Prefix length",
                    "format": "int32"
                }
            }
        },
        "registrationInternetProxy": {
            "type": "object",
            "description": "Proxy describes options for HTTP or HTTPS proxy configurations",
            "title": "Internet Proxy configuration",
            "x-displayname": "Internet Proxy Configuration",
            "x-ves-proto-message": "ves.io.schema.registration.InternetProxy",
            "properties": {
                "http_proxy": {
                    "type": "string",
                    "description": " It will be used as the proxy URL for HTTP requests and HTTPS requests unless overridden by HTTPSProxy or NoProxy.\n\nExample: - \"http://USERNAME:PASSWORD@10.0.1.1:8080/\"-",
                    "title": "Http Proxy",
                    "x-displayname": "HTTP PROXY",
                    "x-ves-example": "http://USERNAME:PASSWORD@10.0.1.1:8080/"
                },
                "https_proxy": {
                    "type": "string",
                    "description": " It will be used as the proxy URL for HTTPS requests unless overridden by NoProxy.\n\nExample: - \"https://USERNAME:PASSWORD@10.0.0.1:8080/\"-",
                    "title": "Https Proxy",
                    "x-displayname": "HTTPS PROXY",
                    "x-ves-example": "https://USERNAME:PASSWORD@10.0.0.1:8080/"
                },
                "no_proxy": {
                    "type": "string",
                    "description": " It specifies a string that contains comma-separated values\n specifying hosts that should be excluded from proxying. Each value is\n represented by an IP address prefix (1.2.3.4), an IP address prefix in\n CIDR notation (1.2.3.4/8), a domain name, or a special DNS label (*).\n An IP address prefix and domain name can also include a literal port\n number (1.2.3.4:80).\n A domain name matches that name and all subdomains. A domain name with\n a leading \".\" matches subdomains only. For example \"foo.com\" matches\n \"foo.com\" and \"bar.foo.com\"; \".y.com\" matches \"x.y.com\" but not \"y.com\".\n A single asterisk (*) indicates that no proxying should be done.\n\nExample: - \"master.hostname.example.com,10.1.0.0/16,172.30.0.0/16\"-",
                    "title": "No Proxy",
                    "x-displayname": "NO PROXY",
                    "x-ves-example": "master.hostname.example.com,10.1.0.0/16,172.30.0.0/16"
                },
                "proxy_cacert_url": {
                    "type": "string",
                    "description": " Allow optional different trust-store for proxy in HTTP CONNECT step\n by picking proxy ca certificate value.\n\nExample: - \"string:///LS0tLS1CRUdJTiBDRxxxx\"-",
                    "title": "Proxy CA certificate URL",
                    "x-displayname": "Proxy CA certificate URL",
                    "x-ves-example": "string:///LS0tLS1CRUdJTiBDRxxxx"
                }
            }
        },
        "registrationListResponse": {
            "type": "object",
            "description": "This is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of registration",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.registration.ListResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/registrationListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "registrationListResponseItem": {
            "type": "object",
            "description": "By default a summary of registration is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of registration",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.registration.ListResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this registration",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this registration",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates registration is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/schemaregistrationGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this registration",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this registration\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "object": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object\n DEPRECATED by get_spec, metadata and system_metadata",
                    "title": "object",
                    "$ref": "#/definitions/registrationObject",
                    "x-displayname": "Object"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this registration\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "registrationListStateReq": {
            "type": "object",
            "description": "Request for list registrations",
            "title": "ListStateReq",
            "x-displayname": "List State Request",
            "x-ves-proto-message": "ves.io.schema.registration.ListStateReq",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " Registration namespace, only \"system\" namespaces is accepted\n\nExample: - \"system\"-\nRequired: YES",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system",
                    "x-ves-required": "true"
                },
                "state": {
                    "description": " State to get list of registrations (NEW, APPROVED, ADMITTED or RETIRED)\nRequired: YES",
                    "title": "ObjectState",
                    "$ref": "#/definitions/registrationObjectState",
                    "x-displayname": "Object State",
                    "x-ves-required": "true"
                }
            }
        },
        "registrationObject": {
            "type": "object",
            "description": "Registration object stores node registration and information regarding the node",
            "title": "Registration object",
            "x-displayname": "Object",
            "x-ves-displayorder": "1,2,3,4",
            "x-ves-proto-message": "ves.io.schema.registration.Object",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the registration",
                    "title": "spec",
                    "$ref": "#/definitions/registrationSpecType",
                    "x-displayname": "Spec"
                },
                "status": {
                    "description": " Most recently observed status of the registration",
                    "title": "status\nx-displayName: \"Status\"\nMost recently observed status of the registration",
                    "$ref": "#/definitions/schemaregistrationStatusType",
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "registrationObjectChangeResp": {
            "type": "object",
            "description": "Generic response when object is changed, registration can be changed only via custom API.",
            "title": "Registration change",
            "x-displayname": "Registration Change",
            "x-ves-proto-message": "ves.io.schema.registration.ObjectChangeResp",
            "properties": {
                "obj": {
                    "title": "Registration object",
                    "$ref": "#/definitions/registrationObject",
                    "x-displayname": "Object"
                }
            }
        },
        "registrationObjectState": {
            "type": "string",
            "description": "Defines states for registration object\n\nState isn't set\nObject was created (registration request was received and object created)\nRegistration was approved and waiting for configuration\nThis state can be set by user only if current state is NEW\nRegistration is approved and prepared for  to connect\nIt can't be set manually.\nRegistration isn't valid anymore and it will be deleted in near future\nThis state can be set by user anytime.\nRegistration is failed (vpm reported or timeout)\nDEPRECATED. Registration is reported as finished (workload was deployed)\nUser action is required\nRegistration is online\nOperating system upgrade is in progress\nMaintenance is in progress",
            "title": "ObjectState",
            "enum": [
                "NOTSET",
                "NEW",
                "APPROVED",
                "ADMITTED",
                "RETIRED",
                "FAILED",
                "DONE",
                "PENDING",
                "ONLINE",
                "UPGRADING",
                "MAINTENANCE"
            ],
            "default": "NOTSET",
            "x-displayname": "Object State",
            "x-ves-proto-enum": "ves.io.schema.registration.ObjectState"
        },
        "registrationPassport": {
            "type": "object",
            "description": "Passport stores information about identification and node configuration provided by CE during registration. It can be manually updated by user during approval.",
            "title": "Passport",
            "x-displayname": "Passport",
            "x-ves-displayorder": "1,2,9,7,8,4,5,6,10,3,11",
            "x-ves-oneof-field-operating_system_version_choice": "[\"default_os_version\",\"operating_system_version\"]",
            "x-ves-oneof-field-volterra_sw_version_choice": "[\"default_sw_version\",\"volterra_software_version\"]",
            "x-ves-proto-message": "ves.io.schema.registration.Passport",
            "properties": {
                "cluster_name": {
                    "type": "string",
                    "description": "\nExample: - \"acme-ce01\"-\nRequired: YES",
                    "title": "cluster_name",
                    "x-displayname": "Cluster Name",
                    "x-ves-example": "acme-ce01",
                    "x-ves-required": "true"
                },
                "cluster_size": {
                    "type": "integer",
                    "description": " Defines how many master nodes is in the cluster, only 1 or 3 is allowed\n 1 - cluster have single master, without HA\n 3 - cluster have 3 masters, with HA, all nodes should be allowed at same time, cluster won't start until ALL nodes are ADMITTED\n 0 - same as 1\n This value can't be changed after installation.\n It does not interact with auto-scaling as only pool nodes are scaled.\n\nExample: - \"3\"-",
                    "title": "Cluster size",
                    "format": "int32",
                    "x-displayname": "Cluster Size",
                    "x-ves-example": "3"
                },
                "cluster_type": {
                    "type": "string",
                    "description": "\nExample: - \"ce\"-\nRequired: YES",
                    "title": "cluster_type",
                    "x-displayname": "Cluster Type",
                    "x-ves-example": "ce",
                    "x-ves-required": "true"
                },
                "default_os_version": {
                    "description": "Exclusive with [operating_system_version]\nx-displayName: \"Default OS Version\"\nWill assign latest available OS version or version defined on parent object such as Fleet, VoltStack site, AWS, Azure, etc.",
                    "title": "Default OS Version",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_sw_version": {
                    "description": "Exclusive with [volterra_software_version]\nx-displayName: \"Default SW Version\"\nWill assign latest available SW version or version defined on parent object such as Fleet, VoltStack site, AWS, Azure, etc.",
                    "title": "Default SW Version",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "latitude": {
                    "type": "number",
                    "description": " Geographic location of this site\n\nExample: - \"49.3156733\"-",
                    "title": "Latitude",
                    "format": "float",
                    "x-displayname": "Latitude",
                    "x-ves-example": "49.3156733"
                },
                "longitude": {
                    "type": "number",
                    "description": " Geographic location of this site\n\nExample: - \"14.2484333\"-",
                    "title": "Longitude",
                    "format": "float",
                    "x-displayname": "Longitude",
                    "x-ves-example": "14.2484333"
                },
                "operating_system_version": {
                    "type": "string",
                    "description": "Exclusive with [default_os_version]\nx-displayName: \"Operating System Version\"\nx-example: \"7.2009.10\"\nOperating System Version is optional parameter, which allows to specify target SW version for particular site e.g. 7.2009.10.",
                    "title": "Operating System Version"
                },
                "private_network_name": {
                    "type": "string",
                    "description": " Private Network name for private access connectivity to Volterra ADN.\n It is used for PrivateLink, CloudLink and L3VPN.\n\nExample: - \"private-ntw\"-",
                    "title": "Private Network Name",
                    "x-displayname": "Private Network Name",
                    "x-ves-example": "private-ntw"
                },
                "volterra_software_version": {
                    "type": "string",
                    "description": "Exclusive with [default_sw_version]\nx-displayName: \"Volterra Software Version\"\nx-example: \"crt-20210329-1002\"\nVolterra Software Version is optional parameter, which allows to specify target SW version for particular site e.g. crt-20210329-1002.",
                    "title": "Volterra Software Version"
                },
                "vpm_version": {
                    "type": "string",
                    "description": " vpm version used for registration\n it'll be used to refuse registration from old vpms\n Local control plane to manage volterra software appliance\n\nExample: - \"value\"-",
                    "title": "VPM version",
                    "x-displayname": "VPM Version",
                    "x-ves-example": "value"
                }
            }
        },
        "registrationProvider": {
            "type": "string",
            "description": "Infrastructure provider enum for registration. It describes where is instance running.\n\nProvider was not detected\nAWS cloud instance\nGoogle cloud instance\nAzure cloud instance\nVMWare VM\nKVM VM\nOther provider, which was not identified by system.\nVolterra HW device.\nIBM Cloud instance.\nKubernetes cluster in AWS\nKubernetes cluster in GCP\nKubernetes cluster in Azure\nKubernetes cluster in Vmware\nKubernetes cluster in VMware\nKubernetes cluster in Other provider\nKubernetes cluster in Volterra\nKubernetes cluster in IBM Cloud",
            "title": "Infrastructure provider",
            "enum": [
                "UNKNOWN",
                "AWS",
                "GOOGLE",
                "AZURE",
                "VMWARE",
                "KVM",
                "OTHER",
                "VOLTERRA",
                "IBMCLOUD",
                "UNKNOWN_K8S",
                "AWS_K8S",
                "GCP_K8S",
                "AZURE_K8S",
                "VMWARE_K8S",
                "KVM_K8S",
                "OTHER_K8S",
                "VOLTERRA_K8S",
                "IBMCLOUD_K8S"
            ],
            "default": "UNKNOWN",
            "x-displayname": "Infrastructure Provider",
            "x-ves-proto-enum": "ves.io.schema.registration.Provider"
        },
        "registrationRegistrationCreateRequest": {
            "type": "object",
            "description": "Register node. This API isn't designed to be used by users, it's only for node.",
            "title": "Create registration",
            "x-displayname": "Create registration",
            "x-ves-proto-message": "ves.io.schema.registration.RegistrationCreateRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "Metadata",
                    "$ref": "#/definitions/schemaObjectCreateMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the registration",
                    "title": "Registration specification",
                    "$ref": "#/definitions/schemaregistrationCreateSpecType",
                    "x-displayname": "Specification"
                }
            }
        },
        "registrationSpecType": {
            "type": "object",
            "description": "Shape of the registration specification",
            "title": "Shape of the token specification",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.registration.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/schemaregistrationGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "registrationWorkloadContext": {
            "type": "object",
            "description": "x-displayName: \"Workload Context\"\nWorkloadContext defines context for workload templates and infrastructure configuration\nused in vpm",
            "title": "Workload context",
            "properties": {
                "app_name": {
                    "type": "string",
                    "description": "x-displayName: \"App Name\"\nx-example: \"phobos\"\napplication type name",
                    "title": "AppName"
                },
                "params": {
                    "type": "object",
                    "description": "x-displayName: \"Params\"\nx-example: \"value\"\nmap of workload params",
                    "title": "Params"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/ioschemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaObjectCreateMetaType": {
            "type": "object",
            "description": "ObjectCreateMetaType is metadata that can be specified in Create request of an object.",
            "title": "ObjectCreateMetaType",
            "x-displayname": "Create Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectCreateMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if \n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaSiteToSiteTunnelType": {
            "type": "string",
            "description": "Tunnel encapsulation to be used between sites\n\nSite to site tunnel can operate in both ipsec and ssl\nipsec takes precedence over ssl\nSite to site tunnel is of type ipsec\nSite to site tunnel is of type ssl",
            "title": "Site to site tunnel type",
            "enum": [
                "SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL",
                "SITE_TO_SITE_TUNNEL_IPSEC",
                "SITE_TO_SITE_TUNNEL_SSL"
            ],
            "default": "SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL",
            "x-displayname": "Tunnel type",
            "x-ves-proto-enum": "ves.io.schema.SiteToSiteTunnelType"
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.",
                    "title": "namespace",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaregistrationCreateSpecType": {
            "type": "object",
            "description": "VPM creates registration using this message, never used by users.",
            "title": "Create registration",
            "x-displayname": "Create Registration",
            "x-ves-displayorder": "1,2,3",
            "x-ves-proto-message": "ves.io.schema.registration.CreateSpecType",
            "properties": {
                "infra": {
                    "description": " Infrastructure metadata section\nRequired: YES",
                    "$ref": "#/definitions/registrationInfra",
                    "x-displayname": "Infrastructure",
                    "x-ves-required": "true"
                },
                "passport": {
                    "description": " Passport is storing identification for instance as site name, latitude, longitude, etc.\nRequired: YES",
                    "$ref": "#/definitions/registrationPassport",
                    "x-displayname": "Passport",
                    "x-ves-required": "true"
                },
                "token": {
                    "type": "string",
                    "description": " Token is used for machine and tenant identification\n\nExample: - \"value\"-\nRequired: YES",
                    "x-displayname": "Token",
                    "x-ves-example": "value",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaregistrationGetSpecType": {
            "type": "object",
            "description": "Get registration specification",
            "title": "Get registration",
            "x-displayname": "Get Registration",
            "x-ves-displayorder": "1,2,3",
            "x-ves-proto-message": "ves.io.schema.registration.GetSpecType",
            "properties": {
                "infra": {
                    "description": " Infrastructure metadata section\nRequired: YES",
                    "$ref": "#/definitions/registrationInfra",
                    "x-displayname": "Infrastructure",
                    "x-ves-required": "true"
                },
                "passport": {
                    "description": " Passport is storing identification for instance as site name, latitude, longitude, etc.\nRequired: YES",
                    "$ref": "#/definitions/registrationPassport",
                    "x-displayname": "Passport",
                    "x-ves-required": "true"
                },
                "token": {
                    "type": "string",
                    "description": " Token is used for machine and tenant identification\n\nExample: - \"value\"-\nRequired: YES",
                    "x-displayname": "Token",
                    "x-ves-example": "value",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaregistrationGlobalSpecType": {
            "type": "object",
            "title": "Shape of the registration specification",
            "x-displayname": "Global Specification",
            "x-ves-proto-message": "ves.io.schema.registration.GlobalSpecType",
            "properties": {
                "infra": {
                    "description": " Infrastructure metadata section\nRequired: YES",
                    "title": "Infra",
                    "$ref": "#/definitions/registrationInfra",
                    "x-displayname": "Infrastructure",
                    "x-ves-required": "true"
                },
                "passport": {
                    "description": " Passport is storing identification for instance as site name, latitude, longitude, etc.\nRequired: YES",
                    "title": "Passport",
                    "$ref": "#/definitions/registrationPassport",
                    "x-displayname": "Passport",
                    "x-ves-required": "true"
                },
                "role": {
                    "type": "array",
                    "description": " Role of registered node. Used by system to determine what roles should be enforced.\n\nExample: - \"k8s-master, etcd\"-",
                    "title": "Instance role",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Role",
                    "x-ves-example": "k8s-master, etcd"
                },
                "site": {
                    "type": "array",
                    "description": " Site for this registration, assigned after registration is assigned to site.",
                    "title": "Site",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Site"
                },
                "token": {
                    "type": "string",
                    "description": " Token is used for machine and tenant identification\n\nExample: - \"value\"-\nRequired: YES",
                    "title": "Token",
                    "x-displayname": "Token",
                    "x-ves-example": "value",
                    "x-ves-required": "true"
                },
                "tunnel_type": {
                    "description": " Tunnel type specifies the type of tunnel to be used for traffic between the sites.",
                    "title": "Site to site tunnel type",
                    "$ref": "#/definitions/schemaSiteToSiteTunnelType",
                    "x-displayname": "Site to Site Tunnel Type"
                }
            }
        },
        "schemaregistrationStatusType": {
            "type": "object",
            "description": "Most recent observer status of object",
            "title": "Shape of the registration status",
            "x-displayname": "Status Type",
            "x-ves-displayorder": "1,2",
            "x-ves-proto-message": "ves.io.schema.registration.StatusType",
            "properties": {
                "current_state": {
                    "description": " It defines current state of registration and if (and how) it should be handled.",
                    "title": "Current state of registration",
                    "$ref": "#/definitions/registrationObjectState",
                    "x-displayname": "Registration state"
                },
                "object_status": {
                    "description": " Shape of the registration status",
                    "title": "object status",
                    "$ref": "#/definitions/ioschemaStatusType",
                    "x-displayname": "Object Status"
                }
            }
        },
        "siteBios": {
            "type": "object",
            "description": "BIOS information.",
            "title": "Bios Data",
            "x-displayname": "Bios Data",
            "x-ves-proto-message": "ves.io.schema.site.Bios",
            "properties": {
                "date": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/bios_date",
                    "title": "date",
                    "x-displayname": "Date"
                },
                "vendor": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/bios_vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                },
                "version": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/bios_version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteBoard": {
            "type": "object",
            "description": "Board information",
            "title": "Board Details",
            "x-displayname": "Board Details",
            "x-ves-proto-message": "ves.io.schema.site.Board",
            "properties": {
                "asset_tag": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_asset_tag",
                    "title": "asset_tag",
                    "x-displayname": "Asset Tag"
                },
                "name": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_name",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "serial": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_serial",
                    "title": "serial",
                    "x-displayname": "Serial Number"
                },
                "vendor": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                },
                "version": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteChassis": {
            "type": "object",
            "description": "Chassis information.",
            "title": "Chassis Details",
            "x-displayname": "Chassis Details",
            "x-ves-proto-message": "ves.io.schema.site.Chassis",
            "properties": {
                "asset_tag": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/chassis_asset_tag",
                    "title": "asset_tag",
                    "x-displayname": "Asset Tag"
                },
                "serial": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/chassis_serial",
                    "title": "serial",
                    "x-displayname": "Serial Number"
                },
                "type": {
                    "type": "integer",
                    "description": " information from /sys/class/dmi/id/chassis_type",
                    "title": "type",
                    "format": "int64",
                    "x-displayname": "Type"
                },
                "vendor": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/chassis_vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                },
                "version": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/chassis_version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteCpu": {
            "type": "object",
            "description": "CPU information",
            "title": "Cpu information",
            "x-displayname": "Cpu Information",
            "x-ves-proto-message": "ves.io.schema.site.Cpu",
            "properties": {
                "cache": {
                    "type": "integer",
                    "description": " CPU cache size in KB",
                    "title": "cache",
                    "format": "int64",
                    "x-displayname": "Cache"
                },
                "cores": {
                    "type": "integer",
                    "description": " number of physical CPU cores",
                    "title": "cores",
                    "format": "int64",
                    "x-displayname": "Cores"
                },
                "cpus": {
                    "type": "integer",
                    "description": " number of physical CPUs",
                    "title": "cpus",
                    "format": "int64",
                    "x-displayname": "CPUs"
                },
                "model": {
                    "type": "string",
                    "description": " CPU model",
                    "title": "model",
                    "x-displayname": "Model"
                },
                "speed": {
                    "type": "integer",
                    "description": " CPU clock rate in MHz",
                    "title": "speed",
                    "format": "int64",
                    "x-displayname": "Speed"
                },
                "threads": {
                    "type": "integer",
                    "description": " number of logical (HT) CPU cores",
                    "title": "threads",
                    "format": "int64",
                    "x-displayname": "Threads"
                },
                "vendor": {
                    "type": "string",
                    "description": " CPU vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                }
            }
        },
        "siteGPU": {
            "type": "object",
            "description": "GPU information on server",
            "title": "GPU",
            "x-displayname": "GPU",
            "x-ves-proto-message": "ves.io.schema.site.GPU",
            "properties": {
                "cuda_version": {
                    "type": "string",
                    "description": " GPU Cuda Version\n\nExample: - \"10.2\"-",
                    "title": "cudaVersion",
                    "x-displayname": "Cuda Version",
                    "x-ves-example": "10.2"
                },
                "driver_version": {
                    "type": "string",
                    "description": " GPU Driver Version\n\nExample: - \"440.82\"-",
                    "title": "driverVersion",
                    "x-displayname": "Driver Version",
                    "x-ves-example": "440.82"
                },
                "gpu_device": {
                    "type": "array",
                    "description": " List of GPU devices in server",
                    "title": "GPUDevice",
                    "items": {
                        "$ref": "#/definitions/siteGPUDevice"
                    },
                    "x-displayname": "GPU devices"
                }
            }
        },
        "siteGPUDevice": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.site.GPUDevice",
            "properties": {
                "id": {
                    "type": "string",
                    "description": " GPU ID\n\nExample: - \"00000000:17:00.0\"-",
                    "title": "id",
                    "x-displayname": "GPU ID",
                    "x-ves-example": "00000000:17:00.0"
                },
                "processes": {
                    "type": "string",
                    "description": " GPU Processes",
                    "title": "processes",
                    "x-displayname": "Processes"
                },
                "product_name": {
                    "type": "string",
                    "description": " GPU Product Name\n\nExample: - \"Quadro P1000\"-",
                    "title": "productName",
                    "x-displayname": "Product Name",
                    "x-ves-example": "Quadro P1000"
                }
            }
        },
        "siteKernel": {
            "type": "object",
            "description": "Kernel information",
            "title": "Kernel Information",
            "x-displayname": "Kernel",
            "x-ves-proto-message": "ves.io.schema.site.Kernel",
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": " kernel architecture",
                    "title": "architecture",
                    "x-displayname": "Architecture"
                },
                "release": {
                    "type": "string",
                    "description": " kernel release",
                    "title": "release",
                    "x-displayname": "Release"
                },
                "version": {
                    "type": "string",
                    "description": " kernel version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteLinkQuality": {
            "type": "string",
            "description": "Link quality determined by VER using different probes\n\nUnknown quality\nLink quality is good\nLink quality is poor\nQuality disabled",
            "title": "Link quality",
            "enum": [
                "QUALITY_UNKNOWN",
                "QUALITY_GOOD",
                "QUALITY_POOR",
                "QUALITY_DISABLED"
            ],
            "default": "QUALITY_UNKNOWN",
            "x-displayname": "Link quality",
            "x-ves-proto-enum": "ves.io.schema.site.LinkQuality"
        },
        "siteLinkType": {
            "type": "string",
            "description": "Link type of interface determined operationally\n\nLink type unknown\nLink type ethernet\nWiFi link of type 802.11ac\nWiFi link of type 802.11bgn\nLink type 4G\nWiFi link\nWan link",
            "title": "Link type",
            "enum": [
                "LINK_TYPE_UNKNOWN",
                "LINK_TYPE_ETHERNET",
                "LINK_TYPE_WIFI_802_11AC",
                "LINK_TYPE_WIFI_802_11BGN",
                "LINK_TYPE_4G",
                "LINK_TYPE_WIFI",
                "LINK_TYPE_WAN"
            ],
            "default": "LINK_TYPE_UNKNOWN",
            "x-displayname": "Link type",
            "x-ves-proto-enum": "ves.io.schema.site.LinkType"
        },
        "siteMemory": {
            "type": "object",
            "description": "Memory information.",
            "title": "Memory Information",
            "x-displayname": "Memory Information",
            "x-ves-proto-message": "ves.io.schema.site.Memory",
            "properties": {
                "size_mb": {
                    "type": "integer",
                    "description": " RAM size in MB",
                    "title": "size_mb",
                    "format": "int64",
                    "x-displayname": "RAM"
                },
                "speed": {
                    "type": "integer",
                    "description": " RAM data rate in MT/s",
                    "title": "speed",
                    "format": "int64",
                    "x-displayname": "Speed"
                },
                "type": {
                    "type": "string",
                    "description": " type of memory, eg. DDR4",
                    "title": "type",
                    "x-displayname": "Type"
                }
            }
        },
        "siteNetworkDevice": {
            "type": "object",
            "description": "NetworkDevice information.",
            "title": "Network Device Information",
            "x-displayname": "Network Device Information",
            "x-ves-proto-message": "ves.io.schema.site.NetworkDevice",
            "properties": {
                "driver": {
                    "type": "string",
                    "description": " driver of device, eg. e1000e",
                    "title": "driver",
                    "x-displayname": "Driver"
                },
                "ip_address": {
                    "type": "array",
                    "description": " ip address on interface",
                    "title": "ip_address",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IP Address"
                },
                "link_quality": {
                    "description": " Link quality for the interface",
                    "title": "Link quality status",
                    "$ref": "#/definitions/siteLinkQuality",
                    "x-displayname": "Link Quality"
                },
                "link_type": {
                    "description": " Link type for the interface",
                    "title": "Link type",
                    "$ref": "#/definitions/siteLinkType",
                    "x-displayname": "Link type"
                },
                "mac_address": {
                    "type": "string",
                    "description": " mac address on interface",
                    "title": "mac_address",
                    "x-displayname": "MAC Address"
                },
                "name": {
                    "type": "string",
                    "description": " name of device, eg. eth0",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "port": {
                    "type": "string",
                    "description": " used port, eg. tp",
                    "title": "port",
                    "x-displayname": "Port"
                },
                "speed": {
                    "type": "integer",
                    "description": " device max supported speed in Mbps",
                    "title": "speed",
                    "format": "int64",
                    "x-displayname": "Speed"
                }
            }
        },
        "siteOS": {
            "type": "object",
            "description": "Details of Operating System",
            "title": "OS",
            "x-displayname": "OS",
            "x-ves-proto-message": "ves.io.schema.site.OS",
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": " Architecture of OS\n\nExample: - \"amd64\"-",
                    "title": "architecture",
                    "x-displayname": "Architecture",
                    "x-ves-example": "amd64"
                },
                "name": {
                    "type": "string",
                    "description": " Name of OS\n\nExample: - \"Container Linux by CoreOS 1855.4.0 (Rhyolite)\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "Container Linux by CoreOS 1855.4.0 (Rhyolite)"
                },
                "release": {
                    "type": "string",
                    "description": " Release of the OS\n\nExample: - \"20.04\"-",
                    "title": "release",
                    "x-displayname": "Release",
                    "x-ves-example": "20.04"
                },
                "vendor": {
                    "type": "string",
                    "description": " Vendor of OS\n\nExample: - \"coreos\"-",
                    "title": "vendor",
                    "x-displayname": "Vendor",
                    "x-ves-example": "coreos"
                },
                "version": {
                    "type": "string",
                    "description": " Version of OS\n\nExample: - \"1855.4.0\"-",
                    "title": "version",
                    "x-displayname": "Version",
                    "x-ves-example": "1855.4.0"
                }
            }
        },
        "siteOsInfo": {
            "type": "object",
            "description": "OsInfo holds information about host OS and HW",
            "title": "OsInfo",
            "x-displayname": "Os Info",
            "x-ves-proto-message": "ves.io.schema.site.OsInfo",
            "properties": {
                "bios": {
                    "description": " Information about bios",
                    "title": "bios",
                    "$ref": "#/definitions/siteBios",
                    "x-displayname": "BIOS"
                },
                "board": {
                    "description": " HW board information",
                    "title": "board",
                    "$ref": "#/definitions/siteBoard",
                    "x-displayname": "Board"
                },
                "chassis": {
                    "description": " HW chassis information",
                    "title": "chassis",
                    "$ref": "#/definitions/siteChassis",
                    "x-displayname": "Chassis"
                },
                "cpu": {
                    "description": " HW CPU information",
                    "title": "cpu",
                    "$ref": "#/definitions/siteCpu",
                    "x-displayname": "CPU"
                },
                "gpu": {
                    "description": " GPU information on server",
                    "title": "GPU",
                    "$ref": "#/definitions/siteGPU",
                    "x-displayname": "GPU"
                },
                "kernel": {
                    "description": " kernel information",
                    "title": "kernel",
                    "$ref": "#/definitions/siteKernel",
                    "x-displayname": "Kernel"
                },
                "memory": {
                    "description": " HW memory information",
                    "title": "memory",
                    "$ref": "#/definitions/siteMemory",
                    "x-displayname": "Memory"
                },
                "network": {
                    "type": "array",
                    "description": " List of network devices in server",
                    "title": "network",
                    "items": {
                        "$ref": "#/definitions/siteNetworkDevice"
                    },
                    "x-displayname": "Network"
                },
                "os": {
                    "description": " os holds all general OS information",
                    "title": "os",
                    "$ref": "#/definitions/siteOS",
                    "x-displayname": "Operating System"
                },
                "product": {
                    "description": " HW product information",
                    "title": "product",
                    "$ref": "#/definitions/siteProduct",
                    "x-displayname": "Product"
                },
                "storage": {
                    "type": "array",
                    "description": " List of storage devices in server",
                    "title": "storage",
                    "items": {
                        "$ref": "#/definitions/siteStorageDevice"
                    },
                    "x-displayname": "Storage"
                },
                "usb": {
                    "type": "array",
                    "description": " List of USB devices in server",
                    "title": "USBDevice",
                    "items": {
                        "$ref": "#/definitions/siteUSBDevice"
                    },
                    "x-displayname": "USB devices"
                }
            }
        },
        "siteProduct": {
            "type": "object",
            "description": "Product information",
            "title": "Product Information",
            "x-displayname": "Product Information",
            "x-ves-proto-message": "ves.io.schema.site.Product",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " product name, eg. for aws m5a.xlarge. Info taken from /sys/class/dmi/id/product_name",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "serial": {
                    "type": "string",
                    "description": " serial number, eg. for aws ec254b6d-9676-1a51-8b10-21370dbdc3e5. Info taken from /sys/class/dmi/id/product_serial",
                    "title": "serial",
                    "x-displayname": "Serial Number"
                },
                "vendor": {
                    "type": "string",
                    "description": " vendor name, eg. for aws Amazon EC2. Info taken from /sys/class/dmi/id/product_vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                },
                "version": {
                    "type": "string",
                    "description": " version name. Info taken from /sys/class/dmi/id/product_version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteStorageDevice": {
            "type": "object",
            "description": "StorageDevice information.",
            "title": "Storage Information",
            "x-displayname": "Storage Information",
            "x-ves-proto-message": "ves.io.schema.site.StorageDevice",
            "properties": {
                "driver": {
                    "type": "string",
                    "description": " driver of device",
                    "title": "driver",
                    "x-displayname": "Driver"
                },
                "model": {
                    "type": "string",
                    "description": " model of device",
                    "title": "model",
                    "x-displayname": "Model"
                },
                "name": {
                    "type": "string",
                    "description": " name of device, eg. nvme0n1",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "serial": {
                    "type": "string",
                    "description": " serial of device",
                    "title": "serial",
                    "x-displayname": "Serial Number"
                },
                "size_gb": {
                    "type": "integer",
                    "description": " device size in GB",
                    "title": "size_gb",
                    "format": "int64",
                    "x-displayname": "Size(GB)"
                },
                "vendor": {
                    "type": "string",
                    "description": " vendor of device",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                }
            }
        },
        "siteUSBDevice": {
            "type": "object",
            "description": "Information about USB device",
            "title": "USB device",
            "x-displayname": "USB Device informaton",
            "x-ves-proto-message": "ves.io.schema.site.USBDevice",
            "properties": {
                "address": {
                    "type": "integer",
                    "description": " Address of the device on the bus in decimal\n\nExample: - \"4\"-",
                    "title": "address",
                    "format": "int64",
                    "x-displayname": "Address",
                    "x-ves-example": "4"
                },
                "b_device_class": {
                    "type": "string",
                    "description": " The class of this device\n\nExample: - \"hub\"-",
                    "title": "b_device_class",
                    "x-displayname": "Class",
                    "x-ves-example": "hub"
                },
                "b_device_protocol": {
                    "type": "string",
                    "description": " The protocol (within the sub-class) of this device\n\nExample: - \"0002\"-",
                    "title": "b_device_protocol",
                    "x-displayname": "Protocol",
                    "x-ves-example": "0002"
                },
                "b_device_sub_class": {
                    "type": "string",
                    "description": " The sub-class (within the class) of this device\n\nExample: - \"hub\"-",
                    "title": "b_device_sub_class",
                    "x-displayname": "Subclass",
                    "x-ves-example": "hub"
                },
                "b_max_packet_size": {
                    "type": "integer",
                    "description": " Maximum size of the control transfer\n\nExample: - \"64\"-",
                    "title": "b_max_packet_size",
                    "format": "int64",
                    "x-displayname": "Max packet size",
                    "x-ves-example": "64"
                },
                "bcd_device": {
                    "type": "string",
                    "description": " The device version\n\nExample: - \"5.05\"-",
                    "title": "bcd_device",
                    "x-displayname": "BCD Device",
                    "x-ves-example": "5.05"
                },
                "bcd_usb": {
                    "type": "string",
                    "description": " USB Specification Release Number\n\nExample: - \"2.0\"-",
                    "title": "bcd_usb",
                    "x-displayname": "BCD Spec",
                    "x-ves-example": "2.0"
                },
                "bus": {
                    "type": "integer",
                    "description": " The bus on which the device was detected in decimal\n\nExample: - \"1\"-",
                    "title": "bus",
                    "format": "int64",
                    "x-displayname": "Bus",
                    "x-ves-example": "1"
                },
                "description": {
                    "type": "string",
                    "description": " Device description\n\nExample: - \"NetVista Full Width Keyboard (IBM Corp.)\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "NetVista Full Width Keyboard (IBM Corp.)"
                },
                "i_manufacturer": {
                    "type": "string",
                    "description": " Manufacturer name\n\nExample: - \"Voltera\"-",
                    "title": "i_manufacturer",
                    "x-displayname": "Manufacturer",
                    "x-ves-example": "Voltera"
                },
                "i_product": {
                    "type": "string",
                    "description": " Product name reported by device\n\nExample: - \"xHCI Host Controller\"-",
                    "title": "i_product",
                    "x-displayname": "Device product",
                    "x-ves-example": "xHCI Host Controller"
                },
                "i_serial": {
                    "type": "string",
                    "description": " Index of Serial Number String Descriptor\n\nExample: - \"0000:00:14.0\"-",
                    "title": "i_serial_number",
                    "x-displayname": "iSerialNumber",
                    "x-ves-example": "0000:00:14.0"
                },
                "id_product": {
                    "type": "string",
                    "description": " Product ID (Assigned by Manufacturer) in hex\n\nExample: - \"0x0002\"-",
                    "title": "id_product",
                    "x-displayname": "Product ID",
                    "x-ves-example": "0x0002"
                },
                "id_vendor": {
                    "type": "string",
                    "description": " Vendor ID (Assigned by USB Org) in hex\n\nExample: - \"0x1d6b\"-",
                    "title": "id_vendor",
                    "x-displayname": "Vendor ID",
                    "x-ves-example": "0x1d6b"
                },
                "port": {
                    "type": "integer",
                    "description": " Port on which the device was detected in decimal\n\nExample: - \"3\"-",
                    "title": "port",
                    "format": "int64",
                    "x-displayname": "Port",
                    "x-ves-example": "3"
                },
                "product_name": {
                    "type": "string",
                    "description": " Product ID translated to name (if available)\n\nExample: - \"NetVista Full Width Keyboard\"-",
                    "title": "product_name",
                    "x-displayname": "Product name",
                    "x-ves-example": "NetVista Full Width Keyboard"
                },
                "speed": {
                    "type": "string",
                    "description": " The negotiated operating speed for the device\n\nExample: - \"high\"-",
                    "title": "speed",
                    "x-displayname": "Speed",
                    "x-ves-example": "high"
                },
                "usb_type": {
                    "description": " Type of USB device\n\nExample: - \"INTERNAL\"-",
                    "title": "usb_type",
                    "$ref": "#/definitions/siteUsbType",
                    "x-displayname": "USB Type",
                    "x-ves-example": "INTERNAL"
                },
                "vendor_name": {
                    "type": "string",
                    "description": " Vendor ID translated to name (if available)\n\nExample: - \"IBM Corp.\"-",
                    "title": "vendor_name",
                    "x-displayname": "Vendor name",
                    "x-ves-example": "IBM Corp."
                }
            }
        },
        "siteUsbType": {
            "type": "string",
            "description": "Type of USB device\n\nUnknown USB device type\nInternal USB present in Certified HW\nUSB device present during node registration\nUSB device that can be matched by USB rules",
            "title": "UsbType",
            "enum": [
                "UNKNOWN_USB",
                "INTERNAL",
                "REGISTERED",
                "CONFIGURABLE"
            ],
            "default": "UNKNOWN_USB",
            "x-displayname": "USB Type",
            "x-ves-proto-enum": "ves.io.schema.site.UsbType"
        }
    },
    "x-displayname": "Registration",
    "x-ves-proto-file": "ves.io/schema/registration/public_customapi.proto"
}`

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/registration/object.proto

package registration

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Registration object
//
// x-displayName: "Object"
// Registration object stores node registration and information regarding the node
type Object struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard object's metadata
	Metadata *schema.ObjectMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// System generated object's metadata
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// Specification of the desired behavior of the registration
	Spec *SpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	// x-displayName: "Status"
	// Most recently observed status of the registration
	Status *StatusType `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Object) Reset()      { *m = Object{} }
func (*Object) ProtoMessage() {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_b290cfc83001a664, []int{0}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *Object) GetSpec() *SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Object) GetStatus() *StatusType {
	if m != nil {
		return m.Status
	}
	return nil
}

// Shape of the token specification
//
// x-displayName: "Specification"
// Shape of the registration specification
type SpecType struct {
	// gc_spec
	//
	// x-displayName: "GC Spec"
	GcSpec *GlobalSpecType `protobuf:"bytes,1,opt,name=gc_spec,json=gcSpec,proto3" json:"gc_spec,omitempty"`
}

func (m *SpecType) Reset()      { *m = SpecType{} }
func (*SpecType) ProtoMessage() {}
func (*SpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b290cfc83001a664, []int{1}
}
func (m *SpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecType.Merge(m, src)
}
func (m *SpecType) XXX_Size() int {
	return m.Size()
}
func (m *SpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecType proto.InternalMessageInfo

func (m *SpecType) GetGcSpec() *GlobalSpecType {
	if m != nil {
		return m.GcSpec
	}
	return nil
}

// Shape of the registration status
//
// x-displayName: "Status Type"
// Most recent observer status of object
type StatusType struct {
	// object status
	//
	// x-displayName: "Object Status"
	// Shape of the registration status
	ObjectStatus *schema.StatusType `protobuf:"bytes,1,opt,name=object_status,json=objectStatus,proto3" json:"object_status,omitempty"`
	// Current state of registration
	//
	// x-displayName: "Registration state"
	// It defines current state of registration and if (and how) it should be handled.
	CurrentState ObjectState `protobuf:"varint,2,opt,name=current_state,json=currentState,proto3,enum=ves.io.schema.registration.ObjectState" json:"current_state,omitempty"`
}

func (m *StatusType) Reset()      { *m = StatusType{} }
func (*StatusType) ProtoMessage() {}
func (*StatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b290cfc83001a664, []int{2}
}
func (m *StatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusType.Merge(m, src)
}
func (m *StatusType) XXX_Size() int {
	return m.Size()
}
func (m *StatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusType.DiscardUnknown(m)
}

var xxx_messageInfo_StatusType proto.InternalMessageInfo

func (m *StatusType) GetObjectStatus() *schema.StatusType {
	if m != nil {
		return m.ObjectStatus
	}
	return nil
}

func (m *StatusType) GetCurrentState() ObjectState {
	if m != nil {
		return m.CurrentState
	}
	return NOTSET
}

func init() {
	proto.RegisterType((*Object)(nil), "ves.io.schema.registration.Object")
	golang_proto.RegisterType((*Object)(nil), "ves.io.schema.registration.Object")
	proto.RegisterType((*SpecType)(nil), "ves.io.schema.registration.SpecType")
	golang_proto.RegisterType((*SpecType)(nil), "ves.io.schema.registration.SpecType")
	proto.RegisterType((*StatusType)(nil), "ves.io.schema.registration.StatusType")
	golang_proto.RegisterType((*StatusType)(nil), "ves.io.schema.registration.StatusType")
}

func init() {
	proto.RegisterFile("ves.io/schema/registration/object.proto", fileDescriptor_b290cfc83001a664)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/registration/object.proto", fileDescriptor_b290cfc83001a664)
}

var fileDescriptor_b290cfc83001a664 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x77, 0x5a, 0x7e, 0x0b, 0x99, 0x1f, 0x60, 0xb2, 0xa7, 0x82, 0x71, 0x42, 0xaa, 0x01,
	0x63, 0xba, 0xbb, 0xa1, 0x68, 0xa2, 0x1c, 0x8a, 0x8a, 0x09, 0x6a, 0x20, 0x18, 0xd0, 0x8b, 0x17,
	0x32, 0xbb, 0x7d, 0xba, 0xac, 0x76, 0x77, 0x36, 0x33, 0xb3, 0x2b, 0xdc, 0x8c, 0xaf, 0xc0, 0xc4,
	0xf8, 0x06, 0xf4, 0xe2, 0xcb, 0x10, 0x4f, 0xc6, 0x13, 0xf1, 0xd4, 0xa3, 0xdd, 0x5e, 0x3c, 0x12,
	0x2e, 0x5e, 0x0d, 0x33, 0x6d, 0xa1, 0x8d, 0xf4, 0xd4, 0xdb, 0xcc, 0x3e, 0xdf, 0xef, 0x67, 0xfe,
	0x7d, 0xf7, 0xc1, 0x4b, 0x19, 0x08, 0x27, 0x64, 0xae, 0xf0, 0xf7, 0x21, 0xa2, 0x2e, 0x87, 0x20,
	0x14, 0x92, 0x53, 0x19, 0xb2, 0xd8, 0x65, 0xde, 0x2b, 0xf0, 0xa5, 0x93, 0x70, 0x26, 0x99, 0x35,
	0xaf, 0x85, 0x8e, 0x16, 0x3a, 0x17, 0x85, 0xf3, 0x76, 0x10, 0xca, 0xfd, 0xd4, 0x73, 0x7c, 0x16,
	0xb9, 0x01, 0x0b, 0x98, 0xab, 0x2c, 0x5e, 0xda, 0x50, 0x33, 0x35, 0x51, 0x23, 0x8d, 0x9a, 0xbf,
	0x3a, 0xb8, 0x26, 0x4b, 0xce, 0x20, 0xa2, 0x5b, 0x5c, 0x1c, 0xb1, 0x21, 0x79, 0x98, 0x40, 0x4f,
	0x37, 0x37, 0xa8, 0xbb, 0x58, 0x2a, 0x0f, 0x96, 0x32, 0x10, 0x10, 0x67, 0x83, 0xcb, 0x94, 0x3f,
	0xff, 0x87, 0xcd, 0x6d, 0x75, 0x3e, 0xeb, 0x1e, 0x9e, 0x8a, 0x40, 0xd2, 0x3a, 0x95, 0xb4, 0x84,
	0x16, 0xd0, 0xcd, 0xff, 0xab, 0xd7, 0x9c, 0xc1, 0xc3, 0x6a, 0xe1, 0x16, 0x48, 0xfa, 0xfc, 0x30,
	0x81, 0x9d, 0xbe, 0xdc, 0xda, 0xc4, 0x57, 0xc4, 0xa1, 0x90, 0x10, 0xed, 0xf5, 0x09, 0x05, 0x45,
	0xb8, 0x3e, 0x44, 0xd8, 0x55, 0xaa, 0x21, 0xce, 0xac, 0xf6, 0x6e, 0xf5, 0x68, 0x77, 0xf1, 0x84,
	0x48, 0xc0, 0x2f, 0x15, 0x15, 0xe2, 0x86, 0x73, 0xf9, 0x8d, 0x3b, 0xbb, 0x09, 0xf8, 0x8a, 0xa1,
	0x1c, 0x56, 0x0d, 0x9b, 0x42, 0x52, 0x99, 0x8a, 0xd2, 0x84, 0xf2, 0x2e, 0x8e, 0xf4, 0x2a, 0xa5,
	0x72, 0x77, 0x5d, 0xab, 0x1f, 0x8b, 0xa7, 0xb5, 0xc9, 0xe5, 0x4a, 0xb5, 0xb2, 0x52, 0xb9, 0xfd,
	0x6e, 0xcd, 0xd4, 0xfb, 0xfa, 0x76, 0x54, 0x2a, 0xdc, 0x47, 0x3f, 0x8f, 0x4a, 0x7f, 0x0a, 0xf8,
	0x31, 0x2e, 0x6e, 0x80, 0xb4, 0x1e, 0x34, 0xee, 0x1c, 0xf8, 0xb6, 0x08, 0x25, 0xd8, 0x11, 0x8d,
	0x69, 0x00, 0x11, 0xc4, 0xd2, 0x16, 0x92, 0xc6, 0x75, 0xca, 0xeb, 0x76, 0xc4, 0xe2, 0x50, 0x32,
	0x5e, 0x59, 0xc8, 0x40, 0xd8, 0x21, 0xb3, 0xc3, 0xb8, 0xc1, 0xa9, 0x90, 0x3c, 0xf5, 0x65, 0xca,
	0xc1, 0xe6, 0x40, 0xeb, 0xf8, 0x29, 0x9e, 0xdc, 0x81, 0xa4, 0x49, 0x7d, 0xb0, 0xd6, 0x46, 0xd3,
	0x52, 0x01, 0x97, 0xa2, 0xde, 0xf0, 0x50, 0x02, 0x7e, 0x82, 0xcd, 0x75, 0x0e, 0x54, 0x8e, 0x07,
	0xf5, 0x08, 0x9a, 0x30, 0x1e, 0xd4, 0xc4, 0x66, 0x28, 0xc6, 0x71, 0x59, 0xe5, 0x6d, 0x3c, 0xd5,
	0x7b, 0x69, 0x6b, 0x1d, 0x4f, 0x06, 0xfe, 0x9e, 0x0a, 0x88, 0x4e, 0xe9, 0xad, 0x51, 0x8f, 0xbc,
	0xd1, 0x64, 0x1e, 0x6d, 0xf6, 0x63, 0x62, 0x06, 0xfe, 0xd9, 0xb8, 0xfc, 0x09, 0x61, 0x7c, 0xfe,
	0xfe, 0x56, 0x0d, 0xcf, 0xe8, 0x9f, 0x7c, 0xaf, 0x1b, 0x1f, 0x4d, 0x9e, 0x1b, 0x4e, 0xef, 0x79,
	0x62, 0xa6, 0xb5, 0x5e, 0x7f, 0xb1, 0x36, 0xf1, 0x8c, 0x9f, 0x72, 0x0e, 0xb1, 0x06, 0x80, 0x4a,
	0xff, 0x6c, 0x75, 0x69, 0xd4, 0xce, 0xb6, 0xfb, 0x00, 0xd8, 0x99, 0xee, 0xba, 0xd5, 0x6c, 0xd5,
	0x3c, 0xad, 0x15, 0x97, 0x2b, 0xd5, 0x87, 0x1f, 0xd0, 0x8f, 0x5a, 0x61, 0xfd, 0xc5, 0x71, 0x9b,
	0x18, 0xad, 0x36, 0x31, 0x4e, 0xda, 0x04, 0xbd, 0xcd, 0x09, 0xfa, 0x92, 0x13, 0xf4, 0x3d, 0x27,
	0xe8, 0x38, 0x27, 0xa8, 0x95, 0x13, 0xf4, 0x2b, 0x27, 0xe8, 0x77, 0x4e, 0x8c, 0x93, 0x9c, 0xa0,
	0xf7, 0x1d, 0x62, 0x7c, 0xed, 0x10, 0x74, 0xdc, 0x21, 0x46, 0xab, 0x43, 0x8c, 0x97, 0xcf, 0x02,
	0x96, 0xbc, 0x0e, 0x9c, 0x8c, 0x35, 0x25, 0x70, 0x4e, 0x9d, 0x54, 0xb8, 0x6a, 0xd0, 0x60, 0x3c,
	0xb2, 0x13, 0xce, 0xb2, 0xb0, 0x0e, 0xdc, 0xee, 0x95, 0xdd, 0xc4, 0x0b, 0x98, 0x0b, 0x07, 0xb2,
	0xdb, 0x32, 0xfe, 0xd1, 0x7c, 0x3c, 0x53, 0x35, 0x8e, 0x95, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x42, 0x41, 0x42, 0x4e, 0x32, 0x05, 0x00, 0x00,
}

func (this *Object) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Object)
	if !ok {
		that2, ok := that.(Object)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *SpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecType)
	if !ok {
		that2, ok := that.(SpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcSpec.Equal(that1.GcSpec) {
		return false
	}
	return true
}
func (this *StatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusType)
	if !ok {
		that2, ok := that.(StatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectStatus.Equal(that1.ObjectStatus) {
		return false
	}
	if this.CurrentState != that1.CurrentState {
		return false
	}
	return true
}
func (this *Object) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&registration.Object{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&registration.SpecType{")
	if this.GcSpec != nil {
		s = append(s, "GcSpec: "+fmt.Sprintf("%#v", this.GcSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.StatusType{")
	if this.ObjectStatus != nil {
		s = append(s, "ObjectStatus: "+fmt.Sprintf("%#v", this.ObjectStatus)+",\n")
	}
	s = append(s, "CurrentState: "+fmt.Sprintf("%#v", this.CurrentState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringObject(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GcSpec != nil {
		{
			size, err := m.GcSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentState != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.CurrentState))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjectStatus != nil {
		{
			size, err := m.ObjectStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *SpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcSpec != nil {
		l = m.GcSpec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *StatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectStatus != nil {
		l = m.ObjectStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.CurrentState != 0 {
		n += 1 + sovObject(uint64(m.CurrentState))
	}
	return n
}

func sovObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObject(x uint64) (n int) {
	return sovObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Object) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Object{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "SpecType", "SpecType", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "StatusType", "StatusType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecType{`,
		`GcSpec:` + strings.Replace(fmt.Sprintf("%v", this.GcSpec), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusType{`,
		`ObjectStatus:` + strings.Replace(fmt.Sprintf("%v", this.ObjectStatus), "StatusType", "schema.StatusType", 1) + `,`,
		`CurrentState:` + fmt.Sprintf("%v", this.CurrentState) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringObject(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusType{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GcSpec == nil {
				m.GcSpec = &GlobalSpecType{}
			}
			if err := m.GcSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectStatus == nil {
				m.ObjectStatus = &schema.StatusType{}
			}
			if err := m.ObjectStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentState", wireType)
			}
			m.CurrentState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentState |= ObjectState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObject = fmt.Errorf("proto: unexpected end of group")
)

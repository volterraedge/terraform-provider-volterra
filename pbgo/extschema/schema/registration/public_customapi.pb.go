// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/registration/public_customapi.proto

// registration
//
// x-displayName: "Registration"
// registration object controls node admission process and stores all information about node itself. Valid token is required
// to be presented when registration is created using public custom API. Every node in given site is represented by it's registration.
// registration must have unique hostname for given cluster_name. Registration state is changed to RETIRED in order to decommission node.
// Registration can't be changed by user after creation.

package registration

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetResponseFormatCode
//
// x-displayName: "Get Response Format"
// This is the various forms that can be requested to be sent in the GetResponse
type GetResponseFormatCode int32

const (
	// x-displayName: "Default Format"
	// Default format of returned resource
	GET_RSP_FORMAT_DEFAULT GetResponseFormatCode = 0
	// x-displayName: "Create request Format"
	// Response should be in CreateRequest format
	GET_RSP_FORMAT_FOR_CREATE GetResponseFormatCode = 1
	// x-displayName: "Replace request format"
	// Response should be in ReplaceRequest format
	GET_RSP_FORMAT_FOR_REPLACE GetResponseFormatCode = 2
	// x-displayName: "GetSpecType format"
	// Response should be in format of GetSpecType
	GET_RSP_FORMAT_READ GetResponseFormatCode = 4
	// x-displayName: "Referring Objects"
	// Response should have other objects referring to this object
	GET_RSP_FORMAT_REFERRING_OBJECTS GetResponseFormatCode = 5
	// x-displayName: "Broken Referred Objects"
	// Response should have deleted and disabled objects referrred by this object
	GET_RSP_FORMAT_BROKEN_REFERENCES GetResponseFormatCode = 6
)

var GetResponseFormatCode_name = map[int32]string{
	0: "GET_RSP_FORMAT_DEFAULT",
	1: "GET_RSP_FORMAT_FOR_CREATE",
	2: "GET_RSP_FORMAT_FOR_REPLACE",
	4: "GET_RSP_FORMAT_READ",
	5: "GET_RSP_FORMAT_REFERRING_OBJECTS",
	6: "GET_RSP_FORMAT_BROKEN_REFERENCES",
}

var GetResponseFormatCode_value = map[string]int32{
	"GET_RSP_FORMAT_DEFAULT":           0,
	"GET_RSP_FORMAT_FOR_CREATE":        1,
	"GET_RSP_FORMAT_FOR_REPLACE":       2,
	"GET_RSP_FORMAT_READ":              4,
	"GET_RSP_FORMAT_REFERRING_OBJECTS": 5,
	"GET_RSP_FORMAT_BROKEN_REFERENCES": 6,
}

func (GetResponseFormatCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{0}
}

// GetRequest is used to get different forms of a registration
//
// x-displayName: "Get Request"
// This is the input message of the 'Get' RPC. Different forms of a resource
// for e.g. a ReplaceRequest form (for editing), a CreateRequest form (for
// creating new instance of registration) etc. can be fetched
type GetRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace in which the configuration object is present
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of the configuration object to be fetched
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// response_format
	//
	// x-displayName: "Response Format"
	// The format in which the configuration object is to be fetched. This could be for example
	//     - in GetSpec form for the contents of object
	//     - in CreateRequest form to create a new similar object
	//     - to ReplaceRequest form to replace changeable values
	ResponseFormat GetResponseFormatCode `protobuf:"varint,3,opt,name=response_format,json=responseFormat,proto3,enum=ves.io.schema.registration.GetResponseFormatCode" json:"response_format,omitempty"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{0}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRequest) GetResponseFormat() GetResponseFormatCode {
	if m != nil {
		return m.ResponseFormat
	}
	return GET_RSP_FORMAT_DEFAULT
}

// GetResponse is the shape of a read registration
//
// x-displayName: "Get Response"
// This is the output message of the 'Get' RPC
type GetResponse struct {
	// object
	//
	// x-displayName: "Object"
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// create_form
	//
	// x-displayName: "CreateRequest Format"
	// Format used to create a new similar object
	CreateForm *CreateRequest `protobuf:"bytes,2,opt,name=create_form,json=createForm,proto3" json:"create_form,omitempty"`
	// replace_form
	//
	// x-displayName: "ReplaceRequest Format"
	// Format to replace changeable values in object
	ReplaceForm *ReplaceRequest `protobuf:"bytes,3,opt,name=replace_form,json=replaceForm,proto3" json:"replace_form,omitempty"`
	// resource_version
	//
	// x-displayName: "Resource Version"
	// x-example: "42"
	// Version of the object
	ResourceVersion string `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes of the object like name, labels etc.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system metadata
	//
	// x-displayName: "System Metadata"
	// System generated attributes of this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,7,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object read
	Spec *GetSpecType `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
	// referring_objects
	//
	// x-displayName: "Referring Objects"
	// The set of objects that are referring to this object in their spec
	ReferringObjects []*schema.ObjectRefType `protobuf:"bytes,8,rep,name=referring_objects,json=referringObjects,proto3" json:"referring_objects,omitempty"`
	// deleted_referred_objects
	//
	// x-displayName: "Deleted Referred Objects"
	// The set of deleted objects that are referred by this object
	DeletedReferredObjects []*schema.ObjectRefType `protobuf:"bytes,9,rep,name=deleted_referred_objects,json=deletedReferredObjects,proto3" json:"deleted_referred_objects,omitempty"`
	// disabled_referred_objects
	//
	// x-displayName: "Disabled Referred Objects"
	// The set of deleted objects that are referred by this object
	DisabledReferredObjects []*schema.ObjectRefType `protobuf:"bytes,10,rep,name=disabled_referred_objects,json=disabledReferredObjects,proto3" json:"disabled_referred_objects,omitempty"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{1}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *GetResponse) GetCreateForm() *CreateRequest {
	if m != nil {
		return m.CreateForm
	}
	return nil
}

func (m *GetResponse) GetReplaceForm() *ReplaceRequest {
	if m != nil {
		return m.ReplaceForm
	}
	return nil
}

func (m *GetResponse) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *GetResponse) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetResponse) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *GetResponse) GetSpec() *GetSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *GetResponse) GetReferringObjects() []*schema.ObjectRefType {
	if m != nil {
		return m.ReferringObjects
	}
	return nil
}

func (m *GetResponse) GetDeletedReferredObjects() []*schema.ObjectRefType {
	if m != nil {
		return m.DeletedReferredObjects
	}
	return nil
}

func (m *GetResponse) GetDisabledReferredObjects() []*schema.ObjectRefType {
	if m != nil {
		return m.DisabledReferredObjects
	}
	return nil
}

// ListRequest is used to get a collection of registration
//
// x-displayName: "List Request"
// This is the input message of the 'List' RPC. Fields can be used to control
// scope and filtering of collection.
type ListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of registration
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// label_filter
	//
	// x-displayName: "Label Filter"
	// x-example: "env in (staging, testing), tier in (web, db)"
	// A LabelSelectorType expression that every item in list response will satisfy
	LabelFilter string `protobuf:"bytes,2,opt,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// report_fields
	//
	// x-displayName: "Report Fields"
	// x-example: ""
	// Extra fields to return along with summary fields
	ReportFields []string `protobuf:"bytes,3,rep,name=report_fields,json=reportFields,proto3" json:"report_fields,omitempty"`
	// report_status_fields
	//
	// x-displayName: "Report Status Fields"
	// x-example: ""
	// Extra status fields to return along with summary fields
	ReportStatusFields []string `protobuf:"bytes,4,rep,name=report_status_fields,json=reportStatusFields,proto3" json:"report_status_fields,omitempty"`
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{2}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListRequest) GetLabelFilter() string {
	if m != nil {
		return m.LabelFilter
	}
	return ""
}

func (m *ListRequest) GetReportFields() []string {
	if m != nil {
		return m.ReportFields
	}
	return nil
}

func (m *ListRequest) GetReportStatusFields() []string {
	if m != nil {
		return m.ReportStatusFields
	}
	return nil
}

// ListResponseItem is an individual item in a collection of registration
//
// x-displayName: "List Item"
// By default a summary of registration is returned in 'List'. By setting
// 'report_fields' in the ListRequest more details of each item can be got.
type ListResponseItem struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// The tenant this item belongs to
	Tenant string `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace this item belongs to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of this registration
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// uid
	//
	// x-displayName: "UID"
	// x-example: "d27938ba-967e-40a7-9709-57b8627f9f75"
	// The unique uid of this registration
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// The description set for this registration
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// disabled
	//
	// x-displayName: "Disabled"
	// A value of true indicates registration is administratively disabled
	Disabled bool `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// labels
	//
	// x-displayName: "Labels"
	// The set of labels present on this registration
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// annotations
	//
	// x-displayName: "Annotations"
	// The set of annotations present on this registration
	Annotations map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// owner_view
	//
	// x-displayName: "Owner View"
	// Reference to the view object that owns this object.
	// If there is no view owner, this field will be nil.
	// If not nil, this object can only be edited/deleted through the view
	OwnerView *schema.ViewRefType `protobuf:"bytes,9,opt,name=owner_view,json=ownerView,proto3" json:"owner_view,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// If list request has report_fields set then metadata will
	// contain all the metadata associated with the object.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,13,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// If list request has report_fields set then system_metadata will
	// contain all the system generated details of this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,14,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// object
	//
	// x-displayName: "Object"
	// If ListRequest has any specified report_fields, it will appear in object
	// DEPRECATED by get_spec, metadata and system_metadata
	Object *Object `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	// get_spec
	//
	// x-displayName: "Get Specification"
	// If ListRequest has any specified report_fields, it will appear in object
	GetSpec *GetSpecType `protobuf:"bytes,7,opt,name=get_spec,json=getSpec,proto3" json:"get_spec,omitempty"`
}

func (m *ListResponseItem) Reset()      { *m = ListResponseItem{} }
func (*ListResponseItem) ProtoMessage() {}
func (*ListResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{3}
}
func (m *ListResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponseItem.Merge(m, src)
}
func (m *ListResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *ListResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponseItem proto.InternalMessageInfo

func (m *ListResponseItem) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListResponseItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListResponseItem) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ListResponseItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListResponseItem) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *ListResponseItem) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ListResponseItem) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ListResponseItem) GetOwnerView() *schema.ViewRefType {
	if m != nil {
		return m.OwnerView
	}
	return nil
}

func (m *ListResponseItem) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ListResponseItem) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ListResponseItem) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ListResponseItem) GetGetSpec() *GetSpecType {
	if m != nil {
		return m.GetSpec
	}
	return nil
}

// ListResponse is the collection of registration
//
// x-displayName: "List Response"
// This is the output message of 'List' RPC.
type ListResponse struct {
	// items
	//
	// x-displayName: "Items"
	// items represents the collection in response
	Items []*ListResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// errors
	//
	// x-displayName: "Errors"
	// Errors(if any) while listing items from collection
	Errors []*schema.ErrorType `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{4}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []*ListResponseItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListResponse) GetErrors() []*schema.ErrorType {
	if m != nil {
		return m.Errors
	}
	return nil
}

// DeleteRequest is used to delete a registration
//
// x-displayName: "Delete Request"
// This is the input message of the 'Delete' RPC.
type DeleteRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace in which the configuration object is present
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// Name of the configuration object
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// fail_if_referred
	//
	// x-displayName: "Fail-If-Referred"
	// Fail the delete operation if this object is being referred by other objects
	FailIfReferred bool `protobuf:"varint,3,opt,name=fail_if_referred,json=failIfReferred,proto3" json:"fail_if_referred,omitempty"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{5}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteRequest) GetFailIfReferred() bool {
	if m != nil {
		return m.FailIfReferred
	}
	return false
}

// ListBySiteReq
//
// x-displayName: "List Registrations by Site"
// Request for list registrations by site
type ListBySiteReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Registration namespace, only "system" namespaces is accepted
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// SiteName
	//
	// x-displayName: "Site name"
	// x-required
	// x-example: "ce02"
	// Site name to be used for registration filtering
	SiteName string `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
}

func (m *ListBySiteReq) Reset()      { *m = ListBySiteReq{} }
func (*ListBySiteReq) ProtoMessage() {}
func (*ListBySiteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{6}
}
func (m *ListBySiteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBySiteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBySiteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBySiteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBySiteReq.Merge(m, src)
}
func (m *ListBySiteReq) XXX_Size() int {
	return m.Size()
}
func (m *ListBySiteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBySiteReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListBySiteReq proto.InternalMessageInfo

func (m *ListBySiteReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListBySiteReq) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

// ListStateReq
//
// x-displayName: "List State Request"
// Request for list registrations
type ListStateReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Registration namespace, only "system" namespaces is accepted
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// ObjectState
	//
	// x-displayName: "Object State"
	// x-required
	// State to get list of registrations (NEW, APPROVED, ADMITTED or RETIRED)
	State ObjectState `protobuf:"varint,2,opt,name=state,proto3,enum=ves.io.schema.registration.ObjectState" json:"state,omitempty"`
}

func (m *ListStateReq) Reset()      { *m = ListStateReq{} }
func (*ListStateReq) ProtoMessage() {}
func (*ListStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{7}
}
func (m *ListStateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStateReq.Merge(m, src)
}
func (m *ListStateReq) XXX_Size() int {
	return m.Size()
}
func (m *ListStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListStateReq proto.InternalMessageInfo

func (m *ListStateReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListStateReq) GetState() ObjectState {
	if m != nil {
		return m.State
	}
	return NOTSET
}

// Approval request
//
// x-displayName: "Approval"
// Request for admission approval
type ApprovalReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Registration namespace, only "system" namespaces is accepted
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "r-e9030963-639e-41cd-aba6-261504f4a6be"
	// Registration name (= "r-" + uid) to approve. Registration name is taken from listing pending registrations.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Target registration state
	//
	// x-displayName: "Target state"
	// x-required
	// State to approve (APPROVED or RETIRED)
	State ObjectState `protobuf:"varint,3,opt,name=state,proto3,enum=ves.io.schema.registration.ObjectState" json:"state,omitempty"`
	// Passport
	//
	// x-displayName: "Passport"
	// Passport to be changed in registration, must be valid and always provided
	Passport *Passport `protobuf:"bytes,4,opt,name=passport,proto3" json:"passport,omitempty"`
	// Labels
	//
	// Optional.
	// x-displayName: "Labels"
	// x-example: "key:value"
	// Labels to set (add if missing, overwrite if exists)
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations
	//
	// Optional.
	// x-displayName: "Annotations"
	// x-example: "key:value"
	// Annotations to set (add if missing, overwrite if exists)
	Annotations map[string]string `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Connected Region
	//
	// x-displayName: "Connected Region"
	// x-example: "value"
	// Optional.
	// closest REs to which to connect in selected region. If there is more than one RE with the label
	// then select 2 of them. Otherwise default "geo-ip" database is consulted to find closest RE(s) to
	// public ip with which node registration request was received.
	ConnectedRegion string `protobuf:"bytes,7,opt,name=connected_region,json=connectedRegion,proto3" json:"connected_region,omitempty"`
	// Site to site tunnel type
	//
	// x-displayName: "Site to Site Tunnel Type"
	// Tunnel type specifies the type of tunnel to be used for traffic between the sites.
	TunnelType schema.SiteToSiteTunnelType `protobuf:"varint,8,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
}

func (m *ApprovalReq) Reset()      { *m = ApprovalReq{} }
func (*ApprovalReq) ProtoMessage() {}
func (*ApprovalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{8}
}
func (m *ApprovalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApprovalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApprovalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApprovalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovalReq.Merge(m, src)
}
func (m *ApprovalReq) XXX_Size() int {
	return m.Size()
}
func (m *ApprovalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovalReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovalReq proto.InternalMessageInfo

func (m *ApprovalReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApprovalReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApprovalReq) GetState() ObjectState {
	if m != nil {
		return m.State
	}
	return NOTSET
}

func (m *ApprovalReq) GetPassport() *Passport {
	if m != nil {
		return m.Passport
	}
	return nil
}

func (m *ApprovalReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ApprovalReq) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ApprovalReq) GetConnectedRegion() string {
	if m != nil {
		return m.ConnectedRegion
	}
	return ""
}

func (m *ApprovalReq) GetTunnelType() schema.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return schema.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

// Configuration request
//
// x-displayName: "Configuration Request"
// Request to get configuration
type ConfigReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Registration namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "r-e9030963-639e-41cd-aba6-261504f4a6be"
	// Registration name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Token
	//
	// x-displayName: "Token"
	// x-required
	// x-example: "835af393-3056-46af-a9e4-57613fbe0339"
	// Token - verify node identity
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ConfigReq) Reset()      { *m = ConfigReq{} }
func (*ConfigReq) ProtoMessage() {}
func (*ConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{9}
}
func (m *ConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigReq.Merge(m, src)
}
func (m *ConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *ConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigReq proto.InternalMessageInfo

func (m *ConfigReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Registration change
//
// x-displayName: "Registration Change"
// Generic response when object is changed, registration can be changed only via custom API.
type ObjectChangeResp struct {
	// Registration object
	//
	// x-displayName: "Object"
	Obj *Object `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
}

func (m *ObjectChangeResp) Reset()      { *m = ObjectChangeResp{} }
func (*ObjectChangeResp) ProtoMessage() {}
func (*ObjectChangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{10}
}
func (m *ObjectChangeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectChangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectChangeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectChangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectChangeResp.Merge(m, src)
}
func (m *ObjectChangeResp) XXX_Size() int {
	return m.Size()
}
func (m *ObjectChangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectChangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectChangeResp proto.InternalMessageInfo

func (m *ObjectChangeResp) GetObj() *Object {
	if m != nil {
		return m.Obj
	}
	return nil
}

// Configuration
//
// x-displayName: "Configuration"
// Response for configuration request. This response is consumed by node.
type ConfigResp struct {
	// Workload
	//
	// x-displayName: "Workload"
	// Configuration for applications and infrastructure
	Workload map[string]*WorkloadContext `protobuf:"bytes,11,rep,name=workload,proto3" json:"workload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Hash
	//
	// x-displayName: "Hash"
	// Hash of workload map which is used to verify consistency
	// and check changes
	Hash string `protobuf:"bytes,12,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ConfigResp) Reset()      { *m = ConfigResp{} }
func (*ConfigResp) ProtoMessage() {}
func (*ConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{11}
}
func (m *ConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResp.Merge(m, src)
}
func (m *ConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *ConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResp proto.InternalMessageInfo

func (m *ConfigResp) GetWorkload() map[string]*WorkloadContext {
	if m != nil {
		return m.Workload
	}
	return nil
}

func (m *ConfigResp) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Create registration
//
// x-displayName: "Create registration"
// Register node. This API isn't designed to be used by users, it's only for node.
type RegistrationCreateRequest struct {
	// Metadata
	//
	// x-displayName: "Metadata"
	// Metadata of registration
	Metadata *schema.ObjectCreateMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Registration specification
	//
	// x-displayName: "Specification"
	// Specification of the registration
	Spec *CreateSpecType `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *RegistrationCreateRequest) Reset()      { *m = RegistrationCreateRequest{} }
func (*RegistrationCreateRequest) ProtoMessage() {}
func (*RegistrationCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d63ccec1c7290f8a, []int{12}
}
func (m *RegistrationCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrationCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrationCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrationCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationCreateRequest.Merge(m, src)
}
func (m *RegistrationCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegistrationCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationCreateRequest proto.InternalMessageInfo

func (m *RegistrationCreateRequest) GetMetadata() *schema.ObjectCreateMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *RegistrationCreateRequest) GetSpec() *CreateSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.registration.GetResponseFormatCode", GetResponseFormatCode_name, GetResponseFormatCode_value)
	golang_proto.RegisterEnum("ves.io.schema.registration.GetResponseFormatCode", GetResponseFormatCode_name, GetResponseFormatCode_value)
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.registration.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.registration.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.registration.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.registration.GetResponse")
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.registration.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.registration.ListRequest")
	proto.RegisterType((*ListResponseItem)(nil), "ves.io.schema.registration.ListResponseItem")
	golang_proto.RegisterType((*ListResponseItem)(nil), "ves.io.schema.registration.ListResponseItem")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.registration.ListResponseItem.AnnotationsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.registration.ListResponseItem.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.registration.ListResponseItem.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.registration.ListResponseItem.LabelsEntry")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.registration.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.registration.ListResponse")
	proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.registration.DeleteRequest")
	golang_proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.registration.DeleteRequest")
	proto.RegisterType((*ListBySiteReq)(nil), "ves.io.schema.registration.ListBySiteReq")
	golang_proto.RegisterType((*ListBySiteReq)(nil), "ves.io.schema.registration.ListBySiteReq")
	proto.RegisterType((*ListStateReq)(nil), "ves.io.schema.registration.ListStateReq")
	golang_proto.RegisterType((*ListStateReq)(nil), "ves.io.schema.registration.ListStateReq")
	proto.RegisterType((*ApprovalReq)(nil), "ves.io.schema.registration.ApprovalReq")
	golang_proto.RegisterType((*ApprovalReq)(nil), "ves.io.schema.registration.ApprovalReq")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.registration.ApprovalReq.AnnotationsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.registration.ApprovalReq.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.registration.ApprovalReq.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.registration.ApprovalReq.LabelsEntry")
	proto.RegisterType((*ConfigReq)(nil), "ves.io.schema.registration.ConfigReq")
	golang_proto.RegisterType((*ConfigReq)(nil), "ves.io.schema.registration.ConfigReq")
	proto.RegisterType((*ObjectChangeResp)(nil), "ves.io.schema.registration.ObjectChangeResp")
	golang_proto.RegisterType((*ObjectChangeResp)(nil), "ves.io.schema.registration.ObjectChangeResp")
	proto.RegisterType((*ConfigResp)(nil), "ves.io.schema.registration.ConfigResp")
	golang_proto.RegisterType((*ConfigResp)(nil), "ves.io.schema.registration.ConfigResp")
	proto.RegisterMapType((map[string]*WorkloadContext)(nil), "ves.io.schema.registration.ConfigResp.WorkloadEntry")
	golang_proto.RegisterMapType((map[string]*WorkloadContext)(nil), "ves.io.schema.registration.ConfigResp.WorkloadEntry")
	proto.RegisterType((*RegistrationCreateRequest)(nil), "ves.io.schema.registration.RegistrationCreateRequest")
	golang_proto.RegisterType((*RegistrationCreateRequest)(nil), "ves.io.schema.registration.RegistrationCreateRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/registration/public_customapi.proto", fileDescriptor_d63ccec1c7290f8a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/registration/public_customapi.proto", fileDescriptor_d63ccec1c7290f8a)
}

var fileDescriptor_d63ccec1c7290f8a = []byte{
	// 2035 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x4f, 0x6c, 0x1b, 0xc7,
	0xf5, 0xd6, 0x90, 0x12, 0x4d, 0x0e, 0x65, 0x89, 0x99, 0x38, 0xf6, 0x8a, 0xf1, 0x8f, 0x60, 0xd6,
	0xf9, 0x59, 0x8a, 0x2b, 0x92, 0x89, 0x5c, 0xa3, 0xb1, 0x91, 0xc4, 0x16, 0x69, 0x4a, 0x95, 0x23,
	0x59, 0xc2, 0x4a, 0x75, 0x0b, 0x5f, 0xb6, 0x4b, 0xf2, 0x91, 0xda, 0x88, 0xdc, 0xd9, 0xcc, 0x0e,
	0x25, 0x13, 0x81, 0x8a, 0xc0, 0xe8, 0xa9, 0xa7, 0x02, 0xb9, 0x14, 0x39, 0x14, 0xb9, 0xf4, 0x4f,
	0x4e, 0x3d, 0x15, 0x08, 0xa0, 0x8b, 0x6f, 0x0d, 0x7a, 0x28, 0x8c, 0xf6, 0xd0, 0x20, 0xe8, 0xa1,
	0x96, 0x7a, 0xc8, 0xa1, 0x07, 0x17, 0xe8, 0xb1, 0x87, 0x62, 0x67, 0x76, 0xd7, 0x4b, 0x9a, 0xe1,
	0x1f, 0xd7, 0x48, 0x2e, 0xc4, 0xee, 0xbc, 0xf7, 0xbe, 0x79, 0xf3, 0xcd, 0x9b, 0x6f, 0x66, 0x96,
	0xf8, 0x8d, 0x7d, 0x70, 0xf2, 0x26, 0x2d, 0x38, 0xd5, 0x5d, 0x68, 0x19, 0x05, 0x06, 0x0d, 0xd3,
	0xe1, 0xcc, 0xe0, 0x26, 0xb5, 0x0a, 0x76, 0xbb, 0xd2, 0x34, 0xab, 0x7a, 0xb5, 0xed, 0x70, 0xda,
	0x32, 0x6c, 0x33, 0x6f, 0x33, 0xca, 0x29, 0x49, 0xcb, 0x90, 0xbc, 0x0c, 0xc9, 0x87, 0x43, 0xd2,
	0xb9, 0x86, 0xc9, 0x77, 0xdb, 0x95, 0x7c, 0x95, 0xb6, 0x0a, 0x0d, 0xda, 0xa0, 0x05, 0x11, 0x52,
	0x69, 0xd7, 0xc5, 0x9b, 0x78, 0x11, 0x4f, 0x12, 0x2a, 0x7d, 0xbe, 0x41, 0x69, 0xa3, 0x09, 0x05,
	0xc3, 0x36, 0x0b, 0x86, 0x65, 0x51, 0x2e, 0x50, 0x1c, 0xcf, 0xfa, 0xb2, 0x67, 0x0d, 0x30, 0xa0,
	0x65, 0xf3, 0x8e, 0x67, 0x4c, 0x77, 0x27, 0x0e, 0x8c, 0x51, 0x16, 0x04, 0x76, 0xdb, 0xa8, 0x1d,
	0x46, 0x9d, 0x1f, 0x30, 0x62, 0x5a, 0x79, 0x0f, 0xaa, 0xdc, 0x73, 0x2c, 0x8c, 0x40, 0x0d, 0x6b,
	0xd7, 0x02, 0x62, 0xd2, 0x17, 0x07, 0x04, 0xf0, 0x8e, 0x0d, 0x7e, 0x06, 0x73, 0xdd, 0x7e, 0x61,
	0x93, 0xda, 0x6d, 0xda, 0x07, 0x07, 0xac, 0xfd, 0x9e, 0x01, 0x64, 0x7b, 0x7c, 0x4c, 0x38, 0xd0,
	0xbb, 0x3c, 0xd4, 0x8f, 0x11, 0xc6, 0xab, 0xc0, 0x35, 0x78, 0xbf, 0x0d, 0x0e, 0x27, 0xe7, 0x71,
	0xc2, 0x32, 0x5a, 0xe0, 0xd8, 0x46, 0x15, 0x14, 0x94, 0x45, 0x0b, 0x09, 0xed, 0x49, 0x03, 0x21,
	0x78, 0xd2, 0x7d, 0x51, 0x22, 0xc2, 0x20, 0x9e, 0xc9, 0x5d, 0x3c, 0xcb, 0xc0, 0xb1, 0xa9, 0xe5,
	0x80, 0x5e, 0xa7, 0xac, 0x65, 0x70, 0x25, 0x9a, 0x45, 0x0b, 0x33, 0x4b, 0x6f, 0xe4, 0xbf, 0x7e,
	0xf2, 0xf3, 0xa2, 0x4b, 0x19, 0xb5, 0x22, 0x82, 0x4a, 0xb4, 0x06, 0xda, 0x0c, 0xeb, 0x6a, 0x53,
	0x3f, 0x8a, 0xe1, 0x64, 0xc8, 0x93, 0x6c, 0xe3, 0x98, 0xa4, 0x5d, 0xa4, 0x96, 0x5c, 0x52, 0x07,
	0x75, 0xb1, 0x29, 0x3c, 0x8b, 0xe7, 0x1e, 0x1c, 0xa2, 0xe3, 0xc3, 0x17, 0x34, 0xb0, 0x9b, 0x46,
	0x15, 0x6a, 0xd9, 0x4a, 0x27, 0x3b, 0xef, 0xd8, 0x50, 0xd5, 0x3c, 0x28, 0x72, 0x0b, 0x27, 0xab,
	0x0c, 0x0c, 0x2e, 0xd3, 0x17, 0x63, 0x4b, 0x2e, 0xbd, 0x36, 0x08, 0xb9, 0x24, 0xdc, 0x3d, 0xca,
	0x34, 0x2c, 0xa3, 0xdd, 0x94, 0xc9, 0x06, 0x9e, 0x66, 0xb2, 0x23, 0x09, 0x16, 0x15, 0x60, 0x97,
	0x06, 0x81, 0x79, 0x89, 0xf9, 0x68, 0x49, 0x2f, 0x5e, 0xc0, 0x15, 0x70, 0x8a, 0x81, 0x43, 0xdb,
	0xac, 0x0a, 0xfa, 0x3e, 0x30, 0xc7, 0xa4, 0x96, 0x32, 0xe9, 0x72, 0x5f, 0x9c, 0xfc, 0xea, 0x08,
	0x21, 0x6d, 0xd6, 0xb7, 0xde, 0x91, 0x46, 0xf2, 0x16, 0x8e, 0xb7, 0x80, 0x1b, 0x35, 0x83, 0x1b,
	0xca, 0x94, 0xe8, 0x3b, 0xdb, 0xd3, 0xb7, 0x64, 0x65, 0x15, 0xf8, 0x06, 0x70, 0x63, 0xa7, 0x63,
	0x83, 0x16, 0x44, 0x90, 0x4d, 0x3c, 0xeb, 0x74, 0x1c, 0x0e, 0x2d, 0x3d, 0x00, 0x39, 0x25, 0x40,
	0x2e, 0xf6, 0x80, 0x6c, 0x0b, 0xaf, 0xa7, 0xa1, 0x66, 0x64, 0xf8, 0x86, 0x0f, 0xb8, 0x8e, 0x27,
	0x5d, 0xaa, 0x95, 0x98, 0x40, 0x99, 0x1f, 0x52, 0x10, 0xdb, 0x36, 0x54, 0x5d, 0x98, 0xe2, 0xec,
	0xc7, 0x87, 0xd3, 0x6e, 0x5c, 0xbe, 0x51, 0xd5, 0xc5, 0x54, 0x09, 0x14, 0xb2, 0x86, 0x5f, 0x60,
	0x50, 0x07, 0xc6, 0x4c, 0xab, 0xa1, 0xcb, 0xc9, 0x73, 0x94, 0x78, 0x36, 0xba, 0x90, 0x5c, 0x3a,
	0xdf, 0x77, 0x94, 0x1a, 0xd4, 0x45, 0x5a, 0xa9, 0x20, 0x4c, 0xb6, 0x3b, 0xe4, 0x0e, 0x56, 0x6a,
	0xd0, 0x04, 0x0e, 0x35, 0x5d, 0xda, 0xa0, 0x16, 0x20, 0x26, 0x46, 0x40, 0x3c, 0xeb, 0x45, 0x6b,
	0x5e, 0xb0, 0x8f, 0xfb, 0x23, 0x3c, 0x57, 0x33, 0x1d, 0xa3, 0xd2, 0xec, 0x07, 0x8c, 0x47, 0x00,
	0x3e, 0xe7, 0x87, 0xf7, 0x20, 0x5f, 0x4b, 0xfc, 0xf1, 0x9d, 0x98, 0x7c, 0x56, 0x7f, 0x85, 0x70,
	0x72, 0xdd, 0x74, 0x46, 0x5c, 0xb3, 0xaf, 0xe0, 0xe9, 0xa6, 0x51, 0x81, 0xa6, 0x5e, 0x37, 0x9b,
	0x1c, 0x98, 0xb7, 0x76, 0x93, 0xa2, 0x6d, 0x45, 0x34, 0x91, 0x0b, 0xf8, 0x34, 0x03, 0x9b, 0x32,
	0xae, 0xd7, 0x4d, 0x68, 0xd6, 0x1c, 0x25, 0x9a, 0x8d, 0x2e, 0x24, 0xb4, 0x69, 0xd9, 0xb8, 0x22,
	0xda, 0xc8, 0xeb, 0xf8, 0x8c, 0xe7, 0xe4, 0x70, 0x83, 0xb7, 0x1d, 0xdf, 0x77, 0x52, 0xf8, 0x12,
	0x69, 0xdb, 0x16, 0x26, 0x19, 0xa1, 0x7e, 0x1a, 0xc3, 0x29, 0x99, 0xa7, 0x5c, 0xbe, 0x6b, 0x1c,
	0x5a, 0xe4, 0x2c, 0x8e, 0x71, 0xb0, 0x0c, 0x8b, 0x8b, 0xa2, 0x48, 0x68, 0xde, 0xdb, 0x33, 0x08,
	0x4f, 0x0a, 0x47, 0xdb, 0x66, 0x4d, 0x2c, 0xb1, 0x84, 0xe6, 0x3e, 0x92, 0x2c, 0x4e, 0xd6, 0xc0,
	0xa9, 0x32, 0x53, 0x28, 0x9c, 0x92, 0x94, 0x23, 0x0d, 0x35, 0x91, 0x34, 0x8e, 0xfb, 0x04, 0x2b,
	0xd3, 0x59, 0xb4, 0x10, 0xd7, 0x82, 0x77, 0xb2, 0x85, 0x63, 0x82, 0x14, 0x39, 0xa4, 0xe4, 0xd2,
	0x9b, 0x83, 0xca, 0xb5, 0x77, 0x5c, 0xf9, 0x75, 0x11, 0x5a, 0xb6, 0x38, 0xeb, 0x68, 0x1e, 0x0e,
	0xd1, 0x71, 0x32, 0xb4, 0x53, 0x79, 0xf3, 0xff, 0xf6, 0x58, 0xb0, 0xcb, 0x4f, 0xe2, 0x25, 0x76,
	0x18, 0x91, 0x5c, 0xc5, 0x98, 0x1e, 0x58, 0xc0, 0x74, 0x57, 0xd8, 0x95, 0x84, 0x58, 0x65, 0xe9,
	0x1e, 0xfc, 0x3b, 0x26, 0x1c, 0xf8, 0xd5, 0x95, 0x10, 0xde, 0x6e, 0x4b, 0x97, 0x52, 0x9c, 0x7e,
	0x1e, 0x4a, 0x31, 0xf3, 0x3f, 0x29, 0xc5, 0xf5, 0x40, 0xd9, 0xa7, 0x46, 0x56, 0xf6, 0xe8, 0x83,
	0x43, 0x14, 0xa8, 0x78, 0x11, 0xc7, 0x1b, 0xc0, 0x85, 0x5c, 0x78, 0xa2, 0x35, 0xaa, 0xdc, 0x68,
	0xa7, 0x1a, 0xf2, 0x25, 0x7d, 0x15, 0x27, 0x43, 0xd3, 0xe8, 0x16, 0xd8, 0x1e, 0x74, 0xbc, 0x62,
	0x74, 0x1f, 0xc9, 0x19, 0x3c, 0xb5, 0x6f, 0x34, 0xdb, 0x7e, 0x1d, 0xca, 0x97, 0x6b, 0x91, 0x37,
	0x51, 0xfa, 0x1d, 0x9c, 0xea, 0x9d, 0xaa, 0x71, 0xe2, 0xd5, 0x9f, 0x22, 0x3c, 0x1d, 0x9e, 0x7c,
	0x52, 0xc4, 0x53, 0x26, 0x87, 0x96, 0xa3, 0x20, 0x51, 0x35, 0x8b, 0xe3, 0x54, 0x8d, 0x26, 0x43,
	0xc9, 0xeb, 0x38, 0x26, 0xcf, 0x3a, 0x4a, 0x44, 0x80, 0x28, 0x3d, 0x20, 0x65, 0xd7, 0x28, 0x28,
	0xf0, 0xfc, 0xd4, 0x3d, 0x7c, 0xfa, 0xa6, 0x50, 0xb6, 0x67, 0x3f, 0x0f, 0x2c, 0xe0, 0x54, 0xdd,
	0x30, 0x9b, 0xba, 0x59, 0x0f, 0x14, 0x50, 0xac, 0xd1, 0xb8, 0x36, 0xe3, 0xb6, 0xaf, 0xd5, 0x7d,
	0x65, 0x53, 0x6f, 0xe1, 0xd3, 0x6e, 0xe6, 0xc5, 0xce, 0xb6, 0x29, 0x3a, 0x1c, 0xd2, 0xd9, 0xcb,
	0x38, 0xe1, 0x98, 0x1c, 0xf4, 0x50, 0x8f, 0x71, 0xb7, 0xe1, 0xb6, 0xd1, 0x02, 0x75, 0x4f, 0xd2,
	0xe7, 0xea, 0xcf, 0x08, 0x50, 0x6f, 0xe3, 0x29, 0x57, 0xc4, 0x24, 0xcc, 0xcc, 0xe0, 0x4a, 0x91,
	0xc5, 0x26, 0x81, 0x65, 0x94, 0xfa, 0x78, 0x12, 0x27, 0x97, 0x6d, 0x9b, 0xd1, 0x7d, 0xa3, 0xe9,
	0x76, 0xb6, 0xf8, 0x54, 0x67, 0xc5, 0x99, 0x2f, 0x8f, 0x50, 0x4c, 0xd6, 0xb8, 0xd8, 0xa9, 0x87,
	0x90, 0xf6, 0x7d, 0x3f, 0xa1, 0xe8, 0x58, 0x09, 0x15, 0x13, 0x5f, 0x1e, 0x21, 0xb4, 0x24, 0x7a,
	0x90, 0x00, 0xe4, 0x06, 0x8e, 0xdb, 0x86, 0xe3, 0xb8, 0x62, 0x2c, 0x8e, 0x0a, 0xc9, 0xa5, 0x57,
	0x07, 0x81, 0x6d, 0x79, 0xbe, 0x5a, 0x10, 0x45, 0xde, 0x0d, 0x74, 0x70, 0x4a, 0x54, 0xcd, 0xe5,
	0x41, 0xf1, 0x21, 0x1a, 0xfa, 0x4a, 0xe0, 0xdd, 0x6e, 0x09, 0x8c, 0x0d, 0x57, 0xd6, 0x30, 0xe2,
	0x60, 0xf5, 0x7b, 0x0d, 0xa7, 0xaa, 0xd4, 0xb2, 0xa0, 0x2a, 0xb7, 0xf1, 0x86, 0xab, 0xf9, 0xa7,
	0x04, 0xa9, 0xb3, 0x41, 0xbb, 0x26, 0x9a, 0xc9, 0x4d, 0x9c, 0xe4, 0x6d, 0xcb, 0x82, 0xa6, 0xee,
	0x9e, 0xa0, 0x95, 0xb8, 0x60, 0xf9, 0x42, 0xaf, 0x56, 0x99, 0x1c, 0x76, 0xa8, 0xf8, 0x15, 0xbe,
	0x62, 0x65, 0x60, 0x1e, 0x3c, 0x7f, 0x9b, 0xfa, 0xb0, 0x8d, 0x13, 0x25, 0x6a, 0xd5, 0xcd, 0xc6,
	0xf0, 0xe2, 0xee, 0x57, 0x5f, 0x67, 0xf0, 0x14, 0xa7, 0x7b, 0x60, 0x79, 0xbb, 0xa5, 0x7c, 0x51,
	0x37, 0x70, 0x4a, 0x16, 0x53, 0x69, 0xd7, 0xb0, 0x1a, 0xe0, 0x4a, 0x08, 0xb9, 0x8a, 0xa3, 0xb4,
	0xf2, 0xde, 0x18, 0xe7, 0x6b, 0xa1, 0xc2, 0x6e, 0x8c, 0xfa, 0x37, 0x84, 0xb1, 0x9f, 0xa4, 0x63,
	0x93, 0x2d, 0x1c, 0x3f, 0xa0, 0x6c, 0xaf, 0x49, 0x8d, 0x9a, 0x92, 0x14, 0xf3, 0xfe, 0xdd, 0x81,
	0x87, 0xea, 0x20, 0x32, 0xff, 0x43, 0x2f, 0x4c, 0xce, 0x79, 0x80, 0xe2, 0x8e, 0x6c, 0xd7, 0x70,
	0x76, 0xc5, 0xce, 0x9d, 0xd0, 0xc4, 0x73, 0x7a, 0x17, 0x9f, 0xee, 0x72, 0xef, 0xc3, 0xea, 0x72,
	0x98, 0xd5, 0xe4, 0xd2, 0x77, 0x06, 0x65, 0xe1, 0x63, 0x95, 0xa8, 0xc5, 0xe1, 0x1e, 0x0f, 0x4f,
	0xc1, 0x67, 0x08, 0xcf, 0x69, 0x21, 0xdf, 0xae, 0x5b, 0x00, 0xb9, 0x1e, 0xda, 0x4f, 0x25, 0x79,
	0x17, 0xfa, 0xee, 0xa7, 0x32, 0xaa, 0xef, 0x96, 0x2a, 0xcf, 0xca, 0x91, 0xe1, 0x57, 0x06, 0x89,
	0x31, 0xe4, 0xb8, 0x1c, 0x3a, 0x31, 0x5e, 0xfa, 0x2b, 0xc2, 0x2f, 0xf5, 0xbd, 0x71, 0x91, 0x34,
	0x3e, 0xbb, 0x5a, 0xde, 0xd1, 0xb5, 0xed, 0x2d, 0x7d, 0x65, 0x53, 0xdb, 0x58, 0xde, 0xd1, 0x6f,
	0x96, 0x57, 0x96, 0x7f, 0xb0, 0xbe, 0x93, 0x9a, 0x20, 0xff, 0x87, 0xe7, 0x7a, 0x6c, 0x2b, 0x9b,
	0x9a, 0x5e, 0xd2, 0xca, 0xcb, 0x3b, 0xe5, 0x14, 0x22, 0x19, 0x9c, 0xee, 0x63, 0xd6, 0xca, 0x5b,
	0xeb, 0xcb, 0xa5, 0x72, 0x2a, 0x42, 0xce, 0xe1, 0x17, 0x7b, 0xec, 0x5a, 0x79, 0xf9, 0x66, 0x6a,
	0x92, 0xbc, 0x8a, 0xb3, 0x4f, 0x19, 0x56, 0xca, 0x9a, 0xb6, 0x76, 0x7b, 0x55, 0xdf, 0x2c, 0xde,
	0x2a, 0x97, 0x76, 0xb6, 0x53, 0x53, 0x7d, 0xbc, 0x8a, 0xda, 0xe6, 0xbb, 0xe5, 0xdb, 0xd2, 0xb9,
	0x7c, 0xbb, 0x54, 0xde, 0x4e, 0xc5, 0x96, 0xfe, 0x95, 0xc2, 0x89, 0x92, 0xf8, 0xe8, 0xb0, 0xbc,
	0xb5, 0x46, 0x3e, 0x8c, 0xe0, 0xe8, 0x2a, 0x70, 0x72, 0x71, 0xe8, 0xd5, 0x53, 0x4c, 0x5a, 0x7a,
	0x7e, 0xc4, 0x2b, 0xaa, 0xfa, 0x1b, 0xf4, 0xf9, 0x67, 0x11, 0x74, 0xfc, 0x07, 0xa5, 0x56, 0xbf,
	0x72, 0xaf, 0x9a, 0x73, 0xb7, 0x9d, 0x5c, 0xcb, 0xb0, 0x8c, 0x06, 0xb4, 0xc0, 0xe2, 0xb9, 0x8a,
	0xe1, 0x98, 0xd5, 0x5c, 0x8b, 0x5a, 0x26, 0xa7, 0x6c, 0x31, 0xdb, 0xd7, 0xc7, 0xe1, 0x86, 0x55,
	0x33, 0x58, 0x2d, 0x70, 0xdb, 0x07, 0x27, 0x67, 0xd2, 0x9c, 0x69, 0xd5, 0x99, 0xe1, 0x70, 0xd6,
	0xae, 0xf2, 0x36, 0x83, 0x1c, 0x03, 0xa3, 0x76, 0xff, 0x2f, 0xff, 0xf8, 0x28, 0x72, 0x85, 0x5c,
	0xf6, 0x3e, 0x1d, 0x14, 0x82, 0xb5, 0xed, 0x14, 0x3e, 0x08, 0x9e, 0x0f, 0xbb, 0x3e, 0x1a, 0x78,
	0x96, 0x43, 0xf2, 0x1f, 0x84, 0x27, 0xdd, 0x9d, 0x90, 0xcc, 0x0f, 0x3f, 0x31, 0x48, 0x12, 0x16,
	0x46, 0x3d, 0x5a, 0xa8, 0x9f, 0x7c, 0xf3, 0x2c, 0xe4, 0xc9, 0xe2, 0x38, 0x2c, 0x90, 0x5f, 0x44,
	0xf0, 0x8b, 0xe1, 0x45, 0x2a, 0x77, 0x13, 0x18, 0xcc, 0x46, 0x68, 0xcb, 0x49, 0x2f, 0x0e, 0x97,
	0xbc, 0x27, 0x6a, 0xa9, 0x7e, 0xea, 0xb2, 0xf1, 0xe3, 0x01, 0x6c, 0xb4, 0x1d, 0x18, 0x4a, 0x85,
	0xf4, 0xe9, 0x4f, 0xc4, 0x01, 0x33, 0x39, 0x08, 0x26, 0xae, 0xab, 0xd7, 0xc6, 0x60, 0xc2, 0x2b,
	0x87, 0x82, 0x21, 0xc7, 0x7f, 0x0d, 0x5d, 0x22, 0xff, 0x44, 0x38, 0x26, 0x0f, 0x77, 0x64, 0xe0,
	0xd7, 0x8d, 0xae, 0x03, 0x60, 0xfa, 0x6c, 0x5e, 0x7e, 0x59, 0xcb, 0xfb, 0x5f, 0xd6, 0xf2, 0xe5,
	0x96, 0xcd, 0x3b, 0xea, 0x2f, 0xdd, 0x91, 0xeb, 0xcf, 0x63, 0xe4, 0xc3, 0x06, 0x7e, 0xe5, 0xd2,
	0x33, 0x2d, 0x84, 0x7f, 0x23, 0x4c, 0x9e, 0x96, 0x6b, 0x72, 0x65, 0xf0, 0xb7, 0x98, 0xaf, 0x91,
	0xf7, 0xf4, 0x08, 0x3b, 0xa1, 0x7a, 0xdf, 0xa5, 0xe4, 0xee, 0xf3, 0x2d, 0x06, 0x0e, 0xcc, 0x32,
	0x9a, 0x21, 0x36, 0x32, 0xea, 0x9c, 0xcf, 0x86, 0xcc, 0x01, 0x58, 0x91, 0x52, 0xee, 0xe6, 0x62,
	0xbb, 0xb3, 0x7c, 0xd2, 0x3b, 0x6c, 0xb1, 0xad, 0x92, 0xff, 0x1f, 0x65, 0xeb, 0x7d, 0x3f, 0x7d,
	0x71, 0xb4, 0x1d, 0x5a, 0xfd, 0xc9, 0x37, 0x30, 0xd2, 0xb4, 0xfa, 0xd2, 0x93, 0x91, 0x8a, 0x59,
	0x90, 0x09, 0xb8, 0xa3, 0xfc, 0x24, 0x82, 0x15, 0x29, 0x4d, 0xa1, 0x99, 0x2f, 0x76, 0xc4, 0xa1,
	0x98, 0x0c, 0x15, 0x34, 0xff, 0x96, 0x30, 0x86, 0xf4, 0xfd, 0xce, 0x97, 0x3e, 0x78, 0x7e, 0xd2,
	0x97, 0x1d, 0xa2, 0x7d, 0x6f, 0xa9, 0xdf, 0x1b, 0x52, 0xf8, 0x4d, 0x37, 0xdb, 0x30, 0x05, 0x95,
	0x8e, 0xb8, 0x05, 0xb8, 0x14, 0xfd, 0x3a, 0x82, 0xcf, 0xf5, 0xa3, 0xc8, 0x1c, 0xb6, 0xfe, 0xbb,
	0xee, 0x64, 0x63, 0x50, 0xf4, 0xfb, 0x6f, 0x81, 0xa2, 0x22, 0xb9, 0x31, 0x8e, 0x36, 0xe8, 0x95,
	0x8e, 0xee, 0xf6, 0x59, 0xf8, 0x20, 0xb8, 0x49, 0x1e, 0xa6, 0x0b, 0x0f, 0x8e, 0x50, 0xf4, 0xcf,
	0x47, 0xe8, 0x95, 0xa1, 0x2b, 0xfc, 0xfe, 0x9f, 0x94, 0xc8, 0x0d, 0x54, 0xfc, 0x19, 0x7a, 0xf8,
	0x28, 0x33, 0xf1, 0xc5, 0xa3, 0xcc, 0xc4, 0xe3, 0x47, 0x19, 0xf4, 0xe1, 0x71, 0x06, 0xfd, 0xf6,
	0x38, 0x83, 0x3e, 0x3f, 0xce, 0xa0, 0x87, 0xc7, 0x19, 0xf4, 0xf7, 0xe3, 0x0c, 0xfa, 0xea, 0x38,
	0x33, 0xf1, 0xf8, 0x38, 0x83, 0x7e, 0x7e, 0x92, 0x99, 0x78, 0x70, 0x92, 0x41, 0x0f, 0x4f, 0x32,
	0x13, 0x5f, 0x9c, 0x64, 0x26, 0xee, 0x6e, 0x35, 0xa8, 0xbd, 0xd7, 0xc8, 0xef, 0xd3, 0x26, 0x07,
	0xc6, 0x8c, 0x7c, 0xdb, 0x29, 0x88, 0x87, 0x3a, 0x65, 0xad, 0x9c, 0xab, 0xd4, 0x66, 0x0d, 0x58,
	0xce, 0x37, 0x17, 0xec, 0x4a, 0x83, 0x16, 0xe0, 0x1e, 0xf7, 0x3e, 0xdf, 0xf7, 0xf9, 0xb3, 0xa0,
	0x12, 0x13, 0xba, 0x7c, 0xf9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xb0, 0x21, 0x60, 0x9d,
	0x19, 0x00, 0x00,
}

func (x GetResponseFormatCode) String() string {
	s, ok := GetResponseFormatCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ResponseFormat != that1.ResponseFormat {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.CreateForm.Equal(that1.CreateForm) {
		return false
	}
	if !this.ReplaceForm.Equal(that1.ReplaceForm) {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if len(this.ReferringObjects) != len(that1.ReferringObjects) {
		return false
	}
	for i := range this.ReferringObjects {
		if !this.ReferringObjects[i].Equal(that1.ReferringObjects[i]) {
			return false
		}
	}
	if len(this.DeletedReferredObjects) != len(that1.DeletedReferredObjects) {
		return false
	}
	for i := range this.DeletedReferredObjects {
		if !this.DeletedReferredObjects[i].Equal(that1.DeletedReferredObjects[i]) {
			return false
		}
	}
	if len(this.DisabledReferredObjects) != len(that1.DisabledReferredObjects) {
		return false
	}
	for i := range this.DisabledReferredObjects {
		if !this.DisabledReferredObjects[i].Equal(that1.DisabledReferredObjects[i]) {
			return false
		}
	}
	return true
}
func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.LabelFilter != that1.LabelFilter {
		return false
	}
	if len(this.ReportFields) != len(that1.ReportFields) {
		return false
	}
	for i := range this.ReportFields {
		if this.ReportFields[i] != that1.ReportFields[i] {
			return false
		}
	}
	if len(this.ReportStatusFields) != len(that1.ReportStatusFields) {
		return false
	}
	for i := range this.ReportStatusFields {
		if this.ReportStatusFields[i] != that1.ReportStatusFields[i] {
			return false
		}
	}
	return true
}
func (this *ListResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponseItem)
	if !ok {
		that2, ok := that.(ListResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if !this.OwnerView.Equal(that1.OwnerView) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.GetSpec.Equal(that1.GetSpec) {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if !this.Errors[i].Equal(that1.Errors[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.FailIfReferred != that1.FailIfReferred {
		return false
	}
	return true
}
func (this *ListBySiteReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListBySiteReq)
	if !ok {
		that2, ok := that.(ListBySiteReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	return true
}
func (this *ListStateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStateReq)
	if !ok {
		that2, ok := that.(ListStateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *ApprovalReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApprovalReq)
	if !ok {
		that2, ok := that.(ApprovalReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.Passport.Equal(that1.Passport) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if this.ConnectedRegion != that1.ConnectedRegion {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	return true
}
func (this *ConfigReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigReq)
	if !ok {
		that2, ok := that.(ConfigReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ObjectChangeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectChangeResp)
	if !ok {
		that2, ok := that.(ObjectChangeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Obj.Equal(that1.Obj) {
		return false
	}
	return true
}
func (this *ConfigResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigResp)
	if !ok {
		that2, ok := that.(ConfigResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Workload) != len(that1.Workload) {
		return false
	}
	for i := range this.Workload {
		if !this.Workload[i].Equal(that1.Workload[i]) {
			return false
		}
	}
	if this.Hash != that1.Hash {
		return false
	}
	return true
}
func (this *RegistrationCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegistrationCreateRequest)
	if !ok {
		that2, ok := that.(RegistrationCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&registration.GetRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ResponseFormat: "+fmt.Sprintf("%#v", this.ResponseFormat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&registration.GetResponse{")
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	if this.CreateForm != nil {
		s = append(s, "CreateForm: "+fmt.Sprintf("%#v", this.CreateForm)+",\n")
	}
	if this.ReplaceForm != nil {
		s = append(s, "ReplaceForm: "+fmt.Sprintf("%#v", this.ReplaceForm)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.ReferringObjects != nil {
		s = append(s, "ReferringObjects: "+fmt.Sprintf("%#v", this.ReferringObjects)+",\n")
	}
	if this.DeletedReferredObjects != nil {
		s = append(s, "DeletedReferredObjects: "+fmt.Sprintf("%#v", this.DeletedReferredObjects)+",\n")
	}
	if this.DisabledReferredObjects != nil {
		s = append(s, "DisabledReferredObjects: "+fmt.Sprintf("%#v", this.DisabledReferredObjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&registration.ListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	s = append(s, "ReportFields: "+fmt.Sprintf("%#v", this.ReportFields)+",\n")
	s = append(s, "ReportStatusFields: "+fmt.Sprintf("%#v", this.ReportStatusFields)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&registration.ListResponseItem{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Disabled: "+fmt.Sprintf("%#v", this.Disabled)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%#v: %#v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	if this.Annotations != nil {
		s = append(s, "Annotations: "+mapStringForAnnotations+",\n")
	}
	if this.OwnerView != nil {
		s = append(s, "OwnerView: "+fmt.Sprintf("%#v", this.OwnerView)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	if this.GetSpec != nil {
		s = append(s, "GetSpec: "+fmt.Sprintf("%#v", this.GetSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.ListResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&registration.DeleteRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "FailIfReferred: "+fmt.Sprintf("%#v", this.FailIfReferred)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListBySiteReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.ListBySiteReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStateReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.ListStateReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApprovalReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&registration.ApprovalReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Passport != nil {
		s = append(s, "Passport: "+fmt.Sprintf("%#v", this.Passport)+",\n")
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%#v: %#v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	if this.Annotations != nil {
		s = append(s, "Annotations: "+mapStringForAnnotations+",\n")
	}
	s = append(s, "ConnectedRegion: "+fmt.Sprintf("%#v", this.ConnectedRegion)+",\n")
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&registration.ConfigReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectChangeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&registration.ObjectChangeResp{")
	if this.Obj != nil {
		s = append(s, "Obj: "+fmt.Sprintf("%#v", this.Obj)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.ConfigResp{")
	keysForWorkload := make([]string, 0, len(this.Workload))
	for k, _ := range this.Workload {
		keysForWorkload = append(keysForWorkload, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForWorkload)
	mapStringForWorkload := "map[string]*WorkloadContext{"
	for _, k := range keysForWorkload {
		mapStringForWorkload += fmt.Sprintf("%#v: %#v,", k, this.Workload[k])
	}
	mapStringForWorkload += "}"
	if this.Workload != nil {
		s = append(s, "Workload: "+mapStringForWorkload+",\n")
	}
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegistrationCreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.RegistrationCreateRequest{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Get registration
	//
	// x-displayName: "Get Registration"
	// Get registration specification
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// List
	//
	// x-displayName: "List Registration"
	// List the set of registration in a namespace
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Change registration state
	//
	// x-displayName: "Registration Approve"
	// RegistrationApprove approved pending registration and it can also decommission by changing state to RETIRED.
	RegistrationApprove(ctx context.Context, in *ApprovalReq, opts ...grpc.CallOption) (*ObjectChangeResp, error)
	// Delete
	//
	// x-displayName: "Delete Registration"
	// Delete the specified registration
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Create registration
	//
	// x-displayName: "Registration Create"
	// Registration request to create registration is sent by the node on first boot. User never creates registration on her own.
	RegistrationCreate(ctx context.Context, in *RegistrationCreateRequest, opts ...grpc.CallOption) (*Object, error)
	// Get configuration for registration
	//
	// x-displayName: "Registration Config"
	// API endpoint for returning configuration for admitted registrations.
	// It will fail with known error for non-ADMITTED registration
	RegistrationConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigResp, error)
	// List Registrations By Status
	//
	// x-displayName: "List Registrations By State"
	// API endpoint for returning Registrations by status, e.g APPROVED, NEW, or RETIRED
	ListRegistrationsByState(ctx context.Context, in *ListStateReq, opts ...grpc.CallOption) (*ListResponse, error)
	// List Registrations by site
	//
	// x-displayName: "List registrations by site"
	// List all registration in site
	ListRegistrationsBySite(ctx context.Context, in *ListBySiteReq, opts ...grpc.CallOption) (*ListResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RegistrationApprove(ctx context.Context, in *ApprovalReq, opts ...grpc.CallOption) (*ObjectChangeResp, error) {
	out := new(ObjectChangeResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/RegistrationApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RegistrationCreate(ctx context.Context, in *RegistrationCreateRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/RegistrationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RegistrationConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/RegistrationConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListRegistrationsByState(ctx context.Context, in *ListStateReq, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/ListRegistrationsByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListRegistrationsBySite(ctx context.Context, in *ListBySiteReq, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.registration.CustomAPI/ListRegistrationsBySite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Get registration
	//
	// x-displayName: "Get Registration"
	// Get registration specification
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// List
	//
	// x-displayName: "List Registration"
	// List the set of registration in a namespace
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Change registration state
	//
	// x-displayName: "Registration Approve"
	// RegistrationApprove approved pending registration and it can also decommission by changing state to RETIRED.
	RegistrationApprove(context.Context, *ApprovalReq) (*ObjectChangeResp, error)
	// Delete
	//
	// x-displayName: "Delete Registration"
	// Delete the specified registration
	Delete(context.Context, *DeleteRequest) (*types.Empty, error)
	// Create registration
	//
	// x-displayName: "Registration Create"
	// Registration request to create registration is sent by the node on first boot. User never creates registration on her own.
	RegistrationCreate(context.Context, *RegistrationCreateRequest) (*Object, error)
	// Get configuration for registration
	//
	// x-displayName: "Registration Config"
	// API endpoint for returning configuration for admitted registrations.
	// It will fail with known error for non-ADMITTED registration
	RegistrationConfig(context.Context, *ConfigReq) (*ConfigResp, error)
	// List Registrations By Status
	//
	// x-displayName: "List Registrations By State"
	// API endpoint for returning Registrations by status, e.g APPROVED, NEW, or RETIRED
	ListRegistrationsByState(context.Context, *ListStateReq) (*ListResponse, error)
	// List Registrations by site
	//
	// x-displayName: "List registrations by site"
	// List all registration in site
	ListRegistrationsBySite(context.Context, *ListBySiteReq) (*ListResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomAPIServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCustomAPIServer) RegistrationApprove(ctx context.Context, req *ApprovalReq) (*ObjectChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrationApprove not implemented")
}
func (*UnimplementedCustomAPIServer) Delete(ctx context.Context, req *DeleteRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCustomAPIServer) RegistrationCreate(ctx context.Context, req *RegistrationCreateRequest) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrationCreate not implemented")
}
func (*UnimplementedCustomAPIServer) RegistrationConfig(ctx context.Context, req *ConfigReq) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrationConfig not implemented")
}
func (*UnimplementedCustomAPIServer) ListRegistrationsByState(ctx context.Context, req *ListStateReq) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistrationsByState not implemented")
}
func (*UnimplementedCustomAPIServer) ListRegistrationsBySite(ctx context.Context, req *ListBySiteReq) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistrationsBySite not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RegistrationApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RegistrationApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/RegistrationApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RegistrationApprove(ctx, req.(*ApprovalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RegistrationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RegistrationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/RegistrationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RegistrationCreate(ctx, req.(*RegistrationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RegistrationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RegistrationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/RegistrationConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RegistrationConfig(ctx, req.(*ConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListRegistrationsByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListRegistrationsByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/ListRegistrationsByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListRegistrationsByState(ctx, req.(*ListStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListRegistrationsBySite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListRegistrationsBySite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.registration.CustomAPI/ListRegistrationsBySite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListRegistrationsBySite(ctx, req.(*ListBySiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.registration.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CustomAPI_List_Handler,
		},
		{
			MethodName: "RegistrationApprove",
			Handler:    _CustomAPI_RegistrationApprove_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CustomAPI_Delete_Handler,
		},
		{
			MethodName: "RegistrationCreate",
			Handler:    _CustomAPI_RegistrationCreate_Handler,
		},
		{
			MethodName: "RegistrationConfig",
			Handler:    _CustomAPI_RegistrationConfig_Handler,
		},
		{
			MethodName: "ListRegistrationsByState",
			Handler:    _CustomAPI_ListRegistrationsByState_Handler,
		},
		{
			MethodName: "ListRegistrationsBySite",
			Handler:    _CustomAPI_ListRegistrationsBySite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/registration/public_customapi.proto",
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseFormat != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ResponseFormat))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisabledReferredObjects) > 0 {
		for iNdEx := len(m.DisabledReferredObjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisabledReferredObjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.DeletedReferredObjects) > 0 {
		for iNdEx := len(m.DeletedReferredObjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeletedReferredObjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ReferringObjects) > 0 {
		for iNdEx := len(m.ReferringObjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReferringObjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReplaceForm != nil {
		{
			size, err := m.ReplaceForm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreateForm != nil {
		{
			size, err := m.CreateForm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportStatusFields) > 0 {
		for iNdEx := len(m.ReportStatusFields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReportStatusFields[iNdEx])
			copy(dAtA[i:], m.ReportStatusFields[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ReportStatusFields[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ReportFields) > 0 {
		for iNdEx := len(m.ReportFields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReportFields[iNdEx])
			copy(dAtA[i:], m.ReportFields[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ReportFields[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LabelFilter) > 0 {
		i -= len(m.LabelFilter)
		copy(dAtA[i:], m.LabelFilter)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.LabelFilter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.OwnerView != nil {
		{
			size, err := m.OwnerView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.GetSpec != nil {
		{
			size, err := m.GetSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x32
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailIfReferred {
		i--
		if m.FailIfReferred {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBySiteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBySiteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBySiteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SiteName) > 0 {
		i -= len(m.SiteName)
		copy(dAtA[i:], m.SiteName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.SiteName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApprovalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApprovalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApprovalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TunnelType != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.TunnelType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ConnectedRegion) > 0 {
		i -= len(m.ConnectedRegion)
		copy(dAtA[i:], m.ConnectedRegion)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ConnectedRegion)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Passport != nil {
		{
			size, err := m.Passport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectChangeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectChangeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Obj != nil {
		{
			size, err := m.Obj.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Workload) > 0 {
		for k := range m.Workload {
			v := m.Workload[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegistrationCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrationCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrationCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ResponseFormat != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ResponseFormat))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.CreateForm != nil {
		l = m.CreateForm.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ReplaceForm != nil {
		l = m.ReplaceForm.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.ReferringObjects) > 0 {
		for _, e := range m.ReferringObjects {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.DeletedReferredObjects) > 0 {
		for _, e := range m.DeletedReferredObjects {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.DisabledReferredObjects) > 0 {
		for _, e := range m.DisabledReferredObjects {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.LabelFilter)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.ReportFields) > 0 {
		for _, s := range m.ReportFields {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.ReportStatusFields) > 0 {
		for _, s := range m.ReportStatusFields {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *ListResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.GetSpec != nil {
		l = m.GetSpec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.OwnerView != nil {
		l = m.OwnerView.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.FailIfReferred {
		n += 2
	}
	return n
}

func (m *ListBySiteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListStateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.State))
	}
	return n
}

func (m *ApprovalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.State))
	}
	if m.Passport != nil {
		l = m.Passport.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	l = len(m.ConnectedRegion)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.TunnelType != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.TunnelType))
	}
	return n
}

func (m *ConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ObjectChangeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Obj != nil {
		l = m.Obj.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workload) > 0 {
		for k, v := range m.Workload {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPublicCustomapi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *RegistrationCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ResponseFormat:` + fmt.Sprintf("%v", this.ResponseFormat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReferringObjects := "[]*ObjectRefType{"
	for _, f := range this.ReferringObjects {
		repeatedStringForReferringObjects += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForReferringObjects += "}"
	repeatedStringForDeletedReferredObjects := "[]*ObjectRefType{"
	for _, f := range this.DeletedReferredObjects {
		repeatedStringForDeletedReferredObjects += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForDeletedReferredObjects += "}"
	repeatedStringForDisabledReferredObjects := "[]*ObjectRefType{"
	for _, f := range this.DisabledReferredObjects {
		repeatedStringForDisabledReferredObjects += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForDisabledReferredObjects += "}"
	s := strings.Join([]string{`&GetResponse{`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`CreateForm:` + strings.Replace(fmt.Sprintf("%v", this.CreateForm), "CreateRequest", "CreateRequest", 1) + `,`,
		`ReplaceForm:` + strings.Replace(fmt.Sprintf("%v", this.ReplaceForm), "ReplaceRequest", "ReplaceRequest", 1) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "GetSpecType", "GetSpecType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`ReferringObjects:` + repeatedStringForReferringObjects + `,`,
		`DeletedReferredObjects:` + repeatedStringForDeletedReferredObjects + `,`,
		`DisabledReferredObjects:` + repeatedStringForDisabledReferredObjects + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + fmt.Sprintf("%v", this.LabelFilter) + `,`,
		`ReportFields:` + fmt.Sprintf("%v", this.ReportFields) + `,`,
		`ReportStatusFields:` + fmt.Sprintf("%v", this.ReportStatusFields) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	s := strings.Join([]string{`&ListResponseItem{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`GetSpec:` + strings.Replace(fmt.Sprintf("%v", this.GetSpec), "GetSpecType", "GetSpecType", 1) + `,`,
		`OwnerView:` + strings.Replace(fmt.Sprintf("%v", this.OwnerView), "ViewRefType", "schema.ViewRefType", 1) + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Disabled:` + fmt.Sprintf("%v", this.Disabled) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*ListResponseItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "ListResponseItem", "ListResponseItem", 1) + ","
	}
	repeatedStringForItems += "}"
	repeatedStringForErrors := "[]*ErrorType{"
	for _, f := range this.Errors {
		repeatedStringForErrors += strings.Replace(fmt.Sprintf("%v", f), "ErrorType", "schema.ErrorType", 1) + ","
	}
	repeatedStringForErrors += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`Errors:` + repeatedStringForErrors + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`FailIfReferred:` + fmt.Sprintf("%v", this.FailIfReferred) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListBySiteReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListBySiteReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStateReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStateReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApprovalReq) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	s := strings.Join([]string{`&ApprovalReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Passport:` + strings.Replace(fmt.Sprintf("%v", this.Passport), "Passport", "Passport", 1) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`ConnectedRegion:` + fmt.Sprintf("%v", this.ConnectedRegion) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectChangeResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectChangeResp{`,
		`Obj:` + strings.Replace(fmt.Sprintf("%v", this.Obj), "Object", "Object", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigResp) String() string {
	if this == nil {
		return "nil"
	}
	keysForWorkload := make([]string, 0, len(this.Workload))
	for k, _ := range this.Workload {
		keysForWorkload = append(keysForWorkload, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForWorkload)
	mapStringForWorkload := "map[string]*WorkloadContext{"
	for _, k := range keysForWorkload {
		mapStringForWorkload += fmt.Sprintf("%v: %v,", k, this.Workload[k])
	}
	mapStringForWorkload += "}"
	s := strings.Join([]string{`&ConfigResp{`,
		`Workload:` + mapStringForWorkload + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegistrationCreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegistrationCreateRequest{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectCreateMetaType", "schema.ObjectCreateMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "CreateSpecType", "CreateSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseFormat", wireType)
			}
			m.ResponseFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseFormat |= GetResponseFormatCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateForm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateForm == nil {
				m.CreateForm = &CreateRequest{}
			}
			if err := m.CreateForm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceForm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplaceForm == nil {
				m.ReplaceForm = &ReplaceRequest{}
			}
			if err := m.ReplaceForm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &GetSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferringObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferringObjects = append(m.ReferringObjects, &schema.ObjectRefType{})
			if err := m.ReferringObjects[len(m.ReferringObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedReferredObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedReferredObjects = append(m.DeletedReferredObjects, &schema.ObjectRefType{})
			if err := m.DeletedReferredObjects[len(m.DeletedReferredObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledReferredObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledReferredObjects = append(m.DisabledReferredObjects, &schema.ObjectRefType{})
			if err := m.DisabledReferredObjects[len(m.DisabledReferredObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportFields = append(m.ReportFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStatusFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStatusFields = append(m.ReportStatusFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetSpec == nil {
				m.GetSpec = &GetSpecType{}
			}
			if err := m.GetSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnerView == nil {
				m.OwnerView = &schema.ViewRefType{}
			}
			if err := m.OwnerView.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ListResponseItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &schema.ErrorType{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailIfReferred", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailIfReferred = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBySiteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBySiteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBySiteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ObjectState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApprovalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApprovalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApprovalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ObjectState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Passport == nil {
				m.Passport = &Passport{}
			}
			if err := m.Passport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectedRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= schema.SiteToSiteTunnelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Obj == nil {
				m.Obj = &Object{}
			}
			if err := m.Obj.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workload == nil {
				m.Workload = make(map[string]*WorkloadContext)
			}
			var mapkey string
			var mapvalue *WorkloadContext
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WorkloadContext{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Workload[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistrationCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrationCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrationCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectCreateMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CreateSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

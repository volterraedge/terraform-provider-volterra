// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package k8s_cluster

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ApplicationArgoCDType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApplicationArgoCDType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ApplicationArgoCDType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetLocalDomain().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ApplicationArgoCDType.local_domain")
	}

	return nil
}

func (m *ApplicationArgoCDType) DeepCopy() *ApplicationArgoCDType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApplicationArgoCDType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApplicationArgoCDType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApplicationArgoCDType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApplicationArgoCDTypeValidator().Validate(ctx, m, opts...)
}

type ValidateApplicationArgoCDType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApplicationArgoCDType) GeneratedYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for generated_yaml")
	}

	return validatorFn, nil
}

func (v *ValidateApplicationArgoCDType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApplicationArgoCDType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApplicationArgoCDType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["generated_yaml"]; exists {

		vOpts := append(opts, db.WithValidateField("generated_yaml"))
		if err := fv(ctx, m.GetGeneratedYaml(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_domain"]; exists {

		vOpts := append(opts, db.WithValidateField("local_domain"))
		if err := fv(ctx, m.GetLocalDomain(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApplicationArgoCDTypeValidator = func() *ValidateApplicationArgoCDType {
	v := &ValidateApplicationArgoCDType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGeneratedYaml := v.GeneratedYamlValidationRuleHandler
	rulesGeneratedYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFn, err = vrhGeneratedYaml(rulesGeneratedYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApplicationArgoCDType.generated_yaml: %s", err)
		panic(errMsg)
	}
	v.FldValidators["generated_yaml"] = vFn

	v.FldValidators["local_domain"] = LocalAccessArgoCDTypeValidator().Validate

	return v
}()

func ApplicationArgoCDTypeValidator() db.Validator {
	return DefaultApplicationArgoCDTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ApplicationDashboardType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApplicationDashboardType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApplicationDashboardType) DeepCopy() *ApplicationDashboardType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApplicationDashboardType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApplicationDashboardType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApplicationDashboardType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApplicationDashboardTypeValidator().Validate(ctx, m, opts...)
}

type ValidateApplicationDashboardType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApplicationDashboardType) GeneratedYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for generated_yaml")
	}

	return validatorFn, nil
}

func (v *ValidateApplicationDashboardType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApplicationDashboardType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApplicationDashboardType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["generated_yaml"]; exists {

		vOpts := append(opts, db.WithValidateField("generated_yaml"))
		if err := fv(ctx, m.GetGeneratedYaml(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApplicationDashboardTypeValidator = func() *ValidateApplicationDashboardType {
	v := &ValidateApplicationDashboardType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGeneratedYaml := v.GeneratedYamlValidationRuleHandler
	rulesGeneratedYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFn, err = vrhGeneratedYaml(rulesGeneratedYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApplicationDashboardType.generated_yaml: %s", err)
		panic(errMsg)
	}
	v.FldValidators["generated_yaml"] = vFn

	return v
}()

func ApplicationDashboardTypeValidator() db.Validator {
	return DefaultApplicationDashboardTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ApplicationMetricsServerType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApplicationMetricsServerType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApplicationMetricsServerType) DeepCopy() *ApplicationMetricsServerType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApplicationMetricsServerType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApplicationMetricsServerType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApplicationMetricsServerType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApplicationMetricsServerTypeValidator().Validate(ctx, m, opts...)
}

type ValidateApplicationMetricsServerType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApplicationMetricsServerType) GeneratedYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for generated_yaml")
	}

	return validatorFn, nil
}

func (v *ValidateApplicationMetricsServerType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApplicationMetricsServerType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApplicationMetricsServerType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["generated_yaml"]; exists {

		vOpts := append(opts, db.WithValidateField("generated_yaml"))
		if err := fv(ctx, m.GetGeneratedYaml(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApplicationMetricsServerTypeValidator = func() *ValidateApplicationMetricsServerType {
	v := &ValidateApplicationMetricsServerType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGeneratedYaml := v.GeneratedYamlValidationRuleHandler
	rulesGeneratedYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFn, err = vrhGeneratedYaml(rulesGeneratedYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApplicationMetricsServerType.generated_yaml: %s", err)
		panic(errMsg)
	}
	v.FldValidators["generated_yaml"] = vFn

	return v
}()

func ApplicationMetricsServerTypeValidator() db.Validator {
	return DefaultApplicationMetricsServerTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ApplicationPrometheusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApplicationPrometheusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApplicationPrometheusType) DeepCopy() *ApplicationPrometheusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApplicationPrometheusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApplicationPrometheusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApplicationPrometheusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApplicationPrometheusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateApplicationPrometheusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApplicationPrometheusType) GeneratedYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for generated_yaml")
	}

	return validatorFn, nil
}

func (v *ValidateApplicationPrometheusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApplicationPrometheusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApplicationPrometheusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["generated_yaml"]; exists {

		vOpts := append(opts, db.WithValidateField("generated_yaml"))
		if err := fv(ctx, m.GetGeneratedYaml(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApplicationPrometheusTypeValidator = func() *ValidateApplicationPrometheusType {
	v := &ValidateApplicationPrometheusType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGeneratedYaml := v.GeneratedYamlValidationRuleHandler
	rulesGeneratedYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFn, err = vrhGeneratedYaml(rulesGeneratedYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApplicationPrometheusType.generated_yaml: %s", err)
		panic(errMsg)
	}
	v.FldValidators["generated_yaml"] = vFn

	return v
}()

func ApplicationPrometheusTypeValidator() db.Validator {
	return DefaultApplicationPrometheusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ClusterRoleBindingListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ClusterRoleBindingListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ClusterRoleBindingListType) DeepCopy() *ClusterRoleBindingListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ClusterRoleBindingListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ClusterRoleBindingListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ClusterRoleBindingListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ClusterRoleBindingListTypeValidator().Validate(ctx, m, opts...)
}

func (m *ClusterRoleBindingListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetClusterRoleBindingsDRefInfo()

}

func (m *ClusterRoleBindingListType) GetClusterRoleBindingsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetClusterRoleBindings()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ClusterRoleBindingListType.cluster_role_bindings[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster_role_binding.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "k8s_cluster_role_binding.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cluster_role_bindings",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetClusterRoleBindingsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ClusterRoleBindingListType) GetClusterRoleBindingsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "k8s_cluster_role_binding.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster_role_binding")
	}
	for i, vref := range m.GetClusterRoleBindings() {
		if vref == nil {
			return nil, fmt.Errorf("ClusterRoleBindingListType.cluster_role_bindings[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster_role_binding.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateClusterRoleBindingListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateClusterRoleBindingListType) ClusterRoleBindingsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cluster_role_bindings")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cluster_role_bindings")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cluster_role_bindings")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cluster_role_bindings")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateClusterRoleBindingListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ClusterRoleBindingListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ClusterRoleBindingListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cluster_role_bindings"]; exists {
		vOpts := append(opts, db.WithValidateField("cluster_role_bindings"))
		if err := fv(ctx, m.GetClusterRoleBindings(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultClusterRoleBindingListTypeValidator = func() *ValidateClusterRoleBindingListType {
	v := &ValidateClusterRoleBindingListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClusterRoleBindings := v.ClusterRoleBindingsValidationRuleHandler
	rulesClusterRoleBindings := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhClusterRoleBindings(rulesClusterRoleBindings)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ClusterRoleBindingListType.cluster_role_bindings: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_bindings"] = vFn

	return v
}()

func ClusterRoleBindingListTypeValidator() db.Validator {
	return DefaultClusterRoleBindingListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ClusterRoleListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ClusterRoleListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ClusterRoleListType) DeepCopy() *ClusterRoleListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ClusterRoleListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ClusterRoleListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ClusterRoleListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ClusterRoleListTypeValidator().Validate(ctx, m, opts...)
}

func (m *ClusterRoleListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetClusterRolesDRefInfo()

}

func (m *ClusterRoleListType) GetClusterRolesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetClusterRoles()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ClusterRoleListType.cluster_roles[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster_role.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "k8s_cluster_role.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cluster_roles",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetClusterRolesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ClusterRoleListType) GetClusterRolesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "k8s_cluster_role.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster_role")
	}
	for i, vref := range m.GetClusterRoles() {
		if vref == nil {
			return nil, fmt.Errorf("ClusterRoleListType.cluster_roles[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster_role.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateClusterRoleListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateClusterRoleListType) ClusterRolesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cluster_roles")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cluster_roles")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cluster_roles")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cluster_roles")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateClusterRoleListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ClusterRoleListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ClusterRoleListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cluster_roles"]; exists {
		vOpts := append(opts, db.WithValidateField("cluster_roles"))
		if err := fv(ctx, m.GetClusterRoles(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultClusterRoleListTypeValidator = func() *ValidateClusterRoleListType {
	v := &ValidateClusterRoleListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClusterRoles := v.ClusterRolesValidationRuleHandler
	rulesClusterRoles := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhClusterRoles(rulesClusterRoles)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ClusterRoleListType.cluster_roles: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_roles"] = vFn

	return v
}()

func ClusterRoleListTypeValidator() db.Validator {
	return DefaultClusterRoleListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ClusterWideAppListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ClusterWideAppListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ClusterWideAppListType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetClusterWideApps() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting ClusterWideAppListType.cluster_wide_apps idx %v", idx)
		}
	}

	return nil
}

func (m *ClusterWideAppListType) DeepCopy() *ClusterWideAppListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ClusterWideAppListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ClusterWideAppListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ClusterWideAppListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ClusterWideAppListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateClusterWideAppListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateClusterWideAppListType) ClusterWideAppsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cluster_wide_apps")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ClusterWideAppType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ClusterWideAppTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cluster_wide_apps")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ClusterWideAppType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ClusterWideAppType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cluster_wide_apps")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cluster_wide_apps")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateClusterWideAppListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ClusterWideAppListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ClusterWideAppListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cluster_wide_apps"]; exists {
		vOpts := append(opts, db.WithValidateField("cluster_wide_apps"))
		if err := fv(ctx, m.GetClusterWideApps(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultClusterWideAppListTypeValidator = func() *ValidateClusterWideAppListType {
	v := &ValidateClusterWideAppListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClusterWideApps := v.ClusterWideAppsValidationRuleHandler
	rulesClusterWideApps := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "5",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhClusterWideApps(rulesClusterWideApps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ClusterWideAppListType.cluster_wide_apps: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_wide_apps"] = vFn

	return v
}()

func ClusterWideAppListTypeValidator() db.Validator {
	return DefaultClusterWideAppListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ClusterWideAppType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ClusterWideAppType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ClusterWideAppType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetArgoCd().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ClusterWideAppType.argo_cd")
	}

	return nil
}

func (m *ClusterWideAppType) DeepCopy() *ClusterWideAppType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ClusterWideAppType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ClusterWideAppType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ClusterWideAppType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ClusterWideAppTypeValidator().Validate(ctx, m, opts...)
}

type ValidateClusterWideAppType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateClusterWideAppType) AppChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for app_choice")
	}
	return validatorFn, nil
}

func (v *ValidateClusterWideAppType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ClusterWideAppType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ClusterWideAppType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_choice"]; exists {
		val := m.GetAppChoice()
		vOpts := append(opts,
			db.WithValidateField("app_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppChoice().(type) {
	case *ClusterWideAppType_ArgoCd:
		if fv, exists := v.FldValidators["app_choice.argo_cd"]; exists {
			val := m.GetAppChoice().(*ClusterWideAppType_ArgoCd).ArgoCd
			vOpts := append(opts,
				db.WithValidateField("app_choice"),
				db.WithValidateField("argo_cd"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ClusterWideAppType_Dashboard:
		if fv, exists := v.FldValidators["app_choice.dashboard"]; exists {
			val := m.GetAppChoice().(*ClusterWideAppType_Dashboard).Dashboard
			vOpts := append(opts,
				db.WithValidateField("app_choice"),
				db.WithValidateField("dashboard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ClusterWideAppType_MetricsServer:
		if fv, exists := v.FldValidators["app_choice.metrics_server"]; exists {
			val := m.GetAppChoice().(*ClusterWideAppType_MetricsServer).MetricsServer
			vOpts := append(opts,
				db.WithValidateField("app_choice"),
				db.WithValidateField("metrics_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ClusterWideAppType_Prometheus:
		if fv, exists := v.FldValidators["app_choice.prometheus"]; exists {
			val := m.GetAppChoice().(*ClusterWideAppType_Prometheus).Prometheus
			vOpts := append(opts,
				db.WithValidateField("app_choice"),
				db.WithValidateField("prometheus"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultClusterWideAppTypeValidator = func() *ValidateClusterWideAppType {
	v := &ValidateClusterWideAppType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppChoice := v.AppChoiceValidationRuleHandler
	rulesAppChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppChoice(rulesAppChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ClusterWideAppType.app_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["app_choice"] = vFn

	v.FldValidators["app_choice.argo_cd"] = ApplicationArgoCDTypeValidator().Validate
	v.FldValidators["app_choice.dashboard"] = ApplicationDashboardTypeValidator().Validate
	v.FldValidators["app_choice.metrics_server"] = ApplicationMetricsServerTypeValidator().Validate
	v.FldValidators["app_choice.prometheus"] = ApplicationPrometheusTypeValidator().Validate

	return v
}()

func ClusterWideAppTypeValidator() db.Validator {
	return DefaultClusterWideAppTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetClusterWideAppList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.cluster_wide_app_list")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetClusterRoleBindingsChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetClusterRoleBindingsChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetClusterRoleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetClusterRoleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPodSecurityPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPodSecurityPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetClusterRoleBindingsChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClusterRoleBindingsChoice() == nil {
		return nil, nil
	}
	switch m.GetClusterRoleBindingsChoice().(type) {
	case *CreateSpecType_UseDefaultClusterRoleBindings:

		return nil, nil

	case *CreateSpecType_UseCustomClusterRoleBindings:
		drInfos, err := m.GetUseCustomClusterRoleBindings().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomClusterRoleBindings().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_cluster_role_bindings." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetClusterRoleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClusterRoleChoice() == nil {
		return nil, nil
	}
	switch m.GetClusterRoleChoice().(type) {
	case *CreateSpecType_UseDefaultClusterRoles:

		return nil, nil

	case *CreateSpecType_UseCustomClusterRoleList:
		drInfos, err := m.GetUseCustomClusterRoleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomClusterRoleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_cluster_role_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetPodSecurityPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPodSecurityPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetPodSecurityPolicyChoice().(type) {
	case *CreateSpecType_UseDefaultPsp:

		return nil, nil

	case *CreateSpecType_UseCustomPspList:
		drInfos, err := m.GetUseCustomPspList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomPspList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_psp_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AppsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for apps_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ClusterRoleBindingsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_role_bindings_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ClusterRoleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_role_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ClusterScopedResourceAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_scoped_resource_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GlobalAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) InsecureRegistriesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for insecure_registries_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LocalAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for local_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) PodSecurityPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pod_security_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Vk8SNamespaceAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vk8s_namespace_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apps_choice"]; exists {
		val := m.GetAppsChoice()
		vOpts := append(opts,
			db.WithValidateField("apps_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppsChoice().(type) {
	case *CreateSpecType_NoClusterWideApps:
		if fv, exists := v.FldValidators["apps_choice.no_cluster_wide_apps"]; exists {
			val := m.GetAppsChoice().(*CreateSpecType_NoClusterWideApps).NoClusterWideApps
			vOpts := append(opts,
				db.WithValidateField("apps_choice"),
				db.WithValidateField("no_cluster_wide_apps"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ClusterWideAppList:
		if fv, exists := v.FldValidators["apps_choice.cluster_wide_app_list"]; exists {
			val := m.GetAppsChoice().(*CreateSpecType_ClusterWideAppList).ClusterWideAppList
			vOpts := append(opts,
				db.WithValidateField("apps_choice"),
				db.WithValidateField("cluster_wide_app_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_role_bindings_choice"]; exists {
		val := m.GetClusterRoleBindingsChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_role_bindings_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRoleBindingsChoice().(type) {
	case *CreateSpecType_UseDefaultClusterRoleBindings:
		if fv, exists := v.FldValidators["cluster_role_bindings_choice.use_default_cluster_role_bindings"]; exists {
			val := m.GetClusterRoleBindingsChoice().(*CreateSpecType_UseDefaultClusterRoleBindings).UseDefaultClusterRoleBindings
			vOpts := append(opts,
				db.WithValidateField("cluster_role_bindings_choice"),
				db.WithValidateField("use_default_cluster_role_bindings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_UseCustomClusterRoleBindings:
		if fv, exists := v.FldValidators["cluster_role_bindings_choice.use_custom_cluster_role_bindings"]; exists {
			val := m.GetClusterRoleBindingsChoice().(*CreateSpecType_UseCustomClusterRoleBindings).UseCustomClusterRoleBindings
			vOpts := append(opts,
				db.WithValidateField("cluster_role_bindings_choice"),
				db.WithValidateField("use_custom_cluster_role_bindings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_role_choice"]; exists {
		val := m.GetClusterRoleChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_role_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRoleChoice().(type) {
	case *CreateSpecType_UseDefaultClusterRoles:
		if fv, exists := v.FldValidators["cluster_role_choice.use_default_cluster_roles"]; exists {
			val := m.GetClusterRoleChoice().(*CreateSpecType_UseDefaultClusterRoles).UseDefaultClusterRoles
			vOpts := append(opts,
				db.WithValidateField("cluster_role_choice"),
				db.WithValidateField("use_default_cluster_roles"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_UseCustomClusterRoleList:
		if fv, exists := v.FldValidators["cluster_role_choice.use_custom_cluster_role_list"]; exists {
			val := m.GetClusterRoleChoice().(*CreateSpecType_UseCustomClusterRoleList).UseCustomClusterRoleList
			vOpts := append(opts,
				db.WithValidateField("cluster_role_choice"),
				db.WithValidateField("use_custom_cluster_role_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice"]; exists {
		val := m.GetClusterScopedResourceAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_scoped_resource_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterScopedResourceAccessChoice().(type) {
	case *CreateSpecType_ClusterScopedAccessDeny:
		if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice.cluster_scoped_access_deny"]; exists {
			val := m.GetClusterScopedResourceAccessChoice().(*CreateSpecType_ClusterScopedAccessDeny).ClusterScopedAccessDeny
			vOpts := append(opts,
				db.WithValidateField("cluster_scoped_resource_access_choice"),
				db.WithValidateField("cluster_scoped_access_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ClusterScopedAccessPermit:
		if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice.cluster_scoped_access_permit"]; exists {
			val := m.GetClusterScopedResourceAccessChoice().(*CreateSpecType_ClusterScopedAccessPermit).ClusterScopedAccessPermit
			vOpts := append(opts,
				db.WithValidateField("cluster_scoped_resource_access_choice"),
				db.WithValidateField("cluster_scoped_access_permit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_access_choice"]; exists {
		val := m.GetGlobalAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("global_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalAccessChoice().(type) {
	case *CreateSpecType_NoGlobalAccess:
		if fv, exists := v.FldValidators["global_access_choice.no_global_access"]; exists {
			val := m.GetGlobalAccessChoice().(*CreateSpecType_NoGlobalAccess).NoGlobalAccess
			vOpts := append(opts,
				db.WithValidateField("global_access_choice"),
				db.WithValidateField("no_global_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_GlobalAccessEnable:
		if fv, exists := v.FldValidators["global_access_choice.global_access_enable"]; exists {
			val := m.GetGlobalAccessChoice().(*CreateSpecType_GlobalAccessEnable).GlobalAccessEnable
			vOpts := append(opts,
				db.WithValidateField("global_access_choice"),
				db.WithValidateField("global_access_enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["insecure_registries_choice"]; exists {
		val := m.GetInsecureRegistriesChoice()
		vOpts := append(opts,
			db.WithValidateField("insecure_registries_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsecureRegistriesChoice().(type) {
	case *CreateSpecType_NoInsecureRegistries:
		if fv, exists := v.FldValidators["insecure_registries_choice.no_insecure_registries"]; exists {
			val := m.GetInsecureRegistriesChoice().(*CreateSpecType_NoInsecureRegistries).NoInsecureRegistries
			vOpts := append(opts,
				db.WithValidateField("insecure_registries_choice"),
				db.WithValidateField("no_insecure_registries"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_InsecureRegistryList:
		if fv, exists := v.FldValidators["insecure_registries_choice.insecure_registry_list"]; exists {
			val := m.GetInsecureRegistriesChoice().(*CreateSpecType_InsecureRegistryList).InsecureRegistryList
			vOpts := append(opts,
				db.WithValidateField("insecure_registries_choice"),
				db.WithValidateField("insecure_registry_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["local_access_choice"]; exists {
		val := m.GetLocalAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("local_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLocalAccessChoice().(type) {
	case *CreateSpecType_NoLocalAccess:
		if fv, exists := v.FldValidators["local_access_choice.no_local_access"]; exists {
			val := m.GetLocalAccessChoice().(*CreateSpecType_NoLocalAccess).NoLocalAccess
			vOpts := append(opts,
				db.WithValidateField("local_access_choice"),
				db.WithValidateField("no_local_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LocalAccessConfig:
		if fv, exists := v.FldValidators["local_access_choice.local_access_config"]; exists {
			val := m.GetLocalAccessChoice().(*CreateSpecType_LocalAccessConfig).LocalAccessConfig
			vOpts := append(opts,
				db.WithValidateField("local_access_choice"),
				db.WithValidateField("local_access_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["pod_security_policy_choice"]; exists {
		val := m.GetPodSecurityPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("pod_security_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPodSecurityPolicyChoice().(type) {
	case *CreateSpecType_UseDefaultPsp:
		if fv, exists := v.FldValidators["pod_security_policy_choice.use_default_psp"]; exists {
			val := m.GetPodSecurityPolicyChoice().(*CreateSpecType_UseDefaultPsp).UseDefaultPsp
			vOpts := append(opts,
				db.WithValidateField("pod_security_policy_choice"),
				db.WithValidateField("use_default_psp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_UseCustomPspList:
		if fv, exists := v.FldValidators["pod_security_policy_choice.use_custom_psp_list"]; exists {
			val := m.GetPodSecurityPolicyChoice().(*CreateSpecType_UseCustomPspList).UseCustomPspList
			vOpts := append(opts,
				db.WithValidateField("pod_security_policy_choice"),
				db.WithValidateField("use_custom_psp_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vk8s_namespace_access_choice"]; exists {
		val := m.GetVk8SNamespaceAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("vk8s_namespace_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVk8SNamespaceAccessChoice().(type) {
	case *CreateSpecType_Vk8SNamespaceAccessDeny:
		if fv, exists := v.FldValidators["vk8s_namespace_access_choice.vk8s_namespace_access_deny"]; exists {
			val := m.GetVk8SNamespaceAccessChoice().(*CreateSpecType_Vk8SNamespaceAccessDeny).Vk8SNamespaceAccessDeny
			vOpts := append(opts,
				db.WithValidateField("vk8s_namespace_access_choice"),
				db.WithValidateField("vk8s_namespace_access_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Vk8SNamespaceAccessPermit:
		if fv, exists := v.FldValidators["vk8s_namespace_access_choice.vk8s_namespace_access_permit"]; exists {
			val := m.GetVk8SNamespaceAccessChoice().(*CreateSpecType_Vk8SNamespaceAccessPermit).Vk8SNamespaceAccessPermit
			vOpts := append(opts,
				db.WithValidateField("vk8s_namespace_access_choice"),
				db.WithValidateField("vk8s_namespace_access_permit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppsChoice := v.AppsChoiceValidationRuleHandler
	rulesAppsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppsChoice(rulesAppsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.apps_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["apps_choice"] = vFn

	vrhClusterRoleBindingsChoice := v.ClusterRoleBindingsChoiceValidationRuleHandler
	rulesClusterRoleBindingsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRoleBindingsChoice(rulesClusterRoleBindingsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cluster_role_bindings_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_bindings_choice"] = vFn

	vrhClusterRoleChoice := v.ClusterRoleChoiceValidationRuleHandler
	rulesClusterRoleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRoleChoice(rulesClusterRoleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cluster_role_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_choice"] = vFn

	vrhClusterScopedResourceAccessChoice := v.ClusterScopedResourceAccessChoiceValidationRuleHandler
	rulesClusterScopedResourceAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterScopedResourceAccessChoice(rulesClusterScopedResourceAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cluster_scoped_resource_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_scoped_resource_access_choice"] = vFn

	vrhGlobalAccessChoice := v.GlobalAccessChoiceValidationRuleHandler
	rulesGlobalAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalAccessChoice(rulesGlobalAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.global_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_access_choice"] = vFn

	vrhInsecureRegistriesChoice := v.InsecureRegistriesChoiceValidationRuleHandler
	rulesInsecureRegistriesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsecureRegistriesChoice(rulesInsecureRegistriesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.insecure_registries_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["insecure_registries_choice"] = vFn

	vrhLocalAccessChoice := v.LocalAccessChoiceValidationRuleHandler
	rulesLocalAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLocalAccessChoice(rulesLocalAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.local_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_access_choice"] = vFn

	vrhPodSecurityPolicyChoice := v.PodSecurityPolicyChoiceValidationRuleHandler
	rulesPodSecurityPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPodSecurityPolicyChoice(rulesPodSecurityPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.pod_security_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pod_security_policy_choice"] = vFn

	vrhVk8SNamespaceAccessChoice := v.Vk8SNamespaceAccessChoiceValidationRuleHandler
	rulesVk8SNamespaceAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVk8SNamespaceAccessChoice(rulesVk8SNamespaceAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.vk8s_namespace_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vk8s_namespace_access_choice"] = vFn

	v.FldValidators["apps_choice.cluster_wide_app_list"] = ClusterWideAppListTypeValidator().Validate

	v.FldValidators["cluster_role_bindings_choice.use_custom_cluster_role_bindings"] = ClusterRoleBindingListTypeValidator().Validate

	v.FldValidators["cluster_role_choice.use_custom_cluster_role_list"] = ClusterRoleListTypeValidator().Validate

	v.FldValidators["insecure_registries_choice.insecure_registry_list"] = InsecureRegistryListTypeValidator().Validate

	v.FldValidators["local_access_choice.local_access_config"] = LocalAccessConfigTypeValidator().Validate

	v.FldValidators["pod_security_policy_choice.use_custom_psp_list"] = PodSecurityPolicyListTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetClusterWideAppList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.cluster_wide_app_list")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetClusterRoleBindingsChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetClusterRoleBindingsChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetClusterRoleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetClusterRoleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPodSecurityPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPodSecurityPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetClusterRoleBindingsChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClusterRoleBindingsChoice() == nil {
		return nil, nil
	}
	switch m.GetClusterRoleBindingsChoice().(type) {
	case *GetSpecType_UseDefaultClusterRoleBindings:

		return nil, nil

	case *GetSpecType_UseCustomClusterRoleBindings:
		drInfos, err := m.GetUseCustomClusterRoleBindings().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomClusterRoleBindings().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_cluster_role_bindings." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetClusterRoleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClusterRoleChoice() == nil {
		return nil, nil
	}
	switch m.GetClusterRoleChoice().(type) {
	case *GetSpecType_UseDefaultClusterRoles:

		return nil, nil

	case *GetSpecType_UseCustomClusterRoleList:
		drInfos, err := m.GetUseCustomClusterRoleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomClusterRoleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_cluster_role_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetPodSecurityPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPodSecurityPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetPodSecurityPolicyChoice().(type) {
	case *GetSpecType_UseDefaultPsp:

		return nil, nil

	case *GetSpecType_UseCustomPspList:
		drInfos, err := m.GetUseCustomPspList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomPspList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_psp_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AppsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for apps_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ClusterRoleBindingsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_role_bindings_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ClusterRoleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_role_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ClusterScopedResourceAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_scoped_resource_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) GlobalAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) InsecureRegistriesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for insecure_registries_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LocalAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for local_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) PodSecurityPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pod_security_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Vk8SNamespaceAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vk8s_namespace_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apps_choice"]; exists {
		val := m.GetAppsChoice()
		vOpts := append(opts,
			db.WithValidateField("apps_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppsChoice().(type) {
	case *GetSpecType_NoClusterWideApps:
		if fv, exists := v.FldValidators["apps_choice.no_cluster_wide_apps"]; exists {
			val := m.GetAppsChoice().(*GetSpecType_NoClusterWideApps).NoClusterWideApps
			vOpts := append(opts,
				db.WithValidateField("apps_choice"),
				db.WithValidateField("no_cluster_wide_apps"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ClusterWideAppList:
		if fv, exists := v.FldValidators["apps_choice.cluster_wide_app_list"]; exists {
			val := m.GetAppsChoice().(*GetSpecType_ClusterWideAppList).ClusterWideAppList
			vOpts := append(opts,
				db.WithValidateField("apps_choice"),
				db.WithValidateField("cluster_wide_app_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_role_bindings_choice"]; exists {
		val := m.GetClusterRoleBindingsChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_role_bindings_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRoleBindingsChoice().(type) {
	case *GetSpecType_UseDefaultClusterRoleBindings:
		if fv, exists := v.FldValidators["cluster_role_bindings_choice.use_default_cluster_role_bindings"]; exists {
			val := m.GetClusterRoleBindingsChoice().(*GetSpecType_UseDefaultClusterRoleBindings).UseDefaultClusterRoleBindings
			vOpts := append(opts,
				db.WithValidateField("cluster_role_bindings_choice"),
				db.WithValidateField("use_default_cluster_role_bindings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UseCustomClusterRoleBindings:
		if fv, exists := v.FldValidators["cluster_role_bindings_choice.use_custom_cluster_role_bindings"]; exists {
			val := m.GetClusterRoleBindingsChoice().(*GetSpecType_UseCustomClusterRoleBindings).UseCustomClusterRoleBindings
			vOpts := append(opts,
				db.WithValidateField("cluster_role_bindings_choice"),
				db.WithValidateField("use_custom_cluster_role_bindings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_role_choice"]; exists {
		val := m.GetClusterRoleChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_role_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRoleChoice().(type) {
	case *GetSpecType_UseDefaultClusterRoles:
		if fv, exists := v.FldValidators["cluster_role_choice.use_default_cluster_roles"]; exists {
			val := m.GetClusterRoleChoice().(*GetSpecType_UseDefaultClusterRoles).UseDefaultClusterRoles
			vOpts := append(opts,
				db.WithValidateField("cluster_role_choice"),
				db.WithValidateField("use_default_cluster_roles"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UseCustomClusterRoleList:
		if fv, exists := v.FldValidators["cluster_role_choice.use_custom_cluster_role_list"]; exists {
			val := m.GetClusterRoleChoice().(*GetSpecType_UseCustomClusterRoleList).UseCustomClusterRoleList
			vOpts := append(opts,
				db.WithValidateField("cluster_role_choice"),
				db.WithValidateField("use_custom_cluster_role_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice"]; exists {
		val := m.GetClusterScopedResourceAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_scoped_resource_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterScopedResourceAccessChoice().(type) {
	case *GetSpecType_ClusterScopedAccessDeny:
		if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice.cluster_scoped_access_deny"]; exists {
			val := m.GetClusterScopedResourceAccessChoice().(*GetSpecType_ClusterScopedAccessDeny).ClusterScopedAccessDeny
			vOpts := append(opts,
				db.WithValidateField("cluster_scoped_resource_access_choice"),
				db.WithValidateField("cluster_scoped_access_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ClusterScopedAccessPermit:
		if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice.cluster_scoped_access_permit"]; exists {
			val := m.GetClusterScopedResourceAccessChoice().(*GetSpecType_ClusterScopedAccessPermit).ClusterScopedAccessPermit
			vOpts := append(opts,
				db.WithValidateField("cluster_scoped_resource_access_choice"),
				db.WithValidateField("cluster_scoped_access_permit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_access_choice"]; exists {
		val := m.GetGlobalAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("global_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalAccessChoice().(type) {
	case *GetSpecType_NoGlobalAccess:
		if fv, exists := v.FldValidators["global_access_choice.no_global_access"]; exists {
			val := m.GetGlobalAccessChoice().(*GetSpecType_NoGlobalAccess).NoGlobalAccess
			vOpts := append(opts,
				db.WithValidateField("global_access_choice"),
				db.WithValidateField("no_global_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_GlobalAccessEnable:
		if fv, exists := v.FldValidators["global_access_choice.global_access_enable"]; exists {
			val := m.GetGlobalAccessChoice().(*GetSpecType_GlobalAccessEnable).GlobalAccessEnable
			vOpts := append(opts,
				db.WithValidateField("global_access_choice"),
				db.WithValidateField("global_access_enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["insecure_registries_choice"]; exists {
		val := m.GetInsecureRegistriesChoice()
		vOpts := append(opts,
			db.WithValidateField("insecure_registries_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsecureRegistriesChoice().(type) {
	case *GetSpecType_NoInsecureRegistries:
		if fv, exists := v.FldValidators["insecure_registries_choice.no_insecure_registries"]; exists {
			val := m.GetInsecureRegistriesChoice().(*GetSpecType_NoInsecureRegistries).NoInsecureRegistries
			vOpts := append(opts,
				db.WithValidateField("insecure_registries_choice"),
				db.WithValidateField("no_insecure_registries"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_InsecureRegistryList:
		if fv, exists := v.FldValidators["insecure_registries_choice.insecure_registry_list"]; exists {
			val := m.GetInsecureRegistriesChoice().(*GetSpecType_InsecureRegistryList).InsecureRegistryList
			vOpts := append(opts,
				db.WithValidateField("insecure_registries_choice"),
				db.WithValidateField("insecure_registry_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["local_access_choice"]; exists {
		val := m.GetLocalAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("local_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLocalAccessChoice().(type) {
	case *GetSpecType_NoLocalAccess:
		if fv, exists := v.FldValidators["local_access_choice.no_local_access"]; exists {
			val := m.GetLocalAccessChoice().(*GetSpecType_NoLocalAccess).NoLocalAccess
			vOpts := append(opts,
				db.WithValidateField("local_access_choice"),
				db.WithValidateField("no_local_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LocalAccessConfig:
		if fv, exists := v.FldValidators["local_access_choice.local_access_config"]; exists {
			val := m.GetLocalAccessChoice().(*GetSpecType_LocalAccessConfig).LocalAccessConfig
			vOpts := append(opts,
				db.WithValidateField("local_access_choice"),
				db.WithValidateField("local_access_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["pod_security_policy_choice"]; exists {
		val := m.GetPodSecurityPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("pod_security_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPodSecurityPolicyChoice().(type) {
	case *GetSpecType_UseDefaultPsp:
		if fv, exists := v.FldValidators["pod_security_policy_choice.use_default_psp"]; exists {
			val := m.GetPodSecurityPolicyChoice().(*GetSpecType_UseDefaultPsp).UseDefaultPsp
			vOpts := append(opts,
				db.WithValidateField("pod_security_policy_choice"),
				db.WithValidateField("use_default_psp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UseCustomPspList:
		if fv, exists := v.FldValidators["pod_security_policy_choice.use_custom_psp_list"]; exists {
			val := m.GetPodSecurityPolicyChoice().(*GetSpecType_UseCustomPspList).UseCustomPspList
			vOpts := append(opts,
				db.WithValidateField("pod_security_policy_choice"),
				db.WithValidateField("use_custom_psp_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vk8s_namespace_access_choice"]; exists {
		val := m.GetVk8SNamespaceAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("vk8s_namespace_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVk8SNamespaceAccessChoice().(type) {
	case *GetSpecType_Vk8SNamespaceAccessDeny:
		if fv, exists := v.FldValidators["vk8s_namespace_access_choice.vk8s_namespace_access_deny"]; exists {
			val := m.GetVk8SNamespaceAccessChoice().(*GetSpecType_Vk8SNamespaceAccessDeny).Vk8SNamespaceAccessDeny
			vOpts := append(opts,
				db.WithValidateField("vk8s_namespace_access_choice"),
				db.WithValidateField("vk8s_namespace_access_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Vk8SNamespaceAccessPermit:
		if fv, exists := v.FldValidators["vk8s_namespace_access_choice.vk8s_namespace_access_permit"]; exists {
			val := m.GetVk8SNamespaceAccessChoice().(*GetSpecType_Vk8SNamespaceAccessPermit).Vk8SNamespaceAccessPermit
			vOpts := append(opts,
				db.WithValidateField("vk8s_namespace_access_choice"),
				db.WithValidateField("vk8s_namespace_access_permit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppsChoice := v.AppsChoiceValidationRuleHandler
	rulesAppsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppsChoice(rulesAppsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.apps_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["apps_choice"] = vFn

	vrhClusterRoleBindingsChoice := v.ClusterRoleBindingsChoiceValidationRuleHandler
	rulesClusterRoleBindingsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRoleBindingsChoice(rulesClusterRoleBindingsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cluster_role_bindings_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_bindings_choice"] = vFn

	vrhClusterRoleChoice := v.ClusterRoleChoiceValidationRuleHandler
	rulesClusterRoleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRoleChoice(rulesClusterRoleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cluster_role_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_choice"] = vFn

	vrhClusterScopedResourceAccessChoice := v.ClusterScopedResourceAccessChoiceValidationRuleHandler
	rulesClusterScopedResourceAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterScopedResourceAccessChoice(rulesClusterScopedResourceAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cluster_scoped_resource_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_scoped_resource_access_choice"] = vFn

	vrhGlobalAccessChoice := v.GlobalAccessChoiceValidationRuleHandler
	rulesGlobalAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalAccessChoice(rulesGlobalAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.global_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_access_choice"] = vFn

	vrhInsecureRegistriesChoice := v.InsecureRegistriesChoiceValidationRuleHandler
	rulesInsecureRegistriesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsecureRegistriesChoice(rulesInsecureRegistriesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.insecure_registries_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["insecure_registries_choice"] = vFn

	vrhLocalAccessChoice := v.LocalAccessChoiceValidationRuleHandler
	rulesLocalAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLocalAccessChoice(rulesLocalAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.local_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_access_choice"] = vFn

	vrhPodSecurityPolicyChoice := v.PodSecurityPolicyChoiceValidationRuleHandler
	rulesPodSecurityPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPodSecurityPolicyChoice(rulesPodSecurityPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.pod_security_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pod_security_policy_choice"] = vFn

	vrhVk8SNamespaceAccessChoice := v.Vk8SNamespaceAccessChoiceValidationRuleHandler
	rulesVk8SNamespaceAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVk8SNamespaceAccessChoice(rulesVk8SNamespaceAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.vk8s_namespace_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vk8s_namespace_access_choice"] = vFn

	v.FldValidators["apps_choice.cluster_wide_app_list"] = ClusterWideAppListTypeValidator().Validate

	v.FldValidators["cluster_role_bindings_choice.use_custom_cluster_role_bindings"] = ClusterRoleBindingListTypeValidator().Validate

	v.FldValidators["cluster_role_choice.use_custom_cluster_role_list"] = ClusterRoleListTypeValidator().Validate

	v.FldValidators["insecure_registries_choice.insecure_registry_list"] = InsecureRegistryListTypeValidator().Validate

	v.FldValidators["local_access_choice.local_access_config"] = LocalAccessConfigTypeValidator().Validate

	v.FldValidators["pod_security_policy_choice.use_custom_psp_list"] = PodSecurityPolicyListTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetClusterWideAppList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.cluster_wide_app_list")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetClusterRoleBindingsChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetClusterRoleBindingsChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetClusterRoleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetClusterRoleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetFinalClusterRoleBindingsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFinalClusterRoleBindingsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetFinalClusterRolesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFinalClusterRolesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetFinalPodSecurityPoliciesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFinalPodSecurityPoliciesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPodSecurityPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPodSecurityPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetClusterRoleBindingsChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClusterRoleBindingsChoice() == nil {
		return nil, nil
	}
	switch m.GetClusterRoleBindingsChoice().(type) {
	case *GlobalSpecType_UseDefaultClusterRoleBindings:

		return nil, nil

	case *GlobalSpecType_UseCustomClusterRoleBindings:
		drInfos, err := m.GetUseCustomClusterRoleBindings().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomClusterRoleBindings().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_cluster_role_bindings." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetClusterRoleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClusterRoleChoice() == nil {
		return nil, nil
	}
	switch m.GetClusterRoleChoice().(type) {
	case *GlobalSpecType_UseDefaultClusterRoles:

		return nil, nil

	case *GlobalSpecType_UseCustomClusterRoleList:
		drInfos, err := m.GetUseCustomClusterRoleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomClusterRoleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_cluster_role_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetFinalClusterRoleBindingsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetFinalClusterRoleBindings()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.final_cluster_role_bindings[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster_role_binding.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "k8s_cluster_role_binding.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "final_cluster_role_bindings",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetFinalClusterRoleBindingsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetFinalClusterRoleBindingsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "k8s_cluster_role_binding.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster_role_binding")
	}
	for i, vref := range m.GetFinalClusterRoleBindings() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.final_cluster_role_bindings[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster_role_binding.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetFinalClusterRolesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetFinalClusterRoles()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.final_cluster_roles[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_cluster_role.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "k8s_cluster_role.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "final_cluster_roles",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetFinalClusterRolesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetFinalClusterRolesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "k8s_cluster_role.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: k8s_cluster_role")
	}
	for i, vref := range m.GetFinalClusterRoles() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.final_cluster_roles[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_cluster_role.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetFinalPodSecurityPoliciesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetFinalPodSecurityPolicies()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.final_pod_security_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_pod_security_policy.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "k8s_pod_security_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "final_pod_security_policies",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetFinalPodSecurityPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetFinalPodSecurityPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "k8s_pod_security_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: k8s_pod_security_policy")
	}
	for i, vref := range m.GetFinalPodSecurityPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.final_pod_security_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_pod_security_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetPodSecurityPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPodSecurityPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetPodSecurityPolicyChoice().(type) {
	case *GlobalSpecType_UseDefaultPsp:

		return nil, nil

	case *GlobalSpecType_UseCustomPspList:
		drInfos, err := m.GetUseCustomPspList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomPspList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_psp_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AppsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for apps_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ClusterRoleBindingsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_role_bindings_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ClusterRoleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_role_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ClusterScopedResourceAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_scoped_resource_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GlobalAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) InsecureRegistriesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for insecure_registries_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LocalAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for local_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PodSecurityPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pod_security_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Vk8SNamespaceAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vk8s_namespace_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) FinalClusterRoleBindingsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for final_cluster_role_bindings")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for final_cluster_role_bindings")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated final_cluster_role_bindings")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items final_cluster_role_bindings")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) FinalClusterRolesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for final_cluster_roles")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for final_cluster_roles")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated final_cluster_roles")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items final_cluster_roles")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) FinalPodSecurityPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for final_pod_security_policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for final_pod_security_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated final_pod_security_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items final_pod_security_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apps_choice"]; exists {
		val := m.GetAppsChoice()
		vOpts := append(opts,
			db.WithValidateField("apps_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppsChoice().(type) {
	case *GlobalSpecType_NoClusterWideApps:
		if fv, exists := v.FldValidators["apps_choice.no_cluster_wide_apps"]; exists {
			val := m.GetAppsChoice().(*GlobalSpecType_NoClusterWideApps).NoClusterWideApps
			vOpts := append(opts,
				db.WithValidateField("apps_choice"),
				db.WithValidateField("no_cluster_wide_apps"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ClusterWideAppList:
		if fv, exists := v.FldValidators["apps_choice.cluster_wide_app_list"]; exists {
			val := m.GetAppsChoice().(*GlobalSpecType_ClusterWideAppList).ClusterWideAppList
			vOpts := append(opts,
				db.WithValidateField("apps_choice"),
				db.WithValidateField("cluster_wide_app_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_role_bindings_choice"]; exists {
		val := m.GetClusterRoleBindingsChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_role_bindings_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRoleBindingsChoice().(type) {
	case *GlobalSpecType_UseDefaultClusterRoleBindings:
		if fv, exists := v.FldValidators["cluster_role_bindings_choice.use_default_cluster_role_bindings"]; exists {
			val := m.GetClusterRoleBindingsChoice().(*GlobalSpecType_UseDefaultClusterRoleBindings).UseDefaultClusterRoleBindings
			vOpts := append(opts,
				db.WithValidateField("cluster_role_bindings_choice"),
				db.WithValidateField("use_default_cluster_role_bindings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UseCustomClusterRoleBindings:
		if fv, exists := v.FldValidators["cluster_role_bindings_choice.use_custom_cluster_role_bindings"]; exists {
			val := m.GetClusterRoleBindingsChoice().(*GlobalSpecType_UseCustomClusterRoleBindings).UseCustomClusterRoleBindings
			vOpts := append(opts,
				db.WithValidateField("cluster_role_bindings_choice"),
				db.WithValidateField("use_custom_cluster_role_bindings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_role_choice"]; exists {
		val := m.GetClusterRoleChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_role_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRoleChoice().(type) {
	case *GlobalSpecType_UseDefaultClusterRoles:
		if fv, exists := v.FldValidators["cluster_role_choice.use_default_cluster_roles"]; exists {
			val := m.GetClusterRoleChoice().(*GlobalSpecType_UseDefaultClusterRoles).UseDefaultClusterRoles
			vOpts := append(opts,
				db.WithValidateField("cluster_role_choice"),
				db.WithValidateField("use_default_cluster_roles"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UseCustomClusterRoleList:
		if fv, exists := v.FldValidators["cluster_role_choice.use_custom_cluster_role_list"]; exists {
			val := m.GetClusterRoleChoice().(*GlobalSpecType_UseCustomClusterRoleList).UseCustomClusterRoleList
			vOpts := append(opts,
				db.WithValidateField("cluster_role_choice"),
				db.WithValidateField("use_custom_cluster_role_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice"]; exists {
		val := m.GetClusterScopedResourceAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_scoped_resource_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterScopedResourceAccessChoice().(type) {
	case *GlobalSpecType_ClusterScopedAccessDeny:
		if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice.cluster_scoped_access_deny"]; exists {
			val := m.GetClusterScopedResourceAccessChoice().(*GlobalSpecType_ClusterScopedAccessDeny).ClusterScopedAccessDeny
			vOpts := append(opts,
				db.WithValidateField("cluster_scoped_resource_access_choice"),
				db.WithValidateField("cluster_scoped_access_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ClusterScopedAccessPermit:
		if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice.cluster_scoped_access_permit"]; exists {
			val := m.GetClusterScopedResourceAccessChoice().(*GlobalSpecType_ClusterScopedAccessPermit).ClusterScopedAccessPermit
			vOpts := append(opts,
				db.WithValidateField("cluster_scoped_resource_access_choice"),
				db.WithValidateField("cluster_scoped_access_permit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["final_cluster_role_bindings"]; exists {
		vOpts := append(opts, db.WithValidateField("final_cluster_role_bindings"))
		if err := fv(ctx, m.GetFinalClusterRoleBindings(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["final_cluster_roles"]; exists {
		vOpts := append(opts, db.WithValidateField("final_cluster_roles"))
		if err := fv(ctx, m.GetFinalClusterRoles(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["final_pod_security_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("final_pod_security_policies"))
		if err := fv(ctx, m.GetFinalPodSecurityPolicies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["global_access_choice"]; exists {
		val := m.GetGlobalAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("global_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalAccessChoice().(type) {
	case *GlobalSpecType_NoGlobalAccess:
		if fv, exists := v.FldValidators["global_access_choice.no_global_access"]; exists {
			val := m.GetGlobalAccessChoice().(*GlobalSpecType_NoGlobalAccess).NoGlobalAccess
			vOpts := append(opts,
				db.WithValidateField("global_access_choice"),
				db.WithValidateField("no_global_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_GlobalAccessEnable:
		if fv, exists := v.FldValidators["global_access_choice.global_access_enable"]; exists {
			val := m.GetGlobalAccessChoice().(*GlobalSpecType_GlobalAccessEnable).GlobalAccessEnable
			vOpts := append(opts,
				db.WithValidateField("global_access_choice"),
				db.WithValidateField("global_access_enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["insecure_registries_choice"]; exists {
		val := m.GetInsecureRegistriesChoice()
		vOpts := append(opts,
			db.WithValidateField("insecure_registries_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsecureRegistriesChoice().(type) {
	case *GlobalSpecType_NoInsecureRegistries:
		if fv, exists := v.FldValidators["insecure_registries_choice.no_insecure_registries"]; exists {
			val := m.GetInsecureRegistriesChoice().(*GlobalSpecType_NoInsecureRegistries).NoInsecureRegistries
			vOpts := append(opts,
				db.WithValidateField("insecure_registries_choice"),
				db.WithValidateField("no_insecure_registries"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_InsecureRegistryList:
		if fv, exists := v.FldValidators["insecure_registries_choice.insecure_registry_list"]; exists {
			val := m.GetInsecureRegistriesChoice().(*GlobalSpecType_InsecureRegistryList).InsecureRegistryList
			vOpts := append(opts,
				db.WithValidateField("insecure_registries_choice"),
				db.WithValidateField("insecure_registry_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["local_access_choice"]; exists {
		val := m.GetLocalAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("local_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLocalAccessChoice().(type) {
	case *GlobalSpecType_NoLocalAccess:
		if fv, exists := v.FldValidators["local_access_choice.no_local_access"]; exists {
			val := m.GetLocalAccessChoice().(*GlobalSpecType_NoLocalAccess).NoLocalAccess
			vOpts := append(opts,
				db.WithValidateField("local_access_choice"),
				db.WithValidateField("no_local_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LocalAccessConfig:
		if fv, exists := v.FldValidators["local_access_choice.local_access_config"]; exists {
			val := m.GetLocalAccessChoice().(*GlobalSpecType_LocalAccessConfig).LocalAccessConfig
			vOpts := append(opts,
				db.WithValidateField("local_access_choice"),
				db.WithValidateField("local_access_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["pod_security_policy_choice"]; exists {
		val := m.GetPodSecurityPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("pod_security_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPodSecurityPolicyChoice().(type) {
	case *GlobalSpecType_UseDefaultPsp:
		if fv, exists := v.FldValidators["pod_security_policy_choice.use_default_psp"]; exists {
			val := m.GetPodSecurityPolicyChoice().(*GlobalSpecType_UseDefaultPsp).UseDefaultPsp
			vOpts := append(opts,
				db.WithValidateField("pod_security_policy_choice"),
				db.WithValidateField("use_default_psp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UseCustomPspList:
		if fv, exists := v.FldValidators["pod_security_policy_choice.use_custom_psp_list"]; exists {
			val := m.GetPodSecurityPolicyChoice().(*GlobalSpecType_UseCustomPspList).UseCustomPspList
			vOpts := append(opts,
				db.WithValidateField("pod_security_policy_choice"),
				db.WithValidateField("use_custom_psp_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vk8s_namespace_access_choice"]; exists {
		val := m.GetVk8SNamespaceAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("vk8s_namespace_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVk8SNamespaceAccessChoice().(type) {
	case *GlobalSpecType_Vk8SNamespaceAccessDeny:
		if fv, exists := v.FldValidators["vk8s_namespace_access_choice.vk8s_namespace_access_deny"]; exists {
			val := m.GetVk8SNamespaceAccessChoice().(*GlobalSpecType_Vk8SNamespaceAccessDeny).Vk8SNamespaceAccessDeny
			vOpts := append(opts,
				db.WithValidateField("vk8s_namespace_access_choice"),
				db.WithValidateField("vk8s_namespace_access_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Vk8SNamespaceAccessPermit:
		if fv, exists := v.FldValidators["vk8s_namespace_access_choice.vk8s_namespace_access_permit"]; exists {
			val := m.GetVk8SNamespaceAccessChoice().(*GlobalSpecType_Vk8SNamespaceAccessPermit).Vk8SNamespaceAccessPermit
			vOpts := append(opts,
				db.WithValidateField("vk8s_namespace_access_choice"),
				db.WithValidateField("vk8s_namespace_access_permit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppsChoice := v.AppsChoiceValidationRuleHandler
	rulesAppsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppsChoice(rulesAppsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.apps_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["apps_choice"] = vFn

	vrhClusterRoleBindingsChoice := v.ClusterRoleBindingsChoiceValidationRuleHandler
	rulesClusterRoleBindingsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRoleBindingsChoice(rulesClusterRoleBindingsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cluster_role_bindings_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_bindings_choice"] = vFn

	vrhClusterRoleChoice := v.ClusterRoleChoiceValidationRuleHandler
	rulesClusterRoleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRoleChoice(rulesClusterRoleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cluster_role_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_choice"] = vFn

	vrhClusterScopedResourceAccessChoice := v.ClusterScopedResourceAccessChoiceValidationRuleHandler
	rulesClusterScopedResourceAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterScopedResourceAccessChoice(rulesClusterScopedResourceAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cluster_scoped_resource_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_scoped_resource_access_choice"] = vFn

	vrhGlobalAccessChoice := v.GlobalAccessChoiceValidationRuleHandler
	rulesGlobalAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalAccessChoice(rulesGlobalAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.global_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_access_choice"] = vFn

	vrhInsecureRegistriesChoice := v.InsecureRegistriesChoiceValidationRuleHandler
	rulesInsecureRegistriesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsecureRegistriesChoice(rulesInsecureRegistriesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.insecure_registries_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["insecure_registries_choice"] = vFn

	vrhLocalAccessChoice := v.LocalAccessChoiceValidationRuleHandler
	rulesLocalAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLocalAccessChoice(rulesLocalAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.local_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_access_choice"] = vFn

	vrhPodSecurityPolicyChoice := v.PodSecurityPolicyChoiceValidationRuleHandler
	rulesPodSecurityPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPodSecurityPolicyChoice(rulesPodSecurityPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.pod_security_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pod_security_policy_choice"] = vFn

	vrhVk8SNamespaceAccessChoice := v.Vk8SNamespaceAccessChoiceValidationRuleHandler
	rulesVk8SNamespaceAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVk8SNamespaceAccessChoice(rulesVk8SNamespaceAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.vk8s_namespace_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vk8s_namespace_access_choice"] = vFn

	vrhFinalClusterRoleBindings := v.FinalClusterRoleBindingsValidationRuleHandler
	rulesFinalClusterRoleBindings := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "34",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFinalClusterRoleBindings(rulesFinalClusterRoleBindings)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.final_cluster_role_bindings: %s", err)
		panic(errMsg)
	}
	v.FldValidators["final_cluster_role_bindings"] = vFn

	vrhFinalClusterRoles := v.FinalClusterRolesValidationRuleHandler
	rulesFinalClusterRoles := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "34",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFinalClusterRoles(rulesFinalClusterRoles)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.final_cluster_roles: %s", err)
		panic(errMsg)
	}
	v.FldValidators["final_cluster_roles"] = vFn

	vrhFinalPodSecurityPolicies := v.FinalPodSecurityPoliciesValidationRuleHandler
	rulesFinalPodSecurityPolicies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "34",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFinalPodSecurityPolicies(rulesFinalPodSecurityPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.final_pod_security_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["final_pod_security_policies"] = vFn

	v.FldValidators["apps_choice.cluster_wide_app_list"] = ClusterWideAppListTypeValidator().Validate

	v.FldValidators["cluster_role_bindings_choice.use_custom_cluster_role_bindings"] = ClusterRoleBindingListTypeValidator().Validate

	v.FldValidators["cluster_role_choice.use_custom_cluster_role_list"] = ClusterRoleListTypeValidator().Validate

	v.FldValidators["insecure_registries_choice.insecure_registry_list"] = InsecureRegistryListTypeValidator().Validate

	v.FldValidators["local_access_choice.local_access_config"] = LocalAccessConfigTypeValidator().Validate

	v.FldValidators["pod_security_policy_choice.use_custom_psp_list"] = PodSecurityPolicyListTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *InsecureRegistryListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InsecureRegistryListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InsecureRegistryListType) DeepCopy() *InsecureRegistryListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InsecureRegistryListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InsecureRegistryListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InsecureRegistryListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InsecureRegistryListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateInsecureRegistryListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInsecureRegistryListType) InsecureRegistriesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for insecure_registries")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for insecure_registries")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated insecure_registries")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items insecure_registries")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInsecureRegistryListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InsecureRegistryListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InsecureRegistryListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["insecure_registries"]; exists {
		vOpts := append(opts, db.WithValidateField("insecure_registries"))
		if err := fv(ctx, m.GetInsecureRegistries(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInsecureRegistryListTypeValidator = func() *ValidateInsecureRegistryListType {
	v := &ValidateInsecureRegistryListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInsecureRegistries := v.InsecureRegistriesValidationRuleHandler
	rulesInsecureRegistries := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.hostport":  "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhInsecureRegistries(rulesInsecureRegistries)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InsecureRegistryListType.insecure_registries: %s", err)
		panic(errMsg)
	}
	v.FldValidators["insecure_registries"] = vFn

	return v
}()

func InsecureRegistryListTypeValidator() db.Validator {
	return DefaultInsecureRegistryListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LocalAccessArgoCDType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LocalAccessArgoCDType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *LocalAccessArgoCDType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPassword().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting LocalAccessArgoCDType.password")
	}

	return nil
}

func (m *LocalAccessArgoCDType) DeepCopy() *LocalAccessArgoCDType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LocalAccessArgoCDType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LocalAccessArgoCDType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LocalAccessArgoCDType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LocalAccessArgoCDTypeValidator().Validate(ctx, m, opts...)
}

type ValidateLocalAccessArgoCDType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLocalAccessArgoCDType) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateLocalAccessArgoCDType) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}

func (v *ValidateLocalAccessArgoCDType) LocalDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for local_domain")
	}

	return validatorFn, nil
}

func (v *ValidateLocalAccessArgoCDType) PasswordValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for password")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLocalAccessArgoCDType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LocalAccessArgoCDType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LocalAccessArgoCDType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["local_domain"]; exists {

		vOpts := append(opts, db.WithValidateField("local_domain"))
		if err := fv(ctx, m.GetLocalDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["password"]; exists {

		vOpts := append(opts, db.WithValidateField("password"))
		if err := fv(ctx, m.GetPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *LocalAccessArgoCDType_DefaultPort:
		if fv, exists := v.FldValidators["port_choice.default_port"]; exists {
			val := m.GetPortChoice().(*LocalAccessArgoCDType_DefaultPort).DefaultPort
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("default_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *LocalAccessArgoCDType_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*LocalAccessArgoCDType_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLocalAccessArgoCDTypeValidator = func() *ValidateLocalAccessArgoCDType {
	v := &ValidateLocalAccessArgoCDType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LocalAccessArgoCDType.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.not_in_ranges": "0,6443,8005-8007,8443-8444,8505-8507,9005-9007,9090,9505-9507,9100,9115,9999,20914,23802,30805,30855,30905,30955,32222,18091-18095,65000-65334",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field LocalAccessArgoCDType.port_choice_port: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]

	vrhLocalDomain := v.LocalDomainValidationRuleHandler
	rulesLocalDomain := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.hostname":  "true",
		"ves.io.schema.rules.string.max_len":   "192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhLocalDomain(rulesLocalDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LocalAccessArgoCDType.local_domain: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_domain"] = vFn

	vrhPassword := v.PasswordValidationRuleHandler
	rulesPassword := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPassword(rulesPassword)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LocalAccessArgoCDType.password: %s", err)
		panic(errMsg)
	}
	v.FldValidators["password"] = vFn

	return v
}()

func LocalAccessArgoCDTypeValidator() db.Validator {
	return DefaultLocalAccessArgoCDTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LocalAccessConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LocalAccessConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LocalAccessConfigType) DeepCopy() *LocalAccessConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LocalAccessConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LocalAccessConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LocalAccessConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LocalAccessConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateLocalAccessConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLocalAccessConfigType) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateLocalAccessConfigType) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}

func (v *ValidateLocalAccessConfigType) LocalDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for local_domain")
	}

	return validatorFn, nil
}

func (v *ValidateLocalAccessConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LocalAccessConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LocalAccessConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["local_domain"]; exists {

		vOpts := append(opts, db.WithValidateField("local_domain"))
		if err := fv(ctx, m.GetLocalDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *LocalAccessConfigType_DefaultPort:
		if fv, exists := v.FldValidators["port_choice.default_port"]; exists {
			val := m.GetPortChoice().(*LocalAccessConfigType_DefaultPort).DefaultPort
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("default_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *LocalAccessConfigType_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*LocalAccessConfigType_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLocalAccessConfigTypeValidator = func() *ValidateLocalAccessConfigType {
	v := &ValidateLocalAccessConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LocalAccessConfigType.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.not_in_ranges": "0,6443,8005-8007,8443-8444,8505-8507,9005-9007,9090,9505-9507,9100,9115,9999,20914,23802,30805,30855,30905,30955,32222,18091-18095,65000-65334",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field LocalAccessConfigType.port_choice_port: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]

	vrhLocalDomain := v.LocalDomainValidationRuleHandler
	rulesLocalDomain := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.hostname":  "true",
		"ves.io.schema.rules.string.max_len":   "192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhLocalDomain(rulesLocalDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LocalAccessConfigType.local_domain: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_domain"] = vFn

	return v
}()

func LocalAccessConfigTypeValidator() db.Validator {
	return DefaultLocalAccessConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PodSecurityPolicyListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PodSecurityPolicyListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PodSecurityPolicyListType) DeepCopy() *PodSecurityPolicyListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PodSecurityPolicyListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PodSecurityPolicyListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PodSecurityPolicyListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PodSecurityPolicyListTypeValidator().Validate(ctx, m, opts...)
}

func (m *PodSecurityPolicyListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPodSecurityPoliciesDRefInfo()

}

func (m *PodSecurityPolicyListType) GetPodSecurityPoliciesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetPodSecurityPolicies()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("PodSecurityPolicyListType.pod_security_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("k8s_pod_security_policy.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "k8s_pod_security_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "pod_security_policies",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetPodSecurityPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *PodSecurityPolicyListType) GetPodSecurityPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "k8s_pod_security_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: k8s_pod_security_policy")
	}
	for i, vref := range m.GetPodSecurityPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("PodSecurityPolicyListType.pod_security_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "k8s_pod_security_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidatePodSecurityPolicyListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePodSecurityPolicyListType) PodSecurityPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for pod_security_policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for pod_security_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated pod_security_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items pod_security_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePodSecurityPolicyListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PodSecurityPolicyListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PodSecurityPolicyListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["pod_security_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("pod_security_policies"))
		if err := fv(ctx, m.GetPodSecurityPolicies(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPodSecurityPolicyListTypeValidator = func() *ValidatePodSecurityPolicyListType {
	v := &ValidatePodSecurityPolicyListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPodSecurityPolicies := v.PodSecurityPoliciesValidationRuleHandler
	rulesPodSecurityPolicies := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhPodSecurityPolicies(rulesPodSecurityPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PodSecurityPolicyListType.pod_security_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pod_security_policies"] = vFn

	return v
}()

func PodSecurityPolicyListTypeValidator() db.Validator {
	return DefaultPodSecurityPolicyListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetClusterWideAppList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.cluster_wide_app_list")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetClusterRoleBindingsChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetClusterRoleBindingsChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetClusterRoleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetClusterRoleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPodSecurityPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPodSecurityPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetClusterRoleBindingsChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClusterRoleBindingsChoice() == nil {
		return nil, nil
	}
	switch m.GetClusterRoleBindingsChoice().(type) {
	case *ReplaceSpecType_UseDefaultClusterRoleBindings:

		return nil, nil

	case *ReplaceSpecType_UseCustomClusterRoleBindings:
		drInfos, err := m.GetUseCustomClusterRoleBindings().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomClusterRoleBindings().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_cluster_role_bindings." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetClusterRoleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClusterRoleChoice() == nil {
		return nil, nil
	}
	switch m.GetClusterRoleChoice().(type) {
	case *ReplaceSpecType_UseDefaultClusterRoles:

		return nil, nil

	case *ReplaceSpecType_UseCustomClusterRoleList:
		drInfos, err := m.GetUseCustomClusterRoleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomClusterRoleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_cluster_role_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetPodSecurityPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPodSecurityPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetPodSecurityPolicyChoice().(type) {
	case *ReplaceSpecType_UseDefaultPsp:

		return nil, nil

	case *ReplaceSpecType_UseCustomPspList:
		drInfos, err := m.GetUseCustomPspList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseCustomPspList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_custom_psp_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AppsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for apps_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ClusterRoleBindingsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_role_bindings_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ClusterRoleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_role_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ClusterScopedResourceAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_scoped_resource_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GlobalAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) InsecureRegistriesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for insecure_registries_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LocalAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for local_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) PodSecurityPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pod_security_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Vk8SNamespaceAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vk8s_namespace_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apps_choice"]; exists {
		val := m.GetAppsChoice()
		vOpts := append(opts,
			db.WithValidateField("apps_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppsChoice().(type) {
	case *ReplaceSpecType_NoClusterWideApps:
		if fv, exists := v.FldValidators["apps_choice.no_cluster_wide_apps"]; exists {
			val := m.GetAppsChoice().(*ReplaceSpecType_NoClusterWideApps).NoClusterWideApps
			vOpts := append(opts,
				db.WithValidateField("apps_choice"),
				db.WithValidateField("no_cluster_wide_apps"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ClusterWideAppList:
		if fv, exists := v.FldValidators["apps_choice.cluster_wide_app_list"]; exists {
			val := m.GetAppsChoice().(*ReplaceSpecType_ClusterWideAppList).ClusterWideAppList
			vOpts := append(opts,
				db.WithValidateField("apps_choice"),
				db.WithValidateField("cluster_wide_app_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_role_bindings_choice"]; exists {
		val := m.GetClusterRoleBindingsChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_role_bindings_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRoleBindingsChoice().(type) {
	case *ReplaceSpecType_UseDefaultClusterRoleBindings:
		if fv, exists := v.FldValidators["cluster_role_bindings_choice.use_default_cluster_role_bindings"]; exists {
			val := m.GetClusterRoleBindingsChoice().(*ReplaceSpecType_UseDefaultClusterRoleBindings).UseDefaultClusterRoleBindings
			vOpts := append(opts,
				db.WithValidateField("cluster_role_bindings_choice"),
				db.WithValidateField("use_default_cluster_role_bindings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_UseCustomClusterRoleBindings:
		if fv, exists := v.FldValidators["cluster_role_bindings_choice.use_custom_cluster_role_bindings"]; exists {
			val := m.GetClusterRoleBindingsChoice().(*ReplaceSpecType_UseCustomClusterRoleBindings).UseCustomClusterRoleBindings
			vOpts := append(opts,
				db.WithValidateField("cluster_role_bindings_choice"),
				db.WithValidateField("use_custom_cluster_role_bindings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_role_choice"]; exists {
		val := m.GetClusterRoleChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_role_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRoleChoice().(type) {
	case *ReplaceSpecType_UseDefaultClusterRoles:
		if fv, exists := v.FldValidators["cluster_role_choice.use_default_cluster_roles"]; exists {
			val := m.GetClusterRoleChoice().(*ReplaceSpecType_UseDefaultClusterRoles).UseDefaultClusterRoles
			vOpts := append(opts,
				db.WithValidateField("cluster_role_choice"),
				db.WithValidateField("use_default_cluster_roles"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_UseCustomClusterRoleList:
		if fv, exists := v.FldValidators["cluster_role_choice.use_custom_cluster_role_list"]; exists {
			val := m.GetClusterRoleChoice().(*ReplaceSpecType_UseCustomClusterRoleList).UseCustomClusterRoleList
			vOpts := append(opts,
				db.WithValidateField("cluster_role_choice"),
				db.WithValidateField("use_custom_cluster_role_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice"]; exists {
		val := m.GetClusterScopedResourceAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_scoped_resource_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterScopedResourceAccessChoice().(type) {
	case *ReplaceSpecType_ClusterScopedAccessDeny:
		if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice.cluster_scoped_access_deny"]; exists {
			val := m.GetClusterScopedResourceAccessChoice().(*ReplaceSpecType_ClusterScopedAccessDeny).ClusterScopedAccessDeny
			vOpts := append(opts,
				db.WithValidateField("cluster_scoped_resource_access_choice"),
				db.WithValidateField("cluster_scoped_access_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ClusterScopedAccessPermit:
		if fv, exists := v.FldValidators["cluster_scoped_resource_access_choice.cluster_scoped_access_permit"]; exists {
			val := m.GetClusterScopedResourceAccessChoice().(*ReplaceSpecType_ClusterScopedAccessPermit).ClusterScopedAccessPermit
			vOpts := append(opts,
				db.WithValidateField("cluster_scoped_resource_access_choice"),
				db.WithValidateField("cluster_scoped_access_permit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_access_choice"]; exists {
		val := m.GetGlobalAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("global_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalAccessChoice().(type) {
	case *ReplaceSpecType_NoGlobalAccess:
		if fv, exists := v.FldValidators["global_access_choice.no_global_access"]; exists {
			val := m.GetGlobalAccessChoice().(*ReplaceSpecType_NoGlobalAccess).NoGlobalAccess
			vOpts := append(opts,
				db.WithValidateField("global_access_choice"),
				db.WithValidateField("no_global_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_GlobalAccessEnable:
		if fv, exists := v.FldValidators["global_access_choice.global_access_enable"]; exists {
			val := m.GetGlobalAccessChoice().(*ReplaceSpecType_GlobalAccessEnable).GlobalAccessEnable
			vOpts := append(opts,
				db.WithValidateField("global_access_choice"),
				db.WithValidateField("global_access_enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["insecure_registries_choice"]; exists {
		val := m.GetInsecureRegistriesChoice()
		vOpts := append(opts,
			db.WithValidateField("insecure_registries_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsecureRegistriesChoice().(type) {
	case *ReplaceSpecType_NoInsecureRegistries:
		if fv, exists := v.FldValidators["insecure_registries_choice.no_insecure_registries"]; exists {
			val := m.GetInsecureRegistriesChoice().(*ReplaceSpecType_NoInsecureRegistries).NoInsecureRegistries
			vOpts := append(opts,
				db.WithValidateField("insecure_registries_choice"),
				db.WithValidateField("no_insecure_registries"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_InsecureRegistryList:
		if fv, exists := v.FldValidators["insecure_registries_choice.insecure_registry_list"]; exists {
			val := m.GetInsecureRegistriesChoice().(*ReplaceSpecType_InsecureRegistryList).InsecureRegistryList
			vOpts := append(opts,
				db.WithValidateField("insecure_registries_choice"),
				db.WithValidateField("insecure_registry_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["local_access_choice"]; exists {
		val := m.GetLocalAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("local_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLocalAccessChoice().(type) {
	case *ReplaceSpecType_NoLocalAccess:
		if fv, exists := v.FldValidators["local_access_choice.no_local_access"]; exists {
			val := m.GetLocalAccessChoice().(*ReplaceSpecType_NoLocalAccess).NoLocalAccess
			vOpts := append(opts,
				db.WithValidateField("local_access_choice"),
				db.WithValidateField("no_local_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LocalAccessConfig:
		if fv, exists := v.FldValidators["local_access_choice.local_access_config"]; exists {
			val := m.GetLocalAccessChoice().(*ReplaceSpecType_LocalAccessConfig).LocalAccessConfig
			vOpts := append(opts,
				db.WithValidateField("local_access_choice"),
				db.WithValidateField("local_access_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["pod_security_policy_choice"]; exists {
		val := m.GetPodSecurityPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("pod_security_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPodSecurityPolicyChoice().(type) {
	case *ReplaceSpecType_UseDefaultPsp:
		if fv, exists := v.FldValidators["pod_security_policy_choice.use_default_psp"]; exists {
			val := m.GetPodSecurityPolicyChoice().(*ReplaceSpecType_UseDefaultPsp).UseDefaultPsp
			vOpts := append(opts,
				db.WithValidateField("pod_security_policy_choice"),
				db.WithValidateField("use_default_psp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_UseCustomPspList:
		if fv, exists := v.FldValidators["pod_security_policy_choice.use_custom_psp_list"]; exists {
			val := m.GetPodSecurityPolicyChoice().(*ReplaceSpecType_UseCustomPspList).UseCustomPspList
			vOpts := append(opts,
				db.WithValidateField("pod_security_policy_choice"),
				db.WithValidateField("use_custom_psp_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vk8s_namespace_access_choice"]; exists {
		val := m.GetVk8SNamespaceAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("vk8s_namespace_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVk8SNamespaceAccessChoice().(type) {
	case *ReplaceSpecType_Vk8SNamespaceAccessDeny:
		if fv, exists := v.FldValidators["vk8s_namespace_access_choice.vk8s_namespace_access_deny"]; exists {
			val := m.GetVk8SNamespaceAccessChoice().(*ReplaceSpecType_Vk8SNamespaceAccessDeny).Vk8SNamespaceAccessDeny
			vOpts := append(opts,
				db.WithValidateField("vk8s_namespace_access_choice"),
				db.WithValidateField("vk8s_namespace_access_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Vk8SNamespaceAccessPermit:
		if fv, exists := v.FldValidators["vk8s_namespace_access_choice.vk8s_namespace_access_permit"]; exists {
			val := m.GetVk8SNamespaceAccessChoice().(*ReplaceSpecType_Vk8SNamespaceAccessPermit).Vk8SNamespaceAccessPermit
			vOpts := append(opts,
				db.WithValidateField("vk8s_namespace_access_choice"),
				db.WithValidateField("vk8s_namespace_access_permit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppsChoice := v.AppsChoiceValidationRuleHandler
	rulesAppsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppsChoice(rulesAppsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.apps_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["apps_choice"] = vFn

	vrhClusterRoleBindingsChoice := v.ClusterRoleBindingsChoiceValidationRuleHandler
	rulesClusterRoleBindingsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRoleBindingsChoice(rulesClusterRoleBindingsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cluster_role_bindings_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_bindings_choice"] = vFn

	vrhClusterRoleChoice := v.ClusterRoleChoiceValidationRuleHandler
	rulesClusterRoleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRoleChoice(rulesClusterRoleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cluster_role_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_role_choice"] = vFn

	vrhClusterScopedResourceAccessChoice := v.ClusterScopedResourceAccessChoiceValidationRuleHandler
	rulesClusterScopedResourceAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterScopedResourceAccessChoice(rulesClusterScopedResourceAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cluster_scoped_resource_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_scoped_resource_access_choice"] = vFn

	vrhGlobalAccessChoice := v.GlobalAccessChoiceValidationRuleHandler
	rulesGlobalAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalAccessChoice(rulesGlobalAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.global_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_access_choice"] = vFn

	vrhInsecureRegistriesChoice := v.InsecureRegistriesChoiceValidationRuleHandler
	rulesInsecureRegistriesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsecureRegistriesChoice(rulesInsecureRegistriesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.insecure_registries_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["insecure_registries_choice"] = vFn

	vrhLocalAccessChoice := v.LocalAccessChoiceValidationRuleHandler
	rulesLocalAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLocalAccessChoice(rulesLocalAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.local_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_access_choice"] = vFn

	vrhPodSecurityPolicyChoice := v.PodSecurityPolicyChoiceValidationRuleHandler
	rulesPodSecurityPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPodSecurityPolicyChoice(rulesPodSecurityPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.pod_security_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pod_security_policy_choice"] = vFn

	vrhVk8SNamespaceAccessChoice := v.Vk8SNamespaceAccessChoiceValidationRuleHandler
	rulesVk8SNamespaceAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVk8SNamespaceAccessChoice(rulesVk8SNamespaceAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.vk8s_namespace_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vk8s_namespace_access_choice"] = vFn

	v.FldValidators["apps_choice.cluster_wide_app_list"] = ClusterWideAppListTypeValidator().Validate

	v.FldValidators["cluster_role_bindings_choice.use_custom_cluster_role_bindings"] = ClusterRoleBindingListTypeValidator().Validate

	v.FldValidators["cluster_role_choice.use_custom_cluster_role_list"] = ClusterRoleListTypeValidator().Validate

	v.FldValidators["insecure_registries_choice.insecure_registry_list"] = InsecureRegistryListTypeValidator().Validate

	v.FldValidators["local_access_choice.local_access_config"] = LocalAccessConfigTypeValidator().Validate

	v.FldValidators["pod_security_policy_choice.use_custom_psp_list"] = PodSecurityPolicyListTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetAppsChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AppsChoice.(type) {
	case nil:
		o.AppsChoice = nil

	case *CreateSpecType_ClusterWideAppList:
		o.AppsChoice = &GlobalSpecType_ClusterWideAppList{ClusterWideAppList: of.ClusterWideAppList}

	case *CreateSpecType_NoClusterWideApps:
		o.AppsChoice = &GlobalSpecType_NoClusterWideApps{NoClusterWideApps: of.NoClusterWideApps}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetAppsChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AppsChoice.(type) {
	case nil:
		r.AppsChoice = nil

	case *GlobalSpecType_ClusterWideAppList:
		r.AppsChoice = &CreateSpecType_ClusterWideAppList{ClusterWideAppList: of.ClusterWideAppList}

	case *GlobalSpecType_NoClusterWideApps:
		r.AppsChoice = &CreateSpecType_NoClusterWideApps{NoClusterWideApps: of.NoClusterWideApps}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetClusterRoleBindingsChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRoleBindingsChoice.(type) {
	case nil:
		o.ClusterRoleBindingsChoice = nil

	case *CreateSpecType_UseCustomClusterRoleBindings:
		o.ClusterRoleBindingsChoice = &GlobalSpecType_UseCustomClusterRoleBindings{UseCustomClusterRoleBindings: of.UseCustomClusterRoleBindings}

	case *CreateSpecType_UseDefaultClusterRoleBindings:
		o.ClusterRoleBindingsChoice = &GlobalSpecType_UseDefaultClusterRoleBindings{UseDefaultClusterRoleBindings: of.UseDefaultClusterRoleBindings}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetClusterRoleBindingsChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRoleBindingsChoice.(type) {
	case nil:
		r.ClusterRoleBindingsChoice = nil

	case *GlobalSpecType_UseCustomClusterRoleBindings:
		r.ClusterRoleBindingsChoice = &CreateSpecType_UseCustomClusterRoleBindings{UseCustomClusterRoleBindings: of.UseCustomClusterRoleBindings}

	case *GlobalSpecType_UseDefaultClusterRoleBindings:
		r.ClusterRoleBindingsChoice = &CreateSpecType_UseDefaultClusterRoleBindings{UseDefaultClusterRoleBindings: of.UseDefaultClusterRoleBindings}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetClusterRoleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRoleChoice.(type) {
	case nil:
		o.ClusterRoleChoice = nil

	case *CreateSpecType_UseCustomClusterRoleList:
		o.ClusterRoleChoice = &GlobalSpecType_UseCustomClusterRoleList{UseCustomClusterRoleList: of.UseCustomClusterRoleList}

	case *CreateSpecType_UseDefaultClusterRoles:
		o.ClusterRoleChoice = &GlobalSpecType_UseDefaultClusterRoles{UseDefaultClusterRoles: of.UseDefaultClusterRoles}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetClusterRoleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRoleChoice.(type) {
	case nil:
		r.ClusterRoleChoice = nil

	case *GlobalSpecType_UseCustomClusterRoleList:
		r.ClusterRoleChoice = &CreateSpecType_UseCustomClusterRoleList{UseCustomClusterRoleList: of.UseCustomClusterRoleList}

	case *GlobalSpecType_UseDefaultClusterRoles:
		r.ClusterRoleChoice = &CreateSpecType_UseDefaultClusterRoles{UseDefaultClusterRoles: of.UseDefaultClusterRoles}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetClusterScopedResourceAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterScopedResourceAccessChoice.(type) {
	case nil:
		o.ClusterScopedResourceAccessChoice = nil

	case *CreateSpecType_ClusterScopedAccessDeny:
		o.ClusterScopedResourceAccessChoice = &GlobalSpecType_ClusterScopedAccessDeny{ClusterScopedAccessDeny: of.ClusterScopedAccessDeny}

	case *CreateSpecType_ClusterScopedAccessPermit:
		o.ClusterScopedResourceAccessChoice = &GlobalSpecType_ClusterScopedAccessPermit{ClusterScopedAccessPermit: of.ClusterScopedAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetClusterScopedResourceAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterScopedResourceAccessChoice.(type) {
	case nil:
		r.ClusterScopedResourceAccessChoice = nil

	case *GlobalSpecType_ClusterScopedAccessDeny:
		r.ClusterScopedResourceAccessChoice = &CreateSpecType_ClusterScopedAccessDeny{ClusterScopedAccessDeny: of.ClusterScopedAccessDeny}

	case *GlobalSpecType_ClusterScopedAccessPermit:
		r.ClusterScopedResourceAccessChoice = &CreateSpecType_ClusterScopedAccessPermit{ClusterScopedAccessPermit: of.ClusterScopedAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetGlobalAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.GlobalAccessChoice.(type) {
	case nil:
		o.GlobalAccessChoice = nil

	case *CreateSpecType_GlobalAccessEnable:
		o.GlobalAccessChoice = &GlobalSpecType_GlobalAccessEnable{GlobalAccessEnable: of.GlobalAccessEnable}

	case *CreateSpecType_NoGlobalAccess:
		o.GlobalAccessChoice = &GlobalSpecType_NoGlobalAccess{NoGlobalAccess: of.NoGlobalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetGlobalAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.GlobalAccessChoice.(type) {
	case nil:
		r.GlobalAccessChoice = nil

	case *GlobalSpecType_GlobalAccessEnable:
		r.GlobalAccessChoice = &CreateSpecType_GlobalAccessEnable{GlobalAccessEnable: of.GlobalAccessEnable}

	case *GlobalSpecType_NoGlobalAccess:
		r.GlobalAccessChoice = &CreateSpecType_NoGlobalAccess{NoGlobalAccess: of.NoGlobalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetInsecureRegistriesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InsecureRegistriesChoice.(type) {
	case nil:
		o.InsecureRegistriesChoice = nil

	case *CreateSpecType_InsecureRegistryList:
		o.InsecureRegistriesChoice = &GlobalSpecType_InsecureRegistryList{InsecureRegistryList: of.InsecureRegistryList}

	case *CreateSpecType_NoInsecureRegistries:
		o.InsecureRegistriesChoice = &GlobalSpecType_NoInsecureRegistries{NoInsecureRegistries: of.NoInsecureRegistries}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetInsecureRegistriesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InsecureRegistriesChoice.(type) {
	case nil:
		r.InsecureRegistriesChoice = nil

	case *GlobalSpecType_InsecureRegistryList:
		r.InsecureRegistriesChoice = &CreateSpecType_InsecureRegistryList{InsecureRegistryList: of.InsecureRegistryList}

	case *GlobalSpecType_NoInsecureRegistries:
		r.InsecureRegistriesChoice = &CreateSpecType_NoInsecureRegistries{NoInsecureRegistries: of.NoInsecureRegistries}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLocalAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LocalAccessChoice.(type) {
	case nil:
		o.LocalAccessChoice = nil

	case *CreateSpecType_LocalAccessConfig:
		o.LocalAccessChoice = &GlobalSpecType_LocalAccessConfig{LocalAccessConfig: of.LocalAccessConfig}

	case *CreateSpecType_NoLocalAccess:
		o.LocalAccessChoice = &GlobalSpecType_NoLocalAccess{NoLocalAccess: of.NoLocalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLocalAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LocalAccessChoice.(type) {
	case nil:
		r.LocalAccessChoice = nil

	case *GlobalSpecType_LocalAccessConfig:
		r.LocalAccessChoice = &CreateSpecType_LocalAccessConfig{LocalAccessConfig: of.LocalAccessConfig}

	case *GlobalSpecType_NoLocalAccess:
		r.LocalAccessChoice = &CreateSpecType_NoLocalAccess{NoLocalAccess: of.NoLocalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetPodSecurityPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PodSecurityPolicyChoice.(type) {
	case nil:
		o.PodSecurityPolicyChoice = nil

	case *CreateSpecType_UseCustomPspList:
		o.PodSecurityPolicyChoice = &GlobalSpecType_UseCustomPspList{UseCustomPspList: of.UseCustomPspList}

	case *CreateSpecType_UseDefaultPsp:
		o.PodSecurityPolicyChoice = &GlobalSpecType_UseDefaultPsp{UseDefaultPsp: of.UseDefaultPsp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetPodSecurityPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PodSecurityPolicyChoice.(type) {
	case nil:
		r.PodSecurityPolicyChoice = nil

	case *GlobalSpecType_UseCustomPspList:
		r.PodSecurityPolicyChoice = &CreateSpecType_UseCustomPspList{UseCustomPspList: of.UseCustomPspList}

	case *GlobalSpecType_UseDefaultPsp:
		r.PodSecurityPolicyChoice = &CreateSpecType_UseDefaultPsp{UseDefaultPsp: of.UseDefaultPsp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetVk8SNamespaceAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Vk8SNamespaceAccessChoice.(type) {
	case nil:
		o.Vk8SNamespaceAccessChoice = nil

	case *CreateSpecType_Vk8SNamespaceAccessDeny:
		o.Vk8SNamespaceAccessChoice = &GlobalSpecType_Vk8SNamespaceAccessDeny{Vk8SNamespaceAccessDeny: of.Vk8SNamespaceAccessDeny}

	case *CreateSpecType_Vk8SNamespaceAccessPermit:
		o.Vk8SNamespaceAccessChoice = &GlobalSpecType_Vk8SNamespaceAccessPermit{Vk8SNamespaceAccessPermit: of.Vk8SNamespaceAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetVk8SNamespaceAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Vk8SNamespaceAccessChoice.(type) {
	case nil:
		r.Vk8SNamespaceAccessChoice = nil

	case *GlobalSpecType_Vk8SNamespaceAccessDeny:
		r.Vk8SNamespaceAccessChoice = &CreateSpecType_Vk8SNamespaceAccessDeny{Vk8SNamespaceAccessDeny: of.Vk8SNamespaceAccessDeny}

	case *GlobalSpecType_Vk8SNamespaceAccessPermit:
		r.Vk8SNamespaceAccessChoice = &CreateSpecType_Vk8SNamespaceAccessPermit{Vk8SNamespaceAccessPermit: of.Vk8SNamespaceAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAppsChoiceFromGlobalSpecType(f)
	m.GetClusterRoleBindingsChoiceFromGlobalSpecType(f)
	m.GetClusterRoleChoiceFromGlobalSpecType(f)
	m.GetClusterScopedResourceAccessChoiceFromGlobalSpecType(f)
	m.GetGlobalAccessChoiceFromGlobalSpecType(f)
	m.GetInsecureRegistriesChoiceFromGlobalSpecType(f)
	m.GetLocalAccessChoiceFromGlobalSpecType(f)
	m.GetPodSecurityPolicyChoiceFromGlobalSpecType(f)
	m.GetVk8SNamespaceAccessChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAppsChoiceToGlobalSpecType(f)
	m1.SetClusterRoleBindingsChoiceToGlobalSpecType(f)
	m1.SetClusterRoleChoiceToGlobalSpecType(f)
	m1.SetClusterScopedResourceAccessChoiceToGlobalSpecType(f)
	m1.SetGlobalAccessChoiceToGlobalSpecType(f)
	m1.SetInsecureRegistriesChoiceToGlobalSpecType(f)
	m1.SetLocalAccessChoiceToGlobalSpecType(f)
	m1.SetPodSecurityPolicyChoiceToGlobalSpecType(f)
	m1.SetVk8SNamespaceAccessChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAppsChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AppsChoice.(type) {
	case nil:
		o.AppsChoice = nil

	case *GetSpecType_ClusterWideAppList:
		o.AppsChoice = &GlobalSpecType_ClusterWideAppList{ClusterWideAppList: of.ClusterWideAppList}

	case *GetSpecType_NoClusterWideApps:
		o.AppsChoice = &GlobalSpecType_NoClusterWideApps{NoClusterWideApps: of.NoClusterWideApps}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAppsChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AppsChoice.(type) {
	case nil:
		r.AppsChoice = nil

	case *GlobalSpecType_ClusterWideAppList:
		r.AppsChoice = &GetSpecType_ClusterWideAppList{ClusterWideAppList: of.ClusterWideAppList}

	case *GlobalSpecType_NoClusterWideApps:
		r.AppsChoice = &GetSpecType_NoClusterWideApps{NoClusterWideApps: of.NoClusterWideApps}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetClusterRoleBindingsChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRoleBindingsChoice.(type) {
	case nil:
		o.ClusterRoleBindingsChoice = nil

	case *GetSpecType_UseCustomClusterRoleBindings:
		o.ClusterRoleBindingsChoice = &GlobalSpecType_UseCustomClusterRoleBindings{UseCustomClusterRoleBindings: of.UseCustomClusterRoleBindings}

	case *GetSpecType_UseDefaultClusterRoleBindings:
		o.ClusterRoleBindingsChoice = &GlobalSpecType_UseDefaultClusterRoleBindings{UseDefaultClusterRoleBindings: of.UseDefaultClusterRoleBindings}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetClusterRoleBindingsChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRoleBindingsChoice.(type) {
	case nil:
		r.ClusterRoleBindingsChoice = nil

	case *GlobalSpecType_UseCustomClusterRoleBindings:
		r.ClusterRoleBindingsChoice = &GetSpecType_UseCustomClusterRoleBindings{UseCustomClusterRoleBindings: of.UseCustomClusterRoleBindings}

	case *GlobalSpecType_UseDefaultClusterRoleBindings:
		r.ClusterRoleBindingsChoice = &GetSpecType_UseDefaultClusterRoleBindings{UseDefaultClusterRoleBindings: of.UseDefaultClusterRoleBindings}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetClusterRoleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRoleChoice.(type) {
	case nil:
		o.ClusterRoleChoice = nil

	case *GetSpecType_UseCustomClusterRoleList:
		o.ClusterRoleChoice = &GlobalSpecType_UseCustomClusterRoleList{UseCustomClusterRoleList: of.UseCustomClusterRoleList}

	case *GetSpecType_UseDefaultClusterRoles:
		o.ClusterRoleChoice = &GlobalSpecType_UseDefaultClusterRoles{UseDefaultClusterRoles: of.UseDefaultClusterRoles}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetClusterRoleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRoleChoice.(type) {
	case nil:
		r.ClusterRoleChoice = nil

	case *GlobalSpecType_UseCustomClusterRoleList:
		r.ClusterRoleChoice = &GetSpecType_UseCustomClusterRoleList{UseCustomClusterRoleList: of.UseCustomClusterRoleList}

	case *GlobalSpecType_UseDefaultClusterRoles:
		r.ClusterRoleChoice = &GetSpecType_UseDefaultClusterRoles{UseDefaultClusterRoles: of.UseDefaultClusterRoles}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetClusterScopedResourceAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterScopedResourceAccessChoice.(type) {
	case nil:
		o.ClusterScopedResourceAccessChoice = nil

	case *GetSpecType_ClusterScopedAccessDeny:
		o.ClusterScopedResourceAccessChoice = &GlobalSpecType_ClusterScopedAccessDeny{ClusterScopedAccessDeny: of.ClusterScopedAccessDeny}

	case *GetSpecType_ClusterScopedAccessPermit:
		o.ClusterScopedResourceAccessChoice = &GlobalSpecType_ClusterScopedAccessPermit{ClusterScopedAccessPermit: of.ClusterScopedAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetClusterScopedResourceAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterScopedResourceAccessChoice.(type) {
	case nil:
		r.ClusterScopedResourceAccessChoice = nil

	case *GlobalSpecType_ClusterScopedAccessDeny:
		r.ClusterScopedResourceAccessChoice = &GetSpecType_ClusterScopedAccessDeny{ClusterScopedAccessDeny: of.ClusterScopedAccessDeny}

	case *GlobalSpecType_ClusterScopedAccessPermit:
		r.ClusterScopedResourceAccessChoice = &GetSpecType_ClusterScopedAccessPermit{ClusterScopedAccessPermit: of.ClusterScopedAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetGlobalAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.GlobalAccessChoice.(type) {
	case nil:
		o.GlobalAccessChoice = nil

	case *GetSpecType_GlobalAccessEnable:
		o.GlobalAccessChoice = &GlobalSpecType_GlobalAccessEnable{GlobalAccessEnable: of.GlobalAccessEnable}

	case *GetSpecType_NoGlobalAccess:
		o.GlobalAccessChoice = &GlobalSpecType_NoGlobalAccess{NoGlobalAccess: of.NoGlobalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetGlobalAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.GlobalAccessChoice.(type) {
	case nil:
		r.GlobalAccessChoice = nil

	case *GlobalSpecType_GlobalAccessEnable:
		r.GlobalAccessChoice = &GetSpecType_GlobalAccessEnable{GlobalAccessEnable: of.GlobalAccessEnable}

	case *GlobalSpecType_NoGlobalAccess:
		r.GlobalAccessChoice = &GetSpecType_NoGlobalAccess{NoGlobalAccess: of.NoGlobalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetInsecureRegistriesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InsecureRegistriesChoice.(type) {
	case nil:
		o.InsecureRegistriesChoice = nil

	case *GetSpecType_InsecureRegistryList:
		o.InsecureRegistriesChoice = &GlobalSpecType_InsecureRegistryList{InsecureRegistryList: of.InsecureRegistryList}

	case *GetSpecType_NoInsecureRegistries:
		o.InsecureRegistriesChoice = &GlobalSpecType_NoInsecureRegistries{NoInsecureRegistries: of.NoInsecureRegistries}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetInsecureRegistriesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InsecureRegistriesChoice.(type) {
	case nil:
		r.InsecureRegistriesChoice = nil

	case *GlobalSpecType_InsecureRegistryList:
		r.InsecureRegistriesChoice = &GetSpecType_InsecureRegistryList{InsecureRegistryList: of.InsecureRegistryList}

	case *GlobalSpecType_NoInsecureRegistries:
		r.InsecureRegistriesChoice = &GetSpecType_NoInsecureRegistries{NoInsecureRegistries: of.NoInsecureRegistries}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLocalAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LocalAccessChoice.(type) {
	case nil:
		o.LocalAccessChoice = nil

	case *GetSpecType_LocalAccessConfig:
		o.LocalAccessChoice = &GlobalSpecType_LocalAccessConfig{LocalAccessConfig: of.LocalAccessConfig}

	case *GetSpecType_NoLocalAccess:
		o.LocalAccessChoice = &GlobalSpecType_NoLocalAccess{NoLocalAccess: of.NoLocalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLocalAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LocalAccessChoice.(type) {
	case nil:
		r.LocalAccessChoice = nil

	case *GlobalSpecType_LocalAccessConfig:
		r.LocalAccessChoice = &GetSpecType_LocalAccessConfig{LocalAccessConfig: of.LocalAccessConfig}

	case *GlobalSpecType_NoLocalAccess:
		r.LocalAccessChoice = &GetSpecType_NoLocalAccess{NoLocalAccess: of.NoLocalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetPodSecurityPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PodSecurityPolicyChoice.(type) {
	case nil:
		o.PodSecurityPolicyChoice = nil

	case *GetSpecType_UseCustomPspList:
		o.PodSecurityPolicyChoice = &GlobalSpecType_UseCustomPspList{UseCustomPspList: of.UseCustomPspList}

	case *GetSpecType_UseDefaultPsp:
		o.PodSecurityPolicyChoice = &GlobalSpecType_UseDefaultPsp{UseDefaultPsp: of.UseDefaultPsp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetPodSecurityPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PodSecurityPolicyChoice.(type) {
	case nil:
		r.PodSecurityPolicyChoice = nil

	case *GlobalSpecType_UseCustomPspList:
		r.PodSecurityPolicyChoice = &GetSpecType_UseCustomPspList{UseCustomPspList: of.UseCustomPspList}

	case *GlobalSpecType_UseDefaultPsp:
		r.PodSecurityPolicyChoice = &GetSpecType_UseDefaultPsp{UseDefaultPsp: of.UseDefaultPsp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetVk8SNamespaceAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Vk8SNamespaceAccessChoice.(type) {
	case nil:
		o.Vk8SNamespaceAccessChoice = nil

	case *GetSpecType_Vk8SNamespaceAccessDeny:
		o.Vk8SNamespaceAccessChoice = &GlobalSpecType_Vk8SNamespaceAccessDeny{Vk8SNamespaceAccessDeny: of.Vk8SNamespaceAccessDeny}

	case *GetSpecType_Vk8SNamespaceAccessPermit:
		o.Vk8SNamespaceAccessChoice = &GlobalSpecType_Vk8SNamespaceAccessPermit{Vk8SNamespaceAccessPermit: of.Vk8SNamespaceAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetVk8SNamespaceAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Vk8SNamespaceAccessChoice.(type) {
	case nil:
		r.Vk8SNamespaceAccessChoice = nil

	case *GlobalSpecType_Vk8SNamespaceAccessDeny:
		r.Vk8SNamespaceAccessChoice = &GetSpecType_Vk8SNamespaceAccessDeny{Vk8SNamespaceAccessDeny: of.Vk8SNamespaceAccessDeny}

	case *GlobalSpecType_Vk8SNamespaceAccessPermit:
		r.Vk8SNamespaceAccessChoice = &GetSpecType_Vk8SNamespaceAccessPermit{Vk8SNamespaceAccessPermit: of.Vk8SNamespaceAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAppsChoiceFromGlobalSpecType(f)
	m.GetClusterRoleBindingsChoiceFromGlobalSpecType(f)
	m.GetClusterRoleChoiceFromGlobalSpecType(f)
	m.GetClusterScopedResourceAccessChoiceFromGlobalSpecType(f)
	m.GetGlobalAccessChoiceFromGlobalSpecType(f)
	m.GetInsecureRegistriesChoiceFromGlobalSpecType(f)
	m.GetLocalAccessChoiceFromGlobalSpecType(f)
	m.GetPodSecurityPolicyChoiceFromGlobalSpecType(f)
	m.GetVk8SNamespaceAccessChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAppsChoiceToGlobalSpecType(f)
	m1.SetClusterRoleBindingsChoiceToGlobalSpecType(f)
	m1.SetClusterRoleChoiceToGlobalSpecType(f)
	m1.SetClusterScopedResourceAccessChoiceToGlobalSpecType(f)
	m1.SetGlobalAccessChoiceToGlobalSpecType(f)
	m1.SetInsecureRegistriesChoiceToGlobalSpecType(f)
	m1.SetLocalAccessChoiceToGlobalSpecType(f)
	m1.SetPodSecurityPolicyChoiceToGlobalSpecType(f)
	m1.SetVk8SNamespaceAccessChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetAppsChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AppsChoice.(type) {
	case nil:
		o.AppsChoice = nil

	case *ReplaceSpecType_ClusterWideAppList:
		o.AppsChoice = &GlobalSpecType_ClusterWideAppList{ClusterWideAppList: of.ClusterWideAppList}

	case *ReplaceSpecType_NoClusterWideApps:
		o.AppsChoice = &GlobalSpecType_NoClusterWideApps{NoClusterWideApps: of.NoClusterWideApps}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetAppsChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AppsChoice.(type) {
	case nil:
		r.AppsChoice = nil

	case *GlobalSpecType_ClusterWideAppList:
		r.AppsChoice = &ReplaceSpecType_ClusterWideAppList{ClusterWideAppList: of.ClusterWideAppList}

	case *GlobalSpecType_NoClusterWideApps:
		r.AppsChoice = &ReplaceSpecType_NoClusterWideApps{NoClusterWideApps: of.NoClusterWideApps}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetClusterRoleBindingsChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRoleBindingsChoice.(type) {
	case nil:
		o.ClusterRoleBindingsChoice = nil

	case *ReplaceSpecType_UseCustomClusterRoleBindings:
		o.ClusterRoleBindingsChoice = &GlobalSpecType_UseCustomClusterRoleBindings{UseCustomClusterRoleBindings: of.UseCustomClusterRoleBindings}

	case *ReplaceSpecType_UseDefaultClusterRoleBindings:
		o.ClusterRoleBindingsChoice = &GlobalSpecType_UseDefaultClusterRoleBindings{UseDefaultClusterRoleBindings: of.UseDefaultClusterRoleBindings}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetClusterRoleBindingsChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRoleBindingsChoice.(type) {
	case nil:
		r.ClusterRoleBindingsChoice = nil

	case *GlobalSpecType_UseCustomClusterRoleBindings:
		r.ClusterRoleBindingsChoice = &ReplaceSpecType_UseCustomClusterRoleBindings{UseCustomClusterRoleBindings: of.UseCustomClusterRoleBindings}

	case *GlobalSpecType_UseDefaultClusterRoleBindings:
		r.ClusterRoleBindingsChoice = &ReplaceSpecType_UseDefaultClusterRoleBindings{UseDefaultClusterRoleBindings: of.UseDefaultClusterRoleBindings}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetClusterRoleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRoleChoice.(type) {
	case nil:
		o.ClusterRoleChoice = nil

	case *ReplaceSpecType_UseCustomClusterRoleList:
		o.ClusterRoleChoice = &GlobalSpecType_UseCustomClusterRoleList{UseCustomClusterRoleList: of.UseCustomClusterRoleList}

	case *ReplaceSpecType_UseDefaultClusterRoles:
		o.ClusterRoleChoice = &GlobalSpecType_UseDefaultClusterRoles{UseDefaultClusterRoles: of.UseDefaultClusterRoles}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetClusterRoleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRoleChoice.(type) {
	case nil:
		r.ClusterRoleChoice = nil

	case *GlobalSpecType_UseCustomClusterRoleList:
		r.ClusterRoleChoice = &ReplaceSpecType_UseCustomClusterRoleList{UseCustomClusterRoleList: of.UseCustomClusterRoleList}

	case *GlobalSpecType_UseDefaultClusterRoles:
		r.ClusterRoleChoice = &ReplaceSpecType_UseDefaultClusterRoles{UseDefaultClusterRoles: of.UseDefaultClusterRoles}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetClusterScopedResourceAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterScopedResourceAccessChoice.(type) {
	case nil:
		o.ClusterScopedResourceAccessChoice = nil

	case *ReplaceSpecType_ClusterScopedAccessDeny:
		o.ClusterScopedResourceAccessChoice = &GlobalSpecType_ClusterScopedAccessDeny{ClusterScopedAccessDeny: of.ClusterScopedAccessDeny}

	case *ReplaceSpecType_ClusterScopedAccessPermit:
		o.ClusterScopedResourceAccessChoice = &GlobalSpecType_ClusterScopedAccessPermit{ClusterScopedAccessPermit: of.ClusterScopedAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetClusterScopedResourceAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterScopedResourceAccessChoice.(type) {
	case nil:
		r.ClusterScopedResourceAccessChoice = nil

	case *GlobalSpecType_ClusterScopedAccessDeny:
		r.ClusterScopedResourceAccessChoice = &ReplaceSpecType_ClusterScopedAccessDeny{ClusterScopedAccessDeny: of.ClusterScopedAccessDeny}

	case *GlobalSpecType_ClusterScopedAccessPermit:
		r.ClusterScopedResourceAccessChoice = &ReplaceSpecType_ClusterScopedAccessPermit{ClusterScopedAccessPermit: of.ClusterScopedAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetGlobalAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.GlobalAccessChoice.(type) {
	case nil:
		o.GlobalAccessChoice = nil

	case *ReplaceSpecType_GlobalAccessEnable:
		o.GlobalAccessChoice = &GlobalSpecType_GlobalAccessEnable{GlobalAccessEnable: of.GlobalAccessEnable}

	case *ReplaceSpecType_NoGlobalAccess:
		o.GlobalAccessChoice = &GlobalSpecType_NoGlobalAccess{NoGlobalAccess: of.NoGlobalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetGlobalAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.GlobalAccessChoice.(type) {
	case nil:
		r.GlobalAccessChoice = nil

	case *GlobalSpecType_GlobalAccessEnable:
		r.GlobalAccessChoice = &ReplaceSpecType_GlobalAccessEnable{GlobalAccessEnable: of.GlobalAccessEnable}

	case *GlobalSpecType_NoGlobalAccess:
		r.GlobalAccessChoice = &ReplaceSpecType_NoGlobalAccess{NoGlobalAccess: of.NoGlobalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetInsecureRegistriesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InsecureRegistriesChoice.(type) {
	case nil:
		o.InsecureRegistriesChoice = nil

	case *ReplaceSpecType_InsecureRegistryList:
		o.InsecureRegistriesChoice = &GlobalSpecType_InsecureRegistryList{InsecureRegistryList: of.InsecureRegistryList}

	case *ReplaceSpecType_NoInsecureRegistries:
		o.InsecureRegistriesChoice = &GlobalSpecType_NoInsecureRegistries{NoInsecureRegistries: of.NoInsecureRegistries}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetInsecureRegistriesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InsecureRegistriesChoice.(type) {
	case nil:
		r.InsecureRegistriesChoice = nil

	case *GlobalSpecType_InsecureRegistryList:
		r.InsecureRegistriesChoice = &ReplaceSpecType_InsecureRegistryList{InsecureRegistryList: of.InsecureRegistryList}

	case *GlobalSpecType_NoInsecureRegistries:
		r.InsecureRegistriesChoice = &ReplaceSpecType_NoInsecureRegistries{NoInsecureRegistries: of.NoInsecureRegistries}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLocalAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LocalAccessChoice.(type) {
	case nil:
		o.LocalAccessChoice = nil

	case *ReplaceSpecType_LocalAccessConfig:
		o.LocalAccessChoice = &GlobalSpecType_LocalAccessConfig{LocalAccessConfig: of.LocalAccessConfig}

	case *ReplaceSpecType_NoLocalAccess:
		o.LocalAccessChoice = &GlobalSpecType_NoLocalAccess{NoLocalAccess: of.NoLocalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLocalAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LocalAccessChoice.(type) {
	case nil:
		r.LocalAccessChoice = nil

	case *GlobalSpecType_LocalAccessConfig:
		r.LocalAccessChoice = &ReplaceSpecType_LocalAccessConfig{LocalAccessConfig: of.LocalAccessConfig}

	case *GlobalSpecType_NoLocalAccess:
		r.LocalAccessChoice = &ReplaceSpecType_NoLocalAccess{NoLocalAccess: of.NoLocalAccess}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetPodSecurityPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PodSecurityPolicyChoice.(type) {
	case nil:
		o.PodSecurityPolicyChoice = nil

	case *ReplaceSpecType_UseCustomPspList:
		o.PodSecurityPolicyChoice = &GlobalSpecType_UseCustomPspList{UseCustomPspList: of.UseCustomPspList}

	case *ReplaceSpecType_UseDefaultPsp:
		o.PodSecurityPolicyChoice = &GlobalSpecType_UseDefaultPsp{UseDefaultPsp: of.UseDefaultPsp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetPodSecurityPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PodSecurityPolicyChoice.(type) {
	case nil:
		r.PodSecurityPolicyChoice = nil

	case *GlobalSpecType_UseCustomPspList:
		r.PodSecurityPolicyChoice = &ReplaceSpecType_UseCustomPspList{UseCustomPspList: of.UseCustomPspList}

	case *GlobalSpecType_UseDefaultPsp:
		r.PodSecurityPolicyChoice = &ReplaceSpecType_UseDefaultPsp{UseDefaultPsp: of.UseDefaultPsp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetVk8SNamespaceAccessChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Vk8SNamespaceAccessChoice.(type) {
	case nil:
		o.Vk8SNamespaceAccessChoice = nil

	case *ReplaceSpecType_Vk8SNamespaceAccessDeny:
		o.Vk8SNamespaceAccessChoice = &GlobalSpecType_Vk8SNamespaceAccessDeny{Vk8SNamespaceAccessDeny: of.Vk8SNamespaceAccessDeny}

	case *ReplaceSpecType_Vk8SNamespaceAccessPermit:
		o.Vk8SNamespaceAccessChoice = &GlobalSpecType_Vk8SNamespaceAccessPermit{Vk8SNamespaceAccessPermit: of.Vk8SNamespaceAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetVk8SNamespaceAccessChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Vk8SNamespaceAccessChoice.(type) {
	case nil:
		r.Vk8SNamespaceAccessChoice = nil

	case *GlobalSpecType_Vk8SNamespaceAccessDeny:
		r.Vk8SNamespaceAccessChoice = &ReplaceSpecType_Vk8SNamespaceAccessDeny{Vk8SNamespaceAccessDeny: of.Vk8SNamespaceAccessDeny}

	case *GlobalSpecType_Vk8SNamespaceAccessPermit:
		r.Vk8SNamespaceAccessChoice = &ReplaceSpecType_Vk8SNamespaceAccessPermit{Vk8SNamespaceAccessPermit: of.Vk8SNamespaceAccessPermit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAppsChoiceFromGlobalSpecType(f)
	m.GetClusterRoleBindingsChoiceFromGlobalSpecType(f)
	m.GetClusterRoleChoiceFromGlobalSpecType(f)
	m.GetClusterScopedResourceAccessChoiceFromGlobalSpecType(f)
	m.GetGlobalAccessChoiceFromGlobalSpecType(f)
	m.GetInsecureRegistriesChoiceFromGlobalSpecType(f)
	m.GetLocalAccessChoiceFromGlobalSpecType(f)
	m.GetPodSecurityPolicyChoiceFromGlobalSpecType(f)
	m.GetVk8SNamespaceAccessChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAppsChoiceToGlobalSpecType(f)
	m1.SetClusterRoleBindingsChoiceToGlobalSpecType(f)
	m1.SetClusterRoleChoiceToGlobalSpecType(f)
	m1.SetClusterScopedResourceAccessChoiceToGlobalSpecType(f)
	m1.SetGlobalAccessChoiceToGlobalSpecType(f)
	m1.SetInsecureRegistriesChoiceToGlobalSpecType(f)
	m1.SetLocalAccessChoiceToGlobalSpecType(f)
	m1.SetPodSecurityPolicyChoiceToGlobalSpecType(f)
	m1.SetVk8SNamespaceAccessChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

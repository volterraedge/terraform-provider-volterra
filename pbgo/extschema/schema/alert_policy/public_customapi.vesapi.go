// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package alert_policy

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCGetAlertPolicyMatch(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &AlertPolicyMatchRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.alert_policy.AlertPolicyMatchRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetAlertPolicyMatch(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["GetAlertPolicyMatch"] = ccl.doRPCGetAlertPolicyMatch

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCGetAlertPolicyMatch(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &AlertPolicyMatchRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.alert_policy.AlertPolicyMatchRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("labels", fmt.Sprintf("%v", req.Labels))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &AlertPolicyMatchResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.alert_policy.AlertPolicyMatchResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["GetAlertPolicyMatch"] = ccl.doRPCGetAlertPolicyMatch

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) GetAlertPolicyMatch(ctx context.Context, in *AlertPolicyMatchRequest, opts ...grpc.CallOption) (*AlertPolicyMatchResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.alert_policy.CustomAPI.GetAlertPolicyMatch")
	return c.CustomAPIServer.GetAlertPolicyMatch(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) GetAlertPolicyMatch(ctx context.Context, in *AlertPolicyMatchRequest) (*AlertPolicyMatchResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.alert_policy.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *AlertPolicyMatchResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.alert_policy.AlertPolicyMatchRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.GetAlertPolicyMatch' operation on 'alert_policy'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.alert_policy.CustomAPI.GetAlertPolicyMatch"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetAlertPolicyMatch(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.alert_policy.AlertPolicyMatchResponse", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Alert Policy",
        "description": "Custom APIs for alert policy object",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/alert_policy/match": {
            "post": {
                "summary": "Get Alert Policy Match",
                "description": "Get Alert Policies that match to a set of alert labels for a namespace.",
                "operationId": "ves.io.schema.alert_policy.CustomAPI.GetAlertPolicyMatch",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/alert_policyAlertPolicyMatchResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-required\nx-example: \"ns1\"\nThe namespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/alert_policyAlertPolicyMatchRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-alert_policy-customapi-getalertpolicymatch"
                },
                "x-ves-proto-rpc": "ves.io.schema.alert_policy.CustomAPI.GetAlertPolicyMatch"
            },
            "x-displayname": "Alert Policy Custom API",
            "x-ves-proto-service": "ves.io.schema.alert_policy.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "alert_policyAlertPolicyMatch": {
            "type": "object",
            "description": "Alert Policy info that matches AlertPolicyMatchRequest giving\n  alert policy name,\n  alert policy activation state",
            "title": "Alert Policy Match",
            "x-displayname": "Alert Policy Match",
            "x-ves-proto-message": "ves.io.schema.alert_policy.AlertPolicyMatch",
            "properties": {
                "policy_name": {
                    "type": "string",
                    "description": "\n\nExample: - samplepolicy-",
                    "title": "policy_name",
                    "x-displayname": "Policy Name"
                },
                "policy_status": {
                    "description": "\n\nExample: - 1, ACTIVE-",
                    "title": "policy_status",
                    "$ref": "#/definitions/alert_policyAlertPolicyStatus",
                    "x-displayname": "Policy Status"
                }
            }
        },
        "alert_policyAlertPolicyMatchRequest": {
            "type": "object",
            "description": "Request message for GetAlertPolicyMatch RPC,\ndescribing alert to match against alert policies",
            "title": "Alert Policy Match Request",
            "x-displayname": "Alert Policy Match Request",
            "x-ves-proto-message": "ves.io.schema.alert_policy.AlertPolicyMatchRequest",
            "properties": {
                "labels": {
                    "type": "object",
                    "description": "                 \"namespace\": \"system\",\n                 \"tenant\" :\"tenant2\",\n                 \"alertname\": \"podXcrash\",\n                 \"group\": \"IaaS\",\n                 \"severity\": \"critical\"\n               },\n Alert labels to find match against alert policies\n requires tenant and namespace to be defined labels map\n\nExample: -   \"labels\"{-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.map.max_pairs: 50\n  ves.io.schema.rules.message.required: true\n",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.max_pairs": "50",
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace in which the configuration object is present\n\nExample: - \"ns1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "alert_policyAlertPolicyMatchResponse": {
            "type": "object",
            "description": "Response of matching Alert Policies from Get Alert Policy Match request",
            "title": "Alert Policy Match Response",
            "x-displayname": "Alert Policy Match Response",
            "x-ves-proto-message": "ves.io.schema.alert_policy.AlertPolicyMatchResponse",
            "properties": {
                "alert_match": {
                    "type": "array",
                    "description": " x-example:{\"alert_match\":[{\"policy_name\":\"policy1\",\"policy_active\":1},{\"policy_name\":\"policy4\"}]}\n List of Alert Policies that match given requested namespace,labels.",
                    "title": "alert_match",
                    "items": {
                        "$ref": "#/definitions/alert_policyAlertPolicyMatch"
                    },
                    "x-displayname": "Alert Match"
                }
            }
        },
        "alert_policyAlertPolicyStatus": {
            "type": "string",
            "description": "Indicates if Alert Policy is in Alert Policy Set, PolicyStatus is ACTIVE or INACTIVE.\n\nINACTIVE means Alert Policy is not in Alert Policy Set, and will\nnot be used to send Alerts to Alert Receivers.\nACTIVE means Alert Policy is in Alert Policy Set, and is used\nto send out Alert to Alert Receivers.",
            "title": "AlertPolicyStatus",
            "enum": [
                "INACTIVE",
                "ACTIVE"
            ],
            "default": "INACTIVE",
            "x-displayname": "AlertPolicyStatus",
            "x-ves-proto-enum": "ves.io.schema.alert_policy.AlertPolicyStatus"
        }
    },
    "x-displayname": "Alert Policy",
    "x-ves-proto-file": "ves.io/schema/alert_policy/public_customapi.proto"
}`

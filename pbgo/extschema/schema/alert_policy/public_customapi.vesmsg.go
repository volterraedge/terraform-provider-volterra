// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package alert_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AlertPolicyMatch) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AlertPolicyMatch) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AlertPolicyMatch) DeepCopy() *AlertPolicyMatch {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AlertPolicyMatch{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AlertPolicyMatch) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AlertPolicyMatch) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AlertPolicyMatchValidator().Validate(ctx, m, opts...)
}

type ValidateAlertPolicyMatch struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAlertPolicyMatch) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AlertPolicyMatch)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AlertPolicyMatch got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["policy_name"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_name"))
		if err := fv(ctx, m.GetPolicyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy_status"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_status"))
		if err := fv(ctx, m.GetPolicyStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAlertPolicyMatchValidator = func() *ValidateAlertPolicyMatch {
	v := &ValidateAlertPolicyMatch{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AlertPolicyMatchValidator() db.Validator {
	return DefaultAlertPolicyMatchValidator
}

// augmented methods on protoc/std generated struct

func (m *AlertPolicyMatchRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AlertPolicyMatchRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AlertPolicyMatchRequest) DeepCopy() *AlertPolicyMatchRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AlertPolicyMatchRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AlertPolicyMatchRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AlertPolicyMatchRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AlertPolicyMatchRequestValidator().Validate(ctx, m, opts...)
}

type ValidateAlertPolicyMatchRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAlertPolicyMatchRequest) NamespaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace")
	}

	return validatorFn, nil
}

func (v *ValidateAlertPolicyMatchRequest) LabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAlertPolicyMatchRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AlertPolicyMatchRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AlertPolicyMatchRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["labels"]; exists {
		vOpts := append(opts, db.WithValidateField("labels"))
		if err := fv(ctx, m.GetLabels(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAlertPolicyMatchRequestValidator = func() *ValidateAlertPolicyMatchRequest {
	v := &ValidateAlertPolicyMatchRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespace := v.NamespaceValidationRuleHandler
	rulesNamespace := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNamespace(rulesNamespace)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AlertPolicyMatchRequest.namespace: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace"] = vFn

	vrhLabels := v.LabelsValidationRuleHandler
	rulesLabels := map[string]string{
		"ves.io.schema.rules.map.max_pairs":    "50",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLabels(rulesLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AlertPolicyMatchRequest.labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["labels"] = vFn

	return v
}()

func AlertPolicyMatchRequestValidator() db.Validator {
	return DefaultAlertPolicyMatchRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *AlertPolicyMatchResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AlertPolicyMatchResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AlertPolicyMatchResponse) DeepCopy() *AlertPolicyMatchResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AlertPolicyMatchResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AlertPolicyMatchResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AlertPolicyMatchResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AlertPolicyMatchResponseValidator().Validate(ctx, m, opts...)
}

type ValidateAlertPolicyMatchResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAlertPolicyMatchResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AlertPolicyMatchResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AlertPolicyMatchResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["alert_match"]; exists {

		vOpts := append(opts, db.WithValidateField("alert_match"))
		for idx, item := range m.GetAlertMatch() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAlertPolicyMatchResponseValidator = func() *ValidateAlertPolicyMatchResponse {
	v := &ValidateAlertPolicyMatchResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AlertPolicyMatchResponseValidator() db.Validator {
	return DefaultAlertPolicyMatchResponseValidator
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/alert_policy/types.proto

package alert_policy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Severity
//
// x-displayName: "Severity"
// List of alert severities
type Severity int32

const (
	// x-displayName: "Minor"
	// Minor
	MINOR Severity = 0
	// x-displayName: "Major"
	// Major
	MAJOR Severity = 1
	// x-displayName: "Critical"
	// Critical
	CRITICAL Severity = 2
)

var Severity_name = map[int32]string{
	0: "MINOR",
	1: "MAJOR",
	2: "CRITICAL",
}

var Severity_value = map[string]int32{
	"MINOR":    0,
	"MAJOR":    1,
	"CRITICAL": 2,
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{0}
}

// Group
//
// x-displayName: "Group"
// List of Groups
type Group int32

const (
	// x-displayName: "Infrastructure"
	// Infrastructure alerts
	INFRASTRUCTURE Group = 0
	// x-displayName: "IaaS-CaaS"
	// Alerts related to Infrastructure as a Service/Communication as a Service
	IAAS_CAAS Group = 1
	// x-displayName: "Virtual-Host"
	// Alerts related to Virtual Host
	VIRTUAL_HOST Group = 2
	// x-displayName: "VoltShare"
	// Alerts related to the VoltShare feature
	VOLT_SHARE Group = 3
	// x-displayName: "UAM"
	// Alerts related to User Access Management
	UAM Group = 4
	// x-displayName: "Security"
	// Alerts related to Application Security
	SECURITY Group = 5
	// x-displayName: "Timeseries-Anomaly"
	// Alerts related to Timeseries Anomaly
	TIMESERIES_ANOMALY Group = 6
)

var Group_name = map[int32]string{
	0: "INFRASTRUCTURE",
	1: "IAAS_CAAS",
	2: "VIRTUAL_HOST",
	3: "VOLT_SHARE",
	4: "UAM",
	5: "SECURITY",
	6: "TIMESERIES_ANOMALY",
}

var Group_value = map[string]int32{
	"INFRASTRUCTURE":     0,
	"IAAS_CAAS":          1,
	"VIRTUAL_HOST":       2,
	"VOLT_SHARE":         3,
	"UAM":                4,
	"SECURITY":           5,
	"TIMESERIES_ANOMALY": 6,
}

func (Group) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{1}
}

// AlertName
//
// x-displayName: "AlertName"
// List of Alert Names
type AlertName int32

const (
	// x-displayName: "SiteCustomerTunnelInterfaceDown"
	// Customer tunnel interface down
	SITE_CUSTOMER_TUNNEL_INTERFACE_DOWN AlertName = 0
	// x-displayName: "SitePhysicalInterfaceDown"
	// Physical Interface down
	SITE_PHYSICAL_INTERFACE_DOWN AlertName = 1
	// x-displayName: "TunnelsToCustomerSiteDown"
	// Tunnel Interfaces to Customer Site Down
	TUNNELS_TO_CUSTOMER_SITE_DOWN AlertName = 2
	// x-displayName: "ServiceServerError"
	// Virutal Host server error
	SERVICE_SERVER_ERROR AlertName = 3
	// x-displayName: "ServiceClientError"
	// Virtual Host client error
	SERVICE_CLIENT_ERROR AlertName = 4
	// x-displayName: "ServiceHealthLow"
	// Service Health Low
	SERVICE_HEALTH_LOW AlertName = 5
	// x-displayName: "ServiceUnavailable"
	// Service Unavailable
	SERVICE_UNAVAILABLE AlertName = 6
	// x-displayName: "ServiceServerErrorPerSourceSite"
	// Virtual Host server error
	SERVICE_SERVER_ERROR_PER_SOURCE_SITE AlertName = 7
	// x-displayName: "ServiceClientErrorPerSourceSite"
	// Virtual Host client error
	SERVICE_CLIENT_ERROR_PER_SOURCE_SITE AlertName = 8
	// x-displayName: "ServiceEndpointHealthcheckFailure"
	//  Endpoint Healthcheck failure
	SERVICE_ENDPOINT_HEALTHCHECK_FAILURE AlertName = 9
)

var AlertName_name = map[int32]string{
	0: "SITE_CUSTOMER_TUNNEL_INTERFACE_DOWN",
	1: "SITE_PHYSICAL_INTERFACE_DOWN",
	2: "TUNNELS_TO_CUSTOMER_SITE_DOWN",
	3: "SERVICE_SERVER_ERROR",
	4: "SERVICE_CLIENT_ERROR",
	5: "SERVICE_HEALTH_LOW",
	6: "SERVICE_UNAVAILABLE",
	7: "SERVICE_SERVER_ERROR_PER_SOURCE_SITE",
	8: "SERVICE_CLIENT_ERROR_PER_SOURCE_SITE",
	9: "SERVICE_ENDPOINT_HEALTHCHECK_FAILURE",
}

var AlertName_value = map[string]int32{
	"SITE_CUSTOMER_TUNNEL_INTERFACE_DOWN":  0,
	"SITE_PHYSICAL_INTERFACE_DOWN":         1,
	"TUNNELS_TO_CUSTOMER_SITE_DOWN":        2,
	"SERVICE_SERVER_ERROR":                 3,
	"SERVICE_CLIENT_ERROR":                 4,
	"SERVICE_HEALTH_LOW":                   5,
	"SERVICE_UNAVAILABLE":                  6,
	"SERVICE_SERVER_ERROR_PER_SOURCE_SITE": 7,
	"SERVICE_CLIENT_ERROR_PER_SOURCE_SITE": 8,
	"SERVICE_ENDPOINT_HEALTHCHECK_FAILURE": 9,
}

func (AlertName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{2}
}

// Label Matcher
//
// x-displayName: "Label Matcher"
type LabelMatcher struct {
	// Matcher Type
	//
	// x-displayName: "Select Matcher Type"
	// x-required
	// Either exact or regex match for the label
	//
	// Types that are valid to be assigned to MatcherType:
	//	*LabelMatcher_ExactMatch
	//	*LabelMatcher_RegexMatch
	MatcherType isLabelMatcher_MatcherType `protobuf_oneof:"matcher_type"`
}

func (m *LabelMatcher) Reset()      { *m = LabelMatcher{} }
func (*LabelMatcher) ProtoMessage() {}
func (*LabelMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{0}
}
func (m *LabelMatcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LabelMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelMatcher.Merge(m, src)
}
func (m *LabelMatcher) XXX_Size() int {
	return m.Size()
}
func (m *LabelMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_LabelMatcher proto.InternalMessageInfo

type isLabelMatcher_MatcherType interface {
	isLabelMatcher_MatcherType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LabelMatcher_ExactMatch struct {
	ExactMatch string `protobuf:"bytes,1,opt,name=exact_match,json=exactMatch,proto3,oneof" json:"exact_match,omitempty"`
}
type LabelMatcher_RegexMatch struct {
	RegexMatch string `protobuf:"bytes,2,opt,name=regex_match,json=regexMatch,proto3,oneof" json:"regex_match,omitempty"`
}

func (*LabelMatcher_ExactMatch) isLabelMatcher_MatcherType() {}
func (*LabelMatcher_RegexMatch) isLabelMatcher_MatcherType() {}

func (m *LabelMatcher) GetMatcherType() isLabelMatcher_MatcherType {
	if m != nil {
		return m.MatcherType
	}
	return nil
}

func (m *LabelMatcher) GetExactMatch() string {
	if x, ok := m.GetMatcherType().(*LabelMatcher_ExactMatch); ok {
		return x.ExactMatch
	}
	return ""
}

func (m *LabelMatcher) GetRegexMatch() string {
	if x, ok := m.GetMatcherType().(*LabelMatcher_RegexMatch); ok {
		return x.RegexMatch
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LabelMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LabelMatcher_ExactMatch)(nil),
		(*LabelMatcher_RegexMatch)(nil),
	}
}

// Custom Matcher
//
// x-displayName: "Custom Matcher"
// A set of matchers an alert has to fulfill to match the route
type CustomMatcher struct {
	// Severity
	//
	// x-displayName: "Severity"
	// Severity Matcher
	Severity *LabelMatcher `protobuf:"bytes,1,opt,name=severity,proto3" json:"severity,omitempty"`
	// Group
	//
	// x-displayName: "Group"
	// Group Matcher
	Group *LabelMatcher `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	// Alertname
	//
	// x-displayName: "Alertname"
	// Alertname Matcher
	Alertname *LabelMatcher `protobuf:"bytes,3,opt,name=alertname,proto3" json:"alertname,omitempty"`
}

func (m *CustomMatcher) Reset()      { *m = CustomMatcher{} }
func (*CustomMatcher) ProtoMessage() {}
func (*CustomMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{1}
}
func (m *CustomMatcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomMatcher.Merge(m, src)
}
func (m *CustomMatcher) XXX_Size() int {
	return m.Size()
}
func (m *CustomMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_CustomMatcher proto.InternalMessageInfo

func (m *CustomMatcher) GetSeverity() *LabelMatcher {
	if m != nil {
		return m.Severity
	}
	return nil
}

func (m *CustomMatcher) GetGroup() *LabelMatcher {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *CustomMatcher) GetAlertname() *LabelMatcher {
	if m != nil {
		return m.Alertname
	}
	return nil
}

// Severity Matcher
//
// x-displayName: "Severity Matcher"
// Select one or more severity levels to match the incoming alert
type SeverityMatcher struct {
	// Severities
	//
	// x-displayName: "Severities"
	// List of severity levels
	Severities []Severity `protobuf:"varint,1,rep,packed,name=severities,proto3,enum=ves.io.schema.alert_policy.Severity" json:"severities,omitempty"`
}

func (m *SeverityMatcher) Reset()      { *m = SeverityMatcher{} }
func (*SeverityMatcher) ProtoMessage() {}
func (*SeverityMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{2}
}
func (m *SeverityMatcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeverityMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SeverityMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeverityMatcher.Merge(m, src)
}
func (m *SeverityMatcher) XXX_Size() int {
	return m.Size()
}
func (m *SeverityMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_SeverityMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_SeverityMatcher proto.InternalMessageInfo

func (m *SeverityMatcher) GetSeverities() []Severity {
	if m != nil {
		return m.Severities
	}
	return nil
}

// Group Matcher
//
// x-displayName: "Group Matcher"
// Select one or more known group names to match the incoming alert
type GroupMatcher struct {
	// groups
	//
	// x-displayName: "Groups"
	// Name of groups to match the alert
	Groups []Group `protobuf:"varint,1,rep,packed,name=groups,proto3,enum=ves.io.schema.alert_policy.Group" json:"groups,omitempty"`
}

func (m *GroupMatcher) Reset()      { *m = GroupMatcher{} }
func (*GroupMatcher) ProtoMessage() {}
func (*GroupMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{3}
}
func (m *GroupMatcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GroupMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMatcher.Merge(m, src)
}
func (m *GroupMatcher) XXX_Size() int {
	return m.Size()
}
func (m *GroupMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMatcher proto.InternalMessageInfo

func (m *GroupMatcher) GetGroups() []Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Custom Group By
//
// x-displayName: "Custom Group By"
// Specify list of custom labels to group/aggregate the alerts
type CustomGroupBy struct {
	// labels
	//
	// x-displayName: "Labels"
	// Name of labels to group/aggregate the alerts
	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (m *CustomGroupBy) Reset()      { *m = CustomGroupBy{} }
func (*CustomGroupBy) ProtoMessage() {}
func (*CustomGroupBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{4}
}
func (m *CustomGroupBy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomGroupBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomGroupBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomGroupBy.Merge(m, src)
}
func (m *CustomGroupBy) XXX_Size() int {
	return m.Size()
}
func (m *CustomGroupBy) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomGroupBy.DiscardUnknown(m)
}

var xxx_messageInfo_CustomGroupBy proto.InternalMessageInfo

func (m *CustomGroupBy) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Notification Parameters
//
// x-displayName: "Notification Parameters"
// Set of notification parameters to decide how and when the alert notifications should be sent to the receivers
type NotificationParameters struct {
	// Group By
	//
	// x-displayName: "Group Notifications By"
	// x-required
	// Set of labels to group the alerts
	//
	// Types that are valid to be assigned to GroupBy:
	//	*NotificationParameters_Default
	//	*NotificationParameters_Individual
	//	*NotificationParameters_VesIoGroup
	//	*NotificationParameters_Custom
	GroupBy isNotificationParameters_GroupBy `protobuf_oneof:"group_by"`
	// Group Wait
	//
	// x-displayName: "Wait to Notify"
	// x-example: "30s"
	// Time value used to specify how long to initially wait for an inhibiting alert to arrive or
	// collect more alerts for the same group.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	// If not specified, group_wait defaults to "30s"
	GroupWait string `protobuf:"bytes,11,opt,name=group_wait,json=groupWait,proto3" json:"group_wait,omitempty"`
	// Group Interval
	//
	// x-displayName: "Notify Interval for a Group"
	// x-example: "1m"
	// Group Interval is used to specify how long to wait before sending a notification about new alerts
	// that are added to the group for which an initial notification has already been sent.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	// If not specified, group_interval defaults to "1m"
	GroupInterval string `protobuf:"bytes,12,opt,name=group_interval,json=groupInterval,proto3" json:"group_interval,omitempty"`
	// Repeat Interval
	//
	// x-displayName: "Notify Interval For a Alert"
	// x-example: "4h"
	// Repeat Interval is used to specify how long to wait before sending a notification again if it
	// has already been sent successfully.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	// If not specified, group_interval defaults to "4h"
	RepeatInterval string `protobuf:"bytes,13,opt,name=repeat_interval,json=repeatInterval,proto3" json:"repeat_interval,omitempty"`
}

func (m *NotificationParameters) Reset()      { *m = NotificationParameters{} }
func (*NotificationParameters) ProtoMessage() {}
func (*NotificationParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{5}
}
func (m *NotificationParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotificationParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NotificationParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationParameters.Merge(m, src)
}
func (m *NotificationParameters) XXX_Size() int {
	return m.Size()
}
func (m *NotificationParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationParameters.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationParameters proto.InternalMessageInfo

type isNotificationParameters_GroupBy interface {
	isNotificationParameters_GroupBy()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type NotificationParameters_Default struct {
	Default *schema.Empty `protobuf:"bytes,1,opt,name=default,proto3,oneof" json:"default,omitempty"`
}
type NotificationParameters_Individual struct {
	Individual *schema.Empty `protobuf:"bytes,2,opt,name=individual,proto3,oneof" json:"individual,omitempty"`
}
type NotificationParameters_VesIoGroup struct {
	VesIoGroup *schema.Empty `protobuf:"bytes,3,opt,name=ves_io_group,json=vesIoGroup,proto3,oneof" json:"ves_io_group,omitempty"`
}
type NotificationParameters_Custom struct {
	Custom *CustomGroupBy `protobuf:"bytes,10,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (*NotificationParameters_Default) isNotificationParameters_GroupBy()    {}
func (*NotificationParameters_Individual) isNotificationParameters_GroupBy() {}
func (*NotificationParameters_VesIoGroup) isNotificationParameters_GroupBy() {}
func (*NotificationParameters_Custom) isNotificationParameters_GroupBy()     {}

func (m *NotificationParameters) GetGroupBy() isNotificationParameters_GroupBy {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

// Deprecated: Do not use.
func (m *NotificationParameters) GetDefault() *schema.Empty {
	if x, ok := m.GetGroupBy().(*NotificationParameters_Default); ok {
		return x.Default
	}
	return nil
}

func (m *NotificationParameters) GetIndividual() *schema.Empty {
	if x, ok := m.GetGroupBy().(*NotificationParameters_Individual); ok {
		return x.Individual
	}
	return nil
}

func (m *NotificationParameters) GetVesIoGroup() *schema.Empty {
	if x, ok := m.GetGroupBy().(*NotificationParameters_VesIoGroup); ok {
		return x.VesIoGroup
	}
	return nil
}

func (m *NotificationParameters) GetCustom() *CustomGroupBy {
	if x, ok := m.GetGroupBy().(*NotificationParameters_Custom); ok {
		return x.Custom
	}
	return nil
}

func (m *NotificationParameters) GetGroupWait() string {
	if m != nil {
		return m.GroupWait
	}
	return ""
}

func (m *NotificationParameters) GetGroupInterval() string {
	if m != nil {
		return m.GroupInterval
	}
	return ""
}

func (m *NotificationParameters) GetRepeatInterval() string {
	if m != nil {
		return m.RepeatInterval
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NotificationParameters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NotificationParameters_Default)(nil),
		(*NotificationParameters_Individual)(nil),
		(*NotificationParameters_VesIoGroup)(nil),
		(*NotificationParameters_Custom)(nil),
	}
}

// Route
//
// x-displayName: "Route"
// Route defines the match conditions to match the incoming alert and the receiver to send the alert.
type Route struct {
	// Matcher
	//
	// x-displayName: "Select Alerts"
	// Match condition for the alert
	//
	// Types that are valid to be assigned to Matcher:
	//	*Route_Any
	//	*Route_Severity
	//	*Route_Group
	//	*Route_Alertname
	//	*Route_AlertnameRegex
	//	*Route_Custom
	Matcher isRoute_Matcher `protobuf_oneof:"matcher"`
	// Action
	//
	// x-displayName: "Action"
	// x-required
	// Action associated with the match condition
	//
	// Types that are valid to be assigned to Action:
	//	*Route_Send
	//	*Route_DontSend
	Action isRoute_Action `protobuf_oneof:"action"`
	// Notification Parameters
	//
	// x-displayName: "Policy Rule Notification Parameters"
	// Notification parameters to decide how and when the alerts should be sent to the receivers.
	// If the notification_config is not specified for the route, then the route inherits the config from the
	// notification_config defined in the policy.
	NotificationParameters *NotificationParameters `protobuf:"bytes,13,opt,name=notification_parameters,json=notificationParameters,proto3" json:"notification_parameters,omitempty"`
}

func (m *Route) Reset()      { *m = Route{} }
func (*Route) ProtoMessage() {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{6}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

type isRoute_Matcher interface {
	isRoute_Matcher()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRoute_Action interface {
	isRoute_Action()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Route_Any struct {
	Any *schema.Empty `protobuf:"bytes,1,opt,name=any,proto3,oneof" json:"any,omitempty"`
}
type Route_Severity struct {
	Severity *SeverityMatcher `protobuf:"bytes,2,opt,name=severity,proto3,oneof" json:"severity,omitempty"`
}
type Route_Group struct {
	Group *GroupMatcher `protobuf:"bytes,3,opt,name=group,proto3,oneof" json:"group,omitempty"`
}
type Route_Alertname struct {
	Alertname AlertName `protobuf:"varint,4,opt,name=alertname,proto3,enum=ves.io.schema.alert_policy.AlertName,oneof" json:"alertname,omitempty"`
}
type Route_AlertnameRegex struct {
	AlertnameRegex string `protobuf:"bytes,5,opt,name=alertname_regex,json=alertnameRegex,proto3,oneof" json:"alertname_regex,omitempty"`
}
type Route_Custom struct {
	Custom *CustomMatcher `protobuf:"bytes,10,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}
type Route_Send struct {
	Send *schema.Empty `protobuf:"bytes,11,opt,name=send,proto3,oneof" json:"send,omitempty"`
}
type Route_DontSend struct {
	DontSend *schema.Empty `protobuf:"bytes,12,opt,name=dont_send,json=dontSend,proto3,oneof" json:"dont_send,omitempty"`
}

func (*Route_Any) isRoute_Matcher()            {}
func (*Route_Severity) isRoute_Matcher()       {}
func (*Route_Group) isRoute_Matcher()          {}
func (*Route_Alertname) isRoute_Matcher()      {}
func (*Route_AlertnameRegex) isRoute_Matcher() {}
func (*Route_Custom) isRoute_Matcher()         {}
func (*Route_Send) isRoute_Action()            {}
func (*Route_DontSend) isRoute_Action()        {}

func (m *Route) GetMatcher() isRoute_Matcher {
	if m != nil {
		return m.Matcher
	}
	return nil
}
func (m *Route) GetAction() isRoute_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Route) GetAny() *schema.Empty {
	if x, ok := m.GetMatcher().(*Route_Any); ok {
		return x.Any
	}
	return nil
}

func (m *Route) GetSeverity() *SeverityMatcher {
	if x, ok := m.GetMatcher().(*Route_Severity); ok {
		return x.Severity
	}
	return nil
}

func (m *Route) GetGroup() *GroupMatcher {
	if x, ok := m.GetMatcher().(*Route_Group); ok {
		return x.Group
	}
	return nil
}

func (m *Route) GetAlertname() AlertName {
	if x, ok := m.GetMatcher().(*Route_Alertname); ok {
		return x.Alertname
	}
	return SITE_CUSTOMER_TUNNEL_INTERFACE_DOWN
}

func (m *Route) GetAlertnameRegex() string {
	if x, ok := m.GetMatcher().(*Route_AlertnameRegex); ok {
		return x.AlertnameRegex
	}
	return ""
}

func (m *Route) GetCustom() *CustomMatcher {
	if x, ok := m.GetMatcher().(*Route_Custom); ok {
		return x.Custom
	}
	return nil
}

func (m *Route) GetSend() *schema.Empty {
	if x, ok := m.GetAction().(*Route_Send); ok {
		return x.Send
	}
	return nil
}

func (m *Route) GetDontSend() *schema.Empty {
	if x, ok := m.GetAction().(*Route_DontSend); ok {
		return x.DontSend
	}
	return nil
}

func (m *Route) GetNotificationParameters() *NotificationParameters {
	if m != nil {
		return m.NotificationParameters
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Route) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Route_Any)(nil),
		(*Route_Severity)(nil),
		(*Route_Group)(nil),
		(*Route_Alertname)(nil),
		(*Route_AlertnameRegex)(nil),
		(*Route_Custom)(nil),
		(*Route_Send)(nil),
		(*Route_DontSend)(nil),
	}
}

// Specification for Alert Policy
//
// x-displayName: "Specification"
// Shape of the Alert Policy object
type GlobalSpecType struct {
	// Receivers
	//
	// x-displayName: "Alert Receivers"
	// x-required
	// list of Alert Receivers where the alerts will be sent
	Receivers []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=receivers,proto3" json:"receivers,omitempty"`
	// Routes
	//
	// x-displayName: "Policy Rules"
	// x-required
	// Set of routes to match the incoming alert.
	// The routes are evaluated in the specified order and terminates on the first match.
	Routes []*Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	// Notification Parameters
	//
	// x-displayName: "Receiver Default Notification Parameters"
	// Notification parameters to decide how and when the alerts should be sent to the receivers.
	NotificationParameters *NotificationParameters `protobuf:"bytes,3,opt,name=notification_parameters,json=notificationParameters,proto3" json:"notification_parameters,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{7}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetReceivers() []*schema.ObjectRefType {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *GlobalSpecType) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GlobalSpecType) GetNotificationParameters() *NotificationParameters {
	if m != nil {
		return m.NotificationParameters
	}
	return nil
}

// Create Alert Policy
//
// x-displayName: "Create Alert Policy"
// Creates a new Alert Policy Object
type CreateSpecType struct {
	Receivers              []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=receivers,proto3" json:"receivers,omitempty"`
	Routes                 []*Route                `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	NotificationParameters *NotificationParameters `protobuf:"bytes,3,opt,name=notification_parameters,json=notificationParameters,proto3" json:"notification_parameters,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{8}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetReceivers() []*schema.ObjectRefType {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *CreateSpecType) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CreateSpecType) GetNotificationParameters() *NotificationParameters {
	if m != nil {
		return m.NotificationParameters
	}
	return nil
}

// Replace Alert Policy
//
// x-displayName: "Replace Alert Policy"
// Replaces the content of the Alert Policy Object
type ReplaceSpecType struct {
	Receivers              []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=receivers,proto3" json:"receivers,omitempty"`
	Routes                 []*Route                `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	NotificationParameters *NotificationParameters `protobuf:"bytes,3,opt,name=notification_parameters,json=notificationParameters,proto3" json:"notification_parameters,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{9}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetReceivers() []*schema.ObjectRefType {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *ReplaceSpecType) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ReplaceSpecType) GetNotificationParameters() *NotificationParameters {
	if m != nil {
		return m.NotificationParameters
	}
	return nil
}

// Get Alert Policy
//
// x-displayName: "Get Alert Policy"
// Get the Alert Policy Object
type GetSpecType struct {
	Receivers              []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=receivers,proto3" json:"receivers,omitempty"`
	Routes                 []*Route                `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	NotificationParameters *NotificationParameters `protobuf:"bytes,3,opt,name=notification_parameters,json=notificationParameters,proto3" json:"notification_parameters,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b48c1f89a6403901, []int{10}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetReceivers() []*schema.ObjectRefType {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *GetSpecType) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GetSpecType) GetNotificationParameters() *NotificationParameters {
	if m != nil {
		return m.NotificationParameters
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.alert_policy.Severity", Severity_name, Severity_value)
	proto.RegisterEnum("ves.io.schema.alert_policy.Group", Group_name, Group_value)
	proto.RegisterEnum("ves.io.schema.alert_policy.AlertName", AlertName_name, AlertName_value)
	proto.RegisterType((*LabelMatcher)(nil), "ves.io.schema.alert_policy.LabelMatcher")
	proto.RegisterType((*CustomMatcher)(nil), "ves.io.schema.alert_policy.CustomMatcher")
	proto.RegisterType((*SeverityMatcher)(nil), "ves.io.schema.alert_policy.SeverityMatcher")
	proto.RegisterType((*GroupMatcher)(nil), "ves.io.schema.alert_policy.GroupMatcher")
	proto.RegisterType((*CustomGroupBy)(nil), "ves.io.schema.alert_policy.CustomGroupBy")
	proto.RegisterType((*NotificationParameters)(nil), "ves.io.schema.alert_policy.NotificationParameters")
	proto.RegisterType((*Route)(nil), "ves.io.schema.alert_policy.Route")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.alert_policy.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.alert_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.alert_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.alert_policy.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/alert_policy/types.proto", fileDescriptor_b48c1f89a6403901)
}

var fileDescriptor_b48c1f89a6403901 = []byte{
	// 1562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x6f, 0xdb, 0xc8,
	0x15, 0xe6, 0x90, 0x92, 0x2c, 0x3d, 0x2b, 0x32, 0x33, 0xdd, 0x3a, 0xaa, 0x93, 0x55, 0x15, 0x65,
	0xdb, 0xf5, 0xba, 0x8a, 0x14, 0x49, 0x49, 0xb1, 0x1b, 0x14, 0x46, 0x29, 0x85, 0x8e, 0x98, 0xca,
	0x92, 0x3b, 0xa4, 0x12, 0xa4, 0x40, 0x41, 0xd0, 0xd2, 0x58, 0x61, 0x57, 0x12, 0x05, 0x8a, 0xd2,
	0xc6, 0x28, 0x0a, 0xb4, 0xd7, 0x9e, 0x8a, 0xfe, 0x07, 0x05, 0x5a, 0xa0, 0xe8, 0xb9, 0xa7, 0xea,
	0x62, 0xec, 0x69, 0xd1, 0x93, 0x8f, 0xc1, 0xa2, 0x87, 0x46, 0x41, 0xd1, 0xee, 0x9e, 0x82, 0xfc,
	0x05, 0x05, 0x87, 0xa4, 0x44, 0x7b, 0x1d, 0x61, 0x73, 0xc8, 0x2d, 0x27, 0x73, 0xe6, 0x7d, 0xdf,
	0x37, 0xef, 0xd7, 0xbc, 0xb1, 0xe0, 0x87, 0x53, 0x3a, 0x2e, 0x98, 0x56, 0x71, 0xdc, 0x79, 0x42,
	0x07, 0x46, 0xd1, 0xe8, 0x53, 0xdb, 0xd1, 0x47, 0x56, 0xdf, 0xec, 0x1c, 0x17, 0x9d, 0xe3, 0x11,
	0x1d, 0x17, 0x46, 0xb6, 0xe5, 0x58, 0x78, 0xcb, 0xc3, 0x15, 0x3c, 0x5c, 0x21, 0x8c, 0xdb, 0xba,
	0xd9, 0x33, 0x9d, 0x27, 0x93, 0xc3, 0x42, 0xc7, 0x1a, 0x14, 0x7b, 0x56, 0xcf, 0x2a, 0x32, 0xca,
	0xe1, 0xe4, 0x88, 0xad, 0xd8, 0x82, 0x7d, 0x79, 0x52, 0x5b, 0x57, 0xcf, 0x1e, 0x69, 0x8d, 0x1c,
	0xd3, 0x1a, 0xfa, 0xe7, 0x6c, 0x7d, 0xef, 0xac, 0x31, 0xe4, 0xc2, 0xd6, 0xb5, 0xb3, 0xa6, 0xa9,
	0xd1, 0x37, 0xbb, 0x86, 0x43, 0x7d, 0x6b, 0xf6, 0x9c, 0xd5, 0xa4, 0x9f, 0xe9, 0x67, 0xa4, 0x73,
	0xbf, 0x43, 0x90, 0x6c, 0x18, 0x87, 0xb4, 0xbf, 0x6f, 0x38, 0x9d, 0x27, 0xd4, 0xc6, 0xd7, 0x61,
	0x9d, 0x3e, 0x35, 0x3a, 0x8e, 0x3e, 0x70, 0x37, 0xd2, 0x28, 0x8b, 0xb6, 0x13, 0x75, 0x8e, 0x00,
	0xdb, 0x64, 0x20, 0x17, 0x62, 0xd3, 0x1e, 0x7d, 0xea, 0x43, 0xf8, 0x00, 0xc2, 0x36, 0x19, 0xe4,
	0x6e, 0xe4, 0xd5, 0x2e, 0xaa, 0x54, 0xbf, 0x0f, 0xc9, 0x81, 0x27, 0xab, 0xbb, 0x3e, 0xe3, 0x8d,
	0x93, 0x19, 0x42, 0xa7, 0x33, 0x24, 0xcc, 0x67, 0x48, 0x28, 0xe5, 0xcb, 0x0f, 0x22, 0x71, 0x41,
	0x8c, 0xe4, 0xfe, 0x8b, 0xe0, 0x52, 0x6d, 0x32, 0x76, 0xac, 0x41, 0xe0, 0xc4, 0x3d, 0x88, 0x8f,
	0xe9, 0x94, 0xda, 0xa6, 0x73, 0xcc, 0x3c, 0x58, 0x2f, 0x6f, 0x17, 0x5e, 0x9f, 0xeb, 0x42, 0x38,
	0x00, 0xb2, 0x60, 0xe2, 0x5d, 0x88, 0xf6, 0x6c, 0x6b, 0x32, 0x62, 0x1e, 0xbe, 0x89, 0x84, 0x47,
	0xc3, 0x7b, 0x90, 0x60, 0x98, 0xa1, 0x31, 0xa0, 0x69, 0xe1, 0x0d, 0x35, 0x96, 0xd4, 0xbb, 0xf1,
	0x57, 0xbb, 0xd1, 0x52, 0xbe, 0x9c, 0xaf, 0xe4, 0x7e, 0x09, 0x1b, 0xaa, 0xef, 0xdd, 0x32, 0x54,
	0xf0, 0x1d, 0x36, 0xe9, 0x38, 0x8d, 0xb2, 0xc2, 0x76, 0xaa, 0xfc, 0xc1, 0xaa, 0x53, 0x02, 0x01,
	0x12, 0xe2, 0xb1, 0x7c, 0x97, 0x72, 0x2d, 0x48, 0xde, 0x77, 0x3d, 0x0f, 0xb4, 0x3f, 0x81, 0x18,
	0x8b, 0x24, 0xd0, 0xbd, 0xbe, 0x4a, 0x97, 0x31, 0x89, 0x4f, 0xf0, 0x05, 0x3f, 0x0c, 0x0a, 0xc3,
	0x8c, 0xd5, 0x63, 0xbc, 0x09, 0xb1, 0xbe, 0x1b, 0xa5, 0xa7, 0x98, 0x20, 0xfe, 0x2a, 0xf7, 0x55,
	0x04, 0x36, 0x9b, 0x96, 0x63, 0x1e, 0x99, 0x1d, 0xc3, 0x6d, 0xaf, 0x03, 0xc3, 0x36, 0x06, 0xd4,
	0xa1, 0xf6, 0x18, 0xdf, 0x86, 0xb5, 0x2e, 0x3d, 0x32, 0x26, 0x7d, 0xc7, 0x2f, 0xe5, 0x7b, 0xe7,
	0xbc, 0x90, 0x07, 0x23, 0xe7, 0xb8, 0xca, 0xa7, 0x51, 0x9d, 0x23, 0x01, 0x14, 0xff, 0x18, 0xc0,
	0x1c, 0x76, 0xcd, 0xa9, 0xd9, 0x9d, 0x18, 0x7d, 0xbf, 0x80, 0x17, 0x12, 0xdd, 0xc6, 0x5b, 0x22,
	0xf1, 0xc7, 0x90, 0x9c, 0xd2, 0xb1, 0x6e, 0x5a, 0xba, 0x57, 0x7a, 0x61, 0x35, 0x73, 0x4a, 0xc7,
	0x8a, 0xc5, 0x82, 0xc3, 0x35, 0x88, 0x75, 0x58, 0xac, 0x69, 0x60, 0x9c, 0x8f, 0x56, 0x25, 0xeb,
	0x4c, 0x56, 0xea, 0x1c, 0xf1, 0xa9, 0xb8, 0x0e, 0xc0, 0xce, 0xd5, 0x3f, 0x33, 0x4c, 0x27, 0xbd,
	0xee, 0xde, 0x8c, 0xea, 0x47, 0x5f, 0xce, 0x90, 0x50, 0xb9, 0x35, 0xfe, 0xc7, 0x57, 0x27, 0xc2,
	0x9a, 0x1d, 0xfd, 0x5a, 0xe0, 0xef, 0x0c, 0xfc, 0xef, 0xb9, 0xc0, 0x7b, 0xfb, 0x51, 0x5b, 0x78,
	0xc9, 0x23, 0x92, 0x60, 0xe4, 0x47, 0x86, 0xe9, 0xe0, 0x9f, 0x43, 0xca, 0x53, 0x32, 0x87, 0x0e,
	0xb5, 0xa7, 0x46, 0x3f, 0x9d, 0x64, 0x6a, 0x3b, 0x5f, 0xce, 0x10, 0x5f, 0x62, 0x02, 0x71, 0x3b,
	0xf6, 0xb5, 0x20, 0x94, 0x6e, 0x05, 0x8b, 0xb9, 0x10, 0x1c, 0xe3, 0xcb, 0x5d, 0x62, 0x0a, 0x8a,
	0x2f, 0x80, 0x55, 0xd8, 0xb0, 0xe9, 0x88, 0x1a, 0xce, 0x52, 0xf3, 0xd2, 0x52, 0xf3, 0xf6, 0x93,
	0xb0, 0x66, 0x37, 0xac, 0x39, 0x08, 0x69, 0xa6, 0x3c, 0x89, 0x40, 0xf4, 0xee, 0xde, 0xe7, 0x33,
	0x54, 0x85, 0xf7, 0xe1, 0x4a, 0xb8, 0xfc, 0xd9, 0x50, 0xfd, 0xf9, 0x52, 0x05, 0xae, 0xc3, 0x77,
	0xcf, 0x98, 0x59, 0xe2, 0xcc, 0x61, 0x0f, 0xc7, 0x4b, 0xb7, 0xf3, 0xa5, 0x52, 0xbe, 0x54, 0xae,
	0xe6, 0x20, 0xee, 0xc5, 0x7b, 0x78, 0x8c, 0x37, 0x4f, 0x66, 0x88, 0xff, 0xc2, 0x9b, 0x15, 0xa9,
	0xf9, 0x0c, 0xc5, 0xca, 0xf9, 0x4a, 0xbe, 0x74, 0xeb, 0x41, 0x24, 0x9e, 0x12, 0x37, 0x72, 0x7f,
	0x8f, 0x42, 0x94, 0x58, 0x13, 0x87, 0xe2, 0x6d, 0x10, 0x8c, 0xe1, 0xf1, 0xaa, 0xb6, 0xaa, 0x73,
	0xc4, 0x85, 0x60, 0x25, 0x34, 0x50, 0xbc, 0x66, 0xfa, 0xd1, 0xb7, 0xb9, 0x63, 0xfe, 0x45, 0xaa,
	0x73, 0xa1, 0xa9, 0xf2, 0xd3, 0x60, 0xaa, 0x7c, 0x8b, 0x89, 0x10, 0xbe, 0x8d, 0x75, 0x2e, 0x98,
	0x2b, 0x72, 0x78, 0xae, 0x44, 0xb2, 0x68, 0x3b, 0x55, 0xfe, 0xc1, 0x2a, 0x15, 0xc9, 0x5d, 0x34,
	0x8d, 0x01, 0xad, 0x73, 0xa1, 0xb1, 0x82, 0x8b, 0xb0, 0xb1, 0x58, 0xe8, 0x6c, 0xf6, 0xa6, 0xa3,
	0xac, 0x9c, 0x11, 0x77, 0xcc, 0xd6, 0x39, 0x92, 0x5a, 0x98, 0x89, 0x6b, 0xc5, 0xca, 0x9b, 0x77,
	0xb8, 0xef, 0xfb, 0x42, 0x32, 0xe8, 0xf3, 0x1d, 0x88, 0x8c, 0xe9, 0xb0, 0xcb, 0x3a, 0xfc, 0x75,
	0xa9, 0x47, 0x84, 0x61, 0x70, 0x05, 0x12, 0x5d, 0x6b, 0xe8, 0xe8, 0x8c, 0x90, 0x5c, 0x49, 0x88,
	0xbb, 0x40, 0xd5, 0x25, 0x4d, 0xe0, 0xca, 0x30, 0xd4, 0x31, 0xfa, 0x68, 0xd1, 0x50, 0xac, 0x67,
	0xd7, 0xcb, 0xe5, 0x55, 0xce, 0x5f, 0x3c, 0x8a, 0xaa, 0x71, 0xff, 0xfd, 0x41, 0x64, 0x73, 0x78,
	0x21, 0xe2, 0xee, 0xfa, 0xab, 0x5d, 0xd6, 0x92, 0x77, 0xf2, 0xa5, 0x4a, 0xf5, 0x06, 0xac, 0xf9,
	0xcf, 0x17, 0x4e, 0x9f, 0x2c, 0xbb, 0x31, 0xc9, 0x66, 0x79, 0xfe, 0x76, 0xfe, 0x4e, 0xbe, 0x74,
	0xab, 0x7a, 0x15, 0x62, 0x46, 0xc7, 0x55, 0xc1, 0x97, 0x4f, 0x66, 0x68, 0xfd, 0x74, 0x86, 0x36,
	0xe6, 0x33, 0x14, 0x65, 0x4d, 0xed, 0x35, 0xec, 0x83, 0x48, 0x7c, 0x43, 0x14, 0x73, 0xff, 0xe1,
	0x21, 0x75, 0xbf, 0x6f, 0x1d, 0x1a, 0x7d, 0x75, 0x44, 0x3b, 0x9a, 0xfb, 0x1e, 0x3e, 0x82, 0x84,
	0x4d, 0x3b, 0xd4, 0x9c, 0xba, 0x61, 0xb9, 0x03, 0x75, 0xbd, 0x7c, 0xed, 0x5c, 0x58, 0xad, 0xc3,
	0x5f, 0xd1, 0x8e, 0x43, 0xe8, 0x91, 0x4b, 0xa8, 0x5e, 0xfd, 0xdb, 0x6f, 0xbc, 0xa2, 0xea, 0x01,
	0x8f, 0xdd, 0xcc, 0x3f, 0x22, 0x5e, 0x8c, 0x90, 0xa5, 0x16, 0x96, 0x21, 0x66, 0xbb, 0x37, 0x64,
	0x9c, 0xe6, 0x99, 0xea, 0xca, 0xc1, 0xcf, 0xee, 0x52, 0x15, 0x16, 0x4a, 0x22, 0xf1, 0xc9, 0xab,
	0x8a, 0x20, 0xbc, 0xc5, 0x22, 0xfc, 0xe4, 0xf3, 0x19, 0xfa, 0x18, 0x6e, 0xc0, 0x35, 0xd6, 0xf8,
	0x59, 0xe2, 0x87, 0x95, 0xad, 0x59, 0xc3, 0x23, 0xb3, 0x37, 0xb1, 0x19, 0x1e, 0x0b, 0xa5, 0x7c,
	0x05, 0x2e, 0x43, 0xf2, 0x80, 0x9d, 0x96, 0x25, 0x93, 0x3e, 0x1d, 0x63, 0x54, 0xce, 0xfd, 0x99,
	0x87, 0x54, 0xcd, 0xa6, 0x86, 0x43, 0xdf, 0x7e, 0x9e, 0x3f, 0x79, 0xe3, 0x3c, 0x2f, 0x72, 0xfb,
	0xe9, 0x5b, 0xc8, 0xed, 0x6b, 0x33, 0x7a, 0xf9, 0x9f, 0xbb, 0xe7, 0x7a, 0x2f, 0xf7, 0x17, 0x1e,
	0x36, 0x08, 0x1d, 0xf5, 0x8d, 0xce, 0xbb, 0x3c, 0xad, 0xca, 0xd3, 0x9f, 0x78, 0x58, 0xbf, 0x4f,
	0x9d, 0x77, 0x39, 0x7a, 0x7d, 0x8e, 0x76, 0x0a, 0x10, 0x0f, 0x5e, 0x4c, 0x9c, 0x80, 0xe8, 0xbe,
	0xd2, 0x6c, 0x11, 0x91, 0x63, 0x9f, 0xd2, 0x83, 0x16, 0x11, 0x11, 0x4e, 0x42, 0xbc, 0x46, 0x14,
	0x4d, 0xa9, 0x49, 0x0d, 0x91, 0xdf, 0xf9, 0x35, 0x44, 0xbd, 0xff, 0xb9, 0x30, 0xa4, 0x94, 0xe6,
	0x1e, 0x91, 0x54, 0x8d, 0xb4, 0x6b, 0x5a, 0x9b, 0xc8, 0x22, 0x87, 0x2f, 0x41, 0x42, 0x91, 0x24,
	0x55, 0xaf, 0x49, 0x92, 0x2a, 0x22, 0x2c, 0x42, 0xf2, 0xa1, 0x42, 0xb4, 0xb6, 0xd4, 0xd0, 0xeb,
	0x2d, 0x55, 0x13, 0x79, 0x9c, 0x02, 0x78, 0xd8, 0x6a, 0x68, 0xba, 0x5a, 0x97, 0x88, 0x2c, 0x0a,
	0x78, 0x0d, 0x84, 0xb6, 0xb4, 0x2f, 0x46, 0xdc, 0x43, 0x54, 0xb9, 0xd6, 0x26, 0x8a, 0xf6, 0x58,
	0x8c, 0xe2, 0x4d, 0xc0, 0x9a, 0xb2, 0x2f, 0xab, 0x32, 0x51, 0x64, 0x55, 0x97, 0x9a, 0xad, 0x7d,
	0xa9, 0xf1, 0x58, 0x8c, 0xed, 0xfc, 0x8b, 0x87, 0xc4, 0xe2, 0x45, 0xc5, 0x1f, 0xc2, 0x0d, 0x55,
	0xd1, 0x64, 0xbd, 0xd6, 0x56, 0xb5, 0xd6, 0xbe, 0x4c, 0x74, 0xad, 0xdd, 0x6c, 0xca, 0x0d, 0x5d,
	0x69, 0x6a, 0x32, 0xd9, 0x93, 0x6a, 0xb2, 0x7e, 0xaf, 0xf5, 0xa8, 0x29, 0x72, 0x38, 0x0b, 0xd7,
	0x18, 0xf0, 0xa0, 0xfe, 0x58, 0x75, 0xc3, 0x38, 0x8f, 0x40, 0xf8, 0x3a, 0xbc, 0xef, 0x91, 0x55,
	0x5d, 0x6b, 0x2d, 0x05, 0x19, 0x8b, 0x41, 0x78, 0x9c, 0x86, 0xf7, 0x54, 0x99, 0x3c, 0x54, 0x6a,
	0xb2, 0xee, 0xfe, 0x95, 0x89, 0x2e, 0x13, 0xd2, 0x22, 0xa2, 0x10, 0xb6, 0xd4, 0x1a, 0x8a, 0xdc,
	0xd4, 0x7c, 0x4b, 0xc4, 0x8d, 0x23, 0xb0, 0xd4, 0x65, 0xa9, 0xa1, 0xd5, 0xf5, 0x46, 0xeb, 0x91,
	0x18, 0xc5, 0x57, 0xe0, 0x3b, 0xc1, 0x7e, 0xbb, 0x29, 0x3d, 0x94, 0x94, 0x86, 0x54, 0x6d, 0xc8,
	0x62, 0x0c, 0x6f, 0xc3, 0x07, 0x17, 0x1d, 0xa2, 0x1f, 0xb8, 0xce, 0xb4, 0xda, 0xc4, 0xdd, 0x57,
	0x34, 0x59, 0x5c, 0x0b, 0x23, 0xc3, 0x87, 0x7e, 0x03, 0x19, 0x0f, 0x23, 0xe5, 0xe6, 0xbd, 0x83,
	0x96, 0xd2, 0xd4, 0x7c, 0x6f, 0x6a, 0x75, 0xb9, 0xf6, 0x33, 0x7d, 0x4f, 0x52, 0x1a, 0x6e, 0xf9,
	0x12, 0xd5, 0xdf, 0xa3, 0xd3, 0xe7, 0x19, 0xee, 0xd9, 0xf3, 0x0c, 0xf7, 0xf2, 0x79, 0x06, 0xfd,
	0x76, 0x9e, 0x41, 0x7f, 0x9d, 0x67, 0xd0, 0x17, 0xf3, 0x0c, 0x3a, 0x9d, 0x67, 0xd0, 0xb3, 0x79,
	0x06, 0xfd, 0x7b, 0x9e, 0x41, 0xff, 0x9b, 0x67, 0xb8, 0x97, 0xf3, 0x0c, 0xfa, 0xc3, 0x8b, 0x0c,
	0x77, 0xfa, 0x22, 0xc3, 0x3d, 0x7b, 0x91, 0xe1, 0x7e, 0x71, 0xd0, 0xb3, 0x46, 0x9f, 0xf6, 0x0a,
	0x53, 0xab, 0xef, 0x50, 0xdb, 0x36, 0x0a, 0x93, 0x71, 0x91, 0x7d, 0x1c, 0x59, 0xf6, 0xe0, 0xe6,
	0xc8, 0xb6, 0xa6, 0x66, 0x97, 0xda, 0x37, 0x03, 0x73, 0x71, 0x74, 0xd8, 0xb3, 0x8a, 0xf4, 0xa9,
	0xe3, 0xff, 0xb8, 0xbd, 0xe0, 0xc7, 0xfa, 0x61, 0x8c, 0xfd, 0xc8, 0xad, 0xfc, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0xf6, 0x0a, 0x5e, 0xd1, 0x0f, 0x00, 0x00,
}

func (x Severity) String() string {
	s, ok := Severity_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Group) String() string {
	s, ok := Group_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AlertName) String() string {
	s, ok := AlertName_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LabelMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelMatcher)
	if !ok {
		that2, ok := that.(LabelMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MatcherType == nil {
		if this.MatcherType != nil {
			return false
		}
	} else if this.MatcherType == nil {
		return false
	} else if !this.MatcherType.Equal(that1.MatcherType) {
		return false
	}
	return true
}
func (this *LabelMatcher_ExactMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelMatcher_ExactMatch)
	if !ok {
		that2, ok := that.(LabelMatcher_ExactMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactMatch != that1.ExactMatch {
		return false
	}
	return true
}
func (this *LabelMatcher_RegexMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelMatcher_RegexMatch)
	if !ok {
		that2, ok := that.(LabelMatcher_RegexMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegexMatch != that1.RegexMatch {
		return false
	}
	return true
}
func (this *CustomMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomMatcher)
	if !ok {
		that2, ok := that.(CustomMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Severity.Equal(that1.Severity) {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	if !this.Alertname.Equal(that1.Alertname) {
		return false
	}
	return true
}
func (this *SeverityMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SeverityMatcher)
	if !ok {
		that2, ok := that.(SeverityMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Severities) != len(that1.Severities) {
		return false
	}
	for i := range this.Severities {
		if this.Severities[i] != that1.Severities[i] {
			return false
		}
	}
	return true
}
func (this *GroupMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GroupMatcher)
	if !ok {
		that2, ok := that.(GroupMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if this.Groups[i] != that1.Groups[i] {
			return false
		}
	}
	return true
}
func (this *CustomGroupBy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomGroupBy)
	if !ok {
		that2, ok := that.(CustomGroupBy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *NotificationParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationParameters)
	if !ok {
		that2, ok := that.(NotificationParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.GroupBy == nil {
		if this.GroupBy != nil {
			return false
		}
	} else if this.GroupBy == nil {
		return false
	} else if !this.GroupBy.Equal(that1.GroupBy) {
		return false
	}
	if this.GroupWait != that1.GroupWait {
		return false
	}
	if this.GroupInterval != that1.GroupInterval {
		return false
	}
	if this.RepeatInterval != that1.RepeatInterval {
		return false
	}
	return true
}
func (this *NotificationParameters_Default) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationParameters_Default)
	if !ok {
		that2, ok := that.(NotificationParameters_Default)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *NotificationParameters_Individual) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationParameters_Individual)
	if !ok {
		that2, ok := that.(NotificationParameters_Individual)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Individual.Equal(that1.Individual) {
		return false
	}
	return true
}
func (this *NotificationParameters_VesIoGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationParameters_VesIoGroup)
	if !ok {
		that2, ok := that.(NotificationParameters_VesIoGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VesIoGroup.Equal(that1.VesIoGroup) {
		return false
	}
	return true
}
func (this *NotificationParameters_Custom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationParameters_Custom)
	if !ok {
		that2, ok := that.(NotificationParameters_Custom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Custom.Equal(that1.Custom) {
		return false
	}
	return true
}
func (this *Route) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Matcher == nil {
		if this.Matcher != nil {
			return false
		}
	} else if this.Matcher == nil {
		return false
	} else if !this.Matcher.Equal(that1.Matcher) {
		return false
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	if !this.NotificationParameters.Equal(that1.NotificationParameters) {
		return false
	}
	return true
}
func (this *Route_Any) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_Any)
	if !ok {
		that2, ok := that.(Route_Any)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Any.Equal(that1.Any) {
		return false
	}
	return true
}
func (this *Route_Severity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_Severity)
	if !ok {
		that2, ok := that.(Route_Severity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Severity.Equal(that1.Severity) {
		return false
	}
	return true
}
func (this *Route_Group) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_Group)
	if !ok {
		that2, ok := that.(Route_Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	return true
}
func (this *Route_Alertname) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_Alertname)
	if !ok {
		that2, ok := that.(Route_Alertname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Alertname != that1.Alertname {
		return false
	}
	return true
}
func (this *Route_AlertnameRegex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_AlertnameRegex)
	if !ok {
		that2, ok := that.(Route_AlertnameRegex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AlertnameRegex != that1.AlertnameRegex {
		return false
	}
	return true
}
func (this *Route_Custom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_Custom)
	if !ok {
		that2, ok := that.(Route_Custom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Custom.Equal(that1.Custom) {
		return false
	}
	return true
}
func (this *Route_Send) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_Send)
	if !ok {
		that2, ok := that.(Route_Send)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Send.Equal(that1.Send) {
		return false
	}
	return true
}
func (this *Route_DontSend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_DontSend)
	if !ok {
		that2, ok := that.(Route_DontSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DontSend.Equal(that1.DontSend) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Receivers) != len(that1.Receivers) {
		return false
	}
	for i := range this.Receivers {
		if !this.Receivers[i].Equal(that1.Receivers[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.NotificationParameters.Equal(that1.NotificationParameters) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Receivers) != len(that1.Receivers) {
		return false
	}
	for i := range this.Receivers {
		if !this.Receivers[i].Equal(that1.Receivers[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.NotificationParameters.Equal(that1.NotificationParameters) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Receivers) != len(that1.Receivers) {
		return false
	}
	for i := range this.Receivers {
		if !this.Receivers[i].Equal(that1.Receivers[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.NotificationParameters.Equal(that1.NotificationParameters) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Receivers) != len(that1.Receivers) {
		return false
	}
	for i := range this.Receivers {
		if !this.Receivers[i].Equal(that1.Receivers[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.NotificationParameters.Equal(that1.NotificationParameters) {
		return false
	}
	return true
}
func (this *LabelMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_policy.LabelMatcher{")
	if this.MatcherType != nil {
		s = append(s, "MatcherType: "+fmt.Sprintf("%#v", this.MatcherType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LabelMatcher_ExactMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.LabelMatcher_ExactMatch{` +
		`ExactMatch:` + fmt.Sprintf("%#v", this.ExactMatch) + `}`}, ", ")
	return s
}
func (this *LabelMatcher_RegexMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.LabelMatcher_RegexMatch{` +
		`RegexMatch:` + fmt.Sprintf("%#v", this.RegexMatch) + `}`}, ", ")
	return s
}
func (this *CustomMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&alert_policy.CustomMatcher{")
	if this.Severity != nil {
		s = append(s, "Severity: "+fmt.Sprintf("%#v", this.Severity)+",\n")
	}
	if this.Group != nil {
		s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	}
	if this.Alertname != nil {
		s = append(s, "Alertname: "+fmt.Sprintf("%#v", this.Alertname)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SeverityMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_policy.SeverityMatcher{")
	s = append(s, "Severities: "+fmt.Sprintf("%#v", this.Severities)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_policy.GroupMatcher{")
	s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomGroupBy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_policy.CustomGroupBy{")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotificationParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&alert_policy.NotificationParameters{")
	if this.GroupBy != nil {
		s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	}
	s = append(s, "GroupWait: "+fmt.Sprintf("%#v", this.GroupWait)+",\n")
	s = append(s, "GroupInterval: "+fmt.Sprintf("%#v", this.GroupInterval)+",\n")
	s = append(s, "RepeatInterval: "+fmt.Sprintf("%#v", this.RepeatInterval)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotificationParameters_Default) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.NotificationParameters_Default{` +
		`Default:` + fmt.Sprintf("%#v", this.Default) + `}`}, ", ")
	return s
}
func (this *NotificationParameters_Individual) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.NotificationParameters_Individual{` +
		`Individual:` + fmt.Sprintf("%#v", this.Individual) + `}`}, ", ")
	return s
}
func (this *NotificationParameters_VesIoGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.NotificationParameters_VesIoGroup{` +
		`VesIoGroup:` + fmt.Sprintf("%#v", this.VesIoGroup) + `}`}, ", ")
	return s
}
func (this *NotificationParameters_Custom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.NotificationParameters_Custom{` +
		`Custom:` + fmt.Sprintf("%#v", this.Custom) + `}`}, ", ")
	return s
}
func (this *Route) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&alert_policy.Route{")
	if this.Matcher != nil {
		s = append(s, "Matcher: "+fmt.Sprintf("%#v", this.Matcher)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.NotificationParameters != nil {
		s = append(s, "NotificationParameters: "+fmt.Sprintf("%#v", this.NotificationParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Route_Any) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.Route_Any{` +
		`Any:` + fmt.Sprintf("%#v", this.Any) + `}`}, ", ")
	return s
}
func (this *Route_Severity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.Route_Severity{` +
		`Severity:` + fmt.Sprintf("%#v", this.Severity) + `}`}, ", ")
	return s
}
func (this *Route_Group) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.Route_Group{` +
		`Group:` + fmt.Sprintf("%#v", this.Group) + `}`}, ", ")
	return s
}
func (this *Route_Alertname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.Route_Alertname{` +
		`Alertname:` + fmt.Sprintf("%#v", this.Alertname) + `}`}, ", ")
	return s
}
func (this *Route_AlertnameRegex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.Route_AlertnameRegex{` +
		`AlertnameRegex:` + fmt.Sprintf("%#v", this.AlertnameRegex) + `}`}, ", ")
	return s
}
func (this *Route_Custom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.Route_Custom{` +
		`Custom:` + fmt.Sprintf("%#v", this.Custom) + `}`}, ", ")
	return s
}
func (this *Route_Send) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.Route_Send{` +
		`Send:` + fmt.Sprintf("%#v", this.Send) + `}`}, ", ")
	return s
}
func (this *Route_DontSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_policy.Route_DontSend{` +
		`DontSend:` + fmt.Sprintf("%#v", this.DontSend) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&alert_policy.GlobalSpecType{")
	if this.Receivers != nil {
		s = append(s, "Receivers: "+fmt.Sprintf("%#v", this.Receivers)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.NotificationParameters != nil {
		s = append(s, "NotificationParameters: "+fmt.Sprintf("%#v", this.NotificationParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&alert_policy.CreateSpecType{")
	if this.Receivers != nil {
		s = append(s, "Receivers: "+fmt.Sprintf("%#v", this.Receivers)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.NotificationParameters != nil {
		s = append(s, "NotificationParameters: "+fmt.Sprintf("%#v", this.NotificationParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&alert_policy.ReplaceSpecType{")
	if this.Receivers != nil {
		s = append(s, "Receivers: "+fmt.Sprintf("%#v", this.Receivers)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.NotificationParameters != nil {
		s = append(s, "NotificationParameters: "+fmt.Sprintf("%#v", this.NotificationParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&alert_policy.GetSpecType{")
	if this.Receivers != nil {
		s = append(s, "Receivers: "+fmt.Sprintf("%#v", this.Receivers)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.NotificationParameters != nil {
		s = append(s, "NotificationParameters: "+fmt.Sprintf("%#v", this.NotificationParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LabelMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MatcherType != nil {
		{
			size := m.MatcherType.Size()
			i -= size
			if _, err := m.MatcherType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *LabelMatcher_ExactMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelMatcher_ExactMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactMatch)
	copy(dAtA[i:], m.ExactMatch)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactMatch)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *LabelMatcher_RegexMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelMatcher_RegexMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RegexMatch)
	copy(dAtA[i:], m.RegexMatch)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexMatch)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *CustomMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Alertname != nil {
		{
			size, err := m.Alertname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Severity != nil {
		{
			size, err := m.Severity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeverityMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeverityMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeverityMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Severities) > 0 {
		dAtA5 := make([]byte, len(m.Severities)*10)
		var j4 int
		for _, num := range m.Severities {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTypes(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		dAtA7 := make([]byte, len(m.Groups)*10)
		var j6 int
		for _, num := range m.Groups {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintTypes(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomGroupBy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomGroupBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomGroupBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Labels[iNdEx])
			copy(dAtA[i:], m.Labels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Labels[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotificationParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RepeatInterval) > 0 {
		i -= len(m.RepeatInterval)
		copy(dAtA[i:], m.RepeatInterval)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RepeatInterval)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.GroupInterval) > 0 {
		i -= len(m.GroupInterval)
		copy(dAtA[i:], m.GroupInterval)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GroupInterval)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.GroupWait) > 0 {
		i -= len(m.GroupWait)
		copy(dAtA[i:], m.GroupWait)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GroupWait)))
		i--
		dAtA[i] = 0x5a
	}
	if m.GroupBy != nil {
		{
			size := m.GroupBy.Size()
			i -= size
			if _, err := m.GroupBy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotificationParameters_Default) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationParameters_Default) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Default != nil {
		{
			size, err := m.Default.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *NotificationParameters_Individual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationParameters_Individual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Individual != nil {
		{
			size, err := m.Individual.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NotificationParameters_VesIoGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationParameters_VesIoGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VesIoGroup != nil {
		{
			size, err := m.VesIoGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *NotificationParameters_Custom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationParameters_Custom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Custom != nil {
		{
			size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotificationParameters != nil {
		{
			size, err := m.NotificationParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Matcher != nil {
		{
			size := m.Matcher.Size()
			i -= size
			if _, err := m.Matcher.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Route_Any) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Any) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Any != nil {
		{
			size, err := m.Any.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Route_Severity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Severity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Severity != nil {
		{
			size, err := m.Severity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Route_Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Route_Alertname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Alertname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Alertname))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *Route_AlertnameRegex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_AlertnameRegex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AlertnameRegex)
	copy(dAtA[i:], m.AlertnameRegex)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AlertnameRegex)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *Route_Custom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Custom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Custom != nil {
		{
			size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Route_Send) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_Send) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Send != nil {
		{
			size, err := m.Send.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Route_DontSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route_DontSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DontSend != nil {
		{
			size, err := m.DontSend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotificationParameters != nil {
		{
			size, err := m.NotificationParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotificationParameters != nil {
		{
			size, err := m.NotificationParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotificationParameters != nil {
		{
			size, err := m.NotificationParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotificationParameters != nil {
		{
			size, err := m.NotificationParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LabelMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatcherType != nil {
		n += m.MatcherType.Size()
	}
	return n
}

func (m *LabelMatcher_ExactMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactMatch)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *LabelMatcher_RegexMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegexMatch)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CustomMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Severity != nil {
		l = m.Severity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Alertname != nil {
		l = m.Alertname.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SeverityMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Severities) > 0 {
		l = 0
		for _, e := range m.Severities {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *GroupMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		l = 0
		for _, e := range m.Groups {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *CustomGroupBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *NotificationParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupBy != nil {
		n += m.GroupBy.Size()
	}
	l = len(m.GroupWait)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.GroupInterval)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RepeatInterval)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *NotificationParameters_Default) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NotificationParameters_Individual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Individual != nil {
		l = m.Individual.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NotificationParameters_VesIoGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VesIoGroup != nil {
		l = m.VesIoGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NotificationParameters_Custom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Custom != nil {
		l = m.Custom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Matcher != nil {
		n += m.Matcher.Size()
	}
	if m.Action != nil {
		n += m.Action.Size()
	}
	if m.NotificationParameters != nil {
		l = m.NotificationParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Route_Any) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Any != nil {
		l = m.Any.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Route_Severity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Severity != nil {
		l = m.Severity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Route_Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Route_Alertname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Alertname))
	return n
}
func (m *Route_AlertnameRegex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AlertnameRegex)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *Route_Custom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Custom != nil {
		l = m.Custom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Route_Send) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Send != nil {
		l = m.Send.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Route_DontSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DontSend != nil {
		l = m.DontSend.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NotificationParameters != nil {
		l = m.NotificationParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NotificationParameters != nil {
		l = m.NotificationParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NotificationParameters != nil {
		l = m.NotificationParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NotificationParameters != nil {
		l = m.NotificationParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LabelMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LabelMatcher{`,
		`MatcherType:` + fmt.Sprintf("%v", this.MatcherType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LabelMatcher_ExactMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LabelMatcher_ExactMatch{`,
		`ExactMatch:` + fmt.Sprintf("%v", this.ExactMatch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LabelMatcher_RegexMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LabelMatcher_RegexMatch{`,
		`RegexMatch:` + fmt.Sprintf("%v", this.RegexMatch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomMatcher{`,
		`Severity:` + strings.Replace(this.Severity.String(), "LabelMatcher", "LabelMatcher", 1) + `,`,
		`Group:` + strings.Replace(this.Group.String(), "LabelMatcher", "LabelMatcher", 1) + `,`,
		`Alertname:` + strings.Replace(this.Alertname.String(), "LabelMatcher", "LabelMatcher", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeverityMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeverityMatcher{`,
		`Severities:` + fmt.Sprintf("%v", this.Severities) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupMatcher{`,
		`Groups:` + fmt.Sprintf("%v", this.Groups) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomGroupBy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomGroupBy{`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotificationParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotificationParameters{`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`GroupWait:` + fmt.Sprintf("%v", this.GroupWait) + `,`,
		`GroupInterval:` + fmt.Sprintf("%v", this.GroupInterval) + `,`,
		`RepeatInterval:` + fmt.Sprintf("%v", this.RepeatInterval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotificationParameters_Default) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotificationParameters_Default{`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotificationParameters_Individual) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotificationParameters_Individual{`,
		`Individual:` + strings.Replace(fmt.Sprintf("%v", this.Individual), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotificationParameters_VesIoGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotificationParameters_VesIoGroup{`,
		`VesIoGroup:` + strings.Replace(fmt.Sprintf("%v", this.VesIoGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotificationParameters_Custom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotificationParameters_Custom{`,
		`Custom:` + strings.Replace(fmt.Sprintf("%v", this.Custom), "CustomGroupBy", "CustomGroupBy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route{`,
		`Matcher:` + fmt.Sprintf("%v", this.Matcher) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`NotificationParameters:` + strings.Replace(this.NotificationParameters.String(), "NotificationParameters", "NotificationParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route_Any) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route_Any{`,
		`Any:` + strings.Replace(fmt.Sprintf("%v", this.Any), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route_Severity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route_Severity{`,
		`Severity:` + strings.Replace(fmt.Sprintf("%v", this.Severity), "SeverityMatcher", "SeverityMatcher", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route_Group) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route_Group{`,
		`Group:` + strings.Replace(fmt.Sprintf("%v", this.Group), "GroupMatcher", "GroupMatcher", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route_Alertname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route_Alertname{`,
		`Alertname:` + fmt.Sprintf("%v", this.Alertname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route_AlertnameRegex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route_AlertnameRegex{`,
		`AlertnameRegex:` + fmt.Sprintf("%v", this.AlertnameRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route_Custom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route_Custom{`,
		`Custom:` + strings.Replace(fmt.Sprintf("%v", this.Custom), "CustomMatcher", "CustomMatcher", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route_Send) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route_Send{`,
		`Send:` + strings.Replace(fmt.Sprintf("%v", this.Send), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route_DontSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route_DontSend{`,
		`DontSend:` + strings.Replace(fmt.Sprintf("%v", this.DontSend), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReceivers := "[]*ObjectRefType{"
	for _, f := range this.Receivers {
		repeatedStringForReceivers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForReceivers += "}"
	repeatedStringForRoutes := "[]*Route{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "Route", "Route", 1) + ","
	}
	repeatedStringForRoutes += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Receivers:` + repeatedStringForReceivers + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`NotificationParameters:` + strings.Replace(this.NotificationParameters.String(), "NotificationParameters", "NotificationParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReceivers := "[]*ObjectRefType{"
	for _, f := range this.Receivers {
		repeatedStringForReceivers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForReceivers += "}"
	repeatedStringForRoutes := "[]*Route{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "Route", "Route", 1) + ","
	}
	repeatedStringForRoutes += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Receivers:` + repeatedStringForReceivers + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`NotificationParameters:` + strings.Replace(this.NotificationParameters.String(), "NotificationParameters", "NotificationParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReceivers := "[]*ObjectRefType{"
	for _, f := range this.Receivers {
		repeatedStringForReceivers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForReceivers += "}"
	repeatedStringForRoutes := "[]*Route{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "Route", "Route", 1) + ","
	}
	repeatedStringForRoutes += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Receivers:` + repeatedStringForReceivers + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`NotificationParameters:` + strings.Replace(this.NotificationParameters.String(), "NotificationParameters", "NotificationParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReceivers := "[]*ObjectRefType{"
	for _, f := range this.Receivers {
		repeatedStringForReceivers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForReceivers += "}"
	repeatedStringForRoutes := "[]*Route{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "Route", "Route", 1) + ","
	}
	repeatedStringForRoutes += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Receivers:` + repeatedStringForReceivers + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`NotificationParameters:` + strings.Replace(this.NotificationParameters.String(), "NotificationParameters", "NotificationParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LabelMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactMatch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatcherType = &LabelMatcher_ExactMatch{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexMatch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatcherType = &LabelMatcher_RegexMatch{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Severity == nil {
				m.Severity = &LabelMatcher{}
			}
			if err := m.Severity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &LabelMatcher{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alertname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alertname == nil {
				m.Alertname = &LabelMatcher{}
			}
			if err := m.Alertname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeverityMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeverityMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeverityMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Severity
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Severity(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Severities = append(m.Severities, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Severities) == 0 {
					m.Severities = make([]Severity, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Severity
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Severity(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Severities = append(m.Severities, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Severities", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Group
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Group(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Groups = append(m.Groups, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Groups) == 0 {
					m.Groups = make([]Group, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Group
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Group(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Groups = append(m.Groups, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomGroupBy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomGroupBy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomGroupBy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotificationParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GroupBy = &NotificationParameters_Default{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Individual", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GroupBy = &NotificationParameters_Individual{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesIoGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GroupBy = &NotificationParameters_VesIoGroup{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomGroupBy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GroupBy = &NotificationParameters_Custom{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupWait", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupWait = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Matcher = &Route_Any{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SeverityMatcher{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Matcher = &Route_Severity{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GroupMatcher{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Matcher = &Route_Group{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alertname", wireType)
			}
			var v AlertName
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AlertName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Matcher = &Route_Alertname{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertnameRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matcher = &Route_AlertnameRegex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomMatcher{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Matcher = &Route_Custom{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Route_Send{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DontSend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Route_DontSend{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotificationParameters == nil {
				m.NotificationParameters = &NotificationParameters{}
			}
			if err := m.NotificationParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &schema.ObjectRefType{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotificationParameters == nil {
				m.NotificationParameters = &NotificationParameters{}
			}
			if err := m.NotificationParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &schema.ObjectRefType{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotificationParameters == nil {
				m.NotificationParameters = &NotificationParameters{}
			}
			if err := m.NotificationParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &schema.ObjectRefType{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotificationParameters == nil {
				m.NotificationParameters = &NotificationParameters{}
			}
			if err := m.NotificationParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &schema.ObjectRefType{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotificationParameters == nil {
				m.NotificationParameters = &NotificationParameters{}
			}
			if err := m.NotificationParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

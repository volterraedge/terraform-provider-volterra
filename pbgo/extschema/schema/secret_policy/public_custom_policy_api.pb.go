// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/secret_policy/public_custom_policy_api.proto

// Secret Policy Config Object
//
// x-displayName: "Secret Policy"
// A Secret Policy defines who gets access to a secret.
// A secret_policy object consists of an unordered list of predicates and a list of secret policy rules.
// The predicates are evaluated against a set of input fields that are extracted from or derived from client TLS certificate.
// Any predicates that are not specified in a policy are implicitly considered to be true.
// The rules in the policy are also evaluated against the input fields.
// They are treated as an ordered or unordered list depending on the value of the rule combining algorithm.
// A policy is considered a match if all predicates in the policy evaluate to true and the one of the rules in the policy is also matched.
//
// If the configured rule combining algorithm is FIRST_MATCH, the rules in the policy are evaluated sequentially till a matching rule is identified.
// If the rule combining algorithm is ALLOW_OVERRIDES all rules with an ALLOW action are evaluated prior to rules with a DENY action.
// If it is DENY_OVERRIDES, all rules with a DENY action are evaluated prior to rules with a ALLOW action.

package secret_policy

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SoftDeleteRequest is used to soft delete a secret_policy
//
// x-displayName: "Soft Delete Request"
// This is the input message of the 'DeletePolicy' RPC.
type SoftDeleteRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Namespace of the secret policy
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "site-secret-policy"
	// Name of the secret policy
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SoftDeleteRequest) Reset()      { *m = SoftDeleteRequest{} }
func (*SoftDeleteRequest) ProtoMessage() {}
func (*SoftDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92490649efc01524, []int{0}
}
func (m *SoftDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoftDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SoftDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftDeleteRequest.Merge(m, src)
}
func (m *SoftDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *SoftDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SoftDeleteRequest proto.InternalMessageInfo

func (m *SoftDeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SoftDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DeleteResponse
//
// x-displayName: "Delete Response"
// This is the response message of the 'DeletePolicy' RPC.
type SoftDeleteResponse struct {
	// Status
	//
	// x-displayName: "Status"
	// x-example: "200
	// HTTP status as reported by the backend
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *SoftDeleteResponse) Reset()      { *m = SoftDeleteResponse{} }
func (*SoftDeleteResponse) ProtoMessage() {}
func (*SoftDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92490649efc01524, []int{1}
}
func (m *SoftDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoftDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SoftDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftDeleteResponse.Merge(m, src)
}
func (m *SoftDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *SoftDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SoftDeleteResponse proto.InternalMessageInfo

func (m *SoftDeleteResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// RecoverRequest is used to recover a secret_policy
//
// x-displayName: "Recover Request"
// This is the input message of the 'RecoverPolicy' RPC.
type RecoverRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Namespace of the secret policy
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "site-secret-policy"
	// Name of the secret policy
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RecoverRequest) Reset()      { *m = RecoverRequest{} }
func (*RecoverRequest) ProtoMessage() {}
func (*RecoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92490649efc01524, []int{2}
}
func (m *RecoverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RecoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverRequest.Merge(m, src)
}
func (m *RecoverRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverRequest proto.InternalMessageInfo

func (m *RecoverRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RecoverRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RecoverResponse
//
// x-displayName: "Recover Response"
// This is the response message of the 'RecoverPolicy' RPC.
type RecoverResponse struct {
	// Status
	//
	// x-displayName: "Status"
	// x-example: "200
	// HTTP status as reported by the backend
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *RecoverResponse) Reset()      { *m = RecoverResponse{} }
func (*RecoverResponse) ProtoMessage() {}
func (*RecoverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92490649efc01524, []int{3}
}
func (m *RecoverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RecoverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverResponse.Merge(m, src)
}
func (m *RecoverResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecoverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverResponse proto.InternalMessageInfo

func (m *RecoverResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// ListPolicyRequest is used to list a secret_policy
//
// x-displayName: "List Policy Request"
// This is the input message of the 'ListPolicy' RPC.
type ListPolicyRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Namespace of the secret policy
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// policy_state
	//
	// x-displayName: "policy_state"
	// x-required
	// x-example: "all"
	// state of the policy to filter in results
	PolicyState string `protobuf:"bytes,2,opt,name=policy_state,json=policyState,proto3" json:"policy_state,omitempty"`
}

func (m *ListPolicyRequest) Reset()      { *m = ListPolicyRequest{} }
func (*ListPolicyRequest) ProtoMessage() {}
func (*ListPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92490649efc01524, []int{4}
}
func (m *ListPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ListPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPolicyRequest.Merge(m, src)
}
func (m *ListPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPolicyRequest proto.InternalMessageInfo

func (m *ListPolicyRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListPolicyRequest) GetPolicyState() string {
	if m != nil {
		return m.PolicyState
	}
	return ""
}

// ListPolicyResponseItem is an individual item in a collection of secret_policy
//
// x-displayName: "List Polic Response  Item"
type ListPolicyResponseItem struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// The tenant this item belongs to
	Tenant string `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace this item belongs to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of this secret_policy
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// uid
	//
	// x-displayName: "UID"
	// x-example: "d27938ba-967e-40a7-9709-57b8627f9f75"
	// The unique uid of this secret_policy
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// The description set for this secret_policy
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// disabled
	//
	// x-displayName: "Disabled"
	// A value of true indicates secret_policy is administratively disabled
	Disabled bool `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// labels
	//
	// x-displayName: "Labels"
	// The set of labels present on this secret_policy
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// annotations
	//
	// x-displayName: "Annotations"
	// The set of annotations present on this secret_policy
	Annotations map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// metadata
	//
	// x-displayName: "Metadata"
	// If list request has report_fields set then metadata will
	// contain all the metadata associated with the object.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,13,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// If list request has report_fields set then system_metadata will
	// contain all the system generated details of this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,14,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// get_spec
	//
	// x-displayName: "Get Specification"
	// If ListRequest has any specified report_fields, it will appear in object
	GetSpec *GetSpecType `protobuf:"bytes,7,opt,name=get_spec,json=getSpec,proto3" json:"get_spec,omitempty"`
}

func (m *ListPolicyResponseItem) Reset()      { *m = ListPolicyResponseItem{} }
func (*ListPolicyResponseItem) ProtoMessage() {}
func (*ListPolicyResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_92490649efc01524, []int{5}
}
func (m *ListPolicyResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPolicyResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ListPolicyResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPolicyResponseItem.Merge(m, src)
}
func (m *ListPolicyResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *ListPolicyResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPolicyResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_ListPolicyResponseItem proto.InternalMessageInfo

func (m *ListPolicyResponseItem) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListPolicyResponseItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListPolicyResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListPolicyResponseItem) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ListPolicyResponseItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListPolicyResponseItem) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *ListPolicyResponseItem) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ListPolicyResponseItem) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ListPolicyResponseItem) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ListPolicyResponseItem) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ListPolicyResponseItem) GetGetSpec() *GetSpecType {
	if m != nil {
		return m.GetSpec
	}
	return nil
}

// ListPolicyResponse is used to list a secret_policy
//
// x-displayName: "List Policy Response"
// This is the response message of the 'ListPolicy' RPC.
type ListPolicyResponse struct {
	// items
	//
	// x-displayName: "Items"
	// items represents the collection in response
	Items []*ListPolicyResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// errors
	//
	// x-displayName: "Errors"
	// Errors(if any) while listing items from collection
	Errors []*schema.ErrorType `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *ListPolicyResponse) Reset()      { *m = ListPolicyResponse{} }
func (*ListPolicyResponse) ProtoMessage() {}
func (*ListPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92490649efc01524, []int{6}
}
func (m *ListPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ListPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPolicyResponse.Merge(m, src)
}
func (m *ListPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPolicyResponse proto.InternalMessageInfo

func (m *ListPolicyResponse) GetItems() []*ListPolicyResponseItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListPolicyResponse) GetErrors() []*schema.ErrorType {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*SoftDeleteRequest)(nil), "ves.io.schema.secret_policy.SoftDeleteRequest")
	golang_proto.RegisterType((*SoftDeleteRequest)(nil), "ves.io.schema.secret_policy.SoftDeleteRequest")
	proto.RegisterType((*SoftDeleteResponse)(nil), "ves.io.schema.secret_policy.SoftDeleteResponse")
	golang_proto.RegisterType((*SoftDeleteResponse)(nil), "ves.io.schema.secret_policy.SoftDeleteResponse")
	proto.RegisterType((*RecoverRequest)(nil), "ves.io.schema.secret_policy.RecoverRequest")
	golang_proto.RegisterType((*RecoverRequest)(nil), "ves.io.schema.secret_policy.RecoverRequest")
	proto.RegisterType((*RecoverResponse)(nil), "ves.io.schema.secret_policy.RecoverResponse")
	golang_proto.RegisterType((*RecoverResponse)(nil), "ves.io.schema.secret_policy.RecoverResponse")
	proto.RegisterType((*ListPolicyRequest)(nil), "ves.io.schema.secret_policy.ListPolicyRequest")
	golang_proto.RegisterType((*ListPolicyRequest)(nil), "ves.io.schema.secret_policy.ListPolicyRequest")
	proto.RegisterType((*ListPolicyResponseItem)(nil), "ves.io.schema.secret_policy.ListPolicyResponseItem")
	golang_proto.RegisterType((*ListPolicyResponseItem)(nil), "ves.io.schema.secret_policy.ListPolicyResponseItem")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.secret_policy.ListPolicyResponseItem.AnnotationsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.secret_policy.ListPolicyResponseItem.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.secret_policy.ListPolicyResponseItem.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.secret_policy.ListPolicyResponseItem.LabelsEntry")
	proto.RegisterType((*ListPolicyResponse)(nil), "ves.io.schema.secret_policy.ListPolicyResponse")
	golang_proto.RegisterType((*ListPolicyResponse)(nil), "ves.io.schema.secret_policy.ListPolicyResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/secret_policy/public_custom_policy_api.proto", fileDescriptor_92490649efc01524)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/secret_policy/public_custom_policy_api.proto", fileDescriptor_92490649efc01524)
}

var fileDescriptor_92490649efc01524 = []byte{
	// 1002 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xd8, 0x8d, 0x93, 0x8c, 0xd3, 0xb4, 0x1d, 0x7d, 0x15, 0xed, 0xd7, 0x8d, 0x56, 0xd6,
	0x1e, 0xa8, 0x81, 0x78, 0xb7, 0x4a, 0x41, 0x82, 0x80, 0x0a, 0x4d, 0x1a, 0x85, 0xa0, 0x56, 0x2d,
	0x1b, 0x24, 0x24, 0x2e, 0xd6, 0x78, 0xf7, 0xd9, 0x59, 0xba, 0xbb, 0xb3, 0xcc, 0xcc, 0xba, 0xb5,
	0x20, 0x02, 0xf5, 0xc2, 0x11, 0x10, 0xe2, 0x7f, 0xe0, 0x6f, 0x20, 0x97, 0x88, 0x4b, 0x39, 0xa1,
	0x08, 0x2e, 0x11, 0x27, 0xe2, 0x70, 0x28, 0xb7, 0xdc, 0xb8, 0xa2, 0x9d, 0x5d, 0x3b, 0xfe, 0x51,
	0x9c, 0x1f, 0xdc, 0xde, 0x9b, 0xf7, 0xde, 0xe7, 0xbd, 0xcf, 0xbc, 0x99, 0x37, 0x83, 0x57, 0xda,
	0x20, 0x4c, 0x8f, 0x59, 0xc2, 0xd9, 0x86, 0x80, 0x5a, 0x02, 0x1c, 0x0e, 0xb2, 0x1e, 0x31, 0xdf,
	0x73, 0x3a, 0x56, 0x14, 0x37, 0x7c, 0xcf, 0xa9, 0x3b, 0xb1, 0x90, 0x2c, 0xc8, 0x16, 0xeb, 0x34,
	0xf2, 0xcc, 0x88, 0x33, 0xc9, 0xc8, 0xf5, 0x34, 0xd6, 0x4c, 0x63, 0xcd, 0xa1, 0xd8, 0x72, 0xad,
	0xe5, 0xc9, 0xed, 0xb8, 0x61, 0x3a, 0x2c, 0xb0, 0x5a, 0xac, 0xc5, 0x2c, 0x15, 0xd3, 0x88, 0x9b,
	0x4a, 0x53, 0x8a, 0x92, 0x52, 0xac, 0xf2, 0x62, 0x8b, 0xb1, 0x96, 0x0f, 0x16, 0x8d, 0x3c, 0x8b,
	0x86, 0x21, 0x93, 0x54, 0x7a, 0x2c, 0x14, 0x99, 0xb5, 0x3c, 0x5c, 0x25, 0x70, 0xce, 0x78, 0xcf,
	0x76, 0x7d, 0xd8, 0xc6, 0xa2, 0xc1, 0xc0, 0xea, 0x24, 0x7a, 0xac, 0xf1, 0x09, 0x38, 0x32, 0xf3,
	0xbc, 0x31, 0xc9, 0x53, 0x76, 0x22, 0xe8, 0x41, 0xfe, 0x7f, 0xd8, 0x71, 0xd0, 0xb4, 0x38, 0x6c,
	0x6a, 0x53, 0xdf, 0x73, 0xa9, 0x84, 0xcc, 0x6a, 0x8c, 0x58, 0x41, 0x40, 0xd8, 0x1e, 0xa9, 0xb7,
	0x32, 0xe2, 0xe3, 0xc1, 0xe3, 0xfa, 0x90, 0x87, 0xb1, 0x8e, 0xaf, 0x6d, 0xb1, 0xa6, 0xbc, 0x0b,
	0x3e, 0x48, 0xb0, 0xe1, 0xd3, 0x18, 0x84, 0x24, 0x8b, 0x78, 0x36, 0xa4, 0x01, 0x88, 0x88, 0x3a,
	0xa0, 0xa1, 0x0a, 0xaa, 0xce, 0xda, 0x27, 0x0b, 0x84, 0xe0, 0x4b, 0x89, 0xa2, 0xe5, 0x95, 0x41,
	0xc9, 0xc6, 0x12, 0x26, 0x83, 0x30, 0x22, 0x62, 0xa1, 0x00, 0xb2, 0x80, 0x8b, 0x42, 0x52, 0x19,
	0x0b, 0x05, 0x52, 0xb0, 0x33, 0xcd, 0x58, 0xc5, 0xf3, 0x36, 0x38, 0xac, 0x0d, 0xfc, 0xe2, 0x19,
	0x5f, 0xc6, 0x57, 0xfa, 0x18, 0xa7, 0xa4, 0xdb, 0xc1, 0xd7, 0xee, 0x79, 0x42, 0x3e, 0x54, 0x9b,
	0x7f, 0xb6, 0x8c, 0xef, 0xe3, 0xb9, 0xec, 0x7c, 0x26, 0x18, 0x59, 0xe6, 0xd5, 0x1b, 0xbf, 0xef,
	0xa2, 0x22, 0x75, 0xa4, 0xd7, 0x86, 0x1f, 0xff, 0xda, 0x2b, 0x68, 0x7c, 0xc1, 0xce, 0x54, 0x7b,
	0xda, 0x55, 0xd4, 0x5d, 0xbb, 0x40, 0x7d, 0xdf, 0x2e, 0xa5, 0xc1, 0x5b, 0x49, 0xac, 0xf1, 0xd3,
	0x14, 0x5e, 0x18, 0xcc, 0x9f, 0x56, 0xbb, 0x29, 0x21, 0x48, 0x2a, 0x96, 0x10, 0xd2, 0x50, 0x6a,
	0x45, 0x55, 0x41, 0xa6, 0x9d, 0x7f, 0x3b, 0xc8, 0x55, 0x5c, 0x88, 0x3d, 0x57, 0x2b, 0xa8, 0xa5,
	0x44, 0x24, 0x15, 0x5c, 0x72, 0x41, 0x38, 0xdc, 0x53, 0xfd, 0xd6, 0x4a, 0xca, 0x32, 0xb8, 0x44,
	0xca, 0x78, 0xc6, 0xf5, 0x04, 0x6d, 0xf8, 0xe0, 0x6a, 0x73, 0x15, 0x54, 0x9d, 0xb1, 0xfb, 0x3a,
	0xf9, 0x08, 0x17, 0x7d, 0xda, 0x00, 0x5f, 0x68, 0x97, 0x2a, 0x85, 0x6a, 0x69, 0xf9, 0x1d, 0x73,
	0xc2, 0xed, 0x34, 0x5f, 0x4c, 0xcf, 0xbc, 0xa7, 0x10, 0xd6, 0x43, 0xc9, 0x3b, 0x76, 0x06, 0x47,
	0x9a, 0xb8, 0x34, 0x70, 0x21, 0x35, 0xac, 0xd0, 0xef, 0x5e, 0x04, 0xfd, 0xce, 0x09, 0x4c, 0x9a,
	0x62, 0x10, 0x98, 0xbc, 0x8d, 0x67, 0x02, 0x90, 0xd4, 0xa5, 0x92, 0x6a, 0x97, 0x2b, 0xa8, 0x5a,
	0x5a, 0xae, 0x8c, 0x24, 0x79, 0xa0, 0xee, 0xeb, 0x06, 0xc8, 0xfb, 0x20, 0xe9, 0x87, 0x9d, 0x08,
	0xec, 0x7e, 0x04, 0x79, 0x80, 0xaf, 0x88, 0x8e, 0x90, 0x10, 0xd4, 0xfb, 0x20, 0xf3, 0x0a, 0xe4,
	0xa5, 0x11, 0x90, 0x2d, 0xe5, 0x35, 0x0e, 0x35, 0x9f, 0x86, 0xdf, 0xef, 0x01, 0xae, 0xe1, 0x99,
	0x16, 0xc8, 0xba, 0x88, 0xc0, 0xd1, 0xa6, 0x15, 0x52, 0x75, 0x22, 0xe7, 0x0d, 0x90, 0x5b, 0x11,
	0x38, 0x0a, 0x6b, 0xba, 0x95, 0x2a, 0xe5, 0x37, 0x71, 0x69, 0x60, 0x4b, 0x93, 0x9e, 0x3f, 0x82,
	0x4e, 0x76, 0x3e, 0x12, 0x91, 0xfc, 0x0f, 0x4f, 0xb5, 0xa9, 0x1f, 0xf7, 0x8e, 0x46, 0xaa, 0xac,
	0xe4, 0xdf, 0x40, 0xe5, 0xdb, 0xf8, 0xea, 0xe8, 0x7e, 0x9d, 0x27, 0xde, 0xf8, 0x16, 0x61, 0x32,
	0xde, 0x07, 0xb2, 0x89, 0xa7, 0x3c, 0x09, 0x41, 0x72, 0xe3, 0x92, 0x3e, 0xde, 0xba, 0x40, 0x1f,
	0xed, 0x14, 0x81, 0xdc, 0xc4, 0xc5, 0x74, 0x10, 0x6b, 0x79, 0x85, 0xa5, 0x8d, 0x60, 0xad, 0x27,
	0x46, 0xb5, 0x1f, 0x99, 0xdf, 0xf2, 0xf7, 0x45, 0x3c, 0xbb, 0xa6, 0x1e, 0x93, 0x3b, 0x0f, 0x37,
	0xc9, 0x31, 0xc2, 0x73, 0xe9, 0xfc, 0x49, 0x73, 0x10, 0x73, 0x62, 0x31, 0x63, 0x53, 0xaf, 0x6c,
	0x9d, 0xd9, 0x3f, 0x2d, 0xde, 0xf8, 0xa2, 0xfb, 0x4c, 0x5b, 0x6e, 0xbe, 0xfe, 0xc4, 0xa9, 0x09,
	0x70, 0x62, 0x0e, 0x01, 0x88, 0xed, 0x9a, 0x90, 0x34, 0x74, 0x29, 0x77, 0x6b, 0xb1, 0x00, 0xbe,
	0xd4, 0x06, 0x51, 0xf3, 0x58, 0x2d, 0x85, 0x12, 0xb5, 0xc7, 0xdc, 0x93, 0xf0, 0xf4, 0xb7, 0x3f,
	0xbf, 0xcb, 0xaf, 0x19, 0xb7, 0xb3, 0xf7, 0xd0, 0xea, 0x5f, 0x6c, 0x61, 0x7d, 0xd6, 0x97, 0x77,
	0x46, 0x9e, 0x0c, 0x65, 0xd9, 0xb1, 0x04, 0x6b, 0xca, 0x74, 0xd2, 0xac, 0xa0, 0x57, 0xc8, 0x73,
	0x84, 0x2f, 0x67, 0x43, 0x30, 0xe3, 0xfc, 0xea, 0x44, 0x0e, 0xc3, 0x43, 0xb7, 0xbc, 0x74, 0x36,
	0xe7, 0x8c, 0xed, 0xe7, 0xff, 0x81, 0xed, 0xbb, 0xc6, 0x5b, 0x17, 0x61, 0xcb, 0xd3, 0x12, 0x12,
	0xaa, 0x7f, 0x23, 0x8c, 0x4f, 0xce, 0xcf, 0x29, 0xbd, 0x1d, 0x9b, 0xf6, 0xa7, 0xf4, 0x76, 0xfc,
	0x60, 0x1a, 0x5f, 0xa1, 0xee, 0x33, 0xed, 0xb5, 0x7f, 0xa5, 0x1b, 0xb0, 0xd0, 0x93, 0x6c, 0x8c,
	0x31, 0x07, 0xea, 0x2a, 0xc2, 0x9b, 0x64, 0xe3, 0x5c, 0x84, 0x7d, 0x4f, 0x9c, 0x90, 0x1f, 0x7c,
	0x79, 0x76, 0xca, 0x37, 0xf7, 0x76, 0x51, 0xe1, 0xd7, 0x5d, 0x64, 0x4c, 0x62, 0x90, 0x0e, 0xa0,
	0xa7, 0xbf, 0x68, 0xf9, 0xf7, 0xd0, 0xea, 0xd7, 0x68, 0xff, 0x50, 0xcf, 0x1d, 0x1c, 0xea, 0xb9,
	0xe3, 0x43, 0x1d, 0x7d, 0xd9, 0xd5, 0xd1, 0x0f, 0x5d, 0x1d, 0xfd, 0xdc, 0xd5, 0xd1, 0x7e, 0x57,
	0x47, 0x07, 0x5d, 0x1d, 0xfd, 0xd1, 0xd5, 0xd1, 0xf3, 0xae, 0x9e, 0x3b, 0xee, 0xea, 0xe8, 0x9b,
	0x23, 0x3d, 0xb7, 0x77, 0xa4, 0xa3, 0xfd, 0x23, 0x3d, 0x77, 0x70, 0xa4, 0xe7, 0x3e, 0xfe, 0xa0,
	0xc5, 0xa2, 0x47, 0x2d, 0xb3, 0xcd, 0x7c, 0x09, 0x9c, 0x53, 0x33, 0x16, 0x96, 0x12, 0x9a, 0x8c,
	0x07, 0xb5, 0x88, 0xb3, 0xb6, 0xe7, 0x02, 0xaf, 0xf5, 0xcc, 0x56, 0xd4, 0x68, 0x31, 0x0b, 0x9e,
	0xc8, 0xde, 0x4f, 0xe7, 0x05, 0x1f, 0x9e, 0x46, 0x51, 0x7d, 0x36, 0x6e, 0xfd, 0x13, 0x00, 0x00,
	0xff, 0xff, 0xe3, 0x0c, 0x31, 0xd6, 0x1f, 0x0a, 0x00, 0x00,
}

func (this *SoftDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SoftDeleteRequest)
	if !ok {
		that2, ok := that.(SoftDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SoftDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SoftDeleteResponse)
	if !ok {
		that2, ok := that.(SoftDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *RecoverRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecoverRequest)
	if !ok {
		that2, ok := that.(RecoverRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RecoverResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecoverResponse)
	if !ok {
		that2, ok := that.(RecoverResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *ListPolicyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListPolicyRequest)
	if !ok {
		that2, ok := that.(ListPolicyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.PolicyState != that1.PolicyState {
		return false
	}
	return true
}
func (this *ListPolicyResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListPolicyResponseItem)
	if !ok {
		that2, ok := that.(ListPolicyResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.GetSpec.Equal(that1.GetSpec) {
		return false
	}
	return true
}
func (this *ListPolicyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListPolicyResponse)
	if !ok {
		that2, ok := that.(ListPolicyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if !this.Errors[i].Equal(that1.Errors[i]) {
			return false
		}
	}
	return true
}
func (this *SoftDeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&secret_policy.SoftDeleteRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SoftDeleteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&secret_policy.SoftDeleteResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecoverRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&secret_policy.RecoverRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecoverResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&secret_policy.RecoverResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListPolicyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&secret_policy.ListPolicyRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "PolicyState: "+fmt.Sprintf("%#v", this.PolicyState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListPolicyResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&secret_policy.ListPolicyResponseItem{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Disabled: "+fmt.Sprintf("%#v", this.Disabled)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%#v: %#v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	if this.Annotations != nil {
		s = append(s, "Annotations: "+mapStringForAnnotations+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.GetSpec != nil {
		s = append(s, "GetSpec: "+fmt.Sprintf("%#v", this.GetSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListPolicyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&secret_policy.ListPolicyResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomPolicyApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// DeletePolicy
	//
	// x-displayName: "Delete secret policy with given policy name"
	DeletePolicy(ctx context.Context, in *SoftDeleteRequest, opts ...grpc.CallOption) (*SoftDeleteResponse, error)
	// RecoverPolicy
	//
	// x-displayName: "Recover secret policy with given policy name"
	RecoverPolicy(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error)
	// ListPolicy
	//
	// x-displayName: "List secret policy"
	ListPolicy(ctx context.Context, in *ListPolicyRequest, opts ...grpc.CallOption) (*ListPolicyResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) DeletePolicy(ctx context.Context, in *SoftDeleteRequest, opts ...grpc.CallOption) (*SoftDeleteResponse, error) {
	out := new(SoftDeleteResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.secret_policy.CustomAPI/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RecoverPolicy(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error) {
	out := new(RecoverResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.secret_policy.CustomAPI/RecoverPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListPolicy(ctx context.Context, in *ListPolicyRequest, opts ...grpc.CallOption) (*ListPolicyResponse, error) {
	out := new(ListPolicyResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.secret_policy.CustomAPI/ListPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// DeletePolicy
	//
	// x-displayName: "Delete secret policy with given policy name"
	DeletePolicy(context.Context, *SoftDeleteRequest) (*SoftDeleteResponse, error)
	// RecoverPolicy
	//
	// x-displayName: "Recover secret policy with given policy name"
	RecoverPolicy(context.Context, *RecoverRequest) (*RecoverResponse, error)
	// ListPolicy
	//
	// x-displayName: "List secret policy"
	ListPolicy(context.Context, *ListPolicyRequest) (*ListPolicyResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) DeletePolicy(ctx context.Context, req *SoftDeleteRequest) (*SoftDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedCustomAPIServer) RecoverPolicy(ctx context.Context, req *RecoverRequest) (*RecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverPolicy not implemented")
}
func (*UnimplementedCustomAPIServer) ListPolicy(ctx context.Context, req *ListPolicyRequest) (*ListPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.secret_policy.CustomAPI/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DeletePolicy(ctx, req.(*SoftDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RecoverPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RecoverPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.secret_policy.CustomAPI/RecoverPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RecoverPolicy(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.secret_policy.CustomAPI/ListPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListPolicy(ctx, req.(*ListPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.secret_policy.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeletePolicy",
			Handler:    _CustomAPI_DeletePolicy_Handler,
		},
		{
			MethodName: "RecoverPolicy",
			Handler:    _CustomAPI_RecoverPolicy_Handler,
		},
		{
			MethodName: "ListPolicy",
			Handler:    _CustomAPI_ListPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/secret_policy/public_custom_policy_api.proto",
}

func (m *SoftDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoftDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SoftDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoftDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecoverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecoverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyState) > 0 {
		i -= len(m.PolicyState)
		copy(dAtA[i:], m.PolicyState)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.PolicyState)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPolicyResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPolicyResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPolicyResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Annotations) > 0 {
		keysForAnnotations := make([]string, 0, len(m.Annotations))
		for k := range m.Annotations {
			keysForAnnotations = append(keysForAnnotations, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
		for iNdEx := len(keysForAnnotations) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Annotations[string(keysForAnnotations[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForAnnotations[iNdEx])
			copy(dAtA[i:], keysForAnnotations[iNdEx])
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(keysForAnnotations[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.GetSpec != nil {
		{
			size, err := m.GetSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomPolicyApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomPolicyApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomPolicyApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SoftDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	return n
}

func (m *SoftDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPublicCustomPolicyApi(uint64(m.Status))
	}
	return n
}

func (m *RecoverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	return n
}

func (m *RecoverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPublicCustomPolicyApi(uint64(m.Status))
	}
	return n
}

func (m *ListPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	l = len(m.PolicyState)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	return n
}

func (m *ListPolicyResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomPolicyApi(uint64(len(k))) + 1 + len(v) + sovPublicCustomPolicyApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomPolicyApi(uint64(mapEntrySize))
		}
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	if m.GetSpec != nil {
		l = m.GetSpec.Size()
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomPolicyApi(uint64(len(k))) + 1 + len(v) + sovPublicCustomPolicyApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomPolicyApi(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
	}
	return n
}

func (m *ListPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPublicCustomPolicyApi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomPolicyApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomPolicyApi(x uint64) (n int) {
	return sovPublicCustomPolicyApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SoftDeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SoftDeleteRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SoftDeleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SoftDeleteResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecoverRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecoverRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecoverResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecoverResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListPolicyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListPolicyRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`PolicyState:` + fmt.Sprintf("%v", this.PolicyState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListPolicyResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	s := strings.Join([]string{`&ListPolicyResponseItem{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`GetSpec:` + strings.Replace(fmt.Sprintf("%v", this.GetSpec), "GetSpecType", "GetSpecType", 1) + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Disabled:` + fmt.Sprintf("%v", this.Disabled) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListPolicyResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*ListPolicyResponseItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "ListPolicyResponseItem", "ListPolicyResponseItem", 1) + ","
	}
	repeatedStringForItems += "}"
	repeatedStringForErrors := "[]*ErrorType{"
	for _, f := range this.Errors {
		repeatedStringForErrors += strings.Replace(fmt.Sprintf("%v", f), "ErrorType", "schema.ErrorType", 1) + ","
	}
	repeatedStringForErrors += "}"
	s := strings.Join([]string{`&ListPolicyResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`Errors:` + repeatedStringForErrors + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomPolicyApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SoftDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPolicyResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPolicyResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPolicyResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomPolicyApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomPolicyApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomPolicyApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetSpec == nil {
				m.GetSpec = &GetSpecType{}
			}
			if err := m.GetSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomPolicyApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomPolicyApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomPolicyApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomPolicyApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ListPolicyResponseItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &schema.ErrorType{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomPolicyApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomPolicyApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomPolicyApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomPolicyApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomPolicyApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomPolicyApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomPolicyApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomPolicyApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomPolicyApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomPolicyApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomPolicyApi = fmt.Errorf("proto: unexpected end of group")
)

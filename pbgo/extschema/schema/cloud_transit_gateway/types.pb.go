// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cloud_transit_gateway/types.proto

package cloud_transit_gateway

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Cloud Transit Gateway specification
//
// x-displayName: "Specification"
// Desired state for Cloud Transit Gateway spec
type GlobalSpecType struct {
	// Cloud Choice
	//
	// x-displayName: "Cloud Choice"
	// x-required
	//
	// Types that are valid to be assigned to CloudChoice:
	//	*GlobalSpecType_Aws
	CloudChoice isGlobalSpecType_CloudChoice `protobuf_oneof:"cloud_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e797e7039fdd1cb5, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_CloudChoice interface {
	isGlobalSpecType_CloudChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}

func (*GlobalSpecType_Aws) isGlobalSpecType_CloudChoice() {}

func (m *GlobalSpecType) GetCloudChoice() isGlobalSpecType_CloudChoice {
	if m != nil {
		return m.CloudChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloudChoice().(*GlobalSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Aws)(nil),
	}
}

// Create Cloud Transit Gateway
//
// x-displayName: "Create Cloud Transit Gateway"
// Shape of the cloud RE specification
type CreateSpecType struct {
	// Types that are valid to be assigned to CloudChoice:
	//	*CreateSpecType_Aws
	CloudChoice isCreateSpecType_CloudChoice `protobuf_oneof:"cloud_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e797e7039fdd1cb5, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_CloudChoice interface {
	isCreateSpecType_CloudChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}

func (*CreateSpecType_Aws) isCreateSpecType_CloudChoice() {}

func (m *CreateSpecType) GetCloudChoice() isCreateSpecType_CloudChoice {
	if m != nil {
		return m.CloudChoice
	}
	return nil
}

func (m *CreateSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloudChoice().(*CreateSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Aws)(nil),
	}
}

// Replace Cloud Transit Gateway
//
// x-displayName: "Replace Cloud Transit Gateway"
// Shape of the cloud RE specification
type ReplaceSpecType struct {
	// Types that are valid to be assigned to CloudChoice:
	//	*ReplaceSpecType_Aws
	CloudChoice isReplaceSpecType_CloudChoice `protobuf_oneof:"cloud_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e797e7039fdd1cb5, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_CloudChoice interface {
	isReplaceSpecType_CloudChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}

func (*ReplaceSpecType_Aws) isReplaceSpecType_CloudChoice() {}

func (m *ReplaceSpecType) GetCloudChoice() isReplaceSpecType_CloudChoice {
	if m != nil {
		return m.CloudChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloudChoice().(*ReplaceSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Aws)(nil),
	}
}

// Get Cloud Transit Gateway
//
// x-displayName: "Get Cloud Transit Gateway"
// Shape of the cloud transit gateway specification
type GetSpecType struct {
	// Types that are valid to be assigned to CloudChoice:
	//	*GetSpecType_Aws
	CloudChoice isGetSpecType_CloudChoice `protobuf_oneof:"cloud_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e797e7039fdd1cb5, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_CloudChoice interface {
	isGetSpecType_CloudChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}

func (*GetSpecType_Aws) isGetSpecType_CloudChoice() {}

func (m *GetSpecType) GetCloudChoice() isGetSpecType_CloudChoice {
	if m != nil {
		return m.CloudChoice
	}
	return nil
}

func (m *GetSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloudChoice().(*GetSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Aws)(nil),
	}
}

// AWS Type
//
// x-displayName: "AWS"
// AWS Type
type AWSType struct {
	// Cloud Credentials
	//
	// x-displayName: "Cloud Credentials"
	// Reference to AWS credentials.
	CloudCredentials *views.ObjectRefType `protobuf:"bytes,9,opt,name=cloud_credentials,json=cloudCredentials,proto3" json:"cloud_credentials,omitempty"`
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// x-example: "us-east-1"
	// x-required
	// AWS Region of your transit gateway present.
	AwsRegion string `protobuf:"bytes,1,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// New/Existing Transit Gateway
	//
	// x-displayName: "New/Existing Transit Gateway"
	// x-required
	// F5XC Site can work with an existing Transit Gateway(TGW) and orchestrate attachments, TGW routing and propagation
	// or F5XC can orchestrate new TGW, attachments, TGW routing and propagation
	//
	// Types that are valid to be assigned to TgwChoice:
	//	*AWSType_NewTgw
	//	*AWSType_ExistingTgw
	TgwChoice isAWSType_TgwChoice `protobuf_oneof:"tgw_choice"`
	// Transit gateway CIDR Block
	//
	// x-displayName: "Transit gateway CIDR Block"
	// x-required
	// CIDR block for AWS Transit Gateway GRE connectivity. Defines the IP address range for GRE tunnel traffic over Transit Gateway.
	//
	// Types that are valid to be assigned to TgwCidrChoice:
	//	*AWSType_ReservedTgwCidr
	//	*AWSType_TgwCidr
	TgwCidrChoice isAWSType_TgwCidrChoice `protobuf_oneof:"tgw_cidr_choice"`
	// Secure Mesh Site
	//
	// x-displayName: "Secure Mesh Site"
	// Reference to Secure Mesh Site
	PrimarySecureMeshSite *views.ObjectRefType `protobuf:"bytes,8,opt,name=primary_secure_mesh_site,json=primarySecureMeshSite,proto3" json:"primary_secure_mesh_site,omitempty"`
	// TGW ASN
	//
	// x-displayName: "Enter TGW ASN"
	// x-example: "64512"
	// TGW ASN. Allowed range for 16-bit private ASNs include 64512 to 65534.
	TgwAsn uint32 `protobuf:"varint,10,opt,name=tgw_asn,json=tgwAsn,proto3" json:"tgw_asn,omitempty"`
	// F5XC Site ASN
	//
	// x-displayName: "Enter F5XC Site ASN"
	// x-example: "64500"
	// F5XC Site ASN.
	VolterraSiteAsn uint32 `protobuf:"varint,11,opt,name=volterra_site_asn,json=volterraSiteAsn,proto3" json:"volterra_site_asn,omitempty"`
	// Service VPC Info
	//
	// x-displayName: "Service VPC Info"
	// x-required
	// Service VPC info TGW attached to
	ServiceVpc *ServiceVPCType `protobuf:"bytes,12,opt,name=service_vpc,json=serviceVpc,proto3" json:"service_vpc,omitempty"`
}

func (m *AWSType) Reset()      { *m = AWSType{} }
func (*AWSType) ProtoMessage() {}
func (*AWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e797e7039fdd1cb5, []int{4}
}
func (m *AWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSType.Merge(m, src)
}
func (m *AWSType) XXX_Size() int {
	return m.Size()
}
func (m *AWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSType proto.InternalMessageInfo

type isAWSType_TgwChoice interface {
	isAWSType_TgwChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSType_TgwCidrChoice interface {
	isAWSType_TgwCidrChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSType_NewTgw struct {
	NewTgw *views.TGWParamsType `protobuf:"bytes,3,opt,name=new_tgw,json=newTgw,proto3,oneof" json:"new_tgw,omitempty"`
}
type AWSType_ExistingTgw struct {
	ExistingTgw *views.ExistingTGWType `protobuf:"bytes,4,opt,name=existing_tgw,json=existingTgw,proto3,oneof" json:"existing_tgw,omitempty"`
}
type AWSType_ReservedTgwCidr struct {
	ReservedTgwCidr *schema.Empty `protobuf:"bytes,6,opt,name=reserved_tgw_cidr,json=reservedTgwCidr,proto3,oneof" json:"reserved_tgw_cidr,omitempty"`
}
type AWSType_TgwCidr struct {
	TgwCidr *views.CloudSubnetParamType `protobuf:"bytes,7,opt,name=tgw_cidr,json=tgwCidr,proto3,oneof" json:"tgw_cidr,omitempty"`
}

func (*AWSType_NewTgw) isAWSType_TgwChoice()              {}
func (*AWSType_ExistingTgw) isAWSType_TgwChoice()         {}
func (*AWSType_ReservedTgwCidr) isAWSType_TgwCidrChoice() {}
func (*AWSType_TgwCidr) isAWSType_TgwCidrChoice()         {}

func (m *AWSType) GetTgwChoice() isAWSType_TgwChoice {
	if m != nil {
		return m.TgwChoice
	}
	return nil
}
func (m *AWSType) GetTgwCidrChoice() isAWSType_TgwCidrChoice {
	if m != nil {
		return m.TgwCidrChoice
	}
	return nil
}

func (m *AWSType) GetCloudCredentials() *views.ObjectRefType {
	if m != nil {
		return m.CloudCredentials
	}
	return nil
}

func (m *AWSType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *AWSType) GetNewTgw() *views.TGWParamsType {
	if x, ok := m.GetTgwChoice().(*AWSType_NewTgw); ok {
		return x.NewTgw
	}
	return nil
}

func (m *AWSType) GetExistingTgw() *views.ExistingTGWType {
	if x, ok := m.GetTgwChoice().(*AWSType_ExistingTgw); ok {
		return x.ExistingTgw
	}
	return nil
}

func (m *AWSType) GetReservedTgwCidr() *schema.Empty {
	if x, ok := m.GetTgwCidrChoice().(*AWSType_ReservedTgwCidr); ok {
		return x.ReservedTgwCidr
	}
	return nil
}

func (m *AWSType) GetTgwCidr() *views.CloudSubnetParamType {
	if x, ok := m.GetTgwCidrChoice().(*AWSType_TgwCidr); ok {
		return x.TgwCidr
	}
	return nil
}

func (m *AWSType) GetPrimarySecureMeshSite() *views.ObjectRefType {
	if m != nil {
		return m.PrimarySecureMeshSite
	}
	return nil
}

func (m *AWSType) GetTgwAsn() uint32 {
	if m != nil {
		return m.TgwAsn
	}
	return 0
}

func (m *AWSType) GetVolterraSiteAsn() uint32 {
	if m != nil {
		return m.VolterraSiteAsn
	}
	return 0
}

func (m *AWSType) GetServiceVpc() *ServiceVPCType {
	if m != nil {
		return m.ServiceVpc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSType_NewTgw)(nil),
		(*AWSType_ExistingTgw)(nil),
		(*AWSType_ReservedTgwCidr)(nil),
		(*AWSType_TgwCidr)(nil),
	}
}

// Service VPC Type
//
// x-displayName: "Service VPC"
// Service VPC Type
type ServiceVPCType struct {
	// Service VPC ID
	//
	// x-displayName: "Service VPC ID"
	// x-example: "vpc-12345678901234567"
	// x-required
	// Enter the VPC ID where secure mesh site exists
	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// List of subnet IDs in service VPC
	//
	// x-displayName: "List of subnet IDs"
	// x-required
	// x-example: "subnet-12345678901234567"
	// List of subnet IDs
	SubnetIds []string `protobuf:"bytes,2,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
}

func (m *ServiceVPCType) Reset()      { *m = ServiceVPCType{} }
func (*ServiceVPCType) ProtoMessage() {}
func (*ServiceVPCType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e797e7039fdd1cb5, []int{5}
}
func (m *ServiceVPCType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceVPCType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceVPCType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceVPCType.Merge(m, src)
}
func (m *ServiceVPCType) XXX_Size() int {
	return m.Size()
}
func (m *ServiceVPCType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceVPCType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceVPCType proto.InternalMessageInfo

func (m *ServiceVPCType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *ServiceVPCType) GetSubnetIds() []string {
	if m != nil {
		return m.SubnetIds
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cloud_transit_gateway.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cloud_transit_gateway.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.cloud_transit_gateway.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.cloud_transit_gateway.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.cloud_transit_gateway.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.cloud_transit_gateway.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.cloud_transit_gateway.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.cloud_transit_gateway.GetSpecType")
	proto.RegisterType((*AWSType)(nil), "ves.io.schema.cloud_transit_gateway.AWSType")
	golang_proto.RegisterType((*AWSType)(nil), "ves.io.schema.cloud_transit_gateway.AWSType")
	proto.RegisterType((*ServiceVPCType)(nil), "ves.io.schema.cloud_transit_gateway.ServiceVPCType")
	golang_proto.RegisterType((*ServiceVPCType)(nil), "ves.io.schema.cloud_transit_gateway.ServiceVPCType")
}

func init() {
	proto.RegisterFile("ves.io/schema/cloud_transit_gateway/types.proto", fileDescriptor_e797e7039fdd1cb5)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/cloud_transit_gateway/types.proto", fileDescriptor_e797e7039fdd1cb5)
}

var fileDescriptor_e797e7039fdd1cb5 = []byte{
	// 994 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xb3, 0x1d, 0xc7, 0x99, 0xa4, 0x89, 0xb3, 0x02, 0x69, 0x09, 0x74, 0xb1, 0x4c, 0x68,
	0x1d, 0x11, 0xaf, 0x4b, 0x82, 0x08, 0x54, 0xa2, 0x6a, 0x6d, 0xaa, 0xfc, 0x50, 0x10, 0xd5, 0xda,
	0x34, 0x02, 0x44, 0x57, 0xe3, 0xdd, 0xc9, 0x66, 0xc0, 0xde, 0x5d, 0xcd, 0x8c, 0xbd, 0x0d, 0x10,
	0x09, 0x21, 0xc4, 0x01, 0x09, 0x84, 0xfa, 0x0f, 0x70, 0x45, 0x3d, 0x71, 0x8e, 0x73, 0xc8, 0x11,
	0xf5, 0xe4, 0x63, 0xc4, 0x89, 0x38, 0x97, 0x72, 0xeb, 0x11, 0x71, 0x40, 0x68, 0xc7, 0xeb, 0x10,
	0xbb, 0x56, 0x94, 0x43, 0x0f, 0xbd, 0xbd, 0xf5, 0xfb, 0xbe, 0xef, 0x7d, 0xf3, 0xde, 0xdb, 0x1d,
	0xa3, 0x62, 0x8b, 0x70, 0x9d, 0x7a, 0x45, 0x6e, 0xed, 0x90, 0x06, 0x2e, 0x5a, 0x75, 0xaf, 0x69,
	0x9b, 0x82, 0x61, 0x97, 0x53, 0x61, 0x3a, 0x58, 0x90, 0x00, 0xef, 0x16, 0xc5, 0xae, 0x4f, 0xb8,
	0xee, 0x33, 0x4f, 0x78, 0xca, 0x6b, 0x3d, 0x82, 0xde, 0x23, 0xe8, 0x23, 0x09, 0x73, 0x05, 0x87,
	0x8a, 0x9d, 0x66, 0x4d, 0xb7, 0xbc, 0x46, 0xd1, 0xf1, 0x1c, 0xaf, 0x28, 0xb9, 0xb5, 0xe6, 0xb6,
	0x7c, 0x92, 0x0f, 0x32, 0xea, 0x69, 0xce, 0xbd, 0x3c, 0x68, 0xc2, 0xf3, 0x05, 0xf5, 0xdc, 0xa8,
	0xe0, 0xdc, 0x4b, 0x83, 0xc9, 0x33, 0x5e, 0xe6, 0x5e, 0x19, 0x4c, 0xb5, 0x70, 0x9d, 0xda, 0x58,
	0x90, 0x28, 0x9b, 0x1d, 0xca, 0x52, 0x12, 0x98, 0x83, 0xd2, 0xf3, 0x4f, 0x23, 0x78, 0x91, 0x53,
	0x41, 0xcc, 0xb3, 0x55, 0x5e, 0x1d, 0x85, 0x3a, 0x03, 0xc8, 0x05, 0x68, 0x7a, 0xb5, 0xee, 0xd5,
	0x70, 0xbd, 0xe2, 0x13, 0xab, 0xba, 0xeb, 0x13, 0xe5, 0x26, 0x4a, 0xe0, 0x80, 0xab, 0xf1, 0x2c,
	0xe4, 0x27, 0x97, 0x16, 0xf5, 0x0b, 0xb4, 0x4c, 0xbf, 0xb5, 0x55, 0x09, 0xa9, 0x6b, 0x31, 0x23,
	0xa4, 0x96, 0x2e, 0xa3, 0xa9, 0x1e, 0xce, 0xda, 0xf1, 0xa8, 0x45, 0x94, 0x4b, 0x87, 0x6d, 0x88,
	0x77, 0xda, 0x00, 0xdd, 0x36, 0xc0, 0xd2, 0x46, 0x32, 0x0d, 0x99, 0x78, 0xee, 0x47, 0x40, 0xd3,
	0x65, 0x46, 0xb0, 0x20, 0xcf, 0xae, 0xf2, 0xf5, 0xd9, 0x47, 0x37, 0x86, 0x8e, 0x53, 0xca, 0x0e,
	0x99, 0xc9, 0x7c, 0xfb, 0x0f, 0x0c, 0xfc, 0x12, 0xf9, 0xf9, 0x09, 0xd0, 0x8c, 0x41, 0xfc, 0x3a,
	0xb6, 0x9e, 0x13, 0x43, 0x3f, 0x00, 0x9a, 0x5c, 0x25, 0xe2, 0xf9, 0x30, 0xf3, 0x47, 0x0a, 0x8d,
	0x47, 0x6a, 0x4a, 0x80, 0x66, 0x23, 0x04, 0x23, 0x36, 0x71, 0x05, 0xc5, 0x75, 0xae, 0x4e, 0x48,
	0x5b, 0xb9, 0x21, 0x5b, 0x72, 0xdf, 0xf4, 0x0f, 0x6b, 0x9f, 0x13, 0x4b, 0x18, 0x64, 0x5b, 0x96,
	0xbc, 0xf2, 0x70, 0xef, 0x69, 0xfe, 0xfe, 0x01, 0x4c, 0xa7, 0x21, 0x0f, 0xd7, 0xe0, 0x7a, 0xca,
	0xf2, 0xdc, 0x6d, 0xea, 0x18, 0x19, 0x09, 0x2a, 0xff, 0x8f, 0x51, 0x56, 0x10, 0xc2, 0x01, 0x37,
	0x19, 0x71, 0xa8, 0xe7, 0xaa, 0x90, 0x85, 0xfc, 0x44, 0x49, 0xfd, 0xbb, 0x0d, 0xb1, 0xfd, 0x03,
	0xc8, 0x48, 0x2e, 0x92, 0x9c, 0x82, 0x8d, 0x05, 0x36, 0x26, 0x70, 0xc0, 0x0d, 0x09, 0x55, 0xde,
	0x43, 0xe3, 0x2e, 0x09, 0x4c, 0xe1, 0x04, 0x6a, 0xe2, 0x1c, 0x9f, 0xd5, 0xd5, 0xad, 0x3b, 0x98,
	0xe1, 0x06, 0x8f, 0x9a, 0x96, 0x72, 0x49, 0x50, 0x75, 0x02, 0x65, 0x1d, 0x4d, 0x91, 0xfb, 0x94,
	0x0b, 0xea, 0x3a, 0x52, 0x23, 0x29, 0x35, 0xe6, 0x47, 0x6a, 0xdc, 0x8e, 0x80, 0xd5, 0xd5, 0xad,
	0x48, 0x65, 0xb2, 0xcf, 0x0d, 0xa5, 0x4a, 0x68, 0x96, 0x11, 0x4e, 0x58, 0x8b, 0xd8, 0xa1, 0x94,
	0x69, 0x51, 0x9b, 0xa9, 0x29, 0xa9, 0xf7, 0xc2, 0x90, 0xde, 0xed, 0x86, 0x2f, 0x76, 0xd7, 0xc0,
	0x98, 0xe9, 0x13, 0xaa, 0x4e, 0x50, 0xa6, 0x36, 0x53, 0x36, 0x51, 0xfa, 0x94, 0x3a, 0x2e, 0xa9,
	0x0b, 0x23, 0xad, 0x94, 0xc3, 0x5e, 0x54, 0x9a, 0x35, 0x97, 0x08, 0x79, 0x2c, 0xd9, 0xfd, 0xe4,
	0x6f, 0x07, 0x00, 0x6b, 0x60, 0x8c, 0x8b, 0x48, 0xed, 0x3b, 0x40, 0xaa, 0xcf, 0x68, 0x03, 0xb3,
	0x5d, 0x93, 0x13, 0xab, 0xc9, 0x88, 0xd9, 0x20, 0x7c, 0xc7, 0x0c, 0x3f, 0x25, 0x6a, 0xfa, 0xc2,
	0x53, 0xbd, 0xfa, 0x70, 0x4f, 0xe9, 0xd1, 0x4f, 0xd9, 0x66, 0x6b, 0x69, 0xc4, 0x58, 0x5f, 0x8c,
	0x8a, 0x55, 0x24, 0xf8, 0x03, 0xc2, 0x77, 0x2a, 0x54, 0x10, 0x25, 0x8b, 0x42, 0x47, 0x26, 0xe6,
	0xae, 0x8a, 0xb2, 0x90, 0xbf, 0x54, 0x1a, 0x3f, 0xda, 0x83, 0xc7, 0x6d, 0x00, 0x23, 0x25, 0x9c,
	0xe0, 0x16, 0x77, 0x95, 0x65, 0x34, 0xdb, 0xf2, 0xea, 0x82, 0x30, 0x86, 0x7b, 0xf2, 0x21, 0x76,
	0x72, 0x10, 0x3b, 0xd3, 0x47, 0x84, 0x9a, 0x21, 0xa9, 0x8a, 0x26, 0xc3, 0xe6, 0x51, 0x8b, 0x98,
	0x2d, 0xdf, 0x52, 0xa7, 0xe4, 0x79, 0x96, 0x2f, 0xf4, 0xf2, 0x54, 0x7a, 0xbc, 0xbb, 0x77, 0xca,
	0xe1, 0x01, 0x0d, 0x14, 0xe9, 0xdc, 0xf5, 0xad, 0xd2, 0x65, 0x84, 0xe4, 0x04, 0x7a, 0xef, 0xcc,
	0xcc, 0x61, 0x1b, 0x12, 0x9d, 0x36, 0xc4, 0xbb, 0x6d, 0x48, 0x2c, 0x2f, 0xbe, 0x55, 0xca, 0xa1,
	0x99, 0xfe, 0x80, 0xce, 0x62, 0x52, 0x9d, 0x36, 0x8c, 0x85, 0x98, 0xb7, 0x17, 0x57, 0x36, 0x92,
	0xe9, 0x78, 0x26, 0xb1, 0x91, 0x4c, 0x8f, 0x65, 0x52, 0xb9, 0x7f, 0x01, 0x4d, 0x0f, 0x56, 0x53,
	0x2c, 0x94, 0x6a, 0xf9, 0x96, 0x49, 0xed, 0x68, 0xcd, 0x37, 0xfb, 0x6b, 0x9e, 0x1e, 0x5a, 0xf3,
	0xfd, 0xbf, 0x0e, 0x13, 0x49, 0x16, 0x57, 0x6f, 0x86, 0xc1, 0x15, 0x36, 0xbf, 0x94, 0xbb, 0x97,
	0x6f, 0xf9, 0x56, 0x61, 0x21, 0xff, 0x29, 0x2e, 0x7c, 0x79, 0xad, 0xf0, 0xee, 0x67, 0x5f, 0xbd,
	0xb3, 0xf7, 0xf5, 0x69, 0xfc, 0xe6, 0xca, 0xde, 0xc2, 0xbc, 0x31, 0xd6, 0xf2, 0xad, 0x75, 0x5b,
	0xf9, 0x1e, 0x10, 0xe2, 0x72, 0x3f, 0x4c, 0x6a, 0x87, 0x5f, 0x96, 0x44, 0x7e, 0xa2, 0xe4, 0xec,
	0x1f, 0x80, 0x12, 0xcd, 0x6c, 0xa8, 0x8e, 0xfe, 0x00, 0xde, 0xc8, 0x2d, 0xb0, 0xab, 0x4b, 0xaf,
	0xdf, 0xcb, 0xf7, 0x78, 0xe7, 0x96, 0x09, 0x29, 0x63, 0x0f, 0x20, 0x9e, 0x49, 0xf6, 0xa3, 0x34,
	0xf4, 0x23, 0x15, 0x8c, 0x89, 0x9e, 0xc4, 0xba, 0xcd, 0x4b, 0xbf, 0xc0, 0xa3, 0x1b, 0x63, 0x65,
	0xe3, 0xa3, 0xcd, 0xf7, 0x3b, 0xc7, 0x5a, 0xec, 0xe8, 0x58, 0x8b, 0x3d, 0x39, 0xd6, 0xe0, 0x9b,
	0xae, 0x06, 0xbf, 0x76, 0x35, 0xf8, 0xbd, 0xab, 0x41, 0xa7, 0xab, 0xc1, 0x51, 0x57, 0x83, 0x3f,
	0xbb, 0x1a, 0x3c, 0xee, 0x6a, 0xb1, 0x27, 0x5d, 0x0d, 0x7e, 0x3e, 0xd1, 0x62, 0x87, 0x27, 0x1a,
	0x74, 0x4e, 0xb4, 0xd8, 0xd1, 0x89, 0x16, 0xfb, 0xe4, 0x63, 0xc7, 0xf3, 0xbf, 0x70, 0xf4, 0xfe,
	0x0e, 0xe8, 0x4d, 0x5e, 0x94, 0xc1, 0xb6, 0xc7, 0x1a, 0x05, 0x9f, 0x79, 0x2d, 0x6a, 0x13, 0x56,
	0xe8, 0xa7, 0x8b, 0x7e, 0xcd, 0xf1, 0x8a, 0xe4, 0xbe, 0x88, 0xee, 0xc6, 0xf3, 0xfe, 0x45, 0xd4,
	0x52, 0xf2, 0xb6, 0x5c, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xec, 0x8a, 0x2c, 0x73, 0x08,
	0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudChoice == nil {
		if this.CloudChoice != nil {
			return false
		}
	} else if this.CloudChoice == nil {
		return false
	} else if !this.CloudChoice.Equal(that1.CloudChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Aws)
	if !ok {
		that2, ok := that.(GlobalSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudChoice == nil {
		if this.CloudChoice != nil {
			return false
		}
	} else if this.CloudChoice == nil {
		return false
	} else if !this.CloudChoice.Equal(that1.CloudChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Aws)
	if !ok {
		that2, ok := that.(CreateSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudChoice == nil {
		if this.CloudChoice != nil {
			return false
		}
	} else if this.CloudChoice == nil {
		return false
	} else if !this.CloudChoice.Equal(that1.CloudChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Aws)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudChoice == nil {
		if this.CloudChoice != nil {
			return false
		}
	} else if this.CloudChoice == nil {
		return false
	} else if !this.CloudChoice.Equal(that1.CloudChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Aws)
	if !ok {
		that2, ok := that.(GetSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *AWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType)
	if !ok {
		that2, ok := that.(AWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudCredentials.Equal(that1.CloudCredentials) {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if that1.TgwChoice == nil {
		if this.TgwChoice != nil {
			return false
		}
	} else if this.TgwChoice == nil {
		return false
	} else if !this.TgwChoice.Equal(that1.TgwChoice) {
		return false
	}
	if that1.TgwCidrChoice == nil {
		if this.TgwCidrChoice != nil {
			return false
		}
	} else if this.TgwCidrChoice == nil {
		return false
	} else if !this.TgwCidrChoice.Equal(that1.TgwCidrChoice) {
		return false
	}
	if !this.PrimarySecureMeshSite.Equal(that1.PrimarySecureMeshSite) {
		return false
	}
	if this.TgwAsn != that1.TgwAsn {
		return false
	}
	if this.VolterraSiteAsn != that1.VolterraSiteAsn {
		return false
	}
	if !this.ServiceVpc.Equal(that1.ServiceVpc) {
		return false
	}
	return true
}
func (this *AWSType_NewTgw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType_NewTgw)
	if !ok {
		that2, ok := that.(AWSType_NewTgw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewTgw.Equal(that1.NewTgw) {
		return false
	}
	return true
}
func (this *AWSType_ExistingTgw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType_ExistingTgw)
	if !ok {
		that2, ok := that.(AWSType_ExistingTgw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExistingTgw.Equal(that1.ExistingTgw) {
		return false
	}
	return true
}
func (this *AWSType_ReservedTgwCidr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType_ReservedTgwCidr)
	if !ok {
		that2, ok := that.(AWSType_ReservedTgwCidr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReservedTgwCidr.Equal(that1.ReservedTgwCidr) {
		return false
	}
	return true
}
func (this *AWSType_TgwCidr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType_TgwCidr)
	if !ok {
		that2, ok := that.(AWSType_TgwCidr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TgwCidr.Equal(that1.TgwCidr) {
		return false
	}
	return true
}
func (this *ServiceVPCType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceVPCType)
	if !ok {
		that2, ok := that.(ServiceVPCType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if len(this.SubnetIds) != len(that1.SubnetIds) {
		return false
	}
	for i := range this.SubnetIds {
		if this.SubnetIds[i] != that1.SubnetIds[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_transit_gateway.GlobalSpecType{")
	if this.CloudChoice != nil {
		s = append(s, "CloudChoice: "+fmt.Sprintf("%#v", this.CloudChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_transit_gateway.GlobalSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_transit_gateway.CreateSpecType{")
	if this.CloudChoice != nil {
		s = append(s, "CloudChoice: "+fmt.Sprintf("%#v", this.CloudChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_transit_gateway.CreateSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_transit_gateway.ReplaceSpecType{")
	if this.CloudChoice != nil {
		s = append(s, "CloudChoice: "+fmt.Sprintf("%#v", this.CloudChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_transit_gateway.ReplaceSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_transit_gateway.GetSpecType{")
	if this.CloudChoice != nil {
		s = append(s, "CloudChoice: "+fmt.Sprintf("%#v", this.CloudChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_transit_gateway.GetSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *AWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&cloud_transit_gateway.AWSType{")
	if this.CloudCredentials != nil {
		s = append(s, "CloudCredentials: "+fmt.Sprintf("%#v", this.CloudCredentials)+",\n")
	}
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	if this.TgwChoice != nil {
		s = append(s, "TgwChoice: "+fmt.Sprintf("%#v", this.TgwChoice)+",\n")
	}
	if this.TgwCidrChoice != nil {
		s = append(s, "TgwCidrChoice: "+fmt.Sprintf("%#v", this.TgwCidrChoice)+",\n")
	}
	if this.PrimarySecureMeshSite != nil {
		s = append(s, "PrimarySecureMeshSite: "+fmt.Sprintf("%#v", this.PrimarySecureMeshSite)+",\n")
	}
	s = append(s, "TgwAsn: "+fmt.Sprintf("%#v", this.TgwAsn)+",\n")
	s = append(s, "VolterraSiteAsn: "+fmt.Sprintf("%#v", this.VolterraSiteAsn)+",\n")
	if this.ServiceVpc != nil {
		s = append(s, "ServiceVpc: "+fmt.Sprintf("%#v", this.ServiceVpc)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSType_NewTgw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_transit_gateway.AWSType_NewTgw{` +
		`NewTgw:` + fmt.Sprintf("%#v", this.NewTgw) + `}`}, ", ")
	return s
}
func (this *AWSType_ExistingTgw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_transit_gateway.AWSType_ExistingTgw{` +
		`ExistingTgw:` + fmt.Sprintf("%#v", this.ExistingTgw) + `}`}, ", ")
	return s
}
func (this *AWSType_ReservedTgwCidr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_transit_gateway.AWSType_ReservedTgwCidr{` +
		`ReservedTgwCidr:` + fmt.Sprintf("%#v", this.ReservedTgwCidr) + `}`}, ", ")
	return s
}
func (this *AWSType_TgwCidr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_transit_gateway.AWSType_TgwCidr{` +
		`TgwCidr:` + fmt.Sprintf("%#v", this.TgwCidr) + `}`}, ", ")
	return s
}
func (this *ServiceVPCType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloud_transit_gateway.ServiceVPCType{")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "SubnetIds: "+fmt.Sprintf("%#v", this.SubnetIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudChoice != nil {
		{
			size := m.CloudChoice.Size()
			i -= size
			if _, err := m.CloudChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudChoice != nil {
		{
			size := m.CloudChoice.Size()
			i -= size
			if _, err := m.CloudChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudChoice != nil {
		{
			size := m.CloudChoice.Size()
			i -= size
			if _, err := m.CloudChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudChoice != nil {
		{
			size := m.CloudChoice.Size()
			i -= size
			if _, err := m.CloudChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceVpc != nil {
		{
			size, err := m.ServiceVpc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.VolterraSiteAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VolterraSiteAsn))
		i--
		dAtA[i] = 0x58
	}
	if m.TgwAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAsn))
		i--
		dAtA[i] = 0x50
	}
	if m.CloudCredentials != nil {
		{
			size, err := m.CloudCredentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PrimarySecureMeshSite != nil {
		{
			size, err := m.PrimarySecureMeshSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TgwCidrChoice != nil {
		{
			size := m.TgwCidrChoice.Size()
			i -= size
			if _, err := m.TgwCidrChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TgwChoice != nil {
		{
			size := m.TgwChoice.Size()
			i -= size
			if _, err := m.TgwChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSType_NewTgw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType_NewTgw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewTgw != nil {
		{
			size, err := m.NewTgw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AWSType_ExistingTgw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType_ExistingTgw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExistingTgw != nil {
		{
			size, err := m.ExistingTgw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AWSType_ReservedTgwCidr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType_ReservedTgwCidr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReservedTgwCidr != nil {
		{
			size, err := m.ReservedTgwCidr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AWSType_TgwCidr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType_TgwCidr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TgwCidr != nil {
		{
			size, err := m.TgwCidr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceVPCType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceVPCType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceVPCType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubnetIds) > 0 {
		for iNdEx := len(m.SubnetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubnetIds[iNdEx])
			copy(dAtA[i:], m.SubnetIds[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SubnetIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudChoice != nil {
		n += m.CloudChoice.Size()
	}
	return n
}

func (m *GlobalSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudChoice != nil {
		n += m.CloudChoice.Size()
	}
	return n
}

func (m *CreateSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudChoice != nil {
		n += m.CloudChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudChoice != nil {
		n += m.CloudChoice.Size()
	}
	return n
}

func (m *GetSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwChoice != nil {
		n += m.TgwChoice.Size()
	}
	if m.TgwCidrChoice != nil {
		n += m.TgwCidrChoice.Size()
	}
	if m.PrimarySecureMeshSite != nil {
		l = m.PrimarySecureMeshSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CloudCredentials != nil {
		l = m.CloudCredentials.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwAsn != 0 {
		n += 1 + sovTypes(uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		n += 1 + sovTypes(uint64(m.VolterraSiteAsn))
	}
	if m.ServiceVpc != nil {
		l = m.ServiceVpc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSType_NewTgw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewTgw != nil {
		l = m.NewTgw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSType_ExistingTgw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExistingTgw != nil {
		l = m.ExistingTgw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSType_ReservedTgwCidr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservedTgwCidr != nil {
		l = m.ReservedTgwCidr.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSType_TgwCidr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TgwCidr != nil {
		l = m.TgwCidr.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceVPCType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.SubnetIds) > 0 {
		for _, s := range m.SubnetIds {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`CloudChoice:` + fmt.Sprintf("%v", this.CloudChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`CloudChoice:` + fmt.Sprintf("%v", this.CloudChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`CloudChoice:` + fmt.Sprintf("%v", this.CloudChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`CloudChoice:` + fmt.Sprintf("%v", this.CloudChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType{`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`TgwChoice:` + fmt.Sprintf("%v", this.TgwChoice) + `,`,
		`TgwCidrChoice:` + fmt.Sprintf("%v", this.TgwCidrChoice) + `,`,
		`PrimarySecureMeshSite:` + strings.Replace(fmt.Sprintf("%v", this.PrimarySecureMeshSite), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`CloudCredentials:` + strings.Replace(fmt.Sprintf("%v", this.CloudCredentials), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`TgwAsn:` + fmt.Sprintf("%v", this.TgwAsn) + `,`,
		`VolterraSiteAsn:` + fmt.Sprintf("%v", this.VolterraSiteAsn) + `,`,
		`ServiceVpc:` + strings.Replace(this.ServiceVpc.String(), "ServiceVPCType", "ServiceVPCType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType_NewTgw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType_NewTgw{`,
		`NewTgw:` + strings.Replace(fmt.Sprintf("%v", this.NewTgw), "TGWParamsType", "views.TGWParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType_ExistingTgw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType_ExistingTgw{`,
		`ExistingTgw:` + strings.Replace(fmt.Sprintf("%v", this.ExistingTgw), "ExistingTGWType", "views.ExistingTGWType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType_ReservedTgwCidr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType_ReservedTgwCidr{`,
		`ReservedTgwCidr:` + strings.Replace(fmt.Sprintf("%v", this.ReservedTgwCidr), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType_TgwCidr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType_TgwCidr{`,
		`TgwCidr:` + strings.Replace(fmt.Sprintf("%v", this.TgwCidr), "CloudSubnetParamType", "views.CloudSubnetParamType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceVPCType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceVPCType{`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`SubnetIds:` + fmt.Sprintf("%v", this.SubnetIds) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudChoice = &GlobalSpecType_Aws{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudChoice = &CreateSpecType_Aws{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudChoice = &ReplaceSpecType_Aws{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudChoice = &GetSpecType_Aws{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.TGWParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwChoice = &AWSType_NewTgw{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingTgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ExistingTGWType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwChoice = &AWSType_ExistingTgw{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedTgwCidr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwCidrChoice = &AWSType_ReservedTgwCidr{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwCidr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.CloudSubnetParamType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwCidrChoice = &AWSType_TgwCidr{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimarySecureMeshSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrimarySecureMeshSite == nil {
				m.PrimarySecureMeshSite = &views.ObjectRefType{}
			}
			if err := m.PrimarySecureMeshSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudCredentials == nil {
				m.CloudCredentials = &views.ObjectRefType{}
			}
			if err := m.CloudCredentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsn", wireType)
			}
			m.TgwAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSiteAsn", wireType)
			}
			m.VolterraSiteAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolterraSiteAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceVpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceVpc == nil {
				m.ServiceVpc = &ServiceVPCType{}
			}
			if err := m.ServiceVpc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceVPCType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceVPCType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceVPCType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetIds = append(m.SubnetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

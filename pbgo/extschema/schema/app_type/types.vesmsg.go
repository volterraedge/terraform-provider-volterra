// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package app_type

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"
	google_protobuf "github.com/gogo/protobuf/types"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APIEPDynExample) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEPDynExample) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEPDynExample) DeepCopy() *APIEPDynExample {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEPDynExample{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEPDynExample) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEPDynExample) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEPDynExampleValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEPDynExample struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEPDynExample) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEPDynExample)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEPDynExample got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["component_examples"]; exists {

		vOpts := append(opts, db.WithValidateField("component_examples"))
		for idx, item := range m.GetComponentExamples() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["component_identifier"]; exists {

		vOpts := append(opts, db.WithValidateField("component_identifier"))
		if err := fv(ctx, m.GetComponentIdentifier(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEPDynExampleValidator = func() *ValidateAPIEPDynExample {
	v := &ValidateAPIEPDynExample{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEPDynExampleValidator() db.Validator {
	return DefaultAPIEPDynExampleValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEPInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEPInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEPInfo) DeepCopy() *APIEPInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEPInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEPInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEPInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEPInfoValidator().Validate(ctx, m, opts...)
}

// SetAccessDiscoveryTime sets the field
func (m *APIEPInfo) SetAccessDiscoveryTime(in *google_protobuf.Timestamp) {
	m.AccessDiscoveryTime = in
}

type ValidateAPIEPInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEPInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEPInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEPInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_discovery_time"]; exists {

		vOpts := append(opts, db.WithValidateField("access_discovery_time"))
		if err := fv(ctx, m.GetAccessDiscoveryTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_groups"]; exists {

		vOpts := append(opts, db.WithValidateField("api_groups"))
		for idx, item := range m.GetApiGroups() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_type"]; exists {

		vOpts := append(opts, db.WithValidateField("api_type"))
		if err := fv(ctx, m.GetApiType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["attributes"]; exists {

		vOpts := append(opts, db.WithValidateField("attributes"))
		for idx, item := range m.GetAttributes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["authentication_state"]; exists {

		vOpts := append(opts, db.WithValidateField("authentication_state"))
		if err := fv(ctx, m.GetAuthenticationState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["authentication_types"]; exists {

		vOpts := append(opts, db.WithValidateField("authentication_types"))
		for idx, item := range m.GetAuthenticationTypes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["avg_latency"]; exists {

		vOpts := append(opts, db.WithValidateField("avg_latency"))
		if err := fv(ctx, m.GetAvgLatency(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["base_path"]; exists {

		vOpts := append(opts, db.WithValidateField("base_path"))
		if err := fv(ctx, m.GetBasePath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["category"]; exists {

		vOpts := append(opts, db.WithValidateField("category"))
		for idx, item := range m.GetCategory() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compliances"]; exists {

		vOpts := append(opts, db.WithValidateField("compliances"))
		for idx, item := range m.GetCompliances() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {

		vOpts := append(opts, db.WithValidateField("domains"))
		for idx, item := range m.GetDomains() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dyn_examples"]; exists {

		vOpts := append(opts, db.WithValidateField("dyn_examples"))
		for idx, item := range m.GetDynExamples() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["engines"]; exists {

		vOpts := append(opts, db.WithValidateField("engines"))
		for idx, item := range m.GetEngines() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["err_rsp_count"]; exists {

		vOpts := append(opts, db.WithValidateField("err_rsp_count"))
		if err := fv(ctx, m.GetErrRspCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["has_learnt_schema"]; exists {

		vOpts := append(opts, db.WithValidateField("has_learnt_schema"))
		if err := fv(ctx, m.GetHasLearntSchema(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["last_tested"]; exists {

		vOpts := append(opts, db.WithValidateField("last_tested"))
		if err := fv(ctx, m.GetLastTested(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["max_latency"]; exists {

		vOpts := append(opts, db.WithValidateField("max_latency"))
		if err := fv(ctx, m.GetMaxLatency(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pdf_info"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_info"))
		if err := fv(ctx, m.GetPdfInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pii_level"]; exists {

		vOpts := append(opts, db.WithValidateField("pii_level"))
		if err := fv(ctx, m.GetPiiLevel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["req_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("req_rate"))
		if err := fv(ctx, m.GetReqRate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_percentage"]; exists {

		vOpts := append(opts, db.WithValidateField("request_percentage"))
		if err := fv(ctx, m.GetRequestPercentage(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["requests_count"]; exists {

		vOpts := append(opts, db.WithValidateField("requests_count"))
		if err := fv(ctx, m.GetRequestsCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["risk_score"]; exists {

		vOpts := append(opts, db.WithValidateField("risk_score"))
		if err := fv(ctx, m.GetRiskScore(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schema_status"]; exists {

		vOpts := append(opts, db.WithValidateField("schema_status"))
		if err := fv(ctx, m.GetSchemaStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sec_events_count"]; exists {

		vOpts := append(opts, db.WithValidateField("sec_events_count"))
		if err := fv(ctx, m.GetSecEventsCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["security_risk"]; exists {

		vOpts := append(opts, db.WithValidateField("security_risk"))
		if err := fv(ctx, m.GetSecurityRisk(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data"))
		for idx, item := range m.GetSensitiveData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_location"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_location"))
		for idx, item := range m.GetSensitiveDataLocation() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_types"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_types"))
		for idx, item := range m.GetSensitiveDataTypes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEPInfoValidator = func() *ValidateAPIEPInfo {
	v := &ValidateAPIEPInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEPInfoValidator() db.Validator {
	return DefaultAPIEPInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEPPDFInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEPPDFInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEPPDFInfo) DeepCopy() *APIEPPDFInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEPPDFInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEPPDFInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEPPDFInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEPPDFInfoValidator().Validate(ctx, m, opts...)
}

// SetCreationTimestamp sets the field
func (m *APIEPPDFInfo) SetCreationTimestamp(in *google_protobuf.Timestamp) {
	m.CreationTimestamp = in
}

type ValidateAPIEPPDFInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEPPDFInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEPPDFInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEPPDFInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["creation_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("creation_timestamp"))
		if err := fv(ctx, m.GetCreationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["error_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("error_rate"))
		for idx, item := range m.GetErrorRate() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["error_rate_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("error_rate_stat"))
		if err := fv(ctx, m.GetErrorRateStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["latency_no_data"]; exists {

		vOpts := append(opts, db.WithValidateField("latency_no_data"))
		for idx, item := range m.GetLatencyNoData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["latency_no_data_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("latency_no_data_stat"))
		if err := fv(ctx, m.GetLatencyNoDataStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["latency_with_data"]; exists {

		vOpts := append(opts, db.WithValidateField("latency_with_data"))
		for idx, item := range m.GetLatencyWithData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["latency_with_data_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("latency_with_data_stat"))
		if err := fv(ctx, m.GetLatencyWithDataStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("request_rate"))
		for idx, item := range m.GetRequestRate() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["request_rate_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("request_rate_stat"))
		if err := fv(ctx, m.GetRequestRateStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_size"]; exists {

		vOpts := append(opts, db.WithValidateField("request_size"))
		for idx, item := range m.GetRequestSize() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["request_size_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("request_size_stat"))
		if err := fv(ctx, m.GetRequestSizeStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_size"]; exists {

		vOpts := append(opts, db.WithValidateField("response_size"))
		for idx, item := range m.GetResponseSize() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["response_size_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("response_size_stat"))
		if err := fv(ctx, m.GetResponseSizeStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_throughput"]; exists {

		vOpts := append(opts, db.WithValidateField("response_throughput"))
		for idx, item := range m.GetResponseThroughput() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["response_throughput_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("response_throughput_stat"))
		if err := fv(ctx, m.GetResponseThroughputStat(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEPPDFInfoValidator = func() *ValidateAPIEPPDFInfo {
	v := &ValidateAPIEPPDFInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEPPDFInfoValidator() db.Validator {
	return DefaultAPIEPPDFInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpoint) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpoint) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpoint) DeepCopy() *APIEndpoint {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpoint{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpoint) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpoint) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpoint struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpoint) ApiEndpointPathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_endpoint_path")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpoint) MethodsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.HttpMethod)
		return int32(i)
	}
	// ves_io_schema.HttpMethod_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.HttpMethod_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for methods")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.HttpMethod, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for methods")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.HttpMethod)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.HttpMethod, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated methods")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items methods")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpoint) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpoint)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpoint got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_path"]; exists {

		vOpts := append(opts, db.WithValidateField("api_endpoint_path"))
		if err := fv(ctx, m.GetApiEndpointPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["methods"]; exists {
		vOpts := append(opts, db.WithValidateField("methods"))
		if err := fv(ctx, m.GetMethods(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointValidator = func() *ValidateAPIEndpoint {
	v := &ValidateAPIEndpoint{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiEndpointPath := v.ApiEndpointPathValidationRuleHandler
	rulesApiEndpointPath := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.string.max_len":             "1024",
		"ves.io.schema.rules.string.templated_http_path": "true",
	}
	vFn, err = vrhApiEndpointPath(rulesApiEndpointPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpoint.api_endpoint_path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_path"] = vFn

	vrhMethods := v.MethodsValidationRuleHandler
	rulesMethods := map[string]string{
		"ves.io.schema.rules.message.required":                 "true",
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.max_items":               "16",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhMethods(rulesMethods)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpoint.methods: %s", err)
		panic(errMsg)
	}
	v.FldValidators["methods"] = vFn

	return v
}()

func APIEndpointValidator() db.Validator {
	return DefaultAPIEndpointValidator
}

// augmented methods on protoc/std generated struct

func (m *AuthData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AuthData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AuthData) DeepCopy() *AuthData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AuthData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AuthData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AuthData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AuthDataValidator().Validate(ctx, m, opts...)
}

type ValidateAuthData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAuthData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AuthData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AuthData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["insights"]; exists {

		vOpts := append(opts, db.WithValidateField("insights"))
		if err := fv(ctx, m.GetInsights(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schema"]; exists {

		vOpts := append(opts, db.WithValidateField("schema"))
		if err := fv(ctx, m.GetSchema(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAuthDataValidator = func() *ValidateAuthData {
	v := &ValidateAuthData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AuthDataValidator() db.Validator {
	return DefaultAuthDataValidator
}

// augmented methods on protoc/std generated struct

func (m *Authentication) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Authentication) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Authentication) DeepCopy() *Authentication {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Authentication{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Authentication) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Authentication) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AuthenticationValidator().Validate(ctx, m, opts...)
}

type ValidateAuthentication struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAuthentication) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Authentication)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Authentication got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_data_per_definition"]; exists {

		vOpts := append(opts, db.WithValidateField("auth_data_per_definition"))
		for key, value := range m.GetAuthDataPerDefinition() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAuthenticationValidator = func() *ValidateAuthentication {
	v := &ValidateAuthentication{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AuthenticationValidator() db.Validator {
	return DefaultAuthenticationValidator
}

// augmented methods on protoc/std generated struct

func (m *AuthenticationTypeLocPair) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AuthenticationTypeLocPair) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AuthenticationTypeLocPair) DeepCopy() *AuthenticationTypeLocPair {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AuthenticationTypeLocPair{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AuthenticationTypeLocPair) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AuthenticationTypeLocPair) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AuthenticationTypeLocPairValidator().Validate(ctx, m, opts...)
}

type ValidateAuthenticationTypeLocPair struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAuthenticationTypeLocPair) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AuthenticationTypeLocPair)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AuthenticationTypeLocPair got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_type"]; exists {

		vOpts := append(opts, db.WithValidateField("auth_type"))
		if err := fv(ctx, m.GetAuthType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["location"]; exists {

		vOpts := append(opts, db.WithValidateField("location"))
		if err := fv(ctx, m.GetLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAuthenticationTypeLocPairValidator = func() *ValidateAuthenticationTypeLocPair {
	v := &ValidateAuthenticationTypeLocPair{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AuthenticationTypeLocPairValidator() db.Validator {
	return DefaultAuthenticationTypeLocPairValidator
}

// augmented methods on protoc/std generated struct

func (m *BuiltInSensitiveDataType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BuiltInSensitiveDataType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BuiltInSensitiveDataType) DeepCopy() *BuiltInSensitiveDataType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BuiltInSensitiveDataType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BuiltInSensitiveDataType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BuiltInSensitiveDataType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BuiltInSensitiveDataTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBuiltInSensitiveDataType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBuiltInSensitiveDataType) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateBuiltInSensitiveDataType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BuiltInSensitiveDataType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BuiltInSensitiveDataType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBuiltInSensitiveDataTypeValidator = func() *ValidateBuiltInSensitiveDataType {
	v := &ValidateBuiltInSensitiveDataType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BuiltInSensitiveDataType.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func BuiltInSensitiveDataTypeValidator() db.Validator {
	return DefaultBuiltInSensitiveDataTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *BusinessLogicMarkupSetting) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BusinessLogicMarkupSetting) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BusinessLogicMarkupSetting) DeepCopy() *BusinessLogicMarkupSetting {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BusinessLogicMarkupSetting{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BusinessLogicMarkupSetting) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BusinessLogicMarkupSetting) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BusinessLogicMarkupSettingValidator().Validate(ctx, m, opts...)
}

type ValidateBusinessLogicMarkupSetting struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBusinessLogicMarkupSetting) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BusinessLogicMarkupSetting)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BusinessLogicMarkupSetting got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["discovered_api_settings"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered_api_settings"))
		if err := fv(ctx, m.GetDiscoveredApiSettings(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetLearnFromRedirectTraffic().(type) {
	case *BusinessLogicMarkupSetting_Disable:
		if fv, exists := v.FldValidators["learn_from_redirect_traffic.disable"]; exists {
			val := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("learn_from_redirect_traffic"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BusinessLogicMarkupSetting_Enable:
		if fv, exists := v.FldValidators["learn_from_redirect_traffic.enable"]; exists {
			val := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("learn_from_redirect_traffic"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_detection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_detection_rules"))
		if err := fv(ctx, m.GetSensitiveDataDetectionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBusinessLogicMarkupSettingValidator = func() *ValidateBusinessLogicMarkupSetting {
	v := &ValidateBusinessLogicMarkupSetting{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["sensitive_data_detection_rules"] = SensitiveDataDetectionRulesValidator().Validate

	v.FldValidators["discovered_api_settings"] = DiscoveredAPISettingsValidator().Validate

	return v
}()

func BusinessLogicMarkupSettingValidator() db.Validator {
	return DefaultBusinessLogicMarkupSettingValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) FeaturesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for features")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Feature, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FeatureValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for features")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Feature)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Feature, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated features")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items features")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["business_logic_markup_setting"]; exists {

		vOpts := append(opts, db.WithValidateField("business_logic_markup_setting"))
		if err := fv(ctx, m.GetBusinessLogicMarkupSetting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["features"]; exists {
		vOpts := append(opts, db.WithValidateField("features"))
		if err := fv(ctx, m.GetFeatures(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFeatures := v.FeaturesValidationRuleHandler
	rulesFeatures := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFeatures(rulesFeatures)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.features: %s", err)
		panic(errMsg)
	}
	v.FldValidators["features"] = vFn

	v.FldValidators["business_logic_markup_setting"] = BusinessLogicMarkupSettingValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomDataDetectionConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomDataDetectionConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomDataDetectionConfig) DeepCopy() *CustomDataDetectionConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomDataDetectionConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomDataDetectionConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomDataDetectionConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomDataDetectionConfigValidator().Validate(ctx, m, opts...)
}

type ValidateCustomDataDetectionConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomDataDetectionConfig) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCustomDataDetectionConfig) DomainChoiceSpecificDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SpecificDomain, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for specific_domain")
	}
	return oValidatorFn_SpecificDomain, nil
}

func (v *ValidateCustomDataDetectionConfig) PatternChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pattern_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCustomDataDetectionConfig) SectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for section_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCustomDataDetectionConfig) TargetChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for target_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCustomDataDetectionConfig) TargetChoiceBasePathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_BasePath, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for base_path")
	}
	return oValidatorFn_BasePath, nil
}
func (v *ValidateCustomDataDetectionConfig) TargetChoiceApiGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ApiGroup, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_group")
	}
	return oValidatorFn_ApiGroup, nil
}

func (v *ValidateCustomDataDetectionConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomDataDetectionConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomDataDetectionConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *CustomDataDetectionConfig_AnyDomain:
		if fv, exists := v.FldValidators["domain_choice.any_domain"]; exists {
			val := m.GetDomainChoice().(*CustomDataDetectionConfig_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_SpecificDomain:
		if fv, exists := v.FldValidators["domain_choice.specific_domain"]; exists {
			val := m.GetDomainChoice().(*CustomDataDetectionConfig_SpecificDomain).SpecificDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("specific_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["pattern_choice"]; exists {
		val := m.GetPatternChoice()
		vOpts := append(opts,
			db.WithValidateField("pattern_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPatternChoice().(type) {
	case *CustomDataDetectionConfig_KeyPattern:
		if fv, exists := v.FldValidators["pattern_choice.key_pattern"]; exists {
			val := m.GetPatternChoice().(*CustomDataDetectionConfig_KeyPattern).KeyPattern
			vOpts := append(opts,
				db.WithValidateField("pattern_choice"),
				db.WithValidateField("key_pattern"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_ValuePattern:
		if fv, exists := v.FldValidators["pattern_choice.value_pattern"]; exists {
			val := m.GetPatternChoice().(*CustomDataDetectionConfig_ValuePattern).ValuePattern
			vOpts := append(opts,
				db.WithValidateField("pattern_choice"),
				db.WithValidateField("value_pattern"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_KeyValuePattern:
		if fv, exists := v.FldValidators["pattern_choice.key_value_pattern"]; exists {
			val := m.GetPatternChoice().(*CustomDataDetectionConfig_KeyValuePattern).KeyValuePattern
			vOpts := append(opts,
				db.WithValidateField("pattern_choice"),
				db.WithValidateField("key_value_pattern"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["section_choice"]; exists {
		val := m.GetSectionChoice()
		vOpts := append(opts,
			db.WithValidateField("section_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSectionChoice().(type) {
	case *CustomDataDetectionConfig_AllSections:
		if fv, exists := v.FldValidators["section_choice.all_sections"]; exists {
			val := m.GetSectionChoice().(*CustomDataDetectionConfig_AllSections).AllSections
			vOpts := append(opts,
				db.WithValidateField("section_choice"),
				db.WithValidateField("all_sections"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_AllRequestSections:
		if fv, exists := v.FldValidators["section_choice.all_request_sections"]; exists {
			val := m.GetSectionChoice().(*CustomDataDetectionConfig_AllRequestSections).AllRequestSections
			vOpts := append(opts,
				db.WithValidateField("section_choice"),
				db.WithValidateField("all_request_sections"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_AllResponseSections:
		if fv, exists := v.FldValidators["section_choice.all_response_sections"]; exists {
			val := m.GetSectionChoice().(*CustomDataDetectionConfig_AllResponseSections).AllResponseSections
			vOpts := append(opts,
				db.WithValidateField("section_choice"),
				db.WithValidateField("all_response_sections"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_CustomSections:
		if fv, exists := v.FldValidators["section_choice.custom_sections"]; exists {
			val := m.GetSectionChoice().(*CustomDataDetectionConfig_CustomSections).CustomSections
			vOpts := append(opts,
				db.WithValidateField("section_choice"),
				db.WithValidateField("custom_sections"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["target_choice"]; exists {
		val := m.GetTargetChoice()
		vOpts := append(opts,
			db.WithValidateField("target_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTargetChoice().(type) {
	case *CustomDataDetectionConfig_AnyTarget:
		if fv, exists := v.FldValidators["target_choice.any_target"]; exists {
			val := m.GetTargetChoice().(*CustomDataDetectionConfig_AnyTarget).AnyTarget
			vOpts := append(opts,
				db.WithValidateField("target_choice"),
				db.WithValidateField("any_target"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_ApiEndpointTarget:
		if fv, exists := v.FldValidators["target_choice.api_endpoint_target"]; exists {
			val := m.GetTargetChoice().(*CustomDataDetectionConfig_ApiEndpointTarget).ApiEndpointTarget
			vOpts := append(opts,
				db.WithValidateField("target_choice"),
				db.WithValidateField("api_endpoint_target"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_BasePath:
		if fv, exists := v.FldValidators["target_choice.base_path"]; exists {
			val := m.GetTargetChoice().(*CustomDataDetectionConfig_BasePath).BasePath
			vOpts := append(opts,
				db.WithValidateField("target_choice"),
				db.WithValidateField("base_path"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CustomDataDetectionConfig_ApiGroup:
		if fv, exists := v.FldValidators["target_choice.api_group"]; exists {
			val := m.GetTargetChoice().(*CustomDataDetectionConfig_ApiGroup).ApiGroup
			vOpts := append(opts,
				db.WithValidateField("target_choice"),
				db.WithValidateField("api_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomDataDetectionConfigValidator = func() *ValidateCustomDataDetectionConfig {
	v := &ValidateCustomDataDetectionConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomDataDetectionConfig.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	vrhDomainChoiceSpecificDomain := v.DomainChoiceSpecificDomainValidationRuleHandler
	rulesDomainChoiceSpecificDomain := map[string]string{
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.vh_domain": "true",
	}
	vFnMap["domain_choice.specific_domain"], err = vrhDomainChoiceSpecificDomain(rulesDomainChoiceSpecificDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CustomDataDetectionConfig.domain_choice_specific_domain: %s", err)
		panic(errMsg)
	}

	v.FldValidators["domain_choice.specific_domain"] = vFnMap["domain_choice.specific_domain"]

	vrhPatternChoice := v.PatternChoiceValidationRuleHandler
	rulesPatternChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPatternChoice(rulesPatternChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomDataDetectionConfig.pattern_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pattern_choice"] = vFn

	vrhSectionChoice := v.SectionChoiceValidationRuleHandler
	rulesSectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSectionChoice(rulesSectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomDataDetectionConfig.section_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["section_choice"] = vFn

	vrhTargetChoice := v.TargetChoiceValidationRuleHandler
	rulesTargetChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTargetChoice(rulesTargetChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomDataDetectionConfig.target_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["target_choice"] = vFn

	vrhTargetChoiceBasePath := v.TargetChoiceBasePathValidationRuleHandler
	rulesTargetChoiceBasePath := map[string]string{
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFnMap["target_choice.base_path"], err = vrhTargetChoiceBasePath(rulesTargetChoiceBasePath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CustomDataDetectionConfig.target_choice_base_path: %s", err)
		panic(errMsg)
	}
	vrhTargetChoiceApiGroup := v.TargetChoiceApiGroupValidationRuleHandler
	rulesTargetChoiceApiGroup := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFnMap["target_choice.api_group"], err = vrhTargetChoiceApiGroup(rulesTargetChoiceApiGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CustomDataDetectionConfig.target_choice_api_group: %s", err)
		panic(errMsg)
	}

	v.FldValidators["target_choice.base_path"] = vFnMap["target_choice.base_path"]
	v.FldValidators["target_choice.api_group"] = vFnMap["target_choice.api_group"]

	v.FldValidators["pattern_choice.key_pattern"] = KeyPatternValidator().Validate
	v.FldValidators["pattern_choice.value_pattern"] = ValuePatternValidator().Validate
	v.FldValidators["pattern_choice.key_value_pattern"] = KeyValuePatternValidator().Validate

	v.FldValidators["section_choice.custom_sections"] = CustomSectionsValidator().Validate

	v.FldValidators["target_choice.api_endpoint_target"] = APIEndpointValidator().Validate

	return v
}()

func CustomDataDetectionConfigValidator() db.Validator {
	return DefaultCustomDataDetectionConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomSections) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomSections) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomSections) DeepCopy() *CustomSections {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomSections{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomSections) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomSections) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomSectionsValidator().Validate(ctx, m, opts...)
}

type ValidateCustomSections struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomSections) CustomSectionsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.HttpSections)
		return int32(i)
	}
	// ves_io_schema.HttpSections_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.HttpSections_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for custom_sections")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.HttpSections, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for custom_sections")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.HttpSections)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.HttpSections, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated custom_sections")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_sections")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomSections) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomSections)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomSections got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["custom_sections"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_sections"))
		if err := fv(ctx, m.GetCustomSections(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomSectionsValidator = func() *ValidateCustomSections {
	v := &ValidateCustomSections{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCustomSections := v.CustomSectionsValidationRuleHandler
	rulesCustomSections := map[string]string{
		"ves.io.schema.rules.message.required":                 "true",
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCustomSections(rulesCustomSections)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomSections.custom_sections: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_sections"] = vFn

	return v
}()

func CustomSectionsValidator() db.Validator {
	return DefaultCustomSectionsValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomSensitiveDataDetectionRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomSensitiveDataDetectionRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomSensitiveDataDetectionRule) DeepCopy() *CustomSensitiveDataDetectionRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomSensitiveDataDetectionRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomSensitiveDataDetectionRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomSensitiveDataDetectionRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomSensitiveDataDetectionRuleValidator().Validate(ctx, m, opts...)
}

type ValidateCustomSensitiveDataDetectionRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomSensitiveDataDetectionRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomSensitiveDataDetectionRule) SensitiveDataTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for sensitive_data_type")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CustomSensitiveDataTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomSensitiveDataDetectionRule) SensitiveDataDetectionConfigValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for sensitive_data_detection_config")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CustomDataDetectionConfigValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomSensitiveDataDetectionRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomSensitiveDataDetectionRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomSensitiveDataDetectionRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_detection_config"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_detection_config"))
		if err := fv(ctx, m.GetSensitiveDataDetectionConfig(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_type"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_type"))
		if err := fv(ctx, m.GetSensitiveDataType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomSensitiveDataDetectionRuleValidator = func() *ValidateCustomSensitiveDataDetectionRule {
	v := &ValidateCustomSensitiveDataDetectionRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomSensitiveDataDetectionRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhSensitiveDataType := v.SensitiveDataTypeValidationRuleHandler
	rulesSensitiveDataType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSensitiveDataType(rulesSensitiveDataType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomSensitiveDataDetectionRule.sensitive_data_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_type"] = vFn

	vrhSensitiveDataDetectionConfig := v.SensitiveDataDetectionConfigValidationRuleHandler
	rulesSensitiveDataDetectionConfig := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSensitiveDataDetectionConfig(rulesSensitiveDataDetectionConfig)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomSensitiveDataDetectionRule.sensitive_data_detection_config: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_detection_config"] = vFn

	return v
}()

func CustomSensitiveDataDetectionRuleValidator() db.Validator {
	return DefaultCustomSensitiveDataDetectionRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomSensitiveDataType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomSensitiveDataType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomSensitiveDataType) DeepCopy() *CustomSensitiveDataType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomSensitiveDataType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomSensitiveDataType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomSensitiveDataType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomSensitiveDataTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCustomSensitiveDataType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomSensitiveDataType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateCustomSensitiveDataType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomSensitiveDataType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomSensitiveDataType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomSensitiveDataTypeValidator = func() *ValidateCustomSensitiveDataType {
	v := &ValidateCustomSensitiveDataType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.max_len":         "256",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomSensitiveDataType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	return v
}()

func CustomSensitiveDataTypeValidator() db.Validator {
	return DefaultCustomSensitiveDataTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DiscoveredAPISettings) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DiscoveredAPISettings) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DiscoveredAPISettings) DeepCopy() *DiscoveredAPISettings {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DiscoveredAPISettings{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DiscoveredAPISettings) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DiscoveredAPISettings) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DiscoveredAPISettingsValidator().Validate(ctx, m, opts...)
}

type ValidateDiscoveredAPISettings struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDiscoveredAPISettings) PurgeDurationForInactiveDiscoveredApisValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for purge_duration_for_inactive_discovered_apis")
	}

	return validatorFn, nil
}

func (v *ValidateDiscoveredAPISettings) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DiscoveredAPISettings)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DiscoveredAPISettings got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["purge_duration_for_inactive_discovered_apis"]; exists {

		vOpts := append(opts, db.WithValidateField("purge_duration_for_inactive_discovered_apis"))
		if err := fv(ctx, m.GetPurgeDurationForInactiveDiscoveredApis(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDiscoveredAPISettingsValidator = func() *ValidateDiscoveredAPISettings {
	v := &ValidateDiscoveredAPISettings{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPurgeDurationForInactiveDiscoveredApis := v.PurgeDurationForInactiveDiscoveredApisValidationRuleHandler
	rulesPurgeDurationForInactiveDiscoveredApis := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "7",
	}
	vFn, err = vrhPurgeDurationForInactiveDiscoveredApis(rulesPurgeDurationForInactiveDiscoveredApis)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DiscoveredAPISettings.purge_duration_for_inactive_discovered_apis: %s", err)
		panic(errMsg)
	}
	v.FldValidators["purge_duration_for_inactive_discovered_apis"] = vFn

	return v
}()

func DiscoveredAPISettingsValidator() db.Validator {
	return DefaultDiscoveredAPISettingsValidator
}

// augmented methods on protoc/std generated struct

func (m *DiscoveredSchema) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DiscoveredSchema) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DiscoveredSchema) DeepCopy() *DiscoveredSchema {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DiscoveredSchema{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DiscoveredSchema) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DiscoveredSchema) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DiscoveredSchemaValidator().Validate(ctx, m, opts...)
}

type ValidateDiscoveredSchema struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDiscoveredSchema) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DiscoveredSchema)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DiscoveredSchema got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["last_updated_time"]; exists {

		vOpts := append(opts, db.WithValidateField("last_updated_time"))
		if err := fv(ctx, m.GetLastUpdatedTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_schema"]; exists {

		vOpts := append(opts, db.WithValidateField("request_schema"))
		if err := fv(ctx, m.GetRequestSchema(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_schema_per_rsp_code"]; exists {

		vOpts := append(opts, db.WithValidateField("response_schema_per_rsp_code"))
		for key, value := range m.GetResponseSchemaPerRspCode() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDiscoveredSchemaValidator = func() *ValidateDiscoveredSchema {
	v := &ValidateDiscoveredSchema{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DiscoveredSchemaValidator() db.Validator {
	return DefaultDiscoveredSchemaValidator
}

// augmented methods on protoc/std generated struct

func (m *Feature) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Feature) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Feature) DeepCopy() *Feature {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Feature{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Feature) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Feature) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FeatureValidator().Validate(ctx, m, opts...)
}

type ValidateFeature struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFeature) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(FeatureType)
		return int32(i)
	}
	// FeatureType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, FeatureType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateFeature) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Feature)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Feature got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFeatureValidator = func() *ValidateFeature {
	v := &ValidateFeature{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Feature.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	return v
}()

func FeatureValidator() db.Validator {
	return DefaultFeatureValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) FeaturesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for features")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Feature, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FeatureValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for features")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Feature)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Feature, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated features")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items features")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["business_logic_markup_setting"]; exists {

		vOpts := append(opts, db.WithValidateField("business_logic_markup_setting"))
		if err := fv(ctx, m.GetBusinessLogicMarkupSetting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["features"]; exists {
		vOpts := append(opts, db.WithValidateField("features"))
		if err := fv(ctx, m.GetFeatures(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFeatures := v.FeaturesValidationRuleHandler
	rulesFeatures := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFeatures(rulesFeatures)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.features: %s", err)
		panic(errMsg)
	}
	v.FldValidators["features"] = vFn

	v.FldValidators["business_logic_markup_setting"] = BusinessLogicMarkupSettingValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) FeaturesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for features")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Feature, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FeatureValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for features")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Feature)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Feature, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated features")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items features")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["business_logic_markup_setting"]; exists {

		vOpts := append(opts, db.WithValidateField("business_logic_markup_setting"))
		if err := fv(ctx, m.GetBusinessLogicMarkupSetting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["features"]; exists {
		vOpts := append(opts, db.WithValidateField("features"))
		if err := fv(ctx, m.GetFeatures(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFeatures := v.FeaturesValidationRuleHandler
	rulesFeatures := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFeatures(rulesFeatures)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.features: %s", err)
		panic(errMsg)
	}
	v.FldValidators["features"] = vFn

	v.FldValidators["business_logic_markup_setting"] = BusinessLogicMarkupSettingValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *KeyPattern) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *KeyPattern) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *KeyPattern) DeepCopy() *KeyPattern {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &KeyPattern{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *KeyPattern) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *KeyPattern) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return KeyPatternValidator().Validate(ctx, m, opts...)
}

type ValidateKeyPattern struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateKeyPattern) KeyPatternValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for key_pattern")
	}
	return validatorFn, nil
}

func (v *ValidateKeyPattern) KeyPatternExactValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExactValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for exact_value")
	}
	return oValidatorFn_ExactValue, nil
}
func (v *ValidateKeyPattern) KeyPatternRegexValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_RegexValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for regex_value")
	}
	return oValidatorFn_RegexValue, nil
}

func (v *ValidateKeyPattern) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*KeyPattern)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *KeyPattern got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["key_pattern"]; exists {
		val := m.GetKeyPattern()
		vOpts := append(opts,
			db.WithValidateField("key_pattern"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetKeyPattern().(type) {
	case *KeyPattern_ExactValue:
		if fv, exists := v.FldValidators["key_pattern.exact_value"]; exists {
			val := m.GetKeyPattern().(*KeyPattern_ExactValue).ExactValue
			vOpts := append(opts,
				db.WithValidateField("key_pattern"),
				db.WithValidateField("exact_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *KeyPattern_RegexValue:
		if fv, exists := v.FldValidators["key_pattern.regex_value"]; exists {
			val := m.GetKeyPattern().(*KeyPattern_RegexValue).RegexValue
			vOpts := append(opts,
				db.WithValidateField("key_pattern"),
				db.WithValidateField("regex_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultKeyPatternValidator = func() *ValidateKeyPattern {
	v := &ValidateKeyPattern{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhKeyPattern := v.KeyPatternValidationRuleHandler
	rulesKeyPattern := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhKeyPattern(rulesKeyPattern)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for KeyPattern.key_pattern: %s", err)
		panic(errMsg)
	}
	v.FldValidators["key_pattern"] = vFn

	vrhKeyPatternExactValue := v.KeyPatternExactValueValidationRuleHandler
	rulesKeyPatternExactValue := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
		"ves.io.schema.rules.string.not_empty": "true",
	}
	vFnMap["key_pattern.exact_value"], err = vrhKeyPatternExactValue(rulesKeyPatternExactValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field KeyPattern.key_pattern_exact_value: %s", err)
		panic(errMsg)
	}
	vrhKeyPatternRegexValue := v.KeyPatternRegexValueValidationRuleHandler
	rulesKeyPatternRegexValue := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
		"ves.io.schema.rules.string.not_empty": "true",
		"ves.io.schema.rules.string.regex":     "true",
	}
	vFnMap["key_pattern.regex_value"], err = vrhKeyPatternRegexValue(rulesKeyPatternRegexValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field KeyPattern.key_pattern_regex_value: %s", err)
		panic(errMsg)
	}

	v.FldValidators["key_pattern.exact_value"] = vFnMap["key_pattern.exact_value"]
	v.FldValidators["key_pattern.regex_value"] = vFnMap["key_pattern.regex_value"]

	return v
}()

func KeyPatternValidator() db.Validator {
	return DefaultKeyPatternValidator
}

// augmented methods on protoc/std generated struct

func (m *KeyValuePattern) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *KeyValuePattern) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *KeyValuePattern) DeepCopy() *KeyValuePattern {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &KeyValuePattern{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *KeyValuePattern) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *KeyValuePattern) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return KeyValuePatternValidator().Validate(ctx, m, opts...)
}

type ValidateKeyValuePattern struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateKeyValuePattern) KeyPatternValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for key_pattern")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := KeyPatternValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateKeyValuePattern) ValuePatternValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for value_pattern")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ValuePatternValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateKeyValuePattern) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*KeyValuePattern)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *KeyValuePattern got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["key_pattern"]; exists {

		vOpts := append(opts, db.WithValidateField("key_pattern"))
		if err := fv(ctx, m.GetKeyPattern(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value_pattern"]; exists {

		vOpts := append(opts, db.WithValidateField("value_pattern"))
		if err := fv(ctx, m.GetValuePattern(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultKeyValuePatternValidator = func() *ValidateKeyValuePattern {
	v := &ValidateKeyValuePattern{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhKeyPattern := v.KeyPatternValidationRuleHandler
	rulesKeyPattern := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhKeyPattern(rulesKeyPattern)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for KeyValuePattern.key_pattern: %s", err)
		panic(errMsg)
	}
	v.FldValidators["key_pattern"] = vFn

	vrhValuePattern := v.ValuePatternValidationRuleHandler
	rulesValuePattern := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhValuePattern(rulesValuePattern)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for KeyValuePattern.value_pattern: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value_pattern"] = vFn

	return v
}()

func KeyValuePatternValidator() db.Validator {
	return DefaultKeyValuePatternValidator
}

// augmented methods on protoc/std generated struct

func (m *OverrideInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OverrideInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OverrideInfo) DeepCopy() *OverrideInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OverrideInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OverrideInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OverrideInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OverrideInfoValidator().Validate(ctx, m, opts...)
}

type ValidateOverrideInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOverrideInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OverrideInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OverrideInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["component_identifier"]; exists {

		vOpts := append(opts, db.WithValidateField("component_identifier"))
		if err := fv(ctx, m.GetComponentIdentifier(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["set_dynamic"]; exists {

		vOpts := append(opts, db.WithValidateField("set_dynamic"))
		if err := fv(ctx, m.GetSetDynamic(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOverrideInfoValidator = func() *ValidateOverrideInfo {
	v := &ValidateOverrideInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func OverrideInfoValidator() db.Validator {
	return DefaultOverrideInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *PDFSpec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PDFSpec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PDFSpec) DeepCopy() *PDFSpec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PDFSpec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PDFSpec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PDFSpec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PDFSpecValidator().Validate(ctx, m, opts...)
}

type ValidatePDFSpec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePDFSpec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PDFSpec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PDFSpec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["probability"]; exists {

		vOpts := append(opts, db.WithValidateField("probability"))
		if err := fv(ctx, m.GetProbability(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["x"]; exists {

		vOpts := append(opts, db.WithValidateField("x"))
		if err := fv(ctx, m.GetX(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPDFSpecValidator = func() *ValidatePDFSpec {
	v := &ValidatePDFSpec{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func PDFSpecValidator() db.Validator {
	return DefaultPDFSpecValidator
}

// augmented methods on protoc/std generated struct

func (m *PDFStat) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PDFStat) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PDFStat) DeepCopy() *PDFStat {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PDFStat{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PDFStat) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PDFStat) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PDFStatValidator().Validate(ctx, m, opts...)
}

type ValidatePDFStat struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePDFStat) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PDFStat)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PDFStat got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["pdf_95"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_95"))
		if err := fv(ctx, m.GetPdf_95(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pdf_mean"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_mean"))
		if err := fv(ctx, m.GetPdfMean(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPDFStatValidator = func() *ValidatePDFStat {
	v := &ValidatePDFStat{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func PDFStatValidator() db.Validator {
	return DefaultPDFStatValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) FeaturesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for features")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Feature, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FeatureValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for features")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Feature)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Feature, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated features")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items features")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["business_logic_markup_setting"]; exists {

		vOpts := append(opts, db.WithValidateField("business_logic_markup_setting"))
		if err := fv(ctx, m.GetBusinessLogicMarkupSetting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["features"]; exists {
		vOpts := append(opts, db.WithValidateField("features"))
		if err := fv(ctx, m.GetFeatures(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFeatures := v.FeaturesValidationRuleHandler
	rulesFeatures := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFeatures(rulesFeatures)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.features: %s", err)
		panic(errMsg)
	}
	v.FldValidators["features"] = vFn

	v.FldValidators["business_logic_markup_setting"] = BusinessLogicMarkupSettingValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RequestSchema) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RequestSchema) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RequestSchema) DeepCopy() *RequestSchema {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RequestSchema{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RequestSchema) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RequestSchema) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RequestSchemaValidator().Validate(ctx, m, opts...)
}

type ValidateRequestSchema struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRequestSchema) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RequestSchema)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RequestSchema got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["body_per_content_type"]; exists {

		vOpts := append(opts, db.WithValidateField("body_per_content_type"))
		for key, value := range m.GetBodyPerContentType() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cookies"]; exists {

		vOpts := append(opts, db.WithValidateField("cookies"))
		if err := fv(ctx, m.GetCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {

		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_params"]; exists {

		vOpts := append(opts, db.WithValidateField("query_params"))
		if err := fv(ctx, m.GetQueryParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRequestSchemaValidator = func() *ValidateRequestSchema {
	v := &ValidateRequestSchema{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RequestSchemaValidator() db.Validator {
	return DefaultRequestSchemaValidator
}

// augmented methods on protoc/std generated struct

func (m *ResponseSchema) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ResponseSchema) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ResponseSchema) DeepCopy() *ResponseSchema {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ResponseSchema{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ResponseSchema) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ResponseSchema) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ResponseSchemaValidator().Validate(ctx, m, opts...)
}

type ValidateResponseSchema struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateResponseSchema) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ResponseSchema)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ResponseSchema got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["body_per_content_type"]; exists {

		vOpts := append(opts, db.WithValidateField("body_per_content_type"))
		for key, value := range m.GetBodyPerContentType() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {

		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultResponseSchemaValidator = func() *ValidateResponseSchema {
	v := &ValidateResponseSchema{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ResponseSchemaValidator() db.Validator {
	return DefaultResponseSchemaValidator
}

// augmented methods on protoc/std generated struct

func (m *RiskScore) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RiskScore) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RiskScore) DeepCopy() *RiskScore {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RiskScore{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RiskScore) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RiskScore) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RiskScoreValidator().Validate(ctx, m, opts...)
}

type ValidateRiskScore struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRiskScore) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RiskScore)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RiskScore got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["score"]; exists {

		vOpts := append(opts, db.WithValidateField("score"))
		if err := fv(ctx, m.GetScore(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["severity"]; exists {

		vOpts := append(opts, db.WithValidateField("severity"))
		if err := fv(ctx, m.GetSeverity(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRiskScoreValidator = func() *ValidateRiskScore {
	v := &ValidateRiskScore{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RiskScoreValidator() db.Validator {
	return DefaultRiskScoreValidator
}

// augmented methods on protoc/std generated struct

func (m *SchemaStruct) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SchemaStruct) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SchemaStruct) DeepCopy() *SchemaStruct {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SchemaStruct{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SchemaStruct) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SchemaStruct) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SchemaStructValidator().Validate(ctx, m, opts...)
}

type ValidateSchemaStruct struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSchemaStruct) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SchemaStruct)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SchemaStruct got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["examples"]; exists {

		vOpts := append(opts, db.WithValidateField("examples"))
		for idx, item := range m.GetExamples() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["schema"]; exists {

		vOpts := append(opts, db.WithValidateField("schema"))
		if err := fv(ctx, m.GetSchema(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSchemaStructValidator = func() *ValidateSchemaStruct {
	v := &ValidateSchemaStruct{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SchemaStructValidator() db.Validator {
	return DefaultSchemaStructValidator
}

// augmented methods on protoc/std generated struct

func (m *SensitiveData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SensitiveData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SensitiveData) DeepCopy() *SensitiveData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SensitiveData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SensitiveData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SensitiveData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SensitiveDataValidator().Validate(ctx, m, opts...)
}

type ValidateSensitiveData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSensitiveData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SensitiveData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SensitiveData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compliances"]; exists {

		vOpts := append(opts, db.WithValidateField("compliances"))
		for idx, item := range m.GetCompliances() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["examples"]; exists {

		vOpts := append(opts, db.WithValidateField("examples"))
		for idx, item := range m.GetExamples() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["field"]; exists {

		vOpts := append(opts, db.WithValidateField("field"))
		if err := fv(ctx, m.GetField(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_type"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_type"))
		if err := fv(ctx, m.GetRuleType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["section"]; exists {

		vOpts := append(opts, db.WithValidateField("section"))
		if err := fv(ctx, m.GetSection(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_type"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_type"))
		if err := fv(ctx, m.GetSensitiveDataType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSensitiveDataValidator = func() *ValidateSensitiveData {
	v := &ValidateSensitiveData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SensitiveDataValidator() db.Validator {
	return DefaultSensitiveDataValidator
}

// augmented methods on protoc/std generated struct

func (m *SensitiveDataDetectionRules) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SensitiveDataDetectionRules) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SensitiveDataDetectionRules) DeepCopy() *SensitiveDataDetectionRules {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SensitiveDataDetectionRules{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SensitiveDataDetectionRules) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SensitiveDataDetectionRules) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SensitiveDataDetectionRulesValidator().Validate(ctx, m, opts...)
}

type ValidateSensitiveDataDetectionRules struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSensitiveDataDetectionRules) DisabledBuiltInRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for disabled_built_in_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*BuiltInSensitiveDataType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := BuiltInSensitiveDataTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disabled_built_in_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*BuiltInSensitiveDataType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*BuiltInSensitiveDataType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disabled_built_in_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disabled_built_in_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSensitiveDataDetectionRules) CustomSensitiveDataDetectionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for custom_sensitive_data_detection_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*CustomSensitiveDataDetectionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CustomSensitiveDataDetectionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for custom_sensitive_data_detection_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*CustomSensitiveDataDetectionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*CustomSensitiveDataDetectionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated custom_sensitive_data_detection_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_sensitive_data_detection_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSensitiveDataDetectionRules) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SensitiveDataDetectionRules)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SensitiveDataDetectionRules got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["custom_sensitive_data_detection_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_sensitive_data_detection_rules"))
		if err := fv(ctx, m.GetCustomSensitiveDataDetectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_built_in_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("disabled_built_in_rules"))
		if err := fv(ctx, m.GetDisabledBuiltInRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSensitiveDataDetectionRulesValidator = func() *ValidateSensitiveDataDetectionRules {
	v := &ValidateSensitiveDataDetectionRules{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDisabledBuiltInRules := v.DisabledBuiltInRulesValidationRuleHandler
	rulesDisabledBuiltInRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisabledBuiltInRules(rulesDisabledBuiltInRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SensitiveDataDetectionRules.disabled_built_in_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disabled_built_in_rules"] = vFn

	vrhCustomSensitiveDataDetectionRules := v.CustomSensitiveDataDetectionRulesValidationRuleHandler
	rulesCustomSensitiveDataDetectionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhCustomSensitiveDataDetectionRules(rulesCustomSensitiveDataDetectionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SensitiveDataDetectionRules.custom_sensitive_data_detection_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_sensitive_data_detection_rules"] = vFn

	return v
}()

func SensitiveDataDetectionRulesValidator() db.Validator {
	return DefaultSensitiveDataDetectionRulesValidator
}

// augmented methods on protoc/std generated struct

func (m *ValuePattern) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValuePattern) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ValuePattern) DeepCopy() *ValuePattern {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValuePattern{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValuePattern) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValuePattern) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValuePatternValidator().Validate(ctx, m, opts...)
}

type ValidateValuePattern struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValuePattern) ValuePatternValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for value_pattern")
	}
	return validatorFn, nil
}

func (v *ValidateValuePattern) ValuePatternExactValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExactValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for exact_value")
	}
	return oValidatorFn_ExactValue, nil
}
func (v *ValidateValuePattern) ValuePatternRegexValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_RegexValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for regex_value")
	}
	return oValidatorFn_RegexValue, nil
}

func (v *ValidateValuePattern) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValuePattern)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValuePattern got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["value_pattern"]; exists {
		val := m.GetValuePattern()
		vOpts := append(opts,
			db.WithValidateField("value_pattern"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetValuePattern().(type) {
	case *ValuePattern_ExactValue:
		if fv, exists := v.FldValidators["value_pattern.exact_value"]; exists {
			val := m.GetValuePattern().(*ValuePattern_ExactValue).ExactValue
			vOpts := append(opts,
				db.WithValidateField("value_pattern"),
				db.WithValidateField("exact_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ValuePattern_RegexValue:
		if fv, exists := v.FldValidators["value_pattern.regex_value"]; exists {
			val := m.GetValuePattern().(*ValuePattern_RegexValue).RegexValue
			vOpts := append(opts,
				db.WithValidateField("value_pattern"),
				db.WithValidateField("regex_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValuePatternValidator = func() *ValidateValuePattern {
	v := &ValidateValuePattern{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhValuePattern := v.ValuePatternValidationRuleHandler
	rulesValuePattern := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhValuePattern(rulesValuePattern)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ValuePattern.value_pattern: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value_pattern"] = vFn

	vrhValuePatternExactValue := v.ValuePatternExactValueValidationRuleHandler
	rulesValuePatternExactValue := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
		"ves.io.schema.rules.string.not_empty": "true",
	}
	vFnMap["value_pattern.exact_value"], err = vrhValuePatternExactValue(rulesValuePatternExactValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ValuePattern.value_pattern_exact_value: %s", err)
		panic(errMsg)
	}
	vrhValuePatternRegexValue := v.ValuePatternRegexValueValidationRuleHandler
	rulesValuePatternRegexValue := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
		"ves.io.schema.rules.string.not_empty": "true",
		"ves.io.schema.rules.string.regex":     "true",
	}
	vFnMap["value_pattern.regex_value"], err = vrhValuePatternRegexValue(rulesValuePatternRegexValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ValuePattern.value_pattern_regex_value: %s", err)
		panic(errMsg)
	}

	v.FldValidators["value_pattern.exact_value"] = vFnMap["value_pattern.exact_value"]
	v.FldValidators["value_pattern.regex_value"] = vFnMap["value_pattern.regex_value"]

	return v
}()

func ValuePatternValidator() db.Validator {
	return DefaultValuePatternValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BusinessLogicMarkupSetting = f.GetBusinessLogicMarkupSetting()
	m.Features = f.GetFeatures()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BusinessLogicMarkupSetting = m1.BusinessLogicMarkupSetting
	f.Features = m1.Features
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BusinessLogicMarkupSetting = f.GetBusinessLogicMarkupSetting()
	m.Features = f.GetFeatures()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BusinessLogicMarkupSetting = m1.BusinessLogicMarkupSetting
	f.Features = m1.Features
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BusinessLogicMarkupSetting = f.GetBusinessLogicMarkupSetting()
	m.Features = f.GetFeatures()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BusinessLogicMarkupSetting = m1.BusinessLogicMarkupSetting
	f.Features = m1.Features
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

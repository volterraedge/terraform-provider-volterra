// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/app_type/types.proto

package app_type

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeatureType
//
// x-displayName: "AI/ML Features"
// Enumeration for AI/ML features supported
type FeatureType int32

const (
	// x-displayName: "API Discovery"
	// API Discovery enables generation of model for various API interactions between services of App type.
	BUSINESS_LOGIC_MARKUP FeatureType = 0
	// x-displayName: "DDoS Detection"
	// Enable analysis of timeseries for various metric collected like requests, errors, latency etc.
	TIMESERIES_ANOMALY_DETECTION FeatureType = 1
	// x-displayName: "Per API Request Analysis"
	// Enable anomaly detection per API request, i.e. the probability density function (PDF) charts generation for API endpoints
	PER_REQ_ANOMALY_DETECTION FeatureType = 2
	// x-displayName: "Malicious User Detection"
	// Enable user behavior analysis
	USER_BEHAVIOR_ANALYSIS FeatureType = 3
)

var FeatureType_name = map[int32]string{
	0: "BUSINESS_LOGIC_MARKUP",
	1: "TIMESERIES_ANOMALY_DETECTION",
	2: "PER_REQ_ANOMALY_DETECTION",
	3: "USER_BEHAVIOR_ANALYSIS",
}

var FeatureType_value = map[string]int32{
	"BUSINESS_LOGIC_MARKUP":        0,
	"TIMESERIES_ANOMALY_DETECTION": 1,
	"PER_REQ_ANOMALY_DETECTION":    2,
	"USER_BEHAVIOR_ANALYSIS":       3,
}

func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{0}
}

// ApiEndpointInfoRequest
//
// x-displayName: "API Endpoint Info Request"
// This is the various forms that can be requested to be sent in the ApiEndpointInfoRequest
type ApiEndpointInfoRequest int32

const (
	// x-displayName: "API Endpoint Info None"
	// API ENDPOINT INFO NONE option is used to disable any additional info request per api endpoint response
	API_ENDPOINT_INFO_NONE ApiEndpointInfoRequest = 0
	// x-displayName: "API Endpoint Info PDF Sparklines"
	// API ENDPOINT INFO PDF SPARKLINES option is used to enable pdf sparkline info along with the api endpoint response
	API_ENDPOINT_INFO_PDF_SPARKLINES ApiEndpointInfoRequest = 1
)

var ApiEndpointInfoRequest_name = map[int32]string{
	0: "API_ENDPOINT_INFO_NONE",
	1: "API_ENDPOINT_INFO_PDF_SPARKLINES",
}

var ApiEndpointInfoRequest_value = map[string]int32{
	"API_ENDPOINT_INFO_NONE":           0,
	"API_ENDPOINT_INFO_PDF_SPARKLINES": 1,
}

func (ApiEndpointInfoRequest) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{1}
}

// APIType
//
// x-displayName: "API Type"
// List of possible types of api that can be discovered for an APIEP.
type APIType int32

const (
	// x-displayName: "Unknown"
	// The API Type detected as unknown.
	API_TYPE_UNKNOWN APIType = 0
	// x-displayName: "GraphQL"
	// The API Type detected as GraphQL.
	API_TYPE_GRAPHQL APIType = 1
	// x-displayName: "REST"
	// The API Type detected as REST.
	API_TYPE_REST APIType = 2
	// x-displayName: "gRPC"
	// The API Type detected as gRPC.
	API_TYPE_GRPC APIType = 3
)

var APIType_name = map[int32]string{
	0: "API_TYPE_UNKNOWN",
	1: "API_TYPE_GRAPHQL",
	2: "API_TYPE_REST",
	3: "API_TYPE_GRPC",
}

var APIType_value = map[string]int32{
	"API_TYPE_UNKNOWN": 0,
	"API_TYPE_GRAPHQL": 1,
	"API_TYPE_REST":    2,
	"API_TYPE_GRPC":    3,
}

func (APIType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{2}
}

// SensitiveDataType
//
// x-displayName: "Sensitive Data Type"
// List of possible types of sensitive data that can be discovered for an APIEP.
type SensitiveDataType int32 // Deprecated: Do not use.
const (
	// x-displayName: "Credit Card Number"
	// The Sensitive Data detected as credit card number.
	SENSITIVE_DATA_TYPE_CCN SensitiveDataType = 0
	// x-displayName: "Social Security Number"
	// The sensitive data detected as social security number.
	SENSITIVE_DATA_TYPE_SSN SensitiveDataType = 1
	// x-displayName: "IP"
	// The sensitive data detected as IP address.
	SENSITIVE_DATA_TYPE_IP SensitiveDataType = 2
	// x-displayName: "Email"
	// The sensitive data detected as email address.
	SENSITIVE_DATA_TYPE_EMAIL SensitiveDataType = 3
	// x-displayName: "Phone Number"
	// The sensitive data detected as phone number.
	SENSITIVE_DATA_TYPE_PHONE SensitiveDataType = 4
	// x-displayName: "Credentials"
	// The sensitive data detected as credentials info(e.g password, username etc).
	SENSITIVE_DATA_TYPE_CREDENTIALS SensitiveDataType = 5
	// x-displayName: "Information Leakage"
	// The sensitive data detected as information leakage.
	SENSITIVE_DATA_TYPE_APP_INFO_LEAKAGE SensitiveDataType = 6
	// x-displayName: "Masked PII"
	// The sensitive data detected as masked PII (CCN, SSN)
	SENSITIVE_DATA_TYPE_MASKED_PII SensitiveDataType = 7
	// x-displayName: "Location"
	// The sensitive data detected as Location.
	SENSITIVE_DATA_TYPE_LOCATION SensitiveDataType = 8
)

var SensitiveDataType_name = map[int32]string{
	0: "SENSITIVE_DATA_TYPE_CCN",
	1: "SENSITIVE_DATA_TYPE_SSN",
	2: "SENSITIVE_DATA_TYPE_IP",
	3: "SENSITIVE_DATA_TYPE_EMAIL",
	4: "SENSITIVE_DATA_TYPE_PHONE",
	5: "SENSITIVE_DATA_TYPE_CREDENTIALS",
	6: "SENSITIVE_DATA_TYPE_APP_INFO_LEAKAGE",
	7: "SENSITIVE_DATA_TYPE_MASKED_PII",
	8: "SENSITIVE_DATA_TYPE_LOCATION",
}

var SensitiveDataType_value = map[string]int32{
	"SENSITIVE_DATA_TYPE_CCN":              0,
	"SENSITIVE_DATA_TYPE_SSN":              1,
	"SENSITIVE_DATA_TYPE_IP":               2,
	"SENSITIVE_DATA_TYPE_EMAIL":            3,
	"SENSITIVE_DATA_TYPE_PHONE":            4,
	"SENSITIVE_DATA_TYPE_CREDENTIALS":      5,
	"SENSITIVE_DATA_TYPE_APP_INFO_LEAKAGE": 6,
	"SENSITIVE_DATA_TYPE_MASKED_PII":       7,
	"SENSITIVE_DATA_TYPE_LOCATION":         8,
}

func (SensitiveDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{3}
}

// APIEP PII Level
//
// x-displayName: API EP PII Level
// API Endpoint's PII Level.
type APIEPPIILevel int32

const (
	// x-displayName: API EP PII Level
	// No PII data detected for the given API Endpoint.
	APIEP_PII_NOT_DETECTED APIEPPIILevel = 0
	// x-displayName: API EP PII Level Detected
	// Detected PII data for a given API Endpoint.
	APIEP_PII_DETECTED APIEPPIILevel = 1
)

var APIEPPIILevel_name = map[int32]string{
	0: "APIEP_PII_NOT_DETECTED",
	1: "APIEP_PII_DETECTED",
}

var APIEPPIILevel_value = map[string]int32{
	"APIEP_PII_NOT_DETECTED": 0,
	"APIEP_PII_DETECTED":     1,
}

func (APIEPPIILevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{4}
}

// APIEP Security Risk
//
// x-displayName: "API Endpoint Security Risk"
// Signifies API Endpoint Security Risk Level
type APIEPSecurityRisk int32

const (
	// x-displayName: "APIEP Security Risk"
	// Security risk is not detected (for example, when no traffic).
	APIEP_SEC_RISK_NONE APIEPSecurityRisk = 0
	// x-displayName: "APIEP Has Low Security Risk"
	// API Endpoint has low security risk.
	APIEP_SEC_RISK_LOW APIEPSecurityRisk = 1
	// x-displayName: "APIEP Has Medium Security Risk"
	// API Endpoint has medium security risk.
	APIEP_SEC_RISK_MED APIEPSecurityRisk = 2
	// x-displayName: "APIEP Has High Security Risk"
	// API Endpoint has high security risk.
	APIEP_SEC_RISK_HIGH APIEPSecurityRisk = 3
	// x-displayName: "APIEP Has Critical Security Risk"
	// API Endpoint has critical security risk.
	APIEP_SEC_RISK_CRITICAL APIEPSecurityRisk = 4
)

var APIEPSecurityRisk_name = map[int32]string{
	0: "APIEP_SEC_RISK_NONE",
	1: "APIEP_SEC_RISK_LOW",
	2: "APIEP_SEC_RISK_MED",
	3: "APIEP_SEC_RISK_HIGH",
	4: "APIEP_SEC_RISK_CRITICAL",
}

var APIEPSecurityRisk_value = map[string]int32{
	"APIEP_SEC_RISK_NONE":     0,
	"APIEP_SEC_RISK_LOW":      1,
	"APIEP_SEC_RISK_MED":      2,
	"APIEP_SEC_RISK_HIGH":     3,
	"APIEP_SEC_RISK_CRITICAL": 4,
}

func (APIEPSecurityRisk) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{5}
}

// APIEP Category
//
// x-displayName: "Category of the API Endpoint"
// The category of an API endpoint.
type APIEPCategory int32

const (
	// x-displayName: "Discovered API Endpoint"
	// Discovered API Endpoint.
	APIEP_CATEGORY_DISCOVERED APIEPCategory = 0
	// x-displayName: "API Endpoint from Swagger spec"
	// The API Endpoint is imported from user swagger.
	APIEP_CATEGORY_SWAGGER APIEPCategory = 1
	// x-displayName: "API Endpoint is in the API Inventory"
	// The API Endpoint is present at the API Inventory.
	APIEP_CATEGORY_INVENTORY APIEPCategory = 2
	// x-displayName: "API Endpoint Origin Discovered"
	// The API Endpoint is considered as part of Shadow API.
	APIEP_CATEGORY_SHADOW APIEPCategory = 3
	// x-displayName: "Deprecated API Endpoint"
	// Deprecated API Endpoint.
	APIEP_CATEGORY_DEPRECATED APIEPCategory = 4
	// x-displayName: "Non-API Endpoint"
	// Non-API Endpoint.
	APIEP_CATEGORY_NON_API APIEPCategory = 5
)

var APIEPCategory_name = map[int32]string{
	0: "APIEP_CATEGORY_DISCOVERED",
	1: "APIEP_CATEGORY_SWAGGER",
	2: "APIEP_CATEGORY_INVENTORY",
	3: "APIEP_CATEGORY_SHADOW",
	4: "APIEP_CATEGORY_DEPRECATED",
	5: "APIEP_CATEGORY_NON_API",
}

var APIEPCategory_value = map[string]int32{
	"APIEP_CATEGORY_DISCOVERED": 0,
	"APIEP_CATEGORY_SWAGGER":    1,
	"APIEP_CATEGORY_INVENTORY":  2,
	"APIEP_CATEGORY_SHADOW":     3,
	"APIEP_CATEGORY_DEPRECATED": 4,
	"APIEP_CATEGORY_NON_API":    5,
}

func (APIEPCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{6}
}

// APIEP Authentication State
//
// x-displayName: "API EP Authentication State"
// API Endpoint's Authentication State.
type AuthenticationState int32

const (
	// x-displayName: "Unknown Authentication state"
	// The API Endpoint authentication state is unknown.
	AUTH_STATE_UNKNOWN AuthenticationState = 0
	// x-displayName: "Authenticated Endpoint"
	// The API Endpoint is authenticated
	AUTH_STATE_AUTHENTICATED AuthenticationState = 1
	// x-displayName: "Unauthenticated Endpoint"
	// The API Endpoint is unauthenticated
	AUTH_STATE_UNAUTHENTICATED AuthenticationState = 2
)

var AuthenticationState_name = map[int32]string{
	0: "AUTH_STATE_UNKNOWN",
	1: "AUTH_STATE_AUTHENTICATED",
	2: "AUTH_STATE_UNAUTHENTICATED",
}

var AuthenticationState_value = map[string]int32{
	"AUTH_STATE_UNKNOWN":         0,
	"AUTH_STATE_AUTHENTICATED":   1,
	"AUTH_STATE_UNAUTHENTICATED": 2,
}

func (AuthenticationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{7}
}

// APIEP Authentication Type
//
// x-displayName: API EP Authentication Type
// API Endpoint's Authentication Type.
type AuthenticationType int32

const (
	// x-displayName: "Basic authentication type"
	// The API Endpoint authentication type is Basic.
	AUTH_TYPE_BASIC AuthenticationType = 0
	// x-displayName: "Bearer authentication type"
	// The API Endpoint authentication type is Bearer.
	AUTH_TYPE_BEARER AuthenticationType = 1
	// x-displayName: "JWT authentication type"
	// The API Endpoint authentication type is JWT.
	AUTH_TYPE_JWT AuthenticationType = 2
	// x-displayName: "API Key authentication type"
	// The API Endpoint authentication type is API Key.
	AUTH_TYPE_API_KEY AuthenticationType = 3
	// x-displayName: "OAuth 2.0 authentication type"
	// The API Endpoint authentication type is OAuth 2.0.
	AUTH_TYPE_OAUTH2 AuthenticationType = 4
	// x-displayName: "OpenID Connect Discovery authentication type"
	// The API Endpoint authentication type is OpenID Connect Discovery.
	AUTH_TYPE_OPENID AuthenticationType = 5
	// x-displayName: "HTTP authentication type"
	// The API Endpoint authentication type is HTTP.
	AUTH_TYPE_HTTP AuthenticationType = 6
	// x-displayName: "OAuth 1.0 authentication type"
	// The API Endpoint authentication type is OAuth 1.0.
	AUTH_TYPE_OAUTH1 AuthenticationType = 7
	// x-displayName: "Digest authentication type"
	// The API Endpoint authentication type is Digest.
	AUTH_TYPE_DIGEST AuthenticationType = 8
	// x-displayName: "Negotiate authentication type"
	// The API Endpoint authentication type is Negotiate.
	AUTH_TYPE_NEGOTIATE AuthenticationType = 9
)

var AuthenticationType_name = map[int32]string{
	0: "AUTH_TYPE_BASIC",
	1: "AUTH_TYPE_BEARER",
	2: "AUTH_TYPE_JWT",
	3: "AUTH_TYPE_API_KEY",
	4: "AUTH_TYPE_OAUTH2",
	5: "AUTH_TYPE_OPENID",
	6: "AUTH_TYPE_HTTP",
	7: "AUTH_TYPE_OAUTH1",
	8: "AUTH_TYPE_DIGEST",
	9: "AUTH_TYPE_NEGOTIATE",
}

var AuthenticationType_value = map[string]int32{
	"AUTH_TYPE_BASIC":     0,
	"AUTH_TYPE_BEARER":    1,
	"AUTH_TYPE_JWT":       2,
	"AUTH_TYPE_API_KEY":   3,
	"AUTH_TYPE_OAUTH2":    4,
	"AUTH_TYPE_OPENID":    5,
	"AUTH_TYPE_HTTP":      6,
	"AUTH_TYPE_OAUTH1":    7,
	"AUTH_TYPE_DIGEST":    8,
	"AUTH_TYPE_NEGOTIATE": 9,
}

func (AuthenticationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{8}
}

// APIEP Authentication Location
//
// x-displayName: API EP Authentication Location
// API Endpoint's Authentication Location.
type AuthenticationLocation int32

const (
	// x-displayName: "Header"
	// The API Endpoint authentication location is header.
	AUTH_LOCATION_HEADER AuthenticationLocation = 0
	// x-displayName: "Query"
	// The API Endpoint authentication location is query parameter.
	AUTH_LOCATION_QUERY AuthenticationLocation = 1
	// x-displayName: "Body"
	// The API Endpoint authentication location is request body.
	AUTH_LOCATION_BODY AuthenticationLocation = 2
	// x-displayName: "Cookie"
	// The API Endpoint authentication location is cookie.
	AUTH_LOCATION_COOKIE AuthenticationLocation = 3
)

var AuthenticationLocation_name = map[int32]string{
	0: "AUTH_LOCATION_HEADER",
	1: "AUTH_LOCATION_QUERY",
	2: "AUTH_LOCATION_BODY",
	3: "AUTH_LOCATION_COOKIE",
}

var AuthenticationLocation_value = map[string]int32{
	"AUTH_LOCATION_HEADER": 0,
	"AUTH_LOCATION_QUERY":  1,
	"AUTH_LOCATION_BODY":   2,
	"AUTH_LOCATION_COOKIE": 3,
}

func (AuthenticationLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{9}
}

// sensitive_data_detection_rule_type
//
// x-displayName: "Sensitive Data Detection Rule Type"
// Sensitive Data Detection Rule Type
type SensitiveDataDetectionRuleType int32

const (
	// built_in
	//
	// x-displayName: "Built-in"
	// Built in rule type
	RULE_TYPE_BUILT_IN SensitiveDataDetectionRuleType = 0
	// custom
	//
	// x-displayName: "Custom"
	// Custom rule type
	RULE_TYPE_CUSTOM SensitiveDataDetectionRuleType = 1
)

var SensitiveDataDetectionRuleType_name = map[int32]string{
	0: "RULE_TYPE_BUILT_IN",
	1: "RULE_TYPE_CUSTOM",
}

var SensitiveDataDetectionRuleType_value = map[string]int32{
	"RULE_TYPE_BUILT_IN": 0,
	"RULE_TYPE_CUSTOM":   1,
}

func (SensitiveDataDetectionRuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{10}
}

// Feature type container
//
// x-displayName: "Features"
// List of features that are to be enabled for this apptype. FeatureType enum lists
// the features available.
type Feature struct {
	// Enable type of Feature
	//
	// x-required
	// x-displayName: "AI/ML Feature Type"
	// Feature type to be enabled
	Type FeatureType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.app_type.FeatureType" json:"type,omitempty"`
}

func (m *Feature) Reset()      { *m = Feature{} }
func (*Feature) ProtoMessage() {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{0}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return m.Size()
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetType() FeatureType {
	if m != nil {
		return m.Type
	}
	return BUSINESS_LOGIC_MARKUP
}

// API Discovery Settings
//
// x-displayName: "API Discovery Settings"
// Settings specifying how API Discovery will be performed
type BusinessLogicMarkupSetting struct {
	// Include or Exclude data in machine learning from traffic with redirect response in API Discovery
	//
	// x-displayName: "Learn from Traffic with Redirect Response"
	// By default, API Discovery only learns API Endpoints and patterns from traffic with response code 2xx
	// On enabling this, the AI engine will learn API Endpoints from traffic with response code 3xx in addition to 2xx
	//
	// Types that are valid to be assigned to LearnFromRedirectTraffic:
	//	*BusinessLogicMarkupSetting_Disable
	//	*BusinessLogicMarkupSetting_Enable
	LearnFromRedirectTraffic isBusinessLogicMarkupSetting_LearnFromRedirectTraffic `protobuf_oneof:"learn_from_redirect_traffic"`
	// sensitive data rules
	//
	// x-displayName: "Sensitive Data Detection Rules"
	// Rule to detect sensitive data in requests and/or response sections.
	SensitiveDataDetectionRules *SensitiveDataDetectionRules `protobuf:"bytes,4,opt,name=sensitive_data_detection_rules,json=sensitiveDataDetectionRules,proto3" json:"sensitive_data_detection_rules,omitempty"`
	// Discovered API Settings
	//
	// x-displayName: "Discovered API Settings"
	DiscoveredApiSettings *DiscoveredAPISettings `protobuf:"bytes,5,opt,name=discovered_api_settings,json=discoveredApiSettings,proto3" json:"discovered_api_settings,omitempty"`
}

func (m *BusinessLogicMarkupSetting) Reset()      { *m = BusinessLogicMarkupSetting{} }
func (*BusinessLogicMarkupSetting) ProtoMessage() {}
func (*BusinessLogicMarkupSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{1}
}
func (m *BusinessLogicMarkupSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessLogicMarkupSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BusinessLogicMarkupSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessLogicMarkupSetting.Merge(m, src)
}
func (m *BusinessLogicMarkupSetting) XXX_Size() int {
	return m.Size()
}
func (m *BusinessLogicMarkupSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessLogicMarkupSetting.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessLogicMarkupSetting proto.InternalMessageInfo

type isBusinessLogicMarkupSetting_LearnFromRedirectTraffic interface {
	isBusinessLogicMarkupSetting_LearnFromRedirectTraffic()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BusinessLogicMarkupSetting_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,1,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}
type BusinessLogicMarkupSetting_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}

func (*BusinessLogicMarkupSetting_Disable) isBusinessLogicMarkupSetting_LearnFromRedirectTraffic() {}
func (*BusinessLogicMarkupSetting_Enable) isBusinessLogicMarkupSetting_LearnFromRedirectTraffic()  {}

func (m *BusinessLogicMarkupSetting) GetLearnFromRedirectTraffic() isBusinessLogicMarkupSetting_LearnFromRedirectTraffic {
	if m != nil {
		return m.LearnFromRedirectTraffic
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetDisable() *schema.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Disable); ok {
		return x.Disable
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetEnable() *schema.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Enable); ok {
		return x.Enable
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetSensitiveDataDetectionRules() *SensitiveDataDetectionRules {
	if m != nil {
		return m.SensitiveDataDetectionRules
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetDiscoveredApiSettings() *DiscoveredAPISettings {
	if m != nil {
		return m.DiscoveredApiSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BusinessLogicMarkupSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BusinessLogicMarkupSetting_Disable)(nil),
		(*BusinessLogicMarkupSetting_Enable)(nil),
	}
}

// App type Configuration specification
//
// x-displayName: "App Type Spec"
type GlobalSpecType struct {
	// Features
	//
	// x-displayName: "Features"
	// List of various AI/ML features enabled
	Features []*Feature `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	// API Discovery Settings
	//
	// x-displayName: "API Discovery Settings"
	// Setting specifying how API Discovery will be performed
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *GlobalSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Create App type
//
// x-displayName: "Create App Type"
// Create App type will create the configuration in namespace metadata.namespace
type CreateSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *CreateSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Replace App type
//
// x-displayName: "Replace App Type"
// Update the configuration by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write.
type ReplaceSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ReplaceSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Get App type
//
// x-displayName: "Get App Type"
// Get App type will read the configuration from namespace metadata.namespace
type GetSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *GetSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// API endpoint dynamic example
//
// x-displayName: "Expanded API Endpoints"
// List of Examples of expanded URL components for API endpoints that are collapsed with a dynamic component that is identified automatically
type APIEPDynExample struct {
	// Dynamic component
	//
	// x-displayName: "Dynamic Component"
	// x-example: "/api/v1/user_id/DYN"
	// Dynamic component used to collapse sample URLs given in Expanded URLs
	ComponentIdentifier string `protobuf:"bytes,1,opt,name=component_identifier,json=componentIdentifier,proto3" json:"component_identifier,omitempty"`
	// List of expanded URLs
	//
	// x-displayName: "Expanded URL(s)"
	// x-example: "[d0161a1e-044e-427b-a806-3bad9eac97fc, a74eb844-6d91-474c-9874-f19fa3983f4d]"
	// List of sample URL(s) that are collapsed
	ComponentExamples []string `protobuf:"bytes,2,rep,name=component_examples,json=componentExamples,proto3" json:"component_examples,omitempty"`
}

func (m *APIEPDynExample) Reset()      { *m = APIEPDynExample{} }
func (*APIEPDynExample) ProtoMessage() {}
func (*APIEPDynExample) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{6}
}
func (m *APIEPDynExample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEPDynExample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEPDynExample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEPDynExample.Merge(m, src)
}
func (m *APIEPDynExample) XXX_Size() int {
	return m.Size()
}
func (m *APIEPDynExample) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEPDynExample.DiscardUnknown(m)
}

var xxx_messageInfo_APIEPDynExample proto.InternalMessageInfo

func (m *APIEPDynExample) GetComponentIdentifier() string {
	if m != nil {
		return m.ComponentIdentifier
	}
	return ""
}

func (m *APIEPDynExample) GetComponentExamples() []string {
	if m != nil {
		return m.ComponentExamples
	}
	return nil
}

// Identified API
//
// x-displayName: "API Endpoint Info"
// Information about automatically identified API endpoint
// Each identified API endpoint has a CollapsedURL and Method.
// CollapsedURL is created by replacing dynamic components in the URL, if any, with the keyword DYN.
// These dynamic components are automatically identified.
// Additionally, any API endpoint that has a collapsedURL with automatically identified DYN components,
// will also have DYN-Examples which show a few examples of the original values of the components that were determined to be DYN.
type APIEPInfo struct {
	// Identified API
	//
	// x-displayName: "API endpoint URL"
	// x-example: "/api/v1/user_id/DYN/vehicle_id/DYN"
	// URL for automatically identified API
	CollapsedUrl string `protobuf:"bytes,2,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// HTTP method
	//
	// x-displayName: "HTTP Method"
	// x-example: "GET"
	// HTTP method for the API.
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// Expanded URL(s)
	//
	// x-displayName: "Expanded URL(s)"
	// x-example: "{component_identifier: api/v1/user_id/DYN,component_examples: [cmenomo007]}"
	// For example -
	// {"dyn_examples": [
	//  {
	//    "component_identifier": "api/v1/user_id/DYN",
	//    "component_examples": [
	//      "cmenomo007",
	//      "marcusaurelius"
	//      "artattacksince1947",
	//      "johndoe83",
	//    ]
	//  },
	//  {
	//    "component_identifier": "api/v1/user_id/DYN/vehicle_id/DYN",
	//    "component_examples": [
	//      "JN1CV6AR3AM458367",
	//      "1GBCS10AXP2917522",
	//      "JM1DE1KY9D0155647",
	//      "JN1CA31D5YT533780"
	//    ]
	//  }
	// ]}
	// List  of sample URL(s) that are collapsed and dynamic components to collapse them
	DynExamples []*APIEPDynExample `protobuf:"bytes,4,rep,name=dyn_examples,json=dynExamples,proto3" json:"dyn_examples,omitempty"`
	// Probability Density Function
	//
	// x-displayName: "PDF(Value)"
	// Metrics supported currently are request_size response_size latency_with_data, latency_no_data, request_rate, error_rate, response_throughput.
	// PDF is calculated for each combination of (Tenant, App type, API endpoint).
	// API endpoint is determined from automatically identified API (collapsed_url) and method.
	PdfInfo *APIEPPDFInfo `protobuf:"bytes,5,opt,name=pdf_info,json=pdfInfo,proto3" json:"pdf_info,omitempty"`
	// Request percentage
	//
	// x-displayName: "Request Percentage"
	// x-example: "78.5789"
	// Percentage of requests that were directed to this API Endpoint
	RequestPercentage float32 `protobuf:"fixed32,6,opt,name=request_percentage,json=requestPercentage,proto3" json:"request_percentage,omitempty"`
	// Has Learnt Schema
	//
	// x-displayName: "Has Learnt Schema"
	// x-example: true
	//Has Learnt Schema flag for request API endpoint.
	HasLearntSchema bool `protobuf:"varint,7,opt,name=has_learnt_schema,json=hasLearntSchema,proto3" json:"has_learnt_schema,omitempty"`
	// Category
	//
	// x-displayName: "Category"
	// x-example: APIEP_CATEGORY_DISCOVERED, APIEP_CATEGORY_INVENTORY
	// The category of the API Endpoint relative to API Inventory.
	Category []APIEPCategory `protobuf:"varint,8,rep,packed,name=category,proto3,enum=ves.io.schema.app_type.APIEPCategory" json:"category,omitempty"`
	// base_path
	//
	// x-displayName: "Base Path"
	// x-example: "/v1"
	// The base path for this Endpoint.
	BasePath string `protobuf:"bytes,9,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// pii_level
	//
	// x-displayName: "PII Level"
	// x-example: APIEP_PII_NOT_DETECTED, APIEP_PII_DETECTED
	// Signifies if the pii data is detected.
	PiiLevel APIEPPIILevel `protobuf:"varint,10,opt,name=pii_level,json=piiLevel,proto3,enum=ves.io.schema.app_type.APIEPPIILevel" json:"pii_level,omitempty"`
	// security_risk
	//
	// x-displayName: "Security Risk Level"
	// x-example: APIEP_SEC_RISK_LOW, APIEP_SEC_RISK_MED, APIEP_SEC_RISK_HIGH
	// Signifies api endpoint security risk level.
	SecurityRisk APIEPSecurityRisk `protobuf:"varint,11,opt,name=security_risk,json=securityRisk,proto3,enum=ves.io.schema.app_type.APIEPSecurityRisk" json:"security_risk,omitempty"`
	// access_discovery_time
	//
	// x-displayName: "Access Discovery Time"
	// access_discovery_time is the time when the API endpoint
	// was updated from the access logs by the discovery mechanism.
	// It is the UTC time and represented in RFC3339 form.
	AccessDiscoveryTime *types.Timestamp `protobuf:"bytes,12,opt,name=access_discovery_time,json=accessDiscoveryTime,proto3" json:"access_discovery_time,omitempty"`
	// List of domains
	//
	// x-displayName: "List of Domains"
	// x-example: "[www.example1.com", "www.example2.com]"
	// List of Domains of the API endpoint
	Domains []string `protobuf:"bytes,13,rep,name=domains,proto3" json:"domains,omitempty"`
	// List of Sensitive Data
	//
	// x-displayName: "List of Sensitive Data"
	// x-example: "[SENSITIVE_DATA_TYPE_CCN, SENSITIVE_DATA_TYPE_SSN, SENSITIVE_DATA_TYPE_IP]"
	// List of Sensitive Data found in the API endpoint
	SensitiveData []SensitiveDataType `protobuf:"varint,14,rep,packed,name=sensitive_data,json=sensitiveData,proto3,enum=ves.io.schema.app_type.SensitiveDataType" json:"sensitive_data,omitempty"` // Deprecated: Do not use.
	// List of Sensitive Data
	//
	// x-displayName: "List of Sensitive Data"
	// x-example: "[Social-Security-Number, Credit-Card-Number]"
	// List of Sensitive Data found in the API endpoint
	SensitiveDataTypes []string `protobuf:"bytes,20,rep,name=sensitive_data_types,json=sensitiveDataTypes,proto3" json:"sensitive_data_types,omitempty"`
	// sec_events_count
	//
	// x-displayName: "Number Of Total Security Events"
	// x-example: "1234"
	// Number of sec_events seen for this API Endpoint for the specified time-range.
	SecEventsCount int32 `protobuf:"varint,15,opt,name=sec_events_count,json=secEventsCount,proto3" json:"sec_events_count,omitempty"`
	// requests_count
	//
	// x-displayName: "Number Of Total Requests"
	// x-example: "1234"
	// Number of requests seen for this API Endpoint for the specified time-range.
	RequestsCount int32 `protobuf:"varint,16,opt,name=requests_count,json=requestsCount,proto3" json:"requests_count,omitempty"`
	// authentication_state
	//
	// x-displayName: "Authentication State"
	// x-example: AUTH_STATE_AUTHENTICATED, AUTH_STATE_UNAUTHENTICATED, AUTH_STATE_UNKNOWN
	// The authentication state of the endpoint.
	AuthenticationState AuthenticationState `protobuf:"varint,17,opt,name=authentication_state,json=authenticationState,proto3,enum=ves.io.schema.app_type.AuthenticationState" json:"authentication_state,omitempty"`
	// authentication_types
	//
	// x-displayName: "Authentication Types and Locations"
	// List of authentication types found in the API endpoint and their locations.
	AuthenticationTypes []*AuthenticationTypeLocPair `protobuf:"bytes,18,rep,name=authentication_types,json=authenticationTypes,proto3" json:"authentication_types,omitempty"`
	// risk_score
	//
	// x-displayName: "Risk score"
	// Risk score for this API Endpoint.
	RiskScore *RiskScore `protobuf:"bytes,19,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	// API Groups membership
	//
	// x-displayName: "API Groups membership"
	// x-example: ["sensitive", "read-only"]
	// List of API Groups the API Endpoint is a member of.
	ApiGroups []string `protobuf:"bytes,22,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
	// api_type
	//
	// x-displayName: "API Type"
	// x-example: API_TYPE_GRAPHQL, API_TYPE_REST, API_TYPE_GRPC
	// Signifies api endpoint type.
	ApiType APIType `protobuf:"varint,23,opt,name=api_type,json=apiType,proto3,enum=ves.io.schema.app_type.APIType" json:"api_type,omitempty"` // Deprecated: Do not use.
	// attributes
	//
	// x-displayName: "Attributes"
	// x-example: [GraphQL, login etc.]
	// List of api endpoint attributes.
	Attributes []string `protobuf:"bytes,24,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// schema_status
	//
	// x-displayName: "Schema Status"
	// x-example: "Discovered Not-Updated"
	// Schema status indicates the API Endpoint's schema origin and if it's outdated.
	SchemaStatus string `protobuf:"bytes,25,opt,name=schema_status,json=schemaStatus,proto3" json:"schema_status,omitempty"`
	// compliances
	//
	// x-displayName: "Compliances"
	// x-example: ["GDPR", "HIPAA", "CCPA"]
	// List of compliance frameworks of the Endpoint.
	Compliances []string `protobuf:"bytes,26,rep,name=compliances,proto3" json:"compliances,omitempty"`
	// engines
	//
	// x-displayName: "Engines"
	// x-example: ["TRAFFIC_INSPECTION", "CODE_ANALYSIS", "CRAWLER"]
	// List of engines that detected the endpoint.
	Engines []string `protobuf:"bytes,27,rep,name=engines,proto3" json:"engines,omitempty"`
	// req_rate
	//
	// x-displayName: "Request Rate"
	// x-example: 10.5
	// Request rate for the API Endpoint.
	ReqRate float32 `protobuf:"fixed32,28,opt,name=req_rate,json=reqRate,proto3" json:"req_rate,omitempty"`
	// max_latency
	//
	// x-displayName: "Max Latency"
	// x-example: 9.87
	// Maximum latency observed for the API Endpoint.
	MaxLatency float32 `protobuf:"fixed32,29,opt,name=max_latency,json=maxLatency,proto3" json:"max_latency,omitempty"`
	// avg_latency
	//
	// x-displayName: "Average Latency"
	// x-example: 2.34
	// Average latency observed for the API Endpoint.
	AvgLatency float32 `protobuf:"fixed32,30,opt,name=avg_latency,json=avgLatency,proto3" json:"avg_latency,omitempty"`
	// sensitive data location
	//
	// x-displayName: "Sensitive Data Location"
	// x-example: Request
	// Sensitive data location for the API Endpoint.
	SensitiveDataLocation []string `protobuf:"bytes,31,rep,name=sensitive_data_location,json=sensitiveDataLocation,proto3" json:"sensitive_data_location,omitempty"`
}

func (m *APIEPInfo) Reset()      { *m = APIEPInfo{} }
func (*APIEPInfo) ProtoMessage() {}
func (*APIEPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{7}
}
func (m *APIEPInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEPInfo.Merge(m, src)
}
func (m *APIEPInfo) XXX_Size() int {
	return m.Size()
}
func (m *APIEPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_APIEPInfo proto.InternalMessageInfo

func (m *APIEPInfo) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEPInfo) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *APIEPInfo) GetDynExamples() []*APIEPDynExample {
	if m != nil {
		return m.DynExamples
	}
	return nil
}

func (m *APIEPInfo) GetPdfInfo() *APIEPPDFInfo {
	if m != nil {
		return m.PdfInfo
	}
	return nil
}

func (m *APIEPInfo) GetRequestPercentage() float32 {
	if m != nil {
		return m.RequestPercentage
	}
	return 0
}

func (m *APIEPInfo) GetHasLearntSchema() bool {
	if m != nil {
		return m.HasLearntSchema
	}
	return false
}

func (m *APIEPInfo) GetCategory() []APIEPCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *APIEPInfo) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *APIEPInfo) GetPiiLevel() APIEPPIILevel {
	if m != nil {
		return m.PiiLevel
	}
	return APIEP_PII_NOT_DETECTED
}

func (m *APIEPInfo) GetSecurityRisk() APIEPSecurityRisk {
	if m != nil {
		return m.SecurityRisk
	}
	return APIEP_SEC_RISK_NONE
}

func (m *APIEPInfo) GetAccessDiscoveryTime() *types.Timestamp {
	if m != nil {
		return m.AccessDiscoveryTime
	}
	return nil
}

func (m *APIEPInfo) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

// Deprecated: Do not use.
func (m *APIEPInfo) GetSensitiveData() []SensitiveDataType {
	if m != nil {
		return m.SensitiveData
	}
	return nil
}

func (m *APIEPInfo) GetSensitiveDataTypes() []string {
	if m != nil {
		return m.SensitiveDataTypes
	}
	return nil
}

func (m *APIEPInfo) GetSecEventsCount() int32 {
	if m != nil {
		return m.SecEventsCount
	}
	return 0
}

func (m *APIEPInfo) GetRequestsCount() int32 {
	if m != nil {
		return m.RequestsCount
	}
	return 0
}

func (m *APIEPInfo) GetAuthenticationState() AuthenticationState {
	if m != nil {
		return m.AuthenticationState
	}
	return AUTH_STATE_UNKNOWN
}

func (m *APIEPInfo) GetAuthenticationTypes() []*AuthenticationTypeLocPair {
	if m != nil {
		return m.AuthenticationTypes
	}
	return nil
}

func (m *APIEPInfo) GetRiskScore() *RiskScore {
	if m != nil {
		return m.RiskScore
	}
	return nil
}

func (m *APIEPInfo) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

// Deprecated: Do not use.
func (m *APIEPInfo) GetApiType() APIType {
	if m != nil {
		return m.ApiType
	}
	return API_TYPE_UNKNOWN
}

func (m *APIEPInfo) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *APIEPInfo) GetSchemaStatus() string {
	if m != nil {
		return m.SchemaStatus
	}
	return ""
}

func (m *APIEPInfo) GetCompliances() []string {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *APIEPInfo) GetEngines() []string {
	if m != nil {
		return m.Engines
	}
	return nil
}

func (m *APIEPInfo) GetReqRate() float32 {
	if m != nil {
		return m.ReqRate
	}
	return 0
}

func (m *APIEPInfo) GetMaxLatency() float32 {
	if m != nil {
		return m.MaxLatency
	}
	return 0
}

func (m *APIEPInfo) GetAvgLatency() float32 {
	if m != nil {
		return m.AvgLatency
	}
	return 0
}

func (m *APIEPInfo) GetSensitiveDataLocation() []string {
	if m != nil {
		return m.SensitiveDataLocation
	}
	return nil
}

// RiskScore
//
// x-displayName: "Risk score"
// Risk score of the vulnerabilities found for this API Endpoint.
type RiskScore struct {
	// score
	//
	// x-displayName: "Score"
	// Score of the vulnerabilities found for this API Endpoint.
	Score float32 `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	// severity
	//
	// x-displayName: "Severity"
	// Severity of the vulnerabilities found for this API Endpoint.
	Severity APIEPSecurityRisk `protobuf:"varint,2,opt,name=severity,proto3,enum=ves.io.schema.app_type.APIEPSecurityRisk" json:"severity,omitempty"`
}

func (m *RiskScore) Reset()      { *m = RiskScore{} }
func (*RiskScore) ProtoMessage() {}
func (*RiskScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{8}
}
func (m *RiskScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RiskScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RiskScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiskScore.Merge(m, src)
}
func (m *RiskScore) XXX_Size() int {
	return m.Size()
}
func (m *RiskScore) XXX_DiscardUnknown() {
	xxx_messageInfo_RiskScore.DiscardUnknown(m)
}

var xxx_messageInfo_RiskScore proto.InternalMessageInfo

func (m *RiskScore) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RiskScore) GetSeverity() APIEPSecurityRisk {
	if m != nil {
		return m.Severity
	}
	return APIEP_SEC_RISK_NONE
}

// APIEP Authentication Type and Location Pair
//
// x-displayName: "API EP Authentication Type and Location Pair"
// API Endpoint's Authentication Type and Location.
type AuthenticationTypeLocPair struct {
	// type
	//
	// x-displayName: "Authentication Type"
	// The detected authentication type
	Type AuthenticationType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.app_type.AuthenticationType" json:"type,omitempty"` // Deprecated: Do not use.
	// location
	//
	// x-displayName: "Authentication Location"
	// The detected authentication location
	Location AuthenticationLocation `protobuf:"varint,2,opt,name=location,proto3,enum=ves.io.schema.app_type.AuthenticationLocation" json:"location,omitempty"`
	// auth_type
	//
	// x-example: "Basic"
	// x-displayName: "Authentication Type"
	// The detected authentication type by string format
	AuthType string `protobuf:"bytes,3,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
}

func (m *AuthenticationTypeLocPair) Reset()      { *m = AuthenticationTypeLocPair{} }
func (*AuthenticationTypeLocPair) ProtoMessage() {}
func (*AuthenticationTypeLocPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{9}
}
func (m *AuthenticationTypeLocPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticationTypeLocPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthenticationTypeLocPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationTypeLocPair.Merge(m, src)
}
func (m *AuthenticationTypeLocPair) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticationTypeLocPair) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationTypeLocPair.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationTypeLocPair proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *AuthenticationTypeLocPair) GetType() AuthenticationType {
	if m != nil {
		return m.Type
	}
	return AUTH_TYPE_BASIC
}

func (m *AuthenticationTypeLocPair) GetLocation() AuthenticationLocation {
	if m != nil {
		return m.Location
	}
	return AUTH_LOCATION_HEADER
}

func (m *AuthenticationTypeLocPair) GetAuthType() string {
	if m != nil {
		return m.AuthType
	}
	return ""
}

// Probability Density Point(x,y)
//
// x-displayName: "Point(Value, Probability)"
// Probability Density point in (PDF(x)) of the metric.
// x is the value of the metric, probability is the corresponding PDF(x).
// In the univariate case (current configuration), the value x of the metrics is a scaler.
// As PDFSpec is repeated (see below), the x values are linearly spaced monotonically from minimum to maximum.
type PDFSpec struct {
	// Metric Value
	//
	// x-displayName: "Value"
	// x-example: "121.316"
	// Value of the metric that can be plotted on x-axis
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// Probability
	//
	// x-displayName: "Probability"
	// x-example: "0.078"
	// Probability of given Value of the metric that can be plotted on y-axis
	Probability float32 `protobuf:"fixed32,2,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (m *PDFSpec) Reset()      { *m = PDFSpec{} }
func (*PDFSpec) ProtoMessage() {}
func (*PDFSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{10}
}
func (m *PDFSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PDFSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PDFSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFSpec.Merge(m, src)
}
func (m *PDFSpec) XXX_Size() int {
	return m.Size()
}
func (m *PDFSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PDFSpec proto.InternalMessageInfo

func (m *PDFSpec) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *PDFSpec) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

// Probability Density Function Statistics
//
// x-displayName: "PDF(Statistics)"
// Probability Density Function statistics of the metric.
// pdf_mean is the mean PDF of the metric, pdf_95 is the 95th percentile PDF of the metric.
// In the univariate case PDFStat for each metric consists of pdf_mean and pdf_95.
type PDFStat struct {
	// PDF Mean
	//
	// x-displayName: "PDF(Mean)"
	// pdf_mean represents the mean of PDF
	PdfMean float32 `protobuf:"fixed32,1,opt,name=pdf_mean,json=pdfMean,proto3" json:"pdf_mean,omitempty"`
	// PDF 95th Percentile
	//
	// x-displayName: "PDF(95th Percentile)"
	// x-example: "0.078"
	// pdf_95 represents the 95th percentile of PDF
	Pdf_95 float32 `protobuf:"fixed32,2,opt,name=pdf_95,json=pdf95,proto3" json:"pdf_95,omitempty"`
}

func (m *PDFStat) Reset()      { *m = PDFStat{} }
func (*PDFStat) ProtoMessage() {}
func (*PDFStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{11}
}
func (m *PDFStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PDFStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PDFStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFStat.Merge(m, src)
}
func (m *PDFStat) XXX_Size() int {
	return m.Size()
}
func (m *PDFStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFStat.DiscardUnknown(m)
}

var xxx_messageInfo_PDFStat proto.InternalMessageInfo

func (m *PDFStat) GetPdfMean() float32 {
	if m != nil {
		return m.PdfMean
	}
	return 0
}

func (m *PDFStat) GetPdf_95() float32 {
	if m != nil {
		return m.Pdf_95
	}
	return 0
}

// Probability Density Function
//
// x-displayName: "PDF(Value)"
// Metrics supported currently are request_size response_size latency_with_data, latency_no_data.
// PDF is calculated for each combination of (Tenant, App type, API endpoint).
// API endpoint is determined from automatically identified API (collapsed_url) and method.
// In the univariate case PDFSpec for each metric is repeated num_pdf_samples times.
// num_pdf_samples is a parameter is system wide parameter currently set to 200.
type APIEPPDFInfo struct {
	// PDF(request_size)
	//
	// x-displayName: "PDF(Request)"
	// List of Probability density points for PDF for request size
	RequestSize []*PDFSpec `protobuf:"bytes,1,rep,name=request_size,json=requestSize,proto3" json:"request_size,omitempty"`
	// PDF(response_size)
	//
	// x-displayName: "PDF(Response)"
	// List of Probability density points for PDF for response size
	ResponseSize []*PDFSpec `protobuf:"bytes,2,rep,name=response_size,json=responseSize,proto3" json:"response_size,omitempty"`
	// PDF(response latency)
	//
	// x-displayName: "PDF(Latency End)"
	// List of Probability density points for PDF for latency of response end
	LatencyWithData []*PDFSpec `protobuf:"bytes,3,rep,name=latency_with_data,json=latencyWithData,proto3" json:"latency_with_data,omitempty"`
	// PDF(response latency to first byte)
	//
	// x-displayName: "PDF(Latency Begin)"
	// List of Probability density points for PDF for latency of response begin
	LatencyNoData []*PDFSpec `protobuf:"bytes,4,rep,name=latency_no_data,json=latencyNoData,proto3" json:"latency_no_data,omitempty"`
	// PDF(request rate)
	//
	// x-displayName: "PDF(Request Rate)"
	// List of Probability density points for PDF for request rate
	RequestRate []*PDFSpec `protobuf:"bytes,5,rep,name=request_rate,json=requestRate,proto3" json:"request_rate,omitempty"`
	// PDF(error rate)
	//
	// x-displayName: "PDF(Error Rate)"
	// List of Probability density points for PDF for error rate
	ErrorRate []*PDFSpec `protobuf:"bytes,6,rep,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	// PDF(response throughput)
	//
	// x-displayName: "PDF(Response Throughput)"
	// List of Probability density points for PDF for response throughput
	ResponseThroughput []*PDFSpec `protobuf:"bytes,7,rep,name=response_throughput,json=responseThroughput,proto3" json:"response_throughput,omitempty"`
	// creation_timestamp
	//
	// x-displayName: "Creation Timestamp"
	// creation_timestamp represents the time when this PDF was created
	// It is represented in RFC3339 form and is in UTC.
	CreationTimestamp *types.Timestamp `protobuf:"bytes,8,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// PDFStat(request_size)
	//
	// x-displayName: "PDFStat(Request)"
	// Mean and 95th percentile for PDF for request size
	RequestSizeStat *PDFStat `protobuf:"bytes,9,opt,name=request_size_stat,json=requestSizeStat,proto3" json:"request_size_stat,omitempty"`
	// PDFStat(response_size)
	//
	// x-displayName: "PDFStat(Response)"
	// Mean and 95th percentile for PDF for response size
	ResponseSizeStat *PDFStat `protobuf:"bytes,10,opt,name=response_size_stat,json=responseSizeStat,proto3" json:"response_size_stat,omitempty"`
	// PDFStat(response latency)
	//
	// x-displayName: "PDFStat(Latency End)"
	// Mean and 95th percentile for PDF for latency of response end
	LatencyWithDataStat *PDFStat `protobuf:"bytes,11,opt,name=latency_with_data_stat,json=latencyWithDataStat,proto3" json:"latency_with_data_stat,omitempty"`
	// PDFStat(response latency to first byte)
	//
	// x-displayName: "PDFStat(Latency Begin)"
	// Mean and 95th percentile for PDF for latency of response begin
	LatencyNoDataStat *PDFStat `protobuf:"bytes,12,opt,name=latency_no_data_stat,json=latencyNoDataStat,proto3" json:"latency_no_data_stat,omitempty"`
	// PDFStat(request rate)
	//
	// x-displayName: "PDFStat(Request Rate)"
	// Mean and 95th percentile for PDF for request rate
	RequestRateStat *PDFStat `protobuf:"bytes,13,opt,name=request_rate_stat,json=requestRateStat,proto3" json:"request_rate_stat,omitempty"`
	// PDFStat(error rate)
	//
	// x-displayName: "PDFStat(Error Rate)"
	// Mean and 95th percentile for PDF for error rate
	ErrorRateStat *PDFStat `protobuf:"bytes,14,opt,name=error_rate_stat,json=errorRateStat,proto3" json:"error_rate_stat,omitempty"`
	// PDFStat(response throughput)
	//
	// x-displayName: "PDF(Response Throughput)"
	// Mean and 95th percentile for PDF for response throughput
	ResponseThroughputStat *PDFStat `protobuf:"bytes,15,opt,name=response_throughput_stat,json=responseThroughputStat,proto3" json:"response_throughput_stat,omitempty"`
}

func (m *APIEPPDFInfo) Reset()      { *m = APIEPPDFInfo{} }
func (*APIEPPDFInfo) ProtoMessage() {}
func (*APIEPPDFInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{12}
}
func (m *APIEPPDFInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEPPDFInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEPPDFInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEPPDFInfo.Merge(m, src)
}
func (m *APIEPPDFInfo) XXX_Size() int {
	return m.Size()
}
func (m *APIEPPDFInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEPPDFInfo.DiscardUnknown(m)
}

var xxx_messageInfo_APIEPPDFInfo proto.InternalMessageInfo

func (m *APIEPPDFInfo) GetRequestSize() []*PDFSpec {
	if m != nil {
		return m.RequestSize
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseSize() []*PDFSpec {
	if m != nil {
		return m.ResponseSize
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyWithData() []*PDFSpec {
	if m != nil {
		return m.LatencyWithData
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyNoData() []*PDFSpec {
	if m != nil {
		return m.LatencyNoData
	}
	return nil
}

func (m *APIEPPDFInfo) GetRequestRate() []*PDFSpec {
	if m != nil {
		return m.RequestRate
	}
	return nil
}

func (m *APIEPPDFInfo) GetErrorRate() []*PDFSpec {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseThroughput() []*PDFSpec {
	if m != nil {
		return m.ResponseThroughput
	}
	return nil
}

func (m *APIEPPDFInfo) GetCreationTimestamp() *types.Timestamp {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

func (m *APIEPPDFInfo) GetRequestSizeStat() *PDFStat {
	if m != nil {
		return m.RequestSizeStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseSizeStat() *PDFStat {
	if m != nil {
		return m.ResponseSizeStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyWithDataStat() *PDFStat {
	if m != nil {
		return m.LatencyWithDataStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyNoDataStat() *PDFStat {
	if m != nil {
		return m.LatencyNoDataStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetRequestRateStat() *PDFStat {
	if m != nil {
		return m.RequestRateStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetErrorRateStat() *PDFStat {
	if m != nil {
		return m.ErrorRateStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseThroughputStat() *PDFStat {
	if m != nil {
		return m.ResponseThroughputStat
	}
	return nil
}

// Override automatic collapse
//
// x-displayName: "Override Rule"
// Rule to override a given automatic dynamic identifier used to expand or collapse API URL
type OverrideInfo struct {
	// Override component identifier
	//
	// x-displayName: "Identifier"
	// x-example: "/api/v1/user_id/DYN"
	ComponentIdentifier string `protobuf:"bytes,2,opt,name=component_identifier,json=componentIdentifier,proto3" json:"component_identifier,omitempty"`
	// Override Value
	//
	// x-displayName: "Enable/Disable"
	// x-example: "False"
	// Enable or Disable component to be considered as dynamic to collapse or expand API URL
	SetDynamic bool `protobuf:"varint,3,opt,name=set_dynamic,json=setDynamic,proto3" json:"set_dynamic,omitempty"`
}

func (m *OverrideInfo) Reset()      { *m = OverrideInfo{} }
func (*OverrideInfo) ProtoMessage() {}
func (*OverrideInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{13}
}
func (m *OverrideInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OverrideInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OverrideInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OverrideInfo.Merge(m, src)
}
func (m *OverrideInfo) XXX_Size() int {
	return m.Size()
}
func (m *OverrideInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OverrideInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OverrideInfo proto.InternalMessageInfo

func (m *OverrideInfo) GetComponentIdentifier() string {
	if m != nil {
		return m.ComponentIdentifier
	}
	return ""
}

func (m *OverrideInfo) GetSetDynamic() bool {
	if m != nil {
		return m.SetDynamic
	}
	return false
}

// Schema Structure
//
// x-displayName: "Schema Structure"
// Schema structure for a given API endpoint.
type SchemaStruct struct {
	// Examples
	//
	// x-displayName: "Examples"
	// Examples for request API endpoint.
	Examples []string `protobuf:"bytes,1,rep,name=examples,proto3" json:"examples,omitempty"`
	// Schema
	//
	// x-displayName: "Schema"
	// Schema for request API endpoint.
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *SchemaStruct) Reset()      { *m = SchemaStruct{} }
func (*SchemaStruct) ProtoMessage() {}
func (*SchemaStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{14}
}
func (m *SchemaStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SchemaStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaStruct.Merge(m, src)
}
func (m *SchemaStruct) XXX_Size() int {
	return m.Size()
}
func (m *SchemaStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaStruct.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaStruct proto.InternalMessageInfo

func (m *SchemaStruct) GetExamples() []string {
	if m != nil {
		return m.Examples
	}
	return nil
}

func (m *SchemaStruct) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

// Sensitive Data
//
// x-displayName: "Sensitive Data"
// Sensitive data for a given API endpoint.
type SensitiveData struct {
	// Type
	//
	// x-displayName: "Type"
	// x-example: SENSITIVE_DATA_TYPE_EMAIL
	// Type of sensitive data.
	Type SensitiveDataType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.app_type.SensitiveDataType" json:"type,omitempty"` // Deprecated: Do not use.
	// Sensitive Data Type
	//
	// x-displayName: "Type"
	// x-example: EMAIL
	// Type of sensitive data.
	SensitiveDataType string `protobuf:"bytes,5,opt,name=sensitive_data_type,json=sensitiveDataType,proto3" json:"sensitive_data_type,omitempty"`
	// Section
	//
	// x-displayName: "Section"
	// x-example: req_body
	// Section of sensitive data.
	Section string `protobuf:"bytes,2,opt,name=section,proto3" json:"section,omitempty"`
	// Field
	//
	// x-displayName: "Field"
	// Field of sensitive data.
	Field string `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	// Examples
	//
	// x-displayName: "Examples"
	// Examples of sensitive data.
	Examples []string `protobuf:"bytes,4,rep,name=examples,proto3" json:"examples,omitempty"`
	// Rule Type
	//
	// x-displayName: "Rule Type"
	// Type of sensitive data detection rule. Could be built-in or custom.
	RuleType SensitiveDataDetectionRuleType `protobuf:"varint,6,opt,name=rule_type,json=ruleType,proto3,enum=ves.io.schema.app_type.SensitiveDataDetectionRuleType" json:"rule_type,omitempty"`
	// Compliances
	//
	// x-displayName: "Compliances"
	// Compliance frameworks.
	Compliances []string `protobuf:"bytes,7,rep,name=compliances,proto3" json:"compliances,omitempty"`
}

func (m *SensitiveData) Reset()      { *m = SensitiveData{} }
func (*SensitiveData) ProtoMessage() {}
func (*SensitiveData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{15}
}
func (m *SensitiveData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensitiveData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SensitiveData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveData.Merge(m, src)
}
func (m *SensitiveData) XXX_Size() int {
	return m.Size()
}
func (m *SensitiveData) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveData.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveData proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *SensitiveData) GetType() SensitiveDataType {
	if m != nil {
		return m.Type
	}
	return SENSITIVE_DATA_TYPE_CCN
}

func (m *SensitiveData) GetSensitiveDataType() string {
	if m != nil {
		return m.SensitiveDataType
	}
	return ""
}

func (m *SensitiveData) GetSection() string {
	if m != nil {
		return m.Section
	}
	return ""
}

func (m *SensitiveData) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *SensitiveData) GetExamples() []string {
	if m != nil {
		return m.Examples
	}
	return nil
}

func (m *SensitiveData) GetRuleType() SensitiveDataDetectionRuleType {
	if m != nil {
		return m.RuleType
	}
	return RULE_TYPE_BUILT_IN
}

func (m *SensitiveData) GetCompliances() []string {
	if m != nil {
		return m.Compliances
	}
	return nil
}

// AuthData
//
// x-displayName: "Authentication Data"
// Authentication data for a given Authentication definition type.
type AuthData struct {
	// Summary
	//
	// x-displayName: "Summary"
	// x-example: "{\"ApiKeyAuth\": {\"type\": \"apiKey\",\"in\": \"header\",\"name\": \"X-API-Key\"}}"
	// General Authentication Information for a given authentication definition.
	Summary string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// Schema
	//
	// x-displayName: "Schema"
	// Schema of a given authentication type, for example decoded JWT payload schema..
	Schema *SchemaStruct `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// Insights
	//
	// x-displayName: "Insights"
	// x-example: "{\"roles\": [\"admin\",\"user\"]}"
	// Insights of a given authentication type.
	Insights string `protobuf:"bytes,3,opt,name=insights,proto3" json:"insights,omitempty"`
}

func (m *AuthData) Reset()      { *m = AuthData{} }
func (*AuthData) ProtoMessage() {}
func (*AuthData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{16}
}
func (m *AuthData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthData.Merge(m, src)
}
func (m *AuthData) XXX_Size() int {
	return m.Size()
}
func (m *AuthData) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthData.DiscardUnknown(m)
}

var xxx_messageInfo_AuthData proto.InternalMessageInfo

func (m *AuthData) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *AuthData) GetSchema() *SchemaStruct {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *AuthData) GetInsights() string {
	if m != nil {
		return m.Insights
	}
	return ""
}

// Authentication
//
// x-displayName: "Authentication"
// Authentication details for a given API endpoint.
type Authentication struct {
	// auth_data_per_definition
	//
	// x-displayName: "Authentication Data Per Definition"
	// Authentication Data Per Definition.
	AuthDataPerDefinition map[string]*AuthData `protobuf:"bytes,1,rep,name=auth_data_per_definition,json=authDataPerDefinition,proto3" json:"auth_data_per_definition,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Authentication) Reset()      { *m = Authentication{} }
func (*Authentication) ProtoMessage() {}
func (*Authentication) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{17}
}
func (m *Authentication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authentication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Authentication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authentication.Merge(m, src)
}
func (m *Authentication) XXX_Size() int {
	return m.Size()
}
func (m *Authentication) XXX_DiscardUnknown() {
	xxx_messageInfo_Authentication.DiscardUnknown(m)
}

var xxx_messageInfo_Authentication proto.InternalMessageInfo

func (m *Authentication) GetAuthDataPerDefinition() map[string]*AuthData {
	if m != nil {
		return m.AuthDataPerDefinition
	}
	return nil
}

// Request Schema
//
// x-displayName: "Request Schema"
// Request schema for a given API endpoint.
type RequestSchema struct {
	// Headers schema
	//
	// x-displayName: "Headers Schema"
	// Request headers schema for request API endpoint.
	Headers *SchemaStruct `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	// Body schema per content type
	//
	// x-displayName: "Body Schema Per Content Type"
	// Body schema per content type for request API endpoint.
	BodyPerContentType map[string]*SchemaStruct `protobuf:"bytes,2,rep,name=body_per_content_type,json=bodyPerContentType,proto3" json:"body_per_content_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Query params schema
	//
	// x-displayName: "Query Params Schema"
	// Query params schema for request API endpoint.
	QueryParams *SchemaStruct `protobuf:"bytes,3,opt,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	// Cookies schema
	//
	// x-displayName: "Cookies Schema"
	// Cookies schema for request API endpoint.
	Cookies *SchemaStruct `protobuf:"bytes,4,opt,name=cookies,proto3" json:"cookies,omitempty"`
}

func (m *RequestSchema) Reset()      { *m = RequestSchema{} }
func (*RequestSchema) ProtoMessage() {}
func (*RequestSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{18}
}
func (m *RequestSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RequestSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSchema.Merge(m, src)
}
func (m *RequestSchema) XXX_Size() int {
	return m.Size()
}
func (m *RequestSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSchema.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSchema proto.InternalMessageInfo

func (m *RequestSchema) GetHeaders() *SchemaStruct {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RequestSchema) GetBodyPerContentType() map[string]*SchemaStruct {
	if m != nil {
		return m.BodyPerContentType
	}
	return nil
}

func (m *RequestSchema) GetQueryParams() *SchemaStruct {
	if m != nil {
		return m.QueryParams
	}
	return nil
}

func (m *RequestSchema) GetCookies() *SchemaStruct {
	if m != nil {
		return m.Cookies
	}
	return nil
}

// Response Schema
//
// x-displayName: "Response Schema"
// Response schema for a given API endpoint.
type ResponseSchema struct {
	// Headers schema
	//
	// x-displayName: "Headers Schema"
	// Response headers schema for request API endpoint.
	Headers *SchemaStruct `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	// Body schema per content type
	//
	// x-displayName: "Body Schema Per Content Type"
	// Body schema per content type for request API endpoint.
	BodyPerContentType map[string]*SchemaStruct `protobuf:"bytes,2,rep,name=body_per_content_type,json=bodyPerContentType,proto3" json:"body_per_content_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ResponseSchema) Reset()      { *m = ResponseSchema{} }
func (*ResponseSchema) ProtoMessage() {}
func (*ResponseSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{19}
}
func (m *ResponseSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResponseSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSchema.Merge(m, src)
}
func (m *ResponseSchema) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSchema.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSchema proto.InternalMessageInfo

func (m *ResponseSchema) GetHeaders() *SchemaStruct {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ResponseSchema) GetBodyPerContentType() map[string]*SchemaStruct {
	if m != nil {
		return m.BodyPerContentType
	}
	return nil
}

// Discovery schema
//
// x-displayName: "Discovery Schema"
// Discovery schema for request API endpoint.
type DiscoveredSchema struct {
	// Request Schema
	//
	// x-displayName: "Request Schema"
	// Request Schema for request API endpoint.
	RequestSchema *RequestSchema `protobuf:"bytes,1,opt,name=request_schema,json=requestSchema,proto3" json:"request_schema,omitempty"`
	// Response schema per rsp code
	//
	// x-displayName: "Response Schema Per Rsp Code"
	// Response schema per rsp code for request API endpoint.
	ResponseSchemaPerRspCode map[string]*ResponseSchema `protobuf:"bytes,2,rep,name=response_schema_per_rsp_code,json=responseSchemaPerRspCode,proto3" json:"response_schema_per_rsp_code,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Last Updated Time
	//
	// x-displayName: "Last Updated Time"
	// x-example: "2021-01-22 15:46:23.767649"
	// Last Updated Time for request API endpoint. The time updated when the APIEP file is uploaded to Azure/AWS.
	LastUpdatedTime *types.Timestamp `protobuf:"bytes,3,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
}

func (m *DiscoveredSchema) Reset()      { *m = DiscoveredSchema{} }
func (*DiscoveredSchema) ProtoMessage() {}
func (*DiscoveredSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{20}
}
func (m *DiscoveredSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DiscoveredSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredSchema.Merge(m, src)
}
func (m *DiscoveredSchema) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredSchema.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredSchema proto.InternalMessageInfo

func (m *DiscoveredSchema) GetRequestSchema() *RequestSchema {
	if m != nil {
		return m.RequestSchema
	}
	return nil
}

func (m *DiscoveredSchema) GetResponseSchemaPerRspCode() map[string]*ResponseSchema {
	if m != nil {
		return m.ResponseSchemaPerRspCode
	}
	return nil
}

func (m *DiscoveredSchema) GetLastUpdatedTime() *types.Timestamp {
	if m != nil {
		return m.LastUpdatedTime
	}
	return nil
}

// Key Pattern
//
// x-displayName: "Key Pattern"
// Pattern to detect. Could be exact match or regex match.
type KeyPattern struct {
	// key_pattern
	//
	// x-displayName: "Key Pattern"
	// x-required
	// Pattern for key/field.
	//
	// Types that are valid to be assigned to KeyPattern:
	//	*KeyPattern_ExactValue
	//	*KeyPattern_RegexValue
	KeyPattern isKeyPattern_KeyPattern `protobuf_oneof:"key_pattern"`
}

func (m *KeyPattern) Reset()      { *m = KeyPattern{} }
func (*KeyPattern) ProtoMessage() {}
func (*KeyPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{21}
}
func (m *KeyPattern) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeyPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPattern.Merge(m, src)
}
func (m *KeyPattern) XXX_Size() int {
	return m.Size()
}
func (m *KeyPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPattern.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPattern proto.InternalMessageInfo

type isKeyPattern_KeyPattern interface {
	isKeyPattern_KeyPattern()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type KeyPattern_ExactValue struct {
	ExactValue string `protobuf:"bytes,2,opt,name=exact_value,json=exactValue,proto3,oneof" json:"exact_value,omitempty"`
}
type KeyPattern_RegexValue struct {
	RegexValue string `protobuf:"bytes,3,opt,name=regex_value,json=regexValue,proto3,oneof" json:"regex_value,omitempty"`
}

func (*KeyPattern_ExactValue) isKeyPattern_KeyPattern() {}
func (*KeyPattern_RegexValue) isKeyPattern_KeyPattern() {}

func (m *KeyPattern) GetKeyPattern() isKeyPattern_KeyPattern {
	if m != nil {
		return m.KeyPattern
	}
	return nil
}

func (m *KeyPattern) GetExactValue() string {
	if x, ok := m.GetKeyPattern().(*KeyPattern_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *KeyPattern) GetRegexValue() string {
	if x, ok := m.GetKeyPattern().(*KeyPattern_RegexValue); ok {
		return x.RegexValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KeyPattern) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KeyPattern_ExactValue)(nil),
		(*KeyPattern_RegexValue)(nil),
	}
}

// Value Pattern
//
// x-displayName: "Value Pattern"
// Pattern to detect. Could be exact match or regex match.
type ValuePattern struct {
	// value_pattern
	//
	// x-displayName: "Value Pattern"
	// x-required
	// Pattern for value.
	//
	// Types that are valid to be assigned to ValuePattern:
	//	*ValuePattern_ExactValue
	//	*ValuePattern_RegexValue
	ValuePattern isValuePattern_ValuePattern `protobuf_oneof:"value_pattern"`
}

func (m *ValuePattern) Reset()      { *m = ValuePattern{} }
func (*ValuePattern) ProtoMessage() {}
func (*ValuePattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{22}
}
func (m *ValuePattern) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValuePattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValuePattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValuePattern.Merge(m, src)
}
func (m *ValuePattern) XXX_Size() int {
	return m.Size()
}
func (m *ValuePattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ValuePattern.DiscardUnknown(m)
}

var xxx_messageInfo_ValuePattern proto.InternalMessageInfo

type isValuePattern_ValuePattern interface {
	isValuePattern_ValuePattern()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ValuePattern_ExactValue struct {
	ExactValue string `protobuf:"bytes,2,opt,name=exact_value,json=exactValue,proto3,oneof" json:"exact_value,omitempty"`
}
type ValuePattern_RegexValue struct {
	RegexValue string `protobuf:"bytes,3,opt,name=regex_value,json=regexValue,proto3,oneof" json:"regex_value,omitempty"`
}

func (*ValuePattern_ExactValue) isValuePattern_ValuePattern() {}
func (*ValuePattern_RegexValue) isValuePattern_ValuePattern() {}

func (m *ValuePattern) GetValuePattern() isValuePattern_ValuePattern {
	if m != nil {
		return m.ValuePattern
	}
	return nil
}

func (m *ValuePattern) GetExactValue() string {
	if x, ok := m.GetValuePattern().(*ValuePattern_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *ValuePattern) GetRegexValue() string {
	if x, ok := m.GetValuePattern().(*ValuePattern_RegexValue); ok {
		return x.RegexValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValuePattern) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValuePattern_ExactValue)(nil),
		(*ValuePattern_RegexValue)(nil),
	}
}

// Key-Value Pattern
//
// x-displayName: "Key & Value Pattern"
// Search for specific key & value patterns in the specified sections.
type KeyValuePattern struct {
	// key_pattern
	//
	// x-displayName: "Key Pattern"
	// x-required
	// Pattern for key/field.
	KeyPattern *KeyPattern `protobuf:"bytes,1,opt,name=key_pattern,json=keyPattern,proto3" json:"key_pattern,omitempty"`
	// value_pattern
	//
	// x-displayName: "Value Pattern"
	// x-required
	// Pattern for value.
	ValuePattern *ValuePattern `protobuf:"bytes,2,opt,name=value_pattern,json=valuePattern,proto3" json:"value_pattern,omitempty"`
}

func (m *KeyValuePattern) Reset()      { *m = KeyValuePattern{} }
func (*KeyValuePattern) ProtoMessage() {}
func (*KeyValuePattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{23}
}
func (m *KeyValuePattern) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValuePattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeyValuePattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePattern.Merge(m, src)
}
func (m *KeyValuePattern) XXX_Size() int {
	return m.Size()
}
func (m *KeyValuePattern) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePattern.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePattern proto.InternalMessageInfo

func (m *KeyValuePattern) GetKeyPattern() *KeyPattern {
	if m != nil {
		return m.KeyPattern
	}
	return nil
}

func (m *KeyValuePattern) GetValuePattern() *ValuePattern {
	if m != nil {
		return m.ValuePattern
	}
	return nil
}

// CustomSections
//
// x-displayName: "Custom Sections"
// Request & Response Sections.
type CustomSections struct {
	// custom_sections
	//
	// x-displayName: "Custom Sections"
	// x-required
	// Request & Response Sections.
	CustomSections []schema.HttpSections `protobuf:"varint,1,rep,packed,name=custom_sections,json=customSections,proto3,enum=ves.io.schema.HttpSections" json:"custom_sections,omitempty"`
}

func (m *CustomSections) Reset()      { *m = CustomSections{} }
func (*CustomSections) ProtoMessage() {}
func (*CustomSections) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{24}
}
func (m *CustomSections) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomSections) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomSections) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomSections.Merge(m, src)
}
func (m *CustomSections) XXX_Size() int {
	return m.Size()
}
func (m *CustomSections) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomSections.DiscardUnknown(m)
}

var xxx_messageInfo_CustomSections proto.InternalMessageInfo

func (m *CustomSections) GetCustomSections() []schema.HttpSections {
	if m != nil {
		return m.CustomSections
	}
	return nil
}

// api endpoint
//
// x-required
// x-displayName: "API Endpoint"
// The rule is applied only for the specified api endpoints.
type APIEndpoint struct {
	// api endpoint path
	//
	// x-required
	// x-example: "/endpoint1"
	// x-displayName: "API Endpoint"
	// The rule is applied only for the specified api endpoints.
	ApiEndpointPath string `protobuf:"bytes,1,opt,name=api_endpoint_path,json=apiEndpointPath,proto3" json:"api_endpoint_path,omitempty"`
	// methods
	//
	// x-displayName: "Methods"
	// List of methods values to match against.
	// x-required
	// x-example: "['GET', 'POST', 'DELETE']"
	Methods []schema.HttpMethod `protobuf:"varint,2,rep,packed,name=methods,proto3,enum=ves.io.schema.HttpMethod" json:"methods,omitempty"`
}

func (m *APIEndpoint) Reset()      { *m = APIEndpoint{} }
func (*APIEndpoint) ProtoMessage() {}
func (*APIEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{25}
}
func (m *APIEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpoint.Merge(m, src)
}
func (m *APIEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpoint proto.InternalMessageInfo

func (m *APIEndpoint) GetApiEndpointPath() string {
	if m != nil {
		return m.ApiEndpointPath
	}
	return ""
}

func (m *APIEndpoint) GetMethods() []schema.HttpMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

// CustomDataDetectionConfig
//
// x-displayName: "Custom Data Detection Config"
// The custom data detection config specifies targets, scopes & the pattern to be detected.
type CustomDataDetectionConfig struct {
	// domain choices
	//
	// x-displayName: "Domain"
	// x-required
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*CustomDataDetectionConfig_AnyDomain
	//	*CustomDataDetectionConfig_SpecificDomain
	DomainChoice isCustomDataDetectionConfig_DomainChoice `protobuf_oneof:"domain_choice"`
	// target choice
	//
	// x-displayName: "Target"
	// x-required
	// The rule is applied only for the specified target.
	//
	// Types that are valid to be assigned to TargetChoice:
	//	*CustomDataDetectionConfig_AnyTarget
	//	*CustomDataDetectionConfig_ApiEndpointTarget
	//	*CustomDataDetectionConfig_BasePath
	//	*CustomDataDetectionConfig_ApiGroup
	TargetChoice isCustomDataDetectionConfig_TargetChoice `protobuf_oneof:"target_choice"`
	// section choice
	//
	// x-displayName: "Section"
	// x-required
	// Search for patterns in the specific request and/or response sections.
	//
	// Types that are valid to be assigned to SectionChoice:
	//	*CustomDataDetectionConfig_AllSections
	//	*CustomDataDetectionConfig_AllRequestSections
	//	*CustomDataDetectionConfig_AllResponseSections
	//	*CustomDataDetectionConfig_CustomSections
	SectionChoice isCustomDataDetectionConfig_SectionChoice `protobuf_oneof:"section_choice"`
	// pattern choice
	//
	// x-displayName: "Pattern Choice"
	// x-required
	// Pattern Choice.
	//
	// Types that are valid to be assigned to PatternChoice:
	//	*CustomDataDetectionConfig_KeyPattern
	//	*CustomDataDetectionConfig_ValuePattern
	//	*CustomDataDetectionConfig_KeyValuePattern
	PatternChoice isCustomDataDetectionConfig_PatternChoice `protobuf_oneof:"pattern_choice"`
}

func (m *CustomDataDetectionConfig) Reset()      { *m = CustomDataDetectionConfig{} }
func (*CustomDataDetectionConfig) ProtoMessage() {}
func (*CustomDataDetectionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{26}
}
func (m *CustomDataDetectionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomDataDetectionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomDataDetectionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomDataDetectionConfig.Merge(m, src)
}
func (m *CustomDataDetectionConfig) XXX_Size() int {
	return m.Size()
}
func (m *CustomDataDetectionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomDataDetectionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CustomDataDetectionConfig proto.InternalMessageInfo

type isCustomDataDetectionConfig_DomainChoice interface {
	isCustomDataDetectionConfig_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCustomDataDetectionConfig_TargetChoice interface {
	isCustomDataDetectionConfig_TargetChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCustomDataDetectionConfig_SectionChoice interface {
	isCustomDataDetectionConfig_SectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCustomDataDetectionConfig_PatternChoice interface {
	isCustomDataDetectionConfig_PatternChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CustomDataDetectionConfig_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,2,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type CustomDataDetectionConfig_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,3,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}
type CustomDataDetectionConfig_AnyTarget struct {
	AnyTarget *schema.Empty `protobuf:"bytes,5,opt,name=any_target,json=anyTarget,proto3,oneof" json:"any_target,omitempty"`
}
type CustomDataDetectionConfig_ApiEndpointTarget struct {
	ApiEndpointTarget *APIEndpoint `protobuf:"bytes,6,opt,name=api_endpoint_target,json=apiEndpointTarget,proto3,oneof" json:"api_endpoint_target,omitempty"`
}
type CustomDataDetectionConfig_BasePath struct {
	BasePath string `protobuf:"bytes,7,opt,name=base_path,json=basePath,proto3,oneof" json:"base_path,omitempty"`
}
type CustomDataDetectionConfig_ApiGroup struct {
	ApiGroup string `protobuf:"bytes,8,opt,name=api_group,json=apiGroup,proto3,oneof" json:"api_group,omitempty"`
}
type CustomDataDetectionConfig_AllSections struct {
	AllSections *schema.Empty `protobuf:"bytes,10,opt,name=all_sections,json=allSections,proto3,oneof" json:"all_sections,omitempty"`
}
type CustomDataDetectionConfig_AllRequestSections struct {
	AllRequestSections *schema.Empty `protobuf:"bytes,11,opt,name=all_request_sections,json=allRequestSections,proto3,oneof" json:"all_request_sections,omitempty"`
}
type CustomDataDetectionConfig_AllResponseSections struct {
	AllResponseSections *schema.Empty `protobuf:"bytes,12,opt,name=all_response_sections,json=allResponseSections,proto3,oneof" json:"all_response_sections,omitempty"`
}
type CustomDataDetectionConfig_CustomSections struct {
	CustomSections *CustomSections `protobuf:"bytes,13,opt,name=custom_sections,json=customSections,proto3,oneof" json:"custom_sections,omitempty"`
}
type CustomDataDetectionConfig_KeyPattern struct {
	KeyPattern *KeyPattern `protobuf:"bytes,15,opt,name=key_pattern,json=keyPattern,proto3,oneof" json:"key_pattern,omitempty"`
}
type CustomDataDetectionConfig_ValuePattern struct {
	ValuePattern *ValuePattern `protobuf:"bytes,16,opt,name=value_pattern,json=valuePattern,proto3,oneof" json:"value_pattern,omitempty"`
}
type CustomDataDetectionConfig_KeyValuePattern struct {
	KeyValuePattern *KeyValuePattern `protobuf:"bytes,17,opt,name=key_value_pattern,json=keyValuePattern,proto3,oneof" json:"key_value_pattern,omitempty"`
}

func (*CustomDataDetectionConfig_AnyDomain) isCustomDataDetectionConfig_DomainChoice()            {}
func (*CustomDataDetectionConfig_SpecificDomain) isCustomDataDetectionConfig_DomainChoice()       {}
func (*CustomDataDetectionConfig_AnyTarget) isCustomDataDetectionConfig_TargetChoice()            {}
func (*CustomDataDetectionConfig_ApiEndpointTarget) isCustomDataDetectionConfig_TargetChoice()    {}
func (*CustomDataDetectionConfig_BasePath) isCustomDataDetectionConfig_TargetChoice()             {}
func (*CustomDataDetectionConfig_ApiGroup) isCustomDataDetectionConfig_TargetChoice()             {}
func (*CustomDataDetectionConfig_AllSections) isCustomDataDetectionConfig_SectionChoice()         {}
func (*CustomDataDetectionConfig_AllRequestSections) isCustomDataDetectionConfig_SectionChoice()  {}
func (*CustomDataDetectionConfig_AllResponseSections) isCustomDataDetectionConfig_SectionChoice() {}
func (*CustomDataDetectionConfig_CustomSections) isCustomDataDetectionConfig_SectionChoice()      {}
func (*CustomDataDetectionConfig_KeyPattern) isCustomDataDetectionConfig_PatternChoice()          {}
func (*CustomDataDetectionConfig_ValuePattern) isCustomDataDetectionConfig_PatternChoice()        {}
func (*CustomDataDetectionConfig_KeyValuePattern) isCustomDataDetectionConfig_PatternChoice()     {}

func (m *CustomDataDetectionConfig) GetDomainChoice() isCustomDataDetectionConfig_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *CustomDataDetectionConfig) GetTargetChoice() isCustomDataDetectionConfig_TargetChoice {
	if m != nil {
		return m.TargetChoice
	}
	return nil
}
func (m *CustomDataDetectionConfig) GetSectionChoice() isCustomDataDetectionConfig_SectionChoice {
	if m != nil {
		return m.SectionChoice
	}
	return nil
}
func (m *CustomDataDetectionConfig) GetPatternChoice() isCustomDataDetectionConfig_PatternChoice {
	if m != nil {
		return m.PatternChoice
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*CustomDataDetectionConfig_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*CustomDataDetectionConfig_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *CustomDataDetectionConfig) GetAnyTarget() *schema.Empty {
	if x, ok := m.GetTargetChoice().(*CustomDataDetectionConfig_AnyTarget); ok {
		return x.AnyTarget
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetApiEndpointTarget() *APIEndpoint {
	if x, ok := m.GetTargetChoice().(*CustomDataDetectionConfig_ApiEndpointTarget); ok {
		return x.ApiEndpointTarget
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetBasePath() string {
	if x, ok := m.GetTargetChoice().(*CustomDataDetectionConfig_BasePath); ok {
		return x.BasePath
	}
	return ""
}

func (m *CustomDataDetectionConfig) GetApiGroup() string {
	if x, ok := m.GetTargetChoice().(*CustomDataDetectionConfig_ApiGroup); ok {
		return x.ApiGroup
	}
	return ""
}

func (m *CustomDataDetectionConfig) GetAllSections() *schema.Empty {
	if x, ok := m.GetSectionChoice().(*CustomDataDetectionConfig_AllSections); ok {
		return x.AllSections
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetAllRequestSections() *schema.Empty {
	if x, ok := m.GetSectionChoice().(*CustomDataDetectionConfig_AllRequestSections); ok {
		return x.AllRequestSections
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetAllResponseSections() *schema.Empty {
	if x, ok := m.GetSectionChoice().(*CustomDataDetectionConfig_AllResponseSections); ok {
		return x.AllResponseSections
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetCustomSections() *CustomSections {
	if x, ok := m.GetSectionChoice().(*CustomDataDetectionConfig_CustomSections); ok {
		return x.CustomSections
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetKeyPattern() *KeyPattern {
	if x, ok := m.GetPatternChoice().(*CustomDataDetectionConfig_KeyPattern); ok {
		return x.KeyPattern
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetValuePattern() *ValuePattern {
	if x, ok := m.GetPatternChoice().(*CustomDataDetectionConfig_ValuePattern); ok {
		return x.ValuePattern
	}
	return nil
}

func (m *CustomDataDetectionConfig) GetKeyValuePattern() *KeyValuePattern {
	if x, ok := m.GetPatternChoice().(*CustomDataDetectionConfig_KeyValuePattern); ok {
		return x.KeyValuePattern
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CustomDataDetectionConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CustomDataDetectionConfig_AnyDomain)(nil),
		(*CustomDataDetectionConfig_SpecificDomain)(nil),
		(*CustomDataDetectionConfig_AnyTarget)(nil),
		(*CustomDataDetectionConfig_ApiEndpointTarget)(nil),
		(*CustomDataDetectionConfig_BasePath)(nil),
		(*CustomDataDetectionConfig_ApiGroup)(nil),
		(*CustomDataDetectionConfig_AllSections)(nil),
		(*CustomDataDetectionConfig_AllRequestSections)(nil),
		(*CustomDataDetectionConfig_AllResponseSections)(nil),
		(*CustomDataDetectionConfig_CustomSections)(nil),
		(*CustomDataDetectionConfig_KeyPattern)(nil),
		(*CustomDataDetectionConfig_ValuePattern)(nil),
		(*CustomDataDetectionConfig_KeyValuePattern)(nil),
	}
}

// CustomSensitiveDataType
//
// x-displayName: "Custom Sensitive Data Type"
// The type/category of the sensitive data this rule detects. e.g. Email, Credit Card etc.
type CustomSensitiveDataType struct {
	// sensitive data type
	//
	// x-required
	// x-displayName: "Type"
	// x-example: "EMAIL"
	// The request is labeled as specified sensitive data type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *CustomSensitiveDataType) Reset()      { *m = CustomSensitiveDataType{} }
func (*CustomSensitiveDataType) ProtoMessage() {}
func (*CustomSensitiveDataType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{27}
}
func (m *CustomSensitiveDataType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomSensitiveDataType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomSensitiveDataType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomSensitiveDataType.Merge(m, src)
}
func (m *CustomSensitiveDataType) XXX_Size() int {
	return m.Size()
}
func (m *CustomSensitiveDataType) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomSensitiveDataType.DiscardUnknown(m)
}

var xxx_messageInfo_CustomSensitiveDataType proto.InternalMessageInfo

func (m *CustomSensitiveDataType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// CustomSensitiveDataRule
//
// x-displayName: "Custom Sensitive Data Detection Rule"
// Custom Sensitive Data Rule Definition.
type CustomSensitiveDataDetectionRule struct {
	// metadata
	//
	// x-required
	// x-displayName: "Metadata"
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// sensitive_data_type
	//
	// x-required
	// x-displayName: "Sensitive Data Type"
	// If the pattern is detected, the request is labeled with specified sensitive data type.
	SensitiveDataType *CustomSensitiveDataType `protobuf:"bytes,2,opt,name=sensitive_data_type,json=sensitiveDataType,proto3" json:"sensitive_data_type,omitempty"`
	// sensitive_data_detection_config
	//
	// x-required
	// x-displayName: "Sensitive Data Detection Config"
	// The custom data detection config specifies targets, scopes & the pattern to be detected.
	SensitiveDataDetectionConfig *CustomDataDetectionConfig `protobuf:"bytes,3,opt,name=sensitive_data_detection_config,json=sensitiveDataDetectionConfig,proto3" json:"sensitive_data_detection_config,omitempty"`
}

func (m *CustomSensitiveDataDetectionRule) Reset()      { *m = CustomSensitiveDataDetectionRule{} }
func (*CustomSensitiveDataDetectionRule) ProtoMessage() {}
func (*CustomSensitiveDataDetectionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{28}
}
func (m *CustomSensitiveDataDetectionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomSensitiveDataDetectionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomSensitiveDataDetectionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomSensitiveDataDetectionRule.Merge(m, src)
}
func (m *CustomSensitiveDataDetectionRule) XXX_Size() int {
	return m.Size()
}
func (m *CustomSensitiveDataDetectionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomSensitiveDataDetectionRule.DiscardUnknown(m)
}

var xxx_messageInfo_CustomSensitiveDataDetectionRule proto.InternalMessageInfo

func (m *CustomSensitiveDataDetectionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CustomSensitiveDataDetectionRule) GetSensitiveDataType() *CustomSensitiveDataType {
	if m != nil {
		return m.SensitiveDataType
	}
	return nil
}

func (m *CustomSensitiveDataDetectionRule) GetSensitiveDataDetectionConfig() *CustomDataDetectionConfig {
	if m != nil {
		return m.SensitiveDataDetectionConfig
	}
	return nil
}

// Sensitive Data Detection Rules
//
// x-displayName: "Sensitive Data Detection Rules"
// Rules to manage/configure sensitive data detection in requests and/or response sections.
type SensitiveDataDetectionRules struct {
	// disabled_built_in_rules
	//
	// x-displayName: "Disabled Built-In Sensitive Data Types"
	// x-example: "[EMAIL, CC]"
	// List of disabled built-in sensitive data detection rules.
	DisabledBuiltInRules []*BuiltInSensitiveDataType `protobuf:"bytes,1,rep,name=disabled_built_in_rules,json=disabledBuiltInRules,proto3" json:"disabled_built_in_rules,omitempty"`
	// custom sensitive data rules
	//
	// x-displayName: "Defined Custom Sensitive Data Types"
	// Rules to detect custom sensitive data in requests and/or responses sections.
	CustomSensitiveDataDetectionRules []*CustomSensitiveDataDetectionRule `protobuf:"bytes,2,rep,name=custom_sensitive_data_detection_rules,json=customSensitiveDataDetectionRules,proto3" json:"custom_sensitive_data_detection_rules,omitempty"`
}

func (m *SensitiveDataDetectionRules) Reset()      { *m = SensitiveDataDetectionRules{} }
func (*SensitiveDataDetectionRules) ProtoMessage() {}
func (*SensitiveDataDetectionRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{29}
}
func (m *SensitiveDataDetectionRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensitiveDataDetectionRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SensitiveDataDetectionRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveDataDetectionRules.Merge(m, src)
}
func (m *SensitiveDataDetectionRules) XXX_Size() int {
	return m.Size()
}
func (m *SensitiveDataDetectionRules) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveDataDetectionRules.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveDataDetectionRules proto.InternalMessageInfo

func (m *SensitiveDataDetectionRules) GetDisabledBuiltInRules() []*BuiltInSensitiveDataType {
	if m != nil {
		return m.DisabledBuiltInRules
	}
	return nil
}

func (m *SensitiveDataDetectionRules) GetCustomSensitiveDataDetectionRules() []*CustomSensitiveDataDetectionRule {
	if m != nil {
		return m.CustomSensitiveDataDetectionRules
	}
	return nil
}

// BuiltInSensitiveDataType
//
// x-displayName: "Built-In Sensitive Data Type"
// x-example: "[EMAIL, CC]"
// Message wrapper for built-in sensitive data type.
type BuiltInSensitiveDataType struct {
	// name
	//
	// x-displayName: "Name"
	// x-example: "[EMAIL, CC]"
	// x-required
	// Built-in rule for sensitive data detection.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BuiltInSensitiveDataType) Reset()      { *m = BuiltInSensitiveDataType{} }
func (*BuiltInSensitiveDataType) ProtoMessage() {}
func (*BuiltInSensitiveDataType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{30}
}
func (m *BuiltInSensitiveDataType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuiltInSensitiveDataType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuiltInSensitiveDataType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuiltInSensitiveDataType.Merge(m, src)
}
func (m *BuiltInSensitiveDataType) XXX_Size() int {
	return m.Size()
}
func (m *BuiltInSensitiveDataType) XXX_DiscardUnknown() {
	xxx_messageInfo_BuiltInSensitiveDataType.DiscardUnknown(m)
}

var xxx_messageInfo_BuiltInSensitiveDataType proto.InternalMessageInfo

func (m *BuiltInSensitiveDataType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DiscoveredAPISettings
//
// x-displayName: "Discovered API Settings"
// x-example: "2"
// Configure Discovered API Settings.
type DiscoveredAPISettings struct {
	// purge_duration_for_inactive_discovered_apis
	//
	// x-displayName: "Purge Duration for Inactive Discovered APIs"
	// x-example: "2"
	// Inactive discovered API will be deleted after configured duration.
	PurgeDurationForInactiveDiscoveredApis uint32 `protobuf:"varint,1,opt,name=purge_duration_for_inactive_discovered_apis,json=purgeDurationForInactiveDiscoveredApis,proto3" json:"purge_duration_for_inactive_discovered_apis,omitempty"`
}

func (m *DiscoveredAPISettings) Reset()      { *m = DiscoveredAPISettings{} }
func (*DiscoveredAPISettings) ProtoMessage() {}
func (*DiscoveredAPISettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{31}
}
func (m *DiscoveredAPISettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredAPISettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DiscoveredAPISettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredAPISettings.Merge(m, src)
}
func (m *DiscoveredAPISettings) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredAPISettings) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredAPISettings.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredAPISettings proto.InternalMessageInfo

func (m *DiscoveredAPISettings) GetPurgeDurationForInactiveDiscoveredApis() uint32 {
	if m != nil {
		return m.PurgeDurationForInactiveDiscoveredApis
	}
	return 0
}

func init() {
	proto.RegisterEnum("ves.io.schema.app_type.FeatureType", FeatureType_name, FeatureType_value)
	proto.RegisterEnum("ves.io.schema.app_type.ApiEndpointInfoRequest", ApiEndpointInfoRequest_name, ApiEndpointInfoRequest_value)
	proto.RegisterEnum("ves.io.schema.app_type.APIType", APIType_name, APIType_value)
	proto.RegisterEnum("ves.io.schema.app_type.SensitiveDataType", SensitiveDataType_name, SensitiveDataType_value)
	proto.RegisterEnum("ves.io.schema.app_type.APIEPPIILevel", APIEPPIILevel_name, APIEPPIILevel_value)
	proto.RegisterEnum("ves.io.schema.app_type.APIEPSecurityRisk", APIEPSecurityRisk_name, APIEPSecurityRisk_value)
	proto.RegisterEnum("ves.io.schema.app_type.APIEPCategory", APIEPCategory_name, APIEPCategory_value)
	proto.RegisterEnum("ves.io.schema.app_type.AuthenticationState", AuthenticationState_name, AuthenticationState_value)
	proto.RegisterEnum("ves.io.schema.app_type.AuthenticationType", AuthenticationType_name, AuthenticationType_value)
	proto.RegisterEnum("ves.io.schema.app_type.AuthenticationLocation", AuthenticationLocation_name, AuthenticationLocation_value)
	proto.RegisterEnum("ves.io.schema.app_type.SensitiveDataDetectionRuleType", SensitiveDataDetectionRuleType_name, SensitiveDataDetectionRuleType_value)
	proto.RegisterType((*Feature)(nil), "ves.io.schema.app_type.Feature")
	proto.RegisterType((*BusinessLogicMarkupSetting)(nil), "ves.io.schema.app_type.BusinessLogicMarkupSetting")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.app_type.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.app_type.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.app_type.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.app_type.GetSpecType")
	proto.RegisterType((*APIEPDynExample)(nil), "ves.io.schema.app_type.APIEPDynExample")
	proto.RegisterType((*APIEPInfo)(nil), "ves.io.schema.app_type.APIEPInfo")
	proto.RegisterType((*RiskScore)(nil), "ves.io.schema.app_type.RiskScore")
	proto.RegisterType((*AuthenticationTypeLocPair)(nil), "ves.io.schema.app_type.AuthenticationTypeLocPair")
	proto.RegisterType((*PDFSpec)(nil), "ves.io.schema.app_type.PDFSpec")
	proto.RegisterType((*PDFStat)(nil), "ves.io.schema.app_type.PDFStat")
	proto.RegisterType((*APIEPPDFInfo)(nil), "ves.io.schema.app_type.APIEPPDFInfo")
	proto.RegisterType((*OverrideInfo)(nil), "ves.io.schema.app_type.OverrideInfo")
	proto.RegisterType((*SchemaStruct)(nil), "ves.io.schema.app_type.SchemaStruct")
	proto.RegisterType((*SensitiveData)(nil), "ves.io.schema.app_type.SensitiveData")
	proto.RegisterType((*AuthData)(nil), "ves.io.schema.app_type.AuthData")
	proto.RegisterType((*Authentication)(nil), "ves.io.schema.app_type.Authentication")
	proto.RegisterMapType((map[string]*AuthData)(nil), "ves.io.schema.app_type.Authentication.AuthDataPerDefinitionEntry")
	proto.RegisterType((*RequestSchema)(nil), "ves.io.schema.app_type.RequestSchema")
	proto.RegisterMapType((map[string]*SchemaStruct)(nil), "ves.io.schema.app_type.RequestSchema.BodyPerContentTypeEntry")
	proto.RegisterType((*ResponseSchema)(nil), "ves.io.schema.app_type.ResponseSchema")
	proto.RegisterMapType((map[string]*SchemaStruct)(nil), "ves.io.schema.app_type.ResponseSchema.BodyPerContentTypeEntry")
	proto.RegisterType((*DiscoveredSchema)(nil), "ves.io.schema.app_type.DiscoveredSchema")
	proto.RegisterMapType((map[string]*ResponseSchema)(nil), "ves.io.schema.app_type.DiscoveredSchema.ResponseSchemaPerRspCodeEntry")
	proto.RegisterType((*KeyPattern)(nil), "ves.io.schema.app_type.KeyPattern")
	proto.RegisterType((*ValuePattern)(nil), "ves.io.schema.app_type.ValuePattern")
	proto.RegisterType((*KeyValuePattern)(nil), "ves.io.schema.app_type.KeyValuePattern")
	proto.RegisterType((*CustomSections)(nil), "ves.io.schema.app_type.CustomSections")
	proto.RegisterType((*APIEndpoint)(nil), "ves.io.schema.app_type.APIEndpoint")
	proto.RegisterType((*CustomDataDetectionConfig)(nil), "ves.io.schema.app_type.CustomDataDetectionConfig")
	proto.RegisterType((*CustomSensitiveDataType)(nil), "ves.io.schema.app_type.CustomSensitiveDataType")
	proto.RegisterType((*CustomSensitiveDataDetectionRule)(nil), "ves.io.schema.app_type.CustomSensitiveDataDetectionRule")
	proto.RegisterType((*SensitiveDataDetectionRules)(nil), "ves.io.schema.app_type.SensitiveDataDetectionRules")
	proto.RegisterType((*BuiltInSensitiveDataType)(nil), "ves.io.schema.app_type.BuiltInSensitiveDataType")
	proto.RegisterType((*DiscoveredAPISettings)(nil), "ves.io.schema.app_type.DiscoveredAPISettings")
}

func init() {
	proto.RegisterFile("ves.io/schema/app_type/types.proto", fileDescriptor_f883938c2c15f50a)
}

var fileDescriptor_f883938c2c15f50a = []byte{
	// 4484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5b, 0x5d, 0x6c, 0x1b, 0x47,
	0x7e, 0xd7, 0x90, 0x94, 0x44, 0xfe, 0x49, 0x49, 0xab, 0x91, 0x2c, 0x53, 0xb4, 0x4d, 0xf3, 0x98,
	0x2f, 0x45, 0xb1, 0xa9, 0x58, 0x39, 0xe7, 0xc3, 0x97, 0xfa, 0xca, 0x8f, 0xb5, 0x44, 0x8b, 0x22,
	0x99, 0x25, 0x65, 0xd7, 0xe9, 0xc7, 0x62, 0x45, 0x8e, 0xa8, 0xad, 0x48, 0xee, 0x7a, 0x77, 0xa9,
	0x33, 0x03, 0x5c, 0x10, 0x14, 0xe8, 0x21, 0x38, 0xa0, 0xc0, 0x21, 0x2f, 0x7d, 0xe8, 0x4b, 0xd1,
	0x16, 0x69, 0xd1, 0xa2, 0x40, 0x8b, 0x16, 0x28, 0x10, 0x05, 0x85, 0x71, 0xc0, 0x01, 0x87, 0x6b,
	0x1f, 0xfc, 0x50, 0xb4, 0x69, 0x1f, 0xda, 0x8b, 0xf3, 0x92, 0xeb, 0x43, 0x11, 0xdc, 0xd3, 0xb5,
	0xc0, 0x01, 0xc5, 0xcc, 0xec, 0x2e, 0xb9, 0x14, 0x49, 0x51, 0xbd, 0xb4, 0x3d, 0xdc, 0x8b, 0xc0,
	0xfd, 0x7f, 0xfc, 0xe6, 0xff, 0x35, 0xf3, 0x9f, 0x99, 0x5d, 0x41, 0xf2, 0x98, 0x98, 0x29, 0x55,
	0xdb, 0x30, 0x6b, 0x87, 0xa4, 0xa5, 0x6c, 0x28, 0xba, 0x2e, 0x5b, 0x5d, 0x9d, 0x6c, 0xd0, 0x3f,
	0x66, 0x4a, 0x37, 0x34, 0x4b, 0xc3, 0x2b, 0x5c, 0x26, 0xc5, 0x65, 0x52, 0x8e, 0x4c, 0xec, 0x7a,
	0x43, 0xb5, 0x0e, 0x3b, 0xfb, 0xa9, 0x9a, 0xd6, 0xda, 0x68, 0x68, 0x0d, 0x6d, 0x83, 0x89, 0xef,
	0x77, 0x0e, 0xd8, 0x13, 0x7b, 0x60, 0xbf, 0x38, 0x4c, 0xec, 0x6a, 0x43, 0xd3, 0x1a, 0x4d, 0xd2,
	0x93, 0xb2, 0xd4, 0x16, 0x31, 0x2d, 0xa5, 0xa5, 0xdb, 0x02, 0x97, 0xbc, 0xb6, 0x68, 0xba, 0xa5,
	0x6a, 0x6d, 0xdb, 0x88, 0xd8, 0xaa, 0x97, 0xd9, 0x67, 0x5f, 0xec, 0xb2, 0x97, 0x75, 0xac, 0x34,
	0xd5, 0xba, 0x62, 0x11, 0x9b, 0x9b, 0x18, 0xe0, 0xaa, 0xe4, 0x1b, 0xb2, 0x07, 0x3a, 0x99, 0x81,
	0xd9, 0x3b, 0x44, 0xb1, 0x3a, 0x06, 0xc1, 0xaf, 0x41, 0x80, 0x22, 0x47, 0x51, 0x02, 0xad, 0xcd,
	0x6f, 0x3e, 0x93, 0x1a, 0xee, 0x79, 0xca, 0x16, 0xaf, 0x76, 0x75, 0x22, 0x31, 0x85, 0xe4, 0x1f,
	0xf8, 0x21, 0x96, 0xe9, 0x98, 0x6a, 0x9b, 0x98, 0x66, 0x41, 0x6b, 0xa8, 0xb5, 0x5d, 0xc5, 0x38,
	0xea, 0xe8, 0x15, 0x62, 0x59, 0x6a, 0xbb, 0x81, 0x5f, 0x86, 0xd9, 0xba, 0x6a, 0x2a, 0xfb, 0x4d,
	0x0e, 0x1d, 0xde, 0x5c, 0x1e, 0x80, 0x16, 0x5b, 0xba, 0xd5, 0xdd, 0x9e, 0x92, 0x1c, 0x31, 0x9c,
	0x82, 0x19, 0xd2, 0x66, 0x0a, 0xbe, 0xb1, 0x0a, 0xb6, 0x14, 0x7e, 0x17, 0xe2, 0x26, 0x69, 0x9b,
	0xaa, 0xa5, 0x1e, 0x13, 0xb9, 0xae, 0x58, 0x8a, 0x5c, 0x27, 0x16, 0xa9, 0x51, 0x3f, 0x65, 0xa3,
	0xd3, 0x24, 0x66, 0x34, 0xc0, 0x70, 0x5e, 0x19, 0xe5, 0x53, 0xc5, 0xd1, 0xce, 0x29, 0x96, 0x92,
	0x73, 0x74, 0x25, 0xaa, 0x9a, 0x09, 0x7c, 0x7e, 0x82, 0x90, 0x74, 0xc9, 0x1c, 0x2d, 0x82, 0x8f,
	0xe0, 0x62, 0x5d, 0x35, 0x6b, 0xda, 0x31, 0x31, 0x48, 0x5d, 0x56, 0x74, 0x55, 0x36, 0xb9, 0xef,
	0x66, 0x74, 0x9a, 0x0d, 0x7c, 0x7d, 0xd4, 0xc0, 0x39, 0x57, 0x2d, 0x5d, 0xce, 0xdb, 0x01, 0x33,
	0x33, 0x81, 0x2f, 0xe8, 0x90, 0x17, 0x7a, 0x98, 0x69, 0x5d, 0x75, 0x98, 0xb7, 0x66, 0x7e, 0x7c,
	0xdb, 0xff, 0xca, 0xb5, 0x9b, 0x99, 0x17, 0xe0, 0x52, 0x93, 0x28, 0x46, 0x5b, 0x3e, 0x30, 0xb4,
	0x96, 0x6c, 0x90, 0xba, 0x6a, 0x90, 0x9a, 0x25, 0x5b, 0x86, 0x72, 0x70, 0xa0, 0xd6, 0x70, 0xf0,
	0xf1, 0x09, 0x42, 0x4f, 0x4e, 0x90, 0xff, 0x6e, 0x20, 0xe8, 0x17, 0x02, 0xc9, 0xdf, 0xf5, 0xc1,
	0xfc, 0x56, 0x53, 0xdb, 0x57, 0x9a, 0x15, 0x9d, 0xd4, 0x68, 0xf6, 0xf0, 0x16, 0x04, 0x0f, 0x78,
	0x32, 0xcd, 0x28, 0x4a, 0xf8, 0xd7, 0xc2, 0x9b, 0x57, 0xcf, 0x48, 0x7a, 0x06, 0x3e, 0xfa, 0xd1,
	0x63, 0xff, 0xf4, 0x07, 0xc8, 0x17, 0x45, 0x92, 0xab, 0x8c, 0x3b, 0x70, 0x65, 0xdf, 0xce, 0xbf,
	0xdc, 0xa4, 0x05, 0x20, 0xb7, 0x58, 0x05, 0x38, 0x61, 0xb0, 0xd3, 0xb8, 0x39, 0x0a, 0x7d, 0x74,
	0xf1, 0x48, 0xb1, 0xfd, 0x91, 0xbc, 0x5b, 0xe2, 0x77, 0x4f, 0x50, 0x1a, 0x12, 0xb0, 0x9a, 0xd6,
	0xf5, 0xa6, 0x5a, 0x53, 0x68, 0x42, 0x12, 0xd4, 0xb3, 0xc4, 0x1d, 0xc7, 0x32, 0x74, 0x63, 0x0d,
	0xc1, 0x15, 0x58, 0x49, 0x97, 0xf3, 0x09, 0x27, 0xd6, 0xdd, 0x84, 0x13, 0x4b, 0x8c, 0x36, 0xd7,
	0x50, 0xf2, 0x9f, 0x10, 0xcc, 0x67, 0x0d, 0xa2, 0x58, 0xc4, 0x8d, 0xcc, 0xd7, 0xce, 0x1d, 0x99,
	0xff, 0xff, 0x68, 0x2c, 0xfe, 0xe0, 0xf6, 0x40, 0x82, 0x93, 0x9f, 0x20, 0x58, 0x90, 0x88, 0xde,
	0x54, 0x6a, 0xbf, 0x70, 0xae, 0xfd, 0x03, 0x82, 0xf0, 0x16, 0xb1, 0x7e, 0xd1, 0xdc, 0x32, 0x61,
	0x21, 0x5d, 0xce, 0x8b, 0xe5, 0x5c, 0xb7, 0x2d, 0x3e, 0x52, 0x5a, 0x7a, 0x93, 0xe0, 0x1b, 0xb0,
	0x5c, 0xd3, 0x5a, 0xba, 0xd6, 0x26, 0x6d, 0x4b, 0x56, 0xeb, 0xa4, 0x6d, 0xa9, 0x07, 0x2a, 0x31,
	0xd8, 0x5a, 0x1a, 0x92, 0x96, 0x5c, 0x5e, 0xde, 0x65, 0xe1, 0xeb, 0x80, 0x7b, 0x2a, 0x84, 0xe3,
	0x98, 0x51, 0x5f, 0xc2, 0xbf, 0x16, 0x92, 0x16, 0x5d, 0x8e, 0x3d, 0x80, 0x99, 0xfc, 0x51, 0x18,
	0x42, 0x6c, 0xd4, 0x7c, 0xfb, 0x40, 0xc3, 0xcf, 0xc0, 0x5c, 0x4d, 0x6b, 0x36, 0x15, 0xdd, 0x24,
	0x75, 0xb9, 0x63, 0x34, 0x99, 0xf3, 0x21, 0x29, 0xe2, 0x12, 0xf7, 0x8c, 0x26, 0x5e, 0x81, 0x99,
	0x16, 0xb1, 0x0e, 0xb5, 0x7a, 0xd4, 0xcf, 0xb8, 0xf6, 0x13, 0xbe, 0x0b, 0x91, 0x7a, 0xb7, 0xdd,
	0x1b, 0x33, 0xc0, 0x52, 0xf1, 0xc2, 0xa8, 0xc0, 0x0d, 0xf8, 0x2a, 0x85, 0xeb, 0xee, 0x6f, 0x13,
	0x7f, 0x1d, 0x82, 0x7a, 0xfd, 0x40, 0x56, 0xdb, 0x07, 0x9a, 0xbd, 0x8c, 0x3e, 0x3b, 0x16, 0xa7,
	0x9c, 0xbb, 0x43, 0x1d, 0x90, 0x66, 0xf5, 0xfa, 0x01, 0xf3, 0xe4, 0x3a, 0x60, 0x83, 0x3c, 0xec,
	0x10, 0xd3, 0x92, 0x75, 0x62, 0xd4, 0x48, 0xdb, 0x52, 0x1a, 0x24, 0x3a, 0x93, 0x40, 0x6b, 0x3e,
	0x69, 0xd1, 0xe6, 0x94, 0x5d, 0x06, 0x5e, 0x87, 0xc5, 0x43, 0xc5, 0x94, 0xd9, 0xa2, 0x6a, 0xc9,
	0x7c, 0x88, 0xe8, 0x6c, 0x02, 0xad, 0x05, 0xa5, 0x85, 0x43, 0xc5, 0x2c, 0x30, 0x7a, 0x85, 0x91,
	0x71, 0x1a, 0x82, 0x35, 0xc5, 0x22, 0x0d, 0xcd, 0xe8, 0x46, 0x83, 0x09, 0xff, 0xda, 0xfc, 0xe6,
	0x73, 0x63, 0x6d, 0xcb, 0xda, 0xc2, 0x92, 0xab, 0x86, 0x2f, 0x41, 0x68, 0x5f, 0x31, 0x89, 0xac,
	0x2b, 0xd6, 0x61, 0x34, 0xc4, 0xa2, 0x18, 0xa4, 0x84, 0xb2, 0x62, 0x1d, 0xe2, 0x0c, 0x84, 0x74,
	0x55, 0x95, 0x9b, 0xe4, 0x98, 0x34, 0xa3, 0xc0, 0x1a, 0xf2, 0xf8, 0x01, 0xca, 0xf9, 0x7c, 0x81,
	0x0a, 0x4b, 0x41, 0x5d, 0x55, 0xd9, 0x2f, 0x5c, 0x84, 0x39, 0x93, 0xd4, 0x3a, 0x86, 0x6a, 0x75,
	0x65, 0x43, 0x35, 0x8f, 0xa2, 0x61, 0x86, 0xf3, 0xe2, 0x58, 0x9c, 0x8a, 0xad, 0x21, 0xa9, 0xe6,
	0x91, 0x14, 0x31, 0xfb, 0x9e, 0x70, 0x05, 0x2e, 0x28, 0xb5, 0x1a, 0x9d, 0x23, 0x4e, 0x63, 0xea,
	0xca, 0x74, 0x1b, 0x13, 0x8d, 0xb0, 0xe4, 0xc4, 0x52, 0x7c, 0x8f, 0x93, 0x72, 0xf6, 0x38, 0xa9,
	0xaa, 0xb3, 0xc7, 0xc9, 0xf8, 0x9f, 0x7c, 0x13, 0x49, 0x4b, 0x5c, 0xdb, 0x5d, 0x86, 0x29, 0x1b,
	0x47, 0x61, 0xb6, 0xae, 0xb5, 0x14, 0xb5, 0x6d, 0x46, 0xe7, 0x58, 0x7d, 0x3a, 0x8f, 0xb8, 0x0a,
	0xf3, 0xde, 0xa6, 0x1e, 0x9d, 0x67, 0x81, 0x7e, 0x71, 0xa2, 0x26, 0x4e, 0x67, 0x53, 0x86, 0x76,
	0xa9, 0x39, 0x4f, 0xe3, 0xc6, 0x2f, 0xc3, 0xf2, 0xc0, 0x56, 0x81, 0xed, 0xa6, 0xa2, 0xcb, 0x6c,
	0x70, 0x6c, 0x0e, 0x62, 0x98, 0x78, 0x0d, 0x04, 0x93, 0xd4, 0x64, 0x72, 0x4c, 0xda, 0x96, 0x29,
	0xd7, 0xb4, 0x4e, 0xdb, 0x8a, 0x2e, 0x24, 0xd0, 0xda, 0xb4, 0x34, 0x6f, 0x92, 0x9a, 0xc8, 0xc8,
	0x59, 0x4a, 0xc5, 0xcf, 0xc1, 0xbc, 0x5d, 0x55, 0x8e, 0x9c, 0xc0, 0xe4, 0xe6, 0x1c, 0x2a, 0x17,
	0xfb, 0x0d, 0x58, 0x56, 0x3a, 0xd6, 0x21, 0x9d, 0xad, 0xbc, 0x67, 0xc9, 0xa6, 0xa5, 0x58, 0x24,
	0xba, 0xc8, 0xd2, 0xf3, 0xd2, 0xc8, 0xf4, 0x78, 0x74, 0x2a, 0x54, 0x45, 0x5a, 0x52, 0x4e, 0x13,
	0x71, 0xfd, 0x14, 0x3e, 0x77, 0x11, 0xb3, 0xb9, 0x78, 0x63, 0x32, 0x7c, 0xea, 0x7b, 0x41, 0xab,
	0x95, 0x15, 0xd5, 0x18, 0x1c, 0x85, 0x87, 0xe5, 0x97, 0x01, 0x68, 0x51, 0xc9, 0x66, 0x4d, 0x33,
	0x48, 0x74, 0x89, 0x95, 0xc0, 0x57, 0x46, 0x61, 0xd3, 0xfa, 0xa9, 0x50, 0x41, 0x29, 0x64, 0x38,
	0x3f, 0xf1, 0x15, 0x00, 0xba, 0x55, 0x6a, 0x18, 0x5a, 0x47, 0x37, 0xa3, 0x2b, 0x2c, 0x01, 0x21,
	0x45, 0x57, 0xb7, 0x18, 0x01, 0xdf, 0x86, 0x20, 0x65, 0xb3, 0x2d, 0xe9, 0x45, 0x16, 0x9a, 0xab,
	0x63, 0x2a, 0xd7, 0xcd, 0xf7, 0xac, 0xa2, 0xab, 0xac, 0x23, 0xc4, 0x01, 0x14, 0xcb, 0x32, 0xd4,
	0xfd, 0x8e, 0x45, 0xcc, 0x68, 0x94, 0xc1, 0xf7, 0x51, 0xe8, 0x3a, 0xc7, 0x71, 0x58, 0xf8, 0x3b,
	0x66, 0x74, 0x95, 0xaf, 0x73, 0x9c, 0x58, 0x61, 0x34, 0x9c, 0x80, 0x30, 0x5d, 0x2f, 0x9b, 0xaa,
	0xd2, 0xae, 0x11, 0x33, 0x1a, 0x63, 0x28, 0xfd, 0x24, 0x5a, 0xc0, 0xa4, 0xdd, 0xa0, 0x4b, 0x7c,
	0xf4, 0x12, 0x2f, 0x60, 0xfb, 0x11, 0xaf, 0x42, 0xd0, 0x20, 0x0f, 0x65, 0x83, 0xe6, 0xf6, 0x32,
	0x5b, 0x74, 0x66, 0x0d, 0xf2, 0x50, 0xa2, 0x29, 0xba, 0x0a, 0xe1, 0x96, 0xf2, 0x48, 0x6e, 0x2a,
	0x16, 0x69, 0xd7, 0xba, 0xd1, 0x2b, 0x8c, 0x0b, 0x2d, 0xe5, 0x51, 0x81, 0x53, 0xa8, 0x80, 0x72,
	0xdc, 0x70, 0x05, 0xe2, 0x5c, 0x40, 0x39, 0x6e, 0x38, 0x02, 0xaf, 0xc2, 0xc5, 0x81, 0x3a, 0x6e,
	0x6a, 0x3c, 0x3d, 0xd1, 0xab, 0xcc, 0x8c, 0x0b, 0x9e, 0x52, 0x2e, 0xd8, 0xcc, 0xe4, 0x21, 0x84,
	0xdc, 0x64, 0xe0, 0x65, 0x98, 0xe6, 0xe9, 0x43, 0x0c, 0x9f, 0x3f, 0x60, 0x11, 0x82, 0x26, 0x39,
	0x26, 0x74, 0xde, 0xb3, 0xb5, 0xff, 0x5c, 0x4b, 0x86, 0xab, 0x9a, 0xfc, 0x3e, 0x82, 0xd5, 0x91,
	0x35, 0x85, 0x33, 0x9e, 0xc3, 0xc6, 0xfa, 0xe4, 0x45, 0xc9, 0x92, 0xcc, 0x74, 0xf1, 0x5d, 0x08,
	0xba, 0x4e, 0x73, 0x43, 0x53, 0x93, 0xe1, 0x38, 0xd1, 0x90, 0x5c, 0x7d, 0xba, 0x1a, 0xd3, 0x2a,
	0xe7, 0xe5, 0xc6, 0x7b, 0x5a, 0x90, 0x12, 0x58, 0x57, 0x7e, 0x03, 0x66, 0xcb, 0xb9, 0x3b, 0xb4,
	0x49, 0xe3, 0x08, 0xa0, 0x47, 0x76, 0xb8, 0xd0, 0x23, 0x5a, 0x1e, 0xba, 0xa1, 0xed, 0x2b, 0xfb,
	0x6a, 0xd3, 0x89, 0x96, 0x4f, 0xea, 0x27, 0x25, 0xbf, 0xc6, 0x55, 0x2d, 0xc5, 0xa2, 0xf5, 0x40,
	0xfb, 0x59, 0x8b, 0x28, 0x6d, 0x1b, 0x81, 0x76, 0xaa, 0x5d, 0xa2, 0xb4, 0xf1, 0x05, 0x98, 0xa1,
	0xac, 0x37, 0x6e, 0xda, 0x10, 0xd3, 0x7a, 0xfd, 0xe0, 0x8d, 0x9b, 0xc9, 0xdf, 0x0b, 0x41, 0xa4,
	0xbf, 0xb5, 0xe1, 0x0c, 0x44, 0x9c, 0x8e, 0x66, 0xaa, 0xef, 0x90, 0xb3, 0x76, 0x3a, 0xb6, 0xd1,
	0x52, 0xd8, 0x56, 0xaa, 0xa8, 0xef, 0x10, 0x9c, 0x83, 0x39, 0x83, 0x98, 0xba, 0xd6, 0x36, 0x09,
	0x07, 0xf1, 0x4d, 0x06, 0x12, 0x71, 0xb4, 0x18, 0xca, 0x0e, 0x2c, 0xda, 0xc5, 0x29, 0x7f, 0x43,
	0xb5, 0x0e, 0xf9, 0x02, 0xed, 0x9f, 0x0c, 0x69, 0xc1, 0xd6, 0xbc, 0xaf, 0x5a, 0x87, 0x6c, 0x51,
	0xde, 0x02, 0x87, 0x24, 0xb7, 0x35, 0x0e, 0x15, 0x98, 0x0c, 0x6a, 0xce, 0xd6, 0x2b, 0x6a, 0x0c,
	0xa8, 0x2f, 0x3e, 0x6c, 0xda, 0x4d, 0x9f, 0x2f, 0x3e, 0x6c, 0x6e, 0xde, 0x06, 0x20, 0x86, 0xa1,
	0x19, 0x1c, 0x61, 0x66, 0x32, 0x84, 0x10, 0x53, 0x61, 0xfa, 0x65, 0x58, 0x72, 0xe3, 0x6b, 0x1d,
	0x1a, 0x5a, 0xa7, 0x71, 0xa8, 0x77, 0xac, 0xe8, 0xec, 0x64, 0x40, 0xd8, 0xd1, 0xad, 0xba, 0xaa,
	0xb8, 0x08, 0xb8, 0x46, 0xcf, 0x27, 0x6c, 0x29, 0x77, 0x7a, 0x6a, 0x34, 0x38, 0x59, 0xd7, 0x5d,
	0x74, 0x54, 0x5d, 0x3a, 0xcd, 0x5d, 0x7f, 0x15, 0xb1, 0xf5, 0x8f, 0xed, 0x40, 0xce, 0xb0, 0xcf,
	0x52, 0x2c, 0x69, 0xa1, 0xaf, 0x94, 0x58, 0x55, 0xef, 0x02, 0xf6, 0x94, 0x13, 0x47, 0x83, 0xc9,
	0xd0, 0x84, 0xfe, 0x9a, 0x62, 0x70, 0x55, 0x58, 0x39, 0x55, 0x57, 0x1c, 0x32, 0x3c, 0x19, 0xe4,
	0xd2, 0x40, 0x71, 0x31, 0xd4, 0x32, 0x2c, 0x0f, 0x14, 0x18, 0xc7, 0x8c, 0x4c, 0x86, 0xb9, 0xe8,
	0xa9, 0x32, 0x86, 0xd8, 0x17, 0x43, 0x5a, 0x27, 0x1c, 0x6e, 0xee, 0x7c, 0x31, 0xa4, 0xe5, 0xc2,
	0xc0, 0xb6, 0x60, 0xa1, 0x57, 0x72, 0x1c, 0x6a, 0x7e, 0x32, 0xa8, 0x39, 0xb7, 0xee, 0x18, 0xd0,
	0x03, 0x88, 0x0e, 0xa9, 0x3d, 0x8e, 0xb8, 0x30, 0x19, 0xe2, 0xca, 0xe9, 0x02, 0xa4, 0xf4, 0x5b,
	0xc2, 0x8f, 0x6f, 0xcf, 0xdd, 0xb8, 0xb6, 0x79, 0xed, 0xab, 0xd7, 0x5e, 0xb9, 0x76, 0xf3, 0xda,
	0xab, 0xd7, 0x5e, 0x4b, 0xee, 0x43, 0xa4, 0x74, 0x4c, 0x0c, 0x43, 0xad, 0x13, 0xb6, 0x38, 0x8d,
	0x3a, 0xa8, 0xf8, 0x46, 0x1f, 0x54, 0xae, 0x42, 0xd8, 0x24, 0x96, 0x5c, 0xef, 0xb6, 0x95, 0x96,
	0x5a, 0x63, 0xeb, 0x6e, 0x50, 0x02, 0x93, 0x58, 0x39, 0x4e, 0x49, 0x66, 0x20, 0x52, 0xb1, 0xfb,
	0xb1, 0xd1, 0xa9, 0x59, 0x38, 0x06, 0x41, 0xf7, 0x6c, 0x81, 0x58, 0x9f, 0x73, 0x9f, 0xe9, 0x99,
	0xc4, 0xde, 0xb4, 0xf3, 0x11, 0xed, 0xa7, 0xe4, 0xf7, 0x7c, 0x30, 0xe7, 0xd9, 0x1b, 0xe2, 0xb4,
	0xa7, 0xf9, 0x9c, 0x73, 0x43, 0xc9, 0x7b, 0x4f, 0x0a, 0x96, 0x86, 0xec, 0x23, 0xd9, 0x39, 0x25,
	0x24, 0x2d, 0x9e, 0xda, 0x46, 0xd2, 0x6d, 0x82, 0xc9, 0xaf, 0x8c, 0x6c, 0xeb, 0x9c, 0x47, 0xda,
	0x84, 0x0f, 0x54, 0xd2, 0x74, 0x4e, 0x52, 0xfc, 0xc1, 0xe3, 0x68, 0x60, 0xc0, 0xd1, 0x0a, 0x84,
	0x8c, 0x4e, 0x93, 0xf0, 0x11, 0x67, 0x98, 0x0f, 0xaf, 0x9e, 0xff, 0x66, 0x8b, 0x5d, 0xe0, 0x05,
	0x0d, 0xfb, 0xd7, 0xe0, 0x4e, 0x67, 0xf6, 0xd4, 0x4e, 0x27, 0xf9, 0x2e, 0x04, 0x69, 0x1b, 0x65,
	0x11, 0xa4, 0xee, 0x74, 0x5a, 0x2d, 0xc5, 0xe8, 0xda, 0xe7, 0x50, 0xe7, 0x11, 0xbf, 0xe9, 0xc9,
	0xc2, 0x98, 0x33, 0x5b, 0x7f, 0x5e, 0x9d, 0x5c, 0x51, 0xb7, 0xd5, 0xb6, 0xa9, 0x36, 0x0e, 0x2d,
	0xd3, 0xe9, 0xc2, 0xce, 0x73, 0xf2, 0x27, 0x08, 0xe6, 0xbd, 0x7d, 0x1c, 0xbf, 0x03, 0x51, 0xd6,
	0xb5, 0x59, 0x02, 0x74, 0x62, 0xc8, 0x75, 0x72, 0xa0, 0xb6, 0x55, 0x16, 0x66, 0xde, 0x1b, 0xd3,
	0x93, 0xed, 0x08, 0x52, 0x8e, 0x67, 0x65, 0x62, 0xe4, 0x5c, 0x0c, 0xb1, 0x6d, 0x19, 0x5d, 0xe9,
	0x82, 0x32, 0x8c, 0x17, 0xfb, 0x4d, 0x88, 0x8d, 0x56, 0xc2, 0x02, 0xf8, 0x8f, 0x88, 0x13, 0x1c,
	0xfa, 0x13, 0xbf, 0x0a, 0xd3, 0xc7, 0x4a, 0xb3, 0xe3, 0xdc, 0x69, 0x26, 0xc6, 0x19, 0x46, 0x41,
	0x25, 0x2e, 0x7e, 0xcb, 0xf7, 0x3a, 0x4a, 0xfe, 0x8d, 0x1f, 0xe6, 0x24, 0x7b, 0xe1, 0xe5, 0x81,
	0xba, 0x0d, 0xb3, 0x87, 0x44, 0xa9, 0x13, 0xc3, 0xb4, 0x2f, 0x55, 0x27, 0x8b, 0xb3, 0xa3, 0x84,
	0x75, 0xb8, 0xb0, 0xaf, 0xd5, 0xbb, 0x2c, 0x68, 0x35, 0xad, 0x6d, 0xd1, 0x39, 0xcb, 0xea, 0x89,
	0xef, 0x06, 0x7e, 0x69, 0xe4, 0x4e, 0xbe, 0xdf, 0x8a, 0x54, 0x46, 0xab, 0x77, 0xcb, 0xc4, 0xc8,
	0x72, 0x00, 0x5a, 0x47, 0x3c, 0x64, 0x78, 0xff, 0x14, 0x03, 0x6f, 0x41, 0xe4, 0x61, 0x87, 0x9e,
	0x19, 0x75, 0xc5, 0x50, 0x5a, 0x3c, 0xbd, 0x93, 0x9a, 0x1d, 0x66, 0x9a, 0x65, 0xa6, 0x48, 0x5d,
	0xaf, 0x69, 0xda, 0x91, 0xea, 0x5e, 0xeb, 0x4e, 0xe8, 0xba, 0xad, 0x14, 0x3b, 0x82, 0x8b, 0x23,
	0xec, 0x1e, 0x92, 0xb5, 0x5b, 0xde, 0xac, 0x4d, 0x36, 0x54, 0x5f, 0xe6, 0xfe, 0xc2, 0x07, 0xf3,
	0x92, 0xd3, 0xe4, 0xbe, 0x9c, 0xd4, 0x3d, 0x1c, 0x9f, 0xba, 0xdb, 0xa3, 0x53, 0xd7, 0x6f, 0xc6,
	0x79, 0x72, 0xf7, 0x7f, 0x1b, 0xb2, 0x0f, 0xfd, 0x20, 0xf4, 0xee, 0xc5, 0xed, 0xa0, 0x15, 0xdc,
	0xb3, 0xb5, 0x73, 0x33, 0xc3, 0x63, 0xf7, 0xdc, 0x44, 0x85, 0xea, 0x1e, 0xc1, 0x6d, 0xb4, 0x6f,
	0x21, 0xb8, 0xdc, 0xdb, 0xb5, 0xf0, 0x53, 0x20, 0x0d, 0xa7, 0x61, 0xea, 0x72, 0x4d, 0xab, 0x3b,
	0xa1, 0xbc, 0x73, 0xf6, 0xb5, 0xbd, 0x1d, 0x4c, 0x6f, 0x6c, 0xcb, 0xc4, 0x90, 0x4c, 0x3d, 0xab,
	0xd5, 0xed, 0x90, 0xba, 0x4d, 0x79, 0x90, 0x8d, 0xef, 0xd0, 0x6d, 0xb4, 0x69, 0xc9, 0x1d, 0xbd,
	0xae, 0x58, 0xa4, 0xce, 0xef, 0x53, 0xfc, 0x67, 0xed, 0xec, 0xe8, 0x0e, 0xda, 0xb4, 0xf6, 0xb8,
	0x0e, 0xa5, 0xc6, 0x4c, 0xb8, 0x32, 0xd6, 0x84, 0x21, 0x69, 0x7a, 0xd3, 0x9b, 0xa6, 0xe7, 0x27,
	0x2b, 0x9b, 0xfe, 0x44, 0xfd, 0x31, 0x02, 0xd8, 0x21, 0xdd, 0xb2, 0x62, 0x59, 0xc4, 0x68, 0xe3,
	0xd7, 0x20, 0x4c, 0x1e, 0x29, 0x35, 0x4b, 0xee, 0xc1, 0x86, 0x32, 0xcb, 0xec, 0x85, 0x81, 0xe1,
	0x5f, 0x7b, 0xcf, 0x67, 0xff, 0xfa, 0x04, 0xa1, 0xed, 0x29, 0x09, 0x98, 0xe8, 0x3d, 0x2a, 0x89,
	0xd3, 0x10, 0x36, 0x48, 0x83, 0x3c, 0xb2, 0x15, 0xd9, 0xba, 0x9f, 0x89, 0x0f, 0x53, 0xb4, 0x7f,
	0x3d, 0xe6, 0x10, 0x4c, 0x89, 0x41, 0x64, 0x2e, 0x42, 0xf8, 0x88, 0xd0, 0xa5, 0x85, 0x9b, 0x12,
	0x7c, 0x7c, 0x82, 0x7c, 0x4f, 0x4e, 0x10, 0xba, 0x1b, 0x08, 0x22, 0xc1, 0x97, 0xfc, 0x33, 0x04,
	0x11, 0x26, 0xf8, 0xf3, 0x60, 0xeb, 0x2a, 0xcc, 0x31, 0xe5, 0x91, 0xd6, 0xfe, 0x39, 0x82, 0x85,
	0x1d, 0xd2, 0xf5, 0x18, 0x9c, 0xf7, 0x38, 0x68, 0x17, 0x7f, 0x72, 0x54, 0xce, 0x7a, 0x59, 0xb1,
	0xdf, 0x25, 0xc1, 0x51, 0x2f, 0x4f, 0xa5, 0x81, 0xf1, 0xcf, 0x9a, 0xa7, 0xfd, 0x76, 0xd8, 0x70,
	0x91, 0xe3, 0x3e, 0x5a, 0xf2, 0x21, 0xcc, 0x67, 0x3b, 0xa6, 0xa5, 0xb5, 0x2a, 0x7c, 0x77, 0x61,
	0x62, 0x19, 0x16, 0x6a, 0x8c, 0x22, 0xdb, 0xbb, 0x1c, 0xbe, 0x5b, 0x9b, 0xdf, 0xbc, 0x34, 0x30,
	0xc8, 0xb6, 0x65, 0xe9, 0x8e, 0x56, 0x66, 0x95, 0x86, 0x0c, 0x3e, 0x40, 0xb3, 0xc9, 0xe9, 0xdf,
	0x42, 0x3e, 0x01, 0xf5, 0xbd, 0x6b, 0x9a, 0xaf, 0x79, 0x06, 0x48, 0x7e, 0xe6, 0x83, 0x30, 0x3d,
	0x19, 0xb7, 0xeb, 0xba, 0xa6, 0xb6, 0x2d, 0xfc, 0x9f, 0x08, 0x16, 0x15, 0x5d, 0x95, 0x89, 0x4d,
	0xe0, 0xb7, 0xaa, 0xac, 0xda, 0x33, 0x7f, 0x8f, 0x3e, 0xfa, 0x18, 0xfd, 0x15, 0x0a, 0xa2, 0xe4,
	0x1f, 0x21, 0x53, 0x27, 0xb5, 0x14, 0x7f, 0x6b, 0xc8, 0xde, 0xd3, 0xb9, 0x37, 0x99, 0xa9, 0xf1,
	0x2f, 0x10, 0x53, 0xae, 0x3b, 0x63, 0xa5, 0x46, 0xb2, 0x6b, 0x5a, 0xfb, 0x40, 0x6d, 0xa4, 0x3c,
	0x26, 0x5a, 0x8a, 0xd1, 0x20, 0x56, 0xea, 0x94, 0xd9, 0x2f, 0xa3, 0x5b, 0x33, 0x5c, 0xde, 0x2e,
	0xa1, 0xe8, 0x7b, 0x41, 0xfb, 0xd7, 0x77, 0xfc, 0x48, 0x5a, 0x50, 0x74, 0xd5, 0xf1, 0x9b, 0xdd,
	0x15, 0xff, 0x0a, 0xcc, 0xf2, 0xdb, 0x77, 0x7e, 0xc5, 0x3f, 0xbf, 0xb9, 0x3a, 0x24, 0xc8, 0xbb,
	0x4c, 0x22, 0xf3, 0xcc, 0x88, 0x10, 0x0b, 0x42, 0x5f, 0xb0, 0x1d, 0xb8, 0xe4, 0xdf, 0x85, 0x60,
	0x95, 0x67, 0xd6, 0xb3, 0x7b, 0xcc, 0x32, 0xe3, 0xf0, 0x4d, 0x00, 0xa5, 0xdd, 0x95, 0xf9, 0x7d,
	0xed, 0x19, 0x6f, 0x6a, 0x43, 0x4a, 0xbb, 0x9b, 0x63, 0x82, 0xb8, 0x04, 0x0b, 0x34, 0x0b, 0xea,
	0x81, 0x5a, 0x73, 0x74, 0xf9, 0x2c, 0x7a, 0xf6, 0xa3, 0x8f, 0x51, 0x24, 0xe8, 0x1b, 0xe2, 0xbe,
	0x33, 0x97, 0xde, 0xf7, 0xd1, 0xb9, 0x34, 0xef, 0xa8, 0xdb, 0x80, 0xb6, 0x1d, 0x3c, 0x9c, 0xf6,
	0x9b, 0x82, 0xe1, 0x76, 0x20, 0x66, 0x47, 0x95, 0x09, 0xe2, 0x3d, 0x58, 0x1a, 0x92, 0x0e, 0xb6,
	0x9f, 0x0e, 0x8f, 0x7e, 0xfb, 0xdd, 0x57, 0x74, 0xdb, 0x48, 0x5a, 0xec, 0xcb, 0x85, 0x0d, 0x5b,
	0xe8, 0xbf, 0xd6, 0x9f, 0x65, 0x8e, 0x5d, 0xff, 0x97, 0x13, 0x84, 0x36, 0x3e, 0x3f, 0x41, 0x68,
	0x84, 0x87, 0x9f, 0xfb, 0x50, 0xcf, 0xd7, 0x6d, 0xd4, 0xf7, 0x1e, 0xe0, 0x4f, 0x11, 0x84, 0xdc,
	0x4b, 0x52, 0x76, 0xe4, 0x0f, 0x65, 0xbe, 0x8d, 0x6c, 0xa8, 0x47, 0x41, 0x5f, 0xf2, 0xf0, 0x7f,
	0xb9, 0xa2, 0xdd, 0xc1, 0xd7, 0xd0, 0xb0, 0xc4, 0x50, 0x63, 0x9d, 0x2b, 0x5b, 0xfc, 0x06, 0x44,
	0x94, 0x66, 0xb3, 0x37, 0xe5, 0x61, 0x4c, 0x2a, 0x7c, 0x52, 0x58, 0x69, 0x36, 0xdd, 0x05, 0x63,
	0x1b, 0x96, 0xa9, 0xaa, 0xdb, 0xe2, 0x1d, 0x88, 0xf0, 0x58, 0x08, 0xac, 0x34, 0x9b, 0x4e, 0x9f,
	0x77, 0x90, 0xee, 0xc2, 0x05, 0x8e, 0xe4, 0x74, 0x77, 0x07, 0x2a, 0x32, 0x16, 0x6a, 0x89, 0x41,
	0xd9, 0x9d, 0xce, 0xc1, 0x7a, 0xeb, 0xf4, 0x32, 0x36, 0x37, 0xbe, 0x59, 0x7a, 0xd7, 0xc1, 0x6d,
	0xdf, 0xe0, 0xc2, 0x85, 0x77, 0xbc, 0xeb, 0xf8, 0xc2, 0xf9, 0xd6, 0xf1, 0x6d, 0xbf, 0x67, 0x25,
	0xdf, 0x19, 0x5c, 0xc9, 0x85, 0xc9, 0x57, 0xf2, 0x6d, 0xbf, 0x77, 0x15, 0xc7, 0x7b, 0xb0, 0x48,
	0x2d, 0xf3, 0x02, 0x2e, 0x32, 0xc0, 0x17, 0xc6, 0xd8, 0x37, 0x80, 0xb9, 0x70, 0xe4, 0x25, 0x65,
	0xae, 0xc0, 0x1c, 0x9f, 0xe5, 0x72, 0xed, 0x50, 0x53, 0x6b, 0x04, 0x47, 0x9c, 0x6e, 0x47, 0x1d,
	0xa2, 0xcd, 0x90, 0x4f, 0x3c, 0x87, 0x4d, 0x9b, 0xe1, 0xf4, 0x93, 0x13, 0x14, 0xc8, 0xc4, 0x60,
	0xde, 0x74, 0x96, 0xcf, 0x1e, 0x0f, 0x9e, 0x9c, 0xa0, 0x10, 0xe5, 0xd9, 0x26, 0xf6, 0xf3, 0x16,
	0x9e, 0x9c, 0xa0, 0x79, 0xde, 0x44, 0xef, 0x06, 0x82, 0x01, 0x61, 0xfa, 0x6e, 0x20, 0x18, 0x12,
	0xe0, 0x6e, 0x20, 0x38, 0x2f, 0x2c, 0x24, 0x7f, 0x0d, 0x2e, 0x3a, 0xe9, 0x19, 0x3c, 0x9d, 0x3b,
	0x17, 0x02, 0x7c, 0x1f, 0x70, 0x9d, 0x4d, 0xd3, 0x61, 0xf5, 0xce, 0xda, 0x7b, 0xc0, 0x70, 0x16,
	0x4e, 0xc3, 0xff, 0xfb, 0x3e, 0xfb, 0x42, 0x20, 0xf9, 0xa1, 0x00, 0x89, 0x21, 0xf0, 0x9e, 0x23,
	0x37, 0xbe, 0x05, 0xc1, 0x16, 0xb1, 0x14, 0x76, 0xc3, 0xc9, 0x5b, 0x78, 0x7c, 0x20, 0xb4, 0xbb,
	0xc4, 0x34, 0x95, 0x06, 0xd9, 0x25, 0xdc, 0x32, 0xc9, 0x95, 0xc7, 0x64, 0xf8, 0x8d, 0x03, 0x5f,
	0x77, 0x37, 0xce, 0x2a, 0xc8, 0xc1, 0x9b, 0x0c, 0xde, 0xc7, 0x87, 0x5c, 0x54, 0xbc, 0x0b, 0x57,
	0xcf, 0xe8, 0x62, 0xf6, 0xfe, 0xf4, 0xc6, 0xf8, 0x21, 0x87, 0x74, 0x0c, 0x7b, 0xd0, 0xcb, 0xc3,
	0x3f, 0xa5, 0xe1, 0x32, 0xb7, 0xfe, 0x75, 0xee, 0xbb, 0x27, 0xe8, 0xd7, 0x61, 0x0e, 0x82, 0xbb,
	0x8e, 0xe7, 0xe8, 0x06, 0x5c, 0x85, 0x18, 0x87, 0x4d, 0xb8, 0xae, 0x24, 0xa8, 0x36, 0xfb, 0xdc,
	0x03, 0xa3, 0x4d, 0x78, 0x09, 0x9e, 0x1f, 0x2e, 0xe0, 0xe2, 0x27, 0xec, 0xb6, 0x85, 0x5e, 0xf9,
	0xc1, 0x09, 0xfa, 0x49, 0x04, 0x2e, 0x42, 0xa0, 0xa8, 0xb4, 0x48, 0x6c, 0x01, 0xe6, 0x9c, 0x18,
	0xa7, 0xda, 0x4a, 0x8b, 0xc0, 0xeb, 0xe3, 0xc6, 0x8a, 0xc5, 0x20, 0x3a, 0x24, 0x0d, 0x29, 0xfa,
	0x07, 0x0c, 0x98, 0xe1, 0x3d, 0x69, 0xfd, 0x10, 0x0e, 0xe0, 0x06, 0xac, 0x9f, 0xb9, 0x1f, 0x70,
	0xfb, 0xe7, 0xa6, 0x3f, 0xdd, 0xee, 0xc2, 0x0d, 0xd8, 0x38, 0x4b, 0x65, 0xa0, 0x77, 0xc2, 0xef,
	0xf8, 0x20, 0xcc, 0x5b, 0x0f, 0xb3, 0x6f, 0xfd, 0xa7, 0x08, 0xfe, 0x0b, 0x4d, 0x3a, 0x36, 0x9f,
	0x7a, 0x7c, 0xec, 0x3d, 0x10, 0xbf, 0x94, 0xed, 0xcb, 0x66, 0x24, 0x5d, 0xce, 0x27, 0x9c, 0xae,
	0x08, 0xaf, 0xc2, 0x8b, 0x93, 0xc0, 0xb2, 0x1e, 0xb3, 0x19, 0xa2, 0xaa, 0xac, 0x99, 0x4c, 0xa2,
	0xe7, 0xf6, 0xd9, 0xcd, 0x50, 0x46, 0x31, 0x49, 0x82, 0x76, 0x4c, 0xf8, 0x77, 0x04, 0x11, 0x3b,
	0x1e, 0x6c, 0x1d, 0x5a, 0xff, 0x67, 0x04, 0xff, 0xf8, 0x3f, 0x0a, 0xc8, 0xd6, 0x97, 0x14, 0x10,
	0x78, 0xe9, 0x1c, 0x21, 0x98, 0x44, 0xd8, 0xf5, 0x1b, 0xfe, 0xd2, 0x07, 0x33, 0x95, 0x9a, 0xa6,
	0x13, 0x73, 0xfd, 0x43, 0x1f, 0xfc, 0xa1, 0x0f, 0xde, 0x84, 0x6b, 0x67, 0x0e, 0xd5, 0xd7, 0xa2,
	0x37, 0x23, 0xe9, 0x66, 0x33, 0xe1, 0x34, 0x27, 0x28, 0xc0, 0x57, 0x27, 0xd1, 0x1e, 0xec, 0xd2,
	0x9b, 0xcb, 0x14, 0xc5, 0x6e, 0xc4, 0x3d, 0xb4, 0x22, 0xdc, 0x9c, 0x0c, 0x6d, 0xa0, 0x53, 0x6f,
	0x5e, 0xe0, 0x70, 0x9c, 0xdc, 0xc3, 0x13, 0xe1, 0xeb, 0x67, 0xe1, 0x0d, 0x74, 0xeb, 0xc1, 0x67,
	0xec, 0x4b, 0x20, 0xf8, 0x69, 0x00, 0x82, 0x76, 0x73, 0x32, 0xa5, 0x2f, 0x02, 0x70, 0x1b, 0xbf,
	0x76, 0x16, 0x6c, 0x5f, 0xc7, 0x4e, 0xf5, 0x1d, 0x1b, 0x63, 0xfe, 0x1d, 0xd2, 0x85, 0xdc, 0xf9,
	0xf4, 0xfb, 0x4e, 0x8f, 0xb1, 0xd0, 0x0e, 0xe9, 0x26, 0x24, 0x4a, 0x80, 0x0c, 0x7e, 0xe3, 0x2c,
	0x14, 0x4f, 0x67, 0xf6, 0xd8, 0x31, 0xcd, 0x2a, 0x1d, 0xb6, 0xcf, 0x8b, 0xd1, 0x6f, 0x4b, 0x98,
	0x61, 0xd8, 0xd6, 0x94, 0x71, 0x7e, 0x12, 0x9f, 0xbc, 0x68, 0x63, 0xa3, 0x54, 0xc5, 0x3b, 0xe7,
	0x47, 0x3c, 0xd3, 0xe3, 0x7b, 0x3f, 0xab, 0x9d, 0x23, 0xb2, 0xf1, 0xf6, 0xcf, 0x6e, 0xed, 0xa8,
	0xd8, 0x26, 0xff, 0xcd, 0x07, 0x97, 0xc6, 0x7c, 0x6f, 0x8a, 0xdf, 0x47, 0xec, 0x6b, 0x52, 0xba,
	0xa1, 0xaf, 0xcb, 0xfb, 0x1d, 0xb5, 0x69, 0xc9, 0xaa, 0xf3, 0x19, 0x2b, 0xbf, 0xd3, 0x7e, 0x79,
	0xf4, 0x77, 0x68, 0x6a, 0xd3, 0xca, 0xb7, 0x4f, 0x77, 0xfb, 0xab, 0xee, 0x39, 0xaf, 0xde, 0x3b,
	0xe7, 0x3d, 0xfd, 0xe1, 0xf7, 0xfc, 0x33, 0x1f, 0x7c, 0x8c, 0x7c, 0xc2, 0x94, 0xb4, 0xec, 0x8c,
	0x68, 0x43, 0x70, 0x53, 0xfe, 0x1a, 0xc1, 0x73, 0x13, 0x1d, 0x13, 0xec, 0xfb, 0xb2, 0xd7, 0xcf,
	0xb1, 0x0b, 0xf1, 0x78, 0x9d, 0x59, 0x1b, 0x65, 0x60, 0xe0, 0xf1, 0x09, 0x9a, 0xea, 0x59, 0x8a,
	0xa4, 0xaf, 0xd4, 0xce, 0xc0, 0x32, 0x93, 0x3b, 0x10, 0x1d, 0x15, 0x09, 0xbc, 0x01, 0x01, 0xda,
	0xe4, 0xed, 0xab, 0x81, 0x4b, 0x1f, 0x7d, 0x8c, 0xe6, 0x83, 0x68, 0xf0, 0x6c, 0xc3, 0x76, 0x78,
	0x12, 0x13, 0x4c, 0x7e, 0x1b, 0xc1, 0x85, 0xa1, 0x5f, 0xe9, 0xe2, 0x87, 0xf0, 0x92, 0xde, 0x31,
	0x1a, 0x44, 0xae, 0x77, 0x0c, 0xfe, 0x72, 0xf6, 0x40, 0x33, 0x64, 0xb5, 0xad, 0xd4, 0x78, 0x9c,
	0x3c, 0x5f, 0x04, 0xf3, 0xbb, 0xde, 0xb9, 0xcc, 0x32, 0x3d, 0x0b, 0x6e, 0xbe, 0xff, 0x31, 0x0a,
	0xd0, 0x81, 0x66, 0xd6, 0x03, 0xd1, 0xd9, 0x35, 0x24, 0x3d, 0xcf, 0x80, 0x72, 0x36, 0xce, 0x1d,
	0xcd, 0xc8, 0xdb, 0x28, 0xb9, 0xfe, 0x4f, 0x80, 0xcd, 0xf5, 0xdf, 0x46, 0x10, 0xee, 0xfb, 0xfe,
	0x1a, 0xaf, 0xc2, 0x85, 0xcc, 0x5e, 0x25, 0x5f, 0x14, 0x2b, 0x15, 0xb9, 0x50, 0xda, 0xca, 0x67,
	0xe5, 0xdd, 0xb4, 0xb4, 0xb3, 0x57, 0x16, 0xa6, 0x70, 0x02, 0x2e, 0x57, 0xf3, 0xbb, 0x62, 0x45,
	0x94, 0xf2, 0x62, 0x45, 0x4e, 0x17, 0x4b, 0xbb, 0xe9, 0xc2, 0x03, 0x39, 0x27, 0x56, 0xc5, 0x6c,
	0x35, 0x5f, 0x2a, 0x0a, 0x08, 0x5f, 0x81, 0xd5, 0xb2, 0x28, 0xc9, 0x92, 0xf8, 0xd6, 0x10, 0xb6,
	0x0f, 0xc7, 0x60, 0x65, 0xaf, 0x22, 0x4a, 0x72, 0x46, 0xdc, 0x4e, 0xdf, 0xcb, 0x97, 0x24, 0x39,
	0x5d, 0x4c, 0x17, 0x1e, 0x54, 0xf2, 0x15, 0xc1, 0xbf, 0xfe, 0x36, 0xac, 0xa4, 0x7b, 0x27, 0x5f,
	0xf6, 0xd5, 0x1d, 0x5f, 0xfd, 0xa9, 0x56, 0xba, 0x9c, 0x97, 0xc5, 0x62, 0xae, 0x5c, 0xca, 0x17,
	0xab, 0x72, 0xbe, 0x78, 0xa7, 0x24, 0x17, 0x4b, 0x45, 0x51, 0x98, 0xc2, 0xcf, 0x42, 0xe2, 0x34,
	0xaf, 0x9c, 0xbb, 0x23, 0x57, 0xca, 0x69, 0x69, 0xa7, 0x40, 0xdd, 0x10, 0xd0, 0xfa, 0xaf, 0xc2,
	0xac, 0xfd, 0x3d, 0x0f, 0x5e, 0x06, 0x81, 0x2a, 0x54, 0x1f, 0x94, 0x45, 0x79, 0xaf, 0xb8, 0x53,
	0x2c, 0xdd, 0x2f, 0x0a, 0x53, 0x1e, 0xea, 0x96, 0x94, 0x2e, 0x6f, 0xbf, 0x55, 0x10, 0x10, 0x5e,
	0x84, 0x39, 0x97, 0x2a, 0x89, 0x95, 0xaa, 0xe0, 0xf3, 0x90, 0xb6, 0xa4, 0x72, 0x56, 0xf0, 0xaf,
	0x3f, 0xf6, 0xc1, 0xe2, 0xe9, 0xa2, 0xb8, 0x04, 0x17, 0x2b, 0x62, 0xb1, 0x92, 0xaf, 0xe6, 0xef,
	0x89, 0x72, 0x2e, 0x5d, 0x4d, 0x73, 0x9d, 0x6c, 0x96, 0x0e, 0x37, 0x82, 0x59, 0xa9, 0xd0, 0x18,
	0xc6, 0x60, 0x65, 0x18, 0x33, 0x5f, 0x16, 0x7c, 0x34, 0xbe, 0xc3, 0x78, 0xe2, 0x6e, 0x3a, 0x5f,
	0x10, 0xfc, 0xa3, 0xd8, 0xe5, 0x6d, 0x1a, 0xac, 0x00, 0x7e, 0x06, 0xae, 0x0e, 0xb5, 0x49, 0x12,
	0x73, 0x62, 0xb1, 0x9a, 0x4f, 0x17, 0x2a, 0xc2, 0x34, 0x5e, 0x83, 0x67, 0x87, 0x09, 0xa5, 0xcb,
	0x65, 0x1e, 0xdc, 0x82, 0x98, 0xde, 0x49, 0x6f, 0x89, 0xc2, 0x0c, 0x4e, 0x42, 0x7c, 0x98, 0xe4,
	0x6e, 0xba, 0xb2, 0x23, 0xe6, 0xe4, 0x72, 0x3e, 0x2f, 0xcc, 0xd2, 0x92, 0x19, 0x26, 0x53, 0x28,
	0x65, 0xd3, 0xac, 0x26, 0x82, 0x31, 0x5f, 0x14, 0xad, 0x67, 0x59, 0x54, 0x7b, 0x5f, 0x1c, 0xda,
	0x29, 0x17, 0xcb, 0x14, 0x45, 0x2e, 0x96, 0xaa, 0x76, 0x15, 0x89, 0x39, 0x61, 0x0a, 0xaf, 0x00,
	0xee, 0xf1, 0x5c, 0x3a, 0x5a, 0xff, 0x00, 0xc1, 0xe2, 0xa9, 0x8f, 0x87, 0xf0, 0x45, 0x58, 0xe2,
	0xd2, 0x15, 0x31, 0x2b, 0x4b, 0xf9, 0xca, 0x8e, 0x53, 0x39, 0x2e, 0x8c, 0xcb, 0x28, 0x94, 0xee,
	0x0b, 0x68, 0x08, 0x7d, 0x57, 0xcc, 0x09, 0xbe, 0x21, 0x40, 0xdb, 0xf9, 0xad, 0x6d, 0xc1, 0x4f,
	0x93, 0x39, 0xc0, 0xc8, 0x4a, 0xf9, 0x6a, 0x3e, 0x9b, 0x2e, 0x08, 0x81, 0xf5, 0xbf, 0x45, 0xb6,
	0x6b, 0xce, 0xd7, 0x9a, 0x34, 0x47, 0x5c, 0x3c, 0x9b, 0xae, 0x8a, 0x5b, 0x25, 0xe9, 0x81, 0x9c,
	0xcb, 0x57, 0xb2, 0xa5, 0x7b, 0xa2, 0xc4, 0xbc, 0x73, 0x3d, 0x77, 0xd9, 0x95, 0xfb, 0xe9, 0xad,
	0x2d, 0x51, 0x12, 0x10, 0xbe, 0x0c, 0xd1, 0x01, 0x5e, 0xbe, 0x78, 0x4f, 0x2c, 0x56, 0x4b, 0xd2,
	0x03, 0xc1, 0x47, 0x27, 0xee, 0xa0, 0xe6, 0x76, 0x3a, 0x57, 0xba, 0xcf, 0xeb, 0x62, 0x70, 0x4c,
	0xb1, 0x2c, 0x89, 0xf4, 0x29, 0x27, 0x04, 0x86, 0x8c, 0x59, 0x2c, 0x15, 0xe5, 0x74, 0x39, 0x2f,
	0x4c, 0xaf, 0x1f, 0xc1, 0xd2, 0x90, 0xaf, 0x04, 0x59, 0x94, 0xf6, 0xaa, 0xdb, 0x72, 0xa5, 0x9a,
	0xae, 0xf6, 0x4f, 0x24, 0x6a, 0x62, 0x8f, 0x4e, 0x7f, 0xd2, 0xca, 0xe2, 0x03, 0x21, 0x1c, 0x87,
	0x98, 0x47, 0xcb, 0xcb, 0xf7, 0xad, 0xff, 0x07, 0x02, 0x7c, 0xfa, 0xf3, 0x2c, 0xbc, 0x04, 0x0b,
	0x4c, 0x8d, 0x95, 0x4e, 0x26, 0x5d, 0xc9, 0x67, 0xed, 0x29, 0xdb, 0x23, 0x8a, 0x69, 0x89, 0x85,
	0x88, 0xce, 0x4f, 0x97, 0x7a, 0xf7, 0x3e, 0x9d, 0xb2, 0x17, 0x60, 0xb1, 0x47, 0xa2, 0x93, 0x77,
	0x47, 0x7c, 0x20, 0xf8, 0xbd, 0xfa, 0x25, 0xfa, 0x73, 0x53, 0x08, 0x0c, 0x50, 0xcb, 0x62, 0x31,
	0x9f, 0x13, 0xa6, 0x31, 0x86, 0xf9, 0x1e, 0x75, 0xbb, 0x5a, 0x2d, 0x0b, 0x33, 0x43, 0xf4, 0x6f,
	0x08, 0xb3, 0x5e, 0x6a, 0x2e, 0xbf, 0x45, 0x57, 0x8d, 0x20, 0xab, 0x1d, 0x97, 0x5a, 0x14, 0xb7,
	0x4a, 0xd5, 0x7c, 0xba, 0x2a, 0x0a, 0xa1, 0xf5, 0x6f, 0xc2, 0xca, 0xf0, 0xcf, 0xc8, 0x70, 0x14,
	0x96, 0x99, 0x8a, 0x33, 0x53, 0xe4, 0x6d, 0x31, 0x9d, 0x13, 0x25, 0x61, 0xca, 0x05, 0x73, 0x39,
	0x6f, 0xed, 0x89, 0xd2, 0x03, 0xbb, 0x72, 0x3d, 0x8c, 0x4c, 0x29, 0x47, 0x0b, 0xe3, 0x14, 0x54,
	0xb6, 0x54, 0xda, 0xc9, 0x8b, 0x82, 0x7f, 0xbd, 0x08, 0xf1, 0xf1, 0x2f, 0xf3, 0x29, 0xa6, 0xb4,
	0x57, 0x10, 0xed, 0x28, 0xef, 0xe5, 0x0b, 0x74, 0x89, 0xe5, 0xd1, 0xef, 0xd1, 0xb3, 0x7b, 0x95,
	0x6a, 0x69, 0x57, 0x40, 0x99, 0x6f, 0xa1, 0x27, 0x9f, 0xc6, 0xa7, 0x3e, 0xf9, 0x34, 0x3e, 0xf5,
	0xc5, 0xa7, 0x71, 0xf4, 0xde, 0xd3, 0x38, 0xfa, 0x93, 0xa7, 0x71, 0xf4, 0xfd, 0xa7, 0x71, 0xf4,
	0xe4, 0x69, 0x1c, 0x7d, 0xf2, 0x34, 0x8e, 0x7e, 0xf8, 0x34, 0x8e, 0x3e, 0x7f, 0x1a, 0x9f, 0xfa,
	0xe2, 0x69, 0x1c, 0x7d, 0xe7, 0xb3, 0xf8, 0xd4, 0x93, 0xcf, 0xe2, 0x53, 0x9f, 0x7c, 0x16, 0x9f,
	0x7a, 0xbb, 0xd0, 0xd0, 0xf4, 0xa3, 0x46, 0xea, 0x58, 0x6b, 0x5a, 0xc4, 0x30, 0x94, 0x54, 0xc7,
	0xdc, 0x60, 0x3f, 0x0e, 0x34, 0xa3, 0x75, 0x5d, 0x37, 0xb4, 0x63, 0xb5, 0x4e, 0x8c, 0xeb, 0x0e,
	0x7b, 0x43, 0xdf, 0x6f, 0x68, 0x1b, 0xe4, 0x91, 0x65, 0xff, 0x17, 0xd2, 0xc0, 0xbf, 0x5b, 0xed,
	0xcf, 0xb0, 0x17, 0x5c, 0xaf, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x97, 0x42, 0xd5,
	0x8f, 0x35, 0x00, 0x00,
}

func (x FeatureType) String() string {
	s, ok := FeatureType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ApiEndpointInfoRequest) String() string {
	s, ok := ApiEndpointInfoRequest_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x APIType) String() string {
	s, ok := APIType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SensitiveDataType) String() string {
	s, ok := SensitiveDataType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x APIEPPIILevel) String() string {
	s, ok := APIEPPIILevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x APIEPSecurityRisk) String() string {
	s, ok := APIEPSecurityRisk_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x APIEPCategory) String() string {
	s, ok := APIEPCategory_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthenticationState) String() string {
	s, ok := AuthenticationState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthenticationType) String() string {
	s, ok := AuthenticationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthenticationLocation) String() string {
	s, ok := AuthenticationLocation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SensitiveDataDetectionRuleType) String() string {
	s, ok := SensitiveDataDetectionRuleType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Feature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LearnFromRedirectTraffic == nil {
		if this.LearnFromRedirectTraffic != nil {
			return false
		}
	} else if this.LearnFromRedirectTraffic == nil {
		return false
	} else if !this.LearnFromRedirectTraffic.Equal(that1.LearnFromRedirectTraffic) {
		return false
	}
	if !this.SensitiveDataDetectionRules.Equal(that1.SensitiveDataDetectionRules) {
		return false
	}
	if !this.DiscoveredApiSettings.Equal(that1.DiscoveredApiSettings) {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting_Disable)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting_Enable)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *APIEPDynExample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPDynExample)
	if !ok {
		that2, ok := that.(APIEPDynExample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ComponentIdentifier != that1.ComponentIdentifier {
		return false
	}
	if len(this.ComponentExamples) != len(that1.ComponentExamples) {
		return false
	}
	for i := range this.ComponentExamples {
		if this.ComponentExamples[i] != that1.ComponentExamples[i] {
			return false
		}
	}
	return true
}
func (this *APIEPInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPInfo)
	if !ok {
		that2, ok := that.(APIEPInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.DynExamples) != len(that1.DynExamples) {
		return false
	}
	for i := range this.DynExamples {
		if !this.DynExamples[i].Equal(that1.DynExamples[i]) {
			return false
		}
	}
	if !this.PdfInfo.Equal(that1.PdfInfo) {
		return false
	}
	if this.RequestPercentage != that1.RequestPercentage {
		return false
	}
	if this.HasLearntSchema != that1.HasLearntSchema {
		return false
	}
	if len(this.Category) != len(that1.Category) {
		return false
	}
	for i := range this.Category {
		if this.Category[i] != that1.Category[i] {
			return false
		}
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if this.PiiLevel != that1.PiiLevel {
		return false
	}
	if this.SecurityRisk != that1.SecurityRisk {
		return false
	}
	if !this.AccessDiscoveryTime.Equal(that1.AccessDiscoveryTime) {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.SensitiveData) != len(that1.SensitiveData) {
		return false
	}
	for i := range this.SensitiveData {
		if this.SensitiveData[i] != that1.SensitiveData[i] {
			return false
		}
	}
	if len(this.SensitiveDataTypes) != len(that1.SensitiveDataTypes) {
		return false
	}
	for i := range this.SensitiveDataTypes {
		if this.SensitiveDataTypes[i] != that1.SensitiveDataTypes[i] {
			return false
		}
	}
	if this.SecEventsCount != that1.SecEventsCount {
		return false
	}
	if this.RequestsCount != that1.RequestsCount {
		return false
	}
	if this.AuthenticationState != that1.AuthenticationState {
		return false
	}
	if len(this.AuthenticationTypes) != len(that1.AuthenticationTypes) {
		return false
	}
	for i := range this.AuthenticationTypes {
		if !this.AuthenticationTypes[i].Equal(that1.AuthenticationTypes[i]) {
			return false
		}
	}
	if !this.RiskScore.Equal(that1.RiskScore) {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if this.ApiGroups[i] != that1.ApiGroups[i] {
			return false
		}
	}
	if this.ApiType != that1.ApiType {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if this.SchemaStatus != that1.SchemaStatus {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	if len(this.Engines) != len(that1.Engines) {
		return false
	}
	for i := range this.Engines {
		if this.Engines[i] != that1.Engines[i] {
			return false
		}
	}
	if this.ReqRate != that1.ReqRate {
		return false
	}
	if this.MaxLatency != that1.MaxLatency {
		return false
	}
	if this.AvgLatency != that1.AvgLatency {
		return false
	}
	if len(this.SensitiveDataLocation) != len(that1.SensitiveDataLocation) {
		return false
	}
	for i := range this.SensitiveDataLocation {
		if this.SensitiveDataLocation[i] != that1.SensitiveDataLocation[i] {
			return false
		}
	}
	return true
}
func (this *RiskScore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RiskScore)
	if !ok {
		that2, ok := that.(RiskScore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Severity != that1.Severity {
		return false
	}
	return true
}
func (this *AuthenticationTypeLocPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationTypeLocPair)
	if !ok {
		that2, ok := that.(AuthenticationTypeLocPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if this.AuthType != that1.AuthType {
		return false
	}
	return true
}
func (this *PDFSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PDFSpec)
	if !ok {
		that2, ok := that.(PDFSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	return true
}
func (this *PDFStat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PDFStat)
	if !ok {
		that2, ok := that.(PDFStat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PdfMean != that1.PdfMean {
		return false
	}
	if this.Pdf_95 != that1.Pdf_95 {
		return false
	}
	return true
}
func (this *APIEPPDFInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPPDFInfo)
	if !ok {
		that2, ok := that.(APIEPPDFInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestSize) != len(that1.RequestSize) {
		return false
	}
	for i := range this.RequestSize {
		if !this.RequestSize[i].Equal(that1.RequestSize[i]) {
			return false
		}
	}
	if len(this.ResponseSize) != len(that1.ResponseSize) {
		return false
	}
	for i := range this.ResponseSize {
		if !this.ResponseSize[i].Equal(that1.ResponseSize[i]) {
			return false
		}
	}
	if len(this.LatencyWithData) != len(that1.LatencyWithData) {
		return false
	}
	for i := range this.LatencyWithData {
		if !this.LatencyWithData[i].Equal(that1.LatencyWithData[i]) {
			return false
		}
	}
	if len(this.LatencyNoData) != len(that1.LatencyNoData) {
		return false
	}
	for i := range this.LatencyNoData {
		if !this.LatencyNoData[i].Equal(that1.LatencyNoData[i]) {
			return false
		}
	}
	if len(this.RequestRate) != len(that1.RequestRate) {
		return false
	}
	for i := range this.RequestRate {
		if !this.RequestRate[i].Equal(that1.RequestRate[i]) {
			return false
		}
	}
	if len(this.ErrorRate) != len(that1.ErrorRate) {
		return false
	}
	for i := range this.ErrorRate {
		if !this.ErrorRate[i].Equal(that1.ErrorRate[i]) {
			return false
		}
	}
	if len(this.ResponseThroughput) != len(that1.ResponseThroughput) {
		return false
	}
	for i := range this.ResponseThroughput {
		if !this.ResponseThroughput[i].Equal(that1.ResponseThroughput[i]) {
			return false
		}
	}
	if !this.CreationTimestamp.Equal(that1.CreationTimestamp) {
		return false
	}
	if !this.RequestSizeStat.Equal(that1.RequestSizeStat) {
		return false
	}
	if !this.ResponseSizeStat.Equal(that1.ResponseSizeStat) {
		return false
	}
	if !this.LatencyWithDataStat.Equal(that1.LatencyWithDataStat) {
		return false
	}
	if !this.LatencyNoDataStat.Equal(that1.LatencyNoDataStat) {
		return false
	}
	if !this.RequestRateStat.Equal(that1.RequestRateStat) {
		return false
	}
	if !this.ErrorRateStat.Equal(that1.ErrorRateStat) {
		return false
	}
	if !this.ResponseThroughputStat.Equal(that1.ResponseThroughputStat) {
		return false
	}
	return true
}
func (this *OverrideInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OverrideInfo)
	if !ok {
		that2, ok := that.(OverrideInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ComponentIdentifier != that1.ComponentIdentifier {
		return false
	}
	if this.SetDynamic != that1.SetDynamic {
		return false
	}
	return true
}
func (this *SchemaStruct) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaStruct)
	if !ok {
		that2, ok := that.(SchemaStruct)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Examples) != len(that1.Examples) {
		return false
	}
	for i := range this.Examples {
		if this.Examples[i] != that1.Examples[i] {
			return false
		}
	}
	if this.Schema != that1.Schema {
		return false
	}
	return true
}
func (this *SensitiveData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveData)
	if !ok {
		that2, ok := that.(SensitiveData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SensitiveDataType != that1.SensitiveDataType {
		return false
	}
	if this.Section != that1.Section {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if len(this.Examples) != len(that1.Examples) {
		return false
	}
	for i := range this.Examples {
		if this.Examples[i] != that1.Examples[i] {
			return false
		}
	}
	if this.RuleType != that1.RuleType {
		return false
	}
	if len(this.Compliances) != len(that1.Compliances) {
		return false
	}
	for i := range this.Compliances {
		if this.Compliances[i] != that1.Compliances[i] {
			return false
		}
	}
	return true
}
func (this *AuthData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthData)
	if !ok {
		that2, ok := that.(AuthData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	if this.Insights != that1.Insights {
		return false
	}
	return true
}
func (this *Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Authentication)
	if !ok {
		that2, ok := that.(Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AuthDataPerDefinition) != len(that1.AuthDataPerDefinition) {
		return false
	}
	for i := range this.AuthDataPerDefinition {
		if !this.AuthDataPerDefinition[i].Equal(that1.AuthDataPerDefinition[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSchema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSchema)
	if !ok {
		that2, ok := that.(RequestSchema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Headers.Equal(that1.Headers) {
		return false
	}
	if len(this.BodyPerContentType) != len(that1.BodyPerContentType) {
		return false
	}
	for i := range this.BodyPerContentType {
		if !this.BodyPerContentType[i].Equal(that1.BodyPerContentType[i]) {
			return false
		}
	}
	if !this.QueryParams.Equal(that1.QueryParams) {
		return false
	}
	if !this.Cookies.Equal(that1.Cookies) {
		return false
	}
	return true
}
func (this *ResponseSchema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSchema)
	if !ok {
		that2, ok := that.(ResponseSchema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Headers.Equal(that1.Headers) {
		return false
	}
	if len(this.BodyPerContentType) != len(that1.BodyPerContentType) {
		return false
	}
	for i := range this.BodyPerContentType {
		if !this.BodyPerContentType[i].Equal(that1.BodyPerContentType[i]) {
			return false
		}
	}
	return true
}
func (this *DiscoveredSchema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoveredSchema)
	if !ok {
		that2, ok := that.(DiscoveredSchema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestSchema.Equal(that1.RequestSchema) {
		return false
	}
	if len(this.ResponseSchemaPerRspCode) != len(that1.ResponseSchemaPerRspCode) {
		return false
	}
	for i := range this.ResponseSchemaPerRspCode {
		if !this.ResponseSchemaPerRspCode[i].Equal(that1.ResponseSchemaPerRspCode[i]) {
			return false
		}
	}
	if !this.LastUpdatedTime.Equal(that1.LastUpdatedTime) {
		return false
	}
	return true
}
func (this *KeyPattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeyPattern)
	if !ok {
		that2, ok := that.(KeyPattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.KeyPattern == nil {
		if this.KeyPattern != nil {
			return false
		}
	} else if this.KeyPattern == nil {
		return false
	} else if !this.KeyPattern.Equal(that1.KeyPattern) {
		return false
	}
	return true
}
func (this *KeyPattern_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeyPattern_ExactValue)
	if !ok {
		that2, ok := that.(KeyPattern_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *KeyPattern_RegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeyPattern_RegexValue)
	if !ok {
		that2, ok := that.(KeyPattern_RegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegexValue != that1.RegexValue {
		return false
	}
	return true
}
func (this *ValuePattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValuePattern)
	if !ok {
		that2, ok := that.(ValuePattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ValuePattern == nil {
		if this.ValuePattern != nil {
			return false
		}
	} else if this.ValuePattern == nil {
		return false
	} else if !this.ValuePattern.Equal(that1.ValuePattern) {
		return false
	}
	return true
}
func (this *ValuePattern_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValuePattern_ExactValue)
	if !ok {
		that2, ok := that.(ValuePattern_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *ValuePattern_RegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValuePattern_RegexValue)
	if !ok {
		that2, ok := that.(ValuePattern_RegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegexValue != that1.RegexValue {
		return false
	}
	return true
}
func (this *KeyValuePattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeyValuePattern)
	if !ok {
		that2, ok := that.(KeyValuePattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KeyPattern.Equal(that1.KeyPattern) {
		return false
	}
	if !this.ValuePattern.Equal(that1.ValuePattern) {
		return false
	}
	return true
}
func (this *CustomSections) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomSections)
	if !ok {
		that2, ok := that.(CustomSections)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CustomSections) != len(that1.CustomSections) {
		return false
	}
	for i := range this.CustomSections {
		if this.CustomSections[i] != that1.CustomSections[i] {
			return false
		}
	}
	return true
}
func (this *APIEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpoint)
	if !ok {
		that2, ok := that.(APIEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiEndpointPath != that1.ApiEndpointPath {
		return false
	}
	if len(this.Methods) != len(that1.Methods) {
		return false
	}
	for i := range this.Methods {
		if this.Methods[i] != that1.Methods[i] {
			return false
		}
	}
	return true
}
func (this *CustomDataDetectionConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if that1.TargetChoice == nil {
		if this.TargetChoice != nil {
			return false
		}
	} else if this.TargetChoice == nil {
		return false
	} else if !this.TargetChoice.Equal(that1.TargetChoice) {
		return false
	}
	if that1.SectionChoice == nil {
		if this.SectionChoice != nil {
			return false
		}
	} else if this.SectionChoice == nil {
		return false
	} else if !this.SectionChoice.Equal(that1.SectionChoice) {
		return false
	}
	if that1.PatternChoice == nil {
		if this.PatternChoice != nil {
			return false
		}
	} else if this.PatternChoice == nil {
		return false
	} else if !this.PatternChoice.Equal(that1.PatternChoice) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_AnyDomain)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_SpecificDomain)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_AnyTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_AnyTarget)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_AnyTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyTarget.Equal(that1.AnyTarget) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_ApiEndpointTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_ApiEndpointTarget)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_ApiEndpointTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiEndpointTarget.Equal(that1.ApiEndpointTarget) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_BasePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_BasePath)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_BasePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_ApiGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_ApiGroup)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_ApiGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiGroup != that1.ApiGroup {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_AllSections) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_AllSections)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_AllSections)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllSections.Equal(that1.AllSections) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_AllRequestSections) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_AllRequestSections)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_AllRequestSections)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllRequestSections.Equal(that1.AllRequestSections) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_AllResponseSections) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_AllResponseSections)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_AllResponseSections)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllResponseSections.Equal(that1.AllResponseSections) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_CustomSections) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_CustomSections)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_CustomSections)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSections.Equal(that1.CustomSections) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_KeyPattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_KeyPattern)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_KeyPattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KeyPattern.Equal(that1.KeyPattern) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_ValuePattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_ValuePattern)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_ValuePattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValuePattern.Equal(that1.ValuePattern) {
		return false
	}
	return true
}
func (this *CustomDataDetectionConfig_KeyValuePattern) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDataDetectionConfig_KeyValuePattern)
	if !ok {
		that2, ok := that.(CustomDataDetectionConfig_KeyValuePattern)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KeyValuePattern.Equal(that1.KeyValuePattern) {
		return false
	}
	return true
}
func (this *CustomSensitiveDataType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomSensitiveDataType)
	if !ok {
		that2, ok := that.(CustomSensitiveDataType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *CustomSensitiveDataDetectionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomSensitiveDataDetectionRule)
	if !ok {
		that2, ok := that.(CustomSensitiveDataDetectionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SensitiveDataType.Equal(that1.SensitiveDataType) {
		return false
	}
	if !this.SensitiveDataDetectionConfig.Equal(that1.SensitiveDataDetectionConfig) {
		return false
	}
	return true
}
func (this *SensitiveDataDetectionRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataDetectionRules)
	if !ok {
		that2, ok := that.(SensitiveDataDetectionRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DisabledBuiltInRules) != len(that1.DisabledBuiltInRules) {
		return false
	}
	for i := range this.DisabledBuiltInRules {
		if !this.DisabledBuiltInRules[i].Equal(that1.DisabledBuiltInRules[i]) {
			return false
		}
	}
	if len(this.CustomSensitiveDataDetectionRules) != len(that1.CustomSensitiveDataDetectionRules) {
		return false
	}
	for i := range this.CustomSensitiveDataDetectionRules {
		if !this.CustomSensitiveDataDetectionRules[i].Equal(that1.CustomSensitiveDataDetectionRules[i]) {
			return false
		}
	}
	return true
}
func (this *BuiltInSensitiveDataType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BuiltInSensitiveDataType)
	if !ok {
		that2, ok := that.(BuiltInSensitiveDataType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *DiscoveredAPISettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoveredAPISettings)
	if !ok {
		that2, ok := that.(DiscoveredAPISettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PurgeDurationForInactiveDiscoveredApis != that1.PurgeDurationForInactiveDiscoveredApis {
		return false
	}
	return true
}
func (this *Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_type.Feature{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BusinessLogicMarkupSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&app_type.BusinessLogicMarkupSetting{")
	if this.LearnFromRedirectTraffic != nil {
		s = append(s, "LearnFromRedirectTraffic: "+fmt.Sprintf("%#v", this.LearnFromRedirectTraffic)+",\n")
	}
	if this.SensitiveDataDetectionRules != nil {
		s = append(s, "SensitiveDataDetectionRules: "+fmt.Sprintf("%#v", this.SensitiveDataDetectionRules)+",\n")
	}
	if this.DiscoveredApiSettings != nil {
		s = append(s, "DiscoveredApiSettings: "+fmt.Sprintf("%#v", this.DiscoveredApiSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BusinessLogicMarkupSetting_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.BusinessLogicMarkupSetting_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *BusinessLogicMarkupSetting_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.BusinessLogicMarkupSetting_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.GlobalSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.CreateSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.ReplaceSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.GetSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPDynExample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.APIEPDynExample{")
	s = append(s, "ComponentIdentifier: "+fmt.Sprintf("%#v", this.ComponentIdentifier)+",\n")
	s = append(s, "ComponentExamples: "+fmt.Sprintf("%#v", this.ComponentExamples)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 33)
	s = append(s, "&app_type.APIEPInfo{")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	if this.DynExamples != nil {
		s = append(s, "DynExamples: "+fmt.Sprintf("%#v", this.DynExamples)+",\n")
	}
	if this.PdfInfo != nil {
		s = append(s, "PdfInfo: "+fmt.Sprintf("%#v", this.PdfInfo)+",\n")
	}
	s = append(s, "RequestPercentage: "+fmt.Sprintf("%#v", this.RequestPercentage)+",\n")
	s = append(s, "HasLearntSchema: "+fmt.Sprintf("%#v", this.HasLearntSchema)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	s = append(s, "PiiLevel: "+fmt.Sprintf("%#v", this.PiiLevel)+",\n")
	s = append(s, "SecurityRisk: "+fmt.Sprintf("%#v", this.SecurityRisk)+",\n")
	if this.AccessDiscoveryTime != nil {
		s = append(s, "AccessDiscoveryTime: "+fmt.Sprintf("%#v", this.AccessDiscoveryTime)+",\n")
	}
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "SensitiveData: "+fmt.Sprintf("%#v", this.SensitiveData)+",\n")
	s = append(s, "SensitiveDataTypes: "+fmt.Sprintf("%#v", this.SensitiveDataTypes)+",\n")
	s = append(s, "SecEventsCount: "+fmt.Sprintf("%#v", this.SecEventsCount)+",\n")
	s = append(s, "RequestsCount: "+fmt.Sprintf("%#v", this.RequestsCount)+",\n")
	s = append(s, "AuthenticationState: "+fmt.Sprintf("%#v", this.AuthenticationState)+",\n")
	if this.AuthenticationTypes != nil {
		s = append(s, "AuthenticationTypes: "+fmt.Sprintf("%#v", this.AuthenticationTypes)+",\n")
	}
	if this.RiskScore != nil {
		s = append(s, "RiskScore: "+fmt.Sprintf("%#v", this.RiskScore)+",\n")
	}
	s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	s = append(s, "ApiType: "+fmt.Sprintf("%#v", this.ApiType)+",\n")
	s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	s = append(s, "SchemaStatus: "+fmt.Sprintf("%#v", this.SchemaStatus)+",\n")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "Engines: "+fmt.Sprintf("%#v", this.Engines)+",\n")
	s = append(s, "ReqRate: "+fmt.Sprintf("%#v", this.ReqRate)+",\n")
	s = append(s, "MaxLatency: "+fmt.Sprintf("%#v", this.MaxLatency)+",\n")
	s = append(s, "AvgLatency: "+fmt.Sprintf("%#v", this.AvgLatency)+",\n")
	s = append(s, "SensitiveDataLocation: "+fmt.Sprintf("%#v", this.SensitiveDataLocation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RiskScore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.RiskScore{")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Severity: "+fmt.Sprintf("%#v", this.Severity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationTypeLocPair) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_type.AuthenticationTypeLocPair{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "AuthType: "+fmt.Sprintf("%#v", this.AuthType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PDFSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.PDFSpec{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PDFStat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.PDFStat{")
	s = append(s, "PdfMean: "+fmt.Sprintf("%#v", this.PdfMean)+",\n")
	s = append(s, "Pdf_95: "+fmt.Sprintf("%#v", this.Pdf_95)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPPDFInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&app_type.APIEPPDFInfo{")
	if this.RequestSize != nil {
		s = append(s, "RequestSize: "+fmt.Sprintf("%#v", this.RequestSize)+",\n")
	}
	if this.ResponseSize != nil {
		s = append(s, "ResponseSize: "+fmt.Sprintf("%#v", this.ResponseSize)+",\n")
	}
	if this.LatencyWithData != nil {
		s = append(s, "LatencyWithData: "+fmt.Sprintf("%#v", this.LatencyWithData)+",\n")
	}
	if this.LatencyNoData != nil {
		s = append(s, "LatencyNoData: "+fmt.Sprintf("%#v", this.LatencyNoData)+",\n")
	}
	if this.RequestRate != nil {
		s = append(s, "RequestRate: "+fmt.Sprintf("%#v", this.RequestRate)+",\n")
	}
	if this.ErrorRate != nil {
		s = append(s, "ErrorRate: "+fmt.Sprintf("%#v", this.ErrorRate)+",\n")
	}
	if this.ResponseThroughput != nil {
		s = append(s, "ResponseThroughput: "+fmt.Sprintf("%#v", this.ResponseThroughput)+",\n")
	}
	if this.CreationTimestamp != nil {
		s = append(s, "CreationTimestamp: "+fmt.Sprintf("%#v", this.CreationTimestamp)+",\n")
	}
	if this.RequestSizeStat != nil {
		s = append(s, "RequestSizeStat: "+fmt.Sprintf("%#v", this.RequestSizeStat)+",\n")
	}
	if this.ResponseSizeStat != nil {
		s = append(s, "ResponseSizeStat: "+fmt.Sprintf("%#v", this.ResponseSizeStat)+",\n")
	}
	if this.LatencyWithDataStat != nil {
		s = append(s, "LatencyWithDataStat: "+fmt.Sprintf("%#v", this.LatencyWithDataStat)+",\n")
	}
	if this.LatencyNoDataStat != nil {
		s = append(s, "LatencyNoDataStat: "+fmt.Sprintf("%#v", this.LatencyNoDataStat)+",\n")
	}
	if this.RequestRateStat != nil {
		s = append(s, "RequestRateStat: "+fmt.Sprintf("%#v", this.RequestRateStat)+",\n")
	}
	if this.ErrorRateStat != nil {
		s = append(s, "ErrorRateStat: "+fmt.Sprintf("%#v", this.ErrorRateStat)+",\n")
	}
	if this.ResponseThroughputStat != nil {
		s = append(s, "ResponseThroughputStat: "+fmt.Sprintf("%#v", this.ResponseThroughputStat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.OverrideInfo{")
	s = append(s, "ComponentIdentifier: "+fmt.Sprintf("%#v", this.ComponentIdentifier)+",\n")
	s = append(s, "SetDynamic: "+fmt.Sprintf("%#v", this.SetDynamic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaStruct) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.SchemaStruct{")
	s = append(s, "Examples: "+fmt.Sprintf("%#v", this.Examples)+",\n")
	s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SensitiveData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_type.SensitiveData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SensitiveDataType: "+fmt.Sprintf("%#v", this.SensitiveDataType)+",\n")
	s = append(s, "Section: "+fmt.Sprintf("%#v", this.Section)+",\n")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "Examples: "+fmt.Sprintf("%#v", this.Examples)+",\n")
	s = append(s, "RuleType: "+fmt.Sprintf("%#v", this.RuleType)+",\n")
	s = append(s, "Compliances: "+fmt.Sprintf("%#v", this.Compliances)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_type.AuthData{")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	s = append(s, "Insights: "+fmt.Sprintf("%#v", this.Insights)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_type.Authentication{")
	keysForAuthDataPerDefinition := make([]string, 0, len(this.AuthDataPerDefinition))
	for k, _ := range this.AuthDataPerDefinition {
		keysForAuthDataPerDefinition = append(keysForAuthDataPerDefinition, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAuthDataPerDefinition)
	mapStringForAuthDataPerDefinition := "map[string]*AuthData{"
	for _, k := range keysForAuthDataPerDefinition {
		mapStringForAuthDataPerDefinition += fmt.Sprintf("%#v: %#v,", k, this.AuthDataPerDefinition[k])
	}
	mapStringForAuthDataPerDefinition += "}"
	if this.AuthDataPerDefinition != nil {
		s = append(s, "AuthDataPerDefinition: "+mapStringForAuthDataPerDefinition+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSchema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&app_type.RequestSchema{")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	keysForBodyPerContentType := make([]string, 0, len(this.BodyPerContentType))
	for k, _ := range this.BodyPerContentType {
		keysForBodyPerContentType = append(keysForBodyPerContentType, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBodyPerContentType)
	mapStringForBodyPerContentType := "map[string]*SchemaStruct{"
	for _, k := range keysForBodyPerContentType {
		mapStringForBodyPerContentType += fmt.Sprintf("%#v: %#v,", k, this.BodyPerContentType[k])
	}
	mapStringForBodyPerContentType += "}"
	if this.BodyPerContentType != nil {
		s = append(s, "BodyPerContentType: "+mapStringForBodyPerContentType+",\n")
	}
	if this.QueryParams != nil {
		s = append(s, "QueryParams: "+fmt.Sprintf("%#v", this.QueryParams)+",\n")
	}
	if this.Cookies != nil {
		s = append(s, "Cookies: "+fmt.Sprintf("%#v", this.Cookies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSchema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.ResponseSchema{")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	keysForBodyPerContentType := make([]string, 0, len(this.BodyPerContentType))
	for k, _ := range this.BodyPerContentType {
		keysForBodyPerContentType = append(keysForBodyPerContentType, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBodyPerContentType)
	mapStringForBodyPerContentType := "map[string]*SchemaStruct{"
	for _, k := range keysForBodyPerContentType {
		mapStringForBodyPerContentType += fmt.Sprintf("%#v: %#v,", k, this.BodyPerContentType[k])
	}
	mapStringForBodyPerContentType += "}"
	if this.BodyPerContentType != nil {
		s = append(s, "BodyPerContentType: "+mapStringForBodyPerContentType+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscoveredSchema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_type.DiscoveredSchema{")
	if this.RequestSchema != nil {
		s = append(s, "RequestSchema: "+fmt.Sprintf("%#v", this.RequestSchema)+",\n")
	}
	keysForResponseSchemaPerRspCode := make([]string, 0, len(this.ResponseSchemaPerRspCode))
	for k, _ := range this.ResponseSchemaPerRspCode {
		keysForResponseSchemaPerRspCode = append(keysForResponseSchemaPerRspCode, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResponseSchemaPerRspCode)
	mapStringForResponseSchemaPerRspCode := "map[string]*ResponseSchema{"
	for _, k := range keysForResponseSchemaPerRspCode {
		mapStringForResponseSchemaPerRspCode += fmt.Sprintf("%#v: %#v,", k, this.ResponseSchemaPerRspCode[k])
	}
	mapStringForResponseSchemaPerRspCode += "}"
	if this.ResponseSchemaPerRspCode != nil {
		s = append(s, "ResponseSchemaPerRspCode: "+mapStringForResponseSchemaPerRspCode+",\n")
	}
	if this.LastUpdatedTime != nil {
		s = append(s, "LastUpdatedTime: "+fmt.Sprintf("%#v", this.LastUpdatedTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyPattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.KeyPattern{")
	if this.KeyPattern != nil {
		s = append(s, "KeyPattern: "+fmt.Sprintf("%#v", this.KeyPattern)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyPattern_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.KeyPattern_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *KeyPattern_RegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.KeyPattern_RegexValue{` +
		`RegexValue:` + fmt.Sprintf("%#v", this.RegexValue) + `}`}, ", ")
	return s
}
func (this *ValuePattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.ValuePattern{")
	if this.ValuePattern != nil {
		s = append(s, "ValuePattern: "+fmt.Sprintf("%#v", this.ValuePattern)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValuePattern_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.ValuePattern_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *ValuePattern_RegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.ValuePattern_RegexValue{` +
		`RegexValue:` + fmt.Sprintf("%#v", this.RegexValue) + `}`}, ", ")
	return s
}
func (this *KeyValuePattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.KeyValuePattern{")
	if this.KeyPattern != nil {
		s = append(s, "KeyPattern: "+fmt.Sprintf("%#v", this.KeyPattern)+",\n")
	}
	if this.ValuePattern != nil {
		s = append(s, "ValuePattern: "+fmt.Sprintf("%#v", this.ValuePattern)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomSections) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_type.CustomSections{")
	s = append(s, "CustomSections: "+fmt.Sprintf("%#v", this.CustomSections)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.APIEndpoint{")
	s = append(s, "ApiEndpointPath: "+fmt.Sprintf("%#v", this.ApiEndpointPath)+",\n")
	s = append(s, "Methods: "+fmt.Sprintf("%#v", this.Methods)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomDataDetectionConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&app_type.CustomDataDetectionConfig{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	if this.TargetChoice != nil {
		s = append(s, "TargetChoice: "+fmt.Sprintf("%#v", this.TargetChoice)+",\n")
	}
	if this.SectionChoice != nil {
		s = append(s, "SectionChoice: "+fmt.Sprintf("%#v", this.SectionChoice)+",\n")
	}
	if this.PatternChoice != nil {
		s = append(s, "PatternChoice: "+fmt.Sprintf("%#v", this.PatternChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomDataDetectionConfig_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_AnyTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_AnyTarget{` +
		`AnyTarget:` + fmt.Sprintf("%#v", this.AnyTarget) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_ApiEndpointTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_ApiEndpointTarget{` +
		`ApiEndpointTarget:` + fmt.Sprintf("%#v", this.ApiEndpointTarget) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_BasePath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_BasePath{` +
		`BasePath:` + fmt.Sprintf("%#v", this.BasePath) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_ApiGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_ApiGroup{` +
		`ApiGroup:` + fmt.Sprintf("%#v", this.ApiGroup) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_AllSections) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_AllSections{` +
		`AllSections:` + fmt.Sprintf("%#v", this.AllSections) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_AllRequestSections) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_AllRequestSections{` +
		`AllRequestSections:` + fmt.Sprintf("%#v", this.AllRequestSections) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_AllResponseSections) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_AllResponseSections{` +
		`AllResponseSections:` + fmt.Sprintf("%#v", this.AllResponseSections) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_CustomSections) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_CustomSections{` +
		`CustomSections:` + fmt.Sprintf("%#v", this.CustomSections) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_KeyPattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_KeyPattern{` +
		`KeyPattern:` + fmt.Sprintf("%#v", this.KeyPattern) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_ValuePattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_ValuePattern{` +
		`ValuePattern:` + fmt.Sprintf("%#v", this.ValuePattern) + `}`}, ", ")
	return s
}
func (this *CustomDataDetectionConfig_KeyValuePattern) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.CustomDataDetectionConfig_KeyValuePattern{` +
		`KeyValuePattern:` + fmt.Sprintf("%#v", this.KeyValuePattern) + `}`}, ", ")
	return s
}
func (this *CustomSensitiveDataType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_type.CustomSensitiveDataType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomSensitiveDataDetectionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_type.CustomSensitiveDataDetectionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SensitiveDataType != nil {
		s = append(s, "SensitiveDataType: "+fmt.Sprintf("%#v", this.SensitiveDataType)+",\n")
	}
	if this.SensitiveDataDetectionConfig != nil {
		s = append(s, "SensitiveDataDetectionConfig: "+fmt.Sprintf("%#v", this.SensitiveDataDetectionConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SensitiveDataDetectionRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.SensitiveDataDetectionRules{")
	if this.DisabledBuiltInRules != nil {
		s = append(s, "DisabledBuiltInRules: "+fmt.Sprintf("%#v", this.DisabledBuiltInRules)+",\n")
	}
	if this.CustomSensitiveDataDetectionRules != nil {
		s = append(s, "CustomSensitiveDataDetectionRules: "+fmt.Sprintf("%#v", this.CustomSensitiveDataDetectionRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuiltInSensitiveDataType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_type.BuiltInSensitiveDataType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscoveredAPISettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_type.DiscoveredAPISettings{")
	s = append(s, "PurgeDurationForInactiveDiscoveredApis: "+fmt.Sprintf("%#v", this.PurgeDurationForInactiveDiscoveredApis)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BusinessLogicMarkupSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessLogicMarkupSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiscoveredApiSettings != nil {
		{
			size, err := m.DiscoveredApiSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SensitiveDataDetectionRules != nil {
		{
			size, err := m.SensitiveDataDetectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LearnFromRedirectTraffic != nil {
		{
			size := m.LearnFromRedirectTraffic.Size()
			i -= size
			if _, err := m.LearnFromRedirectTraffic.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BusinessLogicMarkupSetting_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BusinessLogicMarkupSetting_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIEPDynExample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPDynExample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEPDynExample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComponentExamples) > 0 {
		for iNdEx := len(m.ComponentExamples) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ComponentExamples[iNdEx])
			copy(dAtA[i:], m.ComponentExamples[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ComponentExamples[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ComponentIdentifier) > 0 {
		i -= len(m.ComponentIdentifier)
		copy(dAtA[i:], m.ComponentIdentifier)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ComponentIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEPInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SensitiveDataLocation) > 0 {
		for iNdEx := len(m.SensitiveDataLocation) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SensitiveDataLocation[iNdEx])
			copy(dAtA[i:], m.SensitiveDataLocation[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SensitiveDataLocation[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.AvgLatency != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AvgLatency))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf5
	}
	if m.MaxLatency != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxLatency))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xed
	}
	if m.ReqRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ReqRate))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe5
	}
	if len(m.Engines) > 0 {
		for iNdEx := len(m.Engines) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Engines[iNdEx])
			copy(dAtA[i:], m.Engines[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Engines[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Compliances) > 0 {
		for iNdEx := len(m.Compliances) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Compliances[iNdEx])
			copy(dAtA[i:], m.Compliances[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Compliances[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.SchemaStatus) > 0 {
		i -= len(m.SchemaStatus)
		copy(dAtA[i:], m.SchemaStatus)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SchemaStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Attributes[iNdEx])
			copy(dAtA[i:], m.Attributes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Attributes[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.ApiType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ApiType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroups[iNdEx])
			copy(dAtA[i:], m.ApiGroups[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ApiGroups[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.SensitiveDataTypes) > 0 {
		for iNdEx := len(m.SensitiveDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SensitiveDataTypes[iNdEx])
			copy(dAtA[i:], m.SensitiveDataTypes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SensitiveDataTypes[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.RiskScore != nil {
		{
			size, err := m.RiskScore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.AuthenticationTypes) > 0 {
		for iNdEx := len(m.AuthenticationTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthenticationTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.AuthenticationState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AuthenticationState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.RequestsCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RequestsCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SecEventsCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SecEventsCount))
		i--
		dAtA[i] = 0x78
	}
	if len(m.SensitiveData) > 0 {
		dAtA11 := make([]byte, len(m.SensitiveData)*10)
		var j10 int
		for _, num := range m.SensitiveData {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTypes(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.AccessDiscoveryTime != nil {
		{
			size, err := m.AccessDiscoveryTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SecurityRisk != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SecurityRisk))
		i--
		dAtA[i] = 0x58
	}
	if m.PiiLevel != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PiiLevel))
		i--
		dAtA[i] = 0x50
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Category) > 0 {
		dAtA14 := make([]byte, len(m.Category)*10)
		var j13 int
		for _, num := range m.Category {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintTypes(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x42
	}
	if m.HasLearntSchema {
		i--
		if m.HasLearntSchema {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.RequestPercentage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RequestPercentage))))
		i--
		dAtA[i] = 0x35
	}
	if m.PdfInfo != nil {
		{
			size, err := m.PdfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DynExamples) > 0 {
		for iNdEx := len(m.DynExamples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DynExamples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollapsedUrl) > 0 {
		i -= len(m.CollapsedUrl)
		copy(dAtA[i:], m.CollapsedUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CollapsedUrl)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *RiskScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RiskScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RiskScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Severity != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x10
	}
	if m.Score != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticationTypeLocPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationTypeLocPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationTypeLocPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthType) > 0 {
		i -= len(m.AuthType)
		copy(dAtA[i:], m.AuthType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AuthType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Location != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Location))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PDFSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDFSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PDFSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Probability != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Probability))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *PDFStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDFStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PDFStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pdf_95 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Pdf_95))))
		i--
		dAtA[i] = 0x15
	}
	if m.PdfMean != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PdfMean))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *APIEPPDFInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPPDFInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEPPDFInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseThroughputStat != nil {
		{
			size, err := m.ResponseThroughputStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.ErrorRateStat != nil {
		{
			size, err := m.ErrorRateStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RequestRateStat != nil {
		{
			size, err := m.RequestRateStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.LatencyNoDataStat != nil {
		{
			size, err := m.LatencyNoDataStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.LatencyWithDataStat != nil {
		{
			size, err := m.LatencyWithDataStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ResponseSizeStat != nil {
		{
			size, err := m.ResponseSizeStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RequestSizeStat != nil {
		{
			size, err := m.RequestSizeStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CreationTimestamp != nil {
		{
			size, err := m.CreationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResponseThroughput) > 0 {
		for iNdEx := len(m.ResponseThroughput) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseThroughput[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ErrorRate) > 0 {
		for iNdEx := len(m.ErrorRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErrorRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RequestRate) > 0 {
		for iNdEx := len(m.RequestRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LatencyNoData) > 0 {
		for iNdEx := len(m.LatencyNoData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatencyNoData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LatencyWithData) > 0 {
		for iNdEx := len(m.LatencyWithData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatencyWithData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResponseSize) > 0 {
		for iNdEx := len(m.ResponseSize) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseSize[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestSize) > 0 {
		for iNdEx := len(m.RequestSize) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestSize[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OverrideInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OverrideInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SetDynamic {
		i--
		if m.SetDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ComponentIdentifier) > 0 {
		i -= len(m.ComponentIdentifier)
		copy(dAtA[i:], m.ComponentIdentifier)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ComponentIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SchemaStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Examples) > 0 {
		for iNdEx := len(m.Examples) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Examples[iNdEx])
			copy(dAtA[i:], m.Examples[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Examples[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SensitiveData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensitiveData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Compliances) > 0 {
		for iNdEx := len(m.Compliances) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Compliances[iNdEx])
			copy(dAtA[i:], m.Compliances[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Compliances[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.RuleType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RuleType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SensitiveDataType) > 0 {
		i -= len(m.SensitiveDataType)
		copy(dAtA[i:], m.SensitiveDataType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SensitiveDataType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Examples) > 0 {
		for iNdEx := len(m.Examples) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Examples[iNdEx])
			copy(dAtA[i:], m.Examples[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Examples[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Section) > 0 {
		i -= len(m.Section)
		copy(dAtA[i:], m.Section)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Section)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Insights) > 0 {
		i -= len(m.Insights)
		copy(dAtA[i:], m.Insights)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Insights)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Authentication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Authentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthDataPerDefinition) > 0 {
		keysForAuthDataPerDefinition := make([]string, 0, len(m.AuthDataPerDefinition))
		for k := range m.AuthDataPerDefinition {
			keysForAuthDataPerDefinition = append(keysForAuthDataPerDefinition, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAuthDataPerDefinition)
		for iNdEx := len(keysForAuthDataPerDefinition) - 1; iNdEx >= 0; iNdEx-- {
			v := m.AuthDataPerDefinition[string(keysForAuthDataPerDefinition[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForAuthDataPerDefinition[iNdEx])
			copy(dAtA[i:], keysForAuthDataPerDefinition[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForAuthDataPerDefinition[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cookies != nil {
		{
			size, err := m.Cookies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.QueryParams != nil {
		{
			size, err := m.QueryParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BodyPerContentType) > 0 {
		keysForBodyPerContentType := make([]string, 0, len(m.BodyPerContentType))
		for k := range m.BodyPerContentType {
			keysForBodyPerContentType = append(keysForBodyPerContentType, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForBodyPerContentType)
		for iNdEx := len(keysForBodyPerContentType) - 1; iNdEx >= 0; iNdEx-- {
			v := m.BodyPerContentType[string(keysForBodyPerContentType[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForBodyPerContentType[iNdEx])
			copy(dAtA[i:], keysForBodyPerContentType[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForBodyPerContentType[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Headers != nil {
		{
			size, err := m.Headers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BodyPerContentType) > 0 {
		keysForBodyPerContentType := make([]string, 0, len(m.BodyPerContentType))
		for k := range m.BodyPerContentType {
			keysForBodyPerContentType = append(keysForBodyPerContentType, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForBodyPerContentType)
		for iNdEx := len(keysForBodyPerContentType) - 1; iNdEx >= 0; iNdEx-- {
			v := m.BodyPerContentType[string(keysForBodyPerContentType[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForBodyPerContentType[iNdEx])
			copy(dAtA[i:], keysForBodyPerContentType[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForBodyPerContentType[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Headers != nil {
		{
			size, err := m.Headers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoveredSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdatedTime != nil {
		{
			size, err := m.LastUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResponseSchemaPerRspCode) > 0 {
		keysForResponseSchemaPerRspCode := make([]string, 0, len(m.ResponseSchemaPerRspCode))
		for k := range m.ResponseSchemaPerRspCode {
			keysForResponseSchemaPerRspCode = append(keysForResponseSchemaPerRspCode, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForResponseSchemaPerRspCode)
		for iNdEx := len(keysForResponseSchemaPerRspCode) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ResponseSchemaPerRspCode[string(keysForResponseSchemaPerRspCode[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForResponseSchemaPerRspCode[iNdEx])
			copy(dAtA[i:], keysForResponseSchemaPerRspCode[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForResponseSchemaPerRspCode[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RequestSchema != nil {
		{
			size, err := m.RequestSchema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyPattern) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyPattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyPattern != nil {
		{
			size := m.KeyPattern.Size()
			i -= size
			if _, err := m.KeyPattern.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeyPattern_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPattern_ExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactValue)
	copy(dAtA[i:], m.ExactValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *KeyPattern_RegexValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyPattern_RegexValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RegexValue)
	copy(dAtA[i:], m.RegexValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexValue)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ValuePattern) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValuePattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValuePattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValuePattern != nil {
		{
			size := m.ValuePattern.Size()
			i -= size
			if _, err := m.ValuePattern.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValuePattern_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValuePattern_ExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactValue)
	copy(dAtA[i:], m.ExactValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ValuePattern_RegexValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValuePattern_RegexValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RegexValue)
	copy(dAtA[i:], m.RegexValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexValue)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *KeyValuePattern) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValuePattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValuePattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValuePattern != nil {
		{
			size, err := m.ValuePattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.KeyPattern != nil {
		{
			size, err := m.KeyPattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomSections) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomSections) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomSections) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomSections) > 0 {
		dAtA38 := make([]byte, len(m.CustomSections)*10)
		var j37 int
		for _, num := range m.CustomSections {
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		i -= j37
		copy(dAtA[i:], dAtA38[:j37])
		i = encodeVarintTypes(dAtA, i, uint64(j37))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Methods) > 0 {
		dAtA40 := make([]byte, len(m.Methods)*10)
		var j39 int
		for _, num := range m.Methods {
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		i -= j39
		copy(dAtA[i:], dAtA40[:j39])
		i = encodeVarintTypes(dAtA, i, uint64(j39))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApiEndpointPath) > 0 {
		i -= len(m.ApiEndpointPath)
		copy(dAtA[i:], m.ApiEndpointPath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ApiEndpointPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomDataDetectionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomDataDetectionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PatternChoice != nil {
		{
			size := m.PatternChoice.Size()
			i -= size
			if _, err := m.PatternChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SectionChoice != nil {
		{
			size := m.SectionChoice.Size()
			i -= size
			if _, err := m.SectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TargetChoice != nil {
		{
			size := m.TargetChoice.Size()
			i -= size
			if _, err := m.TargetChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomDataDetectionConfig_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_AnyTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_AnyTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyTarget != nil {
		{
			size, err := m.AnyTarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_ApiEndpointTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_ApiEndpointTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiEndpointTarget != nil {
		{
			size, err := m.ApiEndpointTarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_BasePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_BasePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.BasePath)
	copy(dAtA[i:], m.BasePath)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.BasePath)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_ApiGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_ApiGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ApiGroup)
	copy(dAtA[i:], m.ApiGroup)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ApiGroup)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_AllSections) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_AllSections) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllSections != nil {
		{
			size, err := m.AllSections.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_AllRequestSections) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_AllRequestSections) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllRequestSections != nil {
		{
			size, err := m.AllRequestSections.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_AllResponseSections) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_AllResponseSections) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllResponseSections != nil {
		{
			size, err := m.AllResponseSections.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_CustomSections) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_CustomSections) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomSections != nil {
		{
			size, err := m.CustomSections.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_KeyPattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_KeyPattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KeyPattern != nil {
		{
			size, err := m.KeyPattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_ValuePattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_ValuePattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValuePattern != nil {
		{
			size, err := m.ValuePattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CustomDataDetectionConfig_KeyValuePattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDataDetectionConfig_KeyValuePattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KeyValuePattern != nil {
		{
			size, err := m.KeyValuePattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CustomSensitiveDataType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomSensitiveDataType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomSensitiveDataType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CustomSensitiveDataDetectionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomSensitiveDataDetectionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomSensitiveDataDetectionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SensitiveDataDetectionConfig != nil {
		{
			size, err := m.SensitiveDataDetectionConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SensitiveDataType != nil {
		{
			size, err := m.SensitiveDataType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SensitiveDataDetectionRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensitiveDataDetectionRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataDetectionRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomSensitiveDataDetectionRules) > 0 {
		for iNdEx := len(m.CustomSensitiveDataDetectionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomSensitiveDataDetectionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DisabledBuiltInRules) > 0 {
		for iNdEx := len(m.DisabledBuiltInRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisabledBuiltInRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BuiltInSensitiveDataType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuiltInSensitiveDataType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuiltInSensitiveDataType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoveredAPISettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredAPISettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredAPISettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PurgeDurationForInactiveDiscoveredApis != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PurgeDurationForInactiveDiscoveredApis))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Feature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	return n
}

func (m *BusinessLogicMarkupSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LearnFromRedirectTraffic != nil {
		n += m.LearnFromRedirectTraffic.Size()
	}
	if m.SensitiveDataDetectionRules != nil {
		l = m.SensitiveDataDetectionRules.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DiscoveredApiSettings != nil {
		l = m.DiscoveredApiSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BusinessLogicMarkupSetting_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BusinessLogicMarkupSetting_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *APIEPDynExample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComponentIdentifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ComponentExamples) > 0 {
		for _, s := range m.ComponentExamples {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *APIEPInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.DynExamples) > 0 {
		for _, e := range m.DynExamples {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PdfInfo != nil {
		l = m.PdfInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RequestPercentage != 0 {
		n += 5
	}
	if m.HasLearntSchema {
		n += 2
	}
	if len(m.Category) > 0 {
		l = 0
		for _, e := range m.Category {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PiiLevel != 0 {
		n += 1 + sovTypes(uint64(m.PiiLevel))
	}
	if m.SecurityRisk != 0 {
		n += 1 + sovTypes(uint64(m.SecurityRisk))
	}
	if m.AccessDiscoveryTime != nil {
		l = m.AccessDiscoveryTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SensitiveData) > 0 {
		l = 0
		for _, e := range m.SensitiveData {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.SecEventsCount != 0 {
		n += 1 + sovTypes(uint64(m.SecEventsCount))
	}
	if m.RequestsCount != 0 {
		n += 2 + sovTypes(uint64(m.RequestsCount))
	}
	if m.AuthenticationState != 0 {
		n += 2 + sovTypes(uint64(m.AuthenticationState))
	}
	if len(m.AuthenticationTypes) > 0 {
		for _, e := range m.AuthenticationTypes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RiskScore != nil {
		l = m.RiskScore.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.SensitiveDataTypes) > 0 {
		for _, s := range m.SensitiveDataTypes {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ApiGroups) > 0 {
		for _, s := range m.ApiGroups {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ApiType != 0 {
		n += 2 + sovTypes(uint64(m.ApiType))
	}
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.SchemaStatus)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Compliances) > 0 {
		for _, s := range m.Compliances {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Engines) > 0 {
		for _, s := range m.Engines {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ReqRate != 0 {
		n += 6
	}
	if m.MaxLatency != 0 {
		n += 6
	}
	if m.AvgLatency != 0 {
		n += 6
	}
	if len(m.SensitiveDataLocation) > 0 {
		for _, s := range m.SensitiveDataLocation {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RiskScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 5
	}
	if m.Severity != 0 {
		n += 1 + sovTypes(uint64(m.Severity))
	}
	return n
}

func (m *AuthenticationTypeLocPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.Location != 0 {
		n += 1 + sovTypes(uint64(m.Location))
	}
	l = len(m.AuthType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PDFSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Probability != 0 {
		n += 5
	}
	return n
}

func (m *PDFStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PdfMean != 0 {
		n += 5
	}
	if m.Pdf_95 != 0 {
		n += 5
	}
	return n
}

func (m *APIEPPDFInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestSize) > 0 {
		for _, e := range m.RequestSize {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseSize) > 0 {
		for _, e := range m.ResponseSize {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatencyWithData) > 0 {
		for _, e := range m.LatencyWithData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatencyNoData) > 0 {
		for _, e := range m.LatencyNoData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestRate) > 0 {
		for _, e := range m.RequestRate {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ErrorRate) > 0 {
		for _, e := range m.ErrorRate {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseThroughput) > 0 {
		for _, e := range m.ResponseThroughput {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CreationTimestamp != nil {
		l = m.CreationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RequestSizeStat != nil {
		l = m.RequestSizeStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ResponseSizeStat != nil {
		l = m.ResponseSizeStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LatencyWithDataStat != nil {
		l = m.LatencyWithDataStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LatencyNoDataStat != nil {
		l = m.LatencyNoDataStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RequestRateStat != nil {
		l = m.RequestRateStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ErrorRateStat != nil {
		l = m.ErrorRateStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ResponseThroughputStat != nil {
		l = m.ResponseThroughputStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OverrideInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComponentIdentifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SetDynamic {
		n += 2
	}
	return n
}

func (m *SchemaStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Examples) > 0 {
		for _, s := range m.Examples {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SensitiveData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Section)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Examples) > 0 {
		for _, s := range m.Examples {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.SensitiveDataType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RuleType != 0 {
		n += 1 + sovTypes(uint64(m.RuleType))
	}
	if len(m.Compliances) > 0 {
		for _, s := range m.Compliances {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AuthData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Insights)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Authentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthDataPerDefinition) > 0 {
		for k, v := range m.AuthDataPerDefinition {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RequestSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Headers != nil {
		l = m.Headers.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.BodyPerContentType) > 0 {
		for k, v := range m.BodyPerContentType {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.QueryParams != nil {
		l = m.QueryParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Cookies != nil {
		l = m.Cookies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ResponseSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Headers != nil {
		l = m.Headers.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.BodyPerContentType) > 0 {
		for k, v := range m.BodyPerContentType {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DiscoveredSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestSchema != nil {
		l = m.RequestSchema.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ResponseSchemaPerRspCode) > 0 {
		for k, v := range m.ResponseSchemaPerRspCode {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.LastUpdatedTime != nil {
		l = m.LastUpdatedTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *KeyPattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyPattern != nil {
		n += m.KeyPattern.Size()
	}
	return n
}

func (m *KeyPattern_ExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *KeyPattern_RegexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegexValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ValuePattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValuePattern != nil {
		n += m.ValuePattern.Size()
	}
	return n
}

func (m *ValuePattern_ExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ValuePattern_RegexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegexValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *KeyValuePattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyPattern != nil {
		l = m.KeyPattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ValuePattern != nil {
		l = m.ValuePattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CustomSections) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CustomSections) > 0 {
		l = 0
		for _, e := range m.CustomSections {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *APIEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiEndpointPath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Methods) > 0 {
		l = 0
		for _, e := range m.Methods {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *CustomDataDetectionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	if m.TargetChoice != nil {
		n += m.TargetChoice.Size()
	}
	if m.SectionChoice != nil {
		n += m.SectionChoice.Size()
	}
	if m.PatternChoice != nil {
		n += m.PatternChoice.Size()
	}
	return n
}

func (m *CustomDataDetectionConfig_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CustomDataDetectionConfig_AnyTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyTarget != nil {
		l = m.AnyTarget.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_ApiEndpointTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiEndpointTarget != nil {
		l = m.ApiEndpointTarget.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_BasePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BasePath)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CustomDataDetectionConfig_ApiGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiGroup)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CustomDataDetectionConfig_AllSections) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllSections != nil {
		l = m.AllSections.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_AllRequestSections) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllRequestSections != nil {
		l = m.AllRequestSections.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_AllResponseSections) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllResponseSections != nil {
		l = m.AllResponseSections.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_CustomSections) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomSections != nil {
		l = m.CustomSections.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_KeyPattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyPattern != nil {
		l = m.KeyPattern.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_ValuePattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValuePattern != nil {
		l = m.ValuePattern.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDataDetectionConfig_KeyValuePattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyValuePattern != nil {
		l = m.KeyValuePattern.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomSensitiveDataType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CustomSensitiveDataDetectionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SensitiveDataType != nil {
		l = m.SensitiveDataType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SensitiveDataDetectionConfig != nil {
		l = m.SensitiveDataDetectionConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SensitiveDataDetectionRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DisabledBuiltInRules) > 0 {
		for _, e := range m.DisabledBuiltInRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CustomSensitiveDataDetectionRules) > 0 {
		for _, e := range m.CustomSensitiveDataDetectionRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *BuiltInSensitiveDataType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DiscoveredAPISettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PurgeDurationForInactiveDiscoveredApis != 0 {
		n += 1 + sovTypes(uint64(m.PurgeDurationForInactiveDiscoveredApis))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting{`,
		`LearnFromRedirectTraffic:` + fmt.Sprintf("%v", this.LearnFromRedirectTraffic) + `,`,
		`SensitiveDataDetectionRules:` + strings.Replace(this.SensitiveDataDetectionRules.String(), "SensitiveDataDetectionRules", "SensitiveDataDetectionRules", 1) + `,`,
		`DiscoveredApiSettings:` + strings.Replace(this.DiscoveredApiSettings.String(), "DiscoveredAPISettings", "DiscoveredAPISettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Features:` + repeatedStringForFeatures + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Features:` + repeatedStringForFeatures + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Features:` + repeatedStringForFeatures + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Features:` + repeatedStringForFeatures + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPDynExample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEPDynExample{`,
		`ComponentIdentifier:` + fmt.Sprintf("%v", this.ComponentIdentifier) + `,`,
		`ComponentExamples:` + fmt.Sprintf("%v", this.ComponentExamples) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDynExamples := "[]*APIEPDynExample{"
	for _, f := range this.DynExamples {
		repeatedStringForDynExamples += strings.Replace(f.String(), "APIEPDynExample", "APIEPDynExample", 1) + ","
	}
	repeatedStringForDynExamples += "}"
	repeatedStringForAuthenticationTypes := "[]*AuthenticationTypeLocPair{"
	for _, f := range this.AuthenticationTypes {
		repeatedStringForAuthenticationTypes += strings.Replace(f.String(), "AuthenticationTypeLocPair", "AuthenticationTypeLocPair", 1) + ","
	}
	repeatedStringForAuthenticationTypes += "}"
	s := strings.Join([]string{`&APIEPInfo{`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`DynExamples:` + repeatedStringForDynExamples + `,`,
		`PdfInfo:` + strings.Replace(this.PdfInfo.String(), "APIEPPDFInfo", "APIEPPDFInfo", 1) + `,`,
		`RequestPercentage:` + fmt.Sprintf("%v", this.RequestPercentage) + `,`,
		`HasLearntSchema:` + fmt.Sprintf("%v", this.HasLearntSchema) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`PiiLevel:` + fmt.Sprintf("%v", this.PiiLevel) + `,`,
		`SecurityRisk:` + fmt.Sprintf("%v", this.SecurityRisk) + `,`,
		`AccessDiscoveryTime:` + strings.Replace(fmt.Sprintf("%v", this.AccessDiscoveryTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`SensitiveData:` + fmt.Sprintf("%v", this.SensitiveData) + `,`,
		`SecEventsCount:` + fmt.Sprintf("%v", this.SecEventsCount) + `,`,
		`RequestsCount:` + fmt.Sprintf("%v", this.RequestsCount) + `,`,
		`AuthenticationState:` + fmt.Sprintf("%v", this.AuthenticationState) + `,`,
		`AuthenticationTypes:` + repeatedStringForAuthenticationTypes + `,`,
		`RiskScore:` + strings.Replace(this.RiskScore.String(), "RiskScore", "RiskScore", 1) + `,`,
		`SensitiveDataTypes:` + fmt.Sprintf("%v", this.SensitiveDataTypes) + `,`,
		`ApiGroups:` + fmt.Sprintf("%v", this.ApiGroups) + `,`,
		`ApiType:` + fmt.Sprintf("%v", this.ApiType) + `,`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`SchemaStatus:` + fmt.Sprintf("%v", this.SchemaStatus) + `,`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`Engines:` + fmt.Sprintf("%v", this.Engines) + `,`,
		`ReqRate:` + fmt.Sprintf("%v", this.ReqRate) + `,`,
		`MaxLatency:` + fmt.Sprintf("%v", this.MaxLatency) + `,`,
		`AvgLatency:` + fmt.Sprintf("%v", this.AvgLatency) + `,`,
		`SensitiveDataLocation:` + fmt.Sprintf("%v", this.SensitiveDataLocation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RiskScore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RiskScore{`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Severity:` + fmt.Sprintf("%v", this.Severity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationTypeLocPair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationTypeLocPair{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`AuthType:` + fmt.Sprintf("%v", this.AuthType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PDFSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PDFSpec{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PDFStat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PDFStat{`,
		`PdfMean:` + fmt.Sprintf("%v", this.PdfMean) + `,`,
		`Pdf_95:` + fmt.Sprintf("%v", this.Pdf_95) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPPDFInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestSize := "[]*PDFSpec{"
	for _, f := range this.RequestSize {
		repeatedStringForRequestSize += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForRequestSize += "}"
	repeatedStringForResponseSize := "[]*PDFSpec{"
	for _, f := range this.ResponseSize {
		repeatedStringForResponseSize += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForResponseSize += "}"
	repeatedStringForLatencyWithData := "[]*PDFSpec{"
	for _, f := range this.LatencyWithData {
		repeatedStringForLatencyWithData += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForLatencyWithData += "}"
	repeatedStringForLatencyNoData := "[]*PDFSpec{"
	for _, f := range this.LatencyNoData {
		repeatedStringForLatencyNoData += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForLatencyNoData += "}"
	repeatedStringForRequestRate := "[]*PDFSpec{"
	for _, f := range this.RequestRate {
		repeatedStringForRequestRate += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForRequestRate += "}"
	repeatedStringForErrorRate := "[]*PDFSpec{"
	for _, f := range this.ErrorRate {
		repeatedStringForErrorRate += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForErrorRate += "}"
	repeatedStringForResponseThroughput := "[]*PDFSpec{"
	for _, f := range this.ResponseThroughput {
		repeatedStringForResponseThroughput += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForResponseThroughput += "}"
	s := strings.Join([]string{`&APIEPPDFInfo{`,
		`RequestSize:` + repeatedStringForRequestSize + `,`,
		`ResponseSize:` + repeatedStringForResponseSize + `,`,
		`LatencyWithData:` + repeatedStringForLatencyWithData + `,`,
		`LatencyNoData:` + repeatedStringForLatencyNoData + `,`,
		`RequestRate:` + repeatedStringForRequestRate + `,`,
		`ErrorRate:` + repeatedStringForErrorRate + `,`,
		`ResponseThroughput:` + repeatedStringForResponseThroughput + `,`,
		`CreationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.CreationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`RequestSizeStat:` + strings.Replace(this.RequestSizeStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`ResponseSizeStat:` + strings.Replace(this.ResponseSizeStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`LatencyWithDataStat:` + strings.Replace(this.LatencyWithDataStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`LatencyNoDataStat:` + strings.Replace(this.LatencyNoDataStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`RequestRateStat:` + strings.Replace(this.RequestRateStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`ErrorRateStat:` + strings.Replace(this.ErrorRateStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`ResponseThroughputStat:` + strings.Replace(this.ResponseThroughputStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideInfo{`,
		`ComponentIdentifier:` + fmt.Sprintf("%v", this.ComponentIdentifier) + `,`,
		`SetDynamic:` + fmt.Sprintf("%v", this.SetDynamic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaStruct{`,
		`Examples:` + fmt.Sprintf("%v", this.Examples) + `,`,
		`Schema:` + fmt.Sprintf("%v", this.Schema) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Section:` + fmt.Sprintf("%v", this.Section) + `,`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Examples:` + fmt.Sprintf("%v", this.Examples) + `,`,
		`SensitiveDataType:` + fmt.Sprintf("%v", this.SensitiveDataType) + `,`,
		`RuleType:` + fmt.Sprintf("%v", this.RuleType) + `,`,
		`Compliances:` + fmt.Sprintf("%v", this.Compliances) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthData{`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`Schema:` + strings.Replace(this.Schema.String(), "SchemaStruct", "SchemaStruct", 1) + `,`,
		`Insights:` + fmt.Sprintf("%v", this.Insights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Authentication) String() string {
	if this == nil {
		return "nil"
	}
	keysForAuthDataPerDefinition := make([]string, 0, len(this.AuthDataPerDefinition))
	for k, _ := range this.AuthDataPerDefinition {
		keysForAuthDataPerDefinition = append(keysForAuthDataPerDefinition, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAuthDataPerDefinition)
	mapStringForAuthDataPerDefinition := "map[string]*AuthData{"
	for _, k := range keysForAuthDataPerDefinition {
		mapStringForAuthDataPerDefinition += fmt.Sprintf("%v: %v,", k, this.AuthDataPerDefinition[k])
	}
	mapStringForAuthDataPerDefinition += "}"
	s := strings.Join([]string{`&Authentication{`,
		`AuthDataPerDefinition:` + mapStringForAuthDataPerDefinition + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSchema) String() string {
	if this == nil {
		return "nil"
	}
	keysForBodyPerContentType := make([]string, 0, len(this.BodyPerContentType))
	for k, _ := range this.BodyPerContentType {
		keysForBodyPerContentType = append(keysForBodyPerContentType, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBodyPerContentType)
	mapStringForBodyPerContentType := "map[string]*SchemaStruct{"
	for _, k := range keysForBodyPerContentType {
		mapStringForBodyPerContentType += fmt.Sprintf("%v: %v,", k, this.BodyPerContentType[k])
	}
	mapStringForBodyPerContentType += "}"
	s := strings.Join([]string{`&RequestSchema{`,
		`Headers:` + strings.Replace(this.Headers.String(), "SchemaStruct", "SchemaStruct", 1) + `,`,
		`BodyPerContentType:` + mapStringForBodyPerContentType + `,`,
		`QueryParams:` + strings.Replace(this.QueryParams.String(), "SchemaStruct", "SchemaStruct", 1) + `,`,
		`Cookies:` + strings.Replace(this.Cookies.String(), "SchemaStruct", "SchemaStruct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSchema) String() string {
	if this == nil {
		return "nil"
	}
	keysForBodyPerContentType := make([]string, 0, len(this.BodyPerContentType))
	for k, _ := range this.BodyPerContentType {
		keysForBodyPerContentType = append(keysForBodyPerContentType, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBodyPerContentType)
	mapStringForBodyPerContentType := "map[string]*SchemaStruct{"
	for _, k := range keysForBodyPerContentType {
		mapStringForBodyPerContentType += fmt.Sprintf("%v: %v,", k, this.BodyPerContentType[k])
	}
	mapStringForBodyPerContentType += "}"
	s := strings.Join([]string{`&ResponseSchema{`,
		`Headers:` + strings.Replace(this.Headers.String(), "SchemaStruct", "SchemaStruct", 1) + `,`,
		`BodyPerContentType:` + mapStringForBodyPerContentType + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoveredSchema) String() string {
	if this == nil {
		return "nil"
	}
	keysForResponseSchemaPerRspCode := make([]string, 0, len(this.ResponseSchemaPerRspCode))
	for k, _ := range this.ResponseSchemaPerRspCode {
		keysForResponseSchemaPerRspCode = append(keysForResponseSchemaPerRspCode, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResponseSchemaPerRspCode)
	mapStringForResponseSchemaPerRspCode := "map[string]*ResponseSchema{"
	for _, k := range keysForResponseSchemaPerRspCode {
		mapStringForResponseSchemaPerRspCode += fmt.Sprintf("%v: %v,", k, this.ResponseSchemaPerRspCode[k])
	}
	mapStringForResponseSchemaPerRspCode += "}"
	s := strings.Join([]string{`&DiscoveredSchema{`,
		`RequestSchema:` + strings.Replace(this.RequestSchema.String(), "RequestSchema", "RequestSchema", 1) + `,`,
		`ResponseSchemaPerRspCode:` + mapStringForResponseSchemaPerRspCode + `,`,
		`LastUpdatedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastUpdatedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyPattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyPattern{`,
		`KeyPattern:` + fmt.Sprintf("%v", this.KeyPattern) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyPattern_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyPattern_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyPattern_RegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyPattern_RegexValue{`,
		`RegexValue:` + fmt.Sprintf("%v", this.RegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValuePattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValuePattern{`,
		`ValuePattern:` + fmt.Sprintf("%v", this.ValuePattern) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValuePattern_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValuePattern_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValuePattern_RegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValuePattern_RegexValue{`,
		`RegexValue:` + fmt.Sprintf("%v", this.RegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValuePattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyValuePattern{`,
		`KeyPattern:` + strings.Replace(this.KeyPattern.String(), "KeyPattern", "KeyPattern", 1) + `,`,
		`ValuePattern:` + strings.Replace(this.ValuePattern.String(), "ValuePattern", "ValuePattern", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomSections) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomSections{`,
		`CustomSections:` + fmt.Sprintf("%v", this.CustomSections) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpoint{`,
		`ApiEndpointPath:` + fmt.Sprintf("%v", this.ApiEndpointPath) + `,`,
		`Methods:` + fmt.Sprintf("%v", this.Methods) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`TargetChoice:` + fmt.Sprintf("%v", this.TargetChoice) + `,`,
		`SectionChoice:` + fmt.Sprintf("%v", this.SectionChoice) + `,`,
		`PatternChoice:` + fmt.Sprintf("%v", this.PatternChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_AnyTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_AnyTarget{`,
		`AnyTarget:` + strings.Replace(fmt.Sprintf("%v", this.AnyTarget), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_ApiEndpointTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_ApiEndpointTarget{`,
		`ApiEndpointTarget:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpointTarget), "APIEndpoint", "APIEndpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_BasePath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_BasePath{`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_ApiGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_ApiGroup{`,
		`ApiGroup:` + fmt.Sprintf("%v", this.ApiGroup) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_AllSections) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_AllSections{`,
		`AllSections:` + strings.Replace(fmt.Sprintf("%v", this.AllSections), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_AllRequestSections) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_AllRequestSections{`,
		`AllRequestSections:` + strings.Replace(fmt.Sprintf("%v", this.AllRequestSections), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_AllResponseSections) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_AllResponseSections{`,
		`AllResponseSections:` + strings.Replace(fmt.Sprintf("%v", this.AllResponseSections), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_CustomSections) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_CustomSections{`,
		`CustomSections:` + strings.Replace(fmt.Sprintf("%v", this.CustomSections), "CustomSections", "CustomSections", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_KeyPattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_KeyPattern{`,
		`KeyPattern:` + strings.Replace(fmt.Sprintf("%v", this.KeyPattern), "KeyPattern", "KeyPattern", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_ValuePattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_ValuePattern{`,
		`ValuePattern:` + strings.Replace(fmt.Sprintf("%v", this.ValuePattern), "ValuePattern", "ValuePattern", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDataDetectionConfig_KeyValuePattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDataDetectionConfig_KeyValuePattern{`,
		`KeyValuePattern:` + strings.Replace(fmt.Sprintf("%v", this.KeyValuePattern), "KeyValuePattern", "KeyValuePattern", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomSensitiveDataType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomSensitiveDataType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomSensitiveDataDetectionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomSensitiveDataDetectionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`SensitiveDataType:` + strings.Replace(this.SensitiveDataType.String(), "CustomSensitiveDataType", "CustomSensitiveDataType", 1) + `,`,
		`SensitiveDataDetectionConfig:` + strings.Replace(this.SensitiveDataDetectionConfig.String(), "CustomDataDetectionConfig", "CustomDataDetectionConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataDetectionRules) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDisabledBuiltInRules := "[]*BuiltInSensitiveDataType{"
	for _, f := range this.DisabledBuiltInRules {
		repeatedStringForDisabledBuiltInRules += strings.Replace(f.String(), "BuiltInSensitiveDataType", "BuiltInSensitiveDataType", 1) + ","
	}
	repeatedStringForDisabledBuiltInRules += "}"
	repeatedStringForCustomSensitiveDataDetectionRules := "[]*CustomSensitiveDataDetectionRule{"
	for _, f := range this.CustomSensitiveDataDetectionRules {
		repeatedStringForCustomSensitiveDataDetectionRules += strings.Replace(f.String(), "CustomSensitiveDataDetectionRule", "CustomSensitiveDataDetectionRule", 1) + ","
	}
	repeatedStringForCustomSensitiveDataDetectionRules += "}"
	s := strings.Join([]string{`&SensitiveDataDetectionRules{`,
		`DisabledBuiltInRules:` + repeatedStringForDisabledBuiltInRules + `,`,
		`CustomSensitiveDataDetectionRules:` + repeatedStringForCustomSensitiveDataDetectionRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *BuiltInSensitiveDataType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuiltInSensitiveDataType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoveredAPISettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscoveredAPISettings{`,
		`PurgeDurationForInactiveDiscoveredApis:` + fmt.Sprintf("%v", this.PurgeDurationForInactiveDiscoveredApis) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= FeatureType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessLogicMarkupSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessLogicMarkupSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessLogicMarkupSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &BusinessLogicMarkupSetting_Disable{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &BusinessLogicMarkupSetting_Enable{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataDetectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataDetectionRules == nil {
				m.SensitiveDataDetectionRules = &SensitiveDataDetectionRules{}
			}
			if err := m.SensitiveDataDetectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveredApiSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiscoveredApiSettings == nil {
				m.DiscoveredApiSettings = &DiscoveredAPISettings{}
			}
			if err := m.DiscoveredApiSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPDynExample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPDynExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPDynExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentExamples", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentExamples = append(m.ComponentExamples, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynExamples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynExamples = append(m.DynExamples, &APIEPDynExample{})
			if err := m.DynExamples[len(m.DynExamples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PdfInfo == nil {
				m.PdfInfo = &APIEPPDFInfo{}
			}
			if err := m.PdfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RequestPercentage = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLearntSchema", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLearntSchema = bool(v != 0)
		case 8:
			if wireType == 0 {
				var v APIEPCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= APIEPCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Category = append(m.Category, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Category) == 0 {
					m.Category = make([]APIEPCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v APIEPCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= APIEPCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Category = append(m.Category, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiiLevel", wireType)
			}
			m.PiiLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PiiLevel |= APIEPPIILevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRisk", wireType)
			}
			m.SecurityRisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityRisk |= APIEPSecurityRisk(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessDiscoveryTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessDiscoveryTime == nil {
				m.AccessDiscoveryTime = &types.Timestamp{}
			}
			if err := m.AccessDiscoveryTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v SensitiveDataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= SensitiveDataType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SensitiveData = append(m.SensitiveData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SensitiveData) == 0 {
					m.SensitiveData = make([]SensitiveDataType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v SensitiveDataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= SensitiveDataType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SensitiveData = append(m.SensitiveData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveData", wireType)
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecEventsCount", wireType)
			}
			m.SecEventsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecEventsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsCount", wireType)
			}
			m.RequestsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationState", wireType)
			}
			m.AuthenticationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationState |= AuthenticationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationTypes = append(m.AuthenticationTypes, &AuthenticationTypeLocPair{})
			if err := m.AuthenticationTypes[len(m.AuthenticationTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskScore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RiskScore == nil {
				m.RiskScore = &RiskScore{}
			}
			if err := m.RiskScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensitiveDataTypes = append(m.SensitiveDataTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiType", wireType)
			}
			m.ApiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiType |= APIType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compliances = append(m.Compliances, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Engines = append(m.Engines, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 28:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ReqRate = float32(math.Float32frombits(v))
		case 29:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLatency", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxLatency = float32(math.Float32frombits(v))
		case 30:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgLatency", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AvgLatency = float32(math.Float32frombits(v))
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensitiveDataLocation = append(m.SensitiveDataLocation, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RiskScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RiskScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RiskScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= APIEPSecurityRisk(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationTypeLocPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationTypeLocPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationTypeLocPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AuthenticationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= AuthenticationLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDFSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDFSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDFSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Probability = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDFStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDFStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDFStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfMean", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PdfMean = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdf_95", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Pdf_95 = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPPDFInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPPDFInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPPDFInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSize = append(m.RequestSize, &PDFSpec{})
			if err := m.RequestSize[len(m.RequestSize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseSize = append(m.ResponseSize, &PDFSpec{})
			if err := m.ResponseSize[len(m.ResponseSize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyWithData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatencyWithData = append(m.LatencyWithData, &PDFSpec{})
			if err := m.LatencyWithData[len(m.LatencyWithData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyNoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatencyNoData = append(m.LatencyNoData, &PDFSpec{})
			if err := m.LatencyNoData[len(m.LatencyNoData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestRate = append(m.RequestRate, &PDFSpec{})
			if err := m.RequestRate[len(m.RequestRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorRate = append(m.ErrorRate, &PDFSpec{})
			if err := m.ErrorRate[len(m.ErrorRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThroughput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseThroughput = append(m.ResponseThroughput, &PDFSpec{})
			if err := m.ResponseThroughput[len(m.ResponseThroughput)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTimestamp == nil {
				m.CreationTimestamp = &types.Timestamp{}
			}
			if err := m.CreationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSizeStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestSizeStat == nil {
				m.RequestSizeStat = &PDFStat{}
			}
			if err := m.RequestSizeStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSizeStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseSizeStat == nil {
				m.ResponseSizeStat = &PDFStat{}
			}
			if err := m.ResponseSizeStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyWithDataStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatencyWithDataStat == nil {
				m.LatencyWithDataStat = &PDFStat{}
			}
			if err := m.LatencyWithDataStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyNoDataStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatencyNoDataStat == nil {
				m.LatencyNoDataStat = &PDFStat{}
			}
			if err := m.LatencyNoDataStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestRateStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestRateStat == nil {
				m.RequestRateStat = &PDFStat{}
			}
			if err := m.RequestRateStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorRateStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorRateStat == nil {
				m.ErrorRateStat = &PDFStat{}
			}
			if err := m.ErrorRateStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThroughputStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseThroughputStat == nil {
				m.ResponseThroughputStat = &PDFStat{}
			}
			if err := m.ResponseThroughputStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetDynamic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Examples", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Examples = append(m.Examples, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensitiveData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensitiveData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensitiveData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SensitiveDataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Section = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Examples", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Examples = append(m.Examples, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensitiveDataType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleType", wireType)
			}
			m.RuleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleType |= SensitiveDataDetectionRuleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compliances = append(m.Compliances, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &SchemaStruct{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insights", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Insights = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authentication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authentication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authentication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthDataPerDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthDataPerDefinition == nil {
				m.AuthDataPerDefinition = make(map[string]*AuthData)
			}
			var mapkey string
			var mapvalue *AuthData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AuthData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AuthDataPerDefinition[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = &SchemaStruct{}
			}
			if err := m.Headers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyPerContentType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyPerContentType == nil {
				m.BodyPerContentType = make(map[string]*SchemaStruct)
			}
			var mapkey string
			var mapvalue *SchemaStruct
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SchemaStruct{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BodyPerContentType[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryParams == nil {
				m.QueryParams = &SchemaStruct{}
			}
			if err := m.QueryParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cookies == nil {
				m.Cookies = &SchemaStruct{}
			}
			if err := m.Cookies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = &SchemaStruct{}
			}
			if err := m.Headers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyPerContentType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyPerContentType == nil {
				m.BodyPerContentType = make(map[string]*SchemaStruct)
			}
			var mapkey string
			var mapvalue *SchemaStruct
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SchemaStruct{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BodyPerContentType[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveredSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveredSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveredSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestSchema == nil {
				m.RequestSchema = &RequestSchema{}
			}
			if err := m.RequestSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSchemaPerRspCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseSchemaPerRspCode == nil {
				m.ResponseSchemaPerRspCode = make(map[string]*ResponseSchema)
			}
			var mapkey string
			var mapvalue *ResponseSchema
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResponseSchema{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResponseSchemaPerRspCode[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdatedTime == nil {
				m.LastUpdatedTime = &types.Timestamp{}
			}
			if err := m.LastUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyPattern) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyPattern: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyPattern: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPattern = &KeyPattern_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPattern = &KeyPattern_RegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValuePattern) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValuePattern: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValuePattern: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuePattern = &ValuePattern_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuePattern = &ValuePattern_RegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValuePattern) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValuePattern: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValuePattern: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyPattern == nil {
				m.KeyPattern = &KeyPattern{}
			}
			if err := m.KeyPattern.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuePattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValuePattern == nil {
				m.ValuePattern = &ValuePattern{}
			}
			if err := m.ValuePattern.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomSections) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomSections: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomSections: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.HttpSections
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.HttpSections(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CustomSections = append(m.CustomSections, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.CustomSections) == 0 {
					m.CustomSections = make([]schema.HttpSections, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.HttpSections
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.HttpSections(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CustomSections = append(m.CustomSections, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSections", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v schema.HttpMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.HttpMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Methods = append(m.Methods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Methods) == 0 {
					m.Methods = make([]schema.HttpMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.HttpMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.HttpMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Methods = append(m.Methods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomDataDetectionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomDataDetectionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomDataDetectionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &CustomDataDetectionConfig_AnyDomain{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &CustomDataDetectionConfig_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TargetChoice = &CustomDataDetectionConfig_AnyTarget{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIEndpoint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TargetChoice = &CustomDataDetectionConfig_ApiEndpointTarget{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetChoice = &CustomDataDetectionConfig_BasePath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetChoice = &CustomDataDetectionConfig_ApiGroup{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SectionChoice = &CustomDataDetectionConfig_AllSections{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllRequestSections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SectionChoice = &CustomDataDetectionConfig_AllRequestSections{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllResponseSections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SectionChoice = &CustomDataDetectionConfig_AllResponseSections{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomSections{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SectionChoice = &CustomDataDetectionConfig_CustomSections{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeyPattern{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PatternChoice = &CustomDataDetectionConfig_KeyPattern{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuePattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValuePattern{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PatternChoice = &CustomDataDetectionConfig_ValuePattern{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValuePattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeyValuePattern{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PatternChoice = &CustomDataDetectionConfig_KeyValuePattern{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomSensitiveDataType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomSensitiveDataType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomSensitiveDataType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomSensitiveDataDetectionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomSensitiveDataDetectionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomSensitiveDataDetectionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataType == nil {
				m.SensitiveDataType = &CustomSensitiveDataType{}
			}
			if err := m.SensitiveDataType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataDetectionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataDetectionConfig == nil {
				m.SensitiveDataDetectionConfig = &CustomDataDetectionConfig{}
			}
			if err := m.SensitiveDataDetectionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensitiveDataDetectionRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensitiveDataDetectionRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensitiveDataDetectionRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledBuiltInRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledBuiltInRules = append(m.DisabledBuiltInRules, &BuiltInSensitiveDataType{})
			if err := m.DisabledBuiltInRules[len(m.DisabledBuiltInRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSensitiveDataDetectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomSensitiveDataDetectionRules = append(m.CustomSensitiveDataDetectionRules, &CustomSensitiveDataDetectionRule{})
			if err := m.CustomSensitiveDataDetectionRules[len(m.CustomSensitiveDataDetectionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuiltInSensitiveDataType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuiltInSensitiveDataType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuiltInSensitiveDataType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveredAPISettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveredAPISettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveredAPISettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurgeDurationForInactiveDiscoveredApis", wireType)
			}
			m.PurgeDurationForInactiveDiscoveredApis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurgeDurationForInactiveDiscoveredApis |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/nat_policy/types.proto

package nat_policy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Rule Specification
//
// x-displayName: "Rule Specification"
// Rule specifies configuration of where, when and how to apply the NAT Policy
type RuleType struct {
	// name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "NAT to Internet"
	// Name of the Rule
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// enable
	//
	// x-displayName: "Enable"
	// x-required
	// Enable or disable the rule
	//
	// Types that are valid to be assigned to EnableChoice:
	//	*RuleType_Enable
	//	*RuleType_Disable
	EnableChoice isRuleType_EnableChoice `protobuf_oneof:"enable_choice"`
	// scope
	//
	// x-displayName: "Scope"
	// x-required
	// Scope identifies the ingress point at which to apply rule
	//
	// Types that are valid to be assigned to ScopeChoice:
	//	*RuleType_CloudConnect
	//	*RuleType_NetworkInterface
	//	*RuleType_Segment
	//	*RuleType_VirtualNetwork
	//	*RuleType_NodeInterface
	ScopeChoice isRuleType_ScopeChoice `protobuf_oneof:"scope_choice"`
	// match criteria
	//
	// x-displayName: "Match Criteria"
	// Criteria to match on the packet to apply the Action
	Criteria *MatchCriteriaType `protobuf:"bytes,3,opt,name=criteria,proto3" json:"criteria,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// x-required
	// Action to apply if rule is applied
	Action *ActionType `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *RuleType) Reset()      { *m = RuleType{} }
func (*RuleType) ProtoMessage() {}
func (*RuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1272d905d84e406d, []int{0}
}
func (m *RuleType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleType.Merge(m, src)
}
func (m *RuleType) XXX_Size() int {
	return m.Size()
}
func (m *RuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleType.DiscardUnknown(m)
}

var xxx_messageInfo_RuleType proto.InternalMessageInfo

type isRuleType_EnableChoice interface {
	isRuleType_EnableChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRuleType_ScopeChoice interface {
	isRuleType_ScopeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RuleType_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,21,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}
type RuleType_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,22,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}
type RuleType_CloudConnect struct {
	CloudConnect *schema.CloudConnectRefType `protobuf:"bytes,51,opt,name=cloud_connect,json=cloudConnect,proto3,oneof" json:"cloud_connect,omitempty"`
}
type RuleType_NetworkInterface struct {
	NetworkInterface *schema.NetworkInterfaceRefType `protobuf:"bytes,52,opt,name=network_interface,json=networkInterface,proto3,oneof" json:"network_interface,omitempty"`
}
type RuleType_Segment struct {
	Segment *schema.SegmentRefType `protobuf:"bytes,53,opt,name=segment,proto3,oneof" json:"segment,omitempty"`
}
type RuleType_VirtualNetwork struct {
	VirtualNetwork *schema.VirtualNetworkReferenceType `protobuf:"bytes,54,opt,name=virtual_network,json=virtualNetwork,proto3,oneof" json:"virtual_network,omitempty"`
}
type RuleType_NodeInterface struct {
	NodeInterface *schema.NodeInterfaceType `protobuf:"bytes,55,opt,name=node_interface,json=nodeInterface,proto3,oneof" json:"node_interface,omitempty"`
}

func (*RuleType_Enable) isRuleType_EnableChoice()          {}
func (*RuleType_Disable) isRuleType_EnableChoice()         {}
func (*RuleType_CloudConnect) isRuleType_ScopeChoice()     {}
func (*RuleType_NetworkInterface) isRuleType_ScopeChoice() {}
func (*RuleType_Segment) isRuleType_ScopeChoice()          {}
func (*RuleType_VirtualNetwork) isRuleType_ScopeChoice()   {}
func (*RuleType_NodeInterface) isRuleType_ScopeChoice()    {}

func (m *RuleType) GetEnableChoice() isRuleType_EnableChoice {
	if m != nil {
		return m.EnableChoice
	}
	return nil
}
func (m *RuleType) GetScopeChoice() isRuleType_ScopeChoice {
	if m != nil {
		return m.ScopeChoice
	}
	return nil
}

func (m *RuleType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RuleType) GetEnable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*RuleType_Enable); ok {
		return x.Enable
	}
	return nil
}

func (m *RuleType) GetDisable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*RuleType_Disable); ok {
		return x.Disable
	}
	return nil
}

func (m *RuleType) GetCloudConnect() *schema.CloudConnectRefType {
	if x, ok := m.GetScopeChoice().(*RuleType_CloudConnect); ok {
		return x.CloudConnect
	}
	return nil
}

func (m *RuleType) GetNetworkInterface() *schema.NetworkInterfaceRefType {
	if x, ok := m.GetScopeChoice().(*RuleType_NetworkInterface); ok {
		return x.NetworkInterface
	}
	return nil
}

func (m *RuleType) GetSegment() *schema.SegmentRefType {
	if x, ok := m.GetScopeChoice().(*RuleType_Segment); ok {
		return x.Segment
	}
	return nil
}

func (m *RuleType) GetVirtualNetwork() *schema.VirtualNetworkReferenceType {
	if x, ok := m.GetScopeChoice().(*RuleType_VirtualNetwork); ok {
		return x.VirtualNetwork
	}
	return nil
}

func (m *RuleType) GetNodeInterface() *schema.NodeInterfaceType {
	if x, ok := m.GetScopeChoice().(*RuleType_NodeInterface); ok {
		return x.NodeInterface
	}
	return nil
}

func (m *RuleType) GetCriteria() *MatchCriteriaType {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (m *RuleType) GetAction() *ActionType {
	if m != nil {
		return m.Action
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RuleType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RuleType_Enable)(nil),
		(*RuleType_Disable)(nil),
		(*RuleType_CloudConnect)(nil),
		(*RuleType_NetworkInterface)(nil),
		(*RuleType_Segment)(nil),
		(*RuleType_VirtualNetwork)(nil),
		(*RuleType_NodeInterface)(nil),
	}
}

// Match Criteria
//
// x-displayName: "Match Criteria"
// Match criteria of the packet to apply the NAT Rule
type MatchCriteriaType struct {
	// source IP
	//
	// x-displayName: "Source IP"
	// x-example: "1.1.1.0/24 or 2001:10/64"
	// Source IP of the packet to match
	SourceCidr []string `protobuf:"bytes,1,rep,name=source_cidr,json=sourceCidr,proto3" json:"source_cidr,omitempty"`
	// destination IP
	//
	// x-displayName: "Destination IP"
	// x-example: "1.1.1.0/24 or 2001::10/64"
	// Destination IP of the packet to match
	DestinationCidr []string `protobuf:"bytes,2,rep,name=destination_cidr,json=destinationCidr,proto3" json:"destination_cidr,omitempty"`
	// protocol
	//
	// x-displayName: "Protocol"
	// x-example: "ALL"
	// Protocol of the packet to match
	Protocol schema.ProtocolEnumType `protobuf:"varint,14,opt,name=protocol,proto3,enum=ves.io.schema.ProtocolEnumType" json:"protocol,omitempty"`
	// source port
	//
	// x-displayName: "Source Port"
	// Source port of the packet to match
	SourcePort *schema.PortMatcherType `protobuf:"bytes,3,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	// destination port
	//
	// x-displayName: "Destination Port"
	// Destination port of the packet to match
	DestinationPort *schema.PortMatcherType `protobuf:"bytes,4,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	// destination network
	//
	// x-displayName: "Destination Network"
	// When there is a segment/network connector between two segments/networks, destination segment/network to match
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*MatchCriteriaType_VirtualNetwork
	//	*MatchCriteriaType_Segment
	NetworkChoice isMatchCriteriaType_NetworkChoice `protobuf_oneof:"network_choice"`
}

func (m *MatchCriteriaType) Reset()      { *m = MatchCriteriaType{} }
func (*MatchCriteriaType) ProtoMessage() {}
func (*MatchCriteriaType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1272d905d84e406d, []int{1}
}
func (m *MatchCriteriaType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchCriteriaType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MatchCriteriaType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchCriteriaType.Merge(m, src)
}
func (m *MatchCriteriaType) XXX_Size() int {
	return m.Size()
}
func (m *MatchCriteriaType) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchCriteriaType.DiscardUnknown(m)
}

var xxx_messageInfo_MatchCriteriaType proto.InternalMessageInfo

type isMatchCriteriaType_NetworkChoice interface {
	isMatchCriteriaType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MatchCriteriaType_VirtualNetwork struct {
	VirtualNetwork *schema.VirtualNetworkReferenceType `protobuf:"bytes,11,opt,name=virtual_network,json=virtualNetwork,proto3,oneof" json:"virtual_network,omitempty"`
}
type MatchCriteriaType_Segment struct {
	Segment *schema.SegmentRefType `protobuf:"bytes,12,opt,name=segment,proto3,oneof" json:"segment,omitempty"`
}

func (*MatchCriteriaType_VirtualNetwork) isMatchCriteriaType_NetworkChoice() {}
func (*MatchCriteriaType_Segment) isMatchCriteriaType_NetworkChoice()        {}

func (m *MatchCriteriaType) GetNetworkChoice() isMatchCriteriaType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *MatchCriteriaType) GetSourceCidr() []string {
	if m != nil {
		return m.SourceCidr
	}
	return nil
}

func (m *MatchCriteriaType) GetDestinationCidr() []string {
	if m != nil {
		return m.DestinationCidr
	}
	return nil
}

func (m *MatchCriteriaType) GetProtocol() schema.ProtocolEnumType {
	if m != nil {
		return m.Protocol
	}
	return schema.ALL
}

func (m *MatchCriteriaType) GetSourcePort() *schema.PortMatcherType {
	if m != nil {
		return m.SourcePort
	}
	return nil
}

func (m *MatchCriteriaType) GetDestinationPort() *schema.PortMatcherType {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (m *MatchCriteriaType) GetVirtualNetwork() *schema.VirtualNetworkReferenceType {
	if x, ok := m.GetNetworkChoice().(*MatchCriteriaType_VirtualNetwork); ok {
		return x.VirtualNetwork
	}
	return nil
}

func (m *MatchCriteriaType) GetSegment() *schema.SegmentRefType {
	if x, ok := m.GetNetworkChoice().(*MatchCriteriaType_Segment); ok {
		return x.Segment
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MatchCriteriaType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MatchCriteriaType_VirtualNetwork)(nil),
		(*MatchCriteriaType_Segment)(nil),
	}
}

// Action
//
// x-displayName: "Action"
// Action to apply on the packet if the NAT rule is applied
type ActionType struct {
	// NAT
	//
	// x-displayName: "NAT"
	// NAT either Source or Destination of the Packet depending on the type of the NAT
	//
	// Types that are valid to be assigned to SourceNatChoice:
	//	*ActionType_VirtualCidr
	//	*ActionType_Dynamic
	SourceNatChoice isActionType_SourceNatChoice `protobuf_oneof:"source_nat_choice"`
}

func (m *ActionType) Reset()      { *m = ActionType{} }
func (*ActionType) ProtoMessage() {}
func (*ActionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1272d905d84e406d, []int{2}
}
func (m *ActionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionType.Merge(m, src)
}
func (m *ActionType) XXX_Size() int {
	return m.Size()
}
func (m *ActionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionType.DiscardUnknown(m)
}

var xxx_messageInfo_ActionType proto.InternalMessageInfo

type isActionType_SourceNatChoice interface {
	isActionType_SourceNatChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActionType_VirtualCidr struct {
	VirtualCidr string `protobuf:"bytes,2,opt,name=virtual_cidr,json=virtualCidr,proto3,oneof" json:"virtual_cidr,omitempty"`
}
type ActionType_Dynamic struct {
	Dynamic *DynamicPool `protobuf:"bytes,3,opt,name=dynamic,proto3,oneof" json:"dynamic,omitempty"`
}

func (*ActionType_VirtualCidr) isActionType_SourceNatChoice() {}
func (*ActionType_Dynamic) isActionType_SourceNatChoice()     {}

func (m *ActionType) GetSourceNatChoice() isActionType_SourceNatChoice {
	if m != nil {
		return m.SourceNatChoice
	}
	return nil
}

func (m *ActionType) GetVirtualCidr() string {
	if x, ok := m.GetSourceNatChoice().(*ActionType_VirtualCidr); ok {
		return x.VirtualCidr
	}
	return ""
}

func (m *ActionType) GetDynamic() *DynamicPool {
	if x, ok := m.GetSourceNatChoice().(*ActionType_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActionType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActionType_VirtualCidr)(nil),
		(*ActionType_Dynamic)(nil),
	}
}

// Dynamic Pool
//
// x-displayName: "Dynamic Pool"
// Dynamic Pool Configuration
type DynamicPool struct {
	// Pool choice
	//
	// x-displayName: "Pool Choice"
	// x-required
	// Select choice of pool
	//
	// Types that are valid to be assigned to PoolChoice:
	//	*DynamicPool_Pools
	//	*DynamicPool_ElasticIps
	PoolChoice isDynamicPool_PoolChoice `protobuf_oneof:"pool_choice"`
}

func (m *DynamicPool) Reset()      { *m = DynamicPool{} }
func (*DynamicPool) ProtoMessage() {}
func (*DynamicPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_1272d905d84e406d, []int{3}
}
func (m *DynamicPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DynamicPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicPool.Merge(m, src)
}
func (m *DynamicPool) XXX_Size() int {
	return m.Size()
}
func (m *DynamicPool) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicPool.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicPool proto.InternalMessageInfo

type isDynamicPool_PoolChoice interface {
	isDynamicPool_PoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DynamicPool_Pools struct {
	Pools *views.PrefixStringListType `protobuf:"bytes,2,opt,name=pools,proto3,oneof" json:"pools,omitempty"`
}
type DynamicPool_ElasticIps struct {
	ElasticIps *schema.CloudElasticIpRefListType `protobuf:"bytes,3,opt,name=elastic_ips,json=elasticIps,proto3,oneof" json:"elastic_ips,omitempty"`
}

func (*DynamicPool_Pools) isDynamicPool_PoolChoice()      {}
func (*DynamicPool_ElasticIps) isDynamicPool_PoolChoice() {}

func (m *DynamicPool) GetPoolChoice() isDynamicPool_PoolChoice {
	if m != nil {
		return m.PoolChoice
	}
	return nil
}

func (m *DynamicPool) GetPools() *views.PrefixStringListType {
	if x, ok := m.GetPoolChoice().(*DynamicPool_Pools); ok {
		return x.Pools
	}
	return nil
}

func (m *DynamicPool) GetElasticIps() *schema.CloudElasticIpRefListType {
	if x, ok := m.GetPoolChoice().(*DynamicPool_ElasticIps); ok {
		return x.ElasticIps
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DynamicPool) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DynamicPool_Pools)(nil),
		(*DynamicPool_ElasticIps)(nil),
	}
}

// Global Specification
//
// x-displayName: "Global Specification"
// NAT Policy specification
type GlobalSpecType struct {
	// applies_to
	//
	// x-displayName: "Applies To"
	// x-required
	// Select the sites on which NAT policy is applicable to
	//
	// Types that are valid to be assigned to AppliesToChoice:
	//	*GlobalSpecType_Site
	AppliesToChoice isGlobalSpecType_AppliesToChoice `protobuf_oneof:"applies_to_choice"`
	// rule
	//
	// x-displayName: "Rule"
	// x-required
	// List of rules to apply under the NAT Policy. Rule that matches first would be applied
	Rules []*RuleType `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1272d905d84e406d, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_AppliesToChoice interface {
	isGlobalSpecType_AppliesToChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Site struct {
	Site *schema.SiteReferenceType `protobuf:"bytes,2,opt,name=site,proto3,oneof" json:"site,omitempty"`
}

func (*GlobalSpecType_Site) isGlobalSpecType_AppliesToChoice() {}

func (m *GlobalSpecType) GetAppliesToChoice() isGlobalSpecType_AppliesToChoice {
	if m != nil {
		return m.AppliesToChoice
	}
	return nil
}

func (m *GlobalSpecType) GetSite() *schema.SiteReferenceType {
	if x, ok := m.GetAppliesToChoice().(*GlobalSpecType_Site); ok {
		return x.Site
	}
	return nil
}

func (m *GlobalSpecType) GetRules() []*RuleType {
	if m != nil {
		return m.Rules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Site)(nil),
	}
}

// Create NAT Policy
//
// x-displayName: "Create NAT Policy"
// NAT Policy create specification configures NAT Policy with multiple Rules,
type CreateSpecType struct {
	// Types that are valid to be assigned to AppliesToChoice:
	//	*CreateSpecType_Site
	AppliesToChoice isCreateSpecType_AppliesToChoice `protobuf_oneof:"applies_to_choice"`
	Rules           []*RuleType                      `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1272d905d84e406d, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_AppliesToChoice interface {
	isCreateSpecType_AppliesToChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Site struct {
	Site *schema.SiteReferenceType `protobuf:"bytes,2,opt,name=site,proto3,oneof" json:"site,omitempty"`
}

func (*CreateSpecType_Site) isCreateSpecType_AppliesToChoice() {}

func (m *CreateSpecType) GetAppliesToChoice() isCreateSpecType_AppliesToChoice {
	if m != nil {
		return m.AppliesToChoice
	}
	return nil
}

func (m *CreateSpecType) GetSite() *schema.SiteReferenceType {
	if x, ok := m.GetAppliesToChoice().(*CreateSpecType_Site); ok {
		return x.Site
	}
	return nil
}

func (m *CreateSpecType) GetRules() []*RuleType {
	if m != nil {
		return m.Rules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Site)(nil),
	}
}

// Replace NAT Policy
//
// x-displayName: "Replace NAT Policy"
// NAT Policy replaces specification condigures NAT Policy with multiple Rules,
// corresponding Match Criteria to apply on the packet content and Action to be
// applied ifthe MatchCriteria matches
type ReplaceSpecType struct {
	// Types that are valid to be assigned to AppliesToChoice:
	//	*ReplaceSpecType_Site
	AppliesToChoice isReplaceSpecType_AppliesToChoice `protobuf_oneof:"applies_to_choice"`
	Rules           []*RuleType                       `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1272d905d84e406d, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_AppliesToChoice interface {
	isReplaceSpecType_AppliesToChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Site struct {
	Site *schema.SiteReferenceType `protobuf:"bytes,2,opt,name=site,proto3,oneof" json:"site,omitempty"`
}

func (*ReplaceSpecType_Site) isReplaceSpecType_AppliesToChoice() {}

func (m *ReplaceSpecType) GetAppliesToChoice() isReplaceSpecType_AppliesToChoice {
	if m != nil {
		return m.AppliesToChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetSite() *schema.SiteReferenceType {
	if x, ok := m.GetAppliesToChoice().(*ReplaceSpecType_Site); ok {
		return x.Site
	}
	return nil
}

func (m *ReplaceSpecType) GetRules() []*RuleType {
	if m != nil {
		return m.Rules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Site)(nil),
	}
}

// Get NAT Policy
//
// x-displayName: "Get NAT Policy"
// NAT Policy Get specification fetches the configuration from store which contains the
// rules, Match Criteria, Action applied on the NAT policy along with Virtual subnet pool
// and NAT Pool
type GetSpecType struct {
	// Types that are valid to be assigned to AppliesToChoice:
	//	*GetSpecType_Site
	AppliesToChoice isGetSpecType_AppliesToChoice `protobuf_oneof:"applies_to_choice"`
	Rules           []*RuleType                   `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1272d905d84e406d, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_AppliesToChoice interface {
	isGetSpecType_AppliesToChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Site struct {
	Site *schema.SiteReferenceType `protobuf:"bytes,2,opt,name=site,proto3,oneof" json:"site,omitempty"`
}

func (*GetSpecType_Site) isGetSpecType_AppliesToChoice() {}

func (m *GetSpecType) GetAppliesToChoice() isGetSpecType_AppliesToChoice {
	if m != nil {
		return m.AppliesToChoice
	}
	return nil
}

func (m *GetSpecType) GetSite() *schema.SiteReferenceType {
	if x, ok := m.GetAppliesToChoice().(*GetSpecType_Site); ok {
		return x.Site
	}
	return nil
}

func (m *GetSpecType) GetRules() []*RuleType {
	if m != nil {
		return m.Rules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Site)(nil),
	}
}

func init() {
	proto.RegisterType((*RuleType)(nil), "ves.io.schema.nat_policy.RuleType")
	golang_proto.RegisterType((*RuleType)(nil), "ves.io.schema.nat_policy.RuleType")
	proto.RegisterType((*MatchCriteriaType)(nil), "ves.io.schema.nat_policy.MatchCriteriaType")
	golang_proto.RegisterType((*MatchCriteriaType)(nil), "ves.io.schema.nat_policy.MatchCriteriaType")
	proto.RegisterType((*ActionType)(nil), "ves.io.schema.nat_policy.ActionType")
	golang_proto.RegisterType((*ActionType)(nil), "ves.io.schema.nat_policy.ActionType")
	proto.RegisterType((*DynamicPool)(nil), "ves.io.schema.nat_policy.DynamicPool")
	golang_proto.RegisterType((*DynamicPool)(nil), "ves.io.schema.nat_policy.DynamicPool")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.nat_policy.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.nat_policy.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.nat_policy.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.nat_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.nat_policy.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.nat_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.nat_policy.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.nat_policy.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/nat_policy/types.proto", fileDescriptor_1272d905d84e406d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/nat_policy/types.proto", fileDescriptor_1272d905d84e406d)
}

var fileDescriptor_1272d905d84e406d = []byte{
	// 1393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0xbf, 0x6f, 0xdb, 0xd6,
	0x16, 0xd6, 0xb5, 0x68, 0x5b, 0x39, 0x72, 0x64, 0x99, 0xcf, 0x7e, 0x61, 0xf4, 0x9e, 0x69, 0xd6,
	0x48, 0x5a, 0xc7, 0x75, 0xa8, 0x98, 0x8e, 0x53, 0x34, 0x68, 0x83, 0x5a, 0xb6, 0xe1, 0x1f, 0x69,
	0x1d, 0x43, 0x4e, 0x3b, 0x34, 0x83, 0x40, 0x53, 0x57, 0x32, 0x1b, 0x8a, 0x97, 0x20, 0xaf, 0x9c,
	0x78, 0x29, 0x82, 0xa0, 0x63, 0x87, 0x20, 0xe8, 0xd2, 0xff, 0x20, 0x63, 0xe7, 0x32, 0x28, 0xb4,
	0x14, 0x0d, 0x32, 0x09, 0x68, 0x87, 0x8c, 0x89, 0xbc, 0xa4, 0x5b, 0xc6, 0xa2, 0x53, 0xc1, 0xcb,
	0x4b, 0x89, 0xa2, 0xed, 0xb4, 0x41, 0xb7, 0x2c, 0x02, 0x79, 0xcf, 0x77, 0xbe, 0x73, 0xbe, 0x7b,
	0xcf, 0x39, 0x97, 0x82, 0x73, 0xfb, 0xd8, 0x53, 0x4d, 0x52, 0xf4, 0x8c, 0x3d, 0xdc, 0xd0, 0x8b,
	0xb6, 0x4e, 0x2b, 0x0e, 0xb1, 0x4c, 0xe3, 0xa0, 0x48, 0x0f, 0x1c, 0xec, 0xa9, 0x8e, 0x4b, 0x28,
	0x11, 0xa5, 0x10, 0xa5, 0x86, 0x28, 0xb5, 0x87, 0x2a, 0x5c, 0xac, 0x9b, 0x74, 0xaf, 0xb9, 0xab,
	0x1a, 0xa4, 0x51, 0xac, 0x93, 0x3a, 0x29, 0x32, 0x87, 0xdd, 0x66, 0x8d, 0xbd, 0xb1, 0x17, 0xf6,
	0x14, 0x12, 0x15, 0xa6, 0xea, 0x84, 0xd4, 0x2d, 0xdc, 0x43, 0x51, 0xb3, 0x81, 0x3d, 0xaa, 0x37,
	0x1c, 0x0e, 0x38, 0x93, 0xc8, 0x07, 0x53, 0x6e, 0xf8, 0x5f, 0xbf, 0x81, 0x38, 0xd4, 0x24, 0x36,
	0xcf, 0xaf, 0x70, 0xb6, 0xdf, 0x18, 0x4b, 0xbd, 0xf0, 0xff, 0x7e, 0xd3, 0xbe, 0x6e, 0x99, 0x55,
	0x9d, 0x62, 0x6e, 0x55, 0x12, 0x56, 0x13, 0xdf, 0xa9, 0xf4, 0x53, 0x4f, 0x1d, 0x45, 0x78, 0xf1,
	0x00, 0xd3, 0xdf, 0x00, 0x64, 0xca, 0x4d, 0x0b, 0xdf, 0x3c, 0x70, 0xb0, 0x28, 0x82, 0x60, 0xeb,
	0x0d, 0x2c, 0x21, 0x05, 0xcd, 0x9c, 0x2a, 0xb3, 0x67, 0x51, 0x85, 0x21, 0x6c, 0xeb, 0xbb, 0x16,
	0x96, 0x26, 0x14, 0x34, 0x93, 0xd5, 0xc6, 0xd5, 0xfe, 0xdd, 0x5c, 0x6d, 0x38, 0xf4, 0x60, 0x3d,
	0x55, 0xe6, 0x28, 0xf1, 0x12, 0x0c, 0x57, 0x4d, 0x8f, 0x39, 0xfc, 0xf7, 0xb5, 0x0e, 0x11, 0x4c,
	0xdc, 0x80, 0xd3, 0x86, 0x45, 0x9a, 0xd5, 0x8a, 0x41, 0x6c, 0x1b, 0x1b, 0x54, 0x5a, 0x60, 0x7e,
	0xd3, 0x09, 0xbf, 0xe5, 0x00, 0xb3, 0x1c, 0x42, 0xca, 0xb8, 0x16, 0x24, 0xbc, 0x8e, 0xca, 0x23,
	0x46, 0x6c, 0x59, 0xbc, 0x05, 0x63, 0x36, 0xa6, 0x77, 0x88, 0x7b, 0xbb, 0x62, 0xda, 0x14, 0xbb,
	0x35, 0xdd, 0xc0, 0xd2, 0x65, 0x46, 0xf7, 0x6e, 0x82, 0x6e, 0x2b, 0xc4, 0x6d, 0x44, 0x30, 0x4e,
	0x59, 0x12, 0x5e, 0xfa, 0x08, 0xad, 0xa3, 0x72, 0xde, 0x4e, 0x00, 0xc4, 0x0f, 0x61, 0xd8, 0xc3,
	0xf5, 0x06, 0xb6, 0xa9, 0xb4, 0xc8, 0x28, 0x27, 0x13, 0x94, 0x3b, 0xa1, 0xb5, 0x97, 0x5c, 0x84,
	0x17, 0x3f, 0x87, 0xd1, 0x7d, 0xd3, 0xa5, 0x4d, 0xdd, 0xaa, 0x70, 0x5a, 0xe9, 0x0a, 0xa3, 0x98,
	0x4d, 0x50, 0x7c, 0x11, 0xa2, 0x78, 0x72, 0x65, 0x5c, 0xc3, 0x2e, 0xb6, 0x0d, 0xcc, 0xf9, 0x72,
	0xfb, 0x7d, 0x66, 0x71, 0x03, 0x72, 0x36, 0xa9, 0xe2, 0x98, 0xd6, 0x0f, 0x18, 0xab, 0x92, 0xd4,
	0x4a, 0xaa, 0xb8, 0xab, 0x83, 0x73, 0x9d, 0xb6, 0xe3, 0x8b, 0xe2, 0x1a, 0x64, 0x0c, 0xd7, 0xa4,
	0xd8, 0x35, 0x75, 0x29, 0xcd, 0x48, 0xde, 0x57, 0x4f, 0x6a, 0x1b, 0xf5, 0x33, 0x9d, 0x1a, 0x7b,
	0xcb, 0x1c, 0x1e, 0xf0, 0x95, 0xbb, 0xce, 0xe2, 0x47, 0x30, 0xa4, 0x1b, 0x41, 0x09, 0x4a, 0x02,
	0xa3, 0x39, 0x77, 0x32, 0xcd, 0x12, 0xc3, 0x31, 0x7f, 0xee, 0x73, 0xf5, 0x7b, 0xe1, 0xa9, 0x8f,
	0xbe, 0x13, 0x20, 0x07, 0xc2, 0x96, 0xde, 0xc0, 0x85, 0xa1, 0xb0, 0x22, 0xe1, 0x32, 0x48, 0x2c,
	0xa8, 0x12, 0x45, 0x55, 0x76, 0x48, 0xd3, 0x35, 0xb0, 0xb2, 0xb1, 0x5d, 0x92, 0x60, 0x3c, 0x8a,
	0xae, 0x7a, 0x6c, 0xb5, 0x62, 0x98, 0x55, 0x37, 0x9f, 0x81, 0x6b, 0x30, 0x99, 0xf0, 0x5a, 0xc1,
	0x1e, 0x35, 0x6d, 0x3d, 0x88, 0x15, 0xb8, 0x4e, 0xc2, 0xd9, 0xae, 0x6b, 0xb5, 0x67, 0x8a, 0xfc,
	0x2f, 0xc1, 0x99, 0x84, 0xff, 0x76, 0xd0, 0x34, 0x06, 0xb1, 0x0a, 0x13, 0x30, 0xd6, 0xf5, 0x74,
	0xf8, 0xa2, 0x82, 0xe0, 0x16, 0x14, 0x8e, 0xcf, 0x73, 0x9b, 0xb8, 0x54, 0xfb, 0x38, 0x16, 0x8e,
	0x67, 0xea, 0x10, 0x97, 0xaa, 0xc1, 0x0f, 0x28, 0x27, 0x9a, 0x2a, 0xae, 0x6e, 0xd7, 0xb1, 0x07,
	0x5f, 0xc1, 0xd4, 0x6b, 0xe4, 0xb0, 0x08, 0x6b, 0x20, 0x1f, 0x2b, 0xa8, 0x17, 0xe6, 0xfc, 0xeb,
	0xed, 0x51, 0xac, 0x07, 0x08, 0xb2, 0xe1, 0xf9, 0x28, 0xc1, 0x01, 0xcd, 0xde, 0x43, 0xf0, 0x35,
	0x5c, 0x80, 0xff, 0x84, 0xe7, 0xa4, 0x46, 0xd5, 0x1c, 0x6c, 0x94, 0x26, 0xf2, 0xaa, 0x55, 0x76,
	0x9a, 0xbb, 0x36, 0xa6, 0xca, 0xd6, 0xd2, 0x4d, 0x78, 0x07, 0xc6, 0x39, 0xb4, 0x7a, 0x60, 0xeb,
	0x0d, 0xd3, 0x50, 0x1d, 0x42, 0x2c, 0x4f, 0x3b, 0xb5, 0xb3, 0xb5, 0x74, 0x53, 0xd9, 0x26, 0xc4,
	0x02, 0x15, 0x0a, 0x09, 0x08, 0xb6, 0x74, 0x8f, 0x9a, 0x46, 0xc5, 0x74, 0x3c, 0x2d, 0xcf, 0xfa,
	0x5d, 0x59, 0x0d, 0x97, 0x82, 0xc3, 0x9a, 0x86, 0xd3, 0xe1, 0x8c, 0xa9, 0x18, 0x7b, 0xc4, 0x34,
	0xb0, 0x38, 0xd6, 0xf2, 0xd1, 0x44, 0xdb, 0x47, 0xe3, 0x1d, 0x1f, 0x0d, 0x6a, 0xf3, 0x73, 0x9a,
	0x56, 0x9a, 0x85, 0x11, 0xcf, 0x20, 0x4e, 0x17, 0x52, 0x68, 0xf9, 0x68, 0xa1, 0xed, 0x23, 0xad,
	0xe3, 0xa3, 0xdc, 0xe2, 0xfc, 0xdc, 0xa2, 0x36, 0xb7, 0xb8, 0x30, 0xb7, 0x78, 0x79, 0x6e, 0x71,
	0x71, 0x53, 0xc8, 0x8c, 0xe7, 0x27, 0x36, 0x85, 0x8c, 0x96, 0x5f, 0x98, 0xfe, 0x45, 0x80, 0xb1,
	0x23, 0x55, 0x2d, 0x5e, 0x85, 0x6c, 0xac, 0xa0, 0x24, 0xa4, 0xa4, 0x67, 0x4e, 0x95, 0xce, 0xfe,
	0xe1, 0xa3, 0xd4, 0x8f, 0xbf, 0xb7, 0xd2, 0x83, 0x6e, 0xfa, 0x11, 0x42, 0x9d, 0xe7, 0x3f, 0xa7,
	0x87, 0x1e, 0x3e, 0x46, 0x03, 0xf9, 0x54, 0x19, 0x42, 0xf4, 0xb2, 0x59, 0x75, 0xc5, 0x15, 0xc8,
	0x27, 0x2b, 0x4a, 0x1a, 0xf8, 0x3b, 0x82, 0xd1, 0x98, 0x0b, 0x63, 0xb9, 0x0e, 0x99, 0xa8, 0xba,
	0xa4, 0x9c, 0x82, 0x66, 0x72, 0xda, 0x54, 0xa2, 0x9f, 0xa2, 0x8a, 0x5c, 0xb5, 0x9b, 0x0d, 0x36,
	0xc0, 0x72, 0x2d, 0x1f, 0x21, 0x46, 0x7f, 0x1f, 0x0d, 0xe4, 0x51, 0xb9, 0x4b, 0x20, 0xae, 0x76,
	0xe5, 0x04, 0x27, 0xcd, 0xdb, 0x5c, 0x4e, 0xf2, 0x11, 0x97, 0xb2, 0x9d, 0xc0, 0x6e, 0x38, 0x0f,
	0x03, 0xba, 0x48, 0x59, 0x60, 0x14, 0x6f, 0xf4, 0x2b, 0x63, 0x5c, 0xc2, 0x1b, 0x70, 0xc5, 0x45,
	0x32, 0xc2, 0x63, 0xa6, 0x63, 0xf6, 0x8d, 0xa7, 0x63, 0xea, 0xc8, 0x74, 0x8c, 0xcd, 0xeb, 0x91,
	0x7f, 0x32, 0xaf, 0x53, 0xdd, 0x79, 0x5d, 0x7a, 0x0f, 0x72, 0xd1, 0x3d, 0xc2, 0x0b, 0x69, 0xa2,
	0xe5, 0xa3, 0xec, 0x13, 0x1f, 0xa1, 0xb6, 0x8f, 0x20, 0xa8, 0xb7, 0xf9, 0xf9, 0xb9, 0x79, 0x6d,
	0x53, 0xc8, 0x0c, 0xe6, 0x87, 0x36, 0x85, 0xcc, 0x50, 0x7e, 0x78, 0x53, 0xc8, 0x40, 0x3e, 0x3b,
	0xfd, 0x03, 0x02, 0xe8, 0x0d, 0x36, 0x71, 0x01, 0x46, 0xe2, 0xbd, 0x22, 0x0d, 0x04, 0x57, 0x6b,
	0x29, 0xd7, 0x5f, 0x02, 0xeb, 0xa9, 0x72, 0x96, 0xa3, 0xd8, 0xa9, 0x2f, 0xc1, 0x30, 0x6f, 0x09,
	0x7e, 0x48, 0xe7, 0x4f, 0x1e, 0xa2, 0x2b, 0x21, 0x30, 0xe8, 0x28, 0x76, 0xa9, 0x86, 0xaf, 0xa5,
	0x73, 0x30, 0xc6, 0xcf, 0x3a, 0xc0, 0x72, 0x11, 0xa3, 0x2d, 0x1f, 0xa5, 0xdb, 0x3e, 0x42, 0x1d,
	0x1f, 0xa5, 0xb5, 0xb9, 0x85, 0x4d, 0x21, 0x83, 0xf2, 0x03, 0xd3, 0x8f, 0x11, 0x64, 0x63, 0x34,
	0xe2, 0x12, 0x0c, 0xb2, 0x66, 0x65, 0xc9, 0x66, 0xb5, 0x0b, 0x89, 0xe0, 0xec, 0x23, 0x42, 0xdd,
	0x76, 0x71, 0xcd, 0xbc, 0xbb, 0x43, 0x5d, 0xd3, 0xae, 0x7f, 0x6a, 0x7a, 0x94, 0x6f, 0x61, 0xe8,
	0x29, 0x5e, 0x87, 0x6c, 0xac, 0x99, 0xb9, 0x8a, 0x99, 0xe3, 0x6e, 0x74, 0xde, 0xe0, 0x1b, 0x4e,
	0x19, 0xd7, 0x62, 0x3c, 0x80, 0xa3, 0x75, 0xaf, 0x74, 0x06, 0xb2, 0x01, 0x6b, 0xa4, 0x22, 0xd3,
	0xf2, 0xd1, 0x40, 0xa0, 0x82, 0xa7, 0xff, 0x13, 0x82, 0xdc, 0x9a, 0x45, 0x76, 0x75, 0x6b, 0xc7,
	0xc1, 0x06, 0xdb, 0xf5, 0x2b, 0x20, 0x78, 0x26, 0xc5, 0x5c, 0x40, 0xf2, 0x3a, 0xdc, 0x31, 0x29,
	0x4e, 0x16, 0x0f, 0xc3, 0x8b, 0x37, 0x60, 0xd0, 0x6d, 0x5a, 0xd8, 0x93, 0x04, 0x25, 0x7d, 0xcc,
	0x27, 0x48, 0x6c, 0xdb, 0xa3, 0x6f, 0xa6, 0xd2, 0x04, 0x3b, 0xc6, 0x87, 0x68, 0x20, 0xff, 0x49,
	0xaf, 0x93, 0x51, 0x39, 0xe4, 0x29, 0x4d, 0xc2, 0x98, 0xee, 0x38, 0x96, 0x89, 0xbd, 0x0a, 0x25,
	0x27, 0x09, 0xf8, 0x15, 0x41, 0x6e, 0xd9, 0xc5, 0x3a, 0xc5, 0xff, 0x5a, 0xc0, 0xca, 0x9b, 0x0b,
	0x80, 0x9e, 0x00, 0x9e, 0xf5, 0xd5, 0xb1, 0xa7, 0xd7, 0x12, 0x3b, 0x5a, 0x9a, 0x3d, 0x4e, 0xc8,
	0xc4, 0xfd, 0x3f, 0xd1, 0xd1, 0x65, 0xae, 0xea, 0x37, 0x04, 0xa3, 0x65, 0xec, 0x58, 0xba, 0xf1,
	0x56, 0xc9, 0x6a, 0x23, 0xc8, 0xae, 0x61, 0xfa, 0x16, 0x49, 0x2a, 0x7d, 0x8b, 0xda, 0x2f, 0xe4,
	0xd4, 0xb3, 0x17, 0x72, 0xea, 0xd5, 0x0b, 0x19, 0xdd, 0xeb, 0xc8, 0xe8, 0x51, 0x47, 0x46, 0x4f,
	0x3a, 0x32, 0x6a, 0x77, 0x64, 0xf4, 0xac, 0x23, 0xa3, 0xe7, 0x1d, 0x19, 0xbd, 0xec, 0xc8, 0xa9,
	0x57, 0x1d, 0x19, 0x3d, 0x38, 0x94, 0x53, 0xad, 0x43, 0x19, 0xb5, 0x0f, 0xe5, 0xd4, 0xb3, 0x43,
	0x39, 0xf5, 0xe5, 0x56, 0x9d, 0x38, 0xb7, 0xeb, 0xea, 0x3e, 0xb1, 0x28, 0x76, 0x5d, 0x5d, 0x6d,
	0x7a, 0x45, 0xf6, 0x50, 0x23, 0x6e, 0xe3, 0xa2, 0xe3, 0x92, 0x7d, 0xb3, 0x8a, 0xdd, 0x8b, 0x91,
	0xb9, 0xe8, 0xec, 0xd6, 0x49, 0x11, 0xdf, 0xa5, 0xfc, 0x2f, 0xc9, 0x91, 0xbf, 0x6e, 0xbb, 0x43,
	0xec, 0xc2, 0x5a, 0xf8, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xe1, 0x65, 0x46, 0xdd, 0x0d, 0x00,
	0x00,
}

func (this *RuleType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleType)
	if !ok {
		that2, ok := that.(RuleType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.EnableChoice == nil {
		if this.EnableChoice != nil {
			return false
		}
	} else if this.EnableChoice == nil {
		return false
	} else if !this.EnableChoice.Equal(that1.EnableChoice) {
		return false
	}
	if that1.ScopeChoice == nil {
		if this.ScopeChoice != nil {
			return false
		}
	} else if this.ScopeChoice == nil {
		return false
	} else if !this.ScopeChoice.Equal(that1.ScopeChoice) {
		return false
	}
	if !this.Criteria.Equal(that1.Criteria) {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	return true
}
func (this *RuleType_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleType_Enable)
	if !ok {
		that2, ok := that.(RuleType_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *RuleType_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleType_Disable)
	if !ok {
		that2, ok := that.(RuleType_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *RuleType_CloudConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleType_CloudConnect)
	if !ok {
		that2, ok := that.(RuleType_CloudConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudConnect.Equal(that1.CloudConnect) {
		return false
	}
	return true
}
func (this *RuleType_NetworkInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleType_NetworkInterface)
	if !ok {
		that2, ok := that.(RuleType_NetworkInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkInterface.Equal(that1.NetworkInterface) {
		return false
	}
	return true
}
func (this *RuleType_Segment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleType_Segment)
	if !ok {
		that2, ok := that.(RuleType_Segment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	return true
}
func (this *RuleType_VirtualNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleType_VirtualNetwork)
	if !ok {
		that2, ok := that.(RuleType_VirtualNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	return true
}
func (this *RuleType_NodeInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleType_NodeInterface)
	if !ok {
		that2, ok := that.(RuleType_NodeInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NodeInterface.Equal(that1.NodeInterface) {
		return false
	}
	return true
}
func (this *MatchCriteriaType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchCriteriaType)
	if !ok {
		that2, ok := that.(MatchCriteriaType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SourceCidr) != len(that1.SourceCidr) {
		return false
	}
	for i := range this.SourceCidr {
		if this.SourceCidr[i] != that1.SourceCidr[i] {
			return false
		}
	}
	if len(this.DestinationCidr) != len(that1.DestinationCidr) {
		return false
	}
	for i := range this.DestinationCidr {
		if this.DestinationCidr[i] != that1.DestinationCidr[i] {
			return false
		}
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if !this.SourcePort.Equal(that1.SourcePort) {
		return false
	}
	if !this.DestinationPort.Equal(that1.DestinationPort) {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	return true
}
func (this *MatchCriteriaType_VirtualNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchCriteriaType_VirtualNetwork)
	if !ok {
		that2, ok := that.(MatchCriteriaType_VirtualNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualNetwork.Equal(that1.VirtualNetwork) {
		return false
	}
	return true
}
func (this *MatchCriteriaType_Segment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchCriteriaType_Segment)
	if !ok {
		that2, ok := that.(MatchCriteriaType_Segment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Segment.Equal(that1.Segment) {
		return false
	}
	return true
}
func (this *ActionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionType)
	if !ok {
		that2, ok := that.(ActionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SourceNatChoice == nil {
		if this.SourceNatChoice != nil {
			return false
		}
	} else if this.SourceNatChoice == nil {
		return false
	} else if !this.SourceNatChoice.Equal(that1.SourceNatChoice) {
		return false
	}
	return true
}
func (this *ActionType_VirtualCidr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionType_VirtualCidr)
	if !ok {
		that2, ok := that.(ActionType_VirtualCidr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VirtualCidr != that1.VirtualCidr {
		return false
	}
	return true
}
func (this *ActionType_Dynamic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionType_Dynamic)
	if !ok {
		that2, ok := that.(ActionType_Dynamic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dynamic.Equal(that1.Dynamic) {
		return false
	}
	return true
}
func (this *DynamicPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DynamicPool)
	if !ok {
		that2, ok := that.(DynamicPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PoolChoice == nil {
		if this.PoolChoice != nil {
			return false
		}
	} else if this.PoolChoice == nil {
		return false
	} else if !this.PoolChoice.Equal(that1.PoolChoice) {
		return false
	}
	return true
}
func (this *DynamicPool_Pools) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DynamicPool_Pools)
	if !ok {
		that2, ok := that.(DynamicPool_Pools)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pools.Equal(that1.Pools) {
		return false
	}
	return true
}
func (this *DynamicPool_ElasticIps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DynamicPool_ElasticIps)
	if !ok {
		that2, ok := that.(DynamicPool_ElasticIps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ElasticIps.Equal(that1.ElasticIps) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AppliesToChoice == nil {
		if this.AppliesToChoice != nil {
			return false
		}
	} else if this.AppliesToChoice == nil {
		return false
	} else if !this.AppliesToChoice.Equal(that1.AppliesToChoice) {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Site)
	if !ok {
		that2, ok := that.(GlobalSpecType_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AppliesToChoice == nil {
		if this.AppliesToChoice != nil {
			return false
		}
	} else if this.AppliesToChoice == nil {
		return false
	} else if !this.AppliesToChoice.Equal(that1.AppliesToChoice) {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Site)
	if !ok {
		that2, ok := that.(CreateSpecType_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AppliesToChoice == nil {
		if this.AppliesToChoice != nil {
			return false
		}
	} else if this.AppliesToChoice == nil {
		return false
	} else if !this.AppliesToChoice.Equal(that1.AppliesToChoice) {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Site)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AppliesToChoice == nil {
		if this.AppliesToChoice != nil {
			return false
		}
	} else if this.AppliesToChoice == nil {
		return false
	} else if !this.AppliesToChoice.Equal(that1.AppliesToChoice) {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Site)
	if !ok {
		that2, ok := that.(GetSpecType_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *RuleType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&nat_policy.RuleType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.EnableChoice != nil {
		s = append(s, "EnableChoice: "+fmt.Sprintf("%#v", this.EnableChoice)+",\n")
	}
	if this.ScopeChoice != nil {
		s = append(s, "ScopeChoice: "+fmt.Sprintf("%#v", this.ScopeChoice)+",\n")
	}
	if this.Criteria != nil {
		s = append(s, "Criteria: "+fmt.Sprintf("%#v", this.Criteria)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RuleType_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.RuleType_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *RuleType_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.RuleType_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *RuleType_CloudConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.RuleType_CloudConnect{` +
		`CloudConnect:` + fmt.Sprintf("%#v", this.CloudConnect) + `}`}, ", ")
	return s
}
func (this *RuleType_NetworkInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.RuleType_NetworkInterface{` +
		`NetworkInterface:` + fmt.Sprintf("%#v", this.NetworkInterface) + `}`}, ", ")
	return s
}
func (this *RuleType_Segment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.RuleType_Segment{` +
		`Segment:` + fmt.Sprintf("%#v", this.Segment) + `}`}, ", ")
	return s
}
func (this *RuleType_VirtualNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.RuleType_VirtualNetwork{` +
		`VirtualNetwork:` + fmt.Sprintf("%#v", this.VirtualNetwork) + `}`}, ", ")
	return s
}
func (this *RuleType_NodeInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.RuleType_NodeInterface{` +
		`NodeInterface:` + fmt.Sprintf("%#v", this.NodeInterface) + `}`}, ", ")
	return s
}
func (this *MatchCriteriaType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&nat_policy.MatchCriteriaType{")
	s = append(s, "SourceCidr: "+fmt.Sprintf("%#v", this.SourceCidr)+",\n")
	s = append(s, "DestinationCidr: "+fmt.Sprintf("%#v", this.DestinationCidr)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	if this.SourcePort != nil {
		s = append(s, "SourcePort: "+fmt.Sprintf("%#v", this.SourcePort)+",\n")
	}
	if this.DestinationPort != nil {
		s = append(s, "DestinationPort: "+fmt.Sprintf("%#v", this.DestinationPort)+",\n")
	}
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatchCriteriaType_VirtualNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.MatchCriteriaType_VirtualNetwork{` +
		`VirtualNetwork:` + fmt.Sprintf("%#v", this.VirtualNetwork) + `}`}, ", ")
	return s
}
func (this *MatchCriteriaType_Segment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.MatchCriteriaType_Segment{` +
		`Segment:` + fmt.Sprintf("%#v", this.Segment) + `}`}, ", ")
	return s
}
func (this *ActionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nat_policy.ActionType{")
	if this.SourceNatChoice != nil {
		s = append(s, "SourceNatChoice: "+fmt.Sprintf("%#v", this.SourceNatChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActionType_VirtualCidr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.ActionType_VirtualCidr{` +
		`VirtualCidr:` + fmt.Sprintf("%#v", this.VirtualCidr) + `}`}, ", ")
	return s
}
func (this *ActionType_Dynamic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.ActionType_Dynamic{` +
		`Dynamic:` + fmt.Sprintf("%#v", this.Dynamic) + `}`}, ", ")
	return s
}
func (this *DynamicPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nat_policy.DynamicPool{")
	if this.PoolChoice != nil {
		s = append(s, "PoolChoice: "+fmt.Sprintf("%#v", this.PoolChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DynamicPool_Pools) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.DynamicPool_Pools{` +
		`Pools:` + fmt.Sprintf("%#v", this.Pools) + `}`}, ", ")
	return s
}
func (this *DynamicPool_ElasticIps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.DynamicPool_ElasticIps{` +
		`ElasticIps:` + fmt.Sprintf("%#v", this.ElasticIps) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nat_policy.GlobalSpecType{")
	if this.AppliesToChoice != nil {
		s = append(s, "AppliesToChoice: "+fmt.Sprintf("%#v", this.AppliesToChoice)+",\n")
	}
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.GlobalSpecType_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nat_policy.CreateSpecType{")
	if this.AppliesToChoice != nil {
		s = append(s, "AppliesToChoice: "+fmt.Sprintf("%#v", this.AppliesToChoice)+",\n")
	}
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.CreateSpecType_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nat_policy.ReplaceSpecType{")
	if this.AppliesToChoice != nil {
		s = append(s, "AppliesToChoice: "+fmt.Sprintf("%#v", this.AppliesToChoice)+",\n")
	}
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.ReplaceSpecType_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nat_policy.GetSpecType{")
	if this.AppliesToChoice != nil {
		s = append(s, "AppliesToChoice: "+fmt.Sprintf("%#v", this.AppliesToChoice)+",\n")
	}
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nat_policy.GetSpecType_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RuleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScopeChoice != nil {
		{
			size := m.ScopeChoice.Size()
			i -= size
			if _, err := m.ScopeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnableChoice != nil {
		{
			size := m.EnableChoice.Size()
			i -= size
			if _, err := m.EnableChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Criteria != nil {
		{
			size, err := m.Criteria.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleType_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleType_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuleType_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleType_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuleType_CloudConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleType_CloudConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloudConnect != nil {
		{
			size, err := m.CloudConnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuleType_NetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleType_NetworkInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkInterface != nil {
		{
			size, err := m.NetworkInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuleType_Segment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleType_Segment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuleType_VirtualNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleType_VirtualNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualNetwork != nil {
		{
			size, err := m.VirtualNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuleType_NodeInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleType_NodeInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NodeInterface != nil {
		{
			size, err := m.NodeInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *MatchCriteriaType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchCriteriaType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchCriteriaType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x70
	}
	if m.NetworkChoice != nil {
		{
			size := m.NetworkChoice.Size()
			i -= size
			if _, err := m.NetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DestinationPort != nil {
		{
			size, err := m.DestinationPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SourcePort != nil {
		{
			size, err := m.SourcePort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationCidr) > 0 {
		for iNdEx := len(m.DestinationCidr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DestinationCidr[iNdEx])
			copy(dAtA[i:], m.DestinationCidr[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationCidr[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SourceCidr) > 0 {
		for iNdEx := len(m.SourceCidr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SourceCidr[iNdEx])
			copy(dAtA[i:], m.SourceCidr[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceCidr[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MatchCriteriaType_VirtualNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchCriteriaType_VirtualNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualNetwork != nil {
		{
			size, err := m.VirtualNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *MatchCriteriaType_Segment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchCriteriaType_Segment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ActionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SourceNatChoice != nil {
		{
			size := m.SourceNatChoice.Size()
			i -= size
			if _, err := m.SourceNatChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActionType_VirtualCidr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionType_VirtualCidr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.VirtualCidr)
	copy(dAtA[i:], m.VirtualCidr)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.VirtualCidr)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ActionType_Dynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionType_Dynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dynamic != nil {
		{
			size, err := m.Dynamic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DynamicPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolChoice != nil {
		{
			size := m.PoolChoice.Size()
			i -= size
			if _, err := m.PoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DynamicPool_Pools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicPool_Pools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pools != nil {
		{
			size, err := m.Pools.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DynamicPool_ElasticIps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicPool_ElasticIps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElasticIps != nil {
		{
			size, err := m.ElasticIps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AppliesToChoice != nil {
		{
			size := m.AppliesToChoice.Size()
			i -= size
			if _, err := m.AppliesToChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AppliesToChoice != nil {
		{
			size := m.AppliesToChoice.Size()
			i -= size
			if _, err := m.AppliesToChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AppliesToChoice != nil {
		{
			size := m.AppliesToChoice.Size()
			i -= size
			if _, err := m.AppliesToChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AppliesToChoice != nil {
		{
			size := m.AppliesToChoice.Size()
			i -= size
			if _, err := m.AppliesToChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Criteria != nil {
		l = m.Criteria.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EnableChoice != nil {
		n += m.EnableChoice.Size()
	}
	if m.ScopeChoice != nil {
		n += m.ScopeChoice.Size()
	}
	return n
}

func (m *RuleType_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RuleType_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RuleType_CloudConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudConnect != nil {
		l = m.CloudConnect.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RuleType_NetworkInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInterface != nil {
		l = m.NetworkInterface.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RuleType_Segment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RuleType_VirtualNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RuleType_NodeInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInterface != nil {
		l = m.NodeInterface.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MatchCriteriaType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SourceCidr) > 0 {
		for _, s := range m.SourceCidr {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DestinationCidr) > 0 {
		for _, s := range m.DestinationCidr {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.SourcePort != nil {
		l = m.SourcePort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DestinationPort != nil {
		l = m.DestinationPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if m.Protocol != 0 {
		n += 1 + sovTypes(uint64(m.Protocol))
	}
	return n
}

func (m *MatchCriteriaType_VirtualNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualNetwork != nil {
		l = m.VirtualNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MatchCriteriaType_Segment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ActionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceNatChoice != nil {
		n += m.SourceNatChoice.Size()
	}
	return n
}

func (m *ActionType_VirtualCidr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VirtualCidr)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ActionType_Dynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dynamic != nil {
		l = m.Dynamic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DynamicPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolChoice != nil {
		n += m.PoolChoice.Size()
	}
	return n
}

func (m *DynamicPool_Pools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pools != nil {
		l = m.Pools.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DynamicPool_ElasticIps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ElasticIps != nil {
		l = m.ElasticIps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppliesToChoice != nil {
		n += m.AppliesToChoice.Size()
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppliesToChoice != nil {
		n += m.AppliesToChoice.Size()
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppliesToChoice != nil {
		n += m.AppliesToChoice.Size()
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppliesToChoice != nil {
		n += m.AppliesToChoice.Size()
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Criteria:` + strings.Replace(this.Criteria.String(), "MatchCriteriaType", "MatchCriteriaType", 1) + `,`,
		`Action:` + strings.Replace(this.Action.String(), "ActionType", "ActionType", 1) + `,`,
		`EnableChoice:` + fmt.Sprintf("%v", this.EnableChoice) + `,`,
		`ScopeChoice:` + fmt.Sprintf("%v", this.ScopeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleType_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleType_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleType_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleType_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleType_CloudConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleType_CloudConnect{`,
		`CloudConnect:` + strings.Replace(fmt.Sprintf("%v", this.CloudConnect), "CloudConnectRefType", "schema.CloudConnectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleType_NetworkInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleType_NetworkInterface{`,
		`NetworkInterface:` + strings.Replace(fmt.Sprintf("%v", this.NetworkInterface), "NetworkInterfaceRefType", "schema.NetworkInterfaceRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleType_Segment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleType_Segment{`,
		`Segment:` + strings.Replace(fmt.Sprintf("%v", this.Segment), "SegmentRefType", "schema.SegmentRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleType_VirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleType_VirtualNetwork{`,
		`VirtualNetwork:` + strings.Replace(fmt.Sprintf("%v", this.VirtualNetwork), "VirtualNetworkReferenceType", "schema.VirtualNetworkReferenceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleType_NodeInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleType_NodeInterface{`,
		`NodeInterface:` + strings.Replace(fmt.Sprintf("%v", this.NodeInterface), "NodeInterfaceType", "schema.NodeInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchCriteriaType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchCriteriaType{`,
		`SourceCidr:` + fmt.Sprintf("%v", this.SourceCidr) + `,`,
		`DestinationCidr:` + fmt.Sprintf("%v", this.DestinationCidr) + `,`,
		`SourcePort:` + strings.Replace(fmt.Sprintf("%v", this.SourcePort), "PortMatcherType", "schema.PortMatcherType", 1) + `,`,
		`DestinationPort:` + strings.Replace(fmt.Sprintf("%v", this.DestinationPort), "PortMatcherType", "schema.PortMatcherType", 1) + `,`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchCriteriaType_VirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchCriteriaType_VirtualNetwork{`,
		`VirtualNetwork:` + strings.Replace(fmt.Sprintf("%v", this.VirtualNetwork), "VirtualNetworkReferenceType", "schema.VirtualNetworkReferenceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchCriteriaType_Segment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchCriteriaType_Segment{`,
		`Segment:` + strings.Replace(fmt.Sprintf("%v", this.Segment), "SegmentRefType", "schema.SegmentRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionType{`,
		`SourceNatChoice:` + fmt.Sprintf("%v", this.SourceNatChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionType_VirtualCidr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionType_VirtualCidr{`,
		`VirtualCidr:` + fmt.Sprintf("%v", this.VirtualCidr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionType_Dynamic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionType_Dynamic{`,
		`Dynamic:` + strings.Replace(fmt.Sprintf("%v", this.Dynamic), "DynamicPool", "DynamicPool", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamicPool{`,
		`PoolChoice:` + fmt.Sprintf("%v", this.PoolChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicPool_Pools) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamicPool_Pools{`,
		`Pools:` + strings.Replace(fmt.Sprintf("%v", this.Pools), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicPool_ElasticIps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamicPool_ElasticIps{`,
		`ElasticIps:` + strings.Replace(fmt.Sprintf("%v", this.ElasticIps), "CloudElasticIpRefListType", "schema.CloudElasticIpRefListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*RuleType{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "RuleType", "RuleType", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AppliesToChoice:` + fmt.Sprintf("%v", this.AppliesToChoice) + `,`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "SiteReferenceType", "schema.SiteReferenceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*RuleType{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "RuleType", "RuleType", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`AppliesToChoice:` + fmt.Sprintf("%v", this.AppliesToChoice) + `,`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "SiteReferenceType", "schema.SiteReferenceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*RuleType{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "RuleType", "RuleType", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`AppliesToChoice:` + fmt.Sprintf("%v", this.AppliesToChoice) + `,`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "SiteReferenceType", "schema.SiteReferenceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*RuleType{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "RuleType", "RuleType", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`AppliesToChoice:` + fmt.Sprintf("%v", this.AppliesToChoice) + `,`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "SiteReferenceType", "schema.SiteReferenceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RuleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Criteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Criteria == nil {
				m.Criteria = &MatchCriteriaType{}
			}
			if err := m.Criteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &ActionType{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &RuleType_Enable{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &RuleType_Disable{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.CloudConnectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &RuleType_CloudConnect{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.NetworkInterfaceRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &RuleType_NetworkInterface{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SegmentRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &RuleType_Segment{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.VirtualNetworkReferenceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &RuleType_VirtualNetwork{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.NodeInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &RuleType_NodeInterface{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchCriteriaType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchCriteriaType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchCriteriaType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCidr = append(m.SourceCidr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCidr = append(m.DestinationCidr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourcePort == nil {
				m.SourcePort = &schema.PortMatcherType{}
			}
			if err := m.SourcePort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestinationPort == nil {
				m.DestinationPort = &schema.PortMatcherType{}
			}
			if err := m.DestinationPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.VirtualNetworkReferenceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &MatchCriteriaType_VirtualNetwork{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SegmentRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &MatchCriteriaType_Segment{v}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= schema.ProtocolEnumType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualCidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNatChoice = &ActionType_VirtualCidr{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynamicPool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceNatChoice = &ActionType_Dynamic{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &DynamicPool_Pools{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElasticIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.CloudElasticIpRefListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PoolChoice = &DynamicPool_ElasticIps{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SiteReferenceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppliesToChoice = &GlobalSpecType_Site{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &RuleType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SiteReferenceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppliesToChoice = &CreateSpecType_Site{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &RuleType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SiteReferenceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppliesToChoice = &ReplaceSpecType_Site{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &RuleType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SiteReferenceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppliesToChoice = &GetSpecType_Site{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &RuleType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package nat_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ActionType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActionType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActionType) DeepCopy() *ActionType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActionType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActionType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActionType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActionTypeValidator().Validate(ctx, m, opts...)
}

func (m *ActionType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSourceNatChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ActionType) GetSourceNatChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSourceNatChoice() == nil {
		return nil, nil
	}
	switch m.GetSourceNatChoice().(type) {
	case *ActionType_Dynamic:

		drInfos, err := m.GetDynamic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDynamic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "dynamic." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateActionType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActionType) SourceNatChoiceVirtualCidrValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_VirtualCidr, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for virtual_cidr")
	}
	return oValidatorFn_VirtualCidr, nil
}

func (v *ValidateActionType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActionType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActionType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetSourceNatChoice().(type) {
	case *ActionType_VirtualCidr:
		if fv, exists := v.FldValidators["source_nat_choice.virtual_cidr"]; exists {
			val := m.GetSourceNatChoice().(*ActionType_VirtualCidr).VirtualCidr
			vOpts := append(opts,
				db.WithValidateField("source_nat_choice"),
				db.WithValidateField("virtual_cidr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ActionType_Dynamic:
		if fv, exists := v.FldValidators["source_nat_choice.dynamic"]; exists {
			val := m.GetSourceNatChoice().(*ActionType_Dynamic).Dynamic
			vOpts := append(opts,
				db.WithValidateField("source_nat_choice"),
				db.WithValidateField("dynamic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActionTypeValidator = func() *ValidateActionType {
	v := &ValidateActionType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSourceNatChoiceVirtualCidr := v.SourceNatChoiceVirtualCidrValidationRuleHandler
	rulesSourceNatChoiceVirtualCidr := map[string]string{
		"ves.io.schema.rules.string.ip_prefix": "true",
	}
	vFnMap["source_nat_choice.virtual_cidr"], err = vrhSourceNatChoiceVirtualCidr(rulesSourceNatChoiceVirtualCidr)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ActionType.source_nat_choice_virtual_cidr: %s", err)
		panic(errMsg)
	}

	v.FldValidators["source_nat_choice.virtual_cidr"] = vFnMap["source_nat_choice.virtual_cidr"]

	v.FldValidators["source_nat_choice.dynamic"] = DynamicPoolValidator().Validate

	return v
}()

func ActionTypeValidator() db.Validator {
	return DefaultActionTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAppliesToChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAppliesToChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetAppliesToChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAppliesToChoice() == nil {
		return nil, nil
	}
	switch m.GetAppliesToChoice().(type) {
	case *CreateSpecType_Site:

		drInfos, err := m.GetSite().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSite().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AppliesToChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for applies_to_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["applies_to_choice"]; exists {
		val := m.GetAppliesToChoice()
		vOpts := append(opts,
			db.WithValidateField("applies_to_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppliesToChoice().(type) {
	case *CreateSpecType_Site:
		if fv, exists := v.FldValidators["applies_to_choice.site"]; exists {
			val := m.GetAppliesToChoice().(*CreateSpecType_Site).Site
			vOpts := append(opts,
				db.WithValidateField("applies_to_choice"),
				db.WithValidateField("site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppliesToChoice := v.AppliesToChoiceValidationRuleHandler
	rulesAppliesToChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppliesToChoice(rulesAppliesToChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.applies_to_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["applies_to_choice"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "64",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	v.FldValidators["applies_to_choice.site"] = ves_io_schema.SiteReferenceTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DynamicPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DynamicPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DynamicPool) DeepCopy() *DynamicPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DynamicPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DynamicPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DynamicPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DynamicPoolValidator().Validate(ctx, m, opts...)
}

func (m *DynamicPool) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPoolChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *DynamicPool) GetPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetPoolChoice().(type) {
	case *DynamicPool_Pools:

		return nil, nil

	case *DynamicPool_ElasticIps:

		drInfos, err := m.GetElasticIps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetElasticIps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "elastic_ips." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateDynamicPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDynamicPool) PoolChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pool_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDynamicPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DynamicPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DynamicPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["pool_choice"]; exists {
		val := m.GetPoolChoice()
		vOpts := append(opts,
			db.WithValidateField("pool_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPoolChoice().(type) {
	case *DynamicPool_Pools:
		if fv, exists := v.FldValidators["pool_choice.pools"]; exists {
			val := m.GetPoolChoice().(*DynamicPool_Pools).Pools
			vOpts := append(opts,
				db.WithValidateField("pool_choice"),
				db.WithValidateField("pools"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DynamicPool_ElasticIps:
		if fv, exists := v.FldValidators["pool_choice.elastic_ips"]; exists {
			val := m.GetPoolChoice().(*DynamicPool_ElasticIps).ElasticIps
			vOpts := append(opts,
				db.WithValidateField("pool_choice"),
				db.WithValidateField("elastic_ips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDynamicPoolValidator = func() *ValidateDynamicPool {
	v := &ValidateDynamicPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPoolChoice := v.PoolChoiceValidationRuleHandler
	rulesPoolChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPoolChoice(rulesPoolChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DynamicPool.pool_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pool_choice"] = vFn

	v.FldValidators["pool_choice.pools"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["pool_choice.elastic_ips"] = ves_io_schema.CloudElasticIpRefListTypeValidator().Validate

	return v
}()

func DynamicPoolValidator() db.Validator {
	return DefaultDynamicPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAppliesToChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAppliesToChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetAppliesToChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAppliesToChoice() == nil {
		return nil, nil
	}
	switch m.GetAppliesToChoice().(type) {
	case *GetSpecType_Site:

		drInfos, err := m.GetSite().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSite().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AppliesToChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for applies_to_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["applies_to_choice"]; exists {
		val := m.GetAppliesToChoice()
		vOpts := append(opts,
			db.WithValidateField("applies_to_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppliesToChoice().(type) {
	case *GetSpecType_Site:
		if fv, exists := v.FldValidators["applies_to_choice.site"]; exists {
			val := m.GetAppliesToChoice().(*GetSpecType_Site).Site
			vOpts := append(opts,
				db.WithValidateField("applies_to_choice"),
				db.WithValidateField("site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppliesToChoice := v.AppliesToChoiceValidationRuleHandler
	rulesAppliesToChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppliesToChoice(rulesAppliesToChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.applies_to_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["applies_to_choice"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "64",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	v.FldValidators["applies_to_choice.site"] = ves_io_schema.SiteReferenceTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAppliesToChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAppliesToChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetAppliesToChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAppliesToChoice() == nil {
		return nil, nil
	}
	switch m.GetAppliesToChoice().(type) {
	case *GlobalSpecType_Site:

		drInfos, err := m.GetSite().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSite().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AppliesToChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for applies_to_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["applies_to_choice"]; exists {
		val := m.GetAppliesToChoice()
		vOpts := append(opts,
			db.WithValidateField("applies_to_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppliesToChoice().(type) {
	case *GlobalSpecType_Site:
		if fv, exists := v.FldValidators["applies_to_choice.site"]; exists {
			val := m.GetAppliesToChoice().(*GlobalSpecType_Site).Site
			vOpts := append(opts,
				db.WithValidateField("applies_to_choice"),
				db.WithValidateField("site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppliesToChoice := v.AppliesToChoiceValidationRuleHandler
	rulesAppliesToChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppliesToChoice(rulesAppliesToChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.applies_to_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["applies_to_choice"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "64",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	v.FldValidators["applies_to_choice.site"] = ves_io_schema.SiteReferenceTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MatchCriteriaType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MatchCriteriaType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MatchCriteriaType) DeepCopy() *MatchCriteriaType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MatchCriteriaType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MatchCriteriaType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MatchCriteriaType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MatchCriteriaTypeValidator().Validate(ctx, m, opts...)
}

func (m *MatchCriteriaType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNetworkChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *MatchCriteriaType) GetNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkChoice().(type) {
	case *MatchCriteriaType_VirtualNetwork:

		drInfos, err := m.GetVirtualNetwork().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVirtualNetwork().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "virtual_network." + dri.DRField
		}
		return drInfos, err

	case *MatchCriteriaType_Segment:

		drInfos, err := m.GetSegment().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSegment().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "segment." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateMatchCriteriaType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMatchCriteriaType) SourceCidrValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for source_cidr")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for source_cidr")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated source_cidr")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items source_cidr")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMatchCriteriaType) DestinationCidrValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for destination_cidr")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for destination_cidr")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated destination_cidr")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items destination_cidr")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMatchCriteriaType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.ProtocolEnumType)
		return int32(i)
	}
	// ves_io_schema.ProtocolEnumType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.ProtocolEnumType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateMatchCriteriaType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MatchCriteriaType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MatchCriteriaType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["destination_cidr"]; exists {
		vOpts := append(opts, db.WithValidateField("destination_cidr"))
		if err := fv(ctx, m.GetDestinationCidr(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination_port"]; exists {

		vOpts := append(opts, db.WithValidateField("destination_port"))
		if err := fv(ctx, m.GetDestinationPort(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetNetworkChoice().(type) {
	case *MatchCriteriaType_VirtualNetwork:
		if fv, exists := v.FldValidators["network_choice.virtual_network"]; exists {
			val := m.GetNetworkChoice().(*MatchCriteriaType_VirtualNetwork).VirtualNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("virtual_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *MatchCriteriaType_Segment:
		if fv, exists := v.FldValidators["network_choice.segment"]; exists {
			val := m.GetNetworkChoice().(*MatchCriteriaType_Segment).Segment
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["source_cidr"]; exists {
		vOpts := append(opts, db.WithValidateField("source_cidr"))
		if err := fv(ctx, m.GetSourceCidr(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["source_port"]; exists {

		vOpts := append(opts, db.WithValidateField("source_port"))
		if err := fv(ctx, m.GetSourcePort(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMatchCriteriaTypeValidator = func() *ValidateMatchCriteriaType {
	v := &ValidateMatchCriteriaType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSourceCidr := v.SourceCidrValidationRuleHandler
	rulesSourceCidr := map[string]string{
		"ves.io.schema.rules.string.ip_prefix": "true",
	}
	vFn, err = vrhSourceCidr(rulesSourceCidr)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MatchCriteriaType.source_cidr: %s", err)
		panic(errMsg)
	}
	v.FldValidators["source_cidr"] = vFn

	vrhDestinationCidr := v.DestinationCidrValidationRuleHandler
	rulesDestinationCidr := map[string]string{
		"ves.io.schema.rules.string.ip_prefix": "true",
	}
	vFn, err = vrhDestinationCidr(rulesDestinationCidr)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MatchCriteriaType.destination_cidr: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination_cidr"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.enum.defined_only": "true",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MatchCriteriaType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	v.FldValidators["network_choice.virtual_network"] = ves_io_schema.VirtualNetworkReferenceTypeValidator().Validate
	v.FldValidators["network_choice.segment"] = ves_io_schema.SegmentRefTypeValidator().Validate

	v.FldValidators["source_port"] = ves_io_schema.PortMatcherTypeValidator().Validate

	v.FldValidators["destination_port"] = ves_io_schema.PortMatcherTypeValidator().Validate

	return v
}()

func MatchCriteriaTypeValidator() db.Validator {
	return DefaultMatchCriteriaTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAppliesToChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAppliesToChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetAppliesToChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAppliesToChoice() == nil {
		return nil, nil
	}
	switch m.GetAppliesToChoice().(type) {
	case *ReplaceSpecType_Site:

		drInfos, err := m.GetSite().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSite().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AppliesToChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for applies_to_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["applies_to_choice"]; exists {
		val := m.GetAppliesToChoice()
		vOpts := append(opts,
			db.WithValidateField("applies_to_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppliesToChoice().(type) {
	case *ReplaceSpecType_Site:
		if fv, exists := v.FldValidators["applies_to_choice.site"]; exists {
			val := m.GetAppliesToChoice().(*ReplaceSpecType_Site).Site
			vOpts := append(opts,
				db.WithValidateField("applies_to_choice"),
				db.WithValidateField("site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppliesToChoice := v.AppliesToChoiceValidationRuleHandler
	rulesAppliesToChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppliesToChoice(rulesAppliesToChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.applies_to_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["applies_to_choice"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "64",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	v.FldValidators["applies_to_choice.site"] = ves_io_schema.SiteReferenceTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RuleType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RuleType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RuleType) DeepCopy() *RuleType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RuleType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RuleType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RuleType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RuleTypeValidator().Validate(ctx, m, opts...)
}

func (m *RuleType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetActionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetActionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCriteriaDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCriteriaDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetScopeChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetScopeChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *RuleType) GetActionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAction() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAction().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAction().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "action." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *RuleType) GetCriteriaDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCriteria() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCriteria().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCriteria().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "criteria." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *RuleType) GetScopeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetScopeChoice() == nil {
		return nil, nil
	}
	switch m.GetScopeChoice().(type) {
	case *RuleType_CloudConnect:

		drInfos, err := m.GetCloudConnect().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCloudConnect().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "cloud_connect." + dri.DRField
		}
		return drInfos, err

	case *RuleType_NetworkInterface:

		drInfos, err := m.GetNetworkInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetNetworkInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "network_interface." + dri.DRField
		}
		return drInfos, err

	case *RuleType_Segment:

		drInfos, err := m.GetSegment().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSegment().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "segment." + dri.DRField
		}
		return drInfos, err

	case *RuleType_VirtualNetwork:

		drInfos, err := m.GetVirtualNetwork().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVirtualNetwork().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "virtual_network." + dri.DRField
		}
		return drInfos, err

	case *RuleType_NodeInterface:

		drInfos, err := m.GetNodeInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetNodeInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "node_interface." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateRuleType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRuleType) EnableChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRuleType) ScopeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for scope_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRuleType) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateRuleType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ActionTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRuleType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RuleType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RuleType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["criteria"]; exists {

		vOpts := append(opts, db.WithValidateField("criteria"))
		if err := fv(ctx, m.GetCriteria(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["enable_choice"]; exists {
		val := m.GetEnableChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableChoice().(type) {
	case *RuleType_Enable:
		if fv, exists := v.FldValidators["enable_choice.enable"]; exists {
			val := m.GetEnableChoice().(*RuleType_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RuleType_Disable:
		if fv, exists := v.FldValidators["enable_choice.disable"]; exists {
			val := m.GetEnableChoice().(*RuleType_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scope_choice"]; exists {
		val := m.GetScopeChoice()
		vOpts := append(opts,
			db.WithValidateField("scope_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetScopeChoice().(type) {
	case *RuleType_CloudConnect:
		if fv, exists := v.FldValidators["scope_choice.cloud_connect"]; exists {
			val := m.GetScopeChoice().(*RuleType_CloudConnect).CloudConnect
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("cloud_connect"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RuleType_NetworkInterface:
		if fv, exists := v.FldValidators["scope_choice.network_interface"]; exists {
			val := m.GetScopeChoice().(*RuleType_NetworkInterface).NetworkInterface
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("network_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RuleType_Segment:
		if fv, exists := v.FldValidators["scope_choice.segment"]; exists {
			val := m.GetScopeChoice().(*RuleType_Segment).Segment
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RuleType_VirtualNetwork:
		if fv, exists := v.FldValidators["scope_choice.virtual_network"]; exists {
			val := m.GetScopeChoice().(*RuleType_VirtualNetwork).VirtualNetwork
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("virtual_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RuleType_NodeInterface:
		if fv, exists := v.FldValidators["scope_choice.node_interface"]; exists {
			val := m.GetScopeChoice().(*RuleType_NodeInterface).NodeInterface
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("node_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRuleTypeValidator = func() *ValidateRuleType {
	v := &ValidateRuleType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnableChoice := v.EnableChoiceValidationRuleHandler
	rulesEnableChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableChoice(rulesEnableChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RuleType.enable_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_choice"] = vFn

	vrhScopeChoice := v.ScopeChoiceValidationRuleHandler
	rulesScopeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhScopeChoice(rulesScopeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RuleType.scope_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scope_choice"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RuleType.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RuleType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	v.FldValidators["scope_choice.cloud_connect"] = ves_io_schema.CloudConnectRefTypeValidator().Validate
	v.FldValidators["scope_choice.network_interface"] = ves_io_schema.NetworkInterfaceRefTypeValidator().Validate
	v.FldValidators["scope_choice.segment"] = ves_io_schema.SegmentRefTypeValidator().Validate
	v.FldValidators["scope_choice.virtual_network"] = ves_io_schema.VirtualNetworkReferenceTypeValidator().Validate
	v.FldValidators["scope_choice.node_interface"] = ves_io_schema.NodeInterfaceTypeValidator().Validate

	v.FldValidators["criteria"] = MatchCriteriaTypeValidator().Validate

	return v
}()

func RuleTypeValidator() db.Validator {
	return DefaultRuleTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetAppliesToChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AppliesToChoice.(type) {
	case nil:
		o.AppliesToChoice = nil

	case *CreateSpecType_Site:
		o.AppliesToChoice = &GlobalSpecType_Site{Site: of.Site}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetAppliesToChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AppliesToChoice.(type) {
	case nil:
		r.AppliesToChoice = nil

	case *GlobalSpecType_Site:
		r.AppliesToChoice = &CreateSpecType_Site{Site: of.Site}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAppliesToChoiceFromGlobalSpecType(f)
	m.Rules = f.GetRules()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAppliesToChoiceToGlobalSpecType(f)
	f.Rules = m1.Rules
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAppliesToChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AppliesToChoice.(type) {
	case nil:
		o.AppliesToChoice = nil

	case *GetSpecType_Site:
		o.AppliesToChoice = &GlobalSpecType_Site{Site: of.Site}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAppliesToChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AppliesToChoice.(type) {
	case nil:
		r.AppliesToChoice = nil

	case *GlobalSpecType_Site:
		r.AppliesToChoice = &GetSpecType_Site{Site: of.Site}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAppliesToChoiceFromGlobalSpecType(f)
	m.Rules = f.GetRules()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAppliesToChoiceToGlobalSpecType(f)
	f.Rules = m1.Rules
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetAppliesToChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AppliesToChoice.(type) {
	case nil:
		o.AppliesToChoice = nil

	case *ReplaceSpecType_Site:
		o.AppliesToChoice = &GlobalSpecType_Site{Site: of.Site}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetAppliesToChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AppliesToChoice.(type) {
	case nil:
		r.AppliesToChoice = nil

	case *GlobalSpecType_Site:
		r.AppliesToChoice = &ReplaceSpecType_Site{Site: of.Site}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAppliesToChoiceFromGlobalSpecType(f)
	m.Rules = f.GetRules()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAppliesToChoiceToGlobalSpecType(f)
	f.Rules = m1.Rules
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package aws_account

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *RegistrationRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RegistrationRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RegistrationRequest) DeepCopy() *RegistrationRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RegistrationRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RegistrationRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RegistrationRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RegistrationRequestValidator().Validate(ctx, m, opts...)
}

type ValidateRegistrationRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRegistrationRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RegistrationRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RegistrationRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["x_amzn_marketplace_token"]; exists {

		vOpts := append(opts, db.WithValidateField("x_amzn_marketplace_token"))
		if err := fv(ctx, m.GetXAmznMarketplaceToken(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRegistrationRequestValidator = func() *ValidateRegistrationRequest {
	v := &ValidateRegistrationRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RegistrationRequestValidator() db.Validator {
	return DefaultRegistrationRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *RegistrationResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RegistrationResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RegistrationResponse) DeepCopy() *RegistrationResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RegistrationResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RegistrationResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RegistrationResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RegistrationResponseValidator().Validate(ctx, m, opts...)
}

type ValidateRegistrationResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRegistrationResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RegistrationResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RegistrationResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["redirect_url"]; exists {

		vOpts := append(opts, db.WithValidateField("redirect_url"))
		if err := fv(ctx, m.GetRedirectUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRegistrationResponseValidator = func() *ValidateRegistrationResponse {
	v := &ValidateRegistrationResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RegistrationResponseValidator() db.Validator {
	return DefaultRegistrationResponseValidator
}

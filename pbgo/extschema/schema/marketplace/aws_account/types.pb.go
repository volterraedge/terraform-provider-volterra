// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/marketplace/aws_account/types.proto

package aws_account

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AWSSubscriptionStatus
//
// x-displayName: "AWS Customer Subscription Status"
// AWSSubscriptionStatus indicates status of SaaS product subscription from an AWS Account, e.g., subscribed, unsubscribed, failed to subscribe and so on
type AWSSubscriptionStatus int32

const (
	// x-displayName: "subscribe success"
	// Customer is subscribed
	SUBSCRIBE_SUCCESS AWSSubscriptionStatus = 0
	// x-displayName: "unsubscribe pending"
	// Customer is in the process of unsubscribing and final metering records should be sent to AWS
	UNSUBSCRIBE_PENDING AWSSubscriptionStatus = 1
	// x-displayName: "unsubscribe success"
	// Customer is unsubscribed and no more metering usage could be sent to AWS
	UNSUBSCRIBE_SUCCESS AWSSubscriptionStatus = 2
	// x-displayName: "subscribe fail"
	// Customer subscription failed
	SUBSCRIBE_FAIL AWSSubscriptionStatus = 3
)

var AWSSubscriptionStatus_name = map[int32]string{
	0: "SUBSCRIBE_SUCCESS",
	1: "UNSUBSCRIBE_PENDING",
	2: "UNSUBSCRIBE_SUCCESS",
	3: "SUBSCRIBE_FAIL",
}

var AWSSubscriptionStatus_value = map[string]int32{
	"SUBSCRIBE_SUCCESS":   0,
	"UNSUBSCRIBE_PENDING": 1,
	"UNSUBSCRIBE_SUCCESS": 2,
	"SUBSCRIBE_FAIL":      3,
}

func (AWSSubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1306e5eee3922dd1, []int{0}
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of aws_account in the storage backend.
type GlobalSpecType struct {
	// customer_identifier
	//
	// x-displayName: "Customer Identifier"
	// x-example: "HHhd4MFcSzM"
	// Customer identifier is a unique account(tenant) identifier provided by AWS
	CustomerIdentifier string `protobuf:"bytes,1,opt,name=customer_identifier,json=customerIdentifier,proto3" json:"customer_identifier,omitempty"`
	// aws_account_id
	//
	// x-displayName: "AWS Account ID"
	// x-example: "516023652278"
	// AWS account ID associated with the customer identifier
	AwsAccountId string `protobuf:"bytes,2,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
	// product_code
	//
	// x-displayName: "Product Code"
	// x-example: "a1sz43x6uizq7oxocvxvovrxo"
	// Product code provided by AWS for the product listed in AWS Marketplace
	ProductCode string `protobuf:"bytes,3,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// AWSSubscriptionStatus
	//
	// x-displayName: "AWS Customer Subscription Status"
	// AWSSubscriptionStatus indicates F5XC AWS marketplace product subscription status per account
	SubscriptionStatus AWSSubscriptionStatus `protobuf:"varint,4,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=ves.io.schema.marketplace.aws_account.AWSSubscriptionStatus" json:"subscription_status,omitempty"`
	// Tenant Reference
	//
	// x-displayName: "Tenant Reference"
	// Reference to tenant object
	Tenant []*schema.ObjectRefType `protobuf:"bytes,6,rep,name=tenant,proto3" json:"tenant,omitempty"`
	// Signup ID
	//
	// x-displayName: "Signup ID"
	// Identifier for the corresponding signup object
	SignupId string `protobuf:"bytes,7,opt,name=signup_id,json=signupId,proto3" json:"signup_id,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1306e5eee3922dd1, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetCustomerIdentifier() string {
	if m != nil {
		return m.CustomerIdentifier
	}
	return ""
}

func (m *GlobalSpecType) GetAwsAccountId() string {
	if m != nil {
		return m.AwsAccountId
	}
	return ""
}

func (m *GlobalSpecType) GetProductCode() string {
	if m != nil {
		return m.ProductCode
	}
	return ""
}

func (m *GlobalSpecType) GetSubscriptionStatus() AWSSubscriptionStatus {
	if m != nil {
		return m.SubscriptionStatus
	}
	return SUBSCRIBE_SUCCESS
}

func (m *GlobalSpecType) GetTenant() []*schema.ObjectRefType {
	if m != nil {
		return m.Tenant
	}
	return nil
}

func (m *GlobalSpecType) GetSignupId() string {
	if m != nil {
		return m.SignupId
	}
	return ""
}

func init() {
	proto.RegisterEnum("ves.io.schema.marketplace.aws_account.AWSSubscriptionStatus", AWSSubscriptionStatus_name, AWSSubscriptionStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.marketplace.aws_account.AWSSubscriptionStatus", AWSSubscriptionStatus_name, AWSSubscriptionStatus_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.marketplace.aws_account.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.marketplace.aws_account.GlobalSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/marketplace/aws_account/types.proto", fileDescriptor_1306e5eee3922dd1)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/marketplace/aws_account/types.proto", fileDescriptor_1306e5eee3922dd1)
}

var fileDescriptor_1306e5eee3922dd1 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcf, 0x6a, 0xd4, 0x40,
	0x18, 0xcf, 0x74, 0xdb, 0xb5, 0x9d, 0x96, 0x65, 0x9d, 0xa5, 0xb8, 0xb6, 0x65, 0x5c, 0x04, 0xa1,
	0x08, 0x4d, 0xb0, 0x82, 0x20, 0x78, 0xe9, 0x6e, 0x6b, 0x89, 0x48, 0x95, 0x8d, 0x45, 0xd0, 0x43,
	0x98, 0x24, 0xb3, 0xe9, 0xd8, 0x24, 0x33, 0xcc, 0x4c, 0xb6, 0xf6, 0x20, 0xf8, 0x08, 0xe2, 0xcd,
	0x17, 0x10, 0xf1, 0x11, 0x3c, 0xf5, 0xe8, 0xb1, 0xc7, 0x1e, 0x6d, 0xf6, 0xa2, 0xb7, 0xbe, 0x81,
	0xb2, 0xd9, 0xac, 0xfb, 0x47, 0x2b, 0xde, 0xbe, 0xf9, 0x7e, 0x7f, 0x32, 0xbf, 0x2f, 0xdf, 0xc0,
	0x3b, 0x5d, 0xaa, 0x4c, 0xc6, 0x2d, 0xe5, 0x1f, 0xd0, 0x98, 0x58, 0x31, 0x91, 0x87, 0x54, 0x8b,
	0x88, 0xf8, 0xd4, 0x22, 0x47, 0xca, 0x25, 0xbe, 0xcf, 0xd3, 0x44, 0x5b, 0xfa, 0x58, 0x50, 0x65,
	0x0a, 0xc9, 0x35, 0x47, 0xb7, 0x06, 0x12, 0x73, 0x20, 0x31, 0xc7, 0x24, 0xe6, 0x98, 0x64, 0x65,
	0x23, 0x64, 0xfa, 0x20, 0xf5, 0x4c, 0x9f, 0xc7, 0x56, 0xc8, 0x43, 0x6e, 0xe5, 0x6a, 0x2f, 0xed,
	0xe4, 0xa7, 0xfc, 0x90, 0x57, 0x03, 0xd7, 0x95, 0xeb, 0x21, 0xe7, 0x61, 0x44, 0x47, 0x2c, 0x92,
	0x1c, 0x17, 0xd0, 0x8d, 0x69, 0x48, 0xb3, 0x98, 0x2a, 0x4d, 0x62, 0x51, 0x10, 0x56, 0x27, 0x43,
	0x70, 0xa1, 0x19, 0x4f, 0xd4, 0xd0, 0x78, 0x12, 0x1c, 0x4b, 0xb2, 0xb2, 0x36, 0x09, 0x75, 0x49,
	0xc4, 0x02, 0xa2, 0x69, 0x81, 0x36, 0xa6, 0x50, 0x46, 0x8f, 0xdc, 0x09, 0xeb, 0x9b, 0x1f, 0x4b,
	0xb0, 0xb2, 0x1b, 0x71, 0x8f, 0x44, 0x8e, 0xa0, 0xfe, 0xb3, 0x63, 0x41, 0xd1, 0x36, 0xac, 0xf9,
	0xa9, 0xd2, 0x3c, 0xa6, 0xd2, 0x65, 0x01, 0x4d, 0x34, 0xeb, 0x30, 0x2a, 0xeb, 0xa0, 0x01, 0xd6,
	0x17, 0x9a, 0xb5, 0x2f, 0x3f, 0x4e, 0x4a, 0x73, 0xb2, 0x54, 0xff, 0x09, 0xfa, 0xd5, 0xac, 0x9c,
	0xa9, 0x82, 0x36, 0x1a, 0xf2, 0xed, 0xdf, 0x74, 0x74, 0x1f, 0x56, 0xc6, 0x46, 0xe9, 0xb2, 0xa0,
	0x3e, 0x73, 0xb9, 0xc1, 0x12, 0x39, 0x52, 0x5b, 0x03, 0xa6, 0x1d, 0xa0, 0x7b, 0x70, 0x49, 0x48,
	0x1e, 0xa4, 0xbe, 0x76, 0x7d, 0x1e, 0xd0, 0x7a, 0xe9, 0x72, 0xe1, 0x62, 0x41, 0x6c, 0xf1, 0x80,
	0xa2, 0x18, 0xd6, 0x54, 0xea, 0x29, 0x5f, 0xb2, 0x3c, 0xa2, 0xab, 0x34, 0xd1, 0xa9, 0xaa, 0xcf,
	0x36, 0xc0, 0x7a, 0x65, 0xf3, 0x81, 0xf9, 0x5f, 0xff, 0xdc, 0xdc, 0x7a, 0xee, 0x38, 0x63, 0x26,
	0x4e, 0xee, 0xd1, 0x46, 0xea, 0x8f, 0x1e, 0xb2, 0x61, 0x59, 0xd3, 0x84, 0x24, 0xba, 0x5e, 0x6e,
	0x94, 0xd6, 0x17, 0x37, 0xd7, 0xa6, 0xbe, 0xf0, 0xc4, 0x7b, 0x45, 0x7d, 0xdd, 0xa6, 0x9d, 0xfe,
	0x54, 0x9b, 0xb5, 0xcf, 0x6f, 0x0a, 0x7a, 0x9e, 0xe3, 0x3d, 0xe8, 0x5f, 0xbf, 0xe8, 0xa0, 0x55,
	0xb8, 0xa0, 0x58, 0x98, 0xa4, 0xa2, 0x3f, 0xa7, 0x2b, 0xfd, 0xb8, 0xed, 0xf9, 0x41, 0xc3, 0x0e,
	0x1e, 0xcd, 0xce, 0xcf, 0x55, 0xcb, 0xb7, 0x35, 0x5c, 0xfe, 0xeb, 0xd5, 0xd0, 0x32, 0xbc, 0xea,
	0xec, 0x37, 0x9d, 0x56, 0xdb, 0x6e, 0xee, 0xb8, 0xce, 0x7e, 0xab, 0xb5, 0xe3, 0x38, 0x55, 0x03,
	0x5d, 0x83, 0xb5, 0xfd, 0xbd, 0x11, 0xf0, 0x74, 0x67, 0x6f, 0xdb, 0xde, 0xdb, 0xad, 0x82, 0x69,
	0x60, 0xa8, 0x98, 0x41, 0x08, 0x56, 0x46, 0xed, 0x87, 0x5b, 0xf6, 0xe3, 0x6a, 0xa9, 0xf9, 0x01,
	0x9c, 0x9e, 0x63, 0xe3, 0xec, 0x1c, 0x1b, 0x17, 0xe7, 0x18, 0xbc, 0xcd, 0x30, 0xf8, 0x94, 0x61,
	0xf0, 0x35, 0xc3, 0xe0, 0x34, 0xc3, 0xe0, 0x2c, 0xc3, 0xe0, 0x5b, 0x86, 0xc1, 0xf7, 0x0c, 0x1b,
	0x17, 0x19, 0x06, 0xef, 0x7a, 0xd8, 0x38, 0xe9, 0x61, 0x70, 0xda, 0xc3, 0xc6, 0x59, 0x0f, 0x1b,
	0x2f, 0x5e, 0x86, 0x5c, 0x1c, 0x86, 0x66, 0x97, 0x47, 0x9a, 0x4a, 0x49, 0xcc, 0x54, 0x59, 0x79,
	0xd1, 0xe1, 0x32, 0xde, 0x10, 0x92, 0x77, 0x59, 0x40, 0xe5, 0xc6, 0x10, 0xb6, 0x84, 0x17, 0x72,
	0x8b, 0xbe, 0xd6, 0xc5, 0xba, 0xfe, 0xfb, 0x41, 0x7b, 0xe5, 0x7c, 0x83, 0xef, 0xfe, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x88, 0xce, 0xd1, 0x9f, 0x00, 0x04, 0x00, 0x00,
}

func (x AWSSubscriptionStatus) String() string {
	s, ok := AWSSubscriptionStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomerIdentifier != that1.CustomerIdentifier {
		return false
	}
	if this.AwsAccountId != that1.AwsAccountId {
		return false
	}
	if this.ProductCode != that1.ProductCode {
		return false
	}
	if this.SubscriptionStatus != that1.SubscriptionStatus {
		return false
	}
	if len(this.Tenant) != len(that1.Tenant) {
		return false
	}
	for i := range this.Tenant {
		if !this.Tenant[i].Equal(that1.Tenant[i]) {
			return false
		}
	}
	if this.SignupId != that1.SignupId {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&aws_account.GlobalSpecType{")
	s = append(s, "CustomerIdentifier: "+fmt.Sprintf("%#v", this.CustomerIdentifier)+",\n")
	s = append(s, "AwsAccountId: "+fmt.Sprintf("%#v", this.AwsAccountId)+",\n")
	s = append(s, "ProductCode: "+fmt.Sprintf("%#v", this.ProductCode)+",\n")
	s = append(s, "SubscriptionStatus: "+fmt.Sprintf("%#v", this.SubscriptionStatus)+",\n")
	if this.Tenant != nil {
		s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	}
	s = append(s, "SignupId: "+fmt.Sprintf("%#v", this.SignupId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignupId) > 0 {
		i -= len(m.SignupId)
		copy(dAtA[i:], m.SignupId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SignupId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Tenant) > 0 {
		for iNdEx := len(m.Tenant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tenant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SubscriptionStatus != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SubscriptionStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProductCode) > 0 {
		i -= len(m.ProductCode)
		copy(dAtA[i:], m.ProductCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProductCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AwsAccountId) > 0 {
		i -= len(m.AwsAccountId)
		copy(dAtA[i:], m.AwsAccountId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsAccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CustomerIdentifier) > 0 {
		i -= len(m.CustomerIdentifier)
		copy(dAtA[i:], m.CustomerIdentifier)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomerIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomerIdentifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AwsAccountId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ProductCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SubscriptionStatus != 0 {
		n += 1 + sovTypes(uint64(m.SubscriptionStatus))
	}
	if len(m.Tenant) > 0 {
		for _, e := range m.Tenant {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.SignupId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTenant := "[]*ObjectRefType{"
	for _, f := range this.Tenant {
		repeatedStringForTenant += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForTenant += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`CustomerIdentifier:` + fmt.Sprintf("%v", this.CustomerIdentifier) + `,`,
		`AwsAccountId:` + fmt.Sprintf("%v", this.AwsAccountId) + `,`,
		`ProductCode:` + fmt.Sprintf("%v", this.ProductCode) + `,`,
		`SubscriptionStatus:` + fmt.Sprintf("%v", this.SubscriptionStatus) + `,`,
		`Tenant:` + repeatedStringForTenant + `,`,
		`SignupId:` + fmt.Sprintf("%v", this.SignupId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionStatus", wireType)
			}
			m.SubscriptionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionStatus |= AWSSubscriptionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = append(m.Tenant, &schema.ObjectRefType{})
			if err := m.Tenant[len(m.Tenant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

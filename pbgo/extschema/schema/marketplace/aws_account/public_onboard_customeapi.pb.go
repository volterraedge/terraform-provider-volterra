// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/marketplace/aws_account/public_onboard_customeapi.proto

// Onboard AWS SaaS PAYG account
//
// x-displayName: "Onboard AWS SaaS PAYG account"
// APIs to manage AWS Account resources.

package aws_account

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	signup "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/signup"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegistrationRequest
//
// x-displayName: "AWS SaaS PAYG Registration Request"
// Request to register F5XC AWS marketplace product for F5XC service.
type RegistrationRequest struct {
	// x-amzn-marketplace-token
	//
	// x-displayName: "x-amzn-marketplace-token"
	// x-example: "x-amzn-marketplace-token=<token val>"
	// AWS customerâ€™s registration token
	XAmznMarketplaceToken string `protobuf:"bytes,1,opt,name=x_amzn_marketplace_token,json=x-amzn-marketplace-token,proto3" json:"x_amzn_marketplace_token,omitempty"`
}

func (m *RegistrationRequest) Reset()      { *m = RegistrationRequest{} }
func (*RegistrationRequest) ProtoMessage() {}
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4137c9133a2982e0, []int{0}
}
func (m *RegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationRequest.Merge(m, src)
}
func (m *RegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationRequest proto.InternalMessageInfo

func (m *RegistrationRequest) GetXAmznMarketplaceToken() string {
	if m != nil {
		return m.XAmznMarketplaceToken
	}
	return ""
}

// RegistrationResponse
//
// x-displayName: "AWS SaaS PAYG Registration Response"
// Response to register F5XC AWS marketplace product
type RegistrationResponse struct {
	// redirect_url
	//
	// x-displayName: "Redirect URL"
	// x-example: "redirect_url: https://console.ves.volterra.io/login/start"
	// Registration redirect URL for redirecting the AWS customer to login/registration page
	RedirectUrl string `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
}

func (m *RegistrationResponse) Reset()      { *m = RegistrationResponse{} }
func (*RegistrationResponse) ProtoMessage() {}
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4137c9133a2982e0, []int{1}
}
func (m *RegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationResponse.Merge(m, src)
}
func (m *RegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationResponse proto.InternalMessageInfo

func (m *RegistrationResponse) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

// AWSAccountSignupRequest
//
// x-displayName: "AWS Account Signup Request"
type AWSAccountSignupRequest struct {
	// Company Details
	//
	// x-displayName: "Company Details"
	// x-required
	// Details of the company
	CompanyDetails *signup.CompanyMeta `protobuf:"bytes,1,opt,name=company_details,json=companyDetails,proto3" json:"company_details,omitempty"`
	// User Details
	//
	// x-displayName: "User Details"
	// x-required
	// Details of the user
	UserDetails *signup.UserMeta `protobuf:"bytes,2,opt,name=user_details,json=userDetails,proto3" json:"user_details,omitempty"`
	// Account Details
	//
	// x-displayName: "Account Details"
	// x-required
	// Details of the new F5XC account to be created
	AccountDetails *signup.AccountMeta `protobuf:"bytes,3,opt,name=account_details,json=accountDetails,proto3" json:"account_details,omitempty"`
	// CRM Details
	//
	// x-displayName: "CRM Details"
	// This field holds CRM information
	CrmDetails *schema.CRMInfo `protobuf:"bytes,4,opt,name=crm_details,json=crmDetails,proto3" json:"crm_details,omitempty"`
	// account_id
	//
	// x-displayName: "Account ID"
	// Identifier for the aws_account object
	AccountId string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (m *AWSAccountSignupRequest) Reset()      { *m = AWSAccountSignupRequest{} }
func (*AWSAccountSignupRequest) ProtoMessage() {}
func (*AWSAccountSignupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4137c9133a2982e0, []int{2}
}
func (m *AWSAccountSignupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSAccountSignupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AWSAccountSignupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AWSAccountSignupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSAccountSignupRequest.Merge(m, src)
}
func (m *AWSAccountSignupRequest) XXX_Size() int {
	return m.Size()
}
func (m *AWSAccountSignupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSAccountSignupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AWSAccountSignupRequest proto.InternalMessageInfo

func (m *AWSAccountSignupRequest) GetCompanyDetails() *signup.CompanyMeta {
	if m != nil {
		return m.CompanyDetails
	}
	return nil
}

func (m *AWSAccountSignupRequest) GetUserDetails() *signup.UserMeta {
	if m != nil {
		return m.UserDetails
	}
	return nil
}

func (m *AWSAccountSignupRequest) GetAccountDetails() *signup.AccountMeta {
	if m != nil {
		return m.AccountDetails
	}
	return nil
}

func (m *AWSAccountSignupRequest) GetCrmDetails() *schema.CRMInfo {
	if m != nil {
		return m.CrmDetails
	}
	return nil
}

func (m *AWSAccountSignupRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

// AWSAccountSignupResponse
//
// x-displayName: "AWS Account Signup Response"
type AWSAccountSignupResponse struct {
}

func (m *AWSAccountSignupResponse) Reset()      { *m = AWSAccountSignupResponse{} }
func (*AWSAccountSignupResponse) ProtoMessage() {}
func (*AWSAccountSignupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4137c9133a2982e0, []int{3}
}
func (m *AWSAccountSignupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSAccountSignupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AWSAccountSignupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AWSAccountSignupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSAccountSignupResponse.Merge(m, src)
}
func (m *AWSAccountSignupResponse) XXX_Size() int {
	return m.Size()
}
func (m *AWSAccountSignupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSAccountSignupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AWSAccountSignupResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegistrationRequest)(nil), "ves.io.schema.marketplace.aws_account.RegistrationRequest")
	golang_proto.RegisterType((*RegistrationRequest)(nil), "ves.io.schema.marketplace.aws_account.RegistrationRequest")
	proto.RegisterType((*RegistrationResponse)(nil), "ves.io.schema.marketplace.aws_account.RegistrationResponse")
	golang_proto.RegisterType((*RegistrationResponse)(nil), "ves.io.schema.marketplace.aws_account.RegistrationResponse")
	proto.RegisterType((*AWSAccountSignupRequest)(nil), "ves.io.schema.marketplace.aws_account.AWSAccountSignupRequest")
	golang_proto.RegisterType((*AWSAccountSignupRequest)(nil), "ves.io.schema.marketplace.aws_account.AWSAccountSignupRequest")
	proto.RegisterType((*AWSAccountSignupResponse)(nil), "ves.io.schema.marketplace.aws_account.AWSAccountSignupResponse")
	golang_proto.RegisterType((*AWSAccountSignupResponse)(nil), "ves.io.schema.marketplace.aws_account.AWSAccountSignupResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/marketplace/aws_account/public_onboard_customeapi.proto", fileDescriptor_4137c9133a2982e0)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/marketplace/aws_account/public_onboard_customeapi.proto", fileDescriptor_4137c9133a2982e0)
}

var fileDescriptor_4137c9133a2982e0 = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0x33, 0xc9, 0xbd, 0x57, 0xea, 0xa4, 0xba, 0xad, 0x72, 0xbf, 0x72, 0x73, 0x7b, 0x4d,
	0x6b, 0x84, 0x84, 0x2a, 0xc5, 0xa3, 0x86, 0x2f, 0x11, 0x24, 0x50, 0x28, 0x2c, 0x52, 0x54, 0x3e,
	0x52, 0x55, 0x48, 0xb0, 0xb0, 0x26, 0xce, 0x89, 0x6b, 0x6a, 0x7b, 0xcc, 0xcc, 0x38, 0x4d, 0x59,
	0xa1, 0x3e, 0x01, 0x12, 0xe2, 0x1d, 0x78, 0x07, 0x36, 0xdd, 0xc1, 0x02, 0xa1, 0x4a, 0x6c, 0xba,
	0x01, 0xb5, 0x0e, 0x0b, 0x96, 0x7d, 0x04, 0x94, 0xb1, 0x1d, 0x92, 0x50, 0xaa, 0xa8, 0x3b, 0xdb,
	0xff, 0xf3, 0xff, 0xe9, 0x7f, 0x8e, 0xcf, 0x0c, 0xbe, 0xdd, 0x01, 0x61, 0x38, 0x8c, 0x08, 0x6b,
	0x03, 0x3c, 0x4a, 0x3c, 0xca, 0x37, 0x41, 0x06, 0x2e, 0xb5, 0x80, 0xd0, 0x2d, 0x61, 0x52, 0xcb,
	0x62, 0xa1, 0x2f, 0x49, 0x10, 0x36, 0x5d, 0xc7, 0x32, 0x99, 0xdf, 0x64, 0x94, 0xb7, 0x4c, 0x2b,
	0x14, 0x92, 0x79, 0x40, 0x03, 0xc7, 0x08, 0x38, 0x93, 0xac, 0x70, 0x2e, 0xc6, 0x18, 0x31, 0xc6,
	0x18, 0xc2, 0x18, 0x43, 0x98, 0x52, 0xd9, 0x76, 0xe4, 0x46, 0xd8, 0x34, 0x2c, 0xe6, 0x11, 0x9b,
	0xd9, 0x8c, 0x28, 0x77, 0x33, 0x6c, 0xab, 0x37, 0xf5, 0xa2, 0x9e, 0x62, 0x6a, 0x69, 0xce, 0x66,
	0xcc, 0x76, 0x81, 0xd0, 0xc0, 0x21, 0xd4, 0xf7, 0x99, 0xa4, 0xd2, 0x61, 0xbe, 0x48, 0xd4, 0x33,
	0x89, 0x3a, 0x60, 0x48, 0xc7, 0x03, 0x21, 0xa9, 0x17, 0x24, 0x05, 0x95, 0xc9, 0x7a, 0x63, 0xcd,
	0x27, 0x60, 0xc9, 0xc4, 0xb3, 0x34, 0x99, 0x47, 0x6e, 0x07, 0x90, 0xe6, 0xf8, 0x6f, 0xd4, 0xc2,
	0x82, 0xe1, 0x90, 0x67, 0x47, 0x45, 0xe1, 0xd8, 0x7e, 0x18, 0xc4, 0x76, 0xb3, 0x53, 0x49, 0x8a,
	0xfe, 0x1d, 0x2d, 0x1a, 0x86, 0xcf, 0x8d, 0x4a, 0x1d, 0xea, 0x3a, 0x2d, 0x2a, 0x21, 0x51, 0xf5,
	0x31, 0x15, 0x04, 0xf8, 0x9d, 0xb1, 0x04, 0xf3, 0x63, 0x35, 0x0e, 0x6c, 0x99, 0x23, 0x15, 0xfa,
	0x03, 0xfc, 0x47, 0x03, 0x6c, 0x47, 0x48, 0xae, 0xe6, 0xdb, 0x80, 0xa7, 0x21, 0x08, 0x59, 0xa8,
	0xe2, 0x62, 0xd7, 0xa4, 0xde, 0x33, 0xdf, 0x1c, 0x9a, 0x82, 0x29, 0xd9, 0x26, 0xf8, 0x45, 0x34,
	0x8f, 0xce, 0x4f, 0x35, 0x8a, 0xdd, 0x72, 0x5f, 0x2f, 0x0f, 0xe9, 0x65, 0xa5, 0xeb, 0x57, 0xf1,
	0x9f, 0xa3, 0x48, 0x11, 0x30, 0x5f, 0x40, 0x61, 0x01, 0x4f, 0x73, 0x68, 0x39, 0x1c, 0x2c, 0x69,
	0x86, 0xdc, 0x4d, 0x38, 0xf9, 0xf4, 0xdb, 0x3a, 0x77, 0xf5, 0xf7, 0x59, 0xfc, 0x4f, 0xed, 0xe1,
	0x5a, 0x2d, 0x9e, 0xf4, 0x9a, 0x1a, 0x58, 0x1a, 0x69, 0x05, 0xcf, 0x58, 0xcc, 0x0b, 0xa8, 0xbf,
	0x6d, 0xb6, 0x40, 0x52, 0xc7, 0x15, 0x8a, 0x90, 0xaf, 0x2c, 0x18, 0xa3, 0x0b, 0x18, 0xcf, 0xd9,
	0x58, 0x8e, 0x8b, 0x57, 0x41, 0xd2, 0xc6, 0xef, 0x89, 0xf3, 0x56, 0x6c, 0x2c, 0xd4, 0xf0, 0x74,
	0x28, 0x80, 0x0f, 0x40, 0x59, 0x05, 0xd2, 0x8e, 0x07, 0xad, 0x0b, 0xe0, 0x8a, 0x92, 0xef, 0x7b,
	0x52, 0xc4, 0x0a, 0x9e, 0x49, 0x16, 0x62, 0x40, 0xc9, 0x9d, 0x14, 0x27, 0xe9, 0x29, 0x8e, 0x93,
	0x38, 0x53, 0xd6, 0x15, 0x9c, 0xb7, 0xb8, 0x37, 0xe0, 0xfc, 0xa2, 0x38, 0x7f, 0x8f, 0x71, 0x96,
	0x1b, 0xab, 0x75, 0xbf, 0xcd, 0x1a, 0xd8, 0xe2, 0x5e, 0x6a, 0xfc, 0x1f, 0xe3, 0x34, 0x84, 0xd3,
	0x2a, 0xfe, 0xaa, 0x06, 0x3a, 0x95, 0x7c, 0xa9, 0xb7, 0xf4, 0x12, 0x2e, 0xfe, 0x38, 0xcd, 0xf8,
	0x6f, 0x54, 0x0e, 0x72, 0x78, 0xf6, 0x5e, 0x7c, 0xa4, 0x97, 0xd5, 0x89, 0xae, 0xdd, 0xaf, 0x17,
	0x3e, 0x21, 0xfc, 0x57, 0xfc, 0xef, 0x80, 0xdf, 0x85, 0xad, 0xef, 0xe6, 0x42, 0xd5, 0x98, 0xe8,
	0x94, 0x1b, 0xc7, 0x2c, 0x53, 0xe9, 0xda, 0xa9, 0xbc, 0x71, 0x4e, 0xfd, 0x4e, 0xf4, 0xb6, 0x98,
	0x6f, 0x5f, 0xea, 0x5a, 0x65, 0x9f, 0xd1, 0x50, 0x6e, 0xec, 0x7c, 0xfc, 0xf2, 0x32, 0x7b, 0x59,
	0x5f, 0x22, 0x3e, 0x33, 0xfb, 0xef, 0xc4, 0xa7, 0x1e, 0x88, 0x80, 0x5a, 0x20, 0x88, 0xd8, 0x16,
	0x12, 0xbc, 0xfe, 0x61, 0x25, 0xca, 0x21, 0x28, 0x15, 0x84, 0x27, 0xfd, 0x54, 0xd1, 0x62, 0xe1,
	0x33, 0xc2, 0xb3, 0xf1, 0x1c, 0x86, 0x5a, 0xbb, 0x3e, 0x61, 0xbc, 0x9f, 0x2c, 0x66, 0xe9, 0xc6,
	0xa9, 0xfd, 0x49, 0x8b, 0xf5, 0xe3, 0x5a, 0xbc, 0xa8, 0x93, 0x89, 0x5b, 0x8c, 0x57, 0xac, 0x8a,
	0x16, 0x4b, 0xf9, 0xdd, 0x37, 0x28, 0xb7, 0xf3, 0xa1, 0x98, 0xdb, 0xcd, 0xa2, 0x9b, 0xaf, 0xd0,
	0xde, 0xa1, 0x96, 0xd9, 0x3f, 0xd4, 0x32, 0x47, 0x87, 0x1a, 0x7a, 0x1e, 0x69, 0xe8, 0x75, 0xa4,
	0xa1, 0x77, 0x91, 0x86, 0xf6, 0x22, 0x0d, 0x1d, 0x44, 0x1a, 0xfa, 0x1a, 0x69, 0x99, 0xa3, 0x48,
	0x43, 0x2f, 0x7a, 0x5a, 0x66, 0xb7, 0xa7, 0xa1, 0xbd, 0x9e, 0x96, 0xd9, 0xef, 0x69, 0x99, 0x47,
	0x8f, 0x6d, 0x16, 0x6c, 0xda, 0x46, 0x87, 0xb9, 0x12, 0x38, 0xa7, 0x46, 0x28, 0x88, 0x7a, 0x68,
	0x33, 0xee, 0x95, 0x03, 0xce, 0x3a, 0x4e, 0x0b, 0x78, 0x39, 0x95, 0x49, 0xd0, 0xb4, 0x19, 0x81,
	0xae, 0x4c, 0x6f, 0xba, 0x13, 0x2f, 0xd0, 0xe6, 0x6f, 0xea, 0xea, 0xb9, 0xf0, 0x2d, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0x41, 0x87, 0x6c, 0x80, 0x06, 0x00, 0x00,
}

func (this *RegistrationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegistrationRequest)
	if !ok {
		that2, ok := that.(RegistrationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.XAmznMarketplaceToken != that1.XAmznMarketplaceToken {
		return false
	}
	return true
}
func (this *RegistrationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegistrationResponse)
	if !ok {
		that2, ok := that.(RegistrationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RedirectUrl != that1.RedirectUrl {
		return false
	}
	return true
}
func (this *AWSAccountSignupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSAccountSignupRequest)
	if !ok {
		that2, ok := that.(AWSAccountSignupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CompanyDetails.Equal(that1.CompanyDetails) {
		return false
	}
	if !this.UserDetails.Equal(that1.UserDetails) {
		return false
	}
	if !this.AccountDetails.Equal(that1.AccountDetails) {
		return false
	}
	if !this.CrmDetails.Equal(that1.CrmDetails) {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	return true
}
func (this *AWSAccountSignupResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSAccountSignupResponse)
	if !ok {
		that2, ok := that.(AWSAccountSignupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RegistrationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aws_account.RegistrationRequest{")
	s = append(s, "XAmznMarketplaceToken: "+fmt.Sprintf("%#v", this.XAmznMarketplaceToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegistrationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aws_account.RegistrationResponse{")
	s = append(s, "RedirectUrl: "+fmt.Sprintf("%#v", this.RedirectUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSAccountSignupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aws_account.AWSAccountSignupRequest{")
	if this.CompanyDetails != nil {
		s = append(s, "CompanyDetails: "+fmt.Sprintf("%#v", this.CompanyDetails)+",\n")
	}
	if this.UserDetails != nil {
		s = append(s, "UserDetails: "+fmt.Sprintf("%#v", this.UserDetails)+",\n")
	}
	if this.AccountDetails != nil {
		s = append(s, "AccountDetails: "+fmt.Sprintf("%#v", this.AccountDetails)+",\n")
	}
	if this.CrmDetails != nil {
		s = append(s, "CrmDetails: "+fmt.Sprintf("%#v", this.CrmDetails)+",\n")
	}
	s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSAccountSignupResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aws_account.AWSAccountSignupResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicOnboardCustomeapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OnboardCustomAPIClient is the client API for OnboardCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnboardCustomAPIClient interface {
	// RegisterNewAWSAccount
	//
	// x-displayName: "Register New AWS Account"
	// Use this API to register F5XC AWS marketplace product for F5XC service.
	RegisterNewAWSAccount(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	// SignupAWSAccount
	//
	// x-displayName: "Signup AWS Account"
	// Use this API to signup AWS account for F5XC service.
	SignupAWSAccount(ctx context.Context, in *AWSAccountSignupRequest, opts ...grpc.CallOption) (*AWSAccountSignupResponse, error)
}

type onboardCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewOnboardCustomAPIClient(cc *grpc.ClientConn) OnboardCustomAPIClient {
	return &onboardCustomAPIClient{cc}
}

func (c *onboardCustomAPIClient) RegisterNewAWSAccount(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.marketplace.aws_account.OnboardCustomAPI/RegisterNewAWSAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardCustomAPIClient) SignupAWSAccount(ctx context.Context, in *AWSAccountSignupRequest, opts ...grpc.CallOption) (*AWSAccountSignupResponse, error) {
	out := new(AWSAccountSignupResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.marketplace.aws_account.OnboardCustomAPI/SignupAWSAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnboardCustomAPIServer is the server API for OnboardCustomAPI service.
type OnboardCustomAPIServer interface {
	// RegisterNewAWSAccount
	//
	// x-displayName: "Register New AWS Account"
	// Use this API to register F5XC AWS marketplace product for F5XC service.
	RegisterNewAWSAccount(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	// SignupAWSAccount
	//
	// x-displayName: "Signup AWS Account"
	// Use this API to signup AWS account for F5XC service.
	SignupAWSAccount(context.Context, *AWSAccountSignupRequest) (*AWSAccountSignupResponse, error)
}

// UnimplementedOnboardCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedOnboardCustomAPIServer struct {
}

func (*UnimplementedOnboardCustomAPIServer) RegisterNewAWSAccount(ctx context.Context, req *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewAWSAccount not implemented")
}
func (*UnimplementedOnboardCustomAPIServer) SignupAWSAccount(ctx context.Context, req *AWSAccountSignupRequest) (*AWSAccountSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupAWSAccount not implemented")
}

func RegisterOnboardCustomAPIServer(s *grpc.Server, srv OnboardCustomAPIServer) {
	s.RegisterService(&_OnboardCustomAPI_serviceDesc, srv)
}

func _OnboardCustomAPI_RegisterNewAWSAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardCustomAPIServer).RegisterNewAWSAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.marketplace.aws_account.OnboardCustomAPI/RegisterNewAWSAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardCustomAPIServer).RegisterNewAWSAccount(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnboardCustomAPI_SignupAWSAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AWSAccountSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardCustomAPIServer).SignupAWSAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.marketplace.aws_account.OnboardCustomAPI/SignupAWSAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardCustomAPIServer).SignupAWSAccount(ctx, req.(*AWSAccountSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnboardCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.marketplace.aws_account.OnboardCustomAPI",
	HandlerType: (*OnboardCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewAWSAccount",
			Handler:    _OnboardCustomAPI_RegisterNewAWSAccount_Handler,
		},
		{
			MethodName: "SignupAWSAccount",
			Handler:    _OnboardCustomAPI_SignupAWSAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/marketplace/aws_account/public_onboard_customeapi.proto",
}

func (m *RegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XAmznMarketplaceToken) > 0 {
		i -= len(m.XAmznMarketplaceToken)
		copy(dAtA[i:], m.XAmznMarketplaceToken)
		i = encodeVarintPublicOnboardCustomeapi(dAtA, i, uint64(len(m.XAmznMarketplaceToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedirectUrl) > 0 {
		i -= len(m.RedirectUrl)
		copy(dAtA[i:], m.RedirectUrl)
		i = encodeVarintPublicOnboardCustomeapi(dAtA, i, uint64(len(m.RedirectUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSAccountSignupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSAccountSignupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSAccountSignupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintPublicOnboardCustomeapi(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CrmDetails != nil {
		{
			size, err := m.CrmDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicOnboardCustomeapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AccountDetails != nil {
		{
			size, err := m.AccountDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicOnboardCustomeapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserDetails != nil {
		{
			size, err := m.UserDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicOnboardCustomeapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CompanyDetails != nil {
		{
			size, err := m.CompanyDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicOnboardCustomeapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSAccountSignupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSAccountSignupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSAccountSignupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPublicOnboardCustomeapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicOnboardCustomeapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XAmznMarketplaceToken)
	if l > 0 {
		n += 1 + l + sovPublicOnboardCustomeapi(uint64(l))
	}
	return n
}

func (m *RegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovPublicOnboardCustomeapi(uint64(l))
	}
	return n
}

func (m *AWSAccountSignupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyDetails != nil {
		l = m.CompanyDetails.Size()
		n += 1 + l + sovPublicOnboardCustomeapi(uint64(l))
	}
	if m.UserDetails != nil {
		l = m.UserDetails.Size()
		n += 1 + l + sovPublicOnboardCustomeapi(uint64(l))
	}
	if m.AccountDetails != nil {
		l = m.AccountDetails.Size()
		n += 1 + l + sovPublicOnboardCustomeapi(uint64(l))
	}
	if m.CrmDetails != nil {
		l = m.CrmDetails.Size()
		n += 1 + l + sovPublicOnboardCustomeapi(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovPublicOnboardCustomeapi(uint64(l))
	}
	return n
}

func (m *AWSAccountSignupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPublicOnboardCustomeapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicOnboardCustomeapi(x uint64) (n int) {
	return sovPublicOnboardCustomeapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegistrationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegistrationRequest{`,
		`XAmznMarketplaceToken:` + fmt.Sprintf("%v", this.XAmznMarketplaceToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegistrationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegistrationResponse{`,
		`RedirectUrl:` + fmt.Sprintf("%v", this.RedirectUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSAccountSignupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSAccountSignupRequest{`,
		`CompanyDetails:` + strings.Replace(fmt.Sprintf("%v", this.CompanyDetails), "CompanyMeta", "signup.CompanyMeta", 1) + `,`,
		`UserDetails:` + strings.Replace(fmt.Sprintf("%v", this.UserDetails), "UserMeta", "signup.UserMeta", 1) + `,`,
		`AccountDetails:` + strings.Replace(fmt.Sprintf("%v", this.AccountDetails), "AccountMeta", "signup.AccountMeta", 1) + `,`,
		`CrmDetails:` + strings.Replace(fmt.Sprintf("%v", this.CrmDetails), "CRMInfo", "schema.CRMInfo", 1) + `,`,
		`AccountId:` + fmt.Sprintf("%v", this.AccountId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSAccountSignupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSAccountSignupResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicOnboardCustomeapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicOnboardCustomeapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAmznMarketplaceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAmznMarketplaceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicOnboardCustomeapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicOnboardCustomeapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicOnboardCustomeapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSAccountSignupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicOnboardCustomeapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSAccountSignupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSAccountSignupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompanyDetails == nil {
				m.CompanyDetails = &signup.CompanyMeta{}
			}
			if err := m.CompanyDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDetails == nil {
				m.UserDetails = &signup.UserMeta{}
			}
			if err := m.UserDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountDetails == nil {
				m.AccountDetails = &signup.AccountMeta{}
			}
			if err := m.AccountDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrmDetails == nil {
				m.CrmDetails = &schema.CRMInfo{}
			}
			if err := m.CrmDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicOnboardCustomeapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSAccountSignupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicOnboardCustomeapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSAccountSignupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSAccountSignupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicOnboardCustomeapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicOnboardCustomeapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicOnboardCustomeapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicOnboardCustomeapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicOnboardCustomeapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicOnboardCustomeapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicOnboardCustomeapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicOnboardCustomeapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicOnboardCustomeapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicOnboardCustomeapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicOnboardCustomeapi = fmt.Errorf("proto: unexpected end of group")
)

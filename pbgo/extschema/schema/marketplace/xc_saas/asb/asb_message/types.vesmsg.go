// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package asb_message

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_signup "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/signup"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ASBResponseMessage) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ASBResponseMessage) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ASBResponseMessage) DeepCopy() *ASBResponseMessage {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ASBResponseMessage{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ASBResponseMessage) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ASBResponseMessage) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ASBResponseMessageValidator().Validate(ctx, m, opts...)
}

type ValidateASBResponseMessage struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateASBResponseMessage) DocumentTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ResponseDocumentType)
		return int32(i)
	}
	// ResponseDocumentType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ResponseDocumentType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for document_type")
	}

	return validatorFn, nil
}

func (v *ValidateASBResponseMessage) DocumentVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for document_version")
	}

	return validatorFn, nil
}

func (v *ValidateASBResponseMessage) NotificationTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ServiceOrderType)
		return int32(i)
	}
	// ServiceOrderType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ServiceOrderType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for notification_type")
	}

	return validatorFn, nil
}

func (v *ValidateASBResponseMessage) NotificationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for notification")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ProvisioningNotificationValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateASBResponseMessage) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ASBResponseMessage)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ASBResponseMessage got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["document_type"]; exists {

		vOpts := append(opts, db.WithValidateField("document_type"))
		if err := fv(ctx, m.GetDocumentType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["document_version"]; exists {

		vOpts := append(opts, db.WithValidateField("document_version"))
		if err := fv(ctx, m.GetDocumentVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["notification"]; exists {

		vOpts := append(opts, db.WithValidateField("notification"))
		if err := fv(ctx, m.GetNotification(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["notification_type"]; exists {

		vOpts := append(opts, db.WithValidateField("notification_type"))
		if err := fv(ctx, m.GetNotificationType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultASBResponseMessageValidator = func() *ValidateASBResponseMessage {
	v := &ValidateASBResponseMessage{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDocumentType := v.DocumentTypeValidationRuleHandler
	rulesDocumentType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDocumentType(rulesDocumentType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ASBResponseMessage.document_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["document_type"] = vFn

	vrhDocumentVersion := v.DocumentVersionValidationRuleHandler
	rulesDocumentVersion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDocumentVersion(rulesDocumentVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ASBResponseMessage.document_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["document_version"] = vFn

	vrhNotificationType := v.NotificationTypeValidationRuleHandler
	rulesNotificationType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNotificationType(rulesNotificationType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ASBResponseMessage.notification_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["notification_type"] = vFn

	vrhNotification := v.NotificationValidationRuleHandler
	rulesNotification := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNotification(rulesNotification)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ASBResponseMessage.notification: %s", err)
		panic(errMsg)
	}
	v.FldValidators["notification"] = vFn

	return v
}()

func ASBResponseMessageValidator() db.Validator {
	return DefaultASBResponseMessageValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTenantDRefInfo()

}

func (m *GlobalSpecType) GetTenantDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetTenant()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.tenant[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "tenant.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "tenant",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetTenantDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetTenantDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "tenant.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: tenant")
	}
	for _, ref := range m.GetTenant() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) TenantValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for tenant")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tenant")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tenant")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tenant")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetParsedType().(type) {
	case *GlobalSpecType_None:
		if fv, exists := v.FldValidators["parsed_type.none"]; exists {
			val := m.GetParsedType().(*GlobalSpecType_None).None
			vOpts := append(opts,
				db.WithValidateField("parsed_type"),
				db.WithValidateField("none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RegistrationMessage:
		if fv, exists := v.FldValidators["parsed_type.registration_message"]; exists {
			val := m.GetParsedType().(*GlobalSpecType_RegistrationMessage).RegistrationMessage
			vOpts := append(opts,
				db.WithValidateField("parsed_type"),
				db.WithValidateField("registration_message"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["raw_json"]; exists {

		vOpts := append(opts, db.WithValidateField("raw_json"))
		if err := fv(ctx, m.GetRawJson(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_message"]; exists {

		vOpts := append(opts, db.WithValidateField("response_message"))
		if err := fv(ctx, m.GetResponseMessage(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant"]; exists {
		vOpts := append(opts, db.WithValidateField("tenant"))
		if err := fv(ctx, m.GetTenant(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTenant := v.TenantValidationRuleHandler
	rulesTenant := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhTenant(rulesTenant)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.tenant: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant"] = vFn

	v.FldValidators["parsed_type.registration_message"] = SignupRegistrationMessageValidator().Validate

	v.FldValidators["response_message"] = ASBResponseMessageValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ProvisioningNotification) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProvisioningNotification) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProvisioningNotification) DeepCopy() *ProvisioningNotification {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProvisioningNotification{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProvisioningNotification) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProvisioningNotification) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProvisioningNotificationValidator().Validate(ctx, m, opts...)
}

type ValidateProvisioningNotification struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProvisioningNotification) ServiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ServiceType)
		return int32(i)
	}
	// ServiceType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ServiceType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service")
	}

	return validatorFn, nil
}

func (v *ValidateProvisioningNotification) EntitlementIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for entitlement_id")
	}

	return validatorFn, nil
}

func (v *ValidateProvisioningNotification) TenantIdsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for tenant_ids")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tenant_ids")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tenant_ids")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tenant_ids")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateProvisioningNotification) OrderNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for order_number")
	}

	return validatorFn, nil
}

func (v *ValidateProvisioningNotification) StatusTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ASBTenantStatus)
		return int32(i)
	}
	// ASBTenantStatus_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ASBTenantStatus_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for status_type")
	}

	return validatorFn, nil
}

func (v *ValidateProvisioningNotification) ActivityDateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var (
		reqdValidatorFn db.ValidatorFunc
		err             error
	)

	reqdValidatorFn, err = db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for activity_date")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if reqdValidatorFn != nil {
			if err = reqdValidatorFn(ctx, val, opts...); err != nil {
				return err
			}
		}
		// TODO: lookup configured third-party type validators
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateProvisioningNotification) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProvisioningNotification)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProvisioningNotification got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["activity_date"]; exists {

		vOpts := append(opts, db.WithValidateField("activity_date"))
		if err := fv(ctx, m.GetActivityDate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["entitlement_id"]; exists {

		vOpts := append(opts, db.WithValidateField("entitlement_id"))
		if err := fv(ctx, m.GetEntitlementId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["order_number"]; exists {

		vOpts := append(opts, db.WithValidateField("order_number"))
		if err := fv(ctx, m.GetOrderNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service"]; exists {

		vOpts := append(opts, db.WithValidateField("service"))
		if err := fv(ctx, m.GetService(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status_details"]; exists {

		vOpts := append(opts, db.WithValidateField("status_details"))
		if err := fv(ctx, m.GetStatusDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status_type"]; exists {

		vOpts := append(opts, db.WithValidateField("status_type"))
		if err := fv(ctx, m.GetStatusType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_ids"]; exists {
		vOpts := append(opts, db.WithValidateField("tenant_ids"))
		if err := fv(ctx, m.GetTenantIds(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProvisioningNotificationValidator = func() *ValidateProvisioningNotification {
	v := &ValidateProvisioningNotification{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhService := v.ServiceValidationRuleHandler
	rulesService := map[string]string{
		"ves.io.schema.rules.enum.defined_only": "true",
		"ves.io.schema.rules.message.required":  "true",
	}
	vFn, err = vrhService(rulesService)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProvisioningNotification.service: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service"] = vFn

	vrhEntitlementId := v.EntitlementIdValidationRuleHandler
	rulesEntitlementId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhEntitlementId(rulesEntitlementId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProvisioningNotification.entitlement_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["entitlement_id"] = vFn

	vrhTenantIds := v.TenantIdsValidationRuleHandler
	rulesTenantIds := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.items.string.max_len": "256",
		"ves.io.schema.rules.repeated.items.string.min_len": "1",
		"ves.io.schema.rules.repeated.unique":               "true",
	}
	vFn, err = vrhTenantIds(rulesTenantIds)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProvisioningNotification.tenant_ids: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant_ids"] = vFn

	vrhOrderNumber := v.OrderNumberValidationRuleHandler
	rulesOrderNumber := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhOrderNumber(rulesOrderNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProvisioningNotification.order_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["order_number"] = vFn

	vrhStatusType := v.StatusTypeValidationRuleHandler
	rulesStatusType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhStatusType(rulesStatusType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProvisioningNotification.status_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["status_type"] = vFn

	vrhActivityDate := v.ActivityDateValidationRuleHandler
	rulesActivityDate := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhActivityDate(rulesActivityDate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProvisioningNotification.activity_date: %s", err)
		panic(errMsg)
	}
	v.FldValidators["activity_date"] = vFn

	return v
}()

func ProvisioningNotificationValidator() db.Validator {
	return DefaultProvisioningNotificationValidator
}

// augmented methods on protoc/std generated struct

func (m *SignupRegistrationMessage) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SignupRegistrationMessage) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SignupRegistrationMessage) DeepCopy() *SignupRegistrationMessage {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SignupRegistrationMessage{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SignupRegistrationMessage) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SignupRegistrationMessage) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SignupRegistrationMessageValidator().Validate(ctx, m, opts...)
}

type ValidateSignupRegistrationMessage struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSignupRegistrationMessage) UserDetailsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for user_details")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_signup.UserMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSignupRegistrationMessage) ActionTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ActionType)
		return int32(i)
	}
	// ActionType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ActionType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action_type")
	}

	return validatorFn, nil
}

func (v *ValidateSignupRegistrationMessage) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SignupRegistrationMessage)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SignupRegistrationMessage got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["account_details"]; exists {

		vOpts := append(opts, db.WithValidateField("account_details"))
		if err := fv(ctx, m.GetAccountDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["action_type"]; exists {

		vOpts := append(opts, db.WithValidateField("action_type"))
		if err := fv(ctx, m.GetActionType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["company_details"]; exists {

		vOpts := append(opts, db.WithValidateField("company_details"))
		if err := fv(ctx, m.GetCompanyDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["crm_details"]; exists {

		vOpts := append(opts, db.WithValidateField("crm_details"))
		if err := fv(ctx, m.GetCrmDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["signup_id"]; exists {

		vOpts := append(opts, db.WithValidateField("signup_id"))
		if err := fv(ctx, m.GetSignupId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_id"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_id"))
		if err := fv(ctx, m.GetTenantId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_details"]; exists {

		vOpts := append(opts, db.WithValidateField("user_details"))
		if err := fv(ctx, m.GetUserDetails(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSignupRegistrationMessageValidator = func() *ValidateSignupRegistrationMessage {
	v := &ValidateSignupRegistrationMessage{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUserDetails := v.UserDetailsValidationRuleHandler
	rulesUserDetails := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUserDetails(rulesUserDetails)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SignupRegistrationMessage.user_details: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_details"] = vFn

	vrhActionType := v.ActionTypeValidationRuleHandler
	rulesActionType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhActionType(rulesActionType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SignupRegistrationMessage.action_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action_type"] = vFn

	v.FldValidators["crm_details"] = ves_io_schema.CRMInfoValidator().Validate

	v.FldValidators["company_details"] = ves_io_schema_signup.CompanyMetaValidator().Validate

	v.FldValidators["account_details"] = ves_io_schema_signup.AccountMetaValidator().Validate

	return v
}()

func SignupRegistrationMessageValidator() db.Validator {
	return DefaultSignupRegistrationMessageValidator
}

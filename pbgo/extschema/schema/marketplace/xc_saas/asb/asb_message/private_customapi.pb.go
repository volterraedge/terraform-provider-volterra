// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/marketplace/xc_saas/asb/asb_message/private_customapi.proto

package asb_message

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DocumentType
//
// x-displayName: "Document Type"
// Identifies the type of message document.
type DocumentType int32

const (
	// x-displayName: "TEEM_SERVICE_ORDER"
	// Service order generated by TEEM
	TEEM_SERVICE_ORDER DocumentType = 0
)

var DocumentType_name = map[int32]string{
	0: "TEEM_SERVICE_ORDER",
}

var DocumentType_value = map[string]int32{
	"TEEM_SERVICE_ORDER": 0,
}

func (DocumentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{0}
}

// OrderType
//
// x-displayName: "Order Type"
// Order's buying program type
type OrderType int32

const (
	// x-displayName: "PAID"
	// Order's buying program is a term subscription
	PAID OrderType = 0
	// x-displayName: "FCP"
	// Order's buying program is a flexible consumption program
	FCP OrderType = 1
)

var OrderType_name = map[int32]string{
	0: "PAID",
	1: "FCP",
}

var OrderType_value = map[string]int32{
	"PAID": 0,
	"FCP":  1,
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{1}
}

// RegisterXCSaaSRequest
//
// x-displayName: "XC SaaS Registration Request"
// The XC SaaS registration request holds the data required to register and further process signup for F5XC service.
// If any additional data sent via the azure service bus message(https://docs.f5net.com/pages/viewpage.action?spaceKey=ITCL2PROG&title=Service+Order)
// has a specific use case in the registration/signup flow, it will be considered as a new requirement.
type RegisterXCSaaSRequest struct {
	// DocumentType
	//
	// x-displayName: "Document Type"
	// x-required
	// Identifies the type of message document
	DocumentType DocumentType `protobuf:"varint,1,opt,name=document_type,json=documentType,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.DocumentType" json:"document_type,omitempty"`
	// DocumentVersion
	//
	// x-displayName: "Document Version"
	// The version of the message document format
	DocumentVersion string `protobuf:"bytes,2,opt,name=document_version,json=documentVersion,proto3" json:"document_version,omitempty"`
	// ServiceOrderType
	//
	// x-displayName: "Service Order Type"
	// x-required
	// Type of order
	ServiceOrderType ServiceOrderType `protobuf:"varint,3,opt,name=service_order_type,json=serviceOrderType,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.ServiceOrderType" json:"service_order_type,omitempty"`
	// Order
	//
	// x-displayName: "Order"
	// x-required
	// Information about the specific service order
	Order *Order `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *RegisterXCSaaSRequest) Reset()      { *m = RegisterXCSaaSRequest{} }
func (*RegisterXCSaaSRequest) ProtoMessage() {}
func (*RegisterXCSaaSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{0}
}
func (m *RegisterXCSaaSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterXCSaaSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterXCSaaSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterXCSaaSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterXCSaaSRequest.Merge(m, src)
}
func (m *RegisterXCSaaSRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterXCSaaSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterXCSaaSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterXCSaaSRequest proto.InternalMessageInfo

func (m *RegisterXCSaaSRequest) GetDocumentType() DocumentType {
	if m != nil {
		return m.DocumentType
	}
	return TEEM_SERVICE_ORDER
}

func (m *RegisterXCSaaSRequest) GetDocumentVersion() string {
	if m != nil {
		return m.DocumentVersion
	}
	return ""
}

func (m *RegisterXCSaaSRequest) GetServiceOrderType() ServiceOrderType {
	if m != nil {
		return m.ServiceOrderType
	}
	return PROVISIONING
}

func (m *RegisterXCSaaSRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// Order
//
// x-displayName: "Order"
// Information about the specific service order
type Order struct {
	// Service
	//
	// x-displayName: "Service"
	// x-required
	// Identifies the service that should handle provisioning of the order
	Service ServiceType `protobuf:"varint,1,opt,name=service,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.ServiceType" json:"service,omitempty"`
	// AccountID
	//
	// x-displayName: "AccountID"
	// x-required
	// x-example: "SFA-1478257"
	// The salesforce customer account associated with the service order
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountID,proto3" json:"account_id,omitempty"`
	// SubscriptionID
	//
	// x-displayName: "SubscriptionID"
	// x-required
	// x-example: "A-S00012023"
	// The latest zuora subscriptionID associated with the service that triggered the service order
	SubscriptionId string `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionID,proto3" json:"subscription_id,omitempty"`
	// EntitlementID
	//
	// x-displayName: "EntitlementID"
	// x-required
	// x-example: "e5712007-0560-4fcc-b8c9-f4ffbeaf3e4e"
	// The EntitlementID of the purchased service. The EntitlementID is unique to the AccountID, SubscriptionID.
	// In the case of a subscription renewal, the EntitlementID persists although the SubscriptionID changes.
	EntitlementId string `protobuf:"bytes,4,opt,name=entitlement_id,json=entitlementID,proto3" json:"entitlement_id,omitempty"`
	// ActionType
	//
	// x-displayName: "Action Type"
	// x-required
	// Type of action to perform
	ActionType ActionType `protobuf:"varint,5,opt,name=action_type,json=actionType,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.ActionType" json:"action_type,omitempty"`
	// Order
	//
	// x-displayName: "Order"
	// Order's buying program type
	OrderType OrderType `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.OrderType" json:"order_type,omitempty"`
	// Entitlement
	//
	// x-displayName: "Entitlement"
	// x-required
	// Entitlement to be applied for the basic provisioning model
	Entitlement *Entitlement `protobuf:"bytes,7,opt,name=entitlement,proto3" json:"entitlement,omitempty"`
}

func (m *Order) Reset()      { *m = Order{} }
func (*Order) ProtoMessage() {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{1}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetService() ServiceType {
	if m != nil {
		return m.Service
	}
	return XC
}

func (m *Order) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Order) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *Order) GetEntitlementId() string {
	if m != nil {
		return m.EntitlementId
	}
	return ""
}

func (m *Order) GetActionType() ActionType {
	if m != nil {
		return m.ActionType
	}
	return ENABLE
}

func (m *Order) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return PAID
}

func (m *Order) GetEntitlement() *Entitlement {
	if m != nil {
		return m.Entitlement
	}
	return nil
}

// Entitlement
//
// x-displayName: "Entitlement"
// Entitlement to be applied for the basic provisioning model
type Entitlement struct {
	// CustomerMetadata
	//
	// x-displayName: "Customer Metadata"
	// Customer related entitlement data
	CustomerMetadata *CustomerMetadata `protobuf:"bytes,1,opt,name=customer_metadata,json=customerMetadata,proto3" json:"customer_metadata,omitempty"`
	// EntitlementMetadata
	//
	// x-displayName: "Entitlement Metadata"
	// x-required
	// Entitlement data
	EntitlementMetadata *EntitlementMetadata `protobuf:"bytes,2,opt,name=entitlement_metadata,json=entitlementMetadata,proto3" json:"entitlement_metadata,omitempty"`
	// TenantMetadata
	//
	// x-displayName: "Tenant Metadata"
	// x-required
	// Tenant related entitlement data
	TenantMetadata *TenantMetadata `protobuf:"bytes,3,opt,name=tenant_metadata,json=tenantMetadata,proto3" json:"tenant_metadata,omitempty"`
}

func (m *Entitlement) Reset()      { *m = Entitlement{} }
func (*Entitlement) ProtoMessage() {}
func (*Entitlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{2}
}
func (m *Entitlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entitlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entitlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entitlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entitlement.Merge(m, src)
}
func (m *Entitlement) XXX_Size() int {
	return m.Size()
}
func (m *Entitlement) XXX_DiscardUnknown() {
	xxx_messageInfo_Entitlement.DiscardUnknown(m)
}

var xxx_messageInfo_Entitlement proto.InternalMessageInfo

func (m *Entitlement) GetCustomerMetadata() *CustomerMetadata {
	if m != nil {
		return m.CustomerMetadata
	}
	return nil
}

func (m *Entitlement) GetEntitlementMetadata() *EntitlementMetadata {
	if m != nil {
		return m.EntitlementMetadata
	}
	return nil
}

func (m *Entitlement) GetTenantMetadata() *TenantMetadata {
	if m != nil {
		return m.TenantMetadata
	}
	return nil
}

// CustomerMetadata
//
// x-displayName: "Customer Metadata"
// Customer related entitlement data
type CustomerMetadata struct {
	// Name
	//
	// x-displayName: "Name"
	// Name of the company
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// AddressOne
	//
	// x-displayName: "Address One"
	// Mailing address one of the company
	AddressOne string `protobuf:"bytes,2,opt,name=address_one,json=addressOne,proto3" json:"address_one,omitempty"`
	// AddressTwo
	//
	// x-displayName: "Address Two"
	// Mailing address two of the company
	AddressTwo string `protobuf:"bytes,3,opt,name=address_two,json=addressTwo,proto3" json:"address_two,omitempty"`
	// City
	//
	// x-displayName: "City"
	// City / town of the company
	City string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	// Country
	//
	// x-displayName: "Country"
	// Country of the company
	Country string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	// ZipCode
	//
	// x-displayName: "ZipCode"
	// Zip code of the company
	ZipCode string `protobuf:"bytes,6,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
}

func (m *CustomerMetadata) Reset()      { *m = CustomerMetadata{} }
func (*CustomerMetadata) ProtoMessage() {}
func (*CustomerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{3}
}
func (m *CustomerMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerMetadata.Merge(m, src)
}
func (m *CustomerMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CustomerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerMetadata proto.InternalMessageInfo

func (m *CustomerMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomerMetadata) GetAddressOne() string {
	if m != nil {
		return m.AddressOne
	}
	return ""
}

func (m *CustomerMetadata) GetAddressTwo() string {
	if m != nil {
		return m.AddressTwo
	}
	return ""
}

func (m *CustomerMetadata) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CustomerMetadata) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *CustomerMetadata) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

// EntitlementMetadata
//
// x-displayName: "Entitlement Metadata"
// Entitlement data
type EntitlementMetadata struct {
	// EntitledSKUs
	//
	// x-displayName: "Entitled SKUs"
	// x-required
	// x-example: "['F5-V-O-ALL-BASE-PK-B','F5-XC-O-ALL-BOT-STD-B','F5-V-O-ADN-MSH-API-B','F5-V-O-ADN-MSH-RLM-B']"
	// SKU information that is used mostly for reporting purposes.
	EntitledSkus []string `protobuf:"bytes,1,rep,name=entitled_skus,json=entitledSKUs,proto3" json:"entitled_skus,omitempty"`
}

func (m *EntitlementMetadata) Reset()      { *m = EntitlementMetadata{} }
func (*EntitlementMetadata) ProtoMessage() {}
func (*EntitlementMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{4}
}
func (m *EntitlementMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntitlementMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntitlementMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntitlementMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntitlementMetadata.Merge(m, src)
}
func (m *EntitlementMetadata) XXX_Size() int {
	return m.Size()
}
func (m *EntitlementMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_EntitlementMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_EntitlementMetadata proto.InternalMessageInfo

func (m *EntitlementMetadata) GetEntitledSkus() []string {
	if m != nil {
		return m.EntitledSkus
	}
	return nil
}

// TenantMetadata
//
// x-displayName: "Tenant Metadata"
// Tenant related entitlement data
type TenantMetadata struct {
	// Name
	//
	// x-displayName: "Name"
	// Domain name of the account
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Admins
	//
	// x-displayName: "Admins"
	// x-required
	// Tenant administrator metadata
	Admins []*Admin `protobuf:"bytes,2,rep,name=admins,proto3" json:"admins,omitempty"`
}

func (m *TenantMetadata) Reset()      { *m = TenantMetadata{} }
func (*TenantMetadata) ProtoMessage() {}
func (*TenantMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{5}
}
func (m *TenantMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TenantMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TenantMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantMetadata.Merge(m, src)
}
func (m *TenantMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TenantMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TenantMetadata proto.InternalMessageInfo

func (m *TenantMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TenantMetadata) GetAdmins() []*Admin {
	if m != nil {
		return m.Admins
	}
	return nil
}

// Admin
//
// x-displayName: "Admin"
// Tenant administrator metadata
type Admin struct {
	// FirstName
	//
	// x-displayName: "First Name"
	// x-required
	// Tenant admin first name
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// LastName
	//
	// x-displayName: "Last Name"
	// x-required
	// Tenant admin last name
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// Email
	//
	// x-displayName: "Email"
	// x-required
	// Tenant admin email
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *Admin) Reset()      { *m = Admin{} }
func (*Admin) ProtoMessage() {}
func (*Admin) Descriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{6}
}
func (m *Admin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Admin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Admin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Admin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Admin.Merge(m, src)
}
func (m *Admin) XXX_Size() int {
	return m.Size()
}
func (m *Admin) XXX_DiscardUnknown() {
	xxx_messageInfo_Admin.DiscardUnknown(m)
}

var xxx_messageInfo_Admin proto.InternalMessageInfo

func (m *Admin) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Admin) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Admin) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// RegisterXCSaaSResponse
//
// x-displayName: "XC SaaS Registration Response"
type RegisterXCSaaSResponse struct {
}

func (m *RegisterXCSaaSResponse) Reset()      { *m = RegisterXCSaaSResponse{} }
func (*RegisterXCSaaSResponse) ProtoMessage() {}
func (*RegisterXCSaaSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_499abee3420acb03, []int{7}
}
func (m *RegisterXCSaaSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterXCSaaSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterXCSaaSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterXCSaaSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterXCSaaSResponse.Merge(m, src)
}
func (m *RegisterXCSaaSResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterXCSaaSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterXCSaaSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterXCSaaSResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.DocumentType", DocumentType_name, DocumentType_value)
	golang_proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.DocumentType", DocumentType_name, DocumentType_value)
	proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.OrderType", OrderType_name, OrderType_value)
	golang_proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.OrderType", OrderType_name, OrderType_value)
	proto.RegisterType((*RegisterXCSaaSRequest)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.RegisterXCSaaSRequest")
	golang_proto.RegisterType((*RegisterXCSaaSRequest)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.RegisterXCSaaSRequest")
	proto.RegisterType((*Order)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.Order")
	golang_proto.RegisterType((*Order)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.Order")
	proto.RegisterType((*Entitlement)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.Entitlement")
	golang_proto.RegisterType((*Entitlement)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.Entitlement")
	proto.RegisterType((*CustomerMetadata)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.CustomerMetadata")
	golang_proto.RegisterType((*CustomerMetadata)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.CustomerMetadata")
	proto.RegisterType((*EntitlementMetadata)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.EntitlementMetadata")
	golang_proto.RegisterType((*EntitlementMetadata)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.EntitlementMetadata")
	proto.RegisterType((*TenantMetadata)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.TenantMetadata")
	golang_proto.RegisterType((*TenantMetadata)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.TenantMetadata")
	proto.RegisterType((*Admin)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.Admin")
	golang_proto.RegisterType((*Admin)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.Admin")
	proto.RegisterType((*RegisterXCSaaSResponse)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.RegisterXCSaaSResponse")
	golang_proto.RegisterType((*RegisterXCSaaSResponse)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.RegisterXCSaaSResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/marketplace/xc_saas/asb/asb_message/private_customapi.proto", fileDescriptor_499abee3420acb03)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/marketplace/xc_saas/asb/asb_message/private_customapi.proto", fileDescriptor_499abee3420acb03)
}

var fileDescriptor_499abee3420acb03 = []byte{
	// 1158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x1c, 0xf5, 0xac, 0xed, 0x38, 0x1e, 0xa7, 0xae, 0x3b, 0x2d, 0xd5, 0x2a, 0x94, 0xc5, 0x5a, 0x0a,
	0x4a, 0x53, 0xbc, 0x2b, 0x5a, 0x55, 0xaa, 0x80, 0x52, 0x12, 0xdb, 0x05, 0x0b, 0xb5, 0x8d, 0x36,
	0xa1, 0x42, 0xe1, 0xb0, 0x8c, 0x77, 0x27, 0xee, 0x26, 0xf6, 0xce, 0x32, 0x33, 0x76, 0x92, 0x4a,
	0x48, 0x55, 0xfa, 0x05, 0x10, 0x48, 0x9c, 0xe1, 0xc6, 0x95, 0x23, 0xe4, 0x92, 0x1b, 0x9c, 0x50,
	0x04, 0x97, 0x1e, 0x89, 0x83, 0x10, 0x88, 0x4b, 0x0f, 0x7c, 0x00, 0xb4, 0xb3, 0x6b, 0x67, 0xed,
	0x04, 0x89, 0x18, 0x0e, 0x96, 0xbc, 0xf3, 0xde, 0xbc, 0x37, 0xf3, 0xfb, 0x33, 0x33, 0xb0, 0xd1,
	0x23, 0xdc, 0xf0, 0xa8, 0xc9, 0x9d, 0x87, 0xa4, 0x83, 0xcd, 0x0e, 0x66, 0x1b, 0x44, 0x04, 0x6d,
	0xec, 0x10, 0x73, 0xcb, 0xb1, 0x39, 0xc6, 0xdc, 0xc4, 0xbc, 0x19, 0xfe, 0xec, 0x0e, 0xe1, 0x1c,
	0xb7, 0x88, 0x19, 0x30, 0xaf, 0x87, 0x05, 0xb1, 0x9d, 0x2e, 0x17, 0xb4, 0x83, 0x03, 0xcf, 0x08,
	0x18, 0x15, 0x14, 0xbd, 0x16, 0x49, 0x19, 0x91, 0x94, 0x91, 0x90, 0x32, 0x62, 0x29, 0x03, 0xf3,
	0xa6, 0x91, 0x90, 0x9a, 0xad, 0xb4, 0x3c, 0xf1, 0xb0, 0xdb, 0x34, 0x1c, 0xda, 0x31, 0x5b, 0xb4,
	0x45, 0x4d, 0xa9, 0xd4, 0xec, 0xae, 0xc9, 0x2f, 0xf9, 0x21, 0xff, 0x45, 0x0e, 0xb3, 0x97, 0x5a,
	0x94, 0xb6, 0xda, 0xc4, 0xc4, 0x81, 0x67, 0x62, 0xdf, 0xa7, 0x02, 0x0b, 0x8f, 0xfa, 0x3c, 0x46,
	0x6f, 0x9d, 0x7e, 0x2b, 0x62, 0x3b, 0x20, 0x83, 0xe9, 0xcf, 0x8f, 0x4e, 0xa7, 0x41, 0x52, 0xfb,
	0xd2, 0x28, 0xd8, 0xc3, 0x6d, 0xcf, 0xc5, 0x82, 0xc4, 0xa8, 0x3e, 0x86, 0x12, 0x4e, 0xfc, 0xde,
	0x98, 0x42, 0x79, 0x8c, 0xe3, 0x91, 0x4d, 0x7b, 0x84, 0xa1, 0x3f, 0x49, 0xc3, 0xe7, 0x2c, 0xd2,
	0xf2, 0xb8, 0x20, 0xec, 0x83, 0xea, 0x32, 0xc6, 0xcb, 0x16, 0xf9, 0xb8, 0x4b, 0xb8, 0x40, 0x01,
	0x3c, 0xe3, 0x52, 0xa7, 0xdb, 0x21, 0xbe, 0xb0, 0xc3, 0x25, 0xab, 0xa0, 0x0c, 0xe6, 0x8a, 0xd7,
	0x6e, 0x1b, 0xa7, 0x8e, 0xb8, 0x51, 0x8b, 0x75, 0x56, 0xb6, 0x03, 0xb2, 0x08, 0xbf, 0xfb, 0x63,
	0x2f, 0x9d, 0xdd, 0x01, 0x4a, 0x09, 0x58, 0x33, 0x6e, 0x02, 0x41, 0x57, 0x60, 0x69, 0xe8, 0xd8,
	0x23, 0x8c, 0x7b, 0xd4, 0x57, 0x95, 0x32, 0x98, 0xcb, 0x5b, 0x67, 0x07, 0xe3, 0x0f, 0xa2, 0x61,
	0xf4, 0x09, 0x44, 0x9c, 0xb0, 0x9e, 0xe7, 0x10, 0x9b, 0x32, 0x97, 0xb0, 0x68, 0x85, 0x69, 0xb9,
	0xc2, 0xea, 0x04, 0x2b, 0x5c, 0x8e, 0xc4, 0xee, 0x87, 0x5a, 0xc7, 0x56, 0x59, 0xe2, 0x63, 0x28,
	0xba, 0x07, 0xb3, 0xd2, 0x56, 0xcd, 0x94, 0xc1, 0x5c, 0xe1, 0xda, 0xcd, 0x09, 0x1c, 0xa5, 0x98,
	0x15, 0xc9, 0xe8, 0xdf, 0x64, 0x60, 0x56, 0x0e, 0x20, 0x17, 0xe6, 0x62, 0xb7, 0x38, 0xde, 0x6f,
	0x4d, 0xbe, 0x9b, 0x63, 0x1b, 0x19, 0x48, 0xa3, 0xab, 0x10, 0x62, 0xc7, 0xa1, 0x5d, 0x5f, 0xd8,
	0x9e, 0x1b, 0xc5, 0x78, 0x71, 0x26, 0x24, 0xe6, 0x58, 0xb6, 0x04, 0xd4, 0xc7, 0x8a, 0x95, 0x8f,
	0xf1, 0x46, 0x0d, 0xdd, 0x80, 0x67, 0x79, 0xb7, 0xc9, 0x1d, 0xe6, 0xc9, 0xca, 0x09, 0x67, 0xa4,
	0x4f, 0x98, 0x51, 0x4c, 0x92, 0x1a, 0x35, 0x74, 0x1d, 0x16, 0x89, 0x2f, 0x3c, 0xd1, 0x26, 0x32,
	0xa1, 0x9e, 0x2b, 0x83, 0x35, 0x3e, 0xeb, 0x4c, 0x82, 0xd3, 0xa8, 0xa1, 0x75, 0x58, 0xc0, 0x8e,
	0x74, 0x91, 0x09, 0xcd, 0xca, 0x10, 0xdc, 0x9a, 0x20, 0x04, 0x0b, 0x52, 0xe5, 0x58, 0x04, 0x20,
	0x1e, 0x8e, 0xa3, 0x0f, 0x21, 0x4c, 0xd4, 0xce, 0x94, 0xb4, 0x7a, 0x73, 0xd2, 0x4c, 0x86, 0x8a,
	0x56, 0x9e, 0x0e, 0x2b, 0xe4, 0x23, 0x58, 0x48, 0xec, 0x4c, 0xcd, 0xc9, 0x3a, 0x99, 0x24, 0x97,
	0xf5, 0x23, 0x15, 0x2b, 0x29, 0xa9, 0xff, 0xa6, 0xc0, 0x42, 0x02, 0x44, 0x01, 0x3c, 0x17, 0x1d,
	0x8e, 0x84, 0xd9, 0x1d, 0x22, 0xb0, 0x8b, 0x05, 0x96, 0x35, 0x54, 0x98, 0xa8, 0x23, 0xaa, 0xb1,
	0xd6, 0xdd, 0x58, 0xca, 0x2a, 0x39, 0x63, 0x23, 0x68, 0x1b, 0x5e, 0x48, 0x66, 0x78, 0x68, 0xaa,
	0x48, 0xd3, 0x3b, 0xff, 0x6d, 0xb3, 0x43, 0xdf, 0xf3, 0xe4, 0xf8, 0x20, 0x5a, 0x87, 0x67, 0x05,
	0xf1, 0x71, 0xd2, 0x35, 0x2d, 0x5d, 0x17, 0x26, 0x70, 0x5d, 0x91, 0x4a, 0x43, 0xc3, 0xa2, 0x18,
	0xf9, 0xd6, 0xff, 0x04, 0xb0, 0x34, 0x1e, 0x0d, 0x54, 0x86, 0x19, 0x1f, 0x77, 0xa2, 0x26, 0x1d,
	0xaf, 0x69, 0x89, 0xa0, 0x79, 0x58, 0xc0, 0xae, 0xcb, 0x08, 0xe7, 0x36, 0xf5, 0x49, 0xdc, 0x64,
	0xf9, 0x90, 0x98, 0x61, 0x51, 0x29, 0x46, 0xe8, 0x7d, 0x9f, 0xa0, 0x17, 0x8f, 0xb8, 0x62, 0x93,
	0x46, 0xed, 0x35, 0x24, 0xac, 0x6c, 0x52, 0xf4, 0x02, 0xcc, 0x38, 0x9e, 0xd8, 0x8e, 0x5b, 0x28,
	0xa1, 0x22, 0x87, 0xd1, 0x4b, 0x30, 0x27, 0xbb, 0x95, 0x6d, 0xcb, 0x96, 0x19, 0x61, 0x0c, 0x10,
	0x74, 0x19, 0x4e, 0x3f, 0xf2, 0x02, 0xdb, 0xa1, 0x6e, 0x54, 0xed, 0x09, 0x56, 0xd6, 0xca, 0x3d,
	0xf2, 0x82, 0x2a, 0x75, 0x89, 0x7e, 0x07, 0x9e, 0x3f, 0x21, 0x0b, 0xc8, 0x84, 0x83, 0x4e, 0x75,
	0x6d, 0xbe, 0xd1, 0xe5, 0x2a, 0x28, 0xa7, 0xe7, 0xf2, 0x71, 0x6f, 0x7d, 0x06, 0x94, 0x69, 0x60,
	0xcd, 0x0c, 0x08, 0xcb, 0xef, 0xbd, 0xcf, 0xf5, 0x6f, 0x01, 0x2c, 0x8e, 0x06, 0x16, 0xdd, 0x1e,
	0x89, 0xd9, 0xd5, 0x70, 0xea, 0x2b, 0xec, 0x72, 0x09, 0xa8, 0xe7, 0x56, 0xd3, 0x3d, 0xc2, 0x57,
	0xa7, 0x7b, 0xb4, 0x2d, 0x08, 0x63, 0x78, 0x75, 0xaa, 0x47, 0x78, 0xc5, 0xa3, 0xab, 0x99, 0xb5,
	0x1b, 0x5b, 0xce, 0x97, 0x0a, 0x88, 0x43, 0xba, 0x06, 0xa7, 0xb0, 0xdb, 0xf1, 0x7c, 0xae, 0x2a,
	0xe5, 0xf4, 0x84, 0xe7, 0xee, 0x42, 0x28, 0xb0, 0x78, 0xe1, 0x68, 0xdd, 0x83, 0x7f, 0x2a, 0xb0,
	0x62, 0x75, 0xfd, 0x09, 0x80, 0x59, 0xc9, 0x0b, 0x0f, 0xca, 0x35, 0x8f, 0x71, 0x61, 0xff, 0x63,
	0xb2, 0xf3, 0x12, 0xbf, 0x17, 0x2e, 0xef, 0x0a, 0xcc, 0xb7, 0xf1, 0x80, 0x7b, 0xd2, 0xa1, 0x3a,
	0x1d, 0xc2, 0x92, 0xaa, 0xc3, 0x2c, 0xe9, 0x60, 0xaf, 0x3d, 0x7e, 0x92, 0xa6, 0x43, 0x5a, 0x04,
	0xe9, 0x2a, 0xbc, 0x38, 0x7e, 0x33, 0xf3, 0x80, 0xfa, 0x9c, 0xcc, 0xbf, 0x0a, 0x67, 0x92, 0x57,
	0x2a, 0xba, 0x08, 0xd1, 0x4a, 0xbd, 0x7e, 0xd7, 0x5e, 0xae, 0x5b, 0x0f, 0x1a, 0xd5, 0xba, 0x7d,
	0xdf, 0xaa, 0xd5, 0xad, 0x52, 0x6a, 0x36, 0xb3, 0xb7, 0x0b, 0x52, 0xf3, 0x1a, 0xcc, 0x1f, 0xdd,
	0x5c, 0xd3, 0x30, 0xb3, 0xb4, 0xd0, 0xa8, 0x95, 0x52, 0x28, 0x07, 0xd3, 0x77, 0xaa, 0x4b, 0x25,
	0x70, 0xed, 0x2f, 0x65, 0x50, 0xdf, 0x4b, 0xd1, 0x23, 0x6b, 0x61, 0xa9, 0x81, 0xbe, 0x50, 0x60,
	0x71, 0xd4, 0x1d, 0xbd, 0x3b, 0x41, 0xb4, 0x4f, 0x7c, 0x5a, 0xcc, 0x36, 0xfe, 0x07, 0xa5, 0x28,
	0x14, 0x3a, 0xed, 0x7f, 0xaf, 0xbe, 0x1c, 0x56, 0x49, 0x85, 0x77, 0x83, 0x80, 0x32, 0x51, 0xa1,
	0x01, 0x61, 0xd1, 0x13, 0xad, 0xc2, 0x05, 0xf6, 0x5d, 0xcc, 0xdc, 0x4a, 0x97, 0x13, 0xb6, 0xf3,
	0xf3, 0xaf, 0x9f, 0x2b, 0x6f, 0xeb, 0x6f, 0x98, 0xa7, 0xf6, 0x36, 0x59, 0xec, 0xfd, 0x3a, 0x98,
	0x9f, 0x7d, 0x67, 0x6f, 0x17, 0x64, 0x7e, 0xda, 0x05, 0x37, 0x27, 0xb8, 0x28, 0x9a, 0xeb, 0xc4,
	0x11, 0x3b, 0x3f, 0xaa, 0xe9, 0x3d, 0x05, 0x2c, 0x7e, 0x05, 0xf6, 0x0f, 0xb4, 0xd4, 0xd3, 0x03,
	0x2d, 0xf5, 0xec, 0x40, 0x03, 0x8f, 0xfb, 0x1a, 0xf8, 0xba, 0xaf, 0x81, 0x1f, 0xfa, 0x1a, 0xd8,
	0xef, 0x6b, 0xe0, 0x97, 0xbe, 0x06, 0x7e, 0xef, 0x6b, 0xa9, 0x67, 0x7d, 0x0d, 0x7c, 0x7a, 0xa8,
	0xa5, 0xf6, 0x0e, 0x35, 0xb0, 0x7f, 0xa8, 0xa5, 0x9e, 0x1e, 0x6a, 0xa9, 0xd5, 0x56, 0x8b, 0x06,
	0x1b, 0x2d, 0x63, 0xd0, 0x2e, 0x46, 0x97, 0x9b, 0xf2, 0xcf, 0x1a, 0x65, 0x9d, 0x4a, 0xc0, 0x68,
	0xcf, 0x73, 0x09, 0xab, 0x0c, 0x60, 0x33, 0x68, 0xb6, 0xa8, 0x49, 0xb6, 0x44, 0xfc, 0x0a, 0xfc,
	0xf7, 0x4f, 0xd5, 0xe6, 0x94, 0x7c, 0x24, 0x5e, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x79, 0x7d,
	0x47, 0x9e, 0xb1, 0x0b, 0x00, 0x00,
}

func (x DocumentType) String() string {
	s, ok := DocumentType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OrderType) String() string {
	s, ok := OrderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RegisterXCSaaSRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterXCSaaSRequest)
	if !ok {
		that2, ok := that.(RegisterXCSaaSRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DocumentType != that1.DocumentType {
		return false
	}
	if this.DocumentVersion != that1.DocumentVersion {
		return false
	}
	if this.ServiceOrderType != that1.ServiceOrderType {
		return false
	}
	if !this.Order.Equal(that1.Order) {
		return false
	}
	return true
}
func (this *Order) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Order)
	if !ok {
		that2, ok := that.(Order)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if this.SubscriptionId != that1.SubscriptionId {
		return false
	}
	if this.EntitlementId != that1.EntitlementId {
		return false
	}
	if this.ActionType != that1.ActionType {
		return false
	}
	if this.OrderType != that1.OrderType {
		return false
	}
	if !this.Entitlement.Equal(that1.Entitlement) {
		return false
	}
	return true
}
func (this *Entitlement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Entitlement)
	if !ok {
		that2, ok := that.(Entitlement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomerMetadata.Equal(that1.CustomerMetadata) {
		return false
	}
	if !this.EntitlementMetadata.Equal(that1.EntitlementMetadata) {
		return false
	}
	if !this.TenantMetadata.Equal(that1.TenantMetadata) {
		return false
	}
	return true
}
func (this *CustomerMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomerMetadata)
	if !ok {
		that2, ok := that.(CustomerMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.AddressOne != that1.AddressOne {
		return false
	}
	if this.AddressTwo != that1.AddressTwo {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.ZipCode != that1.ZipCode {
		return false
	}
	return true
}
func (this *EntitlementMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntitlementMetadata)
	if !ok {
		that2, ok := that.(EntitlementMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EntitledSkus) != len(that1.EntitledSkus) {
		return false
	}
	for i := range this.EntitledSkus {
		if this.EntitledSkus[i] != that1.EntitledSkus[i] {
			return false
		}
	}
	return true
}
func (this *TenantMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TenantMetadata)
	if !ok {
		that2, ok := that.(TenantMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Admins) != len(that1.Admins) {
		return false
	}
	for i := range this.Admins {
		if !this.Admins[i].Equal(that1.Admins[i]) {
			return false
		}
	}
	return true
}
func (this *Admin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Admin)
	if !ok {
		that2, ok := that.(Admin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *RegisterXCSaaSResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterXCSaaSResponse)
	if !ok {
		that2, ok := that.(RegisterXCSaaSResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RegisterXCSaaSRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&asb_message.RegisterXCSaaSRequest{")
	s = append(s, "DocumentType: "+fmt.Sprintf("%#v", this.DocumentType)+",\n")
	s = append(s, "DocumentVersion: "+fmt.Sprintf("%#v", this.DocumentVersion)+",\n")
	s = append(s, "ServiceOrderType: "+fmt.Sprintf("%#v", this.ServiceOrderType)+",\n")
	if this.Order != nil {
		s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Order) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&asb_message.Order{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	s = append(s, "SubscriptionId: "+fmt.Sprintf("%#v", this.SubscriptionId)+",\n")
	s = append(s, "EntitlementId: "+fmt.Sprintf("%#v", this.EntitlementId)+",\n")
	s = append(s, "ActionType: "+fmt.Sprintf("%#v", this.ActionType)+",\n")
	s = append(s, "OrderType: "+fmt.Sprintf("%#v", this.OrderType)+",\n")
	if this.Entitlement != nil {
		s = append(s, "Entitlement: "+fmt.Sprintf("%#v", this.Entitlement)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Entitlement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&asb_message.Entitlement{")
	if this.CustomerMetadata != nil {
		s = append(s, "CustomerMetadata: "+fmt.Sprintf("%#v", this.CustomerMetadata)+",\n")
	}
	if this.EntitlementMetadata != nil {
		s = append(s, "EntitlementMetadata: "+fmt.Sprintf("%#v", this.EntitlementMetadata)+",\n")
	}
	if this.TenantMetadata != nil {
		s = append(s, "TenantMetadata: "+fmt.Sprintf("%#v", this.TenantMetadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomerMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&asb_message.CustomerMetadata{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "AddressOne: "+fmt.Sprintf("%#v", this.AddressOne)+",\n")
	s = append(s, "AddressTwo: "+fmt.Sprintf("%#v", this.AddressTwo)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "ZipCode: "+fmt.Sprintf("%#v", this.ZipCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EntitlementMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&asb_message.EntitlementMetadata{")
	s = append(s, "EntitledSkus: "+fmt.Sprintf("%#v", this.EntitledSkus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TenantMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&asb_message.TenantMetadata{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Admins != nil {
		s = append(s, "Admins: "+fmt.Sprintf("%#v", this.Admins)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Admin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&asb_message.Admin{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterXCSaaSResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&asb_message.RegisterXCSaaSResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivateCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomPrivateAPIClient is the client API for CustomPrivateAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomPrivateAPIClient interface {
	// Register XC SaaS
	//
	// x-displayName: "Register XC SaaS"
	// Use this API to register up Azure Service Bus (ASB) provisioning message and further process tenant sign-up for F5XC service.
	RegisterXCSaaS(ctx context.Context, in *RegisterXCSaaSRequest, opts ...grpc.CallOption) (*RegisterXCSaaSResponse, error)
}

type customPrivateAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomPrivateAPIClient(cc *grpc.ClientConn) CustomPrivateAPIClient {
	return &customPrivateAPIClient{cc}
}

func (c *customPrivateAPIClient) RegisterXCSaaS(ctx context.Context, in *RegisterXCSaaSRequest, opts ...grpc.CallOption) (*RegisterXCSaaSResponse, error) {
	out := new(RegisterXCSaaSResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.marketplace.xc_saas.asb.asb_message.CustomPrivateAPI/RegisterXCSaaS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomPrivateAPIServer is the server API for CustomPrivateAPI service.
type CustomPrivateAPIServer interface {
	// Register XC SaaS
	//
	// x-displayName: "Register XC SaaS"
	// Use this API to register up Azure Service Bus (ASB) provisioning message and further process tenant sign-up for F5XC service.
	RegisterXCSaaS(context.Context, *RegisterXCSaaSRequest) (*RegisterXCSaaSResponse, error)
}

// UnimplementedCustomPrivateAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomPrivateAPIServer struct {
}

func (*UnimplementedCustomPrivateAPIServer) RegisterXCSaaS(ctx context.Context, req *RegisterXCSaaSRequest) (*RegisterXCSaaSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterXCSaaS not implemented")
}

func RegisterCustomPrivateAPIServer(s *grpc.Server, srv CustomPrivateAPIServer) {
	s.RegisterService(&_CustomPrivateAPI_serviceDesc, srv)
}

func _CustomPrivateAPI_RegisterXCSaaS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterXCSaaSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).RegisterXCSaaS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.marketplace.xc_saas.asb.asb_message.CustomPrivateAPI/RegisterXCSaaS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).RegisterXCSaaS(ctx, req.(*RegisterXCSaaSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomPrivateAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.marketplace.xc_saas.asb.asb_message.CustomPrivateAPI",
	HandlerType: (*CustomPrivateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterXCSaaS",
			Handler:    _CustomPrivateAPI_RegisterXCSaaS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/marketplace/xc_saas/asb/asb_message/private_customapi.proto",
}

func (m *RegisterXCSaaSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterXCSaaSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterXCSaaSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ServiceOrderType != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.ServiceOrderType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DocumentVersion) > 0 {
		i -= len(m.DocumentVersion)
		copy(dAtA[i:], m.DocumentVersion)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.DocumentVersion)))
		i--
		dAtA[i] = 0x12
	}
	if m.DocumentType != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.DocumentType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entitlement != nil {
		{
			size, err := m.Entitlement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OrderType != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x30
	}
	if m.ActionType != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EntitlementId) > 0 {
		i -= len(m.EntitlementId)
		copy(dAtA[i:], m.EntitlementId)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.EntitlementId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Service != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.Service))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Entitlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entitlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entitlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TenantMetadata != nil {
		{
			size, err := m.TenantMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EntitlementMetadata != nil {
		{
			size, err := m.EntitlementMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CustomerMetadata != nil {
		{
			size, err := m.CustomerMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomerMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomerMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZipCode) > 0 {
		i -= len(m.ZipCode)
		copy(dAtA[i:], m.ZipCode)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.ZipCode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddressTwo) > 0 {
		i -= len(m.AddressTwo)
		copy(dAtA[i:], m.AddressTwo)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.AddressTwo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AddressOne) > 0 {
		i -= len(m.AddressOne)
		copy(dAtA[i:], m.AddressOne)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.AddressOne)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntitlementMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntitlementMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntitlementMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntitledSkus) > 0 {
		for iNdEx := len(m.EntitledSkus) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EntitledSkus[iNdEx])
			copy(dAtA[i:], m.EntitledSkus[iNdEx])
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.EntitledSkus[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TenantMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Admin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Admin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Admin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterXCSaaSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterXCSaaSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterXCSaaSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPrivateCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivateCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterXCSaaSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DocumentType != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.DocumentType))
	}
	l = len(m.DocumentVersion)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.ServiceOrderType != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.ServiceOrderType))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.Service))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.EntitlementId)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.ActionType != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.ActionType))
	}
	if m.OrderType != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.OrderType))
	}
	if m.Entitlement != nil {
		l = m.Entitlement.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *Entitlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomerMetadata != nil {
		l = m.CustomerMetadata.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.EntitlementMetadata != nil {
		l = m.EntitlementMetadata.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.TenantMetadata != nil {
		l = m.TenantMetadata.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *CustomerMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.AddressOne)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.AddressTwo)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.ZipCode)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *EntitlementMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EntitledSkus) > 0 {
		for _, s := range m.EntitledSkus {
			l = len(s)
			n += 1 + l + sovPrivateCustomapi(uint64(l))
		}
	}
	return n
}

func (m *TenantMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovPrivateCustomapi(uint64(l))
		}
	}
	return n
}

func (m *Admin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *RegisterXCSaaSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPrivateCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivateCustomapi(x uint64) (n int) {
	return sovPrivateCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegisterXCSaaSRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterXCSaaSRequest{`,
		`DocumentType:` + fmt.Sprintf("%v", this.DocumentType) + `,`,
		`DocumentVersion:` + fmt.Sprintf("%v", this.DocumentVersion) + `,`,
		`ServiceOrderType:` + fmt.Sprintf("%v", this.ServiceOrderType) + `,`,
		`Order:` + strings.Replace(this.Order.String(), "Order", "Order", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Order) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Order{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`AccountId:` + fmt.Sprintf("%v", this.AccountId) + `,`,
		`SubscriptionId:` + fmt.Sprintf("%v", this.SubscriptionId) + `,`,
		`EntitlementId:` + fmt.Sprintf("%v", this.EntitlementId) + `,`,
		`ActionType:` + fmt.Sprintf("%v", this.ActionType) + `,`,
		`OrderType:` + fmt.Sprintf("%v", this.OrderType) + `,`,
		`Entitlement:` + strings.Replace(this.Entitlement.String(), "Entitlement", "Entitlement", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Entitlement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Entitlement{`,
		`CustomerMetadata:` + strings.Replace(this.CustomerMetadata.String(), "CustomerMetadata", "CustomerMetadata", 1) + `,`,
		`EntitlementMetadata:` + strings.Replace(this.EntitlementMetadata.String(), "EntitlementMetadata", "EntitlementMetadata", 1) + `,`,
		`TenantMetadata:` + strings.Replace(this.TenantMetadata.String(), "TenantMetadata", "TenantMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomerMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomerMetadata{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AddressOne:` + fmt.Sprintf("%v", this.AddressOne) + `,`,
		`AddressTwo:` + fmt.Sprintf("%v", this.AddressTwo) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`ZipCode:` + fmt.Sprintf("%v", this.ZipCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EntitlementMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EntitlementMetadata{`,
		`EntitledSkus:` + fmt.Sprintf("%v", this.EntitledSkus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TenantMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAdmins := "[]*Admin{"
	for _, f := range this.Admins {
		repeatedStringForAdmins += strings.Replace(f.String(), "Admin", "Admin", 1) + ","
	}
	repeatedStringForAdmins += "}"
	s := strings.Join([]string{`&TenantMetadata{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Admins:` + repeatedStringForAdmins + `,`,
		`}`,
	}, "")
	return s
}
func (this *Admin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Admin{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterXCSaaSResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterXCSaaSResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivateCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegisterXCSaaSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterXCSaaSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterXCSaaSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentType", wireType)
			}
			m.DocumentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentType |= DocumentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceOrderType", wireType)
			}
			m.ServiceOrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceOrderType |= ServiceOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			m.Service = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Service |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntitlementId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntitlementId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= OrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entitlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entitlement == nil {
				m.Entitlement = &Entitlement{}
			}
			if err := m.Entitlement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entitlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entitlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entitlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomerMetadata == nil {
				m.CustomerMetadata = &CustomerMetadata{}
			}
			if err := m.CustomerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntitlementMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntitlementMetadata == nil {
				m.EntitlementMetadata = &EntitlementMetadata{}
			}
			if err := m.EntitlementMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantMetadata == nil {
				m.TenantMetadata = &TenantMetadata{}
			}
			if err := m.TenantMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressOne", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressOne = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressTwo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressTwo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntitlementMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntitlementMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntitlementMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntitledSkus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntitledSkus = append(m.EntitledSkus, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, &Admin{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Admin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Admin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Admin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterXCSaaSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterXCSaaSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterXCSaaSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivateCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivateCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivateCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivateCustomapi = fmt.Errorf("proto: unexpected end of group")
)

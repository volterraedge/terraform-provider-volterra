// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/marketplace/xc_saas/asb/asb_message/types.proto

package asb_message

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	signup "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/signup"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ActionType
//
// x-displayName: "Action Type"
// Type of action to perform
type ActionType int32

const (
	// x-displayName: "ENABLE"
	// Provision the requested service for tenant creation
	ENABLE ActionType = 0
	// x-displayName: "RENEWAL"
	// Provision the requested service for tenant renewal
	RENEWAL ActionType = 1
)

var ActionType_name = map[int32]string{
	0: "ENABLE",
	1: "RENEWAL",
}

var ActionType_value = map[string]int32{
	"ENABLE":  0,
	"RENEWAL": 1,
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{0}
}

// ASBTenantStatus
//
// x-displayName: "ASB Tenant Status"
// Tenant status sent to the ASB(return bus)
type ASBTenantStatus int32

const (
	// x-displayName: "COMPLETE"
	// Tenant provisioning has been completed successfully with StateActive tenant state
	COMPLETE ASBTenantStatus = 0
	// x-displayName: "PENDING"
	// The tenant provisioning request has been received and is pending with StateConfiguring/StateCreating/StateUndefined tenant state
	PENDING ASBTenantStatus = 1
	// x-displayName: "ERROR"
	// The tenant provisioning request has failed with the StateCreateFailed/StateConfiguringFailed tenant state
	ERROR ASBTenantStatus = 2
)

var ASBTenantStatus_name = map[int32]string{
	0: "COMPLETE",
	1: "PENDING",
	2: "ERROR",
}

var ASBTenantStatus_value = map[string]int32{
	"COMPLETE": 0,
	"PENDING":  1,
	"ERROR":    2,
}

func (ASBTenantStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{1}
}

// ResponseDocumentType
//
// x-displayName: "Response Document Type"
// Identifies the type of ASB sender message document
type ResponseDocumentType int32

const (
	// x-displayName: "TEEM_SERVICE_NOTIFICATION"
	// Document type for the ASB sender topic setup by TEEM
	TEEM_SERVICE_NOTIFICATION ResponseDocumentType = 0
)

var ResponseDocumentType_name = map[int32]string{
	0: "TEEM_SERVICE_NOTIFICATION",
}

var ResponseDocumentType_value = map[string]int32{
	"TEEM_SERVICE_NOTIFICATION": 0,
}

func (ResponseDocumentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{2}
}

// ServiceType
//
// x-displayName: "Service Type"
// Identifies the service that should handle provisioning of the order
type ServiceType int32

const (
	// x-displayName: "XC"
	// Implies that the provisioning is specific to XC service
	XC ServiceType = 0
)

var ServiceType_name = map[int32]string{
	0: "XC",
}

var ServiceType_value = map[string]int32{
	"XC": 0,
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{3}
}

// ServiceOrderType
//
// x-displayName: "Service Order Type"
// Type of order
type ServiceOrderType int32

const (
	// x-displayName: "PROVISIONING"
	// The order is related to service provisioning or de-provisioning
	PROVISIONING ServiceOrderType = 0
	// x-displayName: "TESTING"
	// Testing service orders triggered for testing purposes
	TESTING ServiceOrderType = 1
)

var ServiceOrderType_name = map[int32]string{
	0: "PROVISIONING",
	1: "TESTING",
}

var ServiceOrderType_value = map[string]int32{
	"PROVISIONING": 0,
	"TESTING":      1,
}

func (ServiceOrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{4}
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of ASB message in the storage backend.
type GlobalSpecType struct {
	// Raw JSON
	//
	// x-displayName: "Raw JSON"
	// x-example: "{"documentType":"teem-service-order","documentVersion":"1.0","serviceOrderType":"provisioning"}"
	// Raw JSON message string that holds metadata and payload related to provisioning
	RawJson *types.Struct `protobuf:"bytes,1,opt,name=raw_json,json=rawJson,proto3" json:"raw_json,omitempty"`
	// Parsed Type
	//
	// x-displayName: "Parsed Type"
	// Parsed type is the parsed message representation as per the use case.
	//
	// Types that are valid to be assigned to ParsedType:
	//	*GlobalSpecType_None
	//	*GlobalSpecType_RegistrationMessage
	ParsedType isGlobalSpecType_ParsedType `protobuf_oneof:"parsed_type"`
	// Tenant Reference
	//
	// x-displayName: "Tenant Reference"
	// Reference to tenant object
	Tenant []*schema.ObjectRefType `protobuf:"bytes,5,rep,name=tenant,proto3" json:"tenant,omitempty"`
	// ResponseMessage
	//
	// x-displayName: "Response Message"
	// The response message sent to the ASB sender topic contains information about the tenant and its provisioning status
	ResponseMessage *ASBResponseMessage `protobuf:"bytes,6,opt,name=response_message,json=responseMessage,proto3" json:"response_message,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ParsedType interface {
	isGlobalSpecType_ParsedType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_None struct {
	None *schema.Empty `protobuf:"bytes,3,opt,name=none,proto3,oneof" json:"none,omitempty"`
}
type GlobalSpecType_RegistrationMessage struct {
	RegistrationMessage *SignupRegistrationMessage `protobuf:"bytes,4,opt,name=registration_message,json=registrationMessage,proto3,oneof" json:"registration_message,omitempty"`
}

func (*GlobalSpecType_None) isGlobalSpecType_ParsedType()                {}
func (*GlobalSpecType_RegistrationMessage) isGlobalSpecType_ParsedType() {}

func (m *GlobalSpecType) GetParsedType() isGlobalSpecType_ParsedType {
	if m != nil {
		return m.ParsedType
	}
	return nil
}

func (m *GlobalSpecType) GetRawJson() *types.Struct {
	if m != nil {
		return m.RawJson
	}
	return nil
}

func (m *GlobalSpecType) GetNone() *schema.Empty {
	if x, ok := m.GetParsedType().(*GlobalSpecType_None); ok {
		return x.None
	}
	return nil
}

func (m *GlobalSpecType) GetRegistrationMessage() *SignupRegistrationMessage {
	if x, ok := m.GetParsedType().(*GlobalSpecType_RegistrationMessage); ok {
		return x.RegistrationMessage
	}
	return nil
}

func (m *GlobalSpecType) GetTenant() []*schema.ObjectRefType {
	if m != nil {
		return m.Tenant
	}
	return nil
}

func (m *GlobalSpecType) GetResponseMessage() *ASBResponseMessage {
	if m != nil {
		return m.ResponseMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_None)(nil),
		(*GlobalSpecType_RegistrationMessage)(nil),
	}
}

// SignupRegistrationMessage
//
// x-displayName: "Signup Registration Message"
// The signup registration message holds customer information and other related provisioning information needed to
// fulfill the tenant registration for further processing in the signup process.
type SignupRegistrationMessage struct {
	// CRM Details
	//
	// x-displayName: "CRM Details"
	// This field holds CRM information
	CrmDetails *schema.CRMInfo `protobuf:"bytes,1,opt,name=crm_details,json=crmDetails,proto3" json:"crm_details,omitempty"`
	// Company Details
	//
	// x-displayName: "Company Details"
	// Details of the company
	CompanyDetails *signup.CompanyMeta `protobuf:"bytes,2,opt,name=company_details,json=companyDetails,proto3" json:"company_details,omitempty"`
	// User Details
	//
	// x-displayName: "User Details"
	// x-required
	// Details of the user
	UserDetails *signup.UserMeta `protobuf:"bytes,3,opt,name=user_details,json=userDetails,proto3" json:"user_details,omitempty"`
	// Account Details
	//
	// x-displayName: "Account Details"
	// Details of the new F5XC account to be created
	AccountDetails *signup.AccountMeta `protobuf:"bytes,4,opt,name=account_details,json=accountDetails,proto3" json:"account_details,omitempty"`
	// Action Type
	//
	// x-displayName: "Action Type"
	// x-required
	// Type of action to perform
	ActionType ActionType `protobuf:"varint,5,opt,name=action_type,json=actionType,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.ActionType" json:"action_type,omitempty"`
	// Tenant ID
	//
	// x-displayName: "Tenant ID"
	// Identifier for the corresponding tenant object
	TenantId string `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // Deprecated: Do not use.
	// Signup ID
	//
	// x-displayName: "Signup ID"
	// Identifier for the corresponding signup object
	SignupId string `protobuf:"bytes,7,opt,name=signup_id,json=signupId,proto3" json:"signup_id,omitempty"`
}

func (m *SignupRegistrationMessage) Reset()      { *m = SignupRegistrationMessage{} }
func (*SignupRegistrationMessage) ProtoMessage() {}
func (*SignupRegistrationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{1}
}
func (m *SignupRegistrationMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupRegistrationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignupRegistrationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupRegistrationMessage.Merge(m, src)
}
func (m *SignupRegistrationMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignupRegistrationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupRegistrationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignupRegistrationMessage proto.InternalMessageInfo

func (m *SignupRegistrationMessage) GetCrmDetails() *schema.CRMInfo {
	if m != nil {
		return m.CrmDetails
	}
	return nil
}

func (m *SignupRegistrationMessage) GetCompanyDetails() *signup.CompanyMeta {
	if m != nil {
		return m.CompanyDetails
	}
	return nil
}

func (m *SignupRegistrationMessage) GetUserDetails() *signup.UserMeta {
	if m != nil {
		return m.UserDetails
	}
	return nil
}

func (m *SignupRegistrationMessage) GetAccountDetails() *signup.AccountMeta {
	if m != nil {
		return m.AccountDetails
	}
	return nil
}

func (m *SignupRegistrationMessage) GetActionType() ActionType {
	if m != nil {
		return m.ActionType
	}
	return ENABLE
}

// Deprecated: Do not use.
func (m *SignupRegistrationMessage) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *SignupRegistrationMessage) GetSignupId() string {
	if m != nil {
		return m.SignupId
	}
	return ""
}

// ASBResponseMessage
//
// x-displayName: "ASB Response Message"
//
// The response message sent to the ASB sender topic contains information about the tenant and its provisioning status
type ASBResponseMessage struct {
	// DocumentType
	//
	// x-displayName: "Document Type"
	// x-required
	// Identifies the type of response document
	DocumentType ResponseDocumentType `protobuf:"varint,1,opt,name=document_type,json=documentType,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.ResponseDocumentType" json:"document_type,omitempty"`
	// DocumentVersion
	//
	// x-displayName: "Document Version"
	// x-required
	// The version of the message document format
	DocumentVersion string `protobuf:"bytes,2,opt,name=document_version,json=documentVersion,proto3" json:"document_version,omitempty"`
	// NotificationType
	//
	// x-displayName: "Notification Type"
	// x-required
	// Type of notification
	NotificationType ServiceOrderType `protobuf:"varint,3,opt,name=notification_type,json=notificationType,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.ServiceOrderType" json:"notification_type,omitempty"`
	// Notification
	//
	// x-displayName: "Notification"
	// x-required
	// Information about the specific notification sent
	Notification *ProvisioningNotification `protobuf:"bytes,4,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (m *ASBResponseMessage) Reset()      { *m = ASBResponseMessage{} }
func (*ASBResponseMessage) ProtoMessage() {}
func (*ASBResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{2}
}
func (m *ASBResponseMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ASBResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ASBResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ASBResponseMessage.Merge(m, src)
}
func (m *ASBResponseMessage) XXX_Size() int {
	return m.Size()
}
func (m *ASBResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ASBResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ASBResponseMessage proto.InternalMessageInfo

func (m *ASBResponseMessage) GetDocumentType() ResponseDocumentType {
	if m != nil {
		return m.DocumentType
	}
	return TEEM_SERVICE_NOTIFICATION
}

func (m *ASBResponseMessage) GetDocumentVersion() string {
	if m != nil {
		return m.DocumentVersion
	}
	return ""
}

func (m *ASBResponseMessage) GetNotificationType() ServiceOrderType {
	if m != nil {
		return m.NotificationType
	}
	return PROVISIONING
}

func (m *ASBResponseMessage) GetNotification() *ProvisioningNotification {
	if m != nil {
		return m.Notification
	}
	return nil
}

// ProvisioningNotification
//
// x-displayName: "Provisioning Notification"
//
// Information about the provisioning notification sent
type ProvisioningNotification struct {
	// Service
	//
	// x-displayName: "Service"
	// x-required
	// Identifies the service that provisioned the order
	Service ServiceType `protobuf:"varint,1,opt,name=service,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.ServiceType" json:"service,omitempty"`
	// EntitlementID
	//
	// x-displayName: "EntitlementID"
	// x-required
	// x-example: "e5712007-0560-4fcc-b8c9-f4ffbeaf3e4e"
	// The entitlement identifier of the purchased service
	EntitlementId string `protobuf:"bytes,2,opt,name=entitlement_id,json=entitlementID,proto3" json:"entitlement_id,omitempty"`
	// TenantIDs
	//
	// x-displayName: "TenantIDs"
	// x-required
	// List of tenant IDs provisioned
	TenantIds []string `protobuf:"bytes,3,rep,name=tenant_ids,json=tenantIds,proto3" json:"tenant_ids,omitempty"`
	// OrderNumber
	//
	// x-displayName: "Order Number"
	// x-required
	// x-example: "O-00040342"
	// The salesforce order number that triggered the service order
	OrderNumber string `protobuf:"bytes,4,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	// Status Type
	// x-displayName: "Status Type"
	//
	// x-required
	// Provisioning status sent to the ASB(return bus)
	StatusType ASBTenantStatus `protobuf:"varint,5,opt,name=status_type,json=statusType,proto3,enum=ves.io.schema.marketplace.xc_saas.asb.asb_message.ASBTenantStatus" json:"status_type,omitempty"`
	// StatusDetails
	//
	// x-displayName: "Status Details"
	// Provisioning status details sent to the ASB(return bus)
	StatusDetails string `protobuf:"bytes,6,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	// ActivityDate
	//
	// x-displayName: "Activity Date"
	// x-required
	// Date of the provisioning action
	ActivityDate *types.Timestamp `protobuf:"bytes,7,opt,name=activity_date,json=activityDate,proto3" json:"activity_date,omitempty"`
}

func (m *ProvisioningNotification) Reset()      { *m = ProvisioningNotification{} }
func (*ProvisioningNotification) ProtoMessage() {}
func (*ProvisioningNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_3625ba0fa6182815, []int{3}
}
func (m *ProvisioningNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvisioningNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProvisioningNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisioningNotification.Merge(m, src)
}
func (m *ProvisioningNotification) XXX_Size() int {
	return m.Size()
}
func (m *ProvisioningNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisioningNotification.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisioningNotification proto.InternalMessageInfo

func (m *ProvisioningNotification) GetService() ServiceType {
	if m != nil {
		return m.Service
	}
	return XC
}

func (m *ProvisioningNotification) GetEntitlementId() string {
	if m != nil {
		return m.EntitlementId
	}
	return ""
}

func (m *ProvisioningNotification) GetTenantIds() []string {
	if m != nil {
		return m.TenantIds
	}
	return nil
}

func (m *ProvisioningNotification) GetOrderNumber() string {
	if m != nil {
		return m.OrderNumber
	}
	return ""
}

func (m *ProvisioningNotification) GetStatusType() ASBTenantStatus {
	if m != nil {
		return m.StatusType
	}
	return COMPLETE
}

func (m *ProvisioningNotification) GetStatusDetails() string {
	if m != nil {
		return m.StatusDetails
	}
	return ""
}

func (m *ProvisioningNotification) GetActivityDate() *types.Timestamp {
	if m != nil {
		return m.ActivityDate
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ActionType", ActionType_name, ActionType_value)
	golang_proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ActionType", ActionType_name, ActionType_value)
	proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ASBTenantStatus", ASBTenantStatus_name, ASBTenantStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ASBTenantStatus", ASBTenantStatus_name, ASBTenantStatus_value)
	proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ResponseDocumentType", ResponseDocumentType_name, ResponseDocumentType_value)
	golang_proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ResponseDocumentType", ResponseDocumentType_name, ResponseDocumentType_value)
	proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ServiceType", ServiceType_name, ServiceType_value)
	golang_proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ServiceOrderType", ServiceOrderType_name, ServiceOrderType_value)
	golang_proto.RegisterEnum("ves.io.schema.marketplace.xc_saas.asb.asb_message.ServiceOrderType", ServiceOrderType_name, ServiceOrderType_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.GlobalSpecType")
	proto.RegisterType((*SignupRegistrationMessage)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.SignupRegistrationMessage")
	golang_proto.RegisterType((*SignupRegistrationMessage)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.SignupRegistrationMessage")
	proto.RegisterType((*ASBResponseMessage)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.ASBResponseMessage")
	golang_proto.RegisterType((*ASBResponseMessage)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.ASBResponseMessage")
	proto.RegisterType((*ProvisioningNotification)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.ProvisioningNotification")
	golang_proto.RegisterType((*ProvisioningNotification)(nil), "ves.io.schema.marketplace.xc_saas.asb.asb_message.ProvisioningNotification")
}

func init() {
	proto.RegisterFile("ves.io/schema/marketplace/xc_saas/asb/asb_message/types.proto", fileDescriptor_3625ba0fa6182815)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/marketplace/xc_saas/asb/asb_message/types.proto", fileDescriptor_3625ba0fa6182815)
}

var fileDescriptor_3625ba0fa6182815 = []byte{
	// 1195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xd8, 0xf9, 0xe7, 0x67, 0x27, 0x59, 0xa6, 0x15, 0x75, 0xd3, 0xb2, 0x0d, 0x41, 0x88,
	0x10, 0xd4, 0xb5, 0x48, 0x0f, 0x3d, 0xa0, 0x82, 0x62, 0x67, 0xdb, 0xba, 0x24, 0x76, 0x34, 0x36,
	0x05, 0x71, 0xc0, 0x1a, 0xaf, 0x27, 0xdb, 0x6d, 0xbd, 0x3b, 0xab, 0x99, 0xb1, 0x5b, 0x1f, 0x90,
	0x0a, 0x9f, 0xa0, 0xea, 0x77, 0x40, 0x42, 0x7c, 0x04, 0x7a, 0xc9, 0x91, 0x0b, 0x52, 0x8e, 0x3d,
	0x52, 0xe7, 0x02, 0xb7, 0xde, 0xb9, 0xa0, 0x9d, 0xdd, 0x75, 0x6d, 0xb7, 0x45, 0xe0, 0x83, 0xa5,
	0xdd, 0xf7, 0xde, 0xef, 0xf7, 0x7e, 0x6f, 0xde, 0x7b, 0xb3, 0x86, 0x1b, 0x03, 0x26, 0x2d, 0x8f,
	0x97, 0xa5, 0x73, 0x8f, 0xf9, 0xb4, 0xec, 0x53, 0xf1, 0x80, 0xa9, 0xb0, 0x47, 0x1d, 0x56, 0x7e,
	0xe4, 0xb4, 0x25, 0xa5, 0xb2, 0x4c, 0x65, 0x27, 0xfa, 0xb5, 0x7d, 0x26, 0x25, 0x75, 0x59, 0x59,
	0x0d, 0x43, 0x26, 0xad, 0x50, 0x70, 0xc5, 0xf1, 0xa7, 0x31, 0xdc, 0x8a, 0xe1, 0xd6, 0x04, 0xdc,
	0x4a, 0xe0, 0x16, 0x95, 0x1d, 0x6b, 0x02, 0xbe, 0x71, 0xd5, 0xf5, 0xd4, 0xbd, 0x7e, 0xc7, 0x72,
	0xb8, 0x5f, 0x76, 0xb9, 0xcb, 0xcb, 0x9a, 0xa9, 0xd3, 0x3f, 0xd6, 0x6f, 0xfa, 0x45, 0x3f, 0xc5,
	0x19, 0x36, 0x2e, 0xba, 0x9c, 0xbb, 0x3d, 0xf6, 0x2a, 0x8a, 0x06, 0xc3, 0xc4, 0x75, 0x79, 0xd6,
	0x25, 0x95, 0xe8, 0x3b, 0x2a, 0xf1, 0x5e, 0x99, 0xf5, 0x2a, 0xcf, 0x67, 0x52, 0x51, 0x3f, 0x4c,
	0x02, 0x2e, 0x4d, 0x97, 0xce, 0x43, 0xe5, 0xf1, 0x20, 0x29, 0x6c, 0xe3, 0x83, 0x69, 0xa7, 0xf4,
	0xdc, 0xa0, 0x1f, 0xc6, 0xa5, 0xb7, 0x07, 0xbb, 0xa9, 0xb6, 0xe9, 0xa0, 0x89, 0x83, 0xd9, 0xb8,
	0x3c, 0xed, 0x1a, 0xd0, 0x9e, 0xd7, 0xa5, 0x8a, 0x25, 0xde, 0xcd, 0x19, 0xaf, 0xc7, 0x1e, 0xb6,
	0xa7, 0xf2, 0x6f, 0x9d, 0xe6, 0x60, 0xed, 0x56, 0x8f, 0x77, 0x68, 0xaf, 0x19, 0x32, 0xa7, 0x35,
	0x0c, 0x19, 0xde, 0x85, 0x15, 0x41, 0x1f, 0xb6, 0xef, 0x4b, 0x1e, 0x94, 0xd0, 0x26, 0xda, 0x2e,
	0xec, 0x5e, 0xb0, 0xe2, 0x1a, 0xad, 0xb4, 0x46, 0xab, 0xa9, 0x4f, 0x80, 0x2c, 0x0b, 0xfa, 0xf0,
	0x8e, 0xe4, 0x01, 0xde, 0x81, 0x85, 0x80, 0x07, 0xac, 0x94, 0xd3, 0xf1, 0xe7, 0xad, 0xe9, 0x76,
	0xd9, 0x7e, 0xa8, 0x86, 0xb7, 0x33, 0x44, 0xc7, 0xe0, 0x1f, 0x10, 0x9c, 0x17, 0xcc, 0xf5, 0xa4,
	0x12, 0x34, 0x92, 0x92, 0x76, 0xac, 0xb4, 0xa0, 0xc1, 0x07, 0xd6, 0xff, 0xee, 0xb5, 0xd5, 0xd4,
	0xc7, 0x46, 0x26, 0x48, 0x0f, 0x63, 0xcf, 0xed, 0x0c, 0x39, 0x27, 0x5e, 0x37, 0xe3, 0x1a, 0x2c,
	0x29, 0x16, 0xd0, 0x40, 0x95, 0x16, 0x37, 0x73, 0xdb, 0x85, 0xdd, 0xcb, 0x33, 0x49, 0x1b, 0x9d,
	0xfb, 0xcc, 0x51, 0x84, 0x1d, 0x47, 0x27, 0x52, 0x39, 0xf7, 0xcb, 0xf7, 0x49, 0xf8, 0xaf, 0x7f,
	0x9d, 0xe4, 0x16, 0x9f, 0xa2, 0xac, 0x81, 0x48, 0x62, 0xc1, 0x21, 0x18, 0x82, 0xc9, 0x90, 0x07,
	0x92, 0x8d, 0x2b, 0x59, 0xd2, 0x95, 0xd8, 0x73, 0x54, 0xb2, 0xd7, 0xac, 0x90, 0x84, 0x2d, 0xd1,
	0x4a, 0xd6, 0xc5, 0xb4, 0xa1, 0x72, 0x01, 0x0a, 0x21, 0x15, 0x92, 0x75, 0xdb, 0xd1, 0x24, 0xe0,
	0x95, 0x93, 0x67, 0x28, 0x77, 0xfa, 0x0c, 0x65, 0xef, 0x2c, 0xac, 0x64, 0x8d, 0xdc, 0xd6, 0xef,
	0x39, 0xb8, 0xf8, 0xd6, 0x03, 0xc1, 0xd7, 0xa1, 0xe0, 0x08, 0xbf, 0xdd, 0x65, 0x8a, 0x7a, 0x3d,
	0x99, 0x34, 0xf8, 0xdd, 0x19, 0xa5, 0x55, 0x72, 0x58, 0x0b, 0x8e, 0x39, 0x01, 0x47, 0xf8, 0xfb,
	0x71, 0x24, 0xbe, 0x03, 0xeb, 0x0e, 0xf7, 0x43, 0x1a, 0x0c, 0xc7, 0xe0, 0xac, 0x06, 0xbf, 0x3f,
	0x03, 0x8e, 0x67, 0xd8, 0xaa, 0xc6, 0xc1, 0x87, 0x4c, 0x51, 0xb2, 0x96, 0x20, 0x53, 0xae, 0x3d,
	0x28, 0xf6, 0x25, 0x13, 0x63, 0xa2, 0x78, 0x6c, 0xcc, 0x37, 0x13, 0x7d, 0x25, 0x99, 0xd0, 0x2c,
	0x85, 0x08, 0x33, 0x21, 0x87, 0x3a, 0x0e, 0xef, 0x07, 0x6a, 0xcc, 0xb2, 0xf0, 0x6f, 0x72, 0xf6,
	0xe2, 0xe0, 0x58, 0x4e, 0x82, 0x4c, 0xb9, 0xbe, 0x83, 0x02, 0x75, 0xf4, 0x28, 0x46, 0x07, 0x5a,
	0x5a, 0xdc, 0x44, 0xdb, 0x6b, 0xbb, 0x37, 0xe6, 0xe9, 0x9e, 0x66, 0x89, 0x66, 0x86, 0x00, 0x1d,
	0x3f, 0xe3, 0x2b, 0x90, 0x8f, 0x87, 0xa5, 0xed, 0x75, 0xf5, 0x6c, 0xe4, 0x2b, 0xd9, 0x12, 0x22,
	0x2b, 0xb1, 0xb1, 0xd6, 0xc5, 0x97, 0x20, 0x1f, 0xcb, 0x8c, 0x02, 0x96, 0xa3, 0x00, 0xb2, 0x12,
	0x1b, 0x6a, 0xdd, 0xad, 0x27, 0x39, 0xc0, 0xaf, 0x8f, 0x05, 0xee, 0xc1, 0x6a, 0x97, 0x3b, 0x7d,
	0x9f, 0x05, 0x2a, 0x96, 0x8d, 0xb4, 0xec, 0x5b, 0x73, 0xc8, 0x4e, 0xa9, 0xf7, 0x13, 0x3e, 0x5d,
	0x40, 0xb1, 0x3b, 0xf1, 0x86, 0x3f, 0x06, 0x63, 0x9c, 0x6d, 0xc0, 0x84, 0xf4, 0x78, 0xa0, 0xdb,
	0x9f, 0x27, 0xeb, 0xa9, 0xfd, 0x6e, 0x6c, 0xc6, 0x21, 0xbc, 0x13, 0x70, 0xe5, 0x1d, 0x7b, 0x0e,
	0x7d, 0x75, 0xa6, 0x39, 0x2d, 0xae, 0x3a, 0xcf, 0x6e, 0x33, 0x31, 0xf0, 0x1c, 0xd6, 0x10, 0x5d,
	0x26, 0xb4, 0x30, 0x63, 0x92, 0x5d, 0x8b, 0xe3, 0x50, 0x9c, 0xb4, 0x25, 0x83, 0xf0, 0xe5, 0x1c,
	0xc9, 0x8e, 0x04, 0x1f, 0x78, 0x51, 0x15, 0x5e, 0xe0, 0xd6, 0x27, 0x28, 0xc9, 0x54, 0x82, 0xad,
	0xbf, 0x73, 0x50, 0x7a, 0x5b, 0x28, 0xee, 0xc2, 0xb2, 0x8c, 0x35, 0x27, 0x2d, 0xf9, 0x7c, 0xfe,
	0xaa, 0xf5, 0xf5, 0x03, 0xfa, 0xd6, 0xf9, 0x51, 0xdf, 0x3a, 0x29, 0x35, 0xbe, 0x06, 0x6b, 0x2c,
	0x50, 0x9e, 0xea, 0x31, 0xdd, 0x13, 0xaf, 0x1b, 0xb7, 0xa3, 0x52, 0x8c, 0x82, 0x97, 0xc5, 0xa2,
	0x81, 0x4a, 0x8f, 0xb3, 0x64, 0x75, 0x22, 0xa6, 0xb6, 0x8f, 0x6f, 0x02, 0x8c, 0x07, 0x31, 0xda,
	0xba, 0xdc, 0x76, 0xbe, 0xf2, 0x51, 0x04, 0x80, 0xa7, 0x68, 0x79, 0x6b, 0x51, 0xe4, 0x4a, 0x8f,
	0xb3, 0xd1, 0x6b, 0xfe, 0x29, 0x5a, 0xda, 0x5a, 0x10, 0x59, 0x03, 0xa5, 0x17, 0x5e, 0x09, 0x91,
	0x7c, 0x3a, 0xae, 0x12, 0x97, 0xa1, 0xc8, 0xa3, 0x7e, 0xb4, 0x83, 0xbe, 0xdf, 0x61, 0x42, 0x1f,
	0xf8, 0x6c, 0xea, 0x82, 0x8e, 0xa8, 0xeb, 0x00, 0xec, 0x40, 0x41, 0x2a, 0xaa, 0xfa, 0x72, 0x72,
	0xc3, 0x2a, 0xf3, 0xdd, 0x8f, 0x2d, 0x2d, 0xa3, 0xa9, 0xe9, 0x08, 0xc4, 0xb4, 0x7a, 0x0c, 0x3e,
	0x84, 0xb5, 0x24, 0x49, 0x7a, 0x23, 0xe8, 0x5d, 0x23, 0xab, 0xb1, 0x35, 0xdd, 0xf6, 0x2f, 0x60,
	0x35, 0xda, 0xcd, 0x81, 0xa7, 0x86, 0xed, 0xe8, 0x5b, 0xa9, 0x17, 0xae, 0xb0, 0xbb, 0xf1, 0xda,
	0x47, 0xae, 0x95, 0x7e, 0xc8, 0x49, 0x31, 0x05, 0xec, 0x53, 0xc5, 0x76, 0x3e, 0x01, 0x78, 0xb5,
	0xe8, 0x18, 0x60, 0xc9, 0xae, 0xef, 0x55, 0x0e, 0x6c, 0x23, 0x83, 0x0b, 0xb0, 0x4c, 0xec, 0xba,
	0xfd, 0xf5, 0xde, 0x81, 0x81, 0x36, 0x16, 0x4e, 0x9e, 0xa1, 0xcc, 0xce, 0x75, 0x58, 0x9f, 0xd1,
	0x8c, 0x8b, 0xb0, 0x52, 0x6d, 0x1c, 0x1e, 0x1d, 0xd8, 0xad, 0x04, 0x73, 0x64, 0xd7, 0xf7, 0x6b,
	0xf5, 0x5b, 0x06, 0xc2, 0x79, 0x58, 0xb4, 0x09, 0x69, 0x10, 0x23, 0xbb, 0xf3, 0x19, 0x9c, 0x7f,
	0xd3, 0x5e, 0xe2, 0xf7, 0xe0, 0x62, 0xcb, 0xb6, 0x0f, 0xdb, 0x4d, 0x9b, 0xdc, 0xad, 0x55, 0xed,
	0x76, 0xbd, 0xd1, 0xaa, 0xdd, 0xac, 0x55, 0xf7, 0x5a, 0xb5, 0x46, 0xdd, 0xc8, 0x24, 0x59, 0x2f,
	0x41, 0x61, 0x62, 0x82, 0xf0, 0x12, 0x64, 0xbf, 0xa9, 0x8e, 0x9d, 0xd7, 0xc1, 0x98, 0x5d, 0x2a,
	0x6c, 0x40, 0xf1, 0x88, 0x34, 0xee, 0xd6, 0x9a, 0xb5, 0x46, 0x3d, 0x92, 0xa2, 0x75, 0xb5, 0xec,
	0x66, 0x4b, 0xeb, 0x8a, 0x81, 0x95, 0x9f, 0xd0, 0xe9, 0x0b, 0x33, 0xf3, 0xfc, 0x85, 0x99, 0x79,
	0xf9, 0xc2, 0x44, 0x8f, 0x47, 0x26, 0xfa, 0x79, 0x64, 0xa2, 0xdf, 0x46, 0x26, 0x3a, 0x1d, 0x99,
	0xe8, 0xf9, 0xc8, 0x44, 0x7f, 0x8c, 0x4c, 0xf4, 0xe7, 0xc8, 0xcc, 0xbc, 0x1c, 0x99, 0xe8, 0xc9,
	0x99, 0x99, 0x39, 0x39, 0x33, 0xd1, 0xe9, 0x99, 0x99, 0x79, 0x7e, 0x66, 0x66, 0xbe, 0x75, 0x5d,
	0x1e, 0x3e, 0x70, 0xad, 0x01, 0xef, 0x29, 0x26, 0x04, 0xb5, 0xfa, 0xb2, 0xac, 0x1f, 0x8e, 0xb9,
	0xf0, 0xaf, 0x86, 0xd1, 0x3a, 0x75, 0x99, 0xb8, 0x9a, 0xba, 0xcb, 0x61, 0xc7, 0xe5, 0x65, 0xf6,
	0x48, 0xa5, 0x7f, 0x8d, 0xfe, 0xf3, 0x3f, 0xc7, 0xce, 0x92, 0x6e, 0xe1, 0xb5, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x8f, 0xe1, 0xe0, 0xc3, 0x75, 0x0a, 0x00, 0x00,
}

func (x ActionType) String() string {
	s, ok := ActionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ASBTenantStatus) String() string {
	s, ok := ASBTenantStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ResponseDocumentType) String() string {
	s, ok := ResponseDocumentType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ServiceType) String() string {
	s, ok := ServiceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ServiceOrderType) String() string {
	s, ok := ServiceOrderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RawJson.Equal(that1.RawJson) {
		return false
	}
	if that1.ParsedType == nil {
		if this.ParsedType != nil {
			return false
		}
	} else if this.ParsedType == nil {
		return false
	} else if !this.ParsedType.Equal(that1.ParsedType) {
		return false
	}
	if len(this.Tenant) != len(that1.Tenant) {
		return false
	}
	for i := range this.Tenant {
		if !this.Tenant[i].Equal(that1.Tenant[i]) {
			return false
		}
	}
	if !this.ResponseMessage.Equal(that1.ResponseMessage) {
		return false
	}
	return true
}
func (this *GlobalSpecType_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_None)
	if !ok {
		that2, ok := that.(GlobalSpecType_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RegistrationMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RegistrationMessage)
	if !ok {
		that2, ok := that.(GlobalSpecType_RegistrationMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegistrationMessage.Equal(that1.RegistrationMessage) {
		return false
	}
	return true
}
func (this *SignupRegistrationMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupRegistrationMessage)
	if !ok {
		that2, ok := that.(SignupRegistrationMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CrmDetails.Equal(that1.CrmDetails) {
		return false
	}
	if !this.CompanyDetails.Equal(that1.CompanyDetails) {
		return false
	}
	if !this.UserDetails.Equal(that1.UserDetails) {
		return false
	}
	if !this.AccountDetails.Equal(that1.AccountDetails) {
		return false
	}
	if this.ActionType != that1.ActionType {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.SignupId != that1.SignupId {
		return false
	}
	return true
}
func (this *ASBResponseMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ASBResponseMessage)
	if !ok {
		that2, ok := that.(ASBResponseMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DocumentType != that1.DocumentType {
		return false
	}
	if this.DocumentVersion != that1.DocumentVersion {
		return false
	}
	if this.NotificationType != that1.NotificationType {
		return false
	}
	if !this.Notification.Equal(that1.Notification) {
		return false
	}
	return true
}
func (this *ProvisioningNotification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProvisioningNotification)
	if !ok {
		that2, ok := that.(ProvisioningNotification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.EntitlementId != that1.EntitlementId {
		return false
	}
	if len(this.TenantIds) != len(that1.TenantIds) {
		return false
	}
	for i := range this.TenantIds {
		if this.TenantIds[i] != that1.TenantIds[i] {
			return false
		}
	}
	if this.OrderNumber != that1.OrderNumber {
		return false
	}
	if this.StatusType != that1.StatusType {
		return false
	}
	if this.StatusDetails != that1.StatusDetails {
		return false
	}
	if !this.ActivityDate.Equal(that1.ActivityDate) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&asb_message.GlobalSpecType{")
	if this.RawJson != nil {
		s = append(s, "RawJson: "+fmt.Sprintf("%#v", this.RawJson)+",\n")
	}
	if this.ParsedType != nil {
		s = append(s, "ParsedType: "+fmt.Sprintf("%#v", this.ParsedType)+",\n")
	}
	if this.Tenant != nil {
		s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	}
	if this.ResponseMessage != nil {
		s = append(s, "ResponseMessage: "+fmt.Sprintf("%#v", this.ResponseMessage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&asb_message.GlobalSpecType_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RegistrationMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&asb_message.GlobalSpecType_RegistrationMessage{` +
		`RegistrationMessage:` + fmt.Sprintf("%#v", this.RegistrationMessage) + `}`}, ", ")
	return s
}
func (this *SignupRegistrationMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&asb_message.SignupRegistrationMessage{")
	if this.CrmDetails != nil {
		s = append(s, "CrmDetails: "+fmt.Sprintf("%#v", this.CrmDetails)+",\n")
	}
	if this.CompanyDetails != nil {
		s = append(s, "CompanyDetails: "+fmt.Sprintf("%#v", this.CompanyDetails)+",\n")
	}
	if this.UserDetails != nil {
		s = append(s, "UserDetails: "+fmt.Sprintf("%#v", this.UserDetails)+",\n")
	}
	if this.AccountDetails != nil {
		s = append(s, "AccountDetails: "+fmt.Sprintf("%#v", this.AccountDetails)+",\n")
	}
	s = append(s, "ActionType: "+fmt.Sprintf("%#v", this.ActionType)+",\n")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	s = append(s, "SignupId: "+fmt.Sprintf("%#v", this.SignupId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ASBResponseMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&asb_message.ASBResponseMessage{")
	s = append(s, "DocumentType: "+fmt.Sprintf("%#v", this.DocumentType)+",\n")
	s = append(s, "DocumentVersion: "+fmt.Sprintf("%#v", this.DocumentVersion)+",\n")
	s = append(s, "NotificationType: "+fmt.Sprintf("%#v", this.NotificationType)+",\n")
	if this.Notification != nil {
		s = append(s, "Notification: "+fmt.Sprintf("%#v", this.Notification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisioningNotification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&asb_message.ProvisioningNotification{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "EntitlementId: "+fmt.Sprintf("%#v", this.EntitlementId)+",\n")
	s = append(s, "TenantIds: "+fmt.Sprintf("%#v", this.TenantIds)+",\n")
	s = append(s, "OrderNumber: "+fmt.Sprintf("%#v", this.OrderNumber)+",\n")
	s = append(s, "StatusType: "+fmt.Sprintf("%#v", this.StatusType)+",\n")
	s = append(s, "StatusDetails: "+fmt.Sprintf("%#v", this.StatusDetails)+",\n")
	if this.ActivityDate != nil {
		s = append(s, "ActivityDate: "+fmt.Sprintf("%#v", this.ActivityDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseMessage != nil {
		{
			size, err := m.ResponseMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tenant) > 0 {
		for iNdEx := len(m.Tenant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tenant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ParsedType != nil {
		{
			size := m.ParsedType.Size()
			i -= size
			if _, err := m.ParsedType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RawJson != nil {
		{
			size, err := m.RawJson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RegistrationMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RegistrationMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegistrationMessage != nil {
		{
			size, err := m.RegistrationMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SignupRegistrationMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupRegistrationMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignupRegistrationMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignupId) > 0 {
		i -= len(m.SignupId)
		copy(dAtA[i:], m.SignupId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SignupId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x32
	}
	if m.ActionType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x28
	}
	if m.AccountDetails != nil {
		{
			size, err := m.AccountDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserDetails != nil {
		{
			size, err := m.UserDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CompanyDetails != nil {
		{
			size, err := m.CompanyDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CrmDetails != nil {
		{
			size, err := m.CrmDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ASBResponseMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ASBResponseMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ASBResponseMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		{
			size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NotificationType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NotificationType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DocumentVersion) > 0 {
		i -= len(m.DocumentVersion)
		copy(dAtA[i:], m.DocumentVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DocumentVersion)))
		i--
		dAtA[i] = 0x12
	}
	if m.DocumentType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DocumentType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProvisioningNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisioningNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProvisioningNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivityDate != nil {
		{
			size, err := m.ActivityDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StatusDetails) > 0 {
		i -= len(m.StatusDetails)
		copy(dAtA[i:], m.StatusDetails)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StatusDetails)))
		i--
		dAtA[i] = 0x32
	}
	if m.StatusType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StatusType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrderNumber) > 0 {
		i -= len(m.OrderNumber)
		copy(dAtA[i:], m.OrderNumber)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OrderNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TenantIds) > 0 {
		for iNdEx := len(m.TenantIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TenantIds[iNdEx])
			copy(dAtA[i:], m.TenantIds[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EntitlementId) > 0 {
		i -= len(m.EntitlementId)
		copy(dAtA[i:], m.EntitlementId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EntitlementId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Service != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Service))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawJson != nil {
		l = m.RawJson.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ParsedType != nil {
		n += m.ParsedType.Size()
	}
	if len(m.Tenant) > 0 {
		for _, e := range m.Tenant {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ResponseMessage != nil {
		l = m.ResponseMessage.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RegistrationMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegistrationMessage != nil {
		l = m.RegistrationMessage.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignupRegistrationMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrmDetails != nil {
		l = m.CrmDetails.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CompanyDetails != nil {
		l = m.CompanyDetails.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UserDetails != nil {
		l = m.UserDetails.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AccountDetails != nil {
		l = m.AccountDetails.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ActionType != 0 {
		n += 1 + sovTypes(uint64(m.ActionType))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SignupId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ASBResponseMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DocumentType != 0 {
		n += 1 + sovTypes(uint64(m.DocumentType))
	}
	l = len(m.DocumentVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NotificationType != 0 {
		n += 1 + sovTypes(uint64(m.NotificationType))
	}
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProvisioningNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != 0 {
		n += 1 + sovTypes(uint64(m.Service))
	}
	l = len(m.EntitlementId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TenantIds) > 0 {
		for _, s := range m.TenantIds {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.OrderNumber)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StatusType != 0 {
		n += 1 + sovTypes(uint64(m.StatusType))
	}
	l = len(m.StatusDetails)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ActivityDate != nil {
		l = m.ActivityDate.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTenant := "[]*ObjectRefType{"
	for _, f := range this.Tenant {
		repeatedStringForTenant += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForTenant += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`RawJson:` + strings.Replace(fmt.Sprintf("%v", this.RawJson), "Struct", "types.Struct", 1) + `,`,
		`ParsedType:` + fmt.Sprintf("%v", this.ParsedType) + `,`,
		`Tenant:` + repeatedStringForTenant + `,`,
		`ResponseMessage:` + strings.Replace(this.ResponseMessage.String(), "ASBResponseMessage", "ASBResponseMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RegistrationMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RegistrationMessage{`,
		`RegistrationMessage:` + strings.Replace(fmt.Sprintf("%v", this.RegistrationMessage), "SignupRegistrationMessage", "SignupRegistrationMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupRegistrationMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupRegistrationMessage{`,
		`CrmDetails:` + strings.Replace(fmt.Sprintf("%v", this.CrmDetails), "CRMInfo", "schema.CRMInfo", 1) + `,`,
		`CompanyDetails:` + strings.Replace(fmt.Sprintf("%v", this.CompanyDetails), "CompanyMeta", "signup.CompanyMeta", 1) + `,`,
		`UserDetails:` + strings.Replace(fmt.Sprintf("%v", this.UserDetails), "UserMeta", "signup.UserMeta", 1) + `,`,
		`AccountDetails:` + strings.Replace(fmt.Sprintf("%v", this.AccountDetails), "AccountMeta", "signup.AccountMeta", 1) + `,`,
		`ActionType:` + fmt.Sprintf("%v", this.ActionType) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`SignupId:` + fmt.Sprintf("%v", this.SignupId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ASBResponseMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ASBResponseMessage{`,
		`DocumentType:` + fmt.Sprintf("%v", this.DocumentType) + `,`,
		`DocumentVersion:` + fmt.Sprintf("%v", this.DocumentVersion) + `,`,
		`NotificationType:` + fmt.Sprintf("%v", this.NotificationType) + `,`,
		`Notification:` + strings.Replace(this.Notification.String(), "ProvisioningNotification", "ProvisioningNotification", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisioningNotification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisioningNotification{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`EntitlementId:` + fmt.Sprintf("%v", this.EntitlementId) + `,`,
		`TenantIds:` + fmt.Sprintf("%v", this.TenantIds) + `,`,
		`OrderNumber:` + fmt.Sprintf("%v", this.OrderNumber) + `,`,
		`StatusType:` + fmt.Sprintf("%v", this.StatusType) + `,`,
		`StatusDetails:` + fmt.Sprintf("%v", this.StatusDetails) + `,`,
		`ActivityDate:` + strings.Replace(fmt.Sprintf("%v", this.ActivityDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawJson == nil {
				m.RawJson = &types.Struct{}
			}
			if err := m.RawJson.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ParsedType = &GlobalSpecType_None{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignupRegistrationMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ParsedType = &GlobalSpecType_RegistrationMessage{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = append(m.Tenant, &schema.ObjectRefType{})
			if err := m.Tenant[len(m.Tenant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseMessage == nil {
				m.ResponseMessage = &ASBResponseMessage{}
			}
			if err := m.ResponseMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupRegistrationMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupRegistrationMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupRegistrationMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrmDetails == nil {
				m.CrmDetails = &schema.CRMInfo{}
			}
			if err := m.CrmDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompanyDetails == nil {
				m.CompanyDetails = &signup.CompanyMeta{}
			}
			if err := m.CompanyDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDetails == nil {
				m.UserDetails = &signup.UserMeta{}
			}
			if err := m.UserDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountDetails == nil {
				m.AccountDetails = &signup.AccountMeta{}
			}
			if err := m.AccountDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ASBResponseMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ASBResponseMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ASBResponseMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentType", wireType)
			}
			m.DocumentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentType |= ResponseDocumentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationType", wireType)
			}
			m.NotificationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotificationType |= ServiceOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &ProvisioningNotification{}
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisioningNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisioningNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisioningNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			m.Service = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Service |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntitlementId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntitlementId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantIds = append(m.TenantIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusType", wireType)
			}
			m.StatusType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusType |= ASBTenantStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityDate == nil {
				m.ActivityDate = &types.Timestamp{}
			}
			if err := m.ActivityDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

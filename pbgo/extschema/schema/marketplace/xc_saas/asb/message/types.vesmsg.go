// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package message

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_signup "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/signup"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetParsedType().(type) {
	case *GlobalSpecType_None:
		if fv, exists := v.FldValidators["parsed_type.none"]; exists {
			val := m.GetParsedType().(*GlobalSpecType_None).None
			vOpts := append(opts,
				db.WithValidateField("parsed_type"),
				db.WithValidateField("none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SignupMessage:
		if fv, exists := v.FldValidators["parsed_type.signup_message"]; exists {
			val := m.GetParsedType().(*GlobalSpecType_SignupMessage).SignupMessage
			vOpts := append(opts,
				db.WithValidateField("parsed_type"),
				db.WithValidateField("signup_message"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["raw_json"]; exists {

		vOpts := append(opts, db.WithValidateField("raw_json"))
		if err := fv(ctx, m.GetRawJson(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["parsed_type.signup_message"] = SignupMessageValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SignupMessage) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SignupMessage) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SignupMessage) DeepCopy() *SignupMessage {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SignupMessage{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SignupMessage) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SignupMessage) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SignupMessageValidator().Validate(ctx, m, opts...)
}

type ValidateSignupMessage struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSignupMessage) CompanyDetailsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for company_details")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_signup.CompanyMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSignupMessage) UserDetailsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for user_details")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_signup.UserMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSignupMessage) AccountDetailsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for account_details")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_signup.AccountMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSignupMessage) ActionTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ActionType)
		return int32(i)
	}
	// ActionType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ActionType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action_type")
	}

	return validatorFn, nil
}

func (v *ValidateSignupMessage) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SignupMessage)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SignupMessage got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["account_details"]; exists {

		vOpts := append(opts, db.WithValidateField("account_details"))
		if err := fv(ctx, m.GetAccountDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["action_type"]; exists {

		vOpts := append(opts, db.WithValidateField("action_type"))
		if err := fv(ctx, m.GetActionType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["company_details"]; exists {

		vOpts := append(opts, db.WithValidateField("company_details"))
		if err := fv(ctx, m.GetCompanyDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["crm_details"]; exists {

		vOpts := append(opts, db.WithValidateField("crm_details"))
		if err := fv(ctx, m.GetCrmDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["signup_id"]; exists {

		vOpts := append(opts, db.WithValidateField("signup_id"))
		if err := fv(ctx, m.GetSignupId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_id"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_id"))
		if err := fv(ctx, m.GetTenantId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_details"]; exists {

		vOpts := append(opts, db.WithValidateField("user_details"))
		if err := fv(ctx, m.GetUserDetails(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSignupMessageValidator = func() *ValidateSignupMessage {
	v := &ValidateSignupMessage{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCompanyDetails := v.CompanyDetailsValidationRuleHandler
	rulesCompanyDetails := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCompanyDetails(rulesCompanyDetails)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SignupMessage.company_details: %s", err)
		panic(errMsg)
	}
	v.FldValidators["company_details"] = vFn

	vrhUserDetails := v.UserDetailsValidationRuleHandler
	rulesUserDetails := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUserDetails(rulesUserDetails)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SignupMessage.user_details: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_details"] = vFn

	vrhAccountDetails := v.AccountDetailsValidationRuleHandler
	rulesAccountDetails := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAccountDetails(rulesAccountDetails)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SignupMessage.account_details: %s", err)
		panic(errMsg)
	}
	v.FldValidators["account_details"] = vFn

	vrhActionType := v.ActionTypeValidationRuleHandler
	rulesActionType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhActionType(rulesActionType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SignupMessage.action_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action_type"] = vFn

	v.FldValidators["crm_details"] = ves_io_schema.CRMInfoValidator().Validate

	return v
}()

func SignupMessageValidator() db.Validator {
	return DefaultSignupMessageValidator
}

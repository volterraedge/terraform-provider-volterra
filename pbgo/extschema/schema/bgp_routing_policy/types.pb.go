// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/bgp_routing_policy/types.proto

package bgp_routing_policy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BGP Community
//
// x-displayName: "BGP Community list"
// List of BGP communities
type BgpCommunity struct {
	// community
	//
	// x-displayName: "BGP community"
	// x-example: "[65535:65281, 65535:65284]"
	// x-required
	// An unordered set of RFC 1997 defined 4-byte community, first 16 bits being ASN and lower 16 bits being value
	Community []string `protobuf:"bytes,1,rep,name=community,proto3" json:"community,omitempty"`
}

func (m *BgpCommunity) Reset()      { *m = BgpCommunity{} }
func (*BgpCommunity) ProtoMessage() {}
func (*BgpCommunity) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{0}
}
func (m *BgpCommunity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpCommunity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpCommunity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpCommunity.Merge(m, src)
}
func (m *BgpCommunity) XXX_Size() int {
	return m.Size()
}
func (m *BgpCommunity) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpCommunity.DiscardUnknown(m)
}

var xxx_messageInfo_BgpCommunity proto.InternalMessageInfo

func (m *BgpCommunity) GetCommunity() []string {
	if m != nil {
		return m.Community
	}
	return nil
}

// IP Prefix list
//
// x-displayName: "Prefix list"
// A list of IP prefixes amongst which atleast one should match BGP route
type BgpPrefixMatch struct {
	// IP Prefix
	//
	// x-displayName: "IP Prefix"
	// IP prefix to match on BGP route
	IpPrefixes string `protobuf:"bytes,1,opt,name=ip_prefixes,json=ipPrefixes,proto3" json:"ip_prefixes,omitempty"`
	// prefix_length_match
	//
	// x-displayName: "Prefix length match"
	// Match criteria for prefix length
	//
	// Types that are valid to be assigned to PrefixLengthMatch:
	//	*BgpPrefixMatch_ExactMatch
	//	*BgpPrefixMatch_EqualOrLongerThan
	//	*BgpPrefixMatch_LongerThan
	PrefixLengthMatch isBgpPrefixMatch_PrefixLengthMatch `protobuf_oneof:"prefix_length_match"`
}

func (m *BgpPrefixMatch) Reset()      { *m = BgpPrefixMatch{} }
func (*BgpPrefixMatch) ProtoMessage() {}
func (*BgpPrefixMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{1}
}
func (m *BgpPrefixMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpPrefixMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpPrefixMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPrefixMatch.Merge(m, src)
}
func (m *BgpPrefixMatch) XXX_Size() int {
	return m.Size()
}
func (m *BgpPrefixMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPrefixMatch.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPrefixMatch proto.InternalMessageInfo

type isBgpPrefixMatch_PrefixLengthMatch interface {
	isBgpPrefixMatch_PrefixLengthMatch()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BgpPrefixMatch_ExactMatch struct {
	ExactMatch *schema.Empty `protobuf:"bytes,3,opt,name=exact_match,json=exactMatch,proto3,oneof" json:"exact_match,omitempty"`
}
type BgpPrefixMatch_EqualOrLongerThan struct {
	EqualOrLongerThan *schema.Empty `protobuf:"bytes,4,opt,name=equal_or_longer_than,json=equalOrLongerThan,proto3,oneof" json:"equal_or_longer_than,omitempty"`
}
type BgpPrefixMatch_LongerThan struct {
	LongerThan *schema.Empty `protobuf:"bytes,5,opt,name=longer_than,json=longerThan,proto3,oneof" json:"longer_than,omitempty"`
}

func (*BgpPrefixMatch_ExactMatch) isBgpPrefixMatch_PrefixLengthMatch()        {}
func (*BgpPrefixMatch_EqualOrLongerThan) isBgpPrefixMatch_PrefixLengthMatch() {}
func (*BgpPrefixMatch_LongerThan) isBgpPrefixMatch_PrefixLengthMatch()        {}

func (m *BgpPrefixMatch) GetPrefixLengthMatch() isBgpPrefixMatch_PrefixLengthMatch {
	if m != nil {
		return m.PrefixLengthMatch
	}
	return nil
}

func (m *BgpPrefixMatch) GetIpPrefixes() string {
	if m != nil {
		return m.IpPrefixes
	}
	return ""
}

func (m *BgpPrefixMatch) GetExactMatch() *schema.Empty {
	if x, ok := m.GetPrefixLengthMatch().(*BgpPrefixMatch_ExactMatch); ok {
		return x.ExactMatch
	}
	return nil
}

func (m *BgpPrefixMatch) GetEqualOrLongerThan() *schema.Empty {
	if x, ok := m.GetPrefixLengthMatch().(*BgpPrefixMatch_EqualOrLongerThan); ok {
		return x.EqualOrLongerThan
	}
	return nil
}

func (m *BgpPrefixMatch) GetLongerThan() *schema.Empty {
	if x, ok := m.GetPrefixLengthMatch().(*BgpPrefixMatch_LongerThan); ok {
		return x.LongerThan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BgpPrefixMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BgpPrefixMatch_ExactMatch)(nil),
		(*BgpPrefixMatch_EqualOrLongerThan)(nil),
		(*BgpPrefixMatch_LongerThan)(nil),
	}
}

// BGP Prefix List
//
// x-displayName: "BGP Prefix List"
// List of IP prefix and prefix length range match condition
type BgpPrefixMatchList struct {
	// BGP Prefix Match List
	//
	// x-displayName: "Prefix list"
	// x-required
	// List of IP prefix
	Prefixes []*BgpPrefixMatch `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (m *BgpPrefixMatchList) Reset()      { *m = BgpPrefixMatchList{} }
func (*BgpPrefixMatchList) ProtoMessage() {}
func (*BgpPrefixMatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{2}
}
func (m *BgpPrefixMatchList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpPrefixMatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpPrefixMatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPrefixMatchList.Merge(m, src)
}
func (m *BgpPrefixMatchList) XXX_Size() int {
	return m.Size()
}
func (m *BgpPrefixMatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPrefixMatchList.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPrefixMatchList proto.InternalMessageInfo

func (m *BgpPrefixMatchList) GetPrefixes() []*BgpPrefixMatch {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// BGP Route Match
//
// x-displayName: "BGP Route Match"
// Predicates which have to match information in route for action to be applied
type BgpRouteMatch struct {
	// Type of Match
	//
	// x-displayName: "Type of Match"
	// x-required
	//
	// Types that are valid to be assigned to TypeOfMatch:
	//	*BgpRouteMatch_IpPrefixes
	//	*BgpRouteMatch_Community
	//	*BgpRouteMatch_AsPath
	TypeOfMatch isBgpRouteMatch_TypeOfMatch `protobuf_oneof:"type_of_match"`
}

func (m *BgpRouteMatch) Reset()      { *m = BgpRouteMatch{} }
func (*BgpRouteMatch) ProtoMessage() {}
func (*BgpRouteMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{3}
}
func (m *BgpRouteMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpRouteMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpRouteMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRouteMatch.Merge(m, src)
}
func (m *BgpRouteMatch) XXX_Size() int {
	return m.Size()
}
func (m *BgpRouteMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRouteMatch.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRouteMatch proto.InternalMessageInfo

type isBgpRouteMatch_TypeOfMatch interface {
	isBgpRouteMatch_TypeOfMatch()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BgpRouteMatch_IpPrefixes struct {
	IpPrefixes *BgpPrefixMatchList `protobuf:"bytes,2,opt,name=ip_prefixes,json=ipPrefixes,proto3,oneof" json:"ip_prefixes,omitempty"`
}
type BgpRouteMatch_Community struct {
	Community *BgpCommunity `protobuf:"bytes,3,opt,name=community,proto3,oneof" json:"community,omitempty"`
}
type BgpRouteMatch_AsPath struct {
	AsPath string `protobuf:"bytes,4,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
}

func (*BgpRouteMatch_IpPrefixes) isBgpRouteMatch_TypeOfMatch() {}
func (*BgpRouteMatch_Community) isBgpRouteMatch_TypeOfMatch()  {}
func (*BgpRouteMatch_AsPath) isBgpRouteMatch_TypeOfMatch()     {}

func (m *BgpRouteMatch) GetTypeOfMatch() isBgpRouteMatch_TypeOfMatch {
	if m != nil {
		return m.TypeOfMatch
	}
	return nil
}

func (m *BgpRouteMatch) GetIpPrefixes() *BgpPrefixMatchList {
	if x, ok := m.GetTypeOfMatch().(*BgpRouteMatch_IpPrefixes); ok {
		return x.IpPrefixes
	}
	return nil
}

func (m *BgpRouteMatch) GetCommunity() *BgpCommunity {
	if x, ok := m.GetTypeOfMatch().(*BgpRouteMatch_Community); ok {
		return x.Community
	}
	return nil
}

func (m *BgpRouteMatch) GetAsPath() string {
	if x, ok := m.GetTypeOfMatch().(*BgpRouteMatch_AsPath); ok {
		return x.AsPath
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BgpRouteMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BgpRouteMatch_IpPrefixes)(nil),
		(*BgpRouteMatch_Community)(nil),
		(*BgpRouteMatch_AsPath)(nil),
	}
}

// BGP Route Action
//
// x-displayName: "BGP Route Action"
// Action to be enforced if the BGP route matches the rule.
type BgpRouteAction struct {
	// Action Type
	//
	// x-displayName: "Action Type"
	// Action to be enforced if the BGP route matches the rule.
	//
	// Types that are valid to be assigned to ActionType:
	//	*BgpRouteAction_Deny
	//	*BgpRouteAction_Allow
	//	*BgpRouteAction_Community
	//	*BgpRouteAction_Metric
	//	*BgpRouteAction_LocalPreference
	//	*BgpRouteAction_AsPath
	//	*BgpRouteAction_Aggregate
	ActionType isBgpRouteAction_ActionType `protobuf_oneof:"action_type"`
}

func (m *BgpRouteAction) Reset()      { *m = BgpRouteAction{} }
func (*BgpRouteAction) ProtoMessage() {}
func (*BgpRouteAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{4}
}
func (m *BgpRouteAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpRouteAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpRouteAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRouteAction.Merge(m, src)
}
func (m *BgpRouteAction) XXX_Size() int {
	return m.Size()
}
func (m *BgpRouteAction) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRouteAction.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRouteAction proto.InternalMessageInfo

type isBgpRouteAction_ActionType interface {
	isBgpRouteAction_ActionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BgpRouteAction_Deny struct {
	Deny *schema.Empty `protobuf:"bytes,2,opt,name=deny,proto3,oneof" json:"deny,omitempty"`
}
type BgpRouteAction_Allow struct {
	Allow *schema.Empty `protobuf:"bytes,3,opt,name=allow,proto3,oneof" json:"allow,omitempty"`
}
type BgpRouteAction_Community struct {
	Community *BgpCommunity `protobuf:"bytes,4,opt,name=community,proto3,oneof" json:"community,omitempty"`
}
type BgpRouteAction_Metric struct {
	Metric uint32 `protobuf:"varint,5,opt,name=metric,proto3,oneof" json:"metric,omitempty"`
}
type BgpRouteAction_LocalPreference struct {
	LocalPreference uint32 `protobuf:"varint,6,opt,name=local_preference,json=localPreference,proto3,oneof" json:"local_preference,omitempty"`
}
type BgpRouteAction_AsPath struct {
	AsPath string `protobuf:"bytes,7,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
}
type BgpRouteAction_Aggregate struct {
	Aggregate *schema.Empty `protobuf:"bytes,8,opt,name=aggregate,proto3,oneof" json:"aggregate,omitempty"`
}

func (*BgpRouteAction_Deny) isBgpRouteAction_ActionType()            {}
func (*BgpRouteAction_Allow) isBgpRouteAction_ActionType()           {}
func (*BgpRouteAction_Community) isBgpRouteAction_ActionType()       {}
func (*BgpRouteAction_Metric) isBgpRouteAction_ActionType()          {}
func (*BgpRouteAction_LocalPreference) isBgpRouteAction_ActionType() {}
func (*BgpRouteAction_AsPath) isBgpRouteAction_ActionType()          {}
func (*BgpRouteAction_Aggregate) isBgpRouteAction_ActionType()       {}

func (m *BgpRouteAction) GetActionType() isBgpRouteAction_ActionType {
	if m != nil {
		return m.ActionType
	}
	return nil
}

func (m *BgpRouteAction) GetDeny() *schema.Empty {
	if x, ok := m.GetActionType().(*BgpRouteAction_Deny); ok {
		return x.Deny
	}
	return nil
}

func (m *BgpRouteAction) GetAllow() *schema.Empty {
	if x, ok := m.GetActionType().(*BgpRouteAction_Allow); ok {
		return x.Allow
	}
	return nil
}

func (m *BgpRouteAction) GetCommunity() *BgpCommunity {
	if x, ok := m.GetActionType().(*BgpRouteAction_Community); ok {
		return x.Community
	}
	return nil
}

func (m *BgpRouteAction) GetMetric() uint32 {
	if x, ok := m.GetActionType().(*BgpRouteAction_Metric); ok {
		return x.Metric
	}
	return 0
}

func (m *BgpRouteAction) GetLocalPreference() uint32 {
	if x, ok := m.GetActionType().(*BgpRouteAction_LocalPreference); ok {
		return x.LocalPreference
	}
	return 0
}

func (m *BgpRouteAction) GetAsPath() string {
	if x, ok := m.GetActionType().(*BgpRouteAction_AsPath); ok {
		return x.AsPath
	}
	return ""
}

func (m *BgpRouteAction) GetAggregate() *schema.Empty {
	if x, ok := m.GetActionType().(*BgpRouteAction_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BgpRouteAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BgpRouteAction_Deny)(nil),
		(*BgpRouteAction_Allow)(nil),
		(*BgpRouteAction_Community)(nil),
		(*BgpRouteAction_Metric)(nil),
		(*BgpRouteAction_LocalPreference)(nil),
		(*BgpRouteAction_AsPath)(nil),
		(*BgpRouteAction_Aggregate)(nil),
	}
}

// BGP Route Filter
//
// x-displayName: "BGP Route Filter"
// BGP route filter is a collection of match condition and action to be taken on match.
// All the fields to evaluate match criteria will be extracted from BGP route being processed.
// IP prefix, BGP community and AS PATH, all fields which can be specified and
// all the fields must match with BGP route for action to be applied
type BgpRoutePolicy struct {
	// Match
	//
	// x-displayName: "Match"
	// Predicates which have to match information in route for action to be applied
	Match *BgpRouteMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Action
	//
	// x-displayName: "Action"
	// Actions to be applied if route matches the rule
	Action *BgpRouteAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *BgpRoutePolicy) Reset()      { *m = BgpRoutePolicy{} }
func (*BgpRoutePolicy) ProtoMessage() {}
func (*BgpRoutePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{5}
}
func (m *BgpRoutePolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpRoutePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpRoutePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRoutePolicy.Merge(m, src)
}
func (m *BgpRoutePolicy) XXX_Size() int {
	return m.Size()
}
func (m *BgpRoutePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRoutePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRoutePolicy proto.InternalMessageInfo

func (m *BgpRoutePolicy) GetMatch() *BgpRouteMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *BgpRoutePolicy) GetAction() *BgpRouteAction {
	if m != nil {
		return m.Action
	}
	return nil
}

// Global Specification
//
// x-displayName: "Global Specification"
// BGP Routing Policy specification.
type GlobalSpecType struct {
	// Rules
	//
	// x-displayName: "Rules"
	// x-required
	// A BGP Routing policy is composed of one or more rules. Note that the order
	// of rules is critical as rules are applied top to bottom.
	Rules []*BgpRoutePolicy `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{6}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetRules() []*BgpRoutePolicy {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Create bgp routing policy
//
// x-displayName: "Create BGP Routing Policy"
// BGP Routing Policy is a list of rules containing match criteria
// and action to be applied. These rules help contol routes which are
// imported or exported to BGP peers
type CreateSpecType struct {
	Rules []*BgpRoutePolicy `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{7}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetRules() []*BgpRoutePolicy {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Replace bgp routing policy
//
// x-displayName: "Replace BGP Routing Policy"
// BGP Routing Policy is a list of rules containing match criteria
// and action to be applied. These rules help contol routes which are
// imported or exported to BGP peers
type ReplaceSpecType struct {
	Rules []*BgpRoutePolicy `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{8}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetRules() []*BgpRoutePolicy {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Get bgp routing policy
//
// x-displayName: "Get BGP Routing Policy"
// BGP Routing Policy is a list of rules containing match criteria
// and action to be applied. These rules help contol routes which are
// imported or exported to BGP peers
type GetSpecType struct {
	Rules []*BgpRoutePolicy `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac90d580f21e2e0e, []int{9}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetRules() []*BgpRoutePolicy {
	if m != nil {
		return m.Rules
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpCommunity)(nil), "ves.io.schema.bgp_routing_policy.BgpCommunity")
	golang_proto.RegisterType((*BgpCommunity)(nil), "ves.io.schema.bgp_routing_policy.BgpCommunity")
	proto.RegisterType((*BgpPrefixMatch)(nil), "ves.io.schema.bgp_routing_policy.BgpPrefixMatch")
	golang_proto.RegisterType((*BgpPrefixMatch)(nil), "ves.io.schema.bgp_routing_policy.BgpPrefixMatch")
	proto.RegisterType((*BgpPrefixMatchList)(nil), "ves.io.schema.bgp_routing_policy.BgpPrefixMatchList")
	golang_proto.RegisterType((*BgpPrefixMatchList)(nil), "ves.io.schema.bgp_routing_policy.BgpPrefixMatchList")
	proto.RegisterType((*BgpRouteMatch)(nil), "ves.io.schema.bgp_routing_policy.BgpRouteMatch")
	golang_proto.RegisterType((*BgpRouteMatch)(nil), "ves.io.schema.bgp_routing_policy.BgpRouteMatch")
	proto.RegisterType((*BgpRouteAction)(nil), "ves.io.schema.bgp_routing_policy.BgpRouteAction")
	golang_proto.RegisterType((*BgpRouteAction)(nil), "ves.io.schema.bgp_routing_policy.BgpRouteAction")
	proto.RegisterType((*BgpRoutePolicy)(nil), "ves.io.schema.bgp_routing_policy.BgpRoutePolicy")
	golang_proto.RegisterType((*BgpRoutePolicy)(nil), "ves.io.schema.bgp_routing_policy.BgpRoutePolicy")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.bgp_routing_policy.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.bgp_routing_policy.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.bgp_routing_policy.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.bgp_routing_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.bgp_routing_policy.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.bgp_routing_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.bgp_routing_policy.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.bgp_routing_policy.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/bgp_routing_policy/types.proto", fileDescriptor_ac90d580f21e2e0e)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/bgp_routing_policy/types.proto", fileDescriptor_ac90d580f21e2e0e)
}

var fileDescriptor_ac90d580f21e2e0e = []byte{
	// 1186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0x78, 0x6d, 0xd7, 0x79, 0xae, 0x13, 0x67, 0x93, 0xaf, 0x62, 0xbb, 0x5f, 0x36, 0x96,
	0xa1, 0x92, 0x49, 0x9c, 0x75, 0xe2, 0xa6, 0x14, 0x22, 0x11, 0x11, 0x37, 0x69, 0xa2, 0x2a, 0x81,
	0xc8, 0x8d, 0x40, 0x02, 0x95, 0xd5, 0x7a, 0x33, 0x59, 0xaf, 0xb2, 0xf6, 0x6c, 0xd7, 0x63, 0x37,
	0x56, 0x41, 0xa0, 0x1e, 0x40, 0xdc, 0x50, 0xe1, 0xc6, 0xbd, 0xea, 0xdf, 0x80, 0x39, 0xe4, 0x82,
	0x84, 0x72, 0xf2, 0x31, 0xc7, 0xc6, 0xb9, 0xc0, 0x89, 0x2a, 0xe2, 0xc0, 0x11, 0xed, 0xec, 0xda,
	0xde, 0x75, 0x7e, 0x34, 0x55, 0xa5, 0x9e, 0x76, 0x66, 0xde, 0xe7, 0xfd, 0xfe, 0xbc, 0xa7, 0x85,
	0x6c, 0x03, 0xd7, 0x44, 0x8d, 0xe4, 0x6a, 0x4a, 0x19, 0x57, 0xe4, 0x5c, 0x49, 0x35, 0x24, 0x93,
	0xd4, 0xa9, 0x56, 0x55, 0x25, 0x83, 0xe8, 0x9a, 0xd2, 0xcc, 0xd1, 0xa6, 0x81, 0x6b, 0xa2, 0x61,
	0x12, 0x4a, 0xf8, 0x94, 0x8d, 0x16, 0x6d, 0xb4, 0x78, 0x1a, 0x9d, 0x9c, 0x51, 0x35, 0x5a, 0xae,
	0x97, 0x44, 0x85, 0x54, 0x72, 0x2a, 0x51, 0x49, 0x8e, 0x29, 0x96, 0xea, 0x3b, 0xec, 0xc6, 0x2e,
	0xec, 0x64, 0x1b, 0x4c, 0x4e, 0xaa, 0x84, 0xa8, 0x3a, 0xee, 0xa3, 0xa8, 0x56, 0xc1, 0x35, 0x2a,
	0x57, 0x0c, 0x07, 0x30, 0xe1, 0x8d, 0xaf, 0x8a, 0xa9, 0x23, 0xb8, 0xe6, 0x15, 0x10, 0x83, 0x6a,
	0xa4, 0xea, 0xc4, 0x99, 0x4c, 0x79, 0x85, 0xa7, 0x33, 0x49, 0xbe, 0x35, 0x80, 0x68, 0x50, 0xc9,
	0x2d, 0x4e, 0x78, 0xc5, 0x6e, 0xd1, 0xff, 0xbd, 0xa2, 0x86, 0xac, 0x6b, 0xdb, 0x32, 0xc5, 0x67,
	0x7b, 0x6e, 0x68, 0xf8, 0xa1, 0xe4, 0x8d, 0x6d, 0xf2, 0x34, 0xa2, 0xe6, 0x76, 0x90, 0x7e, 0x04,
	0x57, 0x0b, 0xaa, 0x71, 0x9b, 0x54, 0x2a, 0xf5, 0xaa, 0x46, 0x9b, 0xfc, 0x2e, 0x0c, 0x29, 0xdd,
	0x4b, 0x1c, 0xa5, 0xb8, 0xcc, 0x50, 0x61, 0xe3, 0xdf, 0x16, 0xf2, 0xfd, 0xfa, 0xd7, 0x3e, 0x17,
	0x7c, 0x82, 0xfc, 0xb1, 0x70, 0xf7, 0x14, 0x46, 0xdd, 0x53, 0x9c, 0x9d, 0xae, 0x99, 0x89, 0xfc,
	0xc4, 0x97, 0x5f, 0xcc, 0xce, 0x7c, 0x70, 0xff, 0xd1, 0x5c, 0xf6, 0xe6, 0xd7, 0x0b, 0xfd, 0xe3,
	0x3b, 0x9d, 0xe7, 0xbf, 0x73, 0xa1, 0x27, 0xbf, 0x21, 0x7f, 0xcc, 0x57, 0xec, 0xdb, 0x4f, 0x3f,
	0xe5, 0x60, 0xb8, 0xa0, 0x1a, 0x9b, 0x26, 0xde, 0xd1, 0xf6, 0x36, 0x64, 0xaa, 0x94, 0xf9, 0x69,
	0x88, 0x68, 0x86, 0x64, 0xb0, 0x17, 0x5c, 0x8b, 0xa3, 0x14, 0xca, 0x0c, 0x15, 0x80, 0x79, 0x32,
	0xb9, 0x67, 0x08, 0x15, 0x41, 0x73, 0xf0, 0xb8, 0xc6, 0xdf, 0x82, 0x08, 0xde, 0x93, 0x15, 0x2a,
	0x55, 0x2c, 0xdd, 0x38, 0x97, 0x42, 0x99, 0x48, 0x7e, 0x5c, 0xf4, 0xf2, 0x66, 0xa5, 0x62, 0xd0,
	0xe6, 0x9a, 0xaf, 0x08, 0x0c, 0x6a, 0x7b, 0x59, 0x85, 0x71, 0xfc, 0xa0, 0x2e, 0xeb, 0x12, 0x31,
	0x25, 0x9d, 0x54, 0x55, 0x6c, 0x4a, 0xb4, 0x2c, 0x57, 0xe3, 0x81, 0x0b, 0x2d, 0x8c, 0x32, 0x9d,
	0x4f, 0xcc, 0x75, 0xa6, 0xb1, 0x55, 0x96, 0xab, 0x56, 0x04, 0x6e, 0xfd, 0xe0, 0xc5, 0x11, 0xe8,
	0x3d, 0xc5, 0x85, 0xaf, 0x0e, 0x5a, 0x68, 0x0f, 0x26, 0x20, 0x64, 0x27, 0x93, 0x8c, 0x7a, 0xf2,
	0x86, 0xfb, 0x30, 0x66, 0x0b, 0x52, 0xeb, 0xb8, 0xaa, 0xd2, 0x72, 0x8a, 0xc5, 0x3d, 0x75, 0x07,
	0x96, 0x61, 0xdc, 0x93, 0x74, 0x3e, 0xb8, 0x62, 0x5d, 0x20, 0x79, 0x76, 0x46, 0x79, 0xff, 0xe2,
	0x87, 0x10, 0xf3, 0x04, 0x99, 0x47, 0x8b, 0x85, 0x0c, 0x8c, 0xd9, 0xae, 0x24, 0x9d, 0x99, 0xb7,
	0x6d, 0xf1, 0xa3, 0xfb, 0x2d, 0x14, 0x68, 0xb7, 0x90, 0xbf, 0xd3, 0x42, 0xc1, 0x1b, 0xd9, 0xf9,
	0xec, 0xcd, 0xbb, 0x81, 0xb0, 0x3f, 0xc6, 0xa5, 0xbf, 0x47, 0xc0, 0x7b, 0x1b, 0xb5, 0xae, 0xd5,
	0x28, 0xff, 0x00, 0xc2, 0xae, 0x4e, 0x71, 0x99, 0x48, 0x7e, 0x56, 0x7c, 0xd9, 0xd0, 0x8a, 0x5e,
	0x3b, 0x85, 0xb7, 0xdb, 0xe7, 0xb0, 0xcb, 0xcd, 0x99, 0x9e, 0x9b, 0xf4, 0x3f, 0x08, 0xa2, 0x05,
	0xd5, 0x28, 0x92, 0x3a, 0xc5, 0x76, 0x2f, 0x3f, 0xf3, 0x32, 0xc6, 0xcf, 0x5a, 0x30, 0xff, 0xaa,
	0x71, 0x58, 0xf9, 0x58, 0x2d, 0x72, 0xb1, 0xeb, 0x63, 0xf7, 0x28, 0xd8, 0xdc, 0x12, 0x2f, 0x65,
	0xb6, 0x37, 0x4d, 0x6b, 0x6e, 0xb6, 0xf3, 0x09, 0xb8, 0x22, 0xd7, 0x24, 0x43, 0xa6, 0x65, 0xc6,
	0xb3, 0xa1, 0x35, 0x5f, 0x31, 0x24, 0xd7, 0x36, 0x65, 0x5a, 0x2e, 0x24, 0x20, 0x6a, 0x0d, 0xa5,
	0x44, 0x76, 0x9c, 0x4e, 0x84, 0xf7, 0x5b, 0xc8, 0xdf, 0x6e, 0x21, 0x74, 0x37, 0x10, 0x46, 0x31,
	0x7f, 0xfa, 0xb1, 0x3d, 0x29, 0x2c, 0xed, 0x25, 0xc5, 0x9a, 0x70, 0x7e, 0x0a, 0x02, 0xdb, 0xb8,
	0xda, 0x74, 0x12, 0x3e, 0x8f, 0x73, 0x0c, 0xc3, 0x67, 0x21, 0x28, 0xeb, 0x3a, 0x79, 0xf8, 0x92,
	0x11, 0xb1, 0x41, 0xde, 0xc4, 0x03, 0xaf, 0x9f, 0x78, 0x1c, 0x42, 0x15, 0x4c, 0x4d, 0x4d, 0x61,
	0xf3, 0x11, 0xb5, 0xf2, 0xb6, 0xef, 0xfc, 0x34, 0xc4, 0x74, 0xa2, 0xc8, 0x3a, 0x6b, 0x1f, 0x36,
	0x71, 0x55, 0xc1, 0xf1, 0x90, 0x83, 0x19, 0x61, 0x92, 0xcd, 0x9e, 0xc0, 0x5d, 0xbf, 0x2b, 0xde,
	0xfa, 0xf1, 0xf3, 0x30, 0x24, 0xab, 0xaa, 0x89, 0x55, 0x99, 0xe2, 0x78, 0xf8, 0xc2, 0x1c, 0xfb,
	0xc0, 0x42, 0x06, 0x22, 0x32, 0xab, 0x25, 0xdb, 0xc6, 0x7c, 0x62, 0xbf, 0x85, 0x38, 0xab, 0xe6,
	0x9d, 0x16, 0x8a, 0xe6, 0xb3, 0x8c, 0xff, 0xd9, 0xf7, 0xb2, 0xb7, 0xb2, 0xef, 0x3b, 0x4d, 0x38,
	0x08, 0xf4, 0x9b, 0xb0, 0xc9, 0x92, 0xe6, 0x57, 0x20, 0x68, 0xef, 0x1e, 0xc4, 0x9c, 0xe6, 0x2e,
	0x55, 0xa6, 0x3e, 0x79, 0x8b, 0xb6, 0x36, 0xbf, 0x06, 0x21, 0x3b, 0x12, 0xa7, 0x9b, 0xb3, 0x97,
	0xb7, 0x63, 0xb3, 0xa1, 0xe8, 0xe8, 0x2f, 0x3c, 0xe5, 0x4e, 0x16, 0xb9, 0xb9, 0x6c, 0xfe, 0xa0,
	0x85, 0x7e, 0xe1, 0xe0, 0x27, 0x04, 0x41, 0x7b, 0x73, 0xfc, 0x80, 0xe0, 0x3b, 0x04, 0x33, 0x90,
	0x64, 0x0e, 0x45, 0xd7, 0xc4, 0x88, 0xbd, 0xd9, 0x1a, 0x89, 0x71, 0x69, 0xcf, 0x16, 0x9a, 0x82,
	0x84, 0x0d, 0xef, 0xf5, 0xb2, 0x7f, 0x4a, 0x47, 0x5d, 0x2c, 0x89, 0x71, 0xf0, 0x2e, 0x44, 0x6d,
	0xac, 0xd3, 0x23, 0x3e, 0x3e, 0xf0, 0x90, 0xbc, 0xb2, 0x74, 0x2f, 0xb5, 0xb9, 0xb4, 0xb5, 0x06,
	0x8f, 0xfd, 0x10, 0xb1, 0xc3, 0x4e, 0x6d, 0x35, 0x0d, 0x3c, 0x75, 0x82, 0xe0, 0x6f, 0x04, 0x63,
	0xdd, 0x6e, 0x88, 0x16, 0x65, 0xf3, 0x81, 0x65, 0x5c, 0x6d, 0xc2, 0xff, 0xe0, 0xaa, 0xf3, 0xc8,
	0xa8, 0x99, 0x0f, 0x2e, 0x59, 0x1f, 0x98, 0x86, 0xa4, 0xf3, 0x7c, 0x89, 0xc8, 0x3e, 0x82, 0x09,
	0x07, 0x3c, 0xc8, 0x35, 0xfe, 0xfa, 0xb9, 0xa2, 0x24, 0xac, 0x5b, 0x2f, 0x29, 0x8b, 0x7f, 0x70,
	0x1d, 0xa2, 0x0e, 0xcc, 0xe1, 0xed, 0xf8, 0xc0, 0x43, 0x92, 0xdb, 0x58, 0x59, 0x86, 0x69, 0x18,
	0xee, 0x06, 0xeb, 0xd4, 0x20, 0x31, 0xf8, 0x62, 0x17, 0x41, 0xa6, 0xe5, 0xf4, 0x37, 0x30, 0xbc,
	0xaa, 0x93, 0x92, 0xac, 0xdf, 0x33, 0xb0, 0x62, 0x95, 0x81, 0x57, 0x21, 0x68, 0xd6, 0xf5, 0x57,
	0x5c, 0xa5, 0x2e, 0x32, 0x16, 0x26, 0x7b, 0x6b, 0x34, 0x76, 0xd6, 0x1a, 0x45, 0x45, 0xdb, 0xfe,
	0x42, 0xe0, 0x64, 0x11, 0xcd, 0xa5, 0x77, 0x61, 0xf8, 0xb6, 0x89, 0x65, 0x8a, 0x7b, 0x01, 0xdc,
	0x79, 0xcd, 0x00, 0xba, 0xf6, 0x47, 0x0f, 0x16, 0x07, 0x72, 0x4b, 0xeb, 0x30, 0x52, 0xc4, 0x86,
	0x2e, 0x2b, 0x6f, 0xc4, 0x5b, 0x19, 0x22, 0xab, 0x98, 0xbe, 0x01, 0x4f, 0x85, 0x9f, 0x51, 0xfb,
	0x48, 0xf0, 0x1d, 0x1e, 0x09, 0xbe, 0x17, 0x47, 0x02, 0xfa, 0xb6, 0x23, 0xa0, 0x67, 0x1d, 0x01,
	0xfd, 0xd1, 0x11, 0x50, 0xbb, 0x23, 0xa0, 0xc3, 0x8e, 0x80, 0x9e, 0x77, 0x04, 0xf4, 0x67, 0x47,
	0xf0, 0xbd, 0xe8, 0x08, 0xe8, 0xc7, 0x63, 0xc1, 0xb7, 0x7f, 0x2c, 0xa0, 0xf6, 0xb1, 0xe0, 0x3b,
	0x3c, 0x16, 0x7c, 0x9f, 0x7f, 0xaa, 0x12, 0x63, 0x57, 0x15, 0x1b, 0x44, 0xa7, 0xd8, 0x34, 0x65,
	0xb1, 0x5e, 0xcb, 0xb1, 0xc3, 0x0e, 0x31, 0x2b, 0x33, 0x86, 0x49, 0x1a, 0xda, 0x36, 0x36, 0x67,
	0xba, 0xe2, 0x9c, 0x51, 0x52, 0x49, 0x0e, 0xef, 0x51, 0xe7, 0x6f, 0xee, 0xdc, 0xdf, 0xe8, 0x52,
	0x88, 0xfd, 0xdc, 0xdd, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x38, 0x3d, 0xe2, 0x3e, 0x71, 0x0b,
	0x00, 0x00,
}

func (this *BgpCommunity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpCommunity)
	if !ok {
		that2, ok := that.(BgpCommunity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Community) != len(that1.Community) {
		return false
	}
	for i := range this.Community {
		if this.Community[i] != that1.Community[i] {
			return false
		}
	}
	return true
}
func (this *BgpPrefixMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpPrefixMatch)
	if !ok {
		that2, ok := that.(BgpPrefixMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpPrefixes != that1.IpPrefixes {
		return false
	}
	if that1.PrefixLengthMatch == nil {
		if this.PrefixLengthMatch != nil {
			return false
		}
	} else if this.PrefixLengthMatch == nil {
		return false
	} else if !this.PrefixLengthMatch.Equal(that1.PrefixLengthMatch) {
		return false
	}
	return true
}
func (this *BgpPrefixMatch_ExactMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpPrefixMatch_ExactMatch)
	if !ok {
		that2, ok := that.(BgpPrefixMatch_ExactMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExactMatch.Equal(that1.ExactMatch) {
		return false
	}
	return true
}
func (this *BgpPrefixMatch_EqualOrLongerThan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpPrefixMatch_EqualOrLongerThan)
	if !ok {
		that2, ok := that.(BgpPrefixMatch_EqualOrLongerThan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EqualOrLongerThan.Equal(that1.EqualOrLongerThan) {
		return false
	}
	return true
}
func (this *BgpPrefixMatch_LongerThan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpPrefixMatch_LongerThan)
	if !ok {
		that2, ok := that.(BgpPrefixMatch_LongerThan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LongerThan.Equal(that1.LongerThan) {
		return false
	}
	return true
}
func (this *BgpPrefixMatchList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpPrefixMatchList)
	if !ok {
		that2, ok := that.(BgpPrefixMatchList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if !this.Prefixes[i].Equal(that1.Prefixes[i]) {
			return false
		}
	}
	return true
}
func (this *BgpRouteMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteMatch)
	if !ok {
		that2, ok := that.(BgpRouteMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TypeOfMatch == nil {
		if this.TypeOfMatch != nil {
			return false
		}
	} else if this.TypeOfMatch == nil {
		return false
	} else if !this.TypeOfMatch.Equal(that1.TypeOfMatch) {
		return false
	}
	return true
}
func (this *BgpRouteMatch_IpPrefixes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteMatch_IpPrefixes)
	if !ok {
		that2, ok := that.(BgpRouteMatch_IpPrefixes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixes.Equal(that1.IpPrefixes) {
		return false
	}
	return true
}
func (this *BgpRouteMatch_Community) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteMatch_Community)
	if !ok {
		that2, ok := that.(BgpRouteMatch_Community)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Community.Equal(that1.Community) {
		return false
	}
	return true
}
func (this *BgpRouteMatch_AsPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteMatch_AsPath)
	if !ok {
		that2, ok := that.(BgpRouteMatch_AsPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsPath != that1.AsPath {
		return false
	}
	return true
}
func (this *BgpRouteAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteAction)
	if !ok {
		that2, ok := that.(BgpRouteAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ActionType == nil {
		if this.ActionType != nil {
			return false
		}
	} else if this.ActionType == nil {
		return false
	} else if !this.ActionType.Equal(that1.ActionType) {
		return false
	}
	return true
}
func (this *BgpRouteAction_Deny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteAction_Deny)
	if !ok {
		that2, ok := that.(BgpRouteAction_Deny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Deny.Equal(that1.Deny) {
		return false
	}
	return true
}
func (this *BgpRouteAction_Allow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteAction_Allow)
	if !ok {
		that2, ok := that.(BgpRouteAction_Allow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Allow.Equal(that1.Allow) {
		return false
	}
	return true
}
func (this *BgpRouteAction_Community) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteAction_Community)
	if !ok {
		that2, ok := that.(BgpRouteAction_Community)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Community.Equal(that1.Community) {
		return false
	}
	return true
}
func (this *BgpRouteAction_Metric) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteAction_Metric)
	if !ok {
		that2, ok := that.(BgpRouteAction_Metric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Metric != that1.Metric {
		return false
	}
	return true
}
func (this *BgpRouteAction_LocalPreference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteAction_LocalPreference)
	if !ok {
		that2, ok := that.(BgpRouteAction_LocalPreference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LocalPreference != that1.LocalPreference {
		return false
	}
	return true
}
func (this *BgpRouteAction_AsPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteAction_AsPath)
	if !ok {
		that2, ok := that.(BgpRouteAction_AsPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsPath != that1.AsPath {
		return false
	}
	return true
}
func (this *BgpRouteAction_Aggregate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRouteAction_Aggregate)
	if !ok {
		that2, ok := that.(BgpRouteAction_Aggregate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aggregate.Equal(that1.Aggregate) {
		return false
	}
	return true
}
func (this *BgpRoutePolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpRoutePolicy)
	if !ok {
		that2, ok := that.(BgpRoutePolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Match.Equal(that1.Match) {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *BgpCommunity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bgp_routing_policy.BgpCommunity{")
	s = append(s, "Community: "+fmt.Sprintf("%#v", this.Community)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BgpPrefixMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&bgp_routing_policy.BgpPrefixMatch{")
	s = append(s, "IpPrefixes: "+fmt.Sprintf("%#v", this.IpPrefixes)+",\n")
	if this.PrefixLengthMatch != nil {
		s = append(s, "PrefixLengthMatch: "+fmt.Sprintf("%#v", this.PrefixLengthMatch)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BgpPrefixMatch_ExactMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpPrefixMatch_ExactMatch{` +
		`ExactMatch:` + fmt.Sprintf("%#v", this.ExactMatch) + `}`}, ", ")
	return s
}
func (this *BgpPrefixMatch_EqualOrLongerThan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpPrefixMatch_EqualOrLongerThan{` +
		`EqualOrLongerThan:` + fmt.Sprintf("%#v", this.EqualOrLongerThan) + `}`}, ", ")
	return s
}
func (this *BgpPrefixMatch_LongerThan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpPrefixMatch_LongerThan{` +
		`LongerThan:` + fmt.Sprintf("%#v", this.LongerThan) + `}`}, ", ")
	return s
}
func (this *BgpPrefixMatchList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bgp_routing_policy.BgpPrefixMatchList{")
	if this.Prefixes != nil {
		s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BgpRouteMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bgp_routing_policy.BgpRouteMatch{")
	if this.TypeOfMatch != nil {
		s = append(s, "TypeOfMatch: "+fmt.Sprintf("%#v", this.TypeOfMatch)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BgpRouteMatch_IpPrefixes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteMatch_IpPrefixes{` +
		`IpPrefixes:` + fmt.Sprintf("%#v", this.IpPrefixes) + `}`}, ", ")
	return s
}
func (this *BgpRouteMatch_Community) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteMatch_Community{` +
		`Community:` + fmt.Sprintf("%#v", this.Community) + `}`}, ", ")
	return s
}
func (this *BgpRouteMatch_AsPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteMatch_AsPath{` +
		`AsPath:` + fmt.Sprintf("%#v", this.AsPath) + `}`}, ", ")
	return s
}
func (this *BgpRouteAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&bgp_routing_policy.BgpRouteAction{")
	if this.ActionType != nil {
		s = append(s, "ActionType: "+fmt.Sprintf("%#v", this.ActionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BgpRouteAction_Deny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteAction_Deny{` +
		`Deny:` + fmt.Sprintf("%#v", this.Deny) + `}`}, ", ")
	return s
}
func (this *BgpRouteAction_Allow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteAction_Allow{` +
		`Allow:` + fmt.Sprintf("%#v", this.Allow) + `}`}, ", ")
	return s
}
func (this *BgpRouteAction_Community) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteAction_Community{` +
		`Community:` + fmt.Sprintf("%#v", this.Community) + `}`}, ", ")
	return s
}
func (this *BgpRouteAction_Metric) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteAction_Metric{` +
		`Metric:` + fmt.Sprintf("%#v", this.Metric) + `}`}, ", ")
	return s
}
func (this *BgpRouteAction_LocalPreference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteAction_LocalPreference{` +
		`LocalPreference:` + fmt.Sprintf("%#v", this.LocalPreference) + `}`}, ", ")
	return s
}
func (this *BgpRouteAction_AsPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteAction_AsPath{` +
		`AsPath:` + fmt.Sprintf("%#v", this.AsPath) + `}`}, ", ")
	return s
}
func (this *BgpRouteAction_Aggregate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp_routing_policy.BgpRouteAction_Aggregate{` +
		`Aggregate:` + fmt.Sprintf("%#v", this.Aggregate) + `}`}, ", ")
	return s
}
func (this *BgpRoutePolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bgp_routing_policy.BgpRoutePolicy{")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bgp_routing_policy.GlobalSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bgp_routing_policy.CreateSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bgp_routing_policy.ReplaceSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bgp_routing_policy.GetSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BgpCommunity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpCommunity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpCommunity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Community) > 0 {
		for iNdEx := len(m.Community) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Community[iNdEx])
			copy(dAtA[i:], m.Community[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Community[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BgpPrefixMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpPrefixMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpPrefixMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrefixLengthMatch != nil {
		{
			size := m.PrefixLengthMatch.Size()
			i -= size
			if _, err := m.PrefixLengthMatch.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.IpPrefixes) > 0 {
		i -= len(m.IpPrefixes)
		copy(dAtA[i:], m.IpPrefixes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IpPrefixes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BgpPrefixMatch_ExactMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpPrefixMatch_ExactMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExactMatch != nil {
		{
			size, err := m.ExactMatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BgpPrefixMatch_EqualOrLongerThan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpPrefixMatch_EqualOrLongerThan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EqualOrLongerThan != nil {
		{
			size, err := m.EqualOrLongerThan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BgpPrefixMatch_LongerThan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpPrefixMatch_LongerThan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LongerThan != nil {
		{
			size, err := m.LongerThan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *BgpPrefixMatchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpPrefixMatchList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpPrefixMatchList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BgpRouteMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpRouteMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeOfMatch != nil {
		{
			size := m.TypeOfMatch.Size()
			i -= size
			if _, err := m.TypeOfMatch.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BgpRouteMatch_IpPrefixes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteMatch_IpPrefixes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixes != nil {
		{
			size, err := m.IpPrefixes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BgpRouteMatch_Community) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteMatch_Community) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Community != nil {
		{
			size, err := m.Community.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BgpRouteMatch_AsPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteMatch_AsPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AsPath)
	copy(dAtA[i:], m.AsPath)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AsPath)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *BgpRouteAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpRouteAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionType != nil {
		{
			size := m.ActionType.Size()
			i -= size
			if _, err := m.ActionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BgpRouteAction_Deny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteAction_Deny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Deny != nil {
		{
			size, err := m.Deny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BgpRouteAction_Allow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteAction_Allow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Allow != nil {
		{
			size, err := m.Allow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BgpRouteAction_Community) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteAction_Community) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Community != nil {
		{
			size, err := m.Community.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BgpRouteAction_Metric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteAction_Metric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Metric))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *BgpRouteAction_LocalPreference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteAction_LocalPreference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.LocalPreference))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *BgpRouteAction_AsPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteAction_AsPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AsPath)
	copy(dAtA[i:], m.AsPath)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AsPath)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *BgpRouteAction_Aggregate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRouteAction_Aggregate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aggregate != nil {
		{
			size, err := m.Aggregate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *BgpRoutePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpRoutePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpRoutePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BgpCommunity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Community) > 0 {
		for _, s := range m.Community {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *BgpPrefixMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpPrefixes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrefixLengthMatch != nil {
		n += m.PrefixLengthMatch.Size()
	}
	return n
}

func (m *BgpPrefixMatch_ExactMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExactMatch != nil {
		l = m.ExactMatch.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpPrefixMatch_EqualOrLongerThan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EqualOrLongerThan != nil {
		l = m.EqualOrLongerThan.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpPrefixMatch_LongerThan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LongerThan != nil {
		l = m.LongerThan.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpPrefixMatchList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, e := range m.Prefixes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *BgpRouteMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeOfMatch != nil {
		n += m.TypeOfMatch.Size()
	}
	return n
}

func (m *BgpRouteMatch_IpPrefixes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixes != nil {
		l = m.IpPrefixes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpRouteMatch_Community) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Community != nil {
		l = m.Community.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpRouteMatch_AsPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AsPath)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *BgpRouteAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != nil {
		n += m.ActionType.Size()
	}
	return n
}

func (m *BgpRouteAction_Deny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deny != nil {
		l = m.Deny.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpRouteAction_Allow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Allow != nil {
		l = m.Allow.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpRouteAction_Community) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Community != nil {
		l = m.Community.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpRouteAction_Metric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Metric))
	return n
}
func (m *BgpRouteAction_LocalPreference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LocalPreference))
	return n
}
func (m *BgpRouteAction_AsPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AsPath)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *BgpRouteAction_Aggregate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aggregate != nil {
		l = m.Aggregate.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpRoutePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BgpCommunity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpCommunity{`,
		`Community:` + fmt.Sprintf("%v", this.Community) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPrefixMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpPrefixMatch{`,
		`IpPrefixes:` + fmt.Sprintf("%v", this.IpPrefixes) + `,`,
		`PrefixLengthMatch:` + fmt.Sprintf("%v", this.PrefixLengthMatch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPrefixMatch_ExactMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpPrefixMatch_ExactMatch{`,
		`ExactMatch:` + strings.Replace(fmt.Sprintf("%v", this.ExactMatch), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPrefixMatch_EqualOrLongerThan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpPrefixMatch_EqualOrLongerThan{`,
		`EqualOrLongerThan:` + strings.Replace(fmt.Sprintf("%v", this.EqualOrLongerThan), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPrefixMatch_LongerThan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpPrefixMatch_LongerThan{`,
		`LongerThan:` + strings.Replace(fmt.Sprintf("%v", this.LongerThan), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPrefixMatchList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPrefixes := "[]*BgpPrefixMatch{"
	for _, f := range this.Prefixes {
		repeatedStringForPrefixes += strings.Replace(f.String(), "BgpPrefixMatch", "BgpPrefixMatch", 1) + ","
	}
	repeatedStringForPrefixes += "}"
	s := strings.Join([]string{`&BgpPrefixMatchList{`,
		`Prefixes:` + repeatedStringForPrefixes + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteMatch{`,
		`TypeOfMatch:` + fmt.Sprintf("%v", this.TypeOfMatch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteMatch_IpPrefixes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteMatch_IpPrefixes{`,
		`IpPrefixes:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixes), "BgpPrefixMatchList", "BgpPrefixMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteMatch_Community) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteMatch_Community{`,
		`Community:` + strings.Replace(fmt.Sprintf("%v", this.Community), "BgpCommunity", "BgpCommunity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteMatch_AsPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteMatch_AsPath{`,
		`AsPath:` + fmt.Sprintf("%v", this.AsPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteAction{`,
		`ActionType:` + fmt.Sprintf("%v", this.ActionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteAction_Deny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteAction_Deny{`,
		`Deny:` + strings.Replace(fmt.Sprintf("%v", this.Deny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteAction_Allow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteAction_Allow{`,
		`Allow:` + strings.Replace(fmt.Sprintf("%v", this.Allow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteAction_Community) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteAction_Community{`,
		`Community:` + strings.Replace(fmt.Sprintf("%v", this.Community), "BgpCommunity", "BgpCommunity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteAction_Metric) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteAction_Metric{`,
		`Metric:` + fmt.Sprintf("%v", this.Metric) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteAction_LocalPreference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteAction_LocalPreference{`,
		`LocalPreference:` + fmt.Sprintf("%v", this.LocalPreference) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteAction_AsPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteAction_AsPath{`,
		`AsPath:` + fmt.Sprintf("%v", this.AsPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouteAction_Aggregate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouteAction_Aggregate{`,
		`Aggregate:` + strings.Replace(fmt.Sprintf("%v", this.Aggregate), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRoutePolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRoutePolicy{`,
		`Match:` + strings.Replace(this.Match.String(), "BgpRouteMatch", "BgpRouteMatch", 1) + `,`,
		`Action:` + strings.Replace(this.Action.String(), "BgpRouteAction", "BgpRouteAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*BgpRoutePolicy{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "BgpRoutePolicy", "BgpRoutePolicy", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*BgpRoutePolicy{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "BgpRoutePolicy", "BgpRoutePolicy", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*BgpRoutePolicy{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "BgpRoutePolicy", "BgpRoutePolicy", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*BgpRoutePolicy{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "BgpRoutePolicy", "BgpRoutePolicy", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BgpCommunity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpCommunity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpCommunity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Community", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Community = append(m.Community, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpPrefixMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpPrefixMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpPrefixMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpPrefixes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PrefixLengthMatch = &BgpPrefixMatch_ExactMatch{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqualOrLongerThan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PrefixLengthMatch = &BgpPrefixMatch_EqualOrLongerThan{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongerThan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PrefixLengthMatch = &BgpPrefixMatch_LongerThan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpPrefixMatchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpPrefixMatchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpPrefixMatchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, &BgpPrefixMatch{})
			if err := m.Prefixes[len(m.Prefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpRouteMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpRouteMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpRouteMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BgpPrefixMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeOfMatch = &BgpRouteMatch_IpPrefixes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Community", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BgpCommunity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeOfMatch = &BgpRouteMatch_Community{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeOfMatch = &BgpRouteMatch_AsPath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpRouteAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpRouteAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpRouteAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &BgpRouteAction_Deny{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &BgpRouteAction_Allow{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Community", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BgpCommunity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &BgpRouteAction_Community{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActionType = &BgpRouteAction_Metric{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPreference", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActionType = &BgpRouteAction_LocalPreference{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = &BgpRouteAction_AsPath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &BgpRouteAction_Aggregate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpRoutePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpRoutePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpRoutePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &BgpRouteMatch{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &BgpRouteAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &BgpRoutePolicy{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &BgpRoutePolicy{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &BgpRoutePolicy{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &BgpRoutePolicy{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

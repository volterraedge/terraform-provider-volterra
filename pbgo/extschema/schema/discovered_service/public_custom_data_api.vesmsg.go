// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package discovered_service

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *DiscoveredServiceHealthStatusRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DiscoveredServiceHealthStatusRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DiscoveredServiceHealthStatusRequest) DeepCopy() *DiscoveredServiceHealthStatusRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DiscoveredServiceHealthStatusRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DiscoveredServiceHealthStatusRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DiscoveredServiceHealthStatusRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DiscoveredServiceHealthStatusRequestValidator().Validate(ctx, m, opts...)
}

type ValidateDiscoveredServiceHealthStatusRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDiscoveredServiceHealthStatusRequest) NamespaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace")
	}

	return validatorFn, nil
}

func (v *ValidateDiscoveredServiceHealthStatusRequest) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDiscoveredServiceHealthStatusRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DiscoveredServiceHealthStatusRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DiscoveredServiceHealthStatusRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDiscoveredServiceHealthStatusRequestValidator = func() *ValidateDiscoveredServiceHealthStatusRequest {
	v := &ValidateDiscoveredServiceHealthStatusRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespace := v.NamespaceValidationRuleHandler
	rulesNamespace := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNamespace(rulesNamespace)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DiscoveredServiceHealthStatusRequest.namespace: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DiscoveredServiceHealthStatusRequest.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func DiscoveredServiceHealthStatusRequestValidator() db.Validator {
	return DefaultDiscoveredServiceHealthStatusRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *DiscoveredServiceHealthStatusResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DiscoveredServiceHealthStatusResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DiscoveredServiceHealthStatusResponse) DeepCopy() *DiscoveredServiceHealthStatusResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DiscoveredServiceHealthStatusResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DiscoveredServiceHealthStatusResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DiscoveredServiceHealthStatusResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DiscoveredServiceHealthStatusResponseValidator().Validate(ctx, m, opts...)
}

type ValidateDiscoveredServiceHealthStatusResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDiscoveredServiceHealthStatusResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DiscoveredServiceHealthStatusResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DiscoveredServiceHealthStatusResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		for idx, item := range m.GetStatus() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["virtual_server_pool_members_health"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_server_pool_members_health"))
		if err := fv(ctx, m.GetVirtualServerPoolMembersHealth(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDiscoveredServiceHealthStatusResponseValidator = func() *ValidateDiscoveredServiceHealthStatusResponse {
	v := &ValidateDiscoveredServiceHealthStatusResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DiscoveredServiceHealthStatusResponseValidator() db.Validator {
	return DefaultDiscoveredServiceHealthStatusResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *VirtualServerPoolHealthStatusListResponseItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VirtualServerPoolHealthStatusListResponseItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VirtualServerPoolHealthStatusListResponseItem) DeepCopy() *VirtualServerPoolHealthStatusListResponseItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VirtualServerPoolHealthStatusListResponseItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VirtualServerPoolHealthStatusListResponseItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VirtualServerPoolHealthStatusListResponseItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VirtualServerPoolHealthStatusListResponseItemValidator().Validate(ctx, m, opts...)
}

type ValidateVirtualServerPoolHealthStatusListResponseItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVirtualServerPoolHealthStatusListResponseItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VirtualServerPoolHealthStatusListResponseItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VirtualServerPoolHealthStatusListResponseItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		for idx, item := range m.GetStatus() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVirtualServerPoolHealthStatusListResponseItemValidator = func() *ValidateVirtualServerPoolHealthStatusListResponseItem {
	v := &ValidateVirtualServerPoolHealthStatusListResponseItem{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func VirtualServerPoolHealthStatusListResponseItemValidator() db.Validator {
	return DefaultVirtualServerPoolHealthStatusListResponseItemValidator
}

// augmented methods on protoc/std generated struct

func (m *VirtualServerPoolMemberHealth) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VirtualServerPoolMemberHealth) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VirtualServerPoolMemberHealth) DeepCopy() *VirtualServerPoolMemberHealth {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VirtualServerPoolMemberHealth{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VirtualServerPoolMemberHealth) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VirtualServerPoolMemberHealth) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VirtualServerPoolMemberHealthValidator().Validate(ctx, m, opts...)
}

type ValidateVirtualServerPoolMemberHealth struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVirtualServerPoolMemberHealth) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VirtualServerPoolMemberHealth)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VirtualServerPoolMemberHealth got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["virtual_server_pool_members"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_server_pool_members"))
		for idx, item := range m.GetVirtualServerPoolMembers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVirtualServerPoolMemberHealthValidator = func() *ValidateVirtualServerPoolMemberHealth {
	v := &ValidateVirtualServerPoolMemberHealth{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func VirtualServerPoolMemberHealthValidator() db.Validator {
	return DefaultVirtualServerPoolMemberHealthValidator
}

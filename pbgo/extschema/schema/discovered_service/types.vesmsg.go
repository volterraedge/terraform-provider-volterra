// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package discovered_service

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHttpLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServiceTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServiceTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTcpLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTcpLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetHttpLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetHttpLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("CreateSpecType.http_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("http_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "http_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "http_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetHttpLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetHttpLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}
	for i, vref := range m.GetHttpLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("CreateSpecType.http_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "http_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetServiceTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServiceType() == nil {
		return nil, nil
	}
	switch m.GetServiceType().(type) {
	case *CreateSpecType_VirtualServer:

		drInfos, err := m.GetVirtualServer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVirtualServer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "virtual_server." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetTcpLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetTcpLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("CreateSpecType.tcp_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("tcp_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "tcp_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "tcp_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetTcpLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetTcpLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "tcp_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: tcp_loadbalancer")
	}
	for i, vref := range m.GetTcpLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("CreateSpecType.tcp_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "tcp_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ServiceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) VisibilityActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for visibility_action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("http_load_balancers"))
		for idx, item := range m.GetHttpLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_type"]; exists {
		val := m.GetServiceType()
		vOpts := append(opts,
			db.WithValidateField("service_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceType().(type) {
	case *CreateSpecType_VirtualServer:
		if fv, exists := v.FldValidators["service_type.virtual_server"]; exists {
			val := m.GetServiceType().(*CreateSpecType_VirtualServer).VirtualServer
			vOpts := append(opts,
				db.WithValidateField("service_type"),
				db.WithValidateField("virtual_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tcp_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("tcp_load_balancers"))
		for idx, item := range m.GetTcpLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["visibility_action_choice"]; exists {
		val := m.GetVisibilityActionChoice()
		vOpts := append(opts,
			db.WithValidateField("visibility_action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVisibilityActionChoice().(type) {
	case *CreateSpecType_VisibilityEnabled:
		if fv, exists := v.FldValidators["visibility_action_choice.visibility_enabled"]; exists {
			val := m.GetVisibilityActionChoice().(*CreateSpecType_VisibilityEnabled).VisibilityEnabled
			vOpts := append(opts,
				db.WithValidateField("visibility_action_choice"),
				db.WithValidateField("visibility_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_VisibilityDisabled:
		if fv, exists := v.FldValidators["visibility_action_choice.visibility_disabled"]; exists {
			val := m.GetVisibilityActionChoice().(*CreateSpecType_VisibilityDisabled).VisibilityDisabled
			vOpts := append(opts,
				db.WithValidateField("visibility_action_choice"),
				db.WithValidateField("visibility_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceType := v.ServiceTypeValidationRuleHandler
	rulesServiceType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceType(rulesServiceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.service_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_type"] = vFn

	vrhVisibilityActionChoice := v.VisibilityActionChoiceValidationRuleHandler
	rulesVisibilityActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVisibilityActionChoice(rulesVisibilityActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.visibility_action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["visibility_action_choice"] = vFn

	v.FldValidators["service_type.virtual_server"] = VirtualServerValidator().Validate

	v.FldValidators["http_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["tcp_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHttpLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServiceTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServiceTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTcpLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTcpLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetHttpLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetHttpLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.http_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("http_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "http_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "http_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetHttpLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetHttpLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}
	for i, vref := range m.GetHttpLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.http_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "http_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetServiceTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServiceType() == nil {
		return nil, nil
	}
	switch m.GetServiceType().(type) {
	case *GetSpecType_VirtualServer:

		drInfos, err := m.GetVirtualServer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVirtualServer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "virtual_server." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetTcpLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetTcpLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.tcp_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("tcp_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "tcp_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "tcp_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetTcpLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetTcpLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "tcp_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: tcp_loadbalancer")
	}
	for i, vref := range m.GetTcpLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.tcp_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "tcp_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ServiceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) VisibilityActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for visibility_action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("http_load_balancers"))
		for idx, item := range m.GetHttpLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_type"]; exists {
		val := m.GetServiceType()
		vOpts := append(opts,
			db.WithValidateField("service_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceType().(type) {
	case *GetSpecType_VirtualServer:
		if fv, exists := v.FldValidators["service_type.virtual_server"]; exists {
			val := m.GetServiceType().(*GetSpecType_VirtualServer).VirtualServer
			vOpts := append(opts,
				db.WithValidateField("service_type"),
				db.WithValidateField("virtual_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tcp_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("tcp_load_balancers"))
		for idx, item := range m.GetTcpLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["visibility_action_choice"]; exists {
		val := m.GetVisibilityActionChoice()
		vOpts := append(opts,
			db.WithValidateField("visibility_action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVisibilityActionChoice().(type) {
	case *GetSpecType_VisibilityEnabled:
		if fv, exists := v.FldValidators["visibility_action_choice.visibility_enabled"]; exists {
			val := m.GetVisibilityActionChoice().(*GetSpecType_VisibilityEnabled).VisibilityEnabled
			vOpts := append(opts,
				db.WithValidateField("visibility_action_choice"),
				db.WithValidateField("visibility_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_VisibilityDisabled:
		if fv, exists := v.FldValidators["visibility_action_choice.visibility_disabled"]; exists {
			val := m.GetVisibilityActionChoice().(*GetSpecType_VisibilityDisabled).VisibilityDisabled
			vOpts := append(opts,
				db.WithValidateField("visibility_action_choice"),
				db.WithValidateField("visibility_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceType := v.ServiceTypeValidationRuleHandler
	rulesServiceType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceType(rulesServiceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.service_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_type"] = vFn

	vrhVisibilityActionChoice := v.VisibilityActionChoiceValidationRuleHandler
	rulesVisibilityActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVisibilityActionChoice(rulesVisibilityActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.visibility_action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["visibility_action_choice"] = vFn

	v.FldValidators["service_type.virtual_server"] = VirtualServerValidator().Validate

	v.FldValidators["http_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["tcp_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHttpLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInternalVirtualHostDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInternalVirtualHostDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServiceTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServiceTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTcpLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTcpLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetHttpLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetHttpLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.http_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("http_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "http_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "http_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetHttpLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetHttpLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}
	for i, vref := range m.GetHttpLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.http_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "http_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetInternalVirtualHostDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetInternalVirtualHost()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("bigip_virtual_server.Object")
	dri := db.DRefInfo{
		RefdType:   "bigip_virtual_server.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "internal_virtual_host",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetInternalVirtualHostDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetInternalVirtualHostDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "bigip_virtual_server.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: bigip_virtual_server")
	}

	vref := m.GetInternalVirtualHost()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "bigip_virtual_server.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetServiceTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServiceType() == nil {
		return nil, nil
	}
	switch m.GetServiceType().(type) {
	case *GlobalSpecType_VirtualServer:

		drInfos, err := m.GetVirtualServer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVirtualServer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "virtual_server." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetTcpLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetTcpLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.tcp_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("tcp_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "tcp_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "tcp_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetTcpLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetTcpLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "tcp_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: tcp_loadbalancer")
	}
	for i, vref := range m.GetTcpLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.tcp_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "tcp_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ServiceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VisibilityActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for visibility_action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("http_load_balancers"))
		for idx, item := range m.GetHttpLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["internal_virtual_host"]; exists {

		vOpts := append(opts, db.WithValidateField("internal_virtual_host"))
		if err := fv(ctx, m.GetInternalVirtualHost(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_type"]; exists {
		val := m.GetServiceType()
		vOpts := append(opts,
			db.WithValidateField("service_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceType().(type) {
	case *GlobalSpecType_VirtualServer:
		if fv, exists := v.FldValidators["service_type.virtual_server"]; exists {
			val := m.GetServiceType().(*GlobalSpecType_VirtualServer).VirtualServer
			vOpts := append(opts,
				db.WithValidateField("service_type"),
				db.WithValidateField("virtual_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tcp_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("tcp_load_balancers"))
		for idx, item := range m.GetTcpLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["visibility_action_choice"]; exists {
		val := m.GetVisibilityActionChoice()
		vOpts := append(opts,
			db.WithValidateField("visibility_action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVisibilityActionChoice().(type) {
	case *GlobalSpecType_VisibilityEnabled:
		if fv, exists := v.FldValidators["visibility_action_choice.visibility_enabled"]; exists {
			val := m.GetVisibilityActionChoice().(*GlobalSpecType_VisibilityEnabled).VisibilityEnabled
			vOpts := append(opts,
				db.WithValidateField("visibility_action_choice"),
				db.WithValidateField("visibility_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_VisibilityDisabled:
		if fv, exists := v.FldValidators["visibility_action_choice.visibility_disabled"]; exists {
			val := m.GetVisibilityActionChoice().(*GlobalSpecType_VisibilityDisabled).VisibilityDisabled
			vOpts := append(opts,
				db.WithValidateField("visibility_action_choice"),
				db.WithValidateField("visibility_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceType := v.ServiceTypeValidationRuleHandler
	rulesServiceType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceType(rulesServiceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.service_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_type"] = vFn

	vrhVisibilityActionChoice := v.VisibilityActionChoiceValidationRuleHandler
	rulesVisibilityActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVisibilityActionChoice(rulesVisibilityActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.visibility_action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["visibility_action_choice"] = vFn

	v.FldValidators["service_type.virtual_server"] = VirtualServerValidator().Validate

	v.FldValidators["http_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["tcp_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["internal_virtual_host"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHttpLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServiceTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServiceTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTcpLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTcpLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetHttpLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetHttpLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.http_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("http_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "http_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "http_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetHttpLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetHttpLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}
	for i, vref := range m.GetHttpLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.http_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "http_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetServiceTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServiceType() == nil {
		return nil, nil
	}
	switch m.GetServiceType().(type) {
	case *ReplaceSpecType_VirtualServer:

		drInfos, err := m.GetVirtualServer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetVirtualServer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "virtual_server." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetTcpLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetTcpLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.tcp_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("tcp_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "tcp_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "tcp_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetTcpLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetTcpLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "tcp_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: tcp_loadbalancer")
	}
	for i, vref := range m.GetTcpLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.tcp_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "tcp_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ServiceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) VisibilityActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for visibility_action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("http_load_balancers"))
		for idx, item := range m.GetHttpLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_type"]; exists {
		val := m.GetServiceType()
		vOpts := append(opts,
			db.WithValidateField("service_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceType().(type) {
	case *ReplaceSpecType_VirtualServer:
		if fv, exists := v.FldValidators["service_type.virtual_server"]; exists {
			val := m.GetServiceType().(*ReplaceSpecType_VirtualServer).VirtualServer
			vOpts := append(opts,
				db.WithValidateField("service_type"),
				db.WithValidateField("virtual_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tcp_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("tcp_load_balancers"))
		for idx, item := range m.GetTcpLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["visibility_action_choice"]; exists {
		val := m.GetVisibilityActionChoice()
		vOpts := append(opts,
			db.WithValidateField("visibility_action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVisibilityActionChoice().(type) {
	case *ReplaceSpecType_VisibilityEnabled:
		if fv, exists := v.FldValidators["visibility_action_choice.visibility_enabled"]; exists {
			val := m.GetVisibilityActionChoice().(*ReplaceSpecType_VisibilityEnabled).VisibilityEnabled
			vOpts := append(opts,
				db.WithValidateField("visibility_action_choice"),
				db.WithValidateField("visibility_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_VisibilityDisabled:
		if fv, exists := v.FldValidators["visibility_action_choice.visibility_disabled"]; exists {
			val := m.GetVisibilityActionChoice().(*ReplaceSpecType_VisibilityDisabled).VisibilityDisabled
			vOpts := append(opts,
				db.WithValidateField("visibility_action_choice"),
				db.WithValidateField("visibility_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceType := v.ServiceTypeValidationRuleHandler
	rulesServiceType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceType(rulesServiceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.service_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_type"] = vFn

	vrhVisibilityActionChoice := v.VisibilityActionChoiceValidationRuleHandler
	rulesVisibilityActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVisibilityActionChoice(rulesVisibilityActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.visibility_action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["visibility_action_choice"] = vFn

	v.FldValidators["service_type.virtual_server"] = VirtualServerValidator().Validate

	v.FldValidators["http_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["tcp_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VirtualServer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VirtualServer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VirtualServer) DeepCopy() *VirtualServer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VirtualServer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VirtualServer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VirtualServer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VirtualServerValidator().Validate(ctx, m, opts...)
}

func (m *VirtualServer) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDiscoveryObjectDRefInfo()

}

func (m *VirtualServer) GetDiscoveryObjectDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetDiscoveryObject()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("discovery.Object")
	dri := db.DRefInfo{
		RefdType:   "discovery.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "discovery_object",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetDiscoveryObjectDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *VirtualServer) GetDiscoveryObjectDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "discovery.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: discovery")
	}

	vref := m.GetDiscoveryObject()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "discovery.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateVirtualServer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVirtualServer) PartitionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for partition")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) StatusValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(VirtualServerStatus)
		return int32(i)
	}
	// VirtualServerStatus_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, VirtualServerStatus_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for status")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) CbipClusterValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cbip_cluster")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) BigipVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bigip_version")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) IpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_address")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) DescriptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for description")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) EnabledStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(VirtualServerEnabledState)
		return int32(i)
	}
	// VirtualServerEnabledState_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, VirtualServerEnabledState_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enabled_state")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) MgmtIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mgmt_ip")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) ServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualServer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VirtualServer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VirtualServer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bigip_version"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_version"))
		if err := fv(ctx, m.GetBigipVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cbip_cluster"]; exists {

		vOpts := append(opts, db.WithValidateField("cbip_cluster"))
		if err := fv(ctx, m.GetCbipCluster(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["discovery_object"]; exists {

		vOpts := append(opts, db.WithValidateField("discovery_object"))
		if err := fv(ctx, m.GetDiscoveryObject(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["enabled_state"]; exists {

		vOpts := append(opts, db.WithValidateField("enabled_state"))
		if err := fv(ctx, m.GetEnabledState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_address"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_address"))
		if err := fv(ctx, m.GetIpAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mgmt_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("mgmt_ip"))
		if err := fv(ctx, m.GetMgmtIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["partition"]; exists {

		vOpts := append(opts, db.WithValidateField("partition"))
		if err := fv(ctx, m.GetPartition(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_name"]; exists {

		vOpts := append(opts, db.WithValidateField("server_name"))
		if err := fv(ctx, m.GetServerName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVirtualServerValidator = func() *ValidateVirtualServer {
	v := &ValidateVirtualServer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPartition := v.PartitionValidationRuleHandler
	rulesPartition := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
	}
	vFn, err = vrhPartition(rulesPartition)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.partition: %s", err)
		panic(errMsg)
	}
	v.FldValidators["partition"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhStatus := v.StatusValidationRuleHandler
	rulesStatus := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhStatus(rulesStatus)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.status: %s", err)
		panic(errMsg)
	}
	v.FldValidators["status"] = vFn

	vrhCbipCluster := v.CbipClusterValidationRuleHandler
	rulesCbipCluster := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
	}
	vFn, err = vrhCbipCluster(rulesCbipCluster)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.cbip_cluster: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cbip_cluster"] = vFn

	vrhBigipVersion := v.BigipVersionValidationRuleHandler
	rulesBigipVersion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
	}
	vFn, err = vrhBigipVersion(rulesBigipVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.bigip_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bigip_version"] = vFn

	vrhIpAddress := v.IpAddressValidationRuleHandler
	rulesIpAddress := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.ip":        "true",
	}
	vFn, err = vrhIpAddress(rulesIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.ip_address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_address"] = vFn

	vrhDescription := v.DescriptionValidationRuleHandler
	rulesDescription := map[string]string{
		"ves.io.schema.rules.string.max_len": "1024",
	}
	vFn, err = vrhDescription(rulesDescription)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.description: %s", err)
		panic(errMsg)
	}
	v.FldValidators["description"] = vFn

	vrhEnabledState := v.EnabledStateValidationRuleHandler
	rulesEnabledState := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEnabledState(rulesEnabledState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.enabled_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enabled_state"] = vFn

	vrhMgmtIp := v.MgmtIpValidationRuleHandler
	rulesMgmtIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.ip":        "true",
	}
	vFn, err = vrhMgmtIp(rulesMgmtIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.mgmt_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mgmt_ip"] = vFn

	vrhServerName := v.ServerNameValidationRuleHandler
	rulesServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "1024",
	}
	vFn, err = vrhServerName(rulesServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualServer.server_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name"] = vFn

	v.FldValidators["discovery_object"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func VirtualServerValidator() db.Validator {
	return DefaultVirtualServerValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetServiceTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServiceType.(type) {
	case nil:
		o.ServiceType = nil

	case *CreateSpecType_VirtualServer:
		o.ServiceType = &GlobalSpecType_VirtualServer{VirtualServer: of.VirtualServer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetServiceTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServiceType.(type) {
	case nil:
		r.ServiceType = nil

	case *GlobalSpecType_VirtualServer:
		r.ServiceType = &CreateSpecType_VirtualServer{VirtualServer: of.VirtualServer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetVisibilityActionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.VisibilityActionChoice.(type) {
	case nil:
		o.VisibilityActionChoice = nil

	case *CreateSpecType_VisibilityDisabled:
		o.VisibilityActionChoice = &GlobalSpecType_VisibilityDisabled{VisibilityDisabled: of.VisibilityDisabled}

	case *CreateSpecType_VisibilityEnabled:
		o.VisibilityActionChoice = &GlobalSpecType_VisibilityEnabled{VisibilityEnabled: of.VisibilityEnabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetVisibilityActionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.VisibilityActionChoice.(type) {
	case nil:
		r.VisibilityActionChoice = nil

	case *GlobalSpecType_VisibilityDisabled:
		r.VisibilityActionChoice = &CreateSpecType_VisibilityDisabled{VisibilityDisabled: of.VisibilityDisabled}

	case *GlobalSpecType_VisibilityEnabled:
		r.VisibilityActionChoice = &CreateSpecType_VisibilityEnabled{VisibilityEnabled: of.VisibilityEnabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.HttpLoadBalancers = f.GetHttpLoadBalancers()
	m.GetServiceTypeFromGlobalSpecType(f)
	m.TcpLoadBalancers = f.GetTcpLoadBalancers()
	m.GetVisibilityActionChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.HttpLoadBalancers = m1.HttpLoadBalancers
	m1.SetServiceTypeToGlobalSpecType(f)
	f.TcpLoadBalancers = m1.TcpLoadBalancers
	m1.SetVisibilityActionChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetServiceTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServiceType.(type) {
	case nil:
		o.ServiceType = nil

	case *GetSpecType_VirtualServer:
		o.ServiceType = &GlobalSpecType_VirtualServer{VirtualServer: of.VirtualServer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetServiceTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServiceType.(type) {
	case nil:
		r.ServiceType = nil

	case *GlobalSpecType_VirtualServer:
		r.ServiceType = &GetSpecType_VirtualServer{VirtualServer: of.VirtualServer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetVisibilityActionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.VisibilityActionChoice.(type) {
	case nil:
		o.VisibilityActionChoice = nil

	case *GetSpecType_VisibilityDisabled:
		o.VisibilityActionChoice = &GlobalSpecType_VisibilityDisabled{VisibilityDisabled: of.VisibilityDisabled}

	case *GetSpecType_VisibilityEnabled:
		o.VisibilityActionChoice = &GlobalSpecType_VisibilityEnabled{VisibilityEnabled: of.VisibilityEnabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetVisibilityActionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.VisibilityActionChoice.(type) {
	case nil:
		r.VisibilityActionChoice = nil

	case *GlobalSpecType_VisibilityDisabled:
		r.VisibilityActionChoice = &GetSpecType_VisibilityDisabled{VisibilityDisabled: of.VisibilityDisabled}

	case *GlobalSpecType_VisibilityEnabled:
		r.VisibilityActionChoice = &GetSpecType_VisibilityEnabled{VisibilityEnabled: of.VisibilityEnabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.HttpLoadBalancers = f.GetHttpLoadBalancers()
	m.GetServiceTypeFromGlobalSpecType(f)
	m.TcpLoadBalancers = f.GetTcpLoadBalancers()
	m.GetVisibilityActionChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.HttpLoadBalancers = m1.HttpLoadBalancers
	m1.SetServiceTypeToGlobalSpecType(f)
	f.TcpLoadBalancers = m1.TcpLoadBalancers
	m1.SetVisibilityActionChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetServiceTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServiceType.(type) {
	case nil:
		o.ServiceType = nil

	case *ReplaceSpecType_VirtualServer:
		o.ServiceType = &GlobalSpecType_VirtualServer{VirtualServer: of.VirtualServer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetServiceTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServiceType.(type) {
	case nil:
		r.ServiceType = nil

	case *GlobalSpecType_VirtualServer:
		r.ServiceType = &ReplaceSpecType_VirtualServer{VirtualServer: of.VirtualServer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetVisibilityActionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.VisibilityActionChoice.(type) {
	case nil:
		o.VisibilityActionChoice = nil

	case *ReplaceSpecType_VisibilityDisabled:
		o.VisibilityActionChoice = &GlobalSpecType_VisibilityDisabled{VisibilityDisabled: of.VisibilityDisabled}

	case *ReplaceSpecType_VisibilityEnabled:
		o.VisibilityActionChoice = &GlobalSpecType_VisibilityEnabled{VisibilityEnabled: of.VisibilityEnabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetVisibilityActionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.VisibilityActionChoice.(type) {
	case nil:
		r.VisibilityActionChoice = nil

	case *GlobalSpecType_VisibilityDisabled:
		r.VisibilityActionChoice = &ReplaceSpecType_VisibilityDisabled{VisibilityDisabled: of.VisibilityDisabled}

	case *GlobalSpecType_VisibilityEnabled:
		r.VisibilityActionChoice = &ReplaceSpecType_VisibilityEnabled{VisibilityEnabled: of.VisibilityEnabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.HttpLoadBalancers = f.GetHttpLoadBalancers()
	m.GetServiceTypeFromGlobalSpecType(f)
	m.TcpLoadBalancers = f.GetTcpLoadBalancers()
	m.GetVisibilityActionChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.HttpLoadBalancers = m1.HttpLoadBalancers
	m1.SetServiceTypeToGlobalSpecType(f)
	f.TcpLoadBalancers = m1.TcpLoadBalancers
	m1.SetVisibilityActionChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

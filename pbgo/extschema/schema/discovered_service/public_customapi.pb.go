// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/discovered_service/public_customapi.proto

// Discovered Service Custom API
//
// x-displayName: "Discovered Services"
// Custom API's for discovered services

package discovered_service

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EnableVisibilityRequest
//
// x-displayName: "Enable visibility"
// Enable visibility of the discovered service in all workspaces like WAAP, App Connect, etc
type EnableVisibilityRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the discovered service for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Service Name
	//
	// x-displayName: "Service Name"
	// x-example: "vs1"
	// x-required
	// Identifies the discovered service name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *EnableVisibilityRequest) Reset()      { *m = EnableVisibilityRequest{} }
func (*EnableVisibilityRequest) ProtoMessage() {}
func (*EnableVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{0}
}
func (m *EnableVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableVisibilityRequest.Merge(m, src)
}
func (m *EnableVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnableVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableVisibilityRequest proto.InternalMessageInfo

func (m *EnableVisibilityRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EnableVisibilityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// EnableVisibilityResponse
//
// x-displayName: "Enable Visibility Response"
// Response to the Enable Visibility request
type EnableVisibilityResponse struct {
	// The virtual host of specific type created as part of the visibility enablement workflow
	//
	// x-displayName: "Virtual Host corresponding to the discovered service"
	// Reference to the virtual host
	VirtualHostRef *views.ObjectRefType `protobuf:"bytes,2,opt,name=virtual_host_ref,json=virtualHostRef,proto3" json:"virtual_host_ref,omitempty"`
}

func (m *EnableVisibilityResponse) Reset()      { *m = EnableVisibilityResponse{} }
func (*EnableVisibilityResponse) ProtoMessage() {}
func (*EnableVisibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{1}
}
func (m *EnableVisibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableVisibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableVisibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableVisibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableVisibilityResponse.Merge(m, src)
}
func (m *EnableVisibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *EnableVisibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableVisibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnableVisibilityResponse proto.InternalMessageInfo

func (m *EnableVisibilityResponse) GetVirtualHostRef() *views.ObjectRefType {
	if m != nil {
		return m.VirtualHostRef
	}
	return nil
}

// DisableVisibilityRequest
//
// x-displayName: "Disable visibility on the discovered service"
// Disable visibility on the discovered service
type DisableVisibilityRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the discovered service for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Service Name
	//
	// x-displayName: "Service Name"
	// x-example: "vs1"
	// x-required
	// Identifies the discovered service name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DisableVisibilityRequest) Reset()      { *m = DisableVisibilityRequest{} }
func (*DisableVisibilityRequest) ProtoMessage() {}
func (*DisableVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{2}
}
func (m *DisableVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisableVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisableVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisableVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableVisibilityRequest.Merge(m, src)
}
func (m *DisableVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *DisableVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableVisibilityRequest proto.InternalMessageInfo

func (m *DisableVisibilityRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DisableVisibilityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DisableVisibilityResponse
//
// x-displayName: "Disable Visibility Response"
// Response to the Disable Visibility request
type DisableVisibilityResponse struct {
}

func (m *DisableVisibilityResponse) Reset()      { *m = DisableVisibilityResponse{} }
func (*DisableVisibilityResponse) ProtoMessage() {}
func (*DisableVisibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{3}
}
func (m *DisableVisibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisableVisibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisableVisibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisableVisibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableVisibilityResponse.Merge(m, src)
}
func (m *DisableVisibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *DisableVisibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableVisibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DisableVisibilityResponse proto.InternalMessageInfo

// ListServicesRequest
//
// x-displayName: "List Request"
// ListServicesRequest to list the services of specific type
type ListServicesRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the discovered service for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Service type
	//
	// x-displayName: "Service Type"
	// x-example: "bigip_virtual_server"
	// x-required
	// Identifies the discovered service type
	ServiceType string `protobuf:"bytes,2,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Discovery name filter
	//
	// x-displayName: "Discovery Name Filter"
	// x-example: "disc-cbip-1"
	// Filter results to only include items referencing this discovery object name
	DiscoveryName string `protobuf:"bytes,3,opt,name=discovery_name,json=discoveryName,proto3" json:"discovery_name,omitempty"`
}

func (m *ListServicesRequest) Reset()      { *m = ListServicesRequest{} }
func (*ListServicesRequest) ProtoMessage() {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{4}
}
func (m *ListServicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesRequest.Merge(m, src)
}
func (m *ListServicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesRequest proto.InternalMessageInfo

func (m *ListServicesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListServicesRequest) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *ListServicesRequest) GetDiscoveryName() string {
	if m != nil {
		return m.DiscoveryName
	}
	return ""
}

// CreateTCPLoadBalancerRequest
//
// x-displayName: "CreateTCPLoadBalancerRequest"
// CreateTCPLoadBalancerRequest
type CreateTCPLoadBalancerRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the discovered service for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Service Name
	//
	// x-displayName: "Service Name"
	// x-example: "vs1"
	// x-required
	// Identifies the discovered service name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// TCPLBRequest
	//
	// x-required
	// x-displayName: "TCP LB Request Parameters"
	// TCP LB Request
	TcpLbRequest *TCPLBRequest `protobuf:"bytes,3,opt,name=tcp_lb_request,json=tcpLbRequest,proto3" json:"tcp_lb_request,omitempty"`
}

func (m *CreateTCPLoadBalancerRequest) Reset()      { *m = CreateTCPLoadBalancerRequest{} }
func (*CreateTCPLoadBalancerRequest) ProtoMessage() {}
func (*CreateTCPLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{5}
}
func (m *CreateTCPLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTCPLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTCPLoadBalancerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTCPLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTCPLoadBalancerRequest.Merge(m, src)
}
func (m *CreateTCPLoadBalancerRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTCPLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTCPLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTCPLoadBalancerRequest proto.InternalMessageInfo

func (m *CreateTCPLoadBalancerRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateTCPLoadBalancerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTCPLoadBalancerRequest) GetTcpLbRequest() *TCPLBRequest {
	if m != nil {
		return m.TcpLbRequest
	}
	return nil
}

// CreateTCPLoadBalancerResponse
//
// x-displayName: "CreateTCPLoadBalancerResponse"
// CreateTCPLoadBalancerResponse
type CreateTCPLoadBalancerResponse struct {
	TcpLoadbalancer *views.ObjectRefType `protobuf:"bytes,1,opt,name=tcp_loadbalancer,json=tcpLoadbalancer,proto3" json:"tcp_loadbalancer,omitempty"`
}

func (m *CreateTCPLoadBalancerResponse) Reset()      { *m = CreateTCPLoadBalancerResponse{} }
func (*CreateTCPLoadBalancerResponse) ProtoMessage() {}
func (*CreateTCPLoadBalancerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{6}
}
func (m *CreateTCPLoadBalancerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTCPLoadBalancerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTCPLoadBalancerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTCPLoadBalancerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTCPLoadBalancerResponse.Merge(m, src)
}
func (m *CreateTCPLoadBalancerResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTCPLoadBalancerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTCPLoadBalancerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTCPLoadBalancerResponse proto.InternalMessageInfo

func (m *CreateTCPLoadBalancerResponse) GetTcpLoadbalancer() *views.ObjectRefType {
	if m != nil {
		return m.TcpLoadbalancer
	}
	return nil
}

// CreateHTTPLoadBalancerRequest
//
// x-displayName: "CreateHTTPLoadBalancerRequest"
// CreateHTTPLoadBalancerRequest
type CreateHTTPLoadBalancerRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the discovered service for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Service Name
	//
	// x-displayName: "Service Name"
	// x-example: "vs1"
	// x-required
	// Identifies the discovered service name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// HTTPLBRequest
	//
	// x-required
	// x-displayName: "HTTP(s) LB Request Parameters"
	// HTTP(s) LB Request
	HttpLbRequest *HTTPLBRequest `protobuf:"bytes,3,opt,name=http_lb_request,json=httpLbRequest,proto3" json:"http_lb_request,omitempty"`
}

func (m *CreateHTTPLoadBalancerRequest) Reset()      { *m = CreateHTTPLoadBalancerRequest{} }
func (*CreateHTTPLoadBalancerRequest) ProtoMessage() {}
func (*CreateHTTPLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{7}
}
func (m *CreateHTTPLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateHTTPLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateHTTPLoadBalancerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateHTTPLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateHTTPLoadBalancerRequest.Merge(m, src)
}
func (m *CreateHTTPLoadBalancerRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateHTTPLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateHTTPLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateHTTPLoadBalancerRequest proto.InternalMessageInfo

func (m *CreateHTTPLoadBalancerRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateHTTPLoadBalancerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateHTTPLoadBalancerRequest) GetHttpLbRequest() *HTTPLBRequest {
	if m != nil {
		return m.HttpLbRequest
	}
	return nil
}

// CreateHTTPLoadBalancerResponse
//
// x-displayName: "CreateHTTPLoadBalancerResponse"
// CreateHTTPLoadBalancerResponse
type CreateHTTPLoadBalancerResponse struct {
	HttpLoadbalancer *views.ObjectRefType `protobuf:"bytes,1,opt,name=http_loadbalancer,json=httpLoadbalancer,proto3" json:"http_loadbalancer,omitempty"`
}

func (m *CreateHTTPLoadBalancerResponse) Reset()      { *m = CreateHTTPLoadBalancerResponse{} }
func (*CreateHTTPLoadBalancerResponse) ProtoMessage() {}
func (*CreateHTTPLoadBalancerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{8}
}
func (m *CreateHTTPLoadBalancerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateHTTPLoadBalancerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateHTTPLoadBalancerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateHTTPLoadBalancerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateHTTPLoadBalancerResponse.Merge(m, src)
}
func (m *CreateHTTPLoadBalancerResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateHTTPLoadBalancerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateHTTPLoadBalancerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateHTTPLoadBalancerResponse proto.InternalMessageInfo

func (m *CreateHTTPLoadBalancerResponse) GetHttpLoadbalancer() *views.ObjectRefType {
	if m != nil {
		return m.HttpLoadbalancer
	}
	return nil
}

// ListServicesResponseItem is an individual item in a collection of discovered services of specific type
//
// x-displayName: "List Item"
// By default a summary of discovered services is returned in 'List'. By setting
// 'report_fields' in the ListServicesRequest more details of each item can be got.
type ListServicesResponseItem struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// The tenant this item belongs to
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace this item belongs to
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of this discovered service
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// uid
	//
	// x-displayName: "UID"
	// x-example: "d27938ba-967e-40a7-9709-57b8627f9f75"
	// The unique uid of this discovered service
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// The description set for this discovered service
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// disabled
	//
	// x-displayName: "Disabled"
	// A value of true indicates discovered service is administratively disabled
	Disabled bool `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// labels
	//
	// x-displayName: "Labels"
	// The set of labels present on this discovered service
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// annotations
	//
	// x-displayName: "Annotations"
	// The set of annotations present on this discovered service
	Annotations map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// owner_view
	//
	// x-displayName: "Owner View"
	// Reference to the view object that owns this object.
	// If there is no view owner, this field will be nil.
	// If not nil, this object can only be edited/deleted through the view
	OwnerView *schema.ViewRefType `protobuf:"bytes,9,opt,name=owner_view,json=ownerView,proto3" json:"owner_view,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// If list request has report_fields set then metadata will
	// contain all the metadata associated with the object.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// If list request has report_fields set then system_metadata will
	// contain all the system generated details of this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,11,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// get_spec
	//
	// x-displayName: "Get Specification"
	// If ListServicesRequest has any specified report_fields, it will appear in object
	GetSpec *GetSpecType `protobuf:"bytes,12,opt,name=get_spec,json=getSpec,proto3" json:"get_spec,omitempty"`
	// status
	//
	// x-displayName: "Status"
	// The status reported by different services for this configuration object
	StatusSet []*StatusObject `protobuf:"bytes,13,rep,name=status_set,json=statusSet,proto3" json:"status_set,omitempty"`
}

func (m *ListServicesResponseItem) Reset()      { *m = ListServicesResponseItem{} }
func (*ListServicesResponseItem) ProtoMessage() {}
func (*ListServicesResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{9}
}
func (m *ListServicesResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServicesResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServicesResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServicesResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesResponseItem.Merge(m, src)
}
func (m *ListServicesResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *ListServicesResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesResponseItem proto.InternalMessageInfo

func (m *ListServicesResponseItem) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListServicesResponseItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListServicesResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListServicesResponseItem) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ListServicesResponseItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListServicesResponseItem) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *ListServicesResponseItem) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ListServicesResponseItem) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ListServicesResponseItem) GetOwnerView() *schema.ViewRefType {
	if m != nil {
		return m.OwnerView
	}
	return nil
}

func (m *ListServicesResponseItem) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ListServicesResponseItem) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ListServicesResponseItem) GetGetSpec() *GetSpecType {
	if m != nil {
		return m.GetSpec
	}
	return nil
}

func (m *ListServicesResponseItem) GetStatusSet() []*StatusObject {
	if m != nil {
		return m.StatusSet
	}
	return nil
}

// ListServicesResponse is the collection of discovered service
//
// x-displayName: "List Response"
// This is the output message of List for specific service type.
type ListServicesResponse struct {
	// items
	//
	// x-displayName: "Items"
	// items represents the collection in response
	Items []*ListServicesResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// errors
	//
	// x-displayName: "Errors"
	// Errors(if any) while listing items from collection
	Errors []*schema.ErrorType `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *ListServicesResponse) Reset()      { *m = ListServicesResponse{} }
func (*ListServicesResponse) ProtoMessage() {}
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{10}
}
func (m *ListServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesResponse.Merge(m, src)
}
func (m *ListServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesResponse proto.InternalMessageInfo

func (m *ListServicesResponse) GetItems() []*ListServicesResponseItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListServicesResponse) GetErrors() []*schema.ErrorType {
	if m != nil {
		return m.Errors
	}
	return nil
}

// HTTP LB Request
//
// x-displayName: "HTTP(s) LB Request"
// HTTP LB Request Parameters
type HTTPLBRequest struct {
	// name
	//
	// x-displayName: "Name"
	// x-example: "acmecorp-web"
	// x-required
	// The configuration object will be created with name. It has to be unique within the namespace.
	// The value of name has to follow DNS-1035 format.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "www.foo.com"
	// x-required
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// Advertise choice (Deprecated for any future use)
	//
	// x-displayName: "VIP Advertisement"
	// x-required
	// VIP Advertisement choice, Internet or Custom.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*HTTPLBRequest_AdvertiseOnPublicDefaultVip
	//	*HTTPLBRequest_AdvertiseCustom
	AdvertiseChoice isHTTPLBRequest_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// LoadBalancer Type
	//
	// x-displayName: "LoadBalancer Type"
	// x-required
	// Load Balancer Type
	//
	// Types that are valid to be assigned to LoadbalancerType:
	//	*HTTPLBRequest_HttpsAutoCert
	//	*HTTPLBRequest_Https
	//	*HTTPLBRequest_Http
	LoadbalancerType isHTTPLBRequest_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Root CA Certificate of origin server
	//
	// x-displayName: "Root CA Certificate of origin server"
	// x-required
	// Root CA Certificate of origin server
	//
	// Types that are valid to be assigned to ServerValidationChoice:
	//	*HTTPLBRequest_TrustedCa
	//	*HTTPLBRequest_SkipServerVerification
	ServerValidationChoice isHTTPLBRequest_ServerValidationChoice `protobuf_oneof:"server_validation_choice"`
}

func (m *HTTPLBRequest) Reset()      { *m = HTTPLBRequest{} }
func (*HTTPLBRequest) ProtoMessage() {}
func (*HTTPLBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{11}
}
func (m *HTTPLBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPLBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPLBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPLBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPLBRequest.Merge(m, src)
}
func (m *HTTPLBRequest) XXX_Size() int {
	return m.Size()
}
func (m *HTTPLBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPLBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPLBRequest proto.InternalMessageInfo

type isHTTPLBRequest_AdvertiseChoice interface {
	isHTTPLBRequest_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isHTTPLBRequest_LoadbalancerType interface {
	isHTTPLBRequest_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isHTTPLBRequest_ServerValidationChoice interface {
	isHTTPLBRequest_ServerValidationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HTTPLBRequest_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,4,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type HTTPLBRequest_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type HTTPLBRequest_HttpsAutoCert struct {
	HttpsAutoCert *schema.Empty `protobuf:"bytes,10,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type HTTPLBRequest_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,11,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type HTTPLBRequest_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,12,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type HTTPLBRequest_TrustedCa struct {
	TrustedCa *views.ObjectRefType `protobuf:"bytes,7,opt,name=trusted_ca,json=trustedCa,proto3,oneof" json:"trusted_ca,omitempty"`
}
type HTTPLBRequest_SkipServerVerification struct {
	SkipServerVerification *schema.Empty `protobuf:"bytes,8,opt,name=skip_server_verification,json=skipServerVerification,proto3,oneof" json:"skip_server_verification,omitempty"`
}

func (*HTTPLBRequest_AdvertiseOnPublicDefaultVip) isHTTPLBRequest_AdvertiseChoice()   {}
func (*HTTPLBRequest_AdvertiseCustom) isHTTPLBRequest_AdvertiseChoice()               {}
func (*HTTPLBRequest_HttpsAutoCert) isHTTPLBRequest_LoadbalancerType()                {}
func (*HTTPLBRequest_Https) isHTTPLBRequest_LoadbalancerType()                        {}
func (*HTTPLBRequest_Http) isHTTPLBRequest_LoadbalancerType()                         {}
func (*HTTPLBRequest_TrustedCa) isHTTPLBRequest_ServerValidationChoice()              {}
func (*HTTPLBRequest_SkipServerVerification) isHTTPLBRequest_ServerValidationChoice() {}

func (m *HTTPLBRequest) GetAdvertiseChoice() isHTTPLBRequest_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *HTTPLBRequest) GetLoadbalancerType() isHTTPLBRequest_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *HTTPLBRequest) GetServerValidationChoice() isHTTPLBRequest_ServerValidationChoice {
	if m != nil {
		return m.ServerValidationChoice
	}
	return nil
}

func (m *HTTPLBRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HTTPLBRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *HTTPLBRequest) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*HTTPLBRequest_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *HTTPLBRequest) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*HTTPLBRequest_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *HTTPLBRequest) GetHttpsAutoCert() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*HTTPLBRequest_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *HTTPLBRequest) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*HTTPLBRequest_Https); ok {
		return x.Https
	}
	return nil
}

func (m *HTTPLBRequest) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*HTTPLBRequest_Http); ok {
		return x.Http
	}
	return nil
}

func (m *HTTPLBRequest) GetTrustedCa() *views.ObjectRefType {
	if x, ok := m.GetServerValidationChoice().(*HTTPLBRequest_TrustedCa); ok {
		return x.TrustedCa
	}
	return nil
}

func (m *HTTPLBRequest) GetSkipServerVerification() *schema.Empty {
	if x, ok := m.GetServerValidationChoice().(*HTTPLBRequest_SkipServerVerification); ok {
		return x.SkipServerVerification
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HTTPLBRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HTTPLBRequest_AdvertiseOnPublicDefaultVip)(nil),
		(*HTTPLBRequest_AdvertiseCustom)(nil),
		(*HTTPLBRequest_HttpsAutoCert)(nil),
		(*HTTPLBRequest_Https)(nil),
		(*HTTPLBRequest_Http)(nil),
		(*HTTPLBRequest_TrustedCa)(nil),
		(*HTTPLBRequest_SkipServerVerification)(nil),
	}
}

// BYOC HTTPS Choice
//
// x-displayName: "BYOC HTTPS Choice"
// Choice for selecting HTTP proxy with bring your own certificate
type ProxyTypeHttps struct {
	// TLS Certificate
	//
	// x-displayName: "TLS Certificate"
	// x-required
	// Select a certificate
	Certificates []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// Advertise choice
	//
	// x-displayName: "Where to Advertise"
	// x-required
	// VIP Advertisement choice, Internet or Site or Virtual Site.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ProxyTypeHttps_AdvertiseOnPublicDefaultVip
	//	*ProxyTypeHttps_Site
	//	*ProxyTypeHttps_VirtualSite
	AdvertiseChoice isProxyTypeHttps_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
}

func (m *ProxyTypeHttps) Reset()      { *m = ProxyTypeHttps{} }
func (*ProxyTypeHttps) ProtoMessage() {}
func (*ProxyTypeHttps) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{12}
}
func (m *ProxyTypeHttps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyTypeHttps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyTypeHttps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttps.Merge(m, src)
}
func (m *ProxyTypeHttps) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttps) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttps.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttps proto.InternalMessageInfo

type isProxyTypeHttps_AdvertiseChoice interface {
	isProxyTypeHttps_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttps_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,3,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type ProxyTypeHttps_Site struct {
	Site *WhereSite `protobuf:"bytes,4,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type ProxyTypeHttps_VirtualSite struct {
	VirtualSite *WhereVirtualSite `protobuf:"bytes,5,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}

func (*ProxyTypeHttps_AdvertiseOnPublicDefaultVip) isProxyTypeHttps_AdvertiseChoice() {}
func (*ProxyTypeHttps_Site) isProxyTypeHttps_AdvertiseChoice()                        {}
func (*ProxyTypeHttps_VirtualSite) isProxyTypeHttps_AdvertiseChoice()                 {}

func (m *ProxyTypeHttps) GetAdvertiseChoice() isProxyTypeHttps_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}

func (m *ProxyTypeHttps) GetCertificates() []*schema.ObjectRefType {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *ProxyTypeHttps) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ProxyTypeHttps_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ProxyTypeHttps) GetSite() *WhereSite {
	if x, ok := m.GetAdvertiseChoice().(*ProxyTypeHttps_Site); ok {
		return x.Site
	}
	return nil
}

func (m *ProxyTypeHttps) GetVirtualSite() *WhereVirtualSite {
	if x, ok := m.GetAdvertiseChoice().(*ProxyTypeHttps_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeHttps) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeHttps_AdvertiseOnPublicDefaultVip)(nil),
		(*ProxyTypeHttps_Site)(nil),
		(*ProxyTypeHttps_VirtualSite)(nil),
	}
}

// WhereSite
//
// x-displayName: "Site"
// This defines a reference to a CE site where a load balancer could be advertised
type WhereSite struct {
	// Site
	//
	// x-displayName: "Site Reference"
	// x-required
	// Reference to site object
	Site []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=site,proto3" json:"site,omitempty"`
}

func (m *WhereSite) Reset()      { *m = WhereSite{} }
func (*WhereSite) ProtoMessage() {}
func (*WhereSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{13}
}
func (m *WhereSite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhereSite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhereSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereSite.Merge(m, src)
}
func (m *WhereSite) XXX_Size() int {
	return m.Size()
}
func (m *WhereSite) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereSite.DiscardUnknown(m)
}

var xxx_messageInfo_WhereSite proto.InternalMessageInfo

func (m *WhereSite) GetSite() []*schema.ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

// WhereVirtualSite
//
// x-displayName: "Virtual Site"
// This defines a reference to a customer site virtual site where a load balancer could be advertised
type WhereVirtualSite struct {
	// Virtual Site
	//
	// x-displayName: "Virtual Site Reference"
	// x-required
	// Reference to virtual site object
	VirtualSite []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=virtual_site,json=virtualSite,proto3" json:"virtual_site,omitempty"`
}

func (m *WhereVirtualSite) Reset()      { *m = WhereVirtualSite{} }
func (*WhereVirtualSite) ProtoMessage() {}
func (*WhereVirtualSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{14}
}
func (m *WhereVirtualSite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereVirtualSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhereVirtualSite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhereVirtualSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereVirtualSite.Merge(m, src)
}
func (m *WhereVirtualSite) XXX_Size() int {
	return m.Size()
}
func (m *WhereVirtualSite) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereVirtualSite.DiscardUnknown(m)
}

var xxx_messageInfo_WhereVirtualSite proto.InternalMessageInfo

func (m *WhereVirtualSite) GetVirtualSite() []*schema.ObjectRefType {
	if m != nil {
		return m.VirtualSite
	}
	return nil
}

// HTTP Choice
//
// x-displayName: "HTTP"
// Choice for selecting HTTP proxy
type ProxyTypeHttp struct {
	// Advertise choice
	//
	// x-displayName: "Where to Advertise"
	// x-required
	// VIP Advertisement choice, Internet or Custom.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ProxyTypeHttp_AdvertiseOnPublicDefaultVip
	//	*ProxyTypeHttp_Site
	//	*ProxyTypeHttp_VirtualSite
	AdvertiseChoice isProxyTypeHttp_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
}

func (m *ProxyTypeHttp) Reset()      { *m = ProxyTypeHttp{} }
func (*ProxyTypeHttp) ProtoMessage() {}
func (*ProxyTypeHttp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{15}
}
func (m *ProxyTypeHttp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyTypeHttp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyTypeHttp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttp.Merge(m, src)
}
func (m *ProxyTypeHttp) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttp.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttp proto.InternalMessageInfo

type isProxyTypeHttp_AdvertiseChoice interface {
	isProxyTypeHttp_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttp_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,2,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type ProxyTypeHttp_Site struct {
	Site *WhereSite `protobuf:"bytes,3,opt,name=site,proto3,oneof" json:"site,omitempty"`
}
type ProxyTypeHttp_VirtualSite struct {
	VirtualSite *WhereVirtualSite `protobuf:"bytes,4,opt,name=virtual_site,json=virtualSite,proto3,oneof" json:"virtual_site,omitempty"`
}

func (*ProxyTypeHttp_AdvertiseOnPublicDefaultVip) isProxyTypeHttp_AdvertiseChoice() {}
func (*ProxyTypeHttp_Site) isProxyTypeHttp_AdvertiseChoice()                        {}
func (*ProxyTypeHttp_VirtualSite) isProxyTypeHttp_AdvertiseChoice()                 {}

func (m *ProxyTypeHttp) GetAdvertiseChoice() isProxyTypeHttp_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}

func (m *ProxyTypeHttp) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ProxyTypeHttp_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ProxyTypeHttp) GetSite() *WhereSite {
	if x, ok := m.GetAdvertiseChoice().(*ProxyTypeHttp_Site); ok {
		return x.Site
	}
	return nil
}

func (m *ProxyTypeHttp) GetVirtualSite() *WhereVirtualSite {
	if x, ok := m.GetAdvertiseChoice().(*ProxyTypeHttp_VirtualSite); ok {
		return x.VirtualSite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeHttp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeHttp_AdvertiseOnPublicDefaultVip)(nil),
		(*ProxyTypeHttp_Site)(nil),
		(*ProxyTypeHttp_VirtualSite)(nil),
	}
}

// TCP LB Request
//
// x-displayName: "TCP LB Request"
// TCP LB Request
type TCPLBRequest struct {
	// name
	//
	// x-displayName: "Name"
	// x-example: "acmecorp-web"
	// x-required
	// The configuration object will be created with name. It has to be unique within the namespace.
	// The value of name has to follow DNS-1035 format.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "www.foo.com"
	// x-required
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// Advertise choice
	//
	// x-displayName: "VIP Advertisement"
	// x-required
	// VIP Advertisement choice, Internet or Custom.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*TCPLBRequest_AdvertiseOnPublicDefaultVip
	//	*TCPLBRequest_AdvertiseCustom
	AdvertiseChoice isTCPLBRequest_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Listen Port
	//
	// x-required
	// x-displayName: "Listen Port"
	// Listen Port for this load balancer
	//
	// Types that are valid to be assigned to PortChoice:
	//	*TCPLBRequest_ListenPort
	//	*TCPLBRequest_PortRanges
	PortChoice isTCPLBRequest_PortChoice `protobuf_oneof:"port_choice"`
	// SNI and Default LB choice
	//
	// x-displayName: "SNI and Default LB choice"
	// x-required
	// This is a choice to enable SNI and default LB options
	//
	// Types that are valid to be assigned to SniDefaultLbChoice:
	//	*TCPLBRequest_NoSni
	//	*TCPLBRequest_Sni
	SniDefaultLbChoice isTCPLBRequest_SniDefaultLbChoice `protobuf_oneof:"sni_default_lb_choice"`
}

func (m *TCPLBRequest) Reset()      { *m = TCPLBRequest{} }
func (*TCPLBRequest) ProtoMessage() {}
func (*TCPLBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c0dbe3d2ae6fd6c, []int{16}
}
func (m *TCPLBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCPLBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TCPLBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TCPLBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPLBRequest.Merge(m, src)
}
func (m *TCPLBRequest) XXX_Size() int {
	return m.Size()
}
func (m *TCPLBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPLBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TCPLBRequest proto.InternalMessageInfo

type isTCPLBRequest_AdvertiseChoice interface {
	isTCPLBRequest_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTCPLBRequest_PortChoice interface {
	isTCPLBRequest_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTCPLBRequest_SniDefaultLbChoice interface {
	isTCPLBRequest_SniDefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TCPLBRequest_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,4,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type TCPLBRequest_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type TCPLBRequest_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,7,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type TCPLBRequest_PortRanges struct {
	PortRanges string `protobuf:"bytes,8,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type TCPLBRequest_NoSni struct {
	NoSni *schema.Empty `protobuf:"bytes,10,opt,name=no_sni,json=noSni,proto3,oneof" json:"no_sni,omitempty"`
}
type TCPLBRequest_Sni struct {
	Sni *schema.Empty `protobuf:"bytes,11,opt,name=sni,proto3,oneof" json:"sni,omitempty"`
}

func (*TCPLBRequest_AdvertiseOnPublicDefaultVip) isTCPLBRequest_AdvertiseChoice() {}
func (*TCPLBRequest_AdvertiseCustom) isTCPLBRequest_AdvertiseChoice()             {}
func (*TCPLBRequest_ListenPort) isTCPLBRequest_PortChoice()                       {}
func (*TCPLBRequest_PortRanges) isTCPLBRequest_PortChoice()                       {}
func (*TCPLBRequest_NoSni) isTCPLBRequest_SniDefaultLbChoice()                    {}
func (*TCPLBRequest_Sni) isTCPLBRequest_SniDefaultLbChoice()                      {}

func (m *TCPLBRequest) GetAdvertiseChoice() isTCPLBRequest_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *TCPLBRequest) GetPortChoice() isTCPLBRequest_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *TCPLBRequest) GetSniDefaultLbChoice() isTCPLBRequest_SniDefaultLbChoice {
	if m != nil {
		return m.SniDefaultLbChoice
	}
	return nil
}

func (m *TCPLBRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TCPLBRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *TCPLBRequest) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*TCPLBRequest_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *TCPLBRequest) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*TCPLBRequest_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *TCPLBRequest) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*TCPLBRequest_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *TCPLBRequest) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*TCPLBRequest_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *TCPLBRequest) GetNoSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*TCPLBRequest_NoSni); ok {
		return x.NoSni
	}
	return nil
}

func (m *TCPLBRequest) GetSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*TCPLBRequest_Sni); ok {
		return x.Sni
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TCPLBRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TCPLBRequest_AdvertiseOnPublicDefaultVip)(nil),
		(*TCPLBRequest_AdvertiseCustom)(nil),
		(*TCPLBRequest_ListenPort)(nil),
		(*TCPLBRequest_PortRanges)(nil),
		(*TCPLBRequest_NoSni)(nil),
		(*TCPLBRequest_Sni)(nil),
	}
}

func init() {
	proto.RegisterType((*EnableVisibilityRequest)(nil), "ves.io.schema.discovered_service.EnableVisibilityRequest")
	golang_proto.RegisterType((*EnableVisibilityRequest)(nil), "ves.io.schema.discovered_service.EnableVisibilityRequest")
	proto.RegisterType((*EnableVisibilityResponse)(nil), "ves.io.schema.discovered_service.EnableVisibilityResponse")
	golang_proto.RegisterType((*EnableVisibilityResponse)(nil), "ves.io.schema.discovered_service.EnableVisibilityResponse")
	proto.RegisterType((*DisableVisibilityRequest)(nil), "ves.io.schema.discovered_service.DisableVisibilityRequest")
	golang_proto.RegisterType((*DisableVisibilityRequest)(nil), "ves.io.schema.discovered_service.DisableVisibilityRequest")
	proto.RegisterType((*DisableVisibilityResponse)(nil), "ves.io.schema.discovered_service.DisableVisibilityResponse")
	golang_proto.RegisterType((*DisableVisibilityResponse)(nil), "ves.io.schema.discovered_service.DisableVisibilityResponse")
	proto.RegisterType((*ListServicesRequest)(nil), "ves.io.schema.discovered_service.ListServicesRequest")
	golang_proto.RegisterType((*ListServicesRequest)(nil), "ves.io.schema.discovered_service.ListServicesRequest")
	proto.RegisterType((*CreateTCPLoadBalancerRequest)(nil), "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest")
	golang_proto.RegisterType((*CreateTCPLoadBalancerRequest)(nil), "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest")
	proto.RegisterType((*CreateTCPLoadBalancerResponse)(nil), "ves.io.schema.discovered_service.CreateTCPLoadBalancerResponse")
	golang_proto.RegisterType((*CreateTCPLoadBalancerResponse)(nil), "ves.io.schema.discovered_service.CreateTCPLoadBalancerResponse")
	proto.RegisterType((*CreateHTTPLoadBalancerRequest)(nil), "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest")
	golang_proto.RegisterType((*CreateHTTPLoadBalancerRequest)(nil), "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest")
	proto.RegisterType((*CreateHTTPLoadBalancerResponse)(nil), "ves.io.schema.discovered_service.CreateHTTPLoadBalancerResponse")
	golang_proto.RegisterType((*CreateHTTPLoadBalancerResponse)(nil), "ves.io.schema.discovered_service.CreateHTTPLoadBalancerResponse")
	proto.RegisterType((*ListServicesResponseItem)(nil), "ves.io.schema.discovered_service.ListServicesResponseItem")
	golang_proto.RegisterType((*ListServicesResponseItem)(nil), "ves.io.schema.discovered_service.ListServicesResponseItem")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.discovered_service.ListServicesResponseItem.AnnotationsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.discovered_service.ListServicesResponseItem.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.discovered_service.ListServicesResponseItem.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.discovered_service.ListServicesResponseItem.LabelsEntry")
	proto.RegisterType((*ListServicesResponse)(nil), "ves.io.schema.discovered_service.ListServicesResponse")
	golang_proto.RegisterType((*ListServicesResponse)(nil), "ves.io.schema.discovered_service.ListServicesResponse")
	proto.RegisterType((*HTTPLBRequest)(nil), "ves.io.schema.discovered_service.HTTPLBRequest")
	golang_proto.RegisterType((*HTTPLBRequest)(nil), "ves.io.schema.discovered_service.HTTPLBRequest")
	proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.discovered_service.ProxyTypeHttps")
	golang_proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.discovered_service.ProxyTypeHttps")
	proto.RegisterType((*WhereSite)(nil), "ves.io.schema.discovered_service.WhereSite")
	golang_proto.RegisterType((*WhereSite)(nil), "ves.io.schema.discovered_service.WhereSite")
	proto.RegisterType((*WhereVirtualSite)(nil), "ves.io.schema.discovered_service.WhereVirtualSite")
	golang_proto.RegisterType((*WhereVirtualSite)(nil), "ves.io.schema.discovered_service.WhereVirtualSite")
	proto.RegisterType((*ProxyTypeHttp)(nil), "ves.io.schema.discovered_service.ProxyTypeHttp")
	golang_proto.RegisterType((*ProxyTypeHttp)(nil), "ves.io.schema.discovered_service.ProxyTypeHttp")
	proto.RegisterType((*TCPLBRequest)(nil), "ves.io.schema.discovered_service.TCPLBRequest")
	golang_proto.RegisterType((*TCPLBRequest)(nil), "ves.io.schema.discovered_service.TCPLBRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/discovered_service/public_customapi.proto", fileDescriptor_7c0dbe3d2ae6fd6c)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/discovered_service/public_customapi.proto", fileDescriptor_7c0dbe3d2ae6fd6c)
}

var fileDescriptor_7c0dbe3d2ae6fd6c = []byte{
	// 2329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x5d, 0x6c, 0x1b, 0x59,
	0xf5, 0xcf, 0xb5, 0x27, 0x8e, 0x7d, 0x9d, 0x34, 0xee, 0xdd, 0x6e, 0xff, 0xb3, 0x6e, 0xfe, 0xde,
	0x30, 0x0b, 0x34, 0x2d, 0x1e, 0xbb, 0x49, 0x3f, 0x76, 0x93, 0xae, 0xda, 0xc6, 0x6d, 0x59, 0x6f,
	0x9a, 0xd2, 0x30, 0xa9, 0x52, 0xd4, 0x6e, 0x77, 0x34, 0x1e, 0xdf, 0x38, 0x97, 0xda, 0x33, 0xc3,
	0xdc, 0x6b, 0xb7, 0x59, 0x14, 0x11, 0x2d, 0x12, 0x05, 0x1e, 0xa0, 0x02, 0x24, 0x24, 0x9e, 0x78,
	0x01, 0xa1, 0x88, 0xe7, 0x7d, 0xc0, 0x3c, 0xe4, 0xad, 0x68, 0x1f, 0x50, 0x04, 0x08, 0x55, 0xe2,
	0x01, 0xea, 0x20, 0xb4, 0xc0, 0x4b, 0x55, 0x24, 0x5e, 0x17, 0xcd, 0x9d, 0x6b, 0x67, 0xec, 0x38,
	0x75, 0x3e, 0x96, 0xe5, 0xed, 0xde, 0x39, 0xe7, 0xfc, 0xce, 0xb9, 0xe7, 0xfc, 0xee, 0xbd, 0x33,
	0x67, 0xe0, 0xeb, 0x35, 0x4c, 0x33, 0xc4, 0xce, 0x52, 0x73, 0x09, 0x57, 0x8c, 0x6c, 0x91, 0x50,
	0xd3, 0xae, 0x61, 0x17, 0x17, 0x75, 0x8a, 0xdd, 0x1a, 0x31, 0x71, 0xd6, 0xa9, 0x16, 0xca, 0xc4,
	0xd4, 0xcd, 0x2a, 0x65, 0x76, 0xc5, 0x70, 0x48, 0xc6, 0x71, 0x6d, 0x66, 0xa3, 0x51, 0xdf, 0x30,
	0xe3, 0x1b, 0x66, 0xb6, 0x1b, 0x26, 0xd5, 0x12, 0x61, 0x4b, 0xd5, 0x42, 0xc6, 0xb4, 0x2b, 0xd9,
	0x92, 0x5d, 0xb2, 0xb3, 0xdc, 0xb0, 0x50, 0x5d, 0xe4, 0x33, 0x3e, 0xe1, 0x23, 0x1f, 0x30, 0x39,
	0x52, 0xb2, 0xed, 0x52, 0x19, 0x67, 0x0d, 0x87, 0x64, 0x0d, 0xcb, 0xb2, 0x99, 0xc1, 0x88, 0x6d,
	0xd1, 0x0e, 0x69, 0x0b, 0x83, 0x32, 0xb7, 0x6a, 0x32, 0x21, 0x7d, 0xb5, 0x53, 0xca, 0x48, 0x05,
	0x53, 0x66, 0x54, 0x1c, 0xa1, 0xa0, 0xf6, 0x5c, 0xa6, 0x5d, 0xf8, 0x2a, 0x6e, 0xe1, 0xa5, 0x7b,
	0xaa, 0xb3, 0x65, 0x07, 0x37, 0x63, 0x4b, 0xb6, 0x6b, 0x63, 0xd7, 0xb5, 0xdd, 0xa6, 0xec, 0x58,
	0xbb, 0xcc, 0x76, 0x82, 0x8b, 0x7a, 0xa5, 0x5d, 0x18, 0xc4, 0x1c, 0x69, 0x17, 0xd5, 0x8c, 0x32,
	0x29, 0x1a, 0x0c, 0x0b, 0xa9, 0xd2, 0x21, 0xc5, 0x14, 0x5b, 0xb5, 0x0e, 0xf0, 0xd1, 0x0e, 0x1d,
	0x82, 0xef, 0xeb, 0xed, 0x1a, 0xaf, 0x6e, 0xd7, 0xa0, 0xc1, 0x20, 0x94, 0x6b, 0xf0, 0xff, 0xae,
	0x5a, 0x46, 0xa1, 0x8c, 0x17, 0x08, 0x25, 0x05, 0x52, 0x26, 0x6c, 0x59, 0xc3, 0x5f, 0xab, 0x62,
	0xca, 0xd0, 0x08, 0x8c, 0x59, 0x46, 0x05, 0x53, 0xc7, 0x30, 0xb1, 0x0c, 0x46, 0xc1, 0x58, 0x4c,
	0xdb, 0x7a, 0x80, 0x10, 0x94, 0xbc, 0x89, 0x1c, 0xe2, 0x02, 0x3e, 0x56, 0x96, 0xa1, 0xbc, 0x1d,
	0x8c, 0x3a, 0xb6, 0x45, 0x31, 0xba, 0x0b, 0x13, 0x35, 0xe2, 0xb2, 0xaa, 0x51, 0xd6, 0x97, 0x6c,
	0xca, 0x74, 0x17, 0x2f, 0x72, 0xdb, 0xf8, 0x84, 0x92, 0x69, 0xe7, 0x19, 0x0f, 0x32, 0x73, 0x83,
	0x17, 0x4b, 0xc3, 0x8b, 0x37, 0x97, 0x1d, 0x9c, 0x1b, 0x5e, 0x5b, 0x19, 0x0c, 0x9a, 0x6b, 0x87,
	0xc4, 0x2c, 0xef, 0x4d, 0xf0, 0xa2, 0x32, 0x0b, 0xe5, 0x2b, 0x84, 0x7e, 0x52, 0x0b, 0x39, 0x06,
	0x5f, 0xe9, 0x82, 0xe6, 0xaf, 0x44, 0xf9, 0x25, 0x80, 0x2f, 0xcd, 0x12, 0xca, 0xe6, 0x7d, 0x9e,
	0xd0, 0xdd, 0xb9, 0xb9, 0x02, 0x07, 0x05, 0xb1, 0x74, 0x2f, 0xff, 0xbe, 0xbb, 0xdc, 0x67, 0x7e,
	0xf5, 0xf7, 0xf5, 0xf0, 0x88, 0x9b, 0xd4, 0xe4, 0x3b, 0x4a, 0x81, 0x94, 0x88, 0xa3, 0x37, 0x57,
	0xe9, 0x29, 0x63, 0x57, 0xb9, 0xab, 0xc5, 0x85, 0x99, 0x97, 0x07, 0x34, 0x0e, 0x0f, 0x35, 0x99,
	0xba, 0xac, 0xf3, 0xb0, 0xc3, 0x1c, 0x07, 0x7a, 0x38, 0xfd, 0x6e, 0xf8, 0xa7, 0x21, 0xa0, 0x0d,
	0xb5, 0x34, 0xbe, 0xe4, 0xad, 0xe5, 0xe7, 0x00, 0x8e, 0x5c, 0x76, 0xb1, 0xc1, 0xf0, 0xcd, 0xcb,
	0x73, 0xb3, 0xb6, 0x51, 0xcc, 0x19, 0x65, 0xc3, 0x32, 0xb1, 0xbb, 0xef, 0xf4, 0xa0, 0x9b, 0xf0,
	0x10, 0x33, 0x1d, 0xbd, 0x5c, 0xd0, 0x5d, 0x1f, 0x83, 0x47, 0x11, 0x9f, 0xc8, 0x64, 0x7a, 0x9d,
	0x18, 0x19, 0x2f, 0x86, 0x9c, 0xf0, 0xac, 0x0d, 0x32, 0xd3, 0x99, 0x2d, 0x88, 0x99, 0xf2, 0x4d,
	0x00, 0xff, 0x7f, 0x87, 0x40, 0x05, 0x87, 0x0a, 0x30, 0xc1, 0xfd, 0xda, 0x46, 0xb1, 0x20, 0x64,
	0x3c, 0xe0, 0xdd, 0x71, 0xe8, 0xa5, 0xb5, 0x95, 0x6d, 0xe6, 0xda, 0xb0, 0x17, 0x42, 0xe0, 0x81,
	0xf2, 0x41, 0x2b, 0x8a, 0xfc, 0xcd, 0x9b, 0x5d, 0xf3, 0xa5, 0x6c, 0xcb, 0x57, 0x4e, 0xfa, 0xa8,
	0x0e, 0x40, 0x30, 0x6b, 0x72, 0x30, 0x6b, 0x42, 0xec, 0xe7, 0xee, 0x16, 0x1c, 0x5e, 0x62, 0xac,
	0x4b, 0xf2, 0xb2, 0xbd, 0x93, 0xc7, 0x23, 0x6a, 0x65, 0x6f, 0xc8, 0xc3, 0xd9, 0x4a, 0xdf, 0x43,
	0x00, 0x53, 0x3b, 0x05, 0x2e, 0xf2, 0x87, 0xe1, 0x61, 0xdf, 0xf7, 0xfe, 0x12, 0x78, 0x64, 0x6d,
	0x65, 0xbb, 0xbd, 0x96, 0xe0, 0x61, 0x04, 0x53, 0xf8, 0xb7, 0x08, 0x94, 0xdb, 0x37, 0x88, 0xef,
	0xff, 0x6d, 0x86, 0x2b, 0xe8, 0x28, 0x8c, 0x30, 0x6c, 0x19, 0x16, 0x13, 0x54, 0x13, 0xb3, 0x76,
	0x16, 0x86, 0x76, 0x62, 0x61, 0x38, 0xc0, 0xc2, 0x04, 0x0c, 0x57, 0x49, 0x51, 0x96, 0xf8, 0x23,
	0x6f, 0x88, 0x46, 0x61, 0xbc, 0x88, 0xa9, 0xe9, 0x12, 0x7e, 0x06, 0xca, 0xfd, 0x5c, 0x12, 0x7c,
	0x84, 0x92, 0x30, 0x5a, 0xf4, 0x37, 0x76, 0x51, 0x8e, 0x8c, 0x82, 0xb1, 0xa8, 0xd6, 0x9a, 0xa3,
	0x77, 0x61, 0xa4, 0x6c, 0x14, 0x70, 0x99, 0xca, 0x03, 0xa3, 0xe1, 0xb1, 0xf8, 0xc4, 0x17, 0x7b,
	0x17, 0x64, 0xa7, 0x55, 0x66, 0x66, 0x39, 0xd0, 0x55, 0x8b, 0xb9, 0xcb, 0x9a, 0x40, 0x45, 0x15,
	0x18, 0x0f, 0x5c, 0x7a, 0x72, 0x94, 0x3b, 0xb9, 0x76, 0x00, 0x27, 0xd3, 0x5b, 0x68, 0xbe, 0xa7,
	0x20, 0x3e, 0x9a, 0x84, 0xd0, 0xbe, 0x6f, 0x61, 0x57, 0xf7, 0x4a, 0x29, 0xc7, 0x78, 0x95, 0x93,
	0x1d, 0xde, 0x16, 0x08, 0xbe, 0x2f, 0xaa, 0xab, 0xc5, 0xb8, 0xb6, 0xf7, 0x04, 0xbd, 0x09, 0xa3,
	0x15, 0xcc, 0x8c, 0xa2, 0xc1, 0x0c, 0x19, 0x72, 0xc3, 0xd1, 0x0e, 0x43, 0x9f, 0x18, 0x6f, 0x61,
	0x76, 0x1d, 0x33, 0x83, 0x9b, 0xb7, 0x2c, 0xd0, 0x0d, 0x38, 0x4c, 0x97, 0x29, 0xc3, 0x15, 0xbd,
	0x05, 0x12, 0xe7, 0x20, 0x9f, 0xef, 0x00, 0x99, 0xe7, 0x5a, 0xdb, 0xa1, 0x0e, 0xf9, 0xe6, 0xd7,
	0x9b, 0x80, 0x79, 0x18, 0x2d, 0x61, 0xa6, 0x53, 0x07, 0x9b, 0xf2, 0x20, 0x47, 0x52, 0x7b, 0x67,
	0xed, 0x2d, 0xcc, 0xe6, 0x1d, 0x6c, 0x72, 0xc0, 0x81, 0x92, 0x3f, 0x41, 0x1a, 0x84, 0x94, 0x19,
	0xac, 0x4a, 0x75, 0x8a, 0x99, 0x3c, 0xc4, 0x2b, 0xb0, 0x8b, 0x43, 0x6b, 0x9e, 0xdb, 0xf8, 0x81,
	0xe6, 0xc2, 0xeb, 0x2b, 0x40, 0x8b, 0xf9, 0x30, 0xf3, 0x98, 0x25, 0x27, 0x61, 0x3c, 0x50, 0x6d,
	0x8f, 0x95, 0xf7, 0xf0, 0xb2, 0x20, 0xb7, 0x37, 0x44, 0x47, 0x60, 0x7f, 0xcd, 0x28, 0x57, 0x9b,
	0xac, 0xf6, 0x27, 0x53, 0xa1, 0x37, 0x40, 0xf2, 0x02, 0x4c, 0x74, 0xd6, 0x70, 0x2f, 0xf6, 0xca,
	0x4f, 0x00, 0x3c, 0xd2, 0x8d, 0x1d, 0x68, 0x0e, 0xf6, 0x13, 0x86, 0x2b, 0x54, 0x06, 0x7c, 0x89,
	0x53, 0xfb, 0x27, 0x99, 0xe6, 0x03, 0xa1, 0x53, 0x30, 0xe2, 0xbf, 0xf4, 0xc8, 0x21, 0x0e, 0x29,
	0x77, 0x40, 0x5e, 0xf5, 0x84, 0x3c, 0xd9, 0x42, 0x4f, 0xf9, 0x59, 0x04, 0x0e, 0xb5, 0x1d, 0x58,
	0xad, 0x4d, 0x0c, 0x02, 0x9b, 0x58, 0x81, 0x91, 0xa2, 0x5d, 0x31, 0x88, 0x25, 0x8e, 0xca, 0xe6,
	0x45, 0xf6, 0xed, 0x10, 0xd0, 0x84, 0x04, 0x61, 0xf8, 0xaa, 0x51, 0xac, 0x61, 0x97, 0x11, 0x8a,
	0x75, 0xdb, 0xd2, 0xc5, 0xeb, 0x6a, 0x11, 0x2f, 0x1a, 0xd5, 0x32, 0xd3, 0x6b, 0xc4, 0xe1, 0x87,
	0x40, 0x7c, 0xe2, 0x48, 0x67, 0x50, 0x15, 0x87, 0x2d, 0xe7, 0x06, 0x9e, 0xac, 0x00, 0xef, 0x00,
	0xce, 0xf7, 0x69, 0xc7, 0x5a, 0x38, 0x37, 0xac, 0x39, 0x8e, 0x72, 0xc5, 0x07, 0x59, 0x20, 0x0e,
	0xba, 0x0d, 0x13, 0x5b, 0x6e, 0xfc, 0x77, 0x61, 0x7e, 0x84, 0xc4, 0x27, 0x3e, 0xdb, 0xf5, 0x70,
	0x9c, 0x6e, 0x2a, 0x5f, 0xe6, 0xba, 0x41, 0x3f, 0xc3, 0x46, 0xbb, 0x0c, 0x5d, 0xf0, 0x4f, 0x7d,
	0xaa, 0x1b, 0x55, 0x66, 0xeb, 0x26, 0x76, 0x99, 0xd8, 0x58, 0x5d, 0x43, 0xce, 0x03, 0xff, 0x70,
	0xa7, 0xd3, 0x55, 0x66, 0x5f, 0xc6, 0x2e, 0x43, 0x79, 0xd8, 0xcf, 0x1f, 0x88, 0x9d, 0x74, 0xaa,
	0x77, 0x41, 0xe7, 0x5c, 0xfb, 0xc1, 0xb2, 0x57, 0x90, 0xbc, 0x67, 0x97, 0x07, 0x9a, 0x0f, 0x80,
	0xae, 0x42, 0xc9, 0x1b, 0x88, 0x8d, 0x94, 0xdd, 0x23, 0x50, 0x1e, 0x68, 0xdc, 0x1c, 0xdd, 0x81,
	0x90, 0xb9, 0x55, 0xca, 0x70, 0x51, 0x37, 0x0d, 0x79, 0x60, 0xd7, 0x77, 0xc8, 0xd1, 0xb5, 0x95,
	0xe1, 0x2d, 0x43, 0xbd, 0x4c, 0x28, 0x5b, 0xfd, 0x35, 0x00, 0xf9, 0x90, 0x16, 0x13, 0x8f, 0x2f,
	0x1b, 0x68, 0x0e, 0xca, 0xf4, 0x1e, 0x71, 0xc4, 0x3b, 0x90, 0x5e, 0xc3, 0x2e, 0x59, 0x24, 0x26,
	0xdf, 0x25, 0x72, 0xf4, 0x05, 0x69, 0x0b, 0x69, 0x47, 0x3d, 0xbb, 0x79, 0x6e, 0xb6, 0x10, 0xb0,
	0x9a, 0x82, 0xcf, 0x2f, 0x0c, 0x8c, 0xa7, 0x27, 0xd2, 0x93, 0xe9, 0x73, 0xb9, 0xe3, 0x6d, 0x75,
	0x5e, 0xb2, 0x89, 0x89, 0xd1, 0x4b, 0xeb, 0x75, 0x20, 0x6d, 0xd4, 0x41, 0xb8, 0x51, 0x07, 0xe1,
	0x33, 0xe9, 0xb3, 0xcf, 0xea, 0x00, 0xe4, 0x4e, 0xc0, 0xc3, 0xc1, 0x9b, 0x8e, 0xbf, 0xb7, 0xa1,
	0x23, 0xeb, 0x75, 0x00, 0x37, 0xea, 0x20, 0xd6, 0xa8, 0x83, 0xe8, 0xf8, 0xa9, 0xf4, 0xf8, 0x78,
	0x7a, 0x7c, 0x22, 0x77, 0x1c, 0xca, 0xcd, 0x60, 0xfd, 0xd7, 0x78, 0x62, 0x5b, 0x4d, 0xec, 0xf8,
	0x46, 0x1d, 0x44, 0x3c, 0xdc, 0xd7, 0xd3, 0x6f, 0xcc, 0x48, 0xd1, 0x70, 0x42, 0x9a, 0x91, 0xa2,
	0xb1, 0x04, 0x9c, 0x91, 0xa2, 0x91, 0xc4, 0x80, 0xf2, 0xe3, 0x30, 0x3c, 0xd4, 0x5e, 0x2c, 0xf4,
	0x2e, 0x1c, 0xf4, 0x28, 0xe2, 0x87, 0x8f, 0x9b, 0xbb, 0x78, 0xa4, 0xeb, 0x19, 0xdc, 0x4c, 0xec,
	0xc8, 0xda, 0x4a, 0x3c, 0x60, 0xe4, 0x25, 0x95, 0x6f, 0xa5, 0x1f, 0x80, 0x50, 0x02, 0x68, 0x6d,
	0x78, 0xe8, 0x9d, 0xde, 0x1b, 0x2a, 0xfc, 0x82, 0x34, 0xf7, 0xd8, 0x47, 0xd3, 0x50, 0xa2, 0x84,
	0x61, 0xb1, 0x27, 0xbf, 0xd0, 0x9b, 0x61, 0xb7, 0x96, 0xb0, 0x8b, 0xe7, 0x09, 0xc3, 0xf9, 0x3e,
	0x8d, 0x9b, 0xa2, 0x5b, 0xb0, 0xf5, 0xb6, 0xcf, 0xa1, 0xfc, 0x6d, 0x38, 0xb1, 0x4b, 0xa8, 0x05,
	0xdf, 0x54, 0x20, 0xc6, 0x6b, 0x5b, 0xd3, 0xdc, 0xe7, 0xba, 0xd4, 0xfe, 0xf0, 0x7a, 0x1d, 0x84,
	0x37, 0xea, 0x20, 0xd4, 0xa8, 0x83, 0xfe, 0xd3, 0xe9, 0x33, 0xe9, 0xb3, 0x33, 0x52, 0x34, 0x94,
	0x08, 0x2b, 0xb7, 0x61, 0xac, 0x15, 0x1a, 0xba, 0x2e, 0x56, 0xb5, 0x9b, 0x5a, 0x1c, 0x5b, 0x5b,
	0xe1, 0xca, 0x1f, 0xd6, 0x41, 0xc8, 0xec, 0x2c, 0x05, 0x97, 0x28, 0x0f, 0x60, 0xa2, 0x33, 0x56,
	0x54, 0xec, 0x58, 0x75, 0x68, 0x17, 0xae, 0x5e, 0x0b, 0x7c, 0x18, 0xed, 0xe8, 0x32, 0x98, 0x02,
	0xe5, 0x83, 0x10, 0x1c, 0x6a, 0xe3, 0xdb, 0x6e, 0xe8, 0x10, 0x3a, 0x38, 0x1d, 0xc2, 0x9f, 0x1c,
	0x1d, 0xa4, 0xff, 0x36, 0x1d, 0x42, 0x1b, 0x75, 0x00, 0x3c, 0x3a, 0x4c, 0xa4, 0x4f, 0xa7, 0xcf,
	0xcc, 0x48, 0x51, 0x90, 0x08, 0x29, 0x9b, 0x12, 0x1c, 0x0c, 0x7e, 0xbe, 0xec, 0xfb, 0x3e, 0x7b,
	0xe7, 0x40, 0xf7, 0x59, 0xaf, 0x7c, 0xdf, 0x3a, 0xe0, 0x35, 0xe6, 0x1d, 0x83, 0x5d, 0xef, 0xb0,
	0x0c, 0x8c, 0x7b, 0xc7, 0x35, 0xb6, 0x74, 0xc7, 0x76, 0x19, 0x3f, 0xf3, 0x87, 0x72, 0x71, 0x6f,
	0x7d, 0x91, 0x93, 0x92, 0xfc, 0xf1, 0xc7, 0xe1, 0x3c, 0xd0, 0xa0, 0xaf, 0x31, 0x67, 0xbb, 0x0c,
	0xcd, 0xc0, 0xb8, 0xa7, 0xa8, 0xbb, 0x86, 0x55, 0xc2, 0x94, 0x1f, 0xdc, 0xb1, 0xdc, 0x71, 0x91,
	0x0f, 0x79, 0x55, 0x12, 0xa3, 0x0d, 0xe9, 0x92, 0x37, 0x92, 0xdc, 0x50, 0x02, 0x88, 0x47, 0x4f,
	0x24, 0xe0, 0x61, 0x79, 0xd6, 0x1a, 0x37, 0x46, 0x2a, 0x8c, 0x58, 0xb6, 0x4e, 0x2d, 0xf2, 0xc2,
	0x6b, 0x33, 0xa4, 0xf5, 0x5b, 0xf6, 0xbc, 0x45, 0xd0, 0x18, 0x0c, 0x7b, 0xba, 0xf1, 0x17, 0xea,
	0x7a, 0x2a, 0x53, 0x83, 0xcf, 0x2f, 0xc4, 0xbc, 0x8b, 0xe1, 0x74, 0xfa, 0x5c, 0x7a, 0x32, 0xf7,
	0x5a, 0x17, 0x3e, 0x0c, 0x77, 0x5c, 0x0d, 0xb9, 0x94, 0x58, 0x57, 0x40, 0x3e, 0x10, 0x38, 0xe2,
	0x73, 0x27, 0xe1, 0xcb, 0xd4, 0x22, 0xad, 0x72, 0x96, 0x0b, 0x41, 0x66, 0x35, 0xaf, 0x8e, 0x7e,
	0x7e, 0x75, 0xb4, 0xae, 0x83, 0x48, 0x62, 0xc0, 0xbf, 0x14, 0x26, 0xfe, 0x84, 0x60, 0xcc, 0x4f,
	0xf8, 0xf4, 0xdc, 0xdb, 0xe8, 0x9f, 0x61, 0x98, 0xe8, 0x6c, 0xa9, 0xa0, 0xc9, 0xde, 0xc4, 0xdf,
	0xa1, 0xa7, 0x93, 0x9c, 0xda, 0x8f, 0xa9, 0xe8, 0x7b, 0xfc, 0x39, 0xd4, 0x78, 0x2c, 0x4f, 0x2e,
	0x9e, 0x7d, 0x60, 0xaa, 0x14, 0x9b, 0x55, 0x17, 0x57, 0x30, 0x5d, 0x52, 0x29, 0x33, 0xac, 0xa2,
	0xe1, 0x16, 0xd5, 0x2a, 0xc5, 0x6e, 0xba, 0x86, 0xa9, 0x4a, 0x6c, 0x95, 0x58, 0x8b, 0xae, 0xe1,
	0xb7, 0xef, 0xaa, 0x2e, 0x56, 0xef, 0xbb, 0x84, 0xe1, 0x7f, 0x3c, 0x96, 0x1f, 0x03, 0x78, 0x5e,
	0x68, 0xf8, 0xfe, 0xd5, 0x2d, 0xff, 0xaa, 0xf0, 0xaf, 0xb6, 0xba, 0x90, 0x2a, 0xe6, 0x91, 0xd4,
	0xb6, 0x16, 0xfe, 0x10, 0x40, 0xc9, 0xb1, 0x29, 0x43, 0xdf, 0x10, 0x2d, 0xcb, 0x6c, 0xeb, 0x0b,
	0x91, 0x66, 0xc7, 0xee, 0x18, 0xea, 0x7b, 0x77, 0xc7, 0xee, 0xa8, 0x86, 0xfa, 0xde, 0x29, 0x75,
	0xf2, 0xee, 0xc9, 0x3b, 0x62, 0x70, 0xe2, 0xe2, 0x89, 0x2e, 0xed, 0x3d, 0x61, 0x30, 0xad, 0xde,
	0x16, 0x36, 0xd3, 0xea, 0xed, 0x53, 0xea, 0xa4, 0x9e, 0xf1, 0x0d, 0x5b, 0x33, 0xcf, 0xda, 0x0f,
	0x44, 0xdf, 0x8a, 0xe4, 0xfd, 0xdf, 0xff, 0xf5, 0x87, 0xa1, 0x39, 0xe5, 0x5a, 0x97, 0x30, 0xbe,
	0xde, 0x1a, 0xaf, 0x74, 0xf5, 0xca, 0xe5, 0x2b, 0xdb, 0x21, 0xa7, 0xc0, 0x49, 0xf4, 0x3c, 0x0c,
	0x0f, 0x6f, 0xeb, 0x3b, 0xa1, 0x5d, 0xd4, 0x6c, 0xa7, 0xd6, 0x57, 0xf2, 0xfc, 0xbe, 0x6c, 0x45,
	0xc1, 0x37, 0x0f, 0x5c, 0xf0, 0x0f, 0x01, 0x7c, 0x73, 0x0f, 0x05, 0x17, 0x9f, 0xe2, 0x81, 0x8a,
	0x7f, 0xa7, 0x59, 0xf1, 0x55, 0xf0, 0xe9, 0x96, 0x5c, 0x84, 0xd2, 0x59, 0xf3, 0x2f, 0x2b, 0xb3,
	0xfb, 0xaf, 0xf9, 0x76, 0x4c, 0xaf, 0xe8, 0x3f, 0x92, 0xe0, 0xd1, 0xee, 0x7d, 0x1b, 0x74, 0xb1,
	0x77, 0xf5, 0x5e, 0xd8, 0xaa, 0x4a, 0x5e, 0xda, 0x3f, 0x80, 0xe0, 0xc0, 0xbf, 0x0f, 0xcc, 0x81,
	0x3f, 0x02, 0x38, 0xbd, 0x07, 0x0e, 0x98, 0x3c, 0x1e, 0xef, 0x1b, 0x23, 0xf8, 0xee, 0x8d, 0x1e,
	0x35, 0x89, 0xf0, 0xf0, 0x53, 0x26, 0x82, 0x1f, 0x8f, 0xde, 0xea, 0x7b, 0xe9, 0xcd, 0x90, 0x38,
	0x1f, 0xbe, 0xa2, 0xcc, 0xef, 0x9f, 0x0f, 0x3b, 0x42, 0x7b, 0xb4, 0xf8, 0x9e, 0x04, 0x5f, 0xee,
	0xda, 0x0d, 0x45, 0x17, 0x76, 0x5b, 0xd4, 0xee, 0xfd, 0xde, 0xe4, 0xc5, 0x7d, 0xdb, 0x0b, 0x4e,
	0xfc, 0xeb, 0xc0, 0x9c, 0xf8, 0x03, 0x80, 0x97, 0xf6, 0xcc, 0x09, 0x66, 0xb6, 0x53, 0xe2, 0xfb,
	0x4d, 0x4a, 0x7c, 0xeb, 0x7f, 0x43, 0x89, 0x66, 0x2f, 0xb9, 0x9d, 0x11, 0xb7, 0x14, 0xed, 0xc0,
	0x8c, 0xd8, 0x86, 0xec, 0x11, 0xe2, 0xbb, 0x21, 0x78, 0x74, 0x96, 0x50, 0x76, 0xa5, 0x65, 0xde,
	0xec, 0xd7, 0xa0, 0xb3, 0x7b, 0xed, 0xef, 0xf8, 0x44, 0x38, 0xb7, 0xbf, 0xb6, 0x90, 0xb2, 0x0a,
	0x1a, 0x8f, 0xe5, 0xf3, 0x3b, 0xd6, 0xbf, 0x62, 0x5b, 0x84, 0xd9, 0x3b, 0x51, 0xc0, 0xc5, 0x46,
	0x91, 0x27, 0xea, 0x3c, 0x9a, 0x6c, 0x26, 0xca, 0xaf, 0xf4, 0x1e, 0xf2, 0x95, 0x3c, 0xe7, 0x7d,
	0xb3, 0xfd, 0xae, 0x0e, 0x8e, 0xf7, 0x5c, 0x81, 0xff, 0xb9, 0xf4, 0xfe, 0x6f, 0xe5, 0xf0, 0x6a,
	0x18, 0xe4, 0x1e, 0x81, 0x8d, 0xa7, 0xa9, 0xbe, 0x27, 0x4f, 0x53, 0x7d, 0xcf, 0x9e, 0xa6, 0xc0,
	0x6a, 0x23, 0x05, 0x7e, 0xd1, 0x48, 0x81, 0xdf, 0x34, 0x52, 0x60, 0xa3, 0x91, 0x02, 0x7f, 0x69,
	0xa4, 0xc0, 0x47, 0x8d, 0x54, 0xdf, 0xb3, 0x46, 0x0a, 0x3c, 0xda, 0x4c, 0xf5, 0xad, 0x6f, 0xa6,
	0xc0, 0xc6, 0x66, 0xaa, 0xef, 0xc9, 0x66, 0xaa, 0xef, 0xf6, 0x42, 0xc9, 0x76, 0xee, 0x95, 0x32,
	0x35, 0xbb, 0xcc, 0xb0, 0xeb, 0x1a, 0x99, 0x2a, 0xcd, 0xf2, 0xc1, 0xa2, 0xed, 0x56, 0x54, 0xc7,
	0xb5, 0x6b, 0xa4, 0x88, 0x5d, 0xb5, 0x29, 0xce, 0x3a, 0x85, 0x92, 0x9d, 0xc5, 0x0f, 0x98, 0xf8,
	0xf3, 0xb6, 0xe3, 0x6f, 0xc6, 0x42, 0x84, 0xff, 0x88, 0x3b, 0xfd, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x99, 0xfe, 0xfa, 0x45, 0xa7, 0x1d, 0x00, 0x00,
}

func (this *EnableVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableVisibilityRequest)
	if !ok {
		that2, ok := that.(EnableVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *EnableVisibilityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableVisibilityResponse)
	if !ok {
		that2, ok := that.(EnableVisibilityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualHostRef.Equal(that1.VirtualHostRef) {
		return false
	}
	return true
}
func (this *DisableVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisableVisibilityRequest)
	if !ok {
		that2, ok := that.(DisableVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *DisableVisibilityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisableVisibilityResponse)
	if !ok {
		that2, ok := that.(DisableVisibilityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListServicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListServicesRequest)
	if !ok {
		that2, ok := that.(ListServicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ServiceType != that1.ServiceType {
		return false
	}
	if this.DiscoveryName != that1.DiscoveryName {
		return false
	}
	return true
}
func (this *CreateTCPLoadBalancerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTCPLoadBalancerRequest)
	if !ok {
		that2, ok := that.(CreateTCPLoadBalancerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.TcpLbRequest.Equal(that1.TcpLbRequest) {
		return false
	}
	return true
}
func (this *CreateTCPLoadBalancerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTCPLoadBalancerResponse)
	if !ok {
		that2, ok := that.(CreateTCPLoadBalancerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpLoadbalancer.Equal(that1.TcpLoadbalancer) {
		return false
	}
	return true
}
func (this *CreateHTTPLoadBalancerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateHTTPLoadBalancerRequest)
	if !ok {
		that2, ok := that.(CreateHTTPLoadBalancerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.HttpLbRequest.Equal(that1.HttpLbRequest) {
		return false
	}
	return true
}
func (this *CreateHTTPLoadBalancerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateHTTPLoadBalancerResponse)
	if !ok {
		that2, ok := that.(CreateHTTPLoadBalancerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadbalancer.Equal(that1.HttpLoadbalancer) {
		return false
	}
	return true
}
func (this *ListServicesResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListServicesResponseItem)
	if !ok {
		that2, ok := that.(ListServicesResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if !this.OwnerView.Equal(that1.OwnerView) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.GetSpec.Equal(that1.GetSpec) {
		return false
	}
	if len(this.StatusSet) != len(that1.StatusSet) {
		return false
	}
	for i := range this.StatusSet {
		if !this.StatusSet[i].Equal(that1.StatusSet[i]) {
			return false
		}
	}
	return true
}
func (this *ListServicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListServicesResponse)
	if !ok {
		that2, ok := that.(ListServicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if !this.Errors[i].Equal(that1.Errors[i]) {
			return false
		}
	}
	return true
}
func (this *HTTPLBRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLBRequest)
	if !ok {
		that2, ok := that.(HTTPLBRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.ServerValidationChoice == nil {
		if this.ServerValidationChoice != nil {
			return false
		}
	} else if this.ServerValidationChoice == nil {
		return false
	} else if !this.ServerValidationChoice.Equal(that1.ServerValidationChoice) {
		return false
	}
	return true
}
func (this *HTTPLBRequest_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLBRequest_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(HTTPLBRequest_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *HTTPLBRequest_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLBRequest_AdvertiseCustom)
	if !ok {
		that2, ok := that.(HTTPLBRequest_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *HTTPLBRequest_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLBRequest_HttpsAutoCert)
	if !ok {
		that2, ok := that.(HTTPLBRequest_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *HTTPLBRequest_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLBRequest_Https)
	if !ok {
		that2, ok := that.(HTTPLBRequest_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *HTTPLBRequest_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLBRequest_Http)
	if !ok {
		that2, ok := that.(HTTPLBRequest_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *HTTPLBRequest_TrustedCa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLBRequest_TrustedCa)
	if !ok {
		that2, ok := that.(HTTPLBRequest_TrustedCa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TrustedCa.Equal(that1.TrustedCa) {
		return false
	}
	return true
}
func (this *HTTPLBRequest_SkipServerVerification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLBRequest_SkipServerVerification)
	if !ok {
		that2, ok := that.(HTTPLBRequest_SkipServerVerification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkipServerVerification.Equal(that1.SkipServerVerification) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps)
	if !ok {
		that2, ok := that.(ProxyTypeHttps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return false
	}
	for i := range this.Certificates {
		if !this.Certificates[i].Equal(that1.Certificates[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_Site)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_VirtualSite)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *WhereSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereSite)
	if !ok {
		that2, ok := that.(WhereSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Site) != len(that1.Site) {
		return false
	}
	for i := range this.Site {
		if !this.Site[i].Equal(that1.Site[i]) {
			return false
		}
	}
	return true
}
func (this *WhereVirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereVirtualSite)
	if !ok {
		that2, ok := that.(WhereVirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VirtualSite) != len(that1.VirtualSite) {
		return false
	}
	for i := range this.VirtualSite {
		if !this.VirtualSite[i].Equal(that1.VirtualSite[i]) {
			return false
		}
	}
	return true
}
func (this *ProxyTypeHttp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp)
	if !ok {
		that2, ok := that.(ProxyTypeHttp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	return true
}
func (this *ProxyTypeHttp_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ProxyTypeHttp_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ProxyTypeHttp_Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp_Site)
	if !ok {
		that2, ok := that.(ProxyTypeHttp_Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *ProxyTypeHttp_VirtualSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp_VirtualSite)
	if !ok {
		that2, ok := that.(ProxyTypeHttp_VirtualSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualSite.Equal(that1.VirtualSite) {
		return false
	}
	return true
}
func (this *TCPLBRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLBRequest)
	if !ok {
		that2, ok := that.(TCPLBRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.SniDefaultLbChoice == nil {
		if this.SniDefaultLbChoice != nil {
			return false
		}
	} else if this.SniDefaultLbChoice == nil {
		return false
	} else if !this.SniDefaultLbChoice.Equal(that1.SniDefaultLbChoice) {
		return false
	}
	return true
}
func (this *TCPLBRequest_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLBRequest_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(TCPLBRequest_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *TCPLBRequest_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLBRequest_AdvertiseCustom)
	if !ok {
		that2, ok := that.(TCPLBRequest_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *TCPLBRequest_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLBRequest_ListenPort)
	if !ok {
		that2, ok := that.(TCPLBRequest_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *TCPLBRequest_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLBRequest_PortRanges)
	if !ok {
		that2, ok := that.(TCPLBRequest_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *TCPLBRequest_NoSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLBRequest_NoSni)
	if !ok {
		that2, ok := that.(TCPLBRequest_NoSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoSni.Equal(that1.NoSni) {
		return false
	}
	return true
}
func (this *TCPLBRequest_Sni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLBRequest_Sni)
	if !ok {
		that2, ok := that.(TCPLBRequest_Sni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sni.Equal(that1.Sni) {
		return false
	}
	return true
}
func (this *EnableVisibilityRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovered_service.EnableVisibilityRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnableVisibilityResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&discovered_service.EnableVisibilityResponse{")
	if this.VirtualHostRef != nil {
		s = append(s, "VirtualHostRef: "+fmt.Sprintf("%#v", this.VirtualHostRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisableVisibilityRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovered_service.DisableVisibilityRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisableVisibilityResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&discovered_service.DisableVisibilityResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListServicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&discovered_service.ListServicesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	s = append(s, "DiscoveryName: "+fmt.Sprintf("%#v", this.DiscoveryName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTCPLoadBalancerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&discovered_service.CreateTCPLoadBalancerRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.TcpLbRequest != nil {
		s = append(s, "TcpLbRequest: "+fmt.Sprintf("%#v", this.TcpLbRequest)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTCPLoadBalancerResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&discovered_service.CreateTCPLoadBalancerResponse{")
	if this.TcpLoadbalancer != nil {
		s = append(s, "TcpLoadbalancer: "+fmt.Sprintf("%#v", this.TcpLoadbalancer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateHTTPLoadBalancerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&discovered_service.CreateHTTPLoadBalancerRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.HttpLbRequest != nil {
		s = append(s, "HttpLbRequest: "+fmt.Sprintf("%#v", this.HttpLbRequest)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateHTTPLoadBalancerResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&discovered_service.CreateHTTPLoadBalancerResponse{")
	if this.HttpLoadbalancer != nil {
		s = append(s, "HttpLoadbalancer: "+fmt.Sprintf("%#v", this.HttpLoadbalancer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListServicesResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&discovered_service.ListServicesResponseItem{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Disabled: "+fmt.Sprintf("%#v", this.Disabled)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%#v: %#v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	if this.Annotations != nil {
		s = append(s, "Annotations: "+mapStringForAnnotations+",\n")
	}
	if this.OwnerView != nil {
		s = append(s, "OwnerView: "+fmt.Sprintf("%#v", this.OwnerView)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.GetSpec != nil {
		s = append(s, "GetSpec: "+fmt.Sprintf("%#v", this.GetSpec)+",\n")
	}
	if this.StatusSet != nil {
		s = append(s, "StatusSet: "+fmt.Sprintf("%#v", this.StatusSet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListServicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovered_service.ListServicesResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPLBRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&discovered_service.HTTPLBRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.ServerValidationChoice != nil {
		s = append(s, "ServerValidationChoice: "+fmt.Sprintf("%#v", this.ServerValidationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPLBRequest_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.HTTPLBRequest_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *HTTPLBRequest_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.HTTPLBRequest_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *HTTPLBRequest_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.HTTPLBRequest_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *HTTPLBRequest_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.HTTPLBRequest_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *HTTPLBRequest_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.HTTPLBRequest_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *HTTPLBRequest_TrustedCa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.HTTPLBRequest_TrustedCa{` +
		`TrustedCa:` + fmt.Sprintf("%#v", this.TrustedCa) + `}`}, ", ")
	return s
}
func (this *HTTPLBRequest_SkipServerVerification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.HTTPLBRequest_SkipServerVerification{` +
		`SkipServerVerification:` + fmt.Sprintf("%#v", this.SkipServerVerification) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&discovered_service.ProxyTypeHttps{")
	if this.Certificates != nil {
		s = append(s, "Certificates: "+fmt.Sprintf("%#v", this.Certificates)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttps_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ProxyTypeHttps_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ProxyTypeHttps_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ProxyTypeHttps_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *WhereSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&discovered_service.WhereSite{")
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhereVirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&discovered_service.WhereVirtualSite{")
	if this.VirtualSite != nil {
		s = append(s, "VirtualSite: "+fmt.Sprintf("%#v", this.VirtualSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&discovered_service.ProxyTypeHttp{")
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttp_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ProxyTypeHttp_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttp_Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ProxyTypeHttp_Site{` +
		`Site:` + fmt.Sprintf("%#v", this.Site) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttp_VirtualSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ProxyTypeHttp_VirtualSite{` +
		`VirtualSite:` + fmt.Sprintf("%#v", this.VirtualSite) + `}`}, ", ")
	return s
}
func (this *TCPLBRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&discovered_service.TCPLBRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.SniDefaultLbChoice != nil {
		s = append(s, "SniDefaultLbChoice: "+fmt.Sprintf("%#v", this.SniDefaultLbChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TCPLBRequest_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.TCPLBRequest_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *TCPLBRequest_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.TCPLBRequest_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *TCPLBRequest_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.TCPLBRequest_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *TCPLBRequest_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.TCPLBRequest_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *TCPLBRequest_NoSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.TCPLBRequest_NoSni{` +
		`NoSni:` + fmt.Sprintf("%#v", this.NoSni) + `}`}, ", ")
	return s
}
func (this *TCPLBRequest_Sni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.TCPLBRequest_Sni{` +
		`Sni:` + fmt.Sprintf("%#v", this.Sni) + `}`}, ", ")
	return s
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Enable visibility in all workspaces
	//
	// x-displayName: "Enable visibility in all workspaces"
	// Enable Visibility of the service in all workspaces. This action will make the
	// discovered service visible within WAAP, App Connect where the user can perform
	// the workspace specific actions.
	EnableVisibility(ctx context.Context, in *EnableVisibilityRequest, opts ...grpc.CallOption) (*EnableVisibilityResponse, error)
	// Disable visibility in all workspaces
	//
	// x-displayName: "Disable visibility in all workspaces"
	// Disable Visibility of the service in all workspaces. This will remove the discovered service
	// from being visible in other wokspaces like WAAP.
	DisableVisibility(ctx context.Context, in *DisableVisibilityRequest, opts ...grpc.CallOption) (*DisableVisibilityResponse, error)
	// Create HTTP or HTTPS Load Balancer
	//
	// x-displayName: "Create HTTP/HTTPS load balancer"
	// Create HTTP/HTTPS load balancer using the discovered virtual server as an origin server
	CreateHTTPLoadBalancer(ctx context.Context, in *CreateHTTPLoadBalancerRequest, opts ...grpc.CallOption) (*CreateHTTPLoadBalancerResponse, error)
	// Create TCP Load Balancer
	//
	// x-displayName: "Create TCP load balancer"
	// Create TCP load balancer using the discovered virtual server as an origin server
	CreateTCPLoadBalancer(ctx context.Context, in *CreateTCPLoadBalancerRequest, opts ...grpc.CallOption) (*CreateTCPLoadBalancerResponse, error)
	// List discovered services of specific type
	//
	// x-displayName: "List discovered services of specific type"
	// List the discoverd services of specific type like virtual-servers, k8s, consul, ngix server, etc
	ListDiscoveredServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) EnableVisibility(ctx context.Context, in *EnableVisibilityRequest, opts ...grpc.CallOption) (*EnableVisibilityResponse, error) {
	out := new(EnableVisibilityResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.discovered_service.CustomAPI/EnableVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DisableVisibility(ctx context.Context, in *DisableVisibilityRequest, opts ...grpc.CallOption) (*DisableVisibilityResponse, error) {
	out := new(DisableVisibilityResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.discovered_service.CustomAPI/DisableVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) CreateHTTPLoadBalancer(ctx context.Context, in *CreateHTTPLoadBalancerRequest, opts ...grpc.CallOption) (*CreateHTTPLoadBalancerResponse, error) {
	out := new(CreateHTTPLoadBalancerResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.discovered_service.CustomAPI/CreateHTTPLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) CreateTCPLoadBalancer(ctx context.Context, in *CreateTCPLoadBalancerRequest, opts ...grpc.CallOption) (*CreateTCPLoadBalancerResponse, error) {
	out := new(CreateTCPLoadBalancerResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.discovered_service.CustomAPI/CreateTCPLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListDiscoveredServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.discovered_service.CustomAPI/ListDiscoveredServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Enable visibility in all workspaces
	//
	// x-displayName: "Enable visibility in all workspaces"
	// Enable Visibility of the service in all workspaces. This action will make the
	// discovered service visible within WAAP, App Connect where the user can perform
	// the workspace specific actions.
	EnableVisibility(context.Context, *EnableVisibilityRequest) (*EnableVisibilityResponse, error)
	// Disable visibility in all workspaces
	//
	// x-displayName: "Disable visibility in all workspaces"
	// Disable Visibility of the service in all workspaces. This will remove the discovered service
	// from being visible in other wokspaces like WAAP.
	DisableVisibility(context.Context, *DisableVisibilityRequest) (*DisableVisibilityResponse, error)
	// Create HTTP or HTTPS Load Balancer
	//
	// x-displayName: "Create HTTP/HTTPS load balancer"
	// Create HTTP/HTTPS load balancer using the discovered virtual server as an origin server
	CreateHTTPLoadBalancer(context.Context, *CreateHTTPLoadBalancerRequest) (*CreateHTTPLoadBalancerResponse, error)
	// Create TCP Load Balancer
	//
	// x-displayName: "Create TCP load balancer"
	// Create TCP load balancer using the discovered virtual server as an origin server
	CreateTCPLoadBalancer(context.Context, *CreateTCPLoadBalancerRequest) (*CreateTCPLoadBalancerResponse, error)
	// List discovered services of specific type
	//
	// x-displayName: "List discovered services of specific type"
	// List the discoverd services of specific type like virtual-servers, k8s, consul, ngix server, etc
	ListDiscoveredServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) EnableVisibility(ctx context.Context, req *EnableVisibilityRequest) (*EnableVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableVisibility not implemented")
}
func (*UnimplementedCustomAPIServer) DisableVisibility(ctx context.Context, req *DisableVisibilityRequest) (*DisableVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVisibility not implemented")
}
func (*UnimplementedCustomAPIServer) CreateHTTPLoadBalancer(ctx context.Context, req *CreateHTTPLoadBalancerRequest) (*CreateHTTPLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHTTPLoadBalancer not implemented")
}
func (*UnimplementedCustomAPIServer) CreateTCPLoadBalancer(ctx context.Context, req *CreateTCPLoadBalancerRequest) (*CreateTCPLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTCPLoadBalancer not implemented")
}
func (*UnimplementedCustomAPIServer) ListDiscoveredServices(ctx context.Context, req *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiscoveredServices not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_EnableVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).EnableVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.discovered_service.CustomAPI/EnableVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).EnableVisibility(ctx, req.(*EnableVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DisableVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DisableVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.discovered_service.CustomAPI/DisableVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DisableVisibility(ctx, req.(*DisableVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_CreateHTTPLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHTTPLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CreateHTTPLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.discovered_service.CustomAPI/CreateHTTPLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CreateHTTPLoadBalancer(ctx, req.(*CreateHTTPLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_CreateTCPLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTCPLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CreateTCPLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.discovered_service.CustomAPI/CreateTCPLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CreateTCPLoadBalancer(ctx, req.(*CreateTCPLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListDiscoveredServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListDiscoveredServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.discovered_service.CustomAPI/ListDiscoveredServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListDiscoveredServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.discovered_service.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableVisibility",
			Handler:    _CustomAPI_EnableVisibility_Handler,
		},
		{
			MethodName: "DisableVisibility",
			Handler:    _CustomAPI_DisableVisibility_Handler,
		},
		{
			MethodName: "CreateHTTPLoadBalancer",
			Handler:    _CustomAPI_CreateHTTPLoadBalancer_Handler,
		},
		{
			MethodName: "CreateTCPLoadBalancer",
			Handler:    _CustomAPI_CreateTCPLoadBalancer_Handler,
		},
		{
			MethodName: "ListDiscoveredServices",
			Handler:    _CustomAPI_ListDiscoveredServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/discovered_service/public_customapi.proto",
}

func (m *EnableVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnableVisibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableVisibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableVisibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VirtualHostRef != nil {
		{
			size, err := m.VirtualHostRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *DisableVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisableVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisableVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisableVisibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisableVisibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisableVisibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DiscoveryName) > 0 {
		i -= len(m.DiscoveryName)
		copy(dAtA[i:], m.DiscoveryName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DiscoveryName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceType) > 0 {
		i -= len(m.ServiceType)
		copy(dAtA[i:], m.ServiceType)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ServiceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTCPLoadBalancerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTCPLoadBalancerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTCPLoadBalancerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TcpLbRequest != nil {
		{
			size, err := m.TcpLbRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTCPLoadBalancerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTCPLoadBalancerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTCPLoadBalancerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TcpLoadbalancer != nil {
		{
			size, err := m.TcpLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateHTTPLoadBalancerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateHTTPLoadBalancerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateHTTPLoadBalancerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HttpLbRequest != nil {
		{
			size, err := m.HttpLbRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateHTTPLoadBalancerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateHTTPLoadBalancerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateHTTPLoadBalancerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HttpLoadbalancer != nil {
		{
			size, err := m.HttpLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServicesResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServicesResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServicesResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusSet) > 0 {
		for iNdEx := len(m.StatusSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatusSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.GetSpec != nil {
		{
			size, err := m.GetSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.OwnerView != nil {
		{
			size, err := m.OwnerView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HTTPLBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPLBRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLBRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerValidationChoice != nil {
		{
			size := m.ServerValidationChoice.Size()
			i -= size
			if _, err := m.ServerValidationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HTTPLBRequest_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLBRequest_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *HTTPLBRequest_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLBRequest_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *HTTPLBRequest_TrustedCa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLBRequest_TrustedCa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TrustedCa != nil {
		{
			size, err := m.TrustedCa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HTTPLBRequest_SkipServerVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLBRequest_SkipServerVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkipServerVerification != nil {
		{
			size, err := m.SkipServerVerification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *HTTPLBRequest_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLBRequest_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *HTTPLBRequest_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLBRequest_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *HTTPLBRequest_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLBRequest_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttps_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WhereSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		for iNdEx := len(m.Site) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Site[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhereVirtualSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereVirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereVirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualSite) > 0 {
		for iNdEx := len(m.VirtualSite) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualSite[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttp_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttp_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttp_Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttp_Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttp_VirtualSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttp_VirtualSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualSite != nil {
		{
			size, err := m.VirtualSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TCPLBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPLBRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLBRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SniDefaultLbChoice != nil {
		{
			size := m.SniDefaultLbChoice.Size()
			i -= size
			if _, err := m.SniDefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TCPLBRequest_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLBRequest_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TCPLBRequest_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLBRequest_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TCPLBRequest_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLBRequest_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *TCPLBRequest_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLBRequest_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *TCPLBRequest_NoSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLBRequest_NoSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoSni != nil {
		{
			size, err := m.NoSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *TCPLBRequest_Sni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLBRequest_Sni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sni != nil {
		{
			size, err := m.Sni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnableVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *EnableVisibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualHostRef != nil {
		l = m.VirtualHostRef.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *DisableVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *DisableVisibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListServicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.DiscoveryName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CreateTCPLoadBalancerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.TcpLbRequest != nil {
		l = m.TcpLbRequest.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CreateTCPLoadBalancerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpLoadbalancer != nil {
		l = m.TcpLoadbalancer.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CreateHTTPLoadBalancerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.HttpLbRequest != nil {
		l = m.HttpLbRequest.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CreateHTTPLoadBalancerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadbalancer != nil {
		l = m.HttpLoadbalancer.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListServicesResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	if m.OwnerView != nil {
		l = m.OwnerView.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.GetSpec != nil {
		l = m.GetSpec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.StatusSet) > 0 {
		for _, e := range m.StatusSet {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *ListServicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *HTTPLBRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if m.ServerValidationChoice != nil {
		n += m.ServerValidationChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	return n
}

func (m *HTTPLBRequest_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *HTTPLBRequest_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *HTTPLBRequest_TrustedCa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrustedCa != nil {
		l = m.TrustedCa.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *HTTPLBRequest_SkipServerVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipServerVerification != nil {
		l = m.SkipServerVerification.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *HTTPLBRequest_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *HTTPLBRequest_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *HTTPLBRequest_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	return n
}

func (m *ProxyTypeHttps_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *WhereSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Site) > 0 {
		for _, e := range m.Site {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *WhereVirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VirtualSite) > 0 {
		for _, e := range m.VirtualSite {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *ProxyTypeHttp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	return n
}

func (m *ProxyTypeHttp_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttp_Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttp_VirtualSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualSite != nil {
		l = m.VirtualSite.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *TCPLBRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.SniDefaultLbChoice != nil {
		n += m.SniDefaultLbChoice.Size()
	}
	return n
}

func (m *TCPLBRequest_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *TCPLBRequest_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *TCPLBRequest_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPublicCustomapi(uint64(m.ListenPort))
	return n
}
func (m *TCPLBRequest_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 1 + l + sovPublicCustomapi(uint64(l))
	return n
}
func (m *TCPLBRequest_NoSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoSni != nil {
		l = m.NoSni.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *TCPLBRequest_Sni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sni != nil {
		l = m.Sni.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EnableVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableVisibilityRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableVisibilityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableVisibilityResponse{`,
		`VirtualHostRef:` + strings.Replace(fmt.Sprintf("%v", this.VirtualHostRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisableVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisableVisibilityRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisableVisibilityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisableVisibilityResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ListServicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListServicesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`DiscoveryName:` + fmt.Sprintf("%v", this.DiscoveryName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTCPLoadBalancerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTCPLoadBalancerRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TcpLbRequest:` + strings.Replace(this.TcpLbRequest.String(), "TCPLBRequest", "TCPLBRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTCPLoadBalancerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTCPLoadBalancerResponse{`,
		`TcpLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.TcpLoadbalancer), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateHTTPLoadBalancerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateHTTPLoadBalancerRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`HttpLbRequest:` + strings.Replace(this.HttpLbRequest.String(), "HTTPLBRequest", "HTTPLBRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateHTTPLoadBalancerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateHTTPLoadBalancerResponse{`,
		`HttpLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadbalancer), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListServicesResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatusSet := "[]*StatusObject{"
	for _, f := range this.StatusSet {
		repeatedStringForStatusSet += strings.Replace(fmt.Sprintf("%v", f), "StatusObject", "StatusObject", 1) + ","
	}
	repeatedStringForStatusSet += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	s := strings.Join([]string{`&ListServicesResponseItem{`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Disabled:` + fmt.Sprintf("%v", this.Disabled) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`OwnerView:` + strings.Replace(fmt.Sprintf("%v", this.OwnerView), "ViewRefType", "schema.ViewRefType", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`GetSpec:` + strings.Replace(fmt.Sprintf("%v", this.GetSpec), "GetSpecType", "GetSpecType", 1) + `,`,
		`StatusSet:` + repeatedStringForStatusSet + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListServicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*ListServicesResponseItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "ListServicesResponseItem", "ListServicesResponseItem", 1) + ","
	}
	repeatedStringForItems += "}"
	repeatedStringForErrors := "[]*ErrorType{"
	for _, f := range this.Errors {
		repeatedStringForErrors += strings.Replace(fmt.Sprintf("%v", f), "ErrorType", "schema.ErrorType", 1) + ","
	}
	repeatedStringForErrors += "}"
	s := strings.Join([]string{`&ListServicesResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`Errors:` + repeatedStringForErrors + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLBRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLBRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`ServerValidationChoice:` + fmt.Sprintf("%v", this.ServerValidationChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLBRequest_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLBRequest_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLBRequest_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLBRequest_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLBRequest_TrustedCa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLBRequest_TrustedCa{`,
		`TrustedCa:` + strings.Replace(fmt.Sprintf("%v", this.TrustedCa), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLBRequest_SkipServerVerification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLBRequest_SkipServerVerification{`,
		`SkipServerVerification:` + strings.Replace(fmt.Sprintf("%v", this.SkipServerVerification), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLBRequest_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLBRequest_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLBRequest_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLBRequest_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLBRequest_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLBRequest_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCertificates := "[]*ObjectRefType{"
	for _, f := range this.Certificates {
		repeatedStringForCertificates += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForCertificates += "}"
	s := strings.Join([]string{`&ProxyTypeHttps{`,
		`Certificates:` + repeatedStringForCertificates + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "WhereSite", "WhereSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "WhereVirtualSite", "WhereVirtualSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereSite) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSite := "[]*ObjectRefType{"
	for _, f := range this.Site {
		repeatedStringForSite += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForSite += "}"
	s := strings.Join([]string{`&WhereSite{`,
		`Site:` + repeatedStringForSite + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereVirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVirtualSite := "[]*ObjectRefType{"
	for _, f := range this.VirtualSite {
		repeatedStringForVirtualSite += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForVirtualSite += "}"
	s := strings.Join([]string{`&WhereVirtualSite{`,
		`VirtualSite:` + repeatedStringForVirtualSite + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp{`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp_Site) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp_Site{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "WhereSite", "WhereSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp_VirtualSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp_VirtualSite{`,
		`VirtualSite:` + strings.Replace(fmt.Sprintf("%v", this.VirtualSite), "WhereVirtualSite", "WhereVirtualSite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLBRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLBRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`SniDefaultLbChoice:` + fmt.Sprintf("%v", this.SniDefaultLbChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLBRequest_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLBRequest_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLBRequest_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLBRequest_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLBRequest_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLBRequest_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLBRequest_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLBRequest_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLBRequest_NoSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLBRequest_NoSni{`,
		`NoSni:` + strings.Replace(fmt.Sprintf("%v", this.NoSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLBRequest_Sni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLBRequest_Sni{`,
		`Sni:` + strings.Replace(fmt.Sprintf("%v", this.Sni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EnableVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableVisibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableVisibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableVisibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHostRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualHostRef == nil {
				m.VirtualHostRef = &views.ObjectRefType{}
			}
			if err := m.VirtualHostRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisableVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisableVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisableVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisableVisibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisableVisibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisableVisibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTCPLoadBalancerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTCPLoadBalancerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTCPLoadBalancerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLbRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpLbRequest == nil {
				m.TcpLbRequest = &TCPLBRequest{}
			}
			if err := m.TcpLbRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTCPLoadBalancerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTCPLoadBalancerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTCPLoadBalancerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpLoadbalancer == nil {
				m.TcpLoadbalancer = &views.ObjectRefType{}
			}
			if err := m.TcpLoadbalancer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateHTTPLoadBalancerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateHTTPLoadBalancerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateHTTPLoadBalancerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLbRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpLbRequest == nil {
				m.HttpLbRequest = &HTTPLBRequest{}
			}
			if err := m.HttpLbRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateHTTPLoadBalancerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateHTTPLoadBalancerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateHTTPLoadBalancerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpLoadbalancer == nil {
				m.HttpLoadbalancer = &views.ObjectRefType{}
			}
			if err := m.HttpLoadbalancer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnerView == nil {
				m.OwnerView = &schema.ViewRefType{}
			}
			if err := m.OwnerView.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetSpec == nil {
				m.GetSpec = &GetSpecType{}
			}
			if err := m.GetSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusSet = append(m.StatusSet, &StatusObject{})
			if err := m.StatusSet[len(m.StatusSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ListServicesResponseItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &schema.ErrorType{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPLBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPLBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPLBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &HTTPLBRequest_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &HTTPLBRequest_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerValidationChoice = &HTTPLBRequest_TrustedCa{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipServerVerification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerValidationChoice = &HTTPLBRequest_SkipServerVerification{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &HTTPLBRequest_HttpsAutoCert{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &HTTPLBRequest_Https{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &HTTPLBRequest_Http{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &schema.ObjectRefType{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyTypeHttps_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyTypeHttps_Site{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyTypeHttps_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = append(m.Site, &schema.ObjectRefType{})
			if err := m.Site[len(m.Site)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereVirtualSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereVirtualSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereVirtualSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSite = append(m.VirtualSite, &schema.ObjectRefType{})
			if err := m.VirtualSite[len(m.VirtualSite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyTypeHttp_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyTypeHttp_Site{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereVirtualSite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyTypeHttp_VirtualSite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPLBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPLBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPLBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &TCPLBRequest_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &TCPLBRequest_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &TCPLBRequest_ListenPort{v}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &TCPLBRequest_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &TCPLBRequest_NoSni{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &TCPLBRequest_Sni{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package discovered_service

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.discovered_service.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.discovered_service.Object"] = ObjectValidator()
	vr["ves.io.schema.discovered_service.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.discovered_service.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.discovered_service.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.discovered_service.ListRequest"] = ListRequestValidator()
	vr["ves.io.schema.discovered_service.ListResponse"] = ListResponseValidator()
	vr["ves.io.schema.discovered_service.ListResponseItem"] = ListResponseItemValidator()

	vr["ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest"] = CreateHTTPLoadBalancerRequestValidator()
	vr["ves.io.schema.discovered_service.CreateHTTPLoadBalancerResponse"] = CreateHTTPLoadBalancerResponseValidator()
	vr["ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest"] = CreateTCPLoadBalancerRequestValidator()
	vr["ves.io.schema.discovered_service.CreateTCPLoadBalancerResponse"] = CreateTCPLoadBalancerResponseValidator()
	vr["ves.io.schema.discovered_service.DisableWAAPRequest"] = DisableWAAPRequestValidator()
	vr["ves.io.schema.discovered_service.DisableWAAPResponse"] = DisableWAAPResponseValidator()
	vr["ves.io.schema.discovered_service.EnableWAAPRequest"] = EnableWAAPRequestValidator()
	vr["ves.io.schema.discovered_service.EnableWAAPResponse"] = EnableWAAPResponseValidator()
	vr["ves.io.schema.discovered_service.HTTPLBRequest"] = HTTPLBRequestValidator()
	vr["ves.io.schema.discovered_service.ListServicesRequest"] = ListServicesRequestValidator()
	vr["ves.io.schema.discovered_service.ListServicesResponse"] = ListServicesResponseValidator()
	vr["ves.io.schema.discovered_service.ListServicesResponseItem"] = ListServicesResponseItemValidator()
	vr["ves.io.schema.discovered_service.TCPLBRequest"] = TCPLBRequestValidator()

	vr["ves.io.schema.discovered_service.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.discovered_service.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.discovered_service.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.discovered_service.ReplaceSpecType"] = ReplaceSpecTypeValidator()
	vr["ves.io.schema.discovered_service.VirtualServer"] = VirtualServerValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.discovered_service.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.discovered_service.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.discovered_service.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.discovered_service.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.discovered_service.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.discovered_service.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.discovered_service.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.discovered_service.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCSubscriptionFieldsRegistry["ves.io.schema.discovered_service.CustomAPI.CreateHTTPLoadBalancer"] = []svcfw.SubscriptionField{
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest.http_lb_request.advertise_choice.advertise_custom.advertise_where.choice.cloud_edge_segment.ipv6",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest.http_lb_request.advertise_choice.advertise_custom.advertise_where.choice.site.ipv6",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest.http_lb_request.advertise_choice.advertise_custom.advertise_where.choice.site_segment.ipv6",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest.http_lb_request.advertise_choice.advertise_custom.advertise_where.choice.virtual_network.v6_vip_choice.default_v6_vip",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest.http_lb_request.advertise_choice.advertise_custom.advertise_where.choice.virtual_network.v6_vip_choice.specific_v6_vip",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest.http_lb_request.advertise_choice.advertise_custom.advertise_where.choice.virtual_site_segment.ipv6",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.discovered_service.CustomAPI.CreateHTTPLoadBalancer"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "http_lb_request.advertise_custom.advertise_where.#.cloud_edge_segment.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "http_lb_request.advertise_custom.advertise_where.#.site.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "http_lb_request.advertise_custom.advertise_where.#.site_segment.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "http_lb_request.advertise_custom.advertise_where.#.virtual_network.v6_vip_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "http_lb_request.advertise_custom.advertise_where.#.virtual_site_segment.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "http_lb_request.advertise_custom.advertise_where.#.virtual_site_with_vip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
	}

	mdr.RPCSubscriptionFieldsRegistry["ves.io.schema.discovered_service.CustomAPI.CreateTCPLoadBalancer"] = []svcfw.SubscriptionField{
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest.tcp_lb_request.advertise_choice.advertise_custom.advertise_where.choice.cloud_edge_segment.ipv6",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest.tcp_lb_request.advertise_choice.advertise_custom.advertise_where.choice.site.ipv6",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest.tcp_lb_request.advertise_choice.advertise_custom.advertise_where.choice.site_segment.ipv6",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest.tcp_lb_request.advertise_choice.advertise_custom.advertise_where.choice.virtual_network.v6_vip_choice.default_v6_vip",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest.tcp_lb_request.advertise_choice.advertise_custom.advertise_where.choice.virtual_network.v6_vip_choice.specific_v6_vip",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest.tcp_lb_request.advertise_choice.advertise_custom.advertise_where.choice.virtual_site_segment.ipv6",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.discovered_service.CustomAPI.CreateTCPLoadBalancer"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "tcp_lb_request.advertise_custom.advertise_where.#.cloud_edge_segment.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "tcp_lb_request.advertise_custom.advertise_where.#.site.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "tcp_lb_request.advertise_custom.advertise_where.#.site_segment.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "tcp_lb_request.advertise_custom.advertise_where.#.virtual_network.v6_vip_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "tcp_lb_request.advertise_custom.advertise_where.#.virtual_site_segment.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "tcp_lb_request.advertise_custom.advertise_where.#.virtual_site_with_vip.ipv6",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
	}

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.discovered_service.API"] = "discovery"
	sm["ves.io.schema.discovered_service.CustomAPI"] = "discovery"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	csr = mdr.PubCRUDServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		csr.CRUDSwaggerRegistry["ves.io.schema.discovered_service.Object"] = APISwaggerJSON
		csr.CRUDGrpcClientRegistry["ves.io.schema.discovered_service.Object"] = NewCRUDAPIGrpcClient
		csr.CRUDRestClientRegistry["ves.io.schema.discovered_service.Object"] = NewCRUDAPIRestClient
		csr.CRUDInprocClientRegistry["ves.io.schema.discovered_service.Object"] = NewCRUDAPIInprocClient
		if isExternal {
			return
		}
		// registration of api handlers if our own schema
		mdr.SvcRegisterHandlers["ves.io.schema.discovered_service.API"] = RegisterAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.discovered_service.API"] = RegisterGwAPIHandler
		csr.CRUDServerRegistry["ves.io.schema.discovered_service.Object"] = NewCRUDAPIServer

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.discovered_service.Object"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.discovered_service.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.discovered_service.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.discovered_service.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.discovered_service.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.discovered_service.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/discovered_service/public_custom_data_api.proto

// Discovered Service Data API
//
// x-displayName: "Discovered Services"
// APIs to get the monitoring data for Discovered services

package discovered_service

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DiscoveredServiceHealthStatusRequest
//
// x-displayName: "Discovered Service Health Status Request"
// Request to get health status of a Discovered Service
type DiscoveredServiceHealthStatusRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "ns1"
	// Namespace in which the Discovered Service is present
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "vs1"
	// Name of the Discovered Service
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DiscoveredServiceHealthStatusRequest) Reset()      { *m = DiscoveredServiceHealthStatusRequest{} }
func (*DiscoveredServiceHealthStatusRequest) ProtoMessage() {}
func (*DiscoveredServiceHealthStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca6dc597b363a15, []int{0}
}
func (m *DiscoveredServiceHealthStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredServiceHealthStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredServiceHealthStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredServiceHealthStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredServiceHealthStatusRequest.Merge(m, src)
}
func (m *DiscoveredServiceHealthStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredServiceHealthStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredServiceHealthStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredServiceHealthStatusRequest proto.InternalMessageInfo

func (m *DiscoveredServiceHealthStatusRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DiscoveredServiceHealthStatusRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DiscoveredServiceHealthStatusResponse
//
// x-displayName: "Discovered Service Health Status Response"
// Response for Discovered Service Health Status Request
type DiscoveredServiceHealthStatusResponse struct {
	// Status
	//
	// x-displayName: "Status"
	// Health Status of Discovered Service
	Status []*schema.MetricValue `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// Discovered Service (Virtual Server) Pool Members. This will be a oneof when other
	// discovered service types are supported.
	//
	// x-displayName: "Virtual Server's Pool Members"
	// Health of pool members of the virtual server
	VirtualServerPoolMembersHealth *VirtualServerPoolMemberHealth `protobuf:"bytes,2,opt,name=virtual_server_pool_members_health,json=virtualServerPoolMembersHealth,proto3" json:"virtual_server_pool_members_health,omitempty"`
}

func (m *DiscoveredServiceHealthStatusResponse) Reset()      { *m = DiscoveredServiceHealthStatusResponse{} }
func (*DiscoveredServiceHealthStatusResponse) ProtoMessage() {}
func (*DiscoveredServiceHealthStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca6dc597b363a15, []int{1}
}
func (m *DiscoveredServiceHealthStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredServiceHealthStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredServiceHealthStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredServiceHealthStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredServiceHealthStatusResponse.Merge(m, src)
}
func (m *DiscoveredServiceHealthStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredServiceHealthStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredServiceHealthStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredServiceHealthStatusResponse proto.InternalMessageInfo

func (m *DiscoveredServiceHealthStatusResponse) GetStatus() []*schema.MetricValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DiscoveredServiceHealthStatusResponse) GetVirtualServerPoolMembersHealth() *VirtualServerPoolMemberHealth {
	if m != nil {
		return m.VirtualServerPoolMembersHealth
	}
	return nil
}

// BIG-IP Virtual Server's Pool Member Health
//
// x-displayName: "Virtual Server's Pool Members Health"
// Health of each pool member of the virtual server
type VirtualServerPoolMemberHealth struct {
	// BIG-IP Virtual Server's Pool Member Health
	//
	// x-displayName: "Pool Member health"
	// Collection of Pool member health status
	VirtualServerPoolMembers []*VirtualServerPoolHealthStatusListResponseItem `protobuf:"bytes,1,rep,name=virtual_server_pool_members,json=virtualServerPoolMembers,proto3" json:"virtual_server_pool_members,omitempty"`
}

func (m *VirtualServerPoolMemberHealth) Reset()      { *m = VirtualServerPoolMemberHealth{} }
func (*VirtualServerPoolMemberHealth) ProtoMessage() {}
func (*VirtualServerPoolMemberHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca6dc597b363a15, []int{2}
}
func (m *VirtualServerPoolMemberHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualServerPoolMemberHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualServerPoolMemberHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualServerPoolMemberHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualServerPoolMemberHealth.Merge(m, src)
}
func (m *VirtualServerPoolMemberHealth) XXX_Size() int {
	return m.Size()
}
func (m *VirtualServerPoolMemberHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualServerPoolMemberHealth.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualServerPoolMemberHealth proto.InternalMessageInfo

func (m *VirtualServerPoolMemberHealth) GetVirtualServerPoolMembers() []*VirtualServerPoolHealthStatusListResponseItem {
	if m != nil {
		return m.VirtualServerPoolMembers
	}
	return nil
}

// VirtualServerPoolHealthStatusListResponseItem
//
// x-displayName: "Discovered Service Pool Health Status List Item"
// Pool member health
type VirtualServerPoolHealthStatusListResponseItem struct {
	// Name
	//
	// x-displayName: "Pool Member Name"
	// x-example: "vs_pm_1"
	// Name of the Virtual Server's Pool Member
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status
	//
	// x-displayName: "Status"
	// Health Status of Pool Member
	Status []*schema.MetricValue `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
}

func (m *VirtualServerPoolHealthStatusListResponseItem) Reset() {
	*m = VirtualServerPoolHealthStatusListResponseItem{}
}
func (*VirtualServerPoolHealthStatusListResponseItem) ProtoMessage() {}
func (*VirtualServerPoolHealthStatusListResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca6dc597b363a15, []int{3}
}
func (m *VirtualServerPoolHealthStatusListResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualServerPoolHealthStatusListResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualServerPoolHealthStatusListResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualServerPoolHealthStatusListResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualServerPoolHealthStatusListResponseItem.Merge(m, src)
}
func (m *VirtualServerPoolHealthStatusListResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *VirtualServerPoolHealthStatusListResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualServerPoolHealthStatusListResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualServerPoolHealthStatusListResponseItem proto.InternalMessageInfo

func (m *VirtualServerPoolHealthStatusListResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualServerPoolHealthStatusListResponseItem) GetStatus() []*schema.MetricValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*DiscoveredServiceHealthStatusRequest)(nil), "ves.io.schema.discovered_service.DiscoveredServiceHealthStatusRequest")
	golang_proto.RegisterType((*DiscoveredServiceHealthStatusRequest)(nil), "ves.io.schema.discovered_service.DiscoveredServiceHealthStatusRequest")
	proto.RegisterType((*DiscoveredServiceHealthStatusResponse)(nil), "ves.io.schema.discovered_service.DiscoveredServiceHealthStatusResponse")
	golang_proto.RegisterType((*DiscoveredServiceHealthStatusResponse)(nil), "ves.io.schema.discovered_service.DiscoveredServiceHealthStatusResponse")
	proto.RegisterType((*VirtualServerPoolMemberHealth)(nil), "ves.io.schema.discovered_service.VirtualServerPoolMemberHealth")
	golang_proto.RegisterType((*VirtualServerPoolMemberHealth)(nil), "ves.io.schema.discovered_service.VirtualServerPoolMemberHealth")
	proto.RegisterType((*VirtualServerPoolHealthStatusListResponseItem)(nil), "ves.io.schema.discovered_service.VirtualServerPoolHealthStatusListResponseItem")
	golang_proto.RegisterType((*VirtualServerPoolHealthStatusListResponseItem)(nil), "ves.io.schema.discovered_service.VirtualServerPoolHealthStatusListResponseItem")
}

func init() {
	proto.RegisterFile("ves.io/schema/discovered_service/public_custom_data_api.proto", fileDescriptor_bca6dc597b363a15)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/discovered_service/public_custom_data_api.proto", fileDescriptor_bca6dc597b363a15)
}

var fileDescriptor_bca6dc597b363a15 = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xc1, 0x4b, 0xec, 0x46,
	0x18, 0xdf, 0x59, 0xe5, 0xc1, 0xcb, 0xa3, 0x97, 0x5c, 0x9a, 0xee, 0xd3, 0xb0, 0x2c, 0x2d, 0xdd,
	0x57, 0x3a, 0xc9, 0x63, 0xcb, 0x3b, 0x3c, 0x4a, 0x11, 0x5b, 0xa9, 0x15, 0x14, 0x65, 0x05, 0x29,
	0x8a, 0x84, 0xd9, 0xe4, 0xdb, 0xec, 0xb4, 0x49, 0x26, 0x9d, 0x99, 0x44, 0xab, 0x08, 0xc5, 0x6b,
	0xa1, 0x08, 0x3d, 0xf7, 0xde, 0x63, 0x8f, 0x05, 0x2f, 0xde, 0xf4, 0x54, 0xa4, 0x5e, 0x3c, 0xd6,
	0x6c, 0x29, 0xad, 0x27, 0xff, 0x84, 0xe2, 0x24, 0xae, 0x1b, 0xbb, 0xba, 0xb6, 0xbd, 0x7d, 0x93,
	0xdf, 0xf7, 0xfb, 0xcd, 0x6f, 0xbf, 0xef, 0x9b, 0x6f, 0xb5, 0x8f, 0x52, 0x10, 0x16, 0x65, 0xb6,
	0x70, 0x7b, 0x10, 0x12, 0xdb, 0xa3, 0xc2, 0x65, 0x29, 0x70, 0xf0, 0x1c, 0x01, 0x3c, 0xa5, 0x2e,
	0xd8, 0x71, 0xd2, 0x09, 0xa8, 0xeb, 0xb8, 0x89, 0x90, 0x2c, 0x74, 0x3c, 0x22, 0x89, 0x43, 0x62,
	0x6a, 0xc5, 0x9c, 0x49, 0xa6, 0xd7, 0x73, 0xba, 0x95, 0xd3, 0xad, 0x7f, 0xd2, 0x6b, 0xd8, 0xa7,
	0xb2, 0x97, 0x74, 0x2c, 0x97, 0x85, 0xb6, 0xcf, 0x7c, 0x66, 0x2b, 0x62, 0x27, 0xe9, 0xaa, 0x93,
	0x3a, 0xa8, 0x28, 0x17, 0xac, 0x4d, 0xf9, 0x8c, 0xf9, 0x01, 0xd8, 0x24, 0xa6, 0x36, 0x89, 0x22,
	0x26, 0x89, 0xa4, 0x2c, 0x12, 0x05, 0xfa, 0x66, 0xd9, 0x6d, 0x04, 0xb2, 0x00, 0x9e, 0x97, 0x01,
	0x16, 0x0f, 0xb3, 0xa6, 0xcb, 0x60, 0x9c, 0x4a, 0x47, 0x7e, 0x1d, 0xc3, 0x0d, 0xfc, 0x56, 0x19,
	0x1e, 0x86, 0xa6, 0xca, 0x50, 0x4a, 0x02, 0xea, 0x11, 0x09, 0x05, 0xda, 0xb8, 0x83, 0x82, 0x80,
	0x28, 0xbd, 0x73, 0x77, 0xfd, 0x4e, 0x0e, 0x85, 0x2d, 0xa7, 0x94, 0xd1, 0xf8, 0x5c, 0x7b, 0x7b,
	0x6e, 0x50, 0xb6, 0xd5, 0xbc, 0x6a, 0x9f, 0x01, 0x09, 0x64, 0x6f, 0x55, 0x12, 0x99, 0x88, 0x36,
	0x7c, 0x95, 0x80, 0x90, 0xfa, 0x94, 0xf6, 0x34, 0x22, 0x21, 0x88, 0x98, 0xb8, 0x60, 0xa0, 0x3a,
	0x6a, 0x3e, 0x6d, 0xdf, 0x7e, 0xd0, 0x75, 0x6d, 0xf2, 0xfa, 0x60, 0x54, 0x15, 0xa0, 0xe2, 0xc6,
	0x5f, 0x48, 0x7b, 0x67, 0x8c, 0xb4, 0x88, 0x59, 0x24, 0x40, 0x6f, 0x69, 0x4f, 0x84, 0xfa, 0x62,
	0xa0, 0xfa, 0x44, 0xf3, 0x59, 0xab, 0x66, 0x95, 0xfb, 0xba, 0x04, 0x92, 0x53, 0x77, 0x8d, 0x04,
	0x09, 0xb4, 0x8b, 0x4c, 0xfd, 0x5b, 0xa4, 0x35, 0x52, 0xca, 0x65, 0x42, 0x02, 0xd5, 0x6c, 0xe0,
	0x4e, 0xcc, 0x58, 0xe0, 0x84, 0x10, 0x76, 0x80, 0x0b, 0xa7, 0xa7, 0x2e, 0x52, 0x86, 0x9e, 0xb5,
	0x66, 0xac, 0x71, 0x83, 0x62, 0xad, 0xe5, 0x5a, 0xab, 0x4a, 0x6a, 0x85, 0xb1, 0x60, 0x49, 0x09,
	0xe5, 0x7e, 0xdb, 0x66, 0x3a, 0x1a, 0x16, 0x39, 0xde, 0xf8, 0x09, 0x69, 0xd3, 0x0f, 0x2a, 0xe8,
	0xdf, 0x21, 0xed, 0xf9, 0x03, 0x7e, 0x8b, 0x5f, 0xbe, 0xfc, 0x1f, 0x8c, 0x0e, 0x97, 0x74, 0x91,
	0x0a, 0x79, 0x53, 0xd6, 0x05, 0x09, 0x61, 0xdb, 0xb8, 0xcf, 0x78, 0x63, 0x4b, 0xc3, 0xff, 0x4a,
	0x6a, 0xd0, 0x63, 0x74, 0xdb, 0xe3, 0xa1, 0xce, 0x55, 0x1f, 0xdb, 0xb9, 0xd6, 0x1f, 0x93, 0xda,
	0x1b, 0x9f, 0xa8, 0xe7, 0x3c, 0x47, 0x24, 0x99, 0x5d, 0x59, 0xd0, 0x7f, 0x98, 0xd4, 0xa6, 0x1f,
	0x9c, 0x14, 0xfd, 0xd3, 0xf1, 0x75, 0x79, 0xcc, 0x14, 0xd7, 0xe6, 0xff, 0xb7, 0x4e, 0x5e, 0x90,
	0xc6, 0x65, 0xf5, 0xe4, 0xe7, 0x2a, 0xca, 0x8e, 0x8d, 0x0f, 0xbb, 0xaf, 0xb6, 0x5d, 0x2c, 0xc0,
	0x4d, 0x38, 0x84, 0x20, 0x7a, 0x58, 0x48, 0x12, 0x79, 0x84, 0x7b, 0x38, 0x64, 0x11, 0x95, 0x8c,
	0xbf, 0x9f, 0x82, 0xc0, 0x94, 0x61, 0x1a, 0x75, 0x39, 0x11, 0x92, 0x27, 0xae, 0x4c, 0x38, 0x60,
	0x0e, 0xc4, 0xbb, 0x3c, 0x36, 0xce, 0x90, 0xb6, 0x58, 0x24, 0xe4, 0x96, 0xf0, 0xad, 0x25, 0x5c,
	0x58, 0xc2, 0xf9, 0xf2, 0xbb, 0xde, 0x7d, 0x24, 0xa6, 0x43, 0x09, 0x05, 0x9e, 0x8f, 0x7a, 0xf1,
	0x2e, 0xf6, 0x91, 0x36, 0xe1, 0x83, 0xd4, 0x77, 0x8b, 0xcd, 0x69, 0x0f, 0x1e, 0xa9, 0xb0, 0x9b,
	0x1b, 0x04, 0xef, 0x6c, 0x36, 0x37, 0x30, 0xc1, 0x3b, 0x2f, 0xf1, 0xeb, 0xcd, 0xf7, 0x36, 0x8a,
	0xe0, 0xc5, 0xcc, 0x8b, 0x11, 0xbb, 0xb7, 0x20, 0xcc, 0xe2, 0xf5, 0x82, 0x33, 0x8b, 0xd7, 0x5f,
	0xe2, 0xd7, 0x8e, 0x95, 0x13, 0x07, 0xa7, 0x6b, 0x76, 0xee, 0xc1, 0xc9, 0x4d, 0xec, 0x9f, 0xfd,
	0xfe, 0x7d, 0x75, 0x41, 0x9f, 0x1f, 0x61, 0x61, 0x77, 0x10, 0xef, 0x8d, 0xbc, 0x51, 0xe1, 0x7b,
	0x65, 0xb9, 0xda, 0xab, 0xa3, 0x43, 0x34, 0xf1, 0xeb, 0x21, 0x7a, 0x77, 0x6c, 0xf3, 0x96, 0x3b,
	0x5f, 0x80, 0x2b, 0xf7, 0x7f, 0x31, 0xaa, 0x06, 0xfa, 0xf8, 0x00, 0x9d, 0x5e, 0x98, 0x95, 0xf3,
	0x0b, 0xb3, 0x72, 0x75, 0x61, 0xa2, 0x6f, 0x32, 0x13, 0xfd, 0x98, 0x99, 0xe8, 0x24, 0x33, 0xd1,
	0x69, 0x66, 0xa2, 0xdf, 0x32, 0x13, 0xfd, 0x99, 0x99, 0x95, 0xab, 0xcc, 0x44, 0x07, 0x7d, 0xb3,
	0x72, 0xd4, 0x37, 0xd1, 0x69, 0xdf, 0xac, 0x9c, 0xf7, 0xcd, 0xca, 0xfa, 0x9a, 0xcf, 0xe2, 0x2f,
	0x7d, 0x2b, 0x65, 0x81, 0x04, 0xce, 0x89, 0x95, 0x08, 0x5b, 0x05, 0x5d, 0xc6, 0x43, 0x1c, 0x73,
	0x96, 0x52, 0x0f, 0x38, 0xbe, 0x81, 0xed, 0xb8, 0xe3, 0x33, 0x1b, 0xb6, 0x65, 0xb1, 0x66, 0xef,
	0xfd, 0x37, 0xeb, 0x3c, 0x51, 0x4b, 0xf7, 0x83, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x9d,
	0xd8, 0x16, 0xf8, 0x06, 0x00, 0x00,
}

func (this *DiscoveredServiceHealthStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoveredServiceHealthStatusRequest)
	if !ok {
		that2, ok := that.(DiscoveredServiceHealthStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *DiscoveredServiceHealthStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoveredServiceHealthStatusResponse)
	if !ok {
		that2, ok := that.(DiscoveredServiceHealthStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if !this.VirtualServerPoolMembersHealth.Equal(that1.VirtualServerPoolMembersHealth) {
		return false
	}
	return true
}
func (this *VirtualServerPoolMemberHealth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualServerPoolMemberHealth)
	if !ok {
		that2, ok := that.(VirtualServerPoolMemberHealth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VirtualServerPoolMembers) != len(that1.VirtualServerPoolMembers) {
		return false
	}
	for i := range this.VirtualServerPoolMembers {
		if !this.VirtualServerPoolMembers[i].Equal(that1.VirtualServerPoolMembers[i]) {
			return false
		}
	}
	return true
}
func (this *VirtualServerPoolHealthStatusListResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualServerPoolHealthStatusListResponseItem)
	if !ok {
		that2, ok := that.(VirtualServerPoolHealthStatusListResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	return true
}
func (this *DiscoveredServiceHealthStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovered_service.DiscoveredServiceHealthStatusRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscoveredServiceHealthStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovered_service.DiscoveredServiceHealthStatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.VirtualServerPoolMembersHealth != nil {
		s = append(s, "VirtualServerPoolMembersHealth: "+fmt.Sprintf("%#v", this.VirtualServerPoolMembersHealth)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualServerPoolMemberHealth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&discovered_service.VirtualServerPoolMemberHealth{")
	if this.VirtualServerPoolMembers != nil {
		s = append(s, "VirtualServerPoolMembers: "+fmt.Sprintf("%#v", this.VirtualServerPoolMembers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualServerPoolHealthStatusListResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovered_service.VirtualServerPoolHealthStatusListResponseItem{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomDataAPIClient is the client API for CustomDataAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomDataAPIClient interface {
	// Discovered Service Health Status
	//
	// x-displayName: "Discovered Service Health Status"
	// Get Discovered Service Health status
	DiscoveredServiceHealthStatus(ctx context.Context, in *DiscoveredServiceHealthStatusRequest, opts ...grpc.CallOption) (*DiscoveredServiceHealthStatusResponse, error)
}

type customDataAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataAPIClient(cc *grpc.ClientConn) CustomDataAPIClient {
	return &customDataAPIClient{cc}
}

func (c *customDataAPIClient) DiscoveredServiceHealthStatus(ctx context.Context, in *DiscoveredServiceHealthStatusRequest, opts ...grpc.CallOption) (*DiscoveredServiceHealthStatusResponse, error) {
	out := new(DiscoveredServiceHealthStatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.discovered_service.CustomDataAPI/DiscoveredServiceHealthStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomDataAPIServer is the server API for CustomDataAPI service.
type CustomDataAPIServer interface {
	// Discovered Service Health Status
	//
	// x-displayName: "Discovered Service Health Status"
	// Get Discovered Service Health status
	DiscoveredServiceHealthStatus(context.Context, *DiscoveredServiceHealthStatusRequest) (*DiscoveredServiceHealthStatusResponse, error)
}

// UnimplementedCustomDataAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomDataAPIServer struct {
}

func (*UnimplementedCustomDataAPIServer) DiscoveredServiceHealthStatus(ctx context.Context, req *DiscoveredServiceHealthStatusRequest) (*DiscoveredServiceHealthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoveredServiceHealthStatus not implemented")
}

func RegisterCustomDataAPIServer(s *grpc.Server, srv CustomDataAPIServer) {
	s.RegisterService(&_CustomDataAPI_serviceDesc, srv)
}

func _CustomDataAPI_DiscoveredServiceHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveredServiceHealthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).DiscoveredServiceHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.discovered_service.CustomDataAPI/DiscoveredServiceHealthStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).DiscoveredServiceHealthStatus(ctx, req.(*DiscoveredServiceHealthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.discovered_service.CustomDataAPI",
	HandlerType: (*CustomDataAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoveredServiceHealthStatus",
			Handler:    _CustomDataAPI_DiscoveredServiceHealthStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/discovered_service/public_custom_data_api.proto",
}

func (m *DiscoveredServiceHealthStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredServiceHealthStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredServiceHealthStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoveredServiceHealthStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredServiceHealthStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredServiceHealthStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VirtualServerPoolMembersHealth != nil {
		{
			size, err := m.VirtualServerPoolMembersHealth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VirtualServerPoolMemberHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualServerPoolMemberHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualServerPoolMemberHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualServerPoolMembers) > 0 {
		for iNdEx := len(m.VirtualServerPoolMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualServerPoolMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VirtualServerPoolHealthStatusListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualServerPoolHealthStatusListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualServerPoolHealthStatusListResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomDataApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomDataApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DiscoveredServiceHealthStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *DiscoveredServiceHealthStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	if m.VirtualServerPoolMembersHealth != nil {
		l = m.VirtualServerPoolMembersHealth.Size()
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *VirtualServerPoolMemberHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VirtualServerPoolMembers) > 0 {
		for _, e := range m.VirtualServerPoolMembers {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *VirtualServerPoolHealthStatusListResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomDataApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomDataApi(x uint64) (n int) {
	return sovPublicCustomDataApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DiscoveredServiceHealthStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscoveredServiceHealthStatusRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoveredServiceHealthStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MetricValue{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&DiscoveredServiceHealthStatusResponse{`,
		`Status:` + repeatedStringForStatus + `,`,
		`VirtualServerPoolMembersHealth:` + strings.Replace(this.VirtualServerPoolMembersHealth.String(), "VirtualServerPoolMemberHealth", "VirtualServerPoolMemberHealth", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualServerPoolMemberHealth) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVirtualServerPoolMembers := "[]*VirtualServerPoolHealthStatusListResponseItem{"
	for _, f := range this.VirtualServerPoolMembers {
		repeatedStringForVirtualServerPoolMembers += strings.Replace(f.String(), "VirtualServerPoolHealthStatusListResponseItem", "VirtualServerPoolHealthStatusListResponseItem", 1) + ","
	}
	repeatedStringForVirtualServerPoolMembers += "}"
	s := strings.Join([]string{`&VirtualServerPoolMemberHealth{`,
		`VirtualServerPoolMembers:` + repeatedStringForVirtualServerPoolMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualServerPoolHealthStatusListResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MetricValue{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&VirtualServerPoolHealthStatusListResponseItem{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + repeatedStringForStatus + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DiscoveredServiceHealthStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveredServiceHealthStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveredServiceHealthStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveredServiceHealthStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveredServiceHealthStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveredServiceHealthStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &schema.MetricValue{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServerPoolMembersHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualServerPoolMembersHealth == nil {
				m.VirtualServerPoolMembersHealth = &VirtualServerPoolMemberHealth{}
			}
			if err := m.VirtualServerPoolMembersHealth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualServerPoolMemberHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualServerPoolMemberHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualServerPoolMemberHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServerPoolMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualServerPoolMembers = append(m.VirtualServerPoolMembers, &VirtualServerPoolHealthStatusListResponseItem{})
			if err := m.VirtualServerPoolMembers[len(m.VirtualServerPoolMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualServerPoolHealthStatusListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualServerPoolHealthStatusListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualServerPoolHealthStatusListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &schema.MetricValue{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomDataApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomDataApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomDataApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomDataApi = fmt.Errorf("proto: unexpected end of group")
)

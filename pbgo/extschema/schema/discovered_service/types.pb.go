// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/discovered_service/types.proto

package discovered_service

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status of the virtual server
//
// x-displayName: "Virtual Server Status"
// Status of the virtual server.
type VirtualServerStatus int32

const (
	UP       VirtualServerStatus = 0
	DOWN     VirtualServerStatus = 1
	DISABLED VirtualServerStatus = 2
)

var VirtualServerStatus_name = map[int32]string{
	0: "UP",
	1: "DOWN",
	2: "DISABLED",
}

var VirtualServerStatus_value = map[string]int32{
	"UP":       0,
	"DOWN":     1,
	"DISABLED": 2,
}

func (VirtualServerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{0}
}

// TransmissionProtocol
//
// x-displayName: "Transmission Protocol"
// x-example: "TCP"
// Protocol on which the virtual-server will transmit data
type TransmissionProtocol int32

const (
	HTTP  TransmissionProtocol = 0
	HTTPS TransmissionProtocol = 1
	TCP   TransmissionProtocol = 2
)

var TransmissionProtocol_name = map[int32]string{
	0: "HTTP",
	1: "HTTPS",
	2: "TCP",
}

var TransmissionProtocol_value = map[string]int32{
	"HTTP":  0,
	"HTTPS": 1,
	"TCP":   2,
}

func (TransmissionProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{1}
}

// Discovered Services Record
//
// x-displayName: "Discovered Services Record"
// Desired state of the Discovered Services Record
type GlobalSpecType struct {
	// http_load_balancers
	//
	// x-displayName: "HTTP Load Balancers"
	// List of references to HTTP Load Balancers using this service
	HttpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_load_balancers,json=httpLoadBalancers,proto3" json:"http_load_balancers,omitempty"`
	// tcp_load_balancers
	//
	// x-displayName: "TCP Load Balancers"
	// List of references to TCP Load Balancers using this service
	TcpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,2,rep,name=tcp_load_balancers,json=tcpLoadBalancers,proto3" json:"tcp_load_balancers,omitempty"`
	// waap_action_choice
	//
	// x-displayName: "WAAP Action Choice"
	// x-required
	// Setting around WAAP usage for discovered service
	//
	// Types that are valid to be assigned to WaapActionChoice:
	//	*GlobalSpecType_WaapVisibilityEnabled
	//	*GlobalSpecType_WaapVisibilityDisabled
	WaapActionChoice isGlobalSpecType_WaapActionChoice `protobuf_oneof:"waap_action_choice"`
	// service_type
	//
	// x-displayName: "Discovered Service Type"
	// x-required
	// Type of Discovered Service
	//
	// Types that are valid to be assigned to ServiceType:
	//	*GlobalSpecType_VirtualServer
	ServiceType isGlobalSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_WaapActionChoice interface {
	isGlobalSpecType_WaapActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServiceType interface {
	isGlobalSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_WaapVisibilityEnabled struct {
	WaapVisibilityEnabled *schema.Empty `protobuf:"bytes,4,opt,name=waap_visibility_enabled,json=waapVisibilityEnabled,proto3,oneof" json:"waap_visibility_enabled,omitempty"`
}
type GlobalSpecType_WaapVisibilityDisabled struct {
	WaapVisibilityDisabled *schema.Empty `protobuf:"bytes,5,opt,name=waap_visibility_disabled,json=waapVisibilityDisabled,proto3,oneof" json:"waap_visibility_disabled,omitempty"`
}
type GlobalSpecType_VirtualServer struct {
	VirtualServer *VirtualServer `protobuf:"bytes,7,opt,name=virtual_server,json=virtualServer,proto3,oneof" json:"virtual_server,omitempty"`
}

func (*GlobalSpecType_WaapVisibilityEnabled) isGlobalSpecType_WaapActionChoice()  {}
func (*GlobalSpecType_WaapVisibilityDisabled) isGlobalSpecType_WaapActionChoice() {}
func (*GlobalSpecType_VirtualServer) isGlobalSpecType_ServiceType()               {}

func (m *GlobalSpecType) GetWaapActionChoice() isGlobalSpecType_WaapActionChoice {
	if m != nil {
		return m.WaapActionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServiceType() isGlobalSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *GlobalSpecType) GetHttpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancers
	}
	return nil
}

func (m *GlobalSpecType) GetTcpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadBalancers
	}
	return nil
}

func (m *GlobalSpecType) GetWaapVisibilityEnabled() *schema.Empty {
	if x, ok := m.GetWaapActionChoice().(*GlobalSpecType_WaapVisibilityEnabled); ok {
		return x.WaapVisibilityEnabled
	}
	return nil
}

func (m *GlobalSpecType) GetWaapVisibilityDisabled() *schema.Empty {
	if x, ok := m.GetWaapActionChoice().(*GlobalSpecType_WaapVisibilityDisabled); ok {
		return x.WaapVisibilityDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetVirtualServer() *VirtualServer {
	if x, ok := m.GetServiceType().(*GlobalSpecType_VirtualServer); ok {
		return x.VirtualServer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_WaapVisibilityEnabled)(nil),
		(*GlobalSpecType_WaapVisibilityDisabled)(nil),
		(*GlobalSpecType_VirtualServer)(nil),
	}
}

// virtual_server
//
// x-displayName: "Virtual Server"
// Virtual Server discovered from BIG-IP.
type VirtualServer struct {
	// discovery_object
	//
	// x-displayName: "Reference to Discovery Object"
	// Reference to the Discovery Object.
	DiscoveryObject *views.ObjectRefType `protobuf:"bytes,1,opt,name=discovery_object,json=discoveryObject,proto3" json:"discovery_object,omitempty"`
	// partition
	//
	// x-displayName: "Partition"
	// x-required
	// Partition of virtual-server
	Partition string `protobuf:"bytes,2,opt,name=partition,proto3" json:"partition,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	// x-example: "TCP"
	// x-required
	// Protocol on which the virtual-server is exposed
	Protocol TransmissionProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=ves.io.schema.discovered_service.TransmissionProtocol" json:"protocol,omitempty"`
	// Port
	//
	// x-displayName: "Port number"
	// x-example: "8080"
	// Port number on which the virtual-server is exposed
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Status of virtual server
	//
	// x-displayName: "Status"
	// x-required
	// Status of virtual server.
	Status VirtualServerStatus `protobuf:"varint,5,opt,name=status,proto3,enum=ves.io.schema.discovered_service.VirtualServerStatus" json:"status,omitempty"`
	// CBIP Cluster Name
	//
	// x-displayName: "CBIP Cluster Name"
	// x-required
	// Name of CBIP Cluster.
	CbipCluster string `protobuf:"bytes,6,opt,name=cbip_cluster,json=cbipCluster,proto3" json:"cbip_cluster,omitempty"`
}

func (m *VirtualServer) Reset()      { *m = VirtualServer{} }
func (*VirtualServer) ProtoMessage() {}
func (*VirtualServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{1}
}
func (m *VirtualServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VirtualServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualServer.Merge(m, src)
}
func (m *VirtualServer) XXX_Size() int {
	return m.Size()
}
func (m *VirtualServer) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualServer.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualServer proto.InternalMessageInfo

func (m *VirtualServer) GetDiscoveryObject() *views.ObjectRefType {
	if m != nil {
		return m.DiscoveryObject
	}
	return nil
}

func (m *VirtualServer) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *VirtualServer) GetProtocol() TransmissionProtocol {
	if m != nil {
		return m.Protocol
	}
	return HTTP
}

func (m *VirtualServer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *VirtualServer) GetStatus() VirtualServerStatus {
	if m != nil {
		return m.Status
	}
	return UP
}

func (m *VirtualServer) GetCbipCluster() string {
	if m != nil {
		return m.CbipCluster
	}
	return ""
}

// Create Discovered Service Object
//
// x-displayName: "Create Discovered Service Object"
// Create Discovered Service Object.
type CreateSpecType struct {
	HttpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_load_balancers,json=httpLoadBalancers,proto3" json:"http_load_balancers,omitempty"`
	TcpLoadBalancers  []*views.ObjectRefType `protobuf:"bytes,2,rep,name=tcp_load_balancers,json=tcpLoadBalancers,proto3" json:"tcp_load_balancers,omitempty"`
	// Types that are valid to be assigned to WaapActionChoice:
	//	*CreateSpecType_WaapVisibilityEnabled
	//	*CreateSpecType_WaapVisibilityDisabled
	WaapActionChoice isCreateSpecType_WaapActionChoice `protobuf_oneof:"waap_action_choice"`
	// Types that are valid to be assigned to ServiceType:
	//	*CreateSpecType_VirtualServer
	ServiceType isCreateSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_WaapActionChoice interface {
	isCreateSpecType_WaapActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServiceType interface {
	isCreateSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_WaapVisibilityEnabled struct {
	WaapVisibilityEnabled *schema.Empty `protobuf:"bytes,4,opt,name=waap_visibility_enabled,json=waapVisibilityEnabled,proto3,oneof" json:"waap_visibility_enabled,omitempty"`
}
type CreateSpecType_WaapVisibilityDisabled struct {
	WaapVisibilityDisabled *schema.Empty `protobuf:"bytes,5,opt,name=waap_visibility_disabled,json=waapVisibilityDisabled,proto3,oneof" json:"waap_visibility_disabled,omitempty"`
}
type CreateSpecType_VirtualServer struct {
	VirtualServer *VirtualServer `protobuf:"bytes,7,opt,name=virtual_server,json=virtualServer,proto3,oneof" json:"virtual_server,omitempty"`
}

func (*CreateSpecType_WaapVisibilityEnabled) isCreateSpecType_WaapActionChoice()  {}
func (*CreateSpecType_WaapVisibilityDisabled) isCreateSpecType_WaapActionChoice() {}
func (*CreateSpecType_VirtualServer) isCreateSpecType_ServiceType()               {}

func (m *CreateSpecType) GetWaapActionChoice() isCreateSpecType_WaapActionChoice {
	if m != nil {
		return m.WaapActionChoice
	}
	return nil
}
func (m *CreateSpecType) GetServiceType() isCreateSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *CreateSpecType) GetHttpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancers
	}
	return nil
}

func (m *CreateSpecType) GetTcpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadBalancers
	}
	return nil
}

func (m *CreateSpecType) GetWaapVisibilityEnabled() *schema.Empty {
	if x, ok := m.GetWaapActionChoice().(*CreateSpecType_WaapVisibilityEnabled); ok {
		return x.WaapVisibilityEnabled
	}
	return nil
}

func (m *CreateSpecType) GetWaapVisibilityDisabled() *schema.Empty {
	if x, ok := m.GetWaapActionChoice().(*CreateSpecType_WaapVisibilityDisabled); ok {
		return x.WaapVisibilityDisabled
	}
	return nil
}

func (m *CreateSpecType) GetVirtualServer() *VirtualServer {
	if x, ok := m.GetServiceType().(*CreateSpecType_VirtualServer); ok {
		return x.VirtualServer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_WaapVisibilityEnabled)(nil),
		(*CreateSpecType_WaapVisibilityDisabled)(nil),
		(*CreateSpecType_VirtualServer)(nil),
	}
}

// Get Discovered Service Object
//
// x-displayName: "Get Discovered Service Object"
// Get Discovered Service Object.
type GetSpecType struct {
	HttpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_load_balancers,json=httpLoadBalancers,proto3" json:"http_load_balancers,omitempty"`
	TcpLoadBalancers  []*views.ObjectRefType `protobuf:"bytes,2,rep,name=tcp_load_balancers,json=tcpLoadBalancers,proto3" json:"tcp_load_balancers,omitempty"`
	// Types that are valid to be assigned to WaapActionChoice:
	//	*GetSpecType_WaapVisibilityEnabled
	//	*GetSpecType_WaapVisibilityDisabled
	WaapActionChoice isGetSpecType_WaapActionChoice `protobuf_oneof:"waap_action_choice"`
	// Types that are valid to be assigned to ServiceType:
	//	*GetSpecType_VirtualServer
	ServiceType isGetSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_WaapActionChoice interface {
	isGetSpecType_WaapActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServiceType interface {
	isGetSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_WaapVisibilityEnabled struct {
	WaapVisibilityEnabled *schema.Empty `protobuf:"bytes,4,opt,name=waap_visibility_enabled,json=waapVisibilityEnabled,proto3,oneof" json:"waap_visibility_enabled,omitempty"`
}
type GetSpecType_WaapVisibilityDisabled struct {
	WaapVisibilityDisabled *schema.Empty `protobuf:"bytes,5,opt,name=waap_visibility_disabled,json=waapVisibilityDisabled,proto3,oneof" json:"waap_visibility_disabled,omitempty"`
}
type GetSpecType_VirtualServer struct {
	VirtualServer *VirtualServer `protobuf:"bytes,7,opt,name=virtual_server,json=virtualServer,proto3,oneof" json:"virtual_server,omitempty"`
}

func (*GetSpecType_WaapVisibilityEnabled) isGetSpecType_WaapActionChoice()  {}
func (*GetSpecType_WaapVisibilityDisabled) isGetSpecType_WaapActionChoice() {}
func (*GetSpecType_VirtualServer) isGetSpecType_ServiceType()               {}

func (m *GetSpecType) GetWaapActionChoice() isGetSpecType_WaapActionChoice {
	if m != nil {
		return m.WaapActionChoice
	}
	return nil
}
func (m *GetSpecType) GetServiceType() isGetSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *GetSpecType) GetHttpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancers
	}
	return nil
}

func (m *GetSpecType) GetTcpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadBalancers
	}
	return nil
}

func (m *GetSpecType) GetWaapVisibilityEnabled() *schema.Empty {
	if x, ok := m.GetWaapActionChoice().(*GetSpecType_WaapVisibilityEnabled); ok {
		return x.WaapVisibilityEnabled
	}
	return nil
}

func (m *GetSpecType) GetWaapVisibilityDisabled() *schema.Empty {
	if x, ok := m.GetWaapActionChoice().(*GetSpecType_WaapVisibilityDisabled); ok {
		return x.WaapVisibilityDisabled
	}
	return nil
}

func (m *GetSpecType) GetVirtualServer() *VirtualServer {
	if x, ok := m.GetServiceType().(*GetSpecType_VirtualServer); ok {
		return x.VirtualServer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_WaapVisibilityEnabled)(nil),
		(*GetSpecType_WaapVisibilityDisabled)(nil),
		(*GetSpecType_VirtualServer)(nil),
	}
}

// Replace Discovered Service Object
//
// x-displayName: "Replace Discovered Service Object"
// Replace Discovered Service Object.
type ReplaceSpecType struct {
	HttpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_load_balancers,json=httpLoadBalancers,proto3" json:"http_load_balancers,omitempty"`
	TcpLoadBalancers  []*views.ObjectRefType `protobuf:"bytes,2,rep,name=tcp_load_balancers,json=tcpLoadBalancers,proto3" json:"tcp_load_balancers,omitempty"`
	// Types that are valid to be assigned to WaapActionChoice:
	//	*ReplaceSpecType_WaapVisibilityEnabled
	//	*ReplaceSpecType_WaapVisibilityDisabled
	WaapActionChoice isReplaceSpecType_WaapActionChoice `protobuf_oneof:"waap_action_choice"`
	// Types that are valid to be assigned to ServiceType:
	//	*ReplaceSpecType_VirtualServer
	ServiceType isReplaceSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_WaapActionChoice interface {
	isReplaceSpecType_WaapActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServiceType interface {
	isReplaceSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_WaapVisibilityEnabled struct {
	WaapVisibilityEnabled *schema.Empty `protobuf:"bytes,4,opt,name=waap_visibility_enabled,json=waapVisibilityEnabled,proto3,oneof" json:"waap_visibility_enabled,omitempty"`
}
type ReplaceSpecType_WaapVisibilityDisabled struct {
	WaapVisibilityDisabled *schema.Empty `protobuf:"bytes,5,opt,name=waap_visibility_disabled,json=waapVisibilityDisabled,proto3,oneof" json:"waap_visibility_disabled,omitempty"`
}
type ReplaceSpecType_VirtualServer struct {
	VirtualServer *VirtualServer `protobuf:"bytes,7,opt,name=virtual_server,json=virtualServer,proto3,oneof" json:"virtual_server,omitempty"`
}

func (*ReplaceSpecType_WaapVisibilityEnabled) isReplaceSpecType_WaapActionChoice()  {}
func (*ReplaceSpecType_WaapVisibilityDisabled) isReplaceSpecType_WaapActionChoice() {}
func (*ReplaceSpecType_VirtualServer) isReplaceSpecType_ServiceType()               {}

func (m *ReplaceSpecType) GetWaapActionChoice() isReplaceSpecType_WaapActionChoice {
	if m != nil {
		return m.WaapActionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetServiceType() isReplaceSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancers
	}
	return nil
}

func (m *ReplaceSpecType) GetTcpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadBalancers
	}
	return nil
}

func (m *ReplaceSpecType) GetWaapVisibilityEnabled() *schema.Empty {
	if x, ok := m.GetWaapActionChoice().(*ReplaceSpecType_WaapVisibilityEnabled); ok {
		return x.WaapVisibilityEnabled
	}
	return nil
}

func (m *ReplaceSpecType) GetWaapVisibilityDisabled() *schema.Empty {
	if x, ok := m.GetWaapActionChoice().(*ReplaceSpecType_WaapVisibilityDisabled); ok {
		return x.WaapVisibilityDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetVirtualServer() *VirtualServer {
	if x, ok := m.GetServiceType().(*ReplaceSpecType_VirtualServer); ok {
		return x.VirtualServer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_WaapVisibilityEnabled)(nil),
		(*ReplaceSpecType_WaapVisibilityDisabled)(nil),
		(*ReplaceSpecType_VirtualServer)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.discovered_service.VirtualServerStatus", VirtualServerStatus_name, VirtualServerStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.discovered_service.VirtualServerStatus", VirtualServerStatus_name, VirtualServerStatus_value)
	proto.RegisterEnum("ves.io.schema.discovered_service.TransmissionProtocol", TransmissionProtocol_name, TransmissionProtocol_value)
	golang_proto.RegisterEnum("ves.io.schema.discovered_service.TransmissionProtocol", TransmissionProtocol_name, TransmissionProtocol_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.discovered_service.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.discovered_service.GlobalSpecType")
	proto.RegisterType((*VirtualServer)(nil), "ves.io.schema.discovered_service.VirtualServer")
	golang_proto.RegisterType((*VirtualServer)(nil), "ves.io.schema.discovered_service.VirtualServer")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.discovered_service.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.discovered_service.CreateSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.discovered_service.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.discovered_service.GetSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.discovered_service.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.discovered_service.ReplaceSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/discovered_service/types.proto", fileDescriptor_5e612cab0245916d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/discovered_service/types.proto", fileDescriptor_5e612cab0245916d)
}

var fileDescriptor_5e612cab0245916d = []byte{
	// 895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xbf, 0x6f, 0xdb, 0x46,
	0x14, 0xd6, 0x49, 0xb4, 0x2c, 0x9f, 0x6d, 0x85, 0x39, 0xbb, 0x09, 0xeb, 0x16, 0x8c, 0xea, 0x49,
	0x30, 0x64, 0x12, 0x55, 0x9a, 0x0c, 0x1d, 0x02, 0x94, 0xb6, 0x11, 0x37, 0x48, 0x13, 0x83, 0x52,
	0xdd, 0xa2, 0x1d, 0x88, 0x23, 0x75, 0x96, 0xae, 0xa5, 0x74, 0xc4, 0xdd, 0x89, 0xa9, 0x06, 0x03,
	0x41, 0xd6, 0x2e, 0x1d, 0xfa, 0x47, 0x14, 0xee, 0x7f, 0xd0, 0x2c, 0x1e, 0xdb, 0xa2, 0x05, 0x3c,
	0x7a, 0xac, 0xe5, 0xa5, 0xdd, 0x82, 0x8e, 0x59, 0x52, 0xf0, 0xf4, 0x23, 0xa6, 0xad, 0x36, 0x29,
	0xbc, 0x05, 0xda, 0x8e, 0xef, 0x7b, 0xdf, 0xf7, 0x1e, 0x79, 0xdf, 0x23, 0x8f, 0xb0, 0x12, 0x13,
	0x61, 0x51, 0x66, 0x8b, 0xa0, 0x45, 0xda, 0xd8, 0x6e, 0x50, 0x11, 0xb0, 0x98, 0x70, 0xd2, 0xf0,
	0x04, 0xe1, 0x31, 0x0d, 0x88, 0x2d, 0x7b, 0x11, 0x11, 0x56, 0xc4, 0x99, 0x64, 0xa8, 0x34, 0xc8,
	0xb6, 0x06, 0xd9, 0xd6, 0xc5, 0xec, 0x95, 0xf5, 0x26, 0x95, 0xad, 0xae, 0x6f, 0x05, 0xac, 0x6d,
	0x37, 0x59, 0x93, 0xd9, 0x8a, 0xe8, 0x77, 0xf7, 0xd4, 0x95, 0xba, 0x50, 0xab, 0x81, 0xe0, 0xca,
	0x8d, 0x26, 0x63, 0xcd, 0x90, 0xbc, 0xcc, 0x92, 0xb4, 0x4d, 0x84, 0xc4, 0xed, 0x68, 0x98, 0x70,
	0x3d, 0xdd, 0x5f, 0x87, 0xc8, 0x21, 0xf0, 0x4e, 0x1a, 0x60, 0x91, 0xa4, 0xac, 0x33, 0xec, 0x73,
	0xa5, 0x94, 0x06, 0x23, 0x16, 0xd2, 0xa0, 0x77, 0xf6, 0x4e, 0x56, 0xde, 0x4e, 0x67, 0x9c, 0x85,
	0xde, 0x4d, 0x43, 0x31, 0x0e, 0x69, 0x03, 0x4b, 0x32, 0x59, 0x3a, 0xa6, 0xe4, 0x91, 0x97, 0x2e,
	0x7e, 0xe3, 0x62, 0x86, 0x38, 0x5b, 0x60, 0xf5, 0x47, 0x0d, 0x16, 0xef, 0x86, 0xcc, 0xc7, 0x61,
	0x2d, 0x22, 0x41, 0xbd, 0x17, 0x11, 0xd4, 0x82, 0x4b, 0x2d, 0x29, 0x23, 0x2f, 0x64, 0xb8, 0xe1,
	0xf9, 0x38, 0xc4, 0x9d, 0x80, 0x70, 0x61, 0x80, 0x52, 0xae, 0x3c, 0x5f, 0x5d, 0xb5, 0xd2, 0x8f,
	0x5d, 0x29, 0x5a, 0x0f, 0xfd, 0xaf, 0x48, 0x20, 0x5d, 0xb2, 0x97, 0x08, 0x38, 0xcb, 0x07, 0xfb,
	0x57, 0xc7, 0x0a, 0x23, 0x01, 0x57, 0x85, 0xee, 0x33, 0xdc, 0x70, 0x46, 0x92, 0x88, 0x40, 0x24,
	0x83, 0x0b, 0x85, 0xb2, 0xaf, 0x5d, 0x68, 0xe9, 0x60, 0x5f, 0x1f, 0x09, 0x8c, 0xeb, 0x24, 0x91,
	0x74, 0x99, 0x07, 0xf0, 0xfa, 0x23, 0x8c, 0x23, 0x2f, 0xa6, 0x82, 0xfa, 0x34, 0xa4, 0xb2, 0xe7,
	0x91, 0x0e, 0xf6, 0x43, 0xd2, 0x30, 0xb4, 0x12, 0x28, 0xcf, 0x57, 0x97, 0xcf, 0xd5, 0xda, 0x6a,
	0x47, 0xb2, 0xb7, 0x9d, 0x71, 0xdf, 0x4a, 0x68, 0xbb, 0x63, 0xd6, 0xd6, 0x80, 0x84, 0x76, 0xa0,
	0x71, 0x5e, 0xaf, 0x41, 0xc5, 0x40, 0x70, 0xe6, 0x3f, 0x05, 0xaf, 0xa5, 0x05, 0x37, 0x87, 0x2c,
	0xf4, 0x39, 0x2c, 0xc6, 0x94, 0xcb, 0x2e, 0x0e, 0x95, 0x79, 0x09, 0x37, 0x66, 0x95, 0x8e, 0x6d,
	0xbd, 0xca, 0xe4, 0xd6, 0xee, 0x80, 0x57, 0x53, 0xb4, 0x6d, 0xe0, 0x2e, 0xc6, 0x67, 0x03, 0x1f,
	0xc2, 0xbf, 0xef, 0xcc, 0xde, 0xae, 0xbc, 0x5f, 0xb9, 0x59, 0xa9, 0x3a, 0x26, 0x44, 0xaa, 0x6f,
	0x1c, 0x24, 0x16, 0xf1, 0x82, 0x16, 0xa3, 0x01, 0x41, 0x85, 0xc3, 0xa7, 0x40, 0x3b, 0x7a, 0x0a,
	0x72, 0xce, 0x32, 0x5c, 0x18, 0xaa, 0x7a, 0x89, 0x45, 0x50, 0x12, 0xcd, 0xdf, 0xd3, 0x0a, 0x39,
	0x5d, 0xbb, 0xa7, 0x15, 0xf2, 0xfa, 0xec, 0xea, 0xb7, 0x39, 0xb8, 0x98, 0x2a, 0x88, 0xbe, 0x84,
	0xfa, 0xa8, 0xa9, 0x9e, 0xc7, 0xd4, 0xee, 0x18, 0x40, 0xf5, 0xfe, 0x3a, 0x1b, 0xb8, 0x70, 0xb0,
	0x3f, 0x37, 0xa6, 0xbb, 0x57, 0xc6, 0xcb, 0x41, 0x16, 0x2a, 0xc3, 0xb9, 0x08, 0x73, 0x49, 0x93,
	0x76, 0x8d, 0x6c, 0x09, 0x94, 0xe7, 0x1c, 0xf8, 0xd3, 0x5f, 0x87, 0xb9, 0x19, 0x9e, 0x33, 0x1e,
	0x67, 0xdd, 0x97, 0x20, 0x72, 0x61, 0x41, 0xf9, 0x39, 0x60, 0xa1, 0x91, 0x2b, 0x81, 0x72, 0xb1,
	0x7a, 0xfb, 0xd5, 0x8f, 0xae, 0xce, 0x71, 0x47, 0xb4, 0xa9, 0x10, 0x94, 0x75, 0x76, 0x86, 0x6c,
	0x77, 0xac, 0x83, 0xde, 0x83, 0x5a, 0xc4, 0xb8, 0x54, 0x1e, 0x59, 0x74, 0x16, 0x93, 0xc2, 0x85,
	0xb5, 0xbc, 0xf1, 0xe2, 0x45, 0xae, 0x0c, 0x5c, 0x05, 0xa1, 0x4f, 0x60, 0x5e, 0x48, 0x2c, 0xbb,
	0x42, 0xed, 0x7b, 0xb1, 0x7a, 0xeb, 0x7f, 0xee, 0x57, 0x4d, 0x91, 0xdd, 0xa1, 0x08, 0x5a, 0x87,
	0x0b, 0x81, 0x4f, 0x23, 0x2f, 0x08, 0xbb, 0x42, 0x12, 0x6e, 0xe4, 0x2f, 0xdc, 0xf2, 0x7c, 0x82,
	0x6f, 0x0c, 0xe0, 0xd5, 0xdf, 0x34, 0x58, 0xdc, 0xe0, 0x04, 0x4b, 0x32, 0x9d, 0xdd, 0x37, 0x71,
	0x76, 0xaf, 0xfe, 0x7a, 0xe7, 0xdc, 0xbb, 0xd9, 0xa9, 0x4c, 0x1c, 0xe1, 0x6b, 0x4f, 0x9e, 0x83,
	0x09, 0x71, 0xa7, 0x74, 0x6e, 0xa0, 0xf5, 0x27, 0xcf, 0x41, 0x2a, 0x92, 0x1a, 0xee, 0x5f, 0x34,
	0x38, 0x7f, 0x97, 0xc8, 0xa9, 0x97, 0xa6, 0x5e, 0xba, 0xb4, 0x97, 0x7e, 0xd7, 0xe0, 0x15, 0x97,
	0x44, 0x21, 0x0e, 0xa6, 0xef, 0xa6, 0xa9, 0x9f, 0x2e, 0xed, 0xa7, 0xb5, 0x5b, 0x70, 0x69, 0xc2,
	0x87, 0x13, 0xe5, 0x61, 0xf6, 0xd3, 0x1d, 0x3d, 0x83, 0x0a, 0x50, 0xdb, 0x7c, 0xf8, 0xd9, 0x03,
	0x1d, 0xa0, 0x05, 0x58, 0xd8, 0xfc, 0xb8, 0xf6, 0x91, 0x73, 0x7f, 0x6b, 0x53, 0xcf, 0xae, 0x7d,
	0x00, 0x97, 0x27, 0x7d, 0xe4, 0x93, 0xfc, 0xed, 0x7a, 0x3d, 0x61, 0xce, 0xc1, 0x99, 0x64, 0x55,
	0xd3, 0x01, 0x9a, 0x85, 0xb9, 0xfa, 0xc6, 0x8e, 0x9e, 0x75, 0xbe, 0x07, 0x47, 0x27, 0x66, 0xe6,
	0xf8, 0xc4, 0xcc, 0x3c, 0x3b, 0x31, 0xc1, 0xe3, 0xbe, 0x09, 0x7e, 0xe8, 0x9b, 0xe0, 0xe7, 0xbe,
	0x09, 0x8e, 0xfa, 0x26, 0x38, 0xee, 0x9b, 0xe0, 0x8f, 0xbe, 0x09, 0xfe, 0xec, 0x9b, 0x99, 0x67,
	0x7d, 0x13, 0x7c, 0x77, 0x6a, 0x66, 0x0e, 0x4f, 0x4d, 0x70, 0x74, 0x6a, 0x66, 0x8e, 0x4f, 0xcd,
	0xcc, 0x17, 0xbb, 0x4d, 0x16, 0x7d, 0xdd, 0xb4, 0x62, 0x16, 0x4a, 0xc2, 0x39, 0xb6, 0xba, 0xc2,
	0x56, 0x8b, 0x3d, 0xc6, 0xdb, 0xeb, 0x11, 0x67, 0x31, 0x6d, 0x10, 0xbe, 0x3e, 0x82, 0xed, 0xc8,
	0x6f, 0x32, 0x9b, 0x7c, 0x23, 0x87, 0x47, 0xf4, 0x7f, 0xfd, 0xf9, 0xf1, 0xf3, 0xea, 0x64, 0x72,
	0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xd3, 0xad, 0x2d, 0x27, 0x0d, 0x00, 0x00,
}

func (x VirtualServerStatus) String() string {
	s, ok := VirtualServerStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TransmissionProtocol) String() string {
	s, ok := TransmissionProtocol_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadBalancers) != len(that1.HttpLoadBalancers) {
		return false
	}
	for i := range this.HttpLoadBalancers {
		if !this.HttpLoadBalancers[i].Equal(that1.HttpLoadBalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadBalancers) != len(that1.TcpLoadBalancers) {
		return false
	}
	for i := range this.TcpLoadBalancers {
		if !this.TcpLoadBalancers[i].Equal(that1.TcpLoadBalancers[i]) {
			return false
		}
	}
	if that1.WaapActionChoice == nil {
		if this.WaapActionChoice != nil {
			return false
		}
	} else if this.WaapActionChoice == nil {
		return false
	} else if !this.WaapActionChoice.Equal(that1.WaapActionChoice) {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *GlobalSpecType_WaapVisibilityEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_WaapVisibilityEnabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_WaapVisibilityEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WaapVisibilityEnabled.Equal(that1.WaapVisibilityEnabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_WaapVisibilityDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_WaapVisibilityDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_WaapVisibilityDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WaapVisibilityDisabled.Equal(that1.WaapVisibilityDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VirtualServer)
	if !ok {
		that2, ok := that.(GlobalSpecType_VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualServer.Equal(that1.VirtualServer) {
		return false
	}
	return true
}
func (this *VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualServer)
	if !ok {
		that2, ok := that.(VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiscoveryObject.Equal(that1.DiscoveryObject) {
		return false
	}
	if this.Partition != that1.Partition {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CbipCluster != that1.CbipCluster {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadBalancers) != len(that1.HttpLoadBalancers) {
		return false
	}
	for i := range this.HttpLoadBalancers {
		if !this.HttpLoadBalancers[i].Equal(that1.HttpLoadBalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadBalancers) != len(that1.TcpLoadBalancers) {
		return false
	}
	for i := range this.TcpLoadBalancers {
		if !this.TcpLoadBalancers[i].Equal(that1.TcpLoadBalancers[i]) {
			return false
		}
	}
	if that1.WaapActionChoice == nil {
		if this.WaapActionChoice != nil {
			return false
		}
	} else if this.WaapActionChoice == nil {
		return false
	} else if !this.WaapActionChoice.Equal(that1.WaapActionChoice) {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *CreateSpecType_WaapVisibilityEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_WaapVisibilityEnabled)
	if !ok {
		that2, ok := that.(CreateSpecType_WaapVisibilityEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WaapVisibilityEnabled.Equal(that1.WaapVisibilityEnabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_WaapVisibilityDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_WaapVisibilityDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_WaapVisibilityDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WaapVisibilityDisabled.Equal(that1.WaapVisibilityDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VirtualServer)
	if !ok {
		that2, ok := that.(CreateSpecType_VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualServer.Equal(that1.VirtualServer) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadBalancers) != len(that1.HttpLoadBalancers) {
		return false
	}
	for i := range this.HttpLoadBalancers {
		if !this.HttpLoadBalancers[i].Equal(that1.HttpLoadBalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadBalancers) != len(that1.TcpLoadBalancers) {
		return false
	}
	for i := range this.TcpLoadBalancers {
		if !this.TcpLoadBalancers[i].Equal(that1.TcpLoadBalancers[i]) {
			return false
		}
	}
	if that1.WaapActionChoice == nil {
		if this.WaapActionChoice != nil {
			return false
		}
	} else if this.WaapActionChoice == nil {
		return false
	} else if !this.WaapActionChoice.Equal(that1.WaapActionChoice) {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *GetSpecType_WaapVisibilityEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_WaapVisibilityEnabled)
	if !ok {
		that2, ok := that.(GetSpecType_WaapVisibilityEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WaapVisibilityEnabled.Equal(that1.WaapVisibilityEnabled) {
		return false
	}
	return true
}
func (this *GetSpecType_WaapVisibilityDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_WaapVisibilityDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_WaapVisibilityDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WaapVisibilityDisabled.Equal(that1.WaapVisibilityDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VirtualServer)
	if !ok {
		that2, ok := that.(GetSpecType_VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualServer.Equal(that1.VirtualServer) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadBalancers) != len(that1.HttpLoadBalancers) {
		return false
	}
	for i := range this.HttpLoadBalancers {
		if !this.HttpLoadBalancers[i].Equal(that1.HttpLoadBalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadBalancers) != len(that1.TcpLoadBalancers) {
		return false
	}
	for i := range this.TcpLoadBalancers {
		if !this.TcpLoadBalancers[i].Equal(that1.TcpLoadBalancers[i]) {
			return false
		}
	}
	if that1.WaapActionChoice == nil {
		if this.WaapActionChoice != nil {
			return false
		}
	} else if this.WaapActionChoice == nil {
		return false
	} else if !this.WaapActionChoice.Equal(that1.WaapActionChoice) {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_WaapVisibilityEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_WaapVisibilityEnabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_WaapVisibilityEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WaapVisibilityEnabled.Equal(that1.WaapVisibilityEnabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_WaapVisibilityDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_WaapVisibilityDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_WaapVisibilityDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WaapVisibilityDisabled.Equal(that1.WaapVisibilityDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VirtualServer)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualServer.Equal(that1.VirtualServer) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&discovered_service.GlobalSpecType{")
	if this.HttpLoadBalancers != nil {
		s = append(s, "HttpLoadBalancers: "+fmt.Sprintf("%#v", this.HttpLoadBalancers)+",\n")
	}
	if this.TcpLoadBalancers != nil {
		s = append(s, "TcpLoadBalancers: "+fmt.Sprintf("%#v", this.TcpLoadBalancers)+",\n")
	}
	if this.WaapActionChoice != nil {
		s = append(s, "WaapActionChoice: "+fmt.Sprintf("%#v", this.WaapActionChoice)+",\n")
	}
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_WaapVisibilityEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GlobalSpecType_WaapVisibilityEnabled{` +
		`WaapVisibilityEnabled:` + fmt.Sprintf("%#v", this.WaapVisibilityEnabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_WaapVisibilityDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GlobalSpecType_WaapVisibilityDisabled{` +
		`WaapVisibilityDisabled:` + fmt.Sprintf("%#v", this.WaapVisibilityDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GlobalSpecType_VirtualServer{` +
		`VirtualServer:` + fmt.Sprintf("%#v", this.VirtualServer) + `}`}, ", ")
	return s
}
func (this *VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&discovered_service.VirtualServer{")
	if this.DiscoveryObject != nil {
		s = append(s, "DiscoveryObject: "+fmt.Sprintf("%#v", this.DiscoveryObject)+",\n")
	}
	s = append(s, "Partition: "+fmt.Sprintf("%#v", this.Partition)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CbipCluster: "+fmt.Sprintf("%#v", this.CbipCluster)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&discovered_service.CreateSpecType{")
	if this.HttpLoadBalancers != nil {
		s = append(s, "HttpLoadBalancers: "+fmt.Sprintf("%#v", this.HttpLoadBalancers)+",\n")
	}
	if this.TcpLoadBalancers != nil {
		s = append(s, "TcpLoadBalancers: "+fmt.Sprintf("%#v", this.TcpLoadBalancers)+",\n")
	}
	if this.WaapActionChoice != nil {
		s = append(s, "WaapActionChoice: "+fmt.Sprintf("%#v", this.WaapActionChoice)+",\n")
	}
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_WaapVisibilityEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.CreateSpecType_WaapVisibilityEnabled{` +
		`WaapVisibilityEnabled:` + fmt.Sprintf("%#v", this.WaapVisibilityEnabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_WaapVisibilityDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.CreateSpecType_WaapVisibilityDisabled{` +
		`WaapVisibilityDisabled:` + fmt.Sprintf("%#v", this.WaapVisibilityDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.CreateSpecType_VirtualServer{` +
		`VirtualServer:` + fmt.Sprintf("%#v", this.VirtualServer) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&discovered_service.GetSpecType{")
	if this.HttpLoadBalancers != nil {
		s = append(s, "HttpLoadBalancers: "+fmt.Sprintf("%#v", this.HttpLoadBalancers)+",\n")
	}
	if this.TcpLoadBalancers != nil {
		s = append(s, "TcpLoadBalancers: "+fmt.Sprintf("%#v", this.TcpLoadBalancers)+",\n")
	}
	if this.WaapActionChoice != nil {
		s = append(s, "WaapActionChoice: "+fmt.Sprintf("%#v", this.WaapActionChoice)+",\n")
	}
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_WaapVisibilityEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GetSpecType_WaapVisibilityEnabled{` +
		`WaapVisibilityEnabled:` + fmt.Sprintf("%#v", this.WaapVisibilityEnabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_WaapVisibilityDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GetSpecType_WaapVisibilityDisabled{` +
		`WaapVisibilityDisabled:` + fmt.Sprintf("%#v", this.WaapVisibilityDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GetSpecType_VirtualServer{` +
		`VirtualServer:` + fmt.Sprintf("%#v", this.VirtualServer) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&discovered_service.ReplaceSpecType{")
	if this.HttpLoadBalancers != nil {
		s = append(s, "HttpLoadBalancers: "+fmt.Sprintf("%#v", this.HttpLoadBalancers)+",\n")
	}
	if this.TcpLoadBalancers != nil {
		s = append(s, "TcpLoadBalancers: "+fmt.Sprintf("%#v", this.TcpLoadBalancers)+",\n")
	}
	if this.WaapActionChoice != nil {
		s = append(s, "WaapActionChoice: "+fmt.Sprintf("%#v", this.WaapActionChoice)+",\n")
	}
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_WaapVisibilityEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ReplaceSpecType_WaapVisibilityEnabled{` +
		`WaapVisibilityEnabled:` + fmt.Sprintf("%#v", this.WaapVisibilityEnabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_WaapVisibilityDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ReplaceSpecType_WaapVisibilityDisabled{` +
		`WaapVisibilityDisabled:` + fmt.Sprintf("%#v", this.WaapVisibilityDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ReplaceSpecType_VirtualServer{` +
		`VirtualServer:` + fmt.Sprintf("%#v", this.VirtualServer) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WaapActionChoice != nil {
		{
			size := m.WaapActionChoice.Size()
			i -= size
			if _, err := m.WaapActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for iNdEx := len(m.TcpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HttpLoadBalancers) > 0 {
		for iNdEx := len(m.HttpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_WaapVisibilityEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_WaapVisibilityEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WaapVisibilityEnabled != nil {
		{
			size, err := m.WaapVisibilityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_WaapVisibilityDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_WaapVisibilityDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WaapVisibilityDisabled != nil {
		{
			size, err := m.WaapVisibilityDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualServer != nil {
		{
			size, err := m.VirtualServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *VirtualServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CbipCluster) > 0 {
		i -= len(m.CbipCluster)
		copy(dAtA[i:], m.CbipCluster)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CbipCluster)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if m.Protocol != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Partition) > 0 {
		i -= len(m.Partition)
		copy(dAtA[i:], m.Partition)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Partition)))
		i--
		dAtA[i] = 0x12
	}
	if m.DiscoveryObject != nil {
		{
			size, err := m.DiscoveryObject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WaapActionChoice != nil {
		{
			size := m.WaapActionChoice.Size()
			i -= size
			if _, err := m.WaapActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for iNdEx := len(m.TcpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HttpLoadBalancers) > 0 {
		for iNdEx := len(m.HttpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_WaapVisibilityEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_WaapVisibilityEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WaapVisibilityEnabled != nil {
		{
			size, err := m.WaapVisibilityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_WaapVisibilityDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_WaapVisibilityDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WaapVisibilityDisabled != nil {
		{
			size, err := m.WaapVisibilityDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualServer != nil {
		{
			size, err := m.VirtualServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WaapActionChoice != nil {
		{
			size := m.WaapActionChoice.Size()
			i -= size
			if _, err := m.WaapActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for iNdEx := len(m.TcpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HttpLoadBalancers) > 0 {
		for iNdEx := len(m.HttpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_WaapVisibilityEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_WaapVisibilityEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WaapVisibilityEnabled != nil {
		{
			size, err := m.WaapVisibilityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_WaapVisibilityDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_WaapVisibilityDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WaapVisibilityDisabled != nil {
		{
			size, err := m.WaapVisibilityDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualServer != nil {
		{
			size, err := m.VirtualServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WaapActionChoice != nil {
		{
			size := m.WaapActionChoice.Size()
			i -= size
			if _, err := m.WaapActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for iNdEx := len(m.TcpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HttpLoadBalancers) > 0 {
		for iNdEx := len(m.HttpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_WaapVisibilityEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_WaapVisibilityEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WaapVisibilityEnabled != nil {
		{
			size, err := m.WaapVisibilityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_WaapVisibilityDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_WaapVisibilityDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WaapVisibilityDisabled != nil {
		{
			size, err := m.WaapVisibilityDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualServer != nil {
		{
			size, err := m.VirtualServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadBalancers) > 0 {
		for _, e := range m.HttpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for _, e := range m.TcpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.WaapActionChoice != nil {
		n += m.WaapActionChoice.Size()
	}
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *GlobalSpecType_WaapVisibilityEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaapVisibilityEnabled != nil {
		l = m.WaapVisibilityEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_WaapVisibilityDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaapVisibilityDisabled != nil {
		l = m.WaapVisibilityDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualServer != nil {
		l = m.VirtualServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscoveryObject != nil {
		l = m.DiscoveryObject.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Partition)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovTypes(uint64(m.Protocol))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.CbipCluster)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadBalancers) > 0 {
		for _, e := range m.HttpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for _, e := range m.TcpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.WaapActionChoice != nil {
		n += m.WaapActionChoice.Size()
	}
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *CreateSpecType_WaapVisibilityEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaapVisibilityEnabled != nil {
		l = m.WaapVisibilityEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_WaapVisibilityDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaapVisibilityDisabled != nil {
		l = m.WaapVisibilityDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualServer != nil {
		l = m.VirtualServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadBalancers) > 0 {
		for _, e := range m.HttpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for _, e := range m.TcpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.WaapActionChoice != nil {
		n += m.WaapActionChoice.Size()
	}
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *GetSpecType_WaapVisibilityEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaapVisibilityEnabled != nil {
		l = m.WaapVisibilityEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_WaapVisibilityDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaapVisibilityDisabled != nil {
		l = m.WaapVisibilityDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualServer != nil {
		l = m.VirtualServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadBalancers) > 0 {
		for _, e := range m.HttpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for _, e := range m.TcpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.WaapActionChoice != nil {
		n += m.WaapActionChoice.Size()
	}
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *ReplaceSpecType_WaapVisibilityEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaapVisibilityEnabled != nil {
		l = m.WaapVisibilityEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_WaapVisibilityDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WaapVisibilityDisabled != nil {
		l = m.WaapVisibilityDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualServer != nil {
		l = m.VirtualServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadBalancers {
		repeatedStringForHttpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadBalancers += "}"
	repeatedStringForTcpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadBalancers {
		repeatedStringForTcpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadBalancers += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`HttpLoadBalancers:` + repeatedStringForHttpLoadBalancers + `,`,
		`TcpLoadBalancers:` + repeatedStringForTcpLoadBalancers + `,`,
		`WaapActionChoice:` + fmt.Sprintf("%v", this.WaapActionChoice) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_WaapVisibilityEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_WaapVisibilityEnabled{`,
		`WaapVisibilityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.WaapVisibilityEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_WaapVisibilityDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_WaapVisibilityDisabled{`,
		`WaapVisibilityDisabled:` + strings.Replace(fmt.Sprintf("%v", this.WaapVisibilityDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VirtualServer{`,
		`VirtualServer:` + strings.Replace(fmt.Sprintf("%v", this.VirtualServer), "VirtualServer", "VirtualServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualServer{`,
		`DiscoveryObject:` + strings.Replace(fmt.Sprintf("%v", this.DiscoveryObject), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Partition:` + fmt.Sprintf("%v", this.Partition) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CbipCluster:` + fmt.Sprintf("%v", this.CbipCluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadBalancers {
		repeatedStringForHttpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadBalancers += "}"
	repeatedStringForTcpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadBalancers {
		repeatedStringForTcpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadBalancers += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`HttpLoadBalancers:` + repeatedStringForHttpLoadBalancers + `,`,
		`TcpLoadBalancers:` + repeatedStringForTcpLoadBalancers + `,`,
		`WaapActionChoice:` + fmt.Sprintf("%v", this.WaapActionChoice) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_WaapVisibilityEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_WaapVisibilityEnabled{`,
		`WaapVisibilityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.WaapVisibilityEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_WaapVisibilityDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_WaapVisibilityDisabled{`,
		`WaapVisibilityDisabled:` + strings.Replace(fmt.Sprintf("%v", this.WaapVisibilityDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VirtualServer{`,
		`VirtualServer:` + strings.Replace(fmt.Sprintf("%v", this.VirtualServer), "VirtualServer", "VirtualServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadBalancers {
		repeatedStringForHttpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadBalancers += "}"
	repeatedStringForTcpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadBalancers {
		repeatedStringForTcpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadBalancers += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`HttpLoadBalancers:` + repeatedStringForHttpLoadBalancers + `,`,
		`TcpLoadBalancers:` + repeatedStringForTcpLoadBalancers + `,`,
		`WaapActionChoice:` + fmt.Sprintf("%v", this.WaapActionChoice) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_WaapVisibilityEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_WaapVisibilityEnabled{`,
		`WaapVisibilityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.WaapVisibilityEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_WaapVisibilityDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_WaapVisibilityDisabled{`,
		`WaapVisibilityDisabled:` + strings.Replace(fmt.Sprintf("%v", this.WaapVisibilityDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VirtualServer{`,
		`VirtualServer:` + strings.Replace(fmt.Sprintf("%v", this.VirtualServer), "VirtualServer", "VirtualServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadBalancers {
		repeatedStringForHttpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadBalancers += "}"
	repeatedStringForTcpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadBalancers {
		repeatedStringForTcpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadBalancers += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`HttpLoadBalancers:` + repeatedStringForHttpLoadBalancers + `,`,
		`TcpLoadBalancers:` + repeatedStringForTcpLoadBalancers + `,`,
		`WaapActionChoice:` + fmt.Sprintf("%v", this.WaapActionChoice) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_WaapVisibilityEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_WaapVisibilityEnabled{`,
		`WaapVisibilityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.WaapVisibilityEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_WaapVisibilityDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_WaapVisibilityDisabled{`,
		`WaapVisibilityDisabled:` + strings.Replace(fmt.Sprintf("%v", this.WaapVisibilityDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VirtualServer{`,
		`VirtualServer:` + strings.Replace(fmt.Sprintf("%v", this.VirtualServer), "VirtualServer", "VirtualServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadBalancers = append(m.HttpLoadBalancers, &views.ObjectRefType{})
			if err := m.HttpLoadBalancers[len(m.HttpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadBalancers = append(m.TcpLoadBalancers, &views.ObjectRefType{})
			if err := m.TcpLoadBalancers[len(m.TcpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaapVisibilityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WaapActionChoice = &GlobalSpecType_WaapVisibilityEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaapVisibilityDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WaapActionChoice = &GlobalSpecType_WaapVisibilityDisabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &GlobalSpecType_VirtualServer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiscoveryObject == nil {
				m.DiscoveryObject = &views.ObjectRefType{}
			}
			if err := m.DiscoveryObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= TransmissionProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VirtualServerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbipCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CbipCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadBalancers = append(m.HttpLoadBalancers, &views.ObjectRefType{})
			if err := m.HttpLoadBalancers[len(m.HttpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadBalancers = append(m.TcpLoadBalancers, &views.ObjectRefType{})
			if err := m.TcpLoadBalancers[len(m.TcpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaapVisibilityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WaapActionChoice = &CreateSpecType_WaapVisibilityEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaapVisibilityDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WaapActionChoice = &CreateSpecType_WaapVisibilityDisabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &CreateSpecType_VirtualServer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadBalancers = append(m.HttpLoadBalancers, &views.ObjectRefType{})
			if err := m.HttpLoadBalancers[len(m.HttpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadBalancers = append(m.TcpLoadBalancers, &views.ObjectRefType{})
			if err := m.TcpLoadBalancers[len(m.TcpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaapVisibilityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WaapActionChoice = &GetSpecType_WaapVisibilityEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaapVisibilityDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WaapActionChoice = &GetSpecType_WaapVisibilityDisabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &GetSpecType_VirtualServer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadBalancers = append(m.HttpLoadBalancers, &views.ObjectRefType{})
			if err := m.HttpLoadBalancers[len(m.HttpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadBalancers = append(m.TcpLoadBalancers, &views.ObjectRefType{})
			if err := m.TcpLoadBalancers[len(m.TcpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaapVisibilityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WaapActionChoice = &ReplaceSpecType_WaapVisibilityEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaapVisibilityDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WaapActionChoice = &ReplaceSpecType_WaapVisibilityDisabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &ReplaceSpecType_VirtualServer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

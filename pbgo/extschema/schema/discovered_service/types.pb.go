// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/discovered_service/types.proto

package discovered_service

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Availability Status of the virtual server
//
// x-displayName: "Virtual Server Availability Status"
// Availability Status of the virtual server.
type VirtualServerStatus int32

const (
	// UNSPECIFIED
	//
	// x-displayName: "Unspecified"
	// Invalid status.
	UNSPECIFIED VirtualServerStatus = 0
	// AVAILABLE
	//
	// x-displayName: "Available"
	// Virtual Server is available and serving traffic.
	AVAILABLE VirtualServerStatus = 1
	// OFFLINE
	//
	// x-displayName: "Offline"
	// Virtual Server is not serving traffic.
	OFFLINE VirtualServerStatus = 2
	// UNKNOWN
	//
	// x-displayName: "Unknown"
	// Virtual Server availability is unknown. It can indicate that no service checks are enabled on the virtual server.
	UNKNOWN VirtualServerStatus = 3
	// UNAVAILABLE
	//
	// x-displayName: "Unavailable"
	// Virtual Server is temporarily unavailable maybe due to hitting connection limit.
	UNAVAILABLE VirtualServerStatus = 4
	// DELETED
	//
	// x-displayName: "Deleted"
	// Virtual Server has been deleted on the BIG-IP but is in use on Distributed Cloud.
	DELETED VirtualServerStatus = 5
)

var VirtualServerStatus_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "AVAILABLE",
	2: "OFFLINE",
	3: "UNKNOWN",
	4: "UNAVAILABLE",
	5: "DELETED",
}

var VirtualServerStatus_value = map[string]int32{
	"UNSPECIFIED": 0,
	"AVAILABLE":   1,
	"OFFLINE":     2,
	"UNKNOWN":     3,
	"UNAVAILABLE": 4,
	"DELETED":     5,
}

func (VirtualServerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{0}
}

// Enabled state of the virtual server
//
// x-displayName: "Virtual Server Enabled State"
// Enabled state of the virtual server.
type VirtualServerEnabledState int32

const (
	// NONE
	//
	// x-displayName: "None"
	// Invalid state.
	NONE VirtualServerEnabledState = 0
	// ENABLED
	//
	// x-displayName: "Enabled"
	// Virtual Server is enabled.
	ENABLED VirtualServerEnabledState = 1
	// DISABLED
	//
	// x-displayName: "Disabled"
	// Virtual Server is administratively disabled.
	DISABLED VirtualServerEnabledState = 2
)

var VirtualServerEnabledState_name = map[int32]string{
	0: "NONE",
	1: "ENABLED",
	2: "DISABLED",
}

var VirtualServerEnabledState_value = map[string]int32{
	"NONE":     0,
	"ENABLED":  1,
	"DISABLED": 2,
}

func (VirtualServerEnabledState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{1}
}

// TransmissionProtocol
//
// x-displayName: "Transmission Protocol"
// x-example: "TCP"
// Protocol on which the virtual-server will transmit data
type TransmissionProtocol int32

const (
	UNDEFINED TransmissionProtocol = 0
	HTTP      TransmissionProtocol = 1
	HTTPS     TransmissionProtocol = 2
	TCP       TransmissionProtocol = 3
)

var TransmissionProtocol_name = map[int32]string{
	0: "UNDEFINED",
	1: "HTTP",
	2: "HTTPS",
	3: "TCP",
}

var TransmissionProtocol_value = map[string]int32{
	"UNDEFINED": 0,
	"HTTP":      1,
	"HTTPS":     2,
	"TCP":       3,
}

func (TransmissionProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{2}
}

// Discovered Services Record
//
// x-displayName: "Discovered Services Record"
// Desired state of the Discovered Services Record
type GlobalSpecType struct {
	// http_load_balancers
	//
	// x-displayName: "HTTP Load Balancers"
	// List of references to HTTP Load Balancers using this service
	HttpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_load_balancers,json=httpLoadBalancers,proto3" json:"http_load_balancers,omitempty"`
	// tcp_load_balancers
	//
	// x-displayName: "TCP Load Balancers"
	// List of references to TCP Load Balancers using this service
	TcpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,2,rep,name=tcp_load_balancers,json=tcpLoadBalancers,proto3" json:"tcp_load_balancers,omitempty"`
	// visibility_action_choice
	//
	// x-displayName: "Visibility Action Choice"
	// x-required
	// Setting to control visibility of discovered service across workspaces
	//
	// Types that are valid to be assigned to VisibilityActionChoice:
	//	*GlobalSpecType_VisibilityEnabled
	//	*GlobalSpecType_VisibilityDisabled
	VisibilityActionChoice isGlobalSpecType_VisibilityActionChoice `protobuf_oneof:"visibility_action_choice"`
	// service_type
	//
	// x-displayName: "Discovered Service Type"
	// x-required
	// Type of Discovered Service
	//
	// Types that are valid to be assigned to ServiceType:
	//	*GlobalSpecType_VirtualServer
	ServiceType isGlobalSpecType_ServiceType `protobuf_oneof:"service_type"`
	// Reference to the internally created vhost of type bigip_virtual_server
	//
	// x-displayName: "Internal Virtual Host"
	// Internal virtual_host of type BIGIP_VIRTUAL_SERVER
	InternalVirtualHost *views.ObjectRefType `protobuf:"bytes,8,opt,name=internal_virtual_host,json=internalVirtualHost,proto3" json:"internal_virtual_host,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_VisibilityActionChoice interface {
	isGlobalSpecType_VisibilityActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServiceType interface {
	isGlobalSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_VisibilityEnabled struct {
	VisibilityEnabled *schema.Empty `protobuf:"bytes,4,opt,name=visibility_enabled,json=visibilityEnabled,proto3,oneof" json:"visibility_enabled,omitempty"`
}
type GlobalSpecType_VisibilityDisabled struct {
	VisibilityDisabled *schema.Empty `protobuf:"bytes,5,opt,name=visibility_disabled,json=visibilityDisabled,proto3,oneof" json:"visibility_disabled,omitempty"`
}
type GlobalSpecType_VirtualServer struct {
	VirtualServer *VirtualServer `protobuf:"bytes,7,opt,name=virtual_server,json=virtualServer,proto3,oneof" json:"virtual_server,omitempty"`
}

func (*GlobalSpecType_VisibilityEnabled) isGlobalSpecType_VisibilityActionChoice()  {}
func (*GlobalSpecType_VisibilityDisabled) isGlobalSpecType_VisibilityActionChoice() {}
func (*GlobalSpecType_VirtualServer) isGlobalSpecType_ServiceType()                 {}

func (m *GlobalSpecType) GetVisibilityActionChoice() isGlobalSpecType_VisibilityActionChoice {
	if m != nil {
		return m.VisibilityActionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServiceType() isGlobalSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *GlobalSpecType) GetHttpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancers
	}
	return nil
}

func (m *GlobalSpecType) GetTcpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadBalancers
	}
	return nil
}

func (m *GlobalSpecType) GetVisibilityEnabled() *schema.Empty {
	if x, ok := m.GetVisibilityActionChoice().(*GlobalSpecType_VisibilityEnabled); ok {
		return x.VisibilityEnabled
	}
	return nil
}

func (m *GlobalSpecType) GetVisibilityDisabled() *schema.Empty {
	if x, ok := m.GetVisibilityActionChoice().(*GlobalSpecType_VisibilityDisabled); ok {
		return x.VisibilityDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetVirtualServer() *VirtualServer {
	if x, ok := m.GetServiceType().(*GlobalSpecType_VirtualServer); ok {
		return x.VirtualServer
	}
	return nil
}

func (m *GlobalSpecType) GetInternalVirtualHost() *views.ObjectRefType {
	if m != nil {
		return m.InternalVirtualHost
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_VisibilityEnabled)(nil),
		(*GlobalSpecType_VisibilityDisabled)(nil),
		(*GlobalSpecType_VirtualServer)(nil),
	}
}

// virtual_server
//
// x-displayName: "Virtual Server"
// Virtual Server discovered from BIG-IP.
type VirtualServer struct {
	// discovery_object
	//
	// x-displayName: "Reference to Discovery Object"
	// Reference to the Discovery Object.
	DiscoveryObject *views.ObjectRefType `protobuf:"bytes,1,opt,name=discovery_object,json=discoveryObject,proto3" json:"discovery_object,omitempty"`
	// partition
	//
	// x-displayName: "Partition"
	// x-required
	// Partition of virtual-server
	Partition string `protobuf:"bytes,2,opt,name=partition,proto3" json:"partition,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	// x-example: "TCP"
	// Protocol on which the virtual-server is exposed
	Protocol TransmissionProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=ves.io.schema.discovered_service.TransmissionProtocol" json:"protocol,omitempty"`
	// Port
	//
	// x-displayName: "Port number"
	// x-example: "8080"
	// Port number on which the virtual-server is exposed
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Availability Status of virtual server
	//
	// x-displayName: "Status"
	// x-required
	// Availability Status of virtual server.
	Status VirtualServerStatus `protobuf:"varint,5,opt,name=status,proto3,enum=ves.io.schema.discovered_service.VirtualServerStatus" json:"status,omitempty"`
	// CBIP Cluster Name
	//
	// x-displayName: "CBIP Cluster Name"
	// x-required
	// Name of CBIP Cluster.
	CbipCluster string `protobuf:"bytes,6,opt,name=cbip_cluster,json=cbipCluster,proto3" json:"cbip_cluster,omitempty"`
	// BIG-IP version
	//
	// x-displayName: "BIG-IP Version"
	// x-required
	// Version of the BIG-IP from where the service was discovered
	BigipVersion string `protobuf:"bytes,7,opt,name=bigip_version,json=bigipVersion,proto3" json:"bigip_version,omitempty"`
	// Virtual Server IP Address
	//
	// x-displayName: "Virtual Server IP"
	// x-required
	// IP address of the BIG-IP Virtual Server
	IpAddress string `protobuf:"bytes,8,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Virtual Server Description
	//
	// Virtual Server description stored internally for validating Discovery filter replace requests
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// Enabled State of virtual server
	//
	// x-displayName: "Enabled State"
	// x-required
	// Enabled State of virtual server.
	EnabledState VirtualServerEnabledState `protobuf:"varint,10,opt,name=enabled_state,json=enabledState,proto3,enum=ves.io.schema.discovered_service.VirtualServerEnabledState" json:"enabled_state,omitempty"`
	// Management IP
	//
	// x-displayName: "Management IP"
	// x-required
	// Management IP
	MgmtIp string `protobuf:"bytes,11,opt,name=mgmt_ip,json=mgmtIp,proto3" json:"mgmt_ip,omitempty"`
	// Server Name
	//
	// x-displayName: "Server Name"
	// Virtual Server name
	ServerName string `protobuf:"bytes,12,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
}

func (m *VirtualServer) Reset()      { *m = VirtualServer{} }
func (*VirtualServer) ProtoMessage() {}
func (*VirtualServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{1}
}
func (m *VirtualServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VirtualServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualServer.Merge(m, src)
}
func (m *VirtualServer) XXX_Size() int {
	return m.Size()
}
func (m *VirtualServer) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualServer.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualServer proto.InternalMessageInfo

func (m *VirtualServer) GetDiscoveryObject() *views.ObjectRefType {
	if m != nil {
		return m.DiscoveryObject
	}
	return nil
}

func (m *VirtualServer) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *VirtualServer) GetProtocol() TransmissionProtocol {
	if m != nil {
		return m.Protocol
	}
	return UNDEFINED
}

func (m *VirtualServer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *VirtualServer) GetStatus() VirtualServerStatus {
	if m != nil {
		return m.Status
	}
	return UNSPECIFIED
}

func (m *VirtualServer) GetCbipCluster() string {
	if m != nil {
		return m.CbipCluster
	}
	return ""
}

func (m *VirtualServer) GetBigipVersion() string {
	if m != nil {
		return m.BigipVersion
	}
	return ""
}

func (m *VirtualServer) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *VirtualServer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VirtualServer) GetEnabledState() VirtualServerEnabledState {
	if m != nil {
		return m.EnabledState
	}
	return NONE
}

func (m *VirtualServer) GetMgmtIp() string {
	if m != nil {
		return m.MgmtIp
	}
	return ""
}

func (m *VirtualServer) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

// Create Discovered Service Object
//
// x-displayName: "Create Discovered Service Object"
// Create Discovered Service Object.
type CreateSpecType struct {
	HttpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_load_balancers,json=httpLoadBalancers,proto3" json:"http_load_balancers,omitempty"`
	TcpLoadBalancers  []*views.ObjectRefType `protobuf:"bytes,2,rep,name=tcp_load_balancers,json=tcpLoadBalancers,proto3" json:"tcp_load_balancers,omitempty"`
	// Types that are valid to be assigned to VisibilityActionChoice:
	//	*CreateSpecType_VisibilityEnabled
	//	*CreateSpecType_VisibilityDisabled
	VisibilityActionChoice isCreateSpecType_VisibilityActionChoice `protobuf_oneof:"visibility_action_choice"`
	// Types that are valid to be assigned to ServiceType:
	//	*CreateSpecType_VirtualServer
	ServiceType isCreateSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_VisibilityActionChoice interface {
	isCreateSpecType_VisibilityActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServiceType interface {
	isCreateSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_VisibilityEnabled struct {
	VisibilityEnabled *schema.Empty `protobuf:"bytes,4,opt,name=visibility_enabled,json=visibilityEnabled,proto3,oneof" json:"visibility_enabled,omitempty"`
}
type CreateSpecType_VisibilityDisabled struct {
	VisibilityDisabled *schema.Empty `protobuf:"bytes,5,opt,name=visibility_disabled,json=visibilityDisabled,proto3,oneof" json:"visibility_disabled,omitempty"`
}
type CreateSpecType_VirtualServer struct {
	VirtualServer *VirtualServer `protobuf:"bytes,7,opt,name=virtual_server,json=virtualServer,proto3,oneof" json:"virtual_server,omitempty"`
}

func (*CreateSpecType_VisibilityEnabled) isCreateSpecType_VisibilityActionChoice()  {}
func (*CreateSpecType_VisibilityDisabled) isCreateSpecType_VisibilityActionChoice() {}
func (*CreateSpecType_VirtualServer) isCreateSpecType_ServiceType()                 {}

func (m *CreateSpecType) GetVisibilityActionChoice() isCreateSpecType_VisibilityActionChoice {
	if m != nil {
		return m.VisibilityActionChoice
	}
	return nil
}
func (m *CreateSpecType) GetServiceType() isCreateSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *CreateSpecType) GetHttpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancers
	}
	return nil
}

func (m *CreateSpecType) GetTcpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadBalancers
	}
	return nil
}

func (m *CreateSpecType) GetVisibilityEnabled() *schema.Empty {
	if x, ok := m.GetVisibilityActionChoice().(*CreateSpecType_VisibilityEnabled); ok {
		return x.VisibilityEnabled
	}
	return nil
}

func (m *CreateSpecType) GetVisibilityDisabled() *schema.Empty {
	if x, ok := m.GetVisibilityActionChoice().(*CreateSpecType_VisibilityDisabled); ok {
		return x.VisibilityDisabled
	}
	return nil
}

func (m *CreateSpecType) GetVirtualServer() *VirtualServer {
	if x, ok := m.GetServiceType().(*CreateSpecType_VirtualServer); ok {
		return x.VirtualServer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_VisibilityEnabled)(nil),
		(*CreateSpecType_VisibilityDisabled)(nil),
		(*CreateSpecType_VirtualServer)(nil),
	}
}

// Get Discovered Service Object
//
// x-displayName: "Get Discovered Service Object"
// Get Discovered Service Object.
type GetSpecType struct {
	HttpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_load_balancers,json=httpLoadBalancers,proto3" json:"http_load_balancers,omitempty"`
	TcpLoadBalancers  []*views.ObjectRefType `protobuf:"bytes,2,rep,name=tcp_load_balancers,json=tcpLoadBalancers,proto3" json:"tcp_load_balancers,omitempty"`
	// Types that are valid to be assigned to VisibilityActionChoice:
	//	*GetSpecType_VisibilityEnabled
	//	*GetSpecType_VisibilityDisabled
	VisibilityActionChoice isGetSpecType_VisibilityActionChoice `protobuf_oneof:"visibility_action_choice"`
	// Types that are valid to be assigned to ServiceType:
	//	*GetSpecType_VirtualServer
	ServiceType isGetSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_VisibilityActionChoice interface {
	isGetSpecType_VisibilityActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServiceType interface {
	isGetSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_VisibilityEnabled struct {
	VisibilityEnabled *schema.Empty `protobuf:"bytes,4,opt,name=visibility_enabled,json=visibilityEnabled,proto3,oneof" json:"visibility_enabled,omitempty"`
}
type GetSpecType_VisibilityDisabled struct {
	VisibilityDisabled *schema.Empty `protobuf:"bytes,5,opt,name=visibility_disabled,json=visibilityDisabled,proto3,oneof" json:"visibility_disabled,omitempty"`
}
type GetSpecType_VirtualServer struct {
	VirtualServer *VirtualServer `protobuf:"bytes,7,opt,name=virtual_server,json=virtualServer,proto3,oneof" json:"virtual_server,omitempty"`
}

func (*GetSpecType_VisibilityEnabled) isGetSpecType_VisibilityActionChoice()  {}
func (*GetSpecType_VisibilityDisabled) isGetSpecType_VisibilityActionChoice() {}
func (*GetSpecType_VirtualServer) isGetSpecType_ServiceType()                 {}

func (m *GetSpecType) GetVisibilityActionChoice() isGetSpecType_VisibilityActionChoice {
	if m != nil {
		return m.VisibilityActionChoice
	}
	return nil
}
func (m *GetSpecType) GetServiceType() isGetSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *GetSpecType) GetHttpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancers
	}
	return nil
}

func (m *GetSpecType) GetTcpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadBalancers
	}
	return nil
}

func (m *GetSpecType) GetVisibilityEnabled() *schema.Empty {
	if x, ok := m.GetVisibilityActionChoice().(*GetSpecType_VisibilityEnabled); ok {
		return x.VisibilityEnabled
	}
	return nil
}

func (m *GetSpecType) GetVisibilityDisabled() *schema.Empty {
	if x, ok := m.GetVisibilityActionChoice().(*GetSpecType_VisibilityDisabled); ok {
		return x.VisibilityDisabled
	}
	return nil
}

func (m *GetSpecType) GetVirtualServer() *VirtualServer {
	if x, ok := m.GetServiceType().(*GetSpecType_VirtualServer); ok {
		return x.VirtualServer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_VisibilityEnabled)(nil),
		(*GetSpecType_VisibilityDisabled)(nil),
		(*GetSpecType_VirtualServer)(nil),
	}
}

// Replace Discovered Service Object
//
// x-displayName: "Replace Discovered Service Object"
// Replace Discovered Service Object.
type ReplaceSpecType struct {
	HttpLoadBalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_load_balancers,json=httpLoadBalancers,proto3" json:"http_load_balancers,omitempty"`
	TcpLoadBalancers  []*views.ObjectRefType `protobuf:"bytes,2,rep,name=tcp_load_balancers,json=tcpLoadBalancers,proto3" json:"tcp_load_balancers,omitempty"`
	// Types that are valid to be assigned to VisibilityActionChoice:
	//	*ReplaceSpecType_VisibilityEnabled
	//	*ReplaceSpecType_VisibilityDisabled
	VisibilityActionChoice isReplaceSpecType_VisibilityActionChoice `protobuf_oneof:"visibility_action_choice"`
	// Types that are valid to be assigned to ServiceType:
	//	*ReplaceSpecType_VirtualServer
	ServiceType isReplaceSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e612cab0245916d, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_VisibilityActionChoice interface {
	isReplaceSpecType_VisibilityActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServiceType interface {
	isReplaceSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_VisibilityEnabled struct {
	VisibilityEnabled *schema.Empty `protobuf:"bytes,4,opt,name=visibility_enabled,json=visibilityEnabled,proto3,oneof" json:"visibility_enabled,omitempty"`
}
type ReplaceSpecType_VisibilityDisabled struct {
	VisibilityDisabled *schema.Empty `protobuf:"bytes,5,opt,name=visibility_disabled,json=visibilityDisabled,proto3,oneof" json:"visibility_disabled,omitempty"`
}
type ReplaceSpecType_VirtualServer struct {
	VirtualServer *VirtualServer `protobuf:"bytes,7,opt,name=virtual_server,json=virtualServer,proto3,oneof" json:"virtual_server,omitempty"`
}

func (*ReplaceSpecType_VisibilityEnabled) isReplaceSpecType_VisibilityActionChoice()  {}
func (*ReplaceSpecType_VisibilityDisabled) isReplaceSpecType_VisibilityActionChoice() {}
func (*ReplaceSpecType_VirtualServer) isReplaceSpecType_ServiceType()                 {}

func (m *ReplaceSpecType) GetVisibilityActionChoice() isReplaceSpecType_VisibilityActionChoice {
	if m != nil {
		return m.VisibilityActionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetServiceType() isReplaceSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancers
	}
	return nil
}

func (m *ReplaceSpecType) GetTcpLoadBalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadBalancers
	}
	return nil
}

func (m *ReplaceSpecType) GetVisibilityEnabled() *schema.Empty {
	if x, ok := m.GetVisibilityActionChoice().(*ReplaceSpecType_VisibilityEnabled); ok {
		return x.VisibilityEnabled
	}
	return nil
}

func (m *ReplaceSpecType) GetVisibilityDisabled() *schema.Empty {
	if x, ok := m.GetVisibilityActionChoice().(*ReplaceSpecType_VisibilityDisabled); ok {
		return x.VisibilityDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetVirtualServer() *VirtualServer {
	if x, ok := m.GetServiceType().(*ReplaceSpecType_VirtualServer); ok {
		return x.VirtualServer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_VisibilityEnabled)(nil),
		(*ReplaceSpecType_VisibilityDisabled)(nil),
		(*ReplaceSpecType_VirtualServer)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.discovered_service.VirtualServerStatus", VirtualServerStatus_name, VirtualServerStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.discovered_service.VirtualServerStatus", VirtualServerStatus_name, VirtualServerStatus_value)
	proto.RegisterEnum("ves.io.schema.discovered_service.VirtualServerEnabledState", VirtualServerEnabledState_name, VirtualServerEnabledState_value)
	golang_proto.RegisterEnum("ves.io.schema.discovered_service.VirtualServerEnabledState", VirtualServerEnabledState_name, VirtualServerEnabledState_value)
	proto.RegisterEnum("ves.io.schema.discovered_service.TransmissionProtocol", TransmissionProtocol_name, TransmissionProtocol_value)
	golang_proto.RegisterEnum("ves.io.schema.discovered_service.TransmissionProtocol", TransmissionProtocol_name, TransmissionProtocol_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.discovered_service.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.discovered_service.GlobalSpecType")
	proto.RegisterType((*VirtualServer)(nil), "ves.io.schema.discovered_service.VirtualServer")
	golang_proto.RegisterType((*VirtualServer)(nil), "ves.io.schema.discovered_service.VirtualServer")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.discovered_service.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.discovered_service.CreateSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.discovered_service.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.discovered_service.GetSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.discovered_service.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.discovered_service.ReplaceSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/discovered_service/types.proto", fileDescriptor_5e612cab0245916d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/discovered_service/types.proto", fileDescriptor_5e612cab0245916d)
}

var fileDescriptor_5e612cab0245916d = []byte{
	// 1196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0xd8, 0x1b, 0x7f, 0x8c, 0xed, 0x74, 0x33, 0x09, 0xea, 0x36, 0x54, 0x5b, 0x13, 0x71,
	0x30, 0x21, 0xb1, 0x45, 0x2a, 0x2a, 0x54, 0xa4, 0x8a, 0x6c, 0xbc, 0x69, 0x5c, 0xc2, 0x26, 0xda,
	0xa4, 0x01, 0xc1, 0x61, 0x59, 0xef, 0x4e, 0x9d, 0xa1, 0xbb, 0x9e, 0xd5, 0xee, 0xd8, 0x90, 0x83,
	0xa5, 0xaa, 0xbf, 0x80, 0x03, 0x3f, 0x02, 0xe5, 0x27, 0xd0, 0x4b, 0x25, 0x24, 0x40, 0x9c, 0x72,
	0xcc, 0x91, 0x3a, 0x97, 0x72, 0x41, 0x15, 0xc7, 0x5e, 0x8a, 0x76, 0x76, 0xed, 0x78, 0x93, 0xa6,
	0x4d, 0xd5, 0x13, 0x52, 0x6e, 0x33, 0xef, 0xf3, 0xbc, 0x1f, 0xf3, 0xfa, 0x99, 0xd7, 0xb3, 0x70,
	0xa1, 0x87, 0x83, 0x1a, 0xa1, 0xf5, 0xc0, 0xda, 0xc5, 0xae, 0x59, 0xb7, 0x49, 0x60, 0xd1, 0x1e,
	0xf6, 0xb1, 0x6d, 0x04, 0xd8, 0xef, 0x11, 0x0b, 0xd7, 0xd9, 0x9e, 0x87, 0x83, 0x9a, 0xe7, 0x53,
	0x46, 0x51, 0x25, 0x62, 0xd7, 0x22, 0x76, 0xed, 0x34, 0x7b, 0x76, 0xb1, 0x4d, 0xd8, 0x6e, 0xb7,
	0x55, 0xb3, 0xa8, 0x5b, 0x6f, 0xd3, 0x36, 0xad, 0x73, 0xc7, 0x56, 0xf7, 0x1e, 0xdf, 0xf1, 0x0d,
	0x5f, 0x45, 0x01, 0x67, 0xaf, 0xb5, 0x29, 0x6d, 0x3b, 0xf8, 0x98, 0xc5, 0x88, 0x8b, 0x03, 0x66,
	0xba, 0x5e, 0x4c, 0xb8, 0x9c, 0xac, 0xaf, 0x83, 0x59, 0x0c, 0xbc, 0x9b, 0x04, 0xa8, 0xc7, 0x08,
	0xed, 0xc4, 0x75, 0xce, 0x56, 0x92, 0xa0, 0x47, 0x1d, 0x62, 0xed, 0x8d, 0x9f, 0x64, 0xf6, 0x4a,
	0x92, 0x31, 0x0e, 0x5d, 0x4d, 0x42, 0x3d, 0xd3, 0x21, 0xb6, 0xc9, 0xf0, 0xcb, 0x43, 0xf7, 0x08,
	0xfe, 0xde, 0x48, 0x26, 0xbf, 0x76, 0x9a, 0x11, 0x8c, 0x27, 0x98, 0x7b, 0x3e, 0x01, 0x27, 0x6f,
	0x3b, 0xb4, 0x65, 0x3a, 0x5b, 0x1e, 0xb6, 0xb6, 0xf7, 0x3c, 0x8c, 0x76, 0xe1, 0xf4, 0x2e, 0x63,
	0x9e, 0xe1, 0x50, 0xd3, 0x36, 0x5a, 0xa6, 0x63, 0x76, 0x2c, 0xec, 0x07, 0x12, 0xa8, 0x64, 0xaa,
	0xc5, 0xa5, 0xb9, 0x5a, 0xb2, 0xed, 0x3c, 0x62, 0x6d, 0xa3, 0xf5, 0x1d, 0xb6, 0x98, 0x8e, 0xef,
	0x85, 0x01, 0x94, 0x99, 0xfd, 0xfe, 0xd4, 0x28, 0xc2, 0x30, 0x80, 0xce, 0x4d, 0xeb, 0xd4, 0xb4,
	0x95, 0x61, 0x48, 0x84, 0x21, 0x62, 0xd6, 0xa9, 0x44, 0xe9, 0x73, 0x27, 0x9a, 0xde, 0xef, 0x8b,
	0xc3, 0x00, 0xa3, 0x3c, 0xa1, 0x25, 0x99, 0x46, 0x85, 0xa8, 0x47, 0x02, 0xd2, 0x22, 0x0e, 0x61,
	0x7b, 0x06, 0xee, 0x98, 0x2d, 0x07, 0xdb, 0x92, 0x50, 0x01, 0xd5, 0xe2, 0xd2, 0xcc, 0x89, 0x34,
	0xaa, 0xeb, 0xb1, 0xbd, 0xb5, 0x94, 0x3e, 0x75, 0xec, 0xa1, 0x46, 0x0e, 0xe8, 0x36, 0x9c, 0x1e,
	0x0b, 0x63, 0x93, 0x20, 0x8a, 0x33, 0xf1, 0xca, 0x38, 0x63, 0x99, 0x1b, 0xb1, 0x07, 0xfa, 0x0a,
	0x4e, 0xf6, 0x88, 0xcf, 0xba, 0xa6, 0xc3, 0xa5, 0x8a, 0x7d, 0x29, 0xc7, 0x63, 0xd4, 0x6b, 0xaf,
	0x93, 0x74, 0x6d, 0x27, 0xf2, 0xdb, 0xe2, 0x6e, 0x6b, 0x40, 0x2f, 0xf7, 0xc6, 0x0d, 0xa8, 0x07,
	0xdf, 0x21, 0x1d, 0x86, 0xfd, 0x8e, 0xe9, 0x18, 0xc3, 0x14, 0xbb, 0x34, 0x60, 0x52, 0x9e, 0x27,
	0x38, 0x4f, 0x4f, 0xe5, 0xfd, 0xfe, 0x4c, 0x8b, 0xb4, 0x89, 0x67, 0x24, 0x6b, 0x3c, 0xec, 0x83,
	0xa7, 0x8f, 0x00, 0xd0, 0xa7, 0x87, 0x09, 0xe2, 0x52, 0xd6, 0x68, 0xc0, 0x90, 0x09, 0xcb, 0x5c,
	0x7c, 0x43, 0x4c, 0x7a, 0x9a, 0x3b, 0x77, 0xc2, 0xcb, 0xfb, 0xfd, 0xa4, 0xf3, 0x30, 0x53, 0x29,
	0xb4, 0x36, 0x63, 0xe3, 0x4d, 0xf8, 0xef, 0xad, 0xdc, 0x8d, 0x85, 0x8f, 0x16, 0xae, 0x2f, 0x2c,
	0x29, 0xef, 0x43, 0x69, 0xec, 0x97, 0x30, 0xad, 0x50, 0xf1, 0x86, 0xb5, 0x4b, 0x89, 0x85, 0x51,
	0xfe, 0xf1, 0x23, 0x20, 0x1c, 0x3c, 0x02, 0x19, 0x65, 0x06, 0x96, 0xe2, 0xb6, 0x19, 0xa1, 0xe2,
	0x51, 0x68, 0xcd, 0xde, 0x11, 0xf2, 0x19, 0x51, 0xb8, 0x23, 0xe4, 0xb3, 0x62, 0x6e, 0xee, 0x9f,
	0x09, 0x58, 0x4e, 0x74, 0x14, 0x7d, 0x03, 0xc5, 0x61, 0xd7, 0xf7, 0x0c, 0xca, 0xeb, 0x94, 0xc0,
	0xb9, 0x8f, 0x52, 0xda, 0xef, 0x17, 0x46, 0xee, 0xfa, 0xa5, 0xd1, 0x32, 0x62, 0xa1, 0x2a, 0x2c,
	0x78, 0xa6, 0xcf, 0x48, 0x58, 0xae, 0x94, 0xae, 0x80, 0x6a, 0x41, 0x81, 0xbf, 0xfc, 0xfd, 0x38,
	0x33, 0xe1, 0x67, 0xa4, 0x07, 0x69, 0xfd, 0x18, 0x44, 0xf7, 0x61, 0x9e, 0x5f, 0x4f, 0x8b, 0x3a,
	0x52, 0xa6, 0x02, 0xaa, 0x93, 0x4b, 0x37, 0x5e, 0xaf, 0x8d, 0x6d, 0xdf, 0xec, 0x04, 0x2e, 0x09,
	0x02, 0x42, 0x3b, 0x9b, 0xb1, 0xb7, 0x72, 0xf9, 0xb0, 0x0f, 0x06, 0xfd, 0xb2, 0x46, 0x59, 0x25,
	0xe8, 0x7a, 0x1e, 0xf5, 0x19, 0xb6, 0x79, 0x77, 0x47, 0x09, 0xd0, 0x7b, 0x50, 0x08, 0xed, 0xfc,
	0x42, 0x94, 0x95, 0x72, 0x58, 0x51, 0x7e, 0x3e, 0x2b, 0xbd, 0x78, 0x91, 0xa9, 0x02, 0x9d, 0x43,
	0xe8, 0x0b, 0x98, 0x0d, 0x98, 0xc9, 0xba, 0x01, 0x57, 0xfb, 0xe4, 0xd2, 0xc7, 0x6f, 0xa8, 0xd4,
	0x2d, 0xee, 0xac, 0xc7, 0x41, 0xd0, 0x22, 0x2c, 0x59, 0x2d, 0xe2, 0x19, 0x96, 0xd3, 0x0d, 0x18,
	0xf6, 0xa5, 0xec, 0xa9, 0x5e, 0x14, 0x43, 0x7c, 0x25, 0x82, 0x51, 0x1d, 0x96, 0x63, 0x45, 0x62,
	0x3f, 0x3c, 0x1c, 0xbf, 0x2e, 0x49, 0x7e, 0x89, 0x13, 0x76, 0x22, 0x1c, 0x55, 0x21, 0x24, 0x9e,
	0x61, 0xda, 0xb6, 0x8f, 0x83, 0x80, 0x6b, 0xbf, 0xa0, 0x14, 0x42, 0xb6, 0xe0, 0xa7, 0x3d, 0xa0,
	0x17, 0x88, 0xb7, 0x1c, 0x61, 0xe8, 0x3a, 0x2c, 0xda, 0x38, 0xb0, 0x7c, 0xc2, 0xa7, 0xa6, 0x54,
	0xe0, 0xd4, 0xa9, 0x58, 0x81, 0xa3, 0xf8, 0x79, 0x7d, 0x9c, 0x85, 0xbe, 0x85, 0xe5, 0x78, 0x88,
	0x18, 0xe1, 0x81, 0xb0, 0x04, 0x79, 0x53, 0x3e, 0x7d, 0xc3, 0xa6, 0xc4, 0x73, 0x25, 0xec, 0x0d,
	0xd6, 0x4b, 0x78, 0x6c, 0x87, 0x3e, 0x80, 0x39, 0xb7, 0xed, 0x32, 0x83, 0x78, 0x52, 0x91, 0x97,
	0x24, 0x8e, 0x95, 0x14, 0x1d, 0x22, 0x1b, 0x12, 0x9a, 0x1e, 0xfa, 0x10, 0x16, 0xa3, 0x0b, 0x6a,
	0x74, 0x4c, 0x17, 0x4b, 0xa5, 0x13, 0xad, 0xc9, 0xeb, 0x30, 0x82, 0x35, 0xd3, 0xc5, 0x73, 0xbf,
	0x09, 0x70, 0x72, 0xc5, 0xc7, 0x26, 0xc3, 0x17, 0xd3, 0xfe, 0x7f, 0x3f, 0xed, 0x6f, 0x4e, 0xfd,
	0x79, 0xeb, 0xc4, 0x7f, 0xb7, 0xf2, 0xc9, 0x2b, 0x26, 0xe3, 0xd5, 0x87, 0xcf, 0xc1, 0x99, 0xa8,
	0x52, 0x39, 0x31, 0x2d, 0xc5, 0x87, 0xcf, 0x41, 0xc2, 0x92, 0x98, 0x9c, 0xbf, 0x0a, 0xb0, 0x78,
	0x1b, 0xb3, 0x0b, 0x15, 0x5d, 0xa8, 0xe8, 0x2d, 0x54, 0xf4, 0xbb, 0x00, 0x2f, 0xe9, 0xd8, 0x73,
	0x4c, 0xeb, 0x62, 0x1e, 0x5d, 0x28, 0xe9, 0x2d, 0x94, 0x34, 0xef, 0xc2, 0xe9, 0x97, 0x3c, 0x38,
	0xd0, 0x25, 0x58, 0xbc, 0xab, 0x6d, 0x6d, 0xaa, 0x2b, 0xcd, 0xd5, 0xa6, 0xda, 0x10, 0x53, 0xa8,
	0x0c, 0x0b, 0xcb, 0x3b, 0xcb, 0xcd, 0xf5, 0x65, 0x65, 0x5d, 0x15, 0x01, 0x2a, 0xc2, 0xdc, 0xc6,
	0xea, 0xea, 0x7a, 0x53, 0x53, 0xc5, 0x74, 0xb8, 0xb9, 0xab, 0x7d, 0xae, 0x6d, 0x7c, 0xa9, 0x89,
	0x99, 0xc8, 0xf3, 0x98, 0x2a, 0x84, 0x68, 0x43, 0x5d, 0x57, 0xb7, 0xd5, 0x86, 0x38, 0x31, 0xff,
	0x19, 0xbc, 0x72, 0xe6, 0x5f, 0x39, 0xca, 0x43, 0x41, 0xdb, 0xd0, 0x54, 0x31, 0x15, 0xfa, 0xa8,
	0x5a, 0xe8, 0xdf, 0x10, 0x01, 0x2a, 0xc1, 0x7c, 0xa3, 0xb9, 0x15, 0xed, 0xd2, 0xf3, 0x2b, 0x70,
	0xe6, 0x65, 0xef, 0xb5, 0xb0, 0xc0, 0xbb, 0x5a, 0x43, 0x5d, 0x6d, 0x6a, 0xbc, 0xde, 0x3c, 0x14,
	0xd6, 0xb6, 0xb7, 0x37, 0x45, 0x80, 0x0a, 0x70, 0x22, 0x5c, 0x6d, 0x89, 0x69, 0x94, 0x83, 0x99,
	0xed, 0x95, 0x4d, 0x31, 0xa3, 0xfc, 0x04, 0x0e, 0x9e, 0xc8, 0xa9, 0xc3, 0x27, 0x72, 0xea, 0xd9,
	0x13, 0x19, 0x3c, 0x18, 0xc8, 0xe0, 0xe7, 0x81, 0x0c, 0xfe, 0x18, 0xc8, 0xe0, 0x60, 0x20, 0x83,
	0xc3, 0x81, 0x0c, 0xfe, 0x1a, 0xc8, 0xe0, 0xe9, 0x40, 0x4e, 0x3d, 0x1b, 0xc8, 0xe0, 0xc7, 0x23,
	0x39, 0xf5, 0xf8, 0x48, 0x06, 0x07, 0x47, 0x72, 0xea, 0xf0, 0x48, 0x4e, 0x7d, 0xbd, 0xd3, 0xa6,
	0xde, 0xfd, 0x76, 0xad, 0x47, 0x1d, 0x86, 0x7d, 0xdf, 0xac, 0x75, 0x83, 0x3a, 0x5f, 0xdc, 0xa3,
	0xbe, 0xbb, 0xe8, 0xf9, 0xb4, 0x47, 0x6c, 0xec, 0x2f, 0x0e, 0xe1, 0xba, 0xd7, 0x6a, 0xd3, 0x3a,
	0xfe, 0x81, 0xc5, 0xdf, 0x92, 0x67, 0x7e, 0xa5, 0xb7, 0xb2, 0xfc, 0x69, 0x79, 0xfd, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xeb, 0x22, 0x3b, 0x9f, 0xd0, 0x0f, 0x00, 0x00,
}

func (x VirtualServerStatus) String() string {
	s, ok := VirtualServerStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VirtualServerEnabledState) String() string {
	s, ok := VirtualServerEnabledState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TransmissionProtocol) String() string {
	s, ok := TransmissionProtocol_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadBalancers) != len(that1.HttpLoadBalancers) {
		return false
	}
	for i := range this.HttpLoadBalancers {
		if !this.HttpLoadBalancers[i].Equal(that1.HttpLoadBalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadBalancers) != len(that1.TcpLoadBalancers) {
		return false
	}
	for i := range this.TcpLoadBalancers {
		if !this.TcpLoadBalancers[i].Equal(that1.TcpLoadBalancers[i]) {
			return false
		}
	}
	if that1.VisibilityActionChoice == nil {
		if this.VisibilityActionChoice != nil {
			return false
		}
	} else if this.VisibilityActionChoice == nil {
		return false
	} else if !this.VisibilityActionChoice.Equal(that1.VisibilityActionChoice) {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	if !this.InternalVirtualHost.Equal(that1.InternalVirtualHost) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VisibilityEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VisibilityEnabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_VisibilityEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VisibilityEnabled.Equal(that1.VisibilityEnabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VisibilityDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VisibilityDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_VisibilityDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VisibilityDisabled.Equal(that1.VisibilityDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VirtualServer)
	if !ok {
		that2, ok := that.(GlobalSpecType_VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualServer.Equal(that1.VirtualServer) {
		return false
	}
	return true
}
func (this *VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualServer)
	if !ok {
		that2, ok := that.(VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiscoveryObject.Equal(that1.DiscoveryObject) {
		return false
	}
	if this.Partition != that1.Partition {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CbipCluster != that1.CbipCluster {
		return false
	}
	if this.BigipVersion != that1.BigipVersion {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.EnabledState != that1.EnabledState {
		return false
	}
	if this.MgmtIp != that1.MgmtIp {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadBalancers) != len(that1.HttpLoadBalancers) {
		return false
	}
	for i := range this.HttpLoadBalancers {
		if !this.HttpLoadBalancers[i].Equal(that1.HttpLoadBalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadBalancers) != len(that1.TcpLoadBalancers) {
		return false
	}
	for i := range this.TcpLoadBalancers {
		if !this.TcpLoadBalancers[i].Equal(that1.TcpLoadBalancers[i]) {
			return false
		}
	}
	if that1.VisibilityActionChoice == nil {
		if this.VisibilityActionChoice != nil {
			return false
		}
	} else if this.VisibilityActionChoice == nil {
		return false
	} else if !this.VisibilityActionChoice.Equal(that1.VisibilityActionChoice) {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *CreateSpecType_VisibilityEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VisibilityEnabled)
	if !ok {
		that2, ok := that.(CreateSpecType_VisibilityEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VisibilityEnabled.Equal(that1.VisibilityEnabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_VisibilityDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VisibilityDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_VisibilityDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VisibilityDisabled.Equal(that1.VisibilityDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VirtualServer)
	if !ok {
		that2, ok := that.(CreateSpecType_VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualServer.Equal(that1.VirtualServer) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadBalancers) != len(that1.HttpLoadBalancers) {
		return false
	}
	for i := range this.HttpLoadBalancers {
		if !this.HttpLoadBalancers[i].Equal(that1.HttpLoadBalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadBalancers) != len(that1.TcpLoadBalancers) {
		return false
	}
	for i := range this.TcpLoadBalancers {
		if !this.TcpLoadBalancers[i].Equal(that1.TcpLoadBalancers[i]) {
			return false
		}
	}
	if that1.VisibilityActionChoice == nil {
		if this.VisibilityActionChoice != nil {
			return false
		}
	} else if this.VisibilityActionChoice == nil {
		return false
	} else if !this.VisibilityActionChoice.Equal(that1.VisibilityActionChoice) {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *GetSpecType_VisibilityEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VisibilityEnabled)
	if !ok {
		that2, ok := that.(GetSpecType_VisibilityEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VisibilityEnabled.Equal(that1.VisibilityEnabled) {
		return false
	}
	return true
}
func (this *GetSpecType_VisibilityDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VisibilityDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_VisibilityDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VisibilityDisabled.Equal(that1.VisibilityDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VirtualServer)
	if !ok {
		that2, ok := that.(GetSpecType_VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualServer.Equal(that1.VirtualServer) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadBalancers) != len(that1.HttpLoadBalancers) {
		return false
	}
	for i := range this.HttpLoadBalancers {
		if !this.HttpLoadBalancers[i].Equal(that1.HttpLoadBalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadBalancers) != len(that1.TcpLoadBalancers) {
		return false
	}
	for i := range this.TcpLoadBalancers {
		if !this.TcpLoadBalancers[i].Equal(that1.TcpLoadBalancers[i]) {
			return false
		}
	}
	if that1.VisibilityActionChoice == nil {
		if this.VisibilityActionChoice != nil {
			return false
		}
	} else if this.VisibilityActionChoice == nil {
		return false
	} else if !this.VisibilityActionChoice.Equal(that1.VisibilityActionChoice) {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VisibilityEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VisibilityEnabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VisibilityEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VisibilityEnabled.Equal(that1.VisibilityEnabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VisibilityDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VisibilityDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VisibilityDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VisibilityDisabled.Equal(that1.VisibilityDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VirtualServer)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualServer.Equal(that1.VirtualServer) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&discovered_service.GlobalSpecType{")
	if this.HttpLoadBalancers != nil {
		s = append(s, "HttpLoadBalancers: "+fmt.Sprintf("%#v", this.HttpLoadBalancers)+",\n")
	}
	if this.TcpLoadBalancers != nil {
		s = append(s, "TcpLoadBalancers: "+fmt.Sprintf("%#v", this.TcpLoadBalancers)+",\n")
	}
	if this.VisibilityActionChoice != nil {
		s = append(s, "VisibilityActionChoice: "+fmt.Sprintf("%#v", this.VisibilityActionChoice)+",\n")
	}
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	if this.InternalVirtualHost != nil {
		s = append(s, "InternalVirtualHost: "+fmt.Sprintf("%#v", this.InternalVirtualHost)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_VisibilityEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GlobalSpecType_VisibilityEnabled{` +
		`VisibilityEnabled:` + fmt.Sprintf("%#v", this.VisibilityEnabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VisibilityDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GlobalSpecType_VisibilityDisabled{` +
		`VisibilityDisabled:` + fmt.Sprintf("%#v", this.VisibilityDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GlobalSpecType_VirtualServer{` +
		`VirtualServer:` + fmt.Sprintf("%#v", this.VirtualServer) + `}`}, ", ")
	return s
}
func (this *VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&discovered_service.VirtualServer{")
	if this.DiscoveryObject != nil {
		s = append(s, "DiscoveryObject: "+fmt.Sprintf("%#v", this.DiscoveryObject)+",\n")
	}
	s = append(s, "Partition: "+fmt.Sprintf("%#v", this.Partition)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CbipCluster: "+fmt.Sprintf("%#v", this.CbipCluster)+",\n")
	s = append(s, "BigipVersion: "+fmt.Sprintf("%#v", this.BigipVersion)+",\n")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "EnabledState: "+fmt.Sprintf("%#v", this.EnabledState)+",\n")
	s = append(s, "MgmtIp: "+fmt.Sprintf("%#v", this.MgmtIp)+",\n")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&discovered_service.CreateSpecType{")
	if this.HttpLoadBalancers != nil {
		s = append(s, "HttpLoadBalancers: "+fmt.Sprintf("%#v", this.HttpLoadBalancers)+",\n")
	}
	if this.TcpLoadBalancers != nil {
		s = append(s, "TcpLoadBalancers: "+fmt.Sprintf("%#v", this.TcpLoadBalancers)+",\n")
	}
	if this.VisibilityActionChoice != nil {
		s = append(s, "VisibilityActionChoice: "+fmt.Sprintf("%#v", this.VisibilityActionChoice)+",\n")
	}
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_VisibilityEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.CreateSpecType_VisibilityEnabled{` +
		`VisibilityEnabled:` + fmt.Sprintf("%#v", this.VisibilityEnabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VisibilityDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.CreateSpecType_VisibilityDisabled{` +
		`VisibilityDisabled:` + fmt.Sprintf("%#v", this.VisibilityDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.CreateSpecType_VirtualServer{` +
		`VirtualServer:` + fmt.Sprintf("%#v", this.VirtualServer) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&discovered_service.GetSpecType{")
	if this.HttpLoadBalancers != nil {
		s = append(s, "HttpLoadBalancers: "+fmt.Sprintf("%#v", this.HttpLoadBalancers)+",\n")
	}
	if this.TcpLoadBalancers != nil {
		s = append(s, "TcpLoadBalancers: "+fmt.Sprintf("%#v", this.TcpLoadBalancers)+",\n")
	}
	if this.VisibilityActionChoice != nil {
		s = append(s, "VisibilityActionChoice: "+fmt.Sprintf("%#v", this.VisibilityActionChoice)+",\n")
	}
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_VisibilityEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GetSpecType_VisibilityEnabled{` +
		`VisibilityEnabled:` + fmt.Sprintf("%#v", this.VisibilityEnabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VisibilityDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GetSpecType_VisibilityDisabled{` +
		`VisibilityDisabled:` + fmt.Sprintf("%#v", this.VisibilityDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.GetSpecType_VirtualServer{` +
		`VirtualServer:` + fmt.Sprintf("%#v", this.VirtualServer) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&discovered_service.ReplaceSpecType{")
	if this.HttpLoadBalancers != nil {
		s = append(s, "HttpLoadBalancers: "+fmt.Sprintf("%#v", this.HttpLoadBalancers)+",\n")
	}
	if this.TcpLoadBalancers != nil {
		s = append(s, "TcpLoadBalancers: "+fmt.Sprintf("%#v", this.TcpLoadBalancers)+",\n")
	}
	if this.VisibilityActionChoice != nil {
		s = append(s, "VisibilityActionChoice: "+fmt.Sprintf("%#v", this.VisibilityActionChoice)+",\n")
	}
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_VisibilityEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ReplaceSpecType_VisibilityEnabled{` +
		`VisibilityEnabled:` + fmt.Sprintf("%#v", this.VisibilityEnabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VisibilityDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ReplaceSpecType_VisibilityDisabled{` +
		`VisibilityDisabled:` + fmt.Sprintf("%#v", this.VisibilityDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&discovered_service.ReplaceSpecType_VirtualServer{` +
		`VirtualServer:` + fmt.Sprintf("%#v", this.VirtualServer) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.InternalVirtualHost != nil {
		{
			size, err := m.InternalVirtualHost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VisibilityActionChoice != nil {
		{
			size := m.VisibilityActionChoice.Size()
			i -= size
			if _, err := m.VisibilityActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for iNdEx := len(m.TcpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HttpLoadBalancers) > 0 {
		for iNdEx := len(m.HttpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_VisibilityEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VisibilityEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VisibilityEnabled != nil {
		{
			size, err := m.VisibilityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_VisibilityDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VisibilityDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VisibilityDisabled != nil {
		{
			size, err := m.VisibilityDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualServer != nil {
		{
			size, err := m.VirtualServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *VirtualServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MgmtIp) > 0 {
		i -= len(m.MgmtIp)
		copy(dAtA[i:], m.MgmtIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MgmtIp)))
		i--
		dAtA[i] = 0x5a
	}
	if m.EnabledState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EnabledState))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BigipVersion) > 0 {
		i -= len(m.BigipVersion)
		copy(dAtA[i:], m.BigipVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BigipVersion)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CbipCluster) > 0 {
		i -= len(m.CbipCluster)
		copy(dAtA[i:], m.CbipCluster)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CbipCluster)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if m.Protocol != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Partition) > 0 {
		i -= len(m.Partition)
		copy(dAtA[i:], m.Partition)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Partition)))
		i--
		dAtA[i] = 0x12
	}
	if m.DiscoveryObject != nil {
		{
			size, err := m.DiscoveryObject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VisibilityActionChoice != nil {
		{
			size := m.VisibilityActionChoice.Size()
			i -= size
			if _, err := m.VisibilityActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for iNdEx := len(m.TcpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HttpLoadBalancers) > 0 {
		for iNdEx := len(m.HttpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_VisibilityEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VisibilityEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VisibilityEnabled != nil {
		{
			size, err := m.VisibilityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_VisibilityDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VisibilityDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VisibilityDisabled != nil {
		{
			size, err := m.VisibilityDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualServer != nil {
		{
			size, err := m.VirtualServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VisibilityActionChoice != nil {
		{
			size := m.VisibilityActionChoice.Size()
			i -= size
			if _, err := m.VisibilityActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for iNdEx := len(m.TcpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HttpLoadBalancers) > 0 {
		for iNdEx := len(m.HttpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_VisibilityEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VisibilityEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VisibilityEnabled != nil {
		{
			size, err := m.VisibilityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_VisibilityDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VisibilityDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VisibilityDisabled != nil {
		{
			size, err := m.VisibilityDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualServer != nil {
		{
			size, err := m.VirtualServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VisibilityActionChoice != nil {
		{
			size := m.VisibilityActionChoice.Size()
			i -= size
			if _, err := m.VisibilityActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for iNdEx := len(m.TcpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HttpLoadBalancers) > 0 {
		for iNdEx := len(m.HttpLoadBalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadBalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_VisibilityEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VisibilityEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VisibilityEnabled != nil {
		{
			size, err := m.VisibilityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_VisibilityDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VisibilityDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VisibilityDisabled != nil {
		{
			size, err := m.VisibilityDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VirtualServer != nil {
		{
			size, err := m.VirtualServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadBalancers) > 0 {
		for _, e := range m.HttpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for _, e := range m.TcpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.VisibilityActionChoice != nil {
		n += m.VisibilityActionChoice.Size()
	}
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	if m.InternalVirtualHost != nil {
		l = m.InternalVirtualHost.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_VisibilityEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisibilityEnabled != nil {
		l = m.VisibilityEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_VisibilityDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisibilityDisabled != nil {
		l = m.VisibilityDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualServer != nil {
		l = m.VirtualServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscoveryObject != nil {
		l = m.DiscoveryObject.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Partition)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovTypes(uint64(m.Protocol))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.CbipCluster)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BigipVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EnabledState != 0 {
		n += 1 + sovTypes(uint64(m.EnabledState))
	}
	l = len(m.MgmtIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadBalancers) > 0 {
		for _, e := range m.HttpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for _, e := range m.TcpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.VisibilityActionChoice != nil {
		n += m.VisibilityActionChoice.Size()
	}
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *CreateSpecType_VisibilityEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisibilityEnabled != nil {
		l = m.VisibilityEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_VisibilityDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisibilityDisabled != nil {
		l = m.VisibilityDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualServer != nil {
		l = m.VirtualServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadBalancers) > 0 {
		for _, e := range m.HttpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for _, e := range m.TcpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.VisibilityActionChoice != nil {
		n += m.VisibilityActionChoice.Size()
	}
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *GetSpecType_VisibilityEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisibilityEnabled != nil {
		l = m.VisibilityEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_VisibilityDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisibilityDisabled != nil {
		l = m.VisibilityDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualServer != nil {
		l = m.VirtualServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadBalancers) > 0 {
		for _, e := range m.HttpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadBalancers) > 0 {
		for _, e := range m.TcpLoadBalancers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.VisibilityActionChoice != nil {
		n += m.VisibilityActionChoice.Size()
	}
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *ReplaceSpecType_VisibilityEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisibilityEnabled != nil {
		l = m.VisibilityEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_VisibilityDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VisibilityDisabled != nil {
		l = m.VisibilityDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualServer != nil {
		l = m.VirtualServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadBalancers {
		repeatedStringForHttpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadBalancers += "}"
	repeatedStringForTcpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadBalancers {
		repeatedStringForTcpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadBalancers += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`HttpLoadBalancers:` + repeatedStringForHttpLoadBalancers + `,`,
		`TcpLoadBalancers:` + repeatedStringForTcpLoadBalancers + `,`,
		`VisibilityActionChoice:` + fmt.Sprintf("%v", this.VisibilityActionChoice) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`InternalVirtualHost:` + strings.Replace(fmt.Sprintf("%v", this.InternalVirtualHost), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VisibilityEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VisibilityEnabled{`,
		`VisibilityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VisibilityDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VisibilityDisabled{`,
		`VisibilityDisabled:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VirtualServer{`,
		`VirtualServer:` + strings.Replace(fmt.Sprintf("%v", this.VirtualServer), "VirtualServer", "VirtualServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualServer{`,
		`DiscoveryObject:` + strings.Replace(fmt.Sprintf("%v", this.DiscoveryObject), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Partition:` + fmt.Sprintf("%v", this.Partition) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CbipCluster:` + fmt.Sprintf("%v", this.CbipCluster) + `,`,
		`BigipVersion:` + fmt.Sprintf("%v", this.BigipVersion) + `,`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`EnabledState:` + fmt.Sprintf("%v", this.EnabledState) + `,`,
		`MgmtIp:` + fmt.Sprintf("%v", this.MgmtIp) + `,`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadBalancers {
		repeatedStringForHttpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadBalancers += "}"
	repeatedStringForTcpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadBalancers {
		repeatedStringForTcpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadBalancers += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`HttpLoadBalancers:` + repeatedStringForHttpLoadBalancers + `,`,
		`TcpLoadBalancers:` + repeatedStringForTcpLoadBalancers + `,`,
		`VisibilityActionChoice:` + fmt.Sprintf("%v", this.VisibilityActionChoice) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VisibilityEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VisibilityEnabled{`,
		`VisibilityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VisibilityDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VisibilityDisabled{`,
		`VisibilityDisabled:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VirtualServer{`,
		`VirtualServer:` + strings.Replace(fmt.Sprintf("%v", this.VirtualServer), "VirtualServer", "VirtualServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadBalancers {
		repeatedStringForHttpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadBalancers += "}"
	repeatedStringForTcpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadBalancers {
		repeatedStringForTcpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadBalancers += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`HttpLoadBalancers:` + repeatedStringForHttpLoadBalancers + `,`,
		`TcpLoadBalancers:` + repeatedStringForTcpLoadBalancers + `,`,
		`VisibilityActionChoice:` + fmt.Sprintf("%v", this.VisibilityActionChoice) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VisibilityEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VisibilityEnabled{`,
		`VisibilityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VisibilityDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VisibilityDisabled{`,
		`VisibilityDisabled:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VirtualServer{`,
		`VirtualServer:` + strings.Replace(fmt.Sprintf("%v", this.VirtualServer), "VirtualServer", "VirtualServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadBalancers {
		repeatedStringForHttpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadBalancers += "}"
	repeatedStringForTcpLoadBalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadBalancers {
		repeatedStringForTcpLoadBalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadBalancers += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`HttpLoadBalancers:` + repeatedStringForHttpLoadBalancers + `,`,
		`TcpLoadBalancers:` + repeatedStringForTcpLoadBalancers + `,`,
		`VisibilityActionChoice:` + fmt.Sprintf("%v", this.VisibilityActionChoice) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VisibilityEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VisibilityEnabled{`,
		`VisibilityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VisibilityDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VisibilityDisabled{`,
		`VisibilityDisabled:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VirtualServer{`,
		`VirtualServer:` + strings.Replace(fmt.Sprintf("%v", this.VirtualServer), "VirtualServer", "VirtualServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadBalancers = append(m.HttpLoadBalancers, &views.ObjectRefType{})
			if err := m.HttpLoadBalancers[len(m.HttpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadBalancers = append(m.TcpLoadBalancers, &views.ObjectRefType{})
			if err := m.TcpLoadBalancers[len(m.TcpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VisibilityActionChoice = &GlobalSpecType_VisibilityEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VisibilityActionChoice = &GlobalSpecType_VisibilityDisabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &GlobalSpecType_VirtualServer{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalVirtualHost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InternalVirtualHost == nil {
				m.InternalVirtualHost = &views.ObjectRefType{}
			}
			if err := m.InternalVirtualHost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiscoveryObject == nil {
				m.DiscoveryObject = &views.ObjectRefType{}
			}
			if err := m.DiscoveryObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= TransmissionProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VirtualServerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbipCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CbipCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigipVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigipVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledState", wireType)
			}
			m.EnabledState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnabledState |= VirtualServerEnabledState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadBalancers = append(m.HttpLoadBalancers, &views.ObjectRefType{})
			if err := m.HttpLoadBalancers[len(m.HttpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadBalancers = append(m.TcpLoadBalancers, &views.ObjectRefType{})
			if err := m.TcpLoadBalancers[len(m.TcpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VisibilityActionChoice = &CreateSpecType_VisibilityEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VisibilityActionChoice = &CreateSpecType_VisibilityDisabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &CreateSpecType_VirtualServer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadBalancers = append(m.HttpLoadBalancers, &views.ObjectRefType{})
			if err := m.HttpLoadBalancers[len(m.HttpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadBalancers = append(m.TcpLoadBalancers, &views.ObjectRefType{})
			if err := m.TcpLoadBalancers[len(m.TcpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VisibilityActionChoice = &GetSpecType_VisibilityEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VisibilityActionChoice = &GetSpecType_VisibilityDisabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &GetSpecType_VirtualServer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadBalancers = append(m.HttpLoadBalancers, &views.ObjectRefType{})
			if err := m.HttpLoadBalancers[len(m.HttpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadBalancers = append(m.TcpLoadBalancers, &views.ObjectRefType{})
			if err := m.TcpLoadBalancers[len(m.TcpLoadBalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VisibilityActionChoice = &ReplaceSpecType_VisibilityEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VisibilityActionChoice = &ReplaceSpecType_VisibilityDisabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &ReplaceSpecType_VirtualServer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

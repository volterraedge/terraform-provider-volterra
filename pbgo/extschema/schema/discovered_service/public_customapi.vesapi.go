// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package discovered_service

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCCreateHTTPLoadBalancer(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateHTTPLoadBalancerRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CreateHTTPLoadBalancer(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCCreateTCPLoadBalancer(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateTCPLoadBalancerRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CreateTCPLoadBalancer(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCDisableVisibility(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DisableVisibilityRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.DisableVisibilityRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DisableVisibility(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCEnableVisibility(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &EnableVisibilityRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.EnableVisibilityRequest", yamlReq)
	}
	rsp, err := c.grpcClient.EnableVisibility(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCListDiscoveredServices(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListServicesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.ListServicesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListDiscoveredServices(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["CreateHTTPLoadBalancer"] = ccl.doRPCCreateHTTPLoadBalancer

	rpcFns["CreateTCPLoadBalancer"] = ccl.doRPCCreateTCPLoadBalancer

	rpcFns["DisableVisibility"] = ccl.doRPCDisableVisibility

	rpcFns["EnableVisibility"] = ccl.doRPCEnableVisibility

	rpcFns["ListDiscoveredServices"] = ccl.doRPCListDiscoveredServices

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCCreateHTTPLoadBalancer(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateHTTPLoadBalancerRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("http_lb_request", fmt.Sprintf("%v", req.HttpLbRequest))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CreateHTTPLoadBalancerResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.discovered_service.CreateHTTPLoadBalancerResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCCreateTCPLoadBalancer(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateTCPLoadBalancerRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("tcp_lb_request", fmt.Sprintf("%v", req.TcpLbRequest))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CreateTCPLoadBalancerResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.discovered_service.CreateTCPLoadBalancerResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCDisableVisibility(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DisableVisibilityRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.DisableVisibilityRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &DisableVisibilityResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.discovered_service.DisableVisibilityResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCEnableVisibility(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &EnableVisibilityRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.EnableVisibilityRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &EnableVisibilityResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.discovered_service.EnableVisibilityResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCListDiscoveredServices(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListServicesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.discovered_service.ListServicesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("discovery_name", fmt.Sprintf("%v", req.DiscoveryName))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("service_type", fmt.Sprintf("%v", req.ServiceType))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListServicesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.discovered_service.ListServicesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["CreateHTTPLoadBalancer"] = ccl.doRPCCreateHTTPLoadBalancer

	rpcFns["CreateTCPLoadBalancer"] = ccl.doRPCCreateTCPLoadBalancer

	rpcFns["DisableVisibility"] = ccl.doRPCDisableVisibility

	rpcFns["EnableVisibility"] = ccl.doRPCEnableVisibility

	rpcFns["ListDiscoveredServices"] = ccl.doRPCListDiscoveredServices

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) CreateHTTPLoadBalancer(ctx context.Context, in *CreateHTTPLoadBalancerRequest, opts ...grpc.CallOption) (*CreateHTTPLoadBalancerResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.discovered_service.CustomAPI.CreateHTTPLoadBalancer")
	return c.CustomAPIServer.CreateHTTPLoadBalancer(ctx, in)
}
func (c *customAPIInprocClient) CreateTCPLoadBalancer(ctx context.Context, in *CreateTCPLoadBalancerRequest, opts ...grpc.CallOption) (*CreateTCPLoadBalancerResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.discovered_service.CustomAPI.CreateTCPLoadBalancer")
	return c.CustomAPIServer.CreateTCPLoadBalancer(ctx, in)
}
func (c *customAPIInprocClient) DisableVisibility(ctx context.Context, in *DisableVisibilityRequest, opts ...grpc.CallOption) (*DisableVisibilityResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.discovered_service.CustomAPI.DisableVisibility")
	return c.CustomAPIServer.DisableVisibility(ctx, in)
}
func (c *customAPIInprocClient) EnableVisibility(ctx context.Context, in *EnableVisibilityRequest, opts ...grpc.CallOption) (*EnableVisibilityResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.discovered_service.CustomAPI.EnableVisibility")
	return c.CustomAPIServer.EnableVisibility(ctx, in)
}
func (c *customAPIInprocClient) ListDiscoveredServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.discovered_service.CustomAPI.ListDiscoveredServices")
	return c.CustomAPIServer.ListDiscoveredServices(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) CreateHTTPLoadBalancer(ctx context.Context, in *CreateHTTPLoadBalancerRequest) (*CreateHTTPLoadBalancerResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.discovered_service.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *CreateHTTPLoadBalancerResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.CreateHTTPLoadBalancer' operation on 'discovered_service'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.discovered_service.CustomAPI.CreateHTTPLoadBalancer"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CreateHTTPLoadBalancer(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.CreateHTTPLoadBalancerResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) CreateTCPLoadBalancer(ctx context.Context, in *CreateTCPLoadBalancerRequest) (*CreateTCPLoadBalancerResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.discovered_service.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *CreateTCPLoadBalancerResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.CreateTCPLoadBalancer' operation on 'discovered_service'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.discovered_service.CustomAPI.CreateTCPLoadBalancer"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CreateTCPLoadBalancer(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.CreateTCPLoadBalancerResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) DisableVisibility(ctx context.Context, in *DisableVisibilityRequest) (*DisableVisibilityResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.discovered_service.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *DisableVisibilityResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.DisableVisibilityRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.DisableVisibility' operation on 'discovered_service'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.discovered_service.CustomAPI.DisableVisibility"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DisableVisibility(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.DisableVisibilityResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) EnableVisibility(ctx context.Context, in *EnableVisibilityRequest) (*EnableVisibilityResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.discovered_service.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *EnableVisibilityResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.EnableVisibilityRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.EnableVisibility' operation on 'discovered_service'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.discovered_service.CustomAPI.EnableVisibility"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.EnableVisibility(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.EnableVisibilityResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ListDiscoveredServices(ctx context.Context, in *ListServicesRequest) (*ListServicesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.discovered_service.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ListServicesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.ListServicesRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ListDiscoveredServices' operation on 'discovered_service'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.discovered_service.CustomAPI.ListDiscoveredServices"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListDiscoveredServices(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.discovered_service.ListServicesResponse", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Discovered Service Custom API",
        "description": "Custom API's for discovered services",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/custom/namespaces/{namespace}/discovered_services": {
            "get": {
                "summary": "List discovered services of specific type",
                "description": "List the discoverd services of specific type like virtual-servers, k8s, consul, ngix server, etc",
                "operationId": "ves.io.schema.discovered_service.CustomAPI.ListDiscoveredServices",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceListServicesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"shared\"\nx-required\nNamespace of the discovered service for current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "service_type",
                        "description": "x-example: \"bigip_virtual_server\"\nx-required\nIdentifies the discovered service type",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Service Type"
                    },
                    {
                        "name": "discovery_name",
                        "description": "x-example: \"disc-cbip-1\"\nFilter results to only include items referencing this discovery object name",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Discovery Name Filter"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-discovered_service-customapi-listdiscoveredservices"
                },
                "x-ves-proto-rpc": "ves.io.schema.discovered_service.CustomAPI.ListDiscoveredServices"
            },
            "x-displayname": "Discovered Service Custom API",
            "x-ves-proto-service": "ves.io.schema.discovered_service.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/discovered_services/{name}/create_http_load_balancer": {
            "post": {
                "summary": "Create HTTP/HTTPS load balancer",
                "description": "Create HTTP/HTTPS load balancer using the discovered virtual server as an origin server",
                "operationId": "ves.io.schema.discovered_service.CustomAPI.CreateHTTPLoadBalancer",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceCreateHTTPLoadBalancerResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"shared\"\nx-required\nNamespace of the discovered service for current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Service Name\n\nx-example: \"vs1\"\nx-required\nIdentifies the discovered service name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Service Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceCreateHTTPLoadBalancerRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-discovered_service-customapi-createhttploadbalancer"
                },
                "x-ves-proto-rpc": "ves.io.schema.discovered_service.CustomAPI.CreateHTTPLoadBalancer"
            },
            "x-displayname": "Discovered Service Custom API",
            "x-ves-proto-service": "ves.io.schema.discovered_service.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/discovered_services/{name}/create_tcp_load_balancer": {
            "post": {
                "summary": "Create TCP load balancer",
                "description": "Create TCP load balancer using the discovered virtual server as an origin server",
                "operationId": "ves.io.schema.discovered_service.CustomAPI.CreateTCPLoadBalancer",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceCreateTCPLoadBalancerResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"shared\"\nx-required\nNamespace of the discovered service for current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Service Name\n\nx-example: \"vs1\"\nx-required\nIdentifies the discovered service name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Service Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceCreateTCPLoadBalancerRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-discovered_service-customapi-createtcploadbalancer"
                },
                "x-ves-proto-rpc": "ves.io.schema.discovered_service.CustomAPI.CreateTCPLoadBalancer"
            },
            "x-displayname": "Discovered Service Custom API",
            "x-ves-proto-service": "ves.io.schema.discovered_service.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/discovered_services/{name}/disable_visibility": {
            "post": {
                "summary": "Disable visibility in all workspaces",
                "description": "Disable Visibility of the service in all workspaces. This will remove the discovered service\nfrom being visible in other wokspaces like WAAP.",
                "operationId": "ves.io.schema.discovered_service.CustomAPI.DisableVisibility",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceDisableVisibilityResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"shared\"\nx-required\nNamespace of the discovered service for current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Service Name\n\nx-example: \"vs1\"\nx-required\nIdentifies the discovered service name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Service Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceDisableVisibilityRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-discovered_service-customapi-disablevisibility"
                },
                "x-ves-proto-rpc": "ves.io.schema.discovered_service.CustomAPI.DisableVisibility"
            },
            "x-displayname": "Discovered Service Custom API",
            "x-ves-proto-service": "ves.io.schema.discovered_service.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/discovered_services/{name}/enable_visibility": {
            "post": {
                "summary": "Enable visibility in all workspaces",
                "description": "Enable Visibility of the service in all workspaces. This action will make the\ndiscovered service visible within WAAP, App Connect where the user can perform\nthe workspace specific actions.",
                "operationId": "ves.io.schema.discovered_service.CustomAPI.EnableVisibility",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceEnableVisibilityResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"shared\"\nx-required\nNamespace of the discovered service for current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Service Name\n\nx-example: \"vs1\"\nx-required\nIdentifies the discovered service name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Service Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discovered_serviceEnableVisibilityRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-discovered_service-customapi-enablevisibility"
                },
                "x-ves-proto-rpc": "ves.io.schema.discovered_service.CustomAPI.EnableVisibility"
            },
            "x-displayname": "Discovered Service Custom API",
            "x-ves-proto-service": "ves.io.schema.discovered_service.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "discovered_serviceCreateHTTPLoadBalancerRequest": {
            "type": "object",
            "description": "CreateHTTPLoadBalancerRequest",
            "title": "CreateHTTPLoadBalancerRequest",
            "x-displayname": "CreateHTTPLoadBalancerRequest",
            "x-ves-proto-message": "ves.io.schema.discovered_service.CreateHTTPLoadBalancerRequest",
            "properties": {
                "http_lb_request": {
                    "description": " HTTP(s) LB Request\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "HTTPLBRequest",
                    "$ref": "#/definitions/discovered_serviceHTTPLBRequest",
                    "x-displayname": "HTTP(s) LB Request Parameters",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "discovered_serviceCreateHTTPLoadBalancerResponse": {
            "type": "object",
            "description": "CreateHTTPLoadBalancerResponse",
            "title": "CreateHTTPLoadBalancerResponse",
            "x-displayname": "CreateHTTPLoadBalancerResponse",
            "x-ves-proto-message": "ves.io.schema.discovered_service.CreateHTTPLoadBalancerResponse",
            "properties": {
                "http_loadbalancer": {
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                }
            }
        },
        "discovered_serviceCreateTCPLoadBalancerRequest": {
            "type": "object",
            "description": "CreateTCPLoadBalancerRequest",
            "title": "CreateTCPLoadBalancerRequest",
            "x-displayname": "CreateTCPLoadBalancerRequest",
            "x-ves-proto-message": "ves.io.schema.discovered_service.CreateTCPLoadBalancerRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Identifies the discovered service name\n\nExample: - \"vs1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Service Name",
                    "x-displayname": "Service Name",
                    "x-ves-example": "vs1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of the discovered service for current request\n\nExample: - \"shared\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "shared",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "tcp_lb_request": {
                    "description": " TCP LB Request\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "TCPLBRequest",
                    "$ref": "#/definitions/discovered_serviceTCPLBRequest",
                    "x-displayname": "TCP LB Request Parameters",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "discovered_serviceCreateTCPLoadBalancerResponse": {
            "type": "object",
            "description": "CreateTCPLoadBalancerResponse",
            "title": "CreateTCPLoadBalancerResponse",
            "x-displayname": "CreateTCPLoadBalancerResponse",
            "x-ves-proto-message": "ves.io.schema.discovered_service.CreateTCPLoadBalancerResponse",
            "properties": {
                "tcp_loadbalancer": {
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                }
            }
        },
        "discovered_serviceDisableVisibilityRequest": {
            "type": "object",
            "description": "Disable visibility on the discovered service",
            "title": "DisableVisibilityRequest",
            "x-displayname": "Disable visibility on the discovered service",
            "x-ves-proto-message": "ves.io.schema.discovered_service.DisableVisibilityRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Identifies the discovered service name\n\nExample: - \"vs1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Service Name",
                    "x-displayname": "Service Name",
                    "x-ves-example": "vs1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of the discovered service for current request\n\nExample: - \"shared\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "shared",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "discovered_serviceDisableVisibilityResponse": {
            "type": "object",
            "description": "Response to the Disable Visibility request",
            "title": "DisableVisibilityResponse",
            "x-displayname": "Disable Visibility Response",
            "x-ves-proto-message": "ves.io.schema.discovered_service.DisableVisibilityResponse"
        },
        "discovered_serviceEnableVisibilityRequest": {
            "type": "object",
            "description": "Enable visibility of the discovered service in all workspaces like WAAP, App Connect, etc",
            "title": "EnableVisibilityRequest",
            "x-displayname": "Enable visibility",
            "x-ves-proto-message": "ves.io.schema.discovered_service.EnableVisibilityRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Identifies the discovered service name\n\nExample: - \"vs1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Service Name",
                    "x-displayname": "Service Name",
                    "x-ves-example": "vs1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of the discovered service for current request\n\nExample: - \"shared\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "shared",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "discovered_serviceEnableVisibilityResponse": {
            "type": "object",
            "description": "Response to the Enable Visibility request",
            "title": "EnableVisibilityResponse",
            "x-displayname": "Enable Visibility Response",
            "x-ves-proto-message": "ves.io.schema.discovered_service.EnableVisibilityResponse",
            "properties": {
                "virtual_host_ref": {
                    "description": " Reference to the virtual host ",
                    "title": "The virtual host of specific type created as part of the visibility enablement workflow",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Host corresponding to the discovered service"
                }
            }
        },
        "discovered_serviceHTTPLBRequest": {
            "type": "object",
            "description": "HTTP LB Request Parameters",
            "title": "HTTP LB Request",
            "x-displayname": "HTTP(s) LB Request",
            "x-ves-displayorder": "1,2,9,6",
            "x-ves-oneof-field-advertise_choice": "[]",
            "x-ves-oneof-field-loadbalancer_type": "[\"http\",\"https\",\"https_auto_cert\"]",
            "x-ves-oneof-field-server_validation_choice": "[\"skip_server_verification\",\"trusted_ca\"]",
            "x-ves-proto-message": "ves.io.schema.discovered_service.HTTPLBRequest",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "\nExample: - \"www.foo.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.vh_domain: true\n",
                    "title": "Domain",
                    "x-displayname": "Domain",
                    "x-ves-example": "www.foo.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.vh_domain": "true"
                    }
                },
                "http": {
                    "description": "Exclusive with [https https_auto_cert]\n HTTP Load Balancer.",
                    "title": "HTTP",
                    "$ref": "#/definitions/discovered_serviceProxyTypeHttp",
                    "x-displayname": "HTTP"
                },
                "https": {
                    "description": "Exclusive with [http https_auto_cert]\n HTTPS load balancer with a custom public/private certificate.\n This is also known as BYOC (Bring Your Own Certificate).\n User is responsible for managing DNS to this load balancer.",
                    "title": "HTTPS",
                    "$ref": "#/definitions/discovered_serviceProxyTypeHttps",
                    "x-displayname": "HTTPS with Custom Certificate"
                },
                "https_auto_cert": {
                    "description": "Exclusive with [http https]\n HTTPS load balancer with automatic public certificate provisioning.\n DNS records for the domains will be automatically managed by F5 Distributed Cloud.\n As a prerequisite, the domain must be delegated to F5 Distributed Cloud (see the DNS Management section)\n or a DNS CNAME record should be created in your DNS provider's portal(only for Domains not managed by F5 Distributed Cloud).",
                    "title": "HTTPS with AutoCert",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "HTTPS with Automatic Certificate"
                },
                "name": {
                    "type": "string",
                    "description": " The configuration object will be created with name. It has to be unique within the namespace.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "skip_server_verification": {
                    "description": "Exclusive with [trusted_ca]\n Skip origin server verification",
                    "title": "Skip Server Verification",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Skip Verification"
                },
                "trusted_ca": {
                    "description": "Exclusive with [skip_server_verification]\n Select/Add a Root CA Certificate object to associate with this Origin Pool for verification of server's certificate",
                    "title": "trusted_ca",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Root CA Certificate"
                }
            }
        },
        "discovered_serviceListServicesResponse": {
            "type": "object",
            "description": "This is the output message of List for specific service type.",
            "title": "ListServicesResponse is the collection of discovered service",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.discovered_service.ListServicesResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/discovered_serviceListServicesResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "discovered_serviceListServicesResponseItem": {
            "type": "object",
            "description": "By default a summary of discovered services is returned in 'List'. By setting\n'report_fields' in the ListServicesRequest more details of each item can be got.",
            "title": "ListServicesResponseItem is an individual item in a collection of discovered services of specific type",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.discovered_service.ListServicesResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this discovered service",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this discovered service",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates discovered service is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListServicesRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/schemadiscovered_serviceGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this discovered service",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this discovered service\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "status_set": {
                    "type": "array",
                    "description": " The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/discovered_serviceStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this discovered service\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "discovered_serviceProxyTypeHttp": {
            "type": "object",
            "description": "Choice for selecting HTTP proxy",
            "title": "HTTP Choice",
            "x-displayname": "HTTP",
            "x-ves-oneof-field-advertise_choice": "[\"advertise_on_public_default_vip\",\"site\",\"virtual_site\"]",
            "x-ves-proto-message": "ves.io.schema.discovered_service.ProxyTypeHttp",
            "properties": {
                "advertise_on_public_default_vip": {
                    "description": "Exclusive with [site virtual_site]\n Advertise this load balancer on public network with default VIP",
                    "title": "Advertise On Public Default VIP",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Internet"
                },
                "site": {
                    "description": "Exclusive with [advertise_on_public_default_vip virtual_site]\n Advertise on a customer site",
                    "title": "Advertise on Site",
                    "$ref": "#/definitions/schemadiscovered_serviceWhereSite",
                    "x-displayname": "Site"
                },
                "virtual_site": {
                    "description": "Exclusive with [advertise_on_public_default_vip site]\n Advertise on a virtual site",
                    "title": "Advertise on Virtual Site",
                    "$ref": "#/definitions/schemadiscovered_serviceWhereVirtualSite",
                    "x-displayname": "Virtual Site"
                }
            }
        },
        "discovered_serviceProxyTypeHttps": {
            "type": "object",
            "description": "Choice for selecting HTTP proxy with bring your own certificate",
            "title": "BYOC HTTPS Choice",
            "x-displayname": "BYOC HTTPS Choice",
            "x-ves-oneof-field-advertise_choice": "[\"advertise_on_public_default_vip\",\"site\",\"virtual_site\"]",
            "x-ves-proto-message": "ves.io.schema.discovered_service.ProxyTypeHttps",
            "properties": {
                "advertise_on_public_default_vip": {
                    "description": "Exclusive with [site virtual_site]\n Advertise this load balancer on public network with default VIP",
                    "title": "Advertise On Public Default VIP",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Internet"
                },
                "certificates": {
                    "type": "array",
                    "description": " Select a certificate\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "TLS Certificate",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "TLS Certificate",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "site": {
                    "description": "Exclusive with [advertise_on_public_default_vip virtual_site]\n Advertise on a customer site and Inside network",
                    "title": "Advertise on Site",
                    "$ref": "#/definitions/schemadiscovered_serviceWhereSite",
                    "x-displayname": "Site"
                },
                "virtual_site": {
                    "description": "Exclusive with [advertise_on_public_default_vip site]\n Advertise on a virtual site and Inside network",
                    "title": "Advertise on Virtual Site",
                    "$ref": "#/definitions/schemadiscovered_serviceWhereVirtualSite",
                    "x-displayname": "Virtual Site"
                }
            }
        },
        "discovered_serviceStatusObject": {
            "type": "object",
            "description": "Most recently observed status of object",
            "title": "Discovered Services Status Object",
            "x-displayname": "Discovered Services Status Object",
            "x-ves-proto-message": "ves.io.schema.discovered_service.StatusObject",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": " Conditions",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                }
            }
        },
        "discovered_serviceTCPLBRequest": {
            "type": "object",
            "description": "TCP LB Request",
            "title": "TCP LB Request",
            "x-displayname": "TCP LB Request",
            "x-ves-displayorder": "1,2,3,6,9",
            "x-ves-oneof-field-advertise_choice": "[\"advertise_custom\",\"advertise_on_public_default_vip\"]",
            "x-ves-oneof-field-port_choice": "[\"listen_port\",\"port_ranges\"]",
            "x-ves-oneof-field-sni_default_lb_choice": "[\"no_sni\",\"sni\"]",
            "x-ves-proto-message": "ves.io.schema.discovered_service.TCPLBRequest",
            "properties": {
                "advertise_custom": {
                    "description": "Exclusive with [advertise_on_public_default_vip]\n Advertise this load balancer on specific sites",
                    "title": "Advertise Custom",
                    "$ref": "#/definitions/viewsAdvertiseCustom",
                    "x-displayname": "Custom"
                },
                "advertise_on_public_default_vip": {
                    "description": "Exclusive with [advertise_custom]\n Advertise this load balancer on public network with default VIP",
                    "title": "Advertise On Public Default VIP",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Internet"
                },
                "domain": {
                    "type": "string",
                    "description": "\nExample: - \"www.foo.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.vh_domain: true\n",
                    "title": "Domain",
                    "x-displayname": "Domain",
                    "x-ves-example": "www.foo.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.vh_domain": "true"
                    }
                },
                "listen_port": {
                    "type": "integer",
                    "description": "Exclusive with [port_ranges]\n Listen Port for this load balancer\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Port",
                    "format": "int64",
                    "x-displayname": "Listen Port",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "name": {
                    "type": "string",
                    "description": " The configuration object will be created with name. It has to be unique within the namespace.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "no_sni": {
                    "description": "Exclusive with [sni]\n Loadbalancer without Server Name Indication support",
                    "title": "No SNI",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "No SNI"
                },
                "port_ranges": {
                    "type": "string",
                    "description": "Exclusive with [listen_port]\n A string containing a comma separated list of port ranges.\n Each port range consists of a single port or two ports separated by \"-\".\n\nExample: - \"80,443,8080-8191,9080\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 512\n  ves.io.schema.rules.string.max_ports: 64\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.unique_port_range_list: true\n",
                    "title": "Port_ranges",
                    "minLength": 1,
                    "maxLength": 512,
                    "x-displayname": "Port Ranges",
                    "x-ves-example": "80,443,8080-8191,9080",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "512",
                        "ves.io.schema.rules.string.max_ports": "64",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.unique_port_range_list": "true"
                    }
                },
                "sni": {
                    "description": "Exclusive with [no_sni]\n Enables Server Name Indication for Loadbalancer",
                    "title": "With SNI",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "SNI"
                }
            }
        },
        "discovered_serviceTransmissionProtocol": {
            "type": "string",
            "description": "x-displayName: \"Transmission Protocol\"\nx-example: \"TCP\"\nProtocol on which the virtual-server will transmit data",
            "title": "TransmissionProtocol",
            "enum": [
                "UNDEFINED",
                "HTTP",
                "HTTPS",
                "TCP"
            ],
            "default": "UNDEFINED"
        },
        "discovered_serviceVirtualServer": {
            "type": "object",
            "description": "Virtual Server discovered from BIG-IP.",
            "title": "virtual_server",
            "x-displayname": "Virtual Server",
            "x-ves-proto-message": "ves.io.schema.discovered_service.VirtualServer",
            "properties": {
                "bigip_version": {
                    "type": "string",
                    "description": " Version of the BIG-IP from where the service was discovered\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "BIG-IP version",
                    "maxLength": 256,
                    "x-displayname": "BIG-IP Version",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "cbip_cluster": {
                    "type": "string",
                    "description": " Name of CBIP Cluster.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "CBIP Cluster Name",
                    "maxLength": 256,
                    "x-displayname": "CBIP Cluster Name",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "discovery_object": {
                    "description": " Reference to the Discovery Object.",
                    "title": "discovery_object",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Reference to Discovery Object"
                },
                "enabled_state": {
                    "description": " Enabled State of virtual server.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Enabled State of virtual server",
                    "$ref": "#/definitions/discovered_serviceVirtualServerEnabledState",
                    "x-displayname": "Enabled State",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "ip_address": {
                    "type": "string",
                    "description": " IP address of the BIG-IP Virtual Server\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ip: true\n",
                    "title": "Virtual Server IP Address",
                    "x-displayname": "Virtual Server IP",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ip": "true"
                    }
                },
                "partition": {
                    "type": "string",
                    "description": " Partition of virtual-server\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "partition",
                    "maxLength": 256,
                    "x-displayname": "Partition",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "port": {
                    "type": "integer",
                    "description": " Port number on which the virtual-server is exposed\n\nExample: - \"8080\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Port",
                    "format": "int64",
                    "x-displayname": "Port number",
                    "x-ves-example": "8080",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "server_name": {
                    "type": "string",
                    "description": " Virtual Server name\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 1024\n",
                    "title": "Server Name",
                    "maxLength": 1024,
                    "x-displayname": "Server Name",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "1024"
                    }
                },
                "status": {
                    "description": " Availability Status of virtual server.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Availability Status of virtual server",
                    "$ref": "#/definitions/discovered_serviceVirtualServerStatus",
                    "x-displayname": "Status",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "discovered_serviceVirtualServerEnabledState": {
            "type": "string",
            "description": "Enabled state of the virtual server.\n\n - NONE: NONE\n\nInvalid state.\n - ENABLED: ENABLED\n\nVirtual Server is enabled.\n - DISABLED: DISABLED\n\nVirtual Server is administratively disabled.",
            "title": "Enabled state of the virtual server",
            "enum": [
                "NONE",
                "ENABLED",
                "DISABLED"
            ],
            "default": "NONE",
            "x-displayname": "Virtual Server Enabled State",
            "x-ves-proto-enum": "ves.io.schema.discovered_service.VirtualServerEnabledState"
        },
        "discovered_serviceVirtualServerStatus": {
            "type": "string",
            "description": "Availability Status of the virtual server.\n\n - UNSPECIFIED: UNSPECIFIED\n\nInvalid status.\n - AVAILABLE: AVAILABLE\n\nVirtual Server is available and serving traffic.\n - OFFLINE: OFFLINE\n\nVirtual Server is not serving traffic.\n - UNKNOWN: UNKNOWN\n\nVirtual Server availability is unknown. It can indicate that no service checks are enabled on the virtual server.\n - UNAVAILABLE: UNAVAILABLE\n\nVirtual Server is temporarily unavailable maybe due to hitting connection limit.\n - DELETED: DELETED\n\nVirtual Server has been deleted on the BIG-IP but is in use on Distributed Cloud.",
            "title": "Availability Status of the virtual server",
            "enum": [
                "UNSPECIFIED",
                "AVAILABLE",
                "OFFLINE",
                "UNKNOWN",
                "UNAVAILABLE",
                "DELETED"
            ],
            "default": "UNSPECIFIED",
            "x-displayname": "Virtual Server Availability Status",
            "x-ves-proto-enum": "ves.io.schema.discovered_service.VirtualServerStatus"
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed.\n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]\n",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]"
                    }
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Validation\\\",\\\"Operational\\\"]\n",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Validation\\\",\\\"Operational\\\"]"
                    }
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error\n - EPARTIAL: Partial error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL",
                "EPARTIAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status\n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Origin of this status exchanged by VTRP.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do Not Publish\n\nDo not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Publish\n\nPropagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Status Publish Type",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n\n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n\n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the operator or software. Values here can be interpreted\n by software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).\n\nExample: - \"'ves.io/soft-deleted''true'\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "'ves.io/soft-deleted': 'true'"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemadiscovered_serviceGetSpecType": {
            "type": "object",
            "description": "Get Discovered Service Object.",
            "title": "Get Discovered Service Object",
            "x-displayname": "Get Discovered Service Object",
            "x-ves-oneof-field-service_type": "[\"virtual_server\"]",
            "x-ves-oneof-field-visibility_action_choice": "[\"visibility_disabled\",\"visibility_enabled\"]",
            "x-ves-proto-message": "ves.io.schema.discovered_service.GetSpecType",
            "properties": {
                "http_load_balancers": {
                    "type": "array",
                    "description": " List of references to HTTP Load Balancers using this service",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "HTTP Load Balancers"
                },
                "tcp_load_balancers": {
                    "type": "array",
                    "description": " List of references to TCP Load Balancers using this service",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "TCP Load Balancers"
                },
                "virtual_server": {
                    "description": "Exclusive with []\n Details of virtual server discovered by Discovered Services ",
                    "$ref": "#/definitions/discovered_serviceVirtualServer",
                    "x-displayname": "Virtual Server"
                },
                "visibility_disabled": {
                    "description": "Exclusive with [visibility_enabled]\n Option for disabling visibility across workspaces",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Visibility Disabled"
                },
                "visibility_enabled": {
                    "description": "Exclusive with [visibility_disabled]\n Option for enabling Visibility across workspaces",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Visibility Enabled"
                }
            }
        },
        "schemadiscovered_serviceWhereSite": {
            "type": "object",
            "description": "This defines a reference to a CE site where a load balancer could be advertised",
            "title": "WhereSite",
            "x-displayname": "Site",
            "x-ves-proto-message": "ves.io.schema.discovered_service.WhereSite",
            "properties": {
                "site": {
                    "type": "array",
                    "description": " Reference to site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "Site",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                }
            }
        },
        "schemadiscovered_serviceWhereVirtualSite": {
            "type": "object",
            "description": "This defines a reference to a customer site virtual site where a load balancer could be advertised",
            "title": "WhereVirtualSite",
            "x-displayname": "Virtual Site",
            "x-ves-proto-message": "ves.io.schema.discovered_service.WhereVirtualSite",
            "properties": {
                "virtual_site": {
                    "type": "array",
                    "description": " Reference to virtual site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "Virtual Site",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Virtual Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 128\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "name",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "128",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "namespace",
                    "maxLength": 64,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "tenant",
                    "maxLength": 64,
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                }
            }
        },
        "schemaviewsWhereSite": {
            "type": "object",
            "description": "This defines a reference to a CE site along with network type and an optional ip address where a load balancer could be advertised",
            "title": "WhereSite",
            "x-displayname": "Site",
            "x-ves-displayorder": "1,2,3",
            "x-ves-proto-message": "ves.io.schema.views.WhereSite",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the site\n\nExample: - \"8.8.8.8\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the site",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the site\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the site",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "network": {
                    "description": " Select network types to be used on site\n By default VIP chosen as ip address of primary network interface in the network\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Network",
                    "$ref": "#/definitions/viewsSiteNetwork",
                    "x-displayname": "Network",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "site": {
                    "description": " Reference to site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "schemaviewsWhereVirtualSite": {
            "type": "object",
            "description": "This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised",
            "title": "WhereVirtualSite",
            "x-displayname": "Virtual Site",
            "x-ves-displayorder": "1,2",
            "x-ves-proto-message": "ves.io.schema.views.WhereVirtualSite",
            "properties": {
                "network": {
                    "description": " Select network types to be used on site.\n IP address of primary network interface in the network\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Network",
                    "$ref": "#/definitions/viewsSiteNetwork",
                    "x-displayname": "Network",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "virtual_site": {
                    "description": " Reference to virtual site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsAdvertiseCustom": {
            "type": "object",
            "description": "This defines a way to advertise a VIP on specific sites",
            "title": "AdvertiseWhere",
            "x-displayname": "Advertise Custom",
            "x-ves-proto-message": "ves.io.schema.views.AdvertiseCustom",
            "properties": {
                "advertise_where": {
                    "type": "array",
                    "description": " Where should this load balancer be available\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Advertise Where",
                    "minItems": 1,
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/viewsWhereType"
                    },
                    "x-displayname": "List of Sites to Advertise",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "viewsAdvertisePublic": {
            "type": "object",
            "description": "This defines a way to advertise a load balancer on public. If optional public_ip is provided, it will only be advertised on RE sites where that public_ip is available",
            "title": "AdvertisePublic",
            "x-displayname": "Advertise Public",
            "x-ves-proto-message": "ves.io.schema.views.AdvertisePublic",
            "properties": {
                "public_ip": {
                    "description": " Dedicated Public IP, which is allocated by F5 Distributed Cloud on request, is used as a VIP.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Public IP",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Public IP",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsSiteNetwork": {
            "type": "string",
            "description": "This defines network types to be used on site\n\nAll inside and outside networks.\nAll inside and outside networks with internet VIP support.\nAll inside networks.\nAll outside networks.\nAll outside networks with internet VIP support.\nvK8s service network.\n - SITE_NETWORK_IP_FABRIC: VER IP Fabric network for the site\n\nThis Virtual network type is used for exposing virtual host on IP Fabric network on the VER site or\nfor endpoint in IP Fabric network",
            "title": "SiteNetwork",
            "enum": [
                "SITE_NETWORK_INSIDE_AND_OUTSIDE",
                "SITE_NETWORK_INSIDE",
                "SITE_NETWORK_OUTSIDE",
                "SITE_NETWORK_SERVICE",
                "SITE_NETWORK_OUTSIDE_WITH_INTERNET_VIP",
                "SITE_NETWORK_INSIDE_AND_OUTSIDE_WITH_INTERNET_VIP",
                "SITE_NETWORK_IP_FABRIC"
            ],
            "default": "SITE_NETWORK_INSIDE_AND_OUTSIDE",
            "x-displayname": "Site Network",
            "x-ves-proto-enum": "ves.io.schema.views.SiteNetwork"
        },
        "viewsSiteNetworkSpecifiedVIP": {
            "type": "string",
            "description": "This defines network types to be used on virtual-site with specified VIP\n\nAll outside networks.\nAll inside networks.",
            "title": "SiteNetworkSpecifiedVIP",
            "enum": [
                "SITE_NETWORK_SPECIFIED_VIP_OUTSIDE",
                "SITE_NETWORK_SPECIFIED_VIP_INSIDE"
            ],
            "default": "SITE_NETWORK_SPECIFIED_VIP_OUTSIDE",
            "x-displayname": "Site Network",
            "x-ves-proto-enum": "ves.io.schema.views.SiteNetworkSpecifiedVIP"
        },
        "viewsWhereCloudEdgeSegment": {
            "type": "object",
            "description": "This defines a reference to a Segment on a Cloud Edge and an optional ip address where a load balancer could be advertised",
            "title": "WhereCloudEdgeSegment",
            "x-displayname": "Segment on a Cloud Edge",
            "x-ves-displayorder": "1,2,3,4",
            "x-ves-proto-message": "ves.io.schema.views.WhereCloudEdgeSegment",
            "properties": {
                "cloud_edge": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Cloud Edge",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the Cloud Edge\n\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the Cloud Edge",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the Cloud Edge\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the Cloud Edge",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "segment": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Segment",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereSegment": {
            "type": "object",
            "description": "Parameters to advertise on a given virtual network",
            "title": "WhereVirtualNetwork",
            "x-displayname": "Virtual Network",
            "x-ves-displayorder": "1,2,10",
            "x-ves-proto-message": "ves.io.schema.views.WhereSegment",
            "properties": {
                "ipv4_vip": {
                    "type": "string",
                    "description": " Configure IPV4 VIP address\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IPv4 VIP",
                    "x-displayname": "IPV4 VIP",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6_vip": {
                    "type": "string",
                    "description": " Configure IPV6 VIP address\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 VIP",
                    "x-displayname": "IPV6 VIP",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "segment": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Segment",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereSiteSegment": {
            "type": "object",
            "description": "This defines a reference to a Segment on a Site and an optional ip address where a load balancer could be advertised",
            "title": "WhereSiteSegment",
            "x-displayname": "Segment on Site",
            "x-ves-displayorder": "1,2,3,4",
            "x-ves-proto-message": "ves.io.schema.views.WhereSiteSegment",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the site\n\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the site",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the site\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the site",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "segment": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Segment",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "site": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Site",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereType": {
            "type": "object",
            "description": "This defines various options where a Loadbalancer could be advertised",
            "title": "WhereType",
            "x-displayname": "Select Where to Advertise",
            "x-ves-displayorder": "4,5",
            "x-ves-oneof-field-choice": "[\"advertise_on_public\",\"cloud_edge_segment\",\"segment\",\"site\",\"site_segment\",\"virtual_network\",\"virtual_site\",\"virtual_site_segment\",\"virtual_site_with_vip\",\"vk8s_service\"]",
            "x-ves-oneof-field-port_choice": "[\"port\",\"port_ranges\",\"use_default_port\"]",
            "x-ves-proto-message": "ves.io.schema.views.WhereType",
            "properties": {
                "advertise_on_public": {
                    "description": "Exclusive with [cloud_edge_segment segment site site_segment virtual_network virtual_site virtual_site_segment virtual_site_with_vip vk8s_service]\n Advertise this load balancer on public network",
                    "title": "Advertise On Public",
                    "$ref": "#/definitions/viewsAdvertisePublic",
                    "x-displayname": "Internet (Specified VIP)"
                },
                "cloud_edge_segment": {
                    "description": "Exclusive with [advertise_on_public segment site site_segment virtual_network virtual_site virtual_site_segment virtual_site_with_vip vk8s_service]\n Advertise on a segment on a Cloud Edge",
                    "title": "Segment on Cloud Edge",
                    "$ref": "#/definitions/viewsWhereCloudEdgeSegment",
                    "x-displayname": "Segment on Cloud Edge"
                },
                "port": {
                    "type": "integer",
                    "description": "Exclusive with [port_ranges use_default_port]\n Port to Listen.\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "Port to listen",
                    "format": "int64",
                    "x-displayname": "Listen Port",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "port_ranges": {
                    "type": "string",
                    "description": "Exclusive with [port use_default_port]\n A string containing a comma separated list of port ranges.\n Each port range consists of a single port or two ports separated by \"-\".\n\nExample: - \"80,443,8080-8191,9080\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 512\n  ves.io.schema.rules.string.max_ports: 64\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.unique_port_range_list: true\n",
                    "title": "Port ranges to listen",
                    "minLength": 1,
                    "maxLength": 512,
                    "x-displayname": "Listen Port Ranges",
                    "x-ves-example": "80,443,8080-8191,9080",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "512",
                        "ves.io.schema.rules.string.max_ports": "64",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.unique_port_range_list": "true"
                    }
                },
                "segment": {
                    "description": "Exclusive with [advertise_on_public cloud_edge_segment site site_segment virtual_network virtual_site virtual_site_segment virtual_site_with_vip vk8s_service]\n Advertise on a segment",
                    "title": "Segment",
                    "$ref": "#/definitions/viewsWhereSegment",
                    "x-displayname": "Segment"
                },
                "site": {
                    "description": "Exclusive with [advertise_on_public cloud_edge_segment segment site_segment virtual_network virtual_site virtual_site_segment virtual_site_with_vip vk8s_service]\n Advertise on a customer site and a given network.",
                    "title": "Site",
                    "$ref": "#/definitions/schemaviewsWhereSite",
                    "x-displayname": "Site"
                },
                "site_segment": {
                    "description": "Exclusive with [advertise_on_public cloud_edge_segment segment site virtual_network virtual_site virtual_site_segment virtual_site_with_vip vk8s_service]\n Advertise on a segment on a site",
                    "title": "Segment on Site",
                    "$ref": "#/definitions/viewsWhereSiteSegment",
                    "x-displayname": "Segment on Site"
                },
                "use_default_port": {
                    "description": "Exclusive with [port port_ranges]\n Inherit the Load Balancer's Listen Port.",
                    "title": "Use Default port",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Use Default Listen Port"
                },
                "virtual_network": {
                    "description": "Exclusive with [advertise_on_public cloud_edge_segment segment site site_segment virtual_site virtual_site_segment virtual_site_with_vip vk8s_service]\n Advertise on a virtual network",
                    "title": "Virtual Network",
                    "$ref": "#/definitions/viewsWhereVirtualNetwork",
                    "x-displayname": "Virtual Network"
                },
                "virtual_site": {
                    "description": "Exclusive with [advertise_on_public cloud_edge_segment segment site site_segment virtual_network virtual_site_segment virtual_site_with_vip vk8s_service]\n Advertise on a customer virtual site and a given network.",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsWhereVirtualSite",
                    "x-displayname": "Virtual Site"
                },
                "virtual_site_segment": {
                    "description": "Exclusive with [advertise_on_public cloud_edge_segment segment site site_segment virtual_network virtual_site virtual_site_with_vip vk8s_service]\n Advertise on a segment on a virtual site",
                    "title": "Segment on Virtual Site",
                    "$ref": "#/definitions/viewsWhereVirtualSiteSegment",
                    "x-displayname": "Segment on Virtual Site"
                },
                "virtual_site_with_vip": {
                    "description": "Exclusive with [advertise_on_public cloud_edge_segment segment site site_segment virtual_network virtual_site virtual_site_segment vk8s_service]\n Advertise on a customer virtual site and a given network and IP.",
                    "title": "Virtual Site With Specified VIP",
                    "$ref": "#/definitions/viewsWhereVirtualSiteSpecifiedVIP",
                    "x-displayname": "Virtual Site (Specified VIP)"
                },
                "vk8s_service": {
                    "description": "Exclusive with [advertise_on_public cloud_edge_segment segment site site_segment virtual_network virtual_site virtual_site_segment virtual_site_with_vip]\n Advertise on vK8s Service Network on RE.",
                    "title": "vK8s services network",
                    "$ref": "#/definitions/viewsWhereVK8SService",
                    "x-displayname": "vK8s Service Network on RE"
                }
            }
        },
        "viewsWhereVK8SService": {
            "type": "object",
            "description": "This defines a reference to a RE site or virtual site where a load balancer could be advertised in the vK8s service network",
            "title": "WhereVK8SService",
            "x-displayname": "vK8s Services on RE",
            "x-ves-displayorder": "3",
            "x-ves-oneof-field-choice": "[\"site\",\"virtual_site\"]",
            "x-ves-proto-message": "ves.io.schema.views.WhereVK8SService",
            "properties": {
                "site": {
                    "description": "Exclusive with [virtual_site]\n Reference to site object",
                    "title": "RE Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "RE Reference"
                },
                "virtual_site": {
                    "description": "Exclusive with [site]\n Reference to virtual site object",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Site Reference"
                }
            }
        },
        "viewsWhereVirtualNetwork": {
            "type": "object",
            "description": "Parameters to advertise on a given virtual network",
            "title": "WhereVirtualNetwork",
            "x-displayname": "Virtual Network",
            "x-ves-displayorder": "1,2,10",
            "x-ves-oneof-field-v6_vip_choice": "[\"default_v6_vip\",\"specific_v6_vip\"]",
            "x-ves-oneof-field-vip_choice": "[\"default_vip\",\"specific_vip\"]",
            "x-ves-proto-message": "ves.io.schema.views.WhereVirtualNetwork",
            "properties": {
                "default_v6_vip": {
                    "description": "Exclusive with [specific_v6_vip]\n Use the default VIP, system allocated or configured in the virtual network",
                    "title": "Default V6 VIP for virtual Network",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Default V6 VIP"
                },
                "default_vip": {
                    "description": "Exclusive with [specific_vip]\n Use the default VIP, system allocated or configured in the virtual network",
                    "title": "Default V4 VIP for Virtual Network",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Default V4 VIP"
                },
                "specific_v6_vip": {
                    "type": "string",
                    "description": "Exclusive with [default_v6_vip]\n Use given IPV6 address as VIP on virtual Network\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "Specific V6 VIP",
                    "x-displayname": "Specific V6 VIP",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "specific_vip": {
                    "type": "string",
                    "description": "Exclusive with [default_vip]\n Use given IPV4 address as VIP on virtual Network\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "Specific VIP",
                    "x-displayname": "Specific V4 VIP",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "virtual_network": {
                    "description": " Select network reference\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Network",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Network",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereVirtualSiteSegment": {
            "type": "object",
            "description": "This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised",
            "title": "WhereVirtualSiteSegment",
            "x-displayname": "Virtual Site",
            "x-ves-displayorder": "1,2,3,4",
            "x-ves-proto-message": "ves.io.schema.views.WhereVirtualSiteSegment",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the site\n\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the site",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the site\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the site",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "segment": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Segment",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "virtual_site": {
                    "description": " Reference to virtual site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereVirtualSiteSpecifiedVIP": {
            "type": "object",
            "description": "This defines a reference to a customer site virtual site along with network type and IP where a load balancer could be advertised",
            "title": "WhereVirtualSiteSpecifiedVIP",
            "x-displayname": "Virtual Site with Specified VIP",
            "x-ves-proto-message": "ves.io.schema.views.WhereVirtualSiteSpecifiedVIP",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the site\n\nExample: - \"8.8.8.8\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the site",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the site\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the site",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "network": {
                    "description": " Select network types to be used on site.\n IP address of primary network interface in the network\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Network",
                    "$ref": "#/definitions/viewsSiteNetworkSpecifiedVIP",
                    "x-displayname": "Network",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "virtual_site": {
                    "description": " Reference to virtual site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        }
    },
    "x-displayname": "Discovered Services",
    "x-ves-proto-file": "ves.io/schema/discovered_service/public_customapi.proto"
}`

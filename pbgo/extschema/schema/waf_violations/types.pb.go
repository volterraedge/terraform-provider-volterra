// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/waf_violations/types.proto

package waf_violations

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Violation Default Settings
//
// x-displayName: "Violation Default Settings"
// Configuration of violations default settings
type ViolationDefaultSettings struct {
	// violation name
	//
	// x-displayName: "Violation Name"
	// x-example: "VIOL_EVASION_IIS_UNICODE_CODEPOINTS"
	// x-required
	// violation name
	Name app_firewall.AppFirewallViolationType `protobuf:"varint,1,opt,name=name,proto3,enum=ves.io.schema.app_firewall.AppFirewallViolationType" json:"name,omitempty"`
	// violation title
	//
	// x-displayName: "Violation title"
	// x-example: "IIS Unicode Codepoints"
	// x-required
	// violation title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// violation description
	//
	// x-displayName: "Violation Description"
	// violation description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// State
	//
	// x-displayName: "State"
	// x-example: "Enabled"
	// x-required
	//
	// Types that are valid to be assigned to DefaultStateChoice:
	//	*ViolationDefaultSettings_Enabled
	//	*ViolationDefaultSettings_Disabled
	DefaultStateChoice isViolationDefaultSettings_DefaultStateChoice `protobuf_oneof:"default_state_choice"`
	// indication whether the violation is internal or not
	//
	// x-displayName: "Indication whether the violation is internal or not"
	// indication whether the violation is internal or not
	IsInternal bool `protobuf:"varint,7,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
}

func (m *ViolationDefaultSettings) Reset()      { *m = ViolationDefaultSettings{} }
func (*ViolationDefaultSettings) ProtoMessage() {}
func (*ViolationDefaultSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cb1e6a0267884e3, []int{0}
}
func (m *ViolationDefaultSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViolationDefaultSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViolationDefaultSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViolationDefaultSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViolationDefaultSettings.Merge(m, src)
}
func (m *ViolationDefaultSettings) XXX_Size() int {
	return m.Size()
}
func (m *ViolationDefaultSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ViolationDefaultSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ViolationDefaultSettings proto.InternalMessageInfo

type isViolationDefaultSettings_DefaultStateChoice interface {
	isViolationDefaultSettings_DefaultStateChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ViolationDefaultSettings_Enabled struct {
	Enabled *schema.Empty `protobuf:"bytes,5,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}
type ViolationDefaultSettings_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,6,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}

func (*ViolationDefaultSettings_Enabled) isViolationDefaultSettings_DefaultStateChoice()  {}
func (*ViolationDefaultSettings_Disabled) isViolationDefaultSettings_DefaultStateChoice() {}

func (m *ViolationDefaultSettings) GetDefaultStateChoice() isViolationDefaultSettings_DefaultStateChoice {
	if m != nil {
		return m.DefaultStateChoice
	}
	return nil
}

func (m *ViolationDefaultSettings) GetName() app_firewall.AppFirewallViolationType {
	if m != nil {
		return m.Name
	}
	return app_firewall.VIOL_NONE
}

func (m *ViolationDefaultSettings) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ViolationDefaultSettings) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ViolationDefaultSettings) GetEnabled() *schema.Empty {
	if x, ok := m.GetDefaultStateChoice().(*ViolationDefaultSettings_Enabled); ok {
		return x.Enabled
	}
	return nil
}

func (m *ViolationDefaultSettings) GetDisabled() *schema.Empty {
	if x, ok := m.GetDefaultStateChoice().(*ViolationDefaultSettings_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *ViolationDefaultSettings) GetIsInternal() bool {
	if m != nil {
		return m.IsInternal
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ViolationDefaultSettings) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ViolationDefaultSettings_Enabled)(nil),
		(*ViolationDefaultSettings_Disabled)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Violations default settings Specification"
type GlobalSpecType struct {
	// violations default settings
	//
	// x-displayName: "Violations default settings"
	// List of violation types and their default settings
	Violations []*ViolationDefaultSettings `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cb1e6a0267884e3, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetViolations() []*ViolationDefaultSettings {
	if m != nil {
		return m.Violations
	}
	return nil
}

// Create default WAF Violations
//
// x-displayName: "Create default WAF Violations"
// CreateSpecType will create List of violation types and their default settings
type CreateSpecType struct {
	Violations []*ViolationDefaultSettings `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cb1e6a0267884e3, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetViolations() []*ViolationDefaultSettings {
	if m != nil {
		return m.Violations
	}
	return nil
}

// Replace default WAF Violations
//
// x-displayName: "Replace default WAF Violations"
// Update the configuration by replacing the existing spec with the provided one.
type ReplaceSpecType struct {
	Violations []*ViolationDefaultSettings `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cb1e6a0267884e3, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetViolations() []*ViolationDefaultSettings {
	if m != nil {
		return m.Violations
	}
	return nil
}

// Get default WAF Violations
//
// x-displayName: "Get default WAF Violations"
// GetSpecType will read List of violation types and their default settings
type GetSpecType struct {
	Violations []*ViolationDefaultSettings `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cb1e6a0267884e3, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetViolations() []*ViolationDefaultSettings {
	if m != nil {
		return m.Violations
	}
	return nil
}

func init() {
	proto.RegisterType((*ViolationDefaultSettings)(nil), "ves.io.schema.waf_violations.ViolationDefaultSettings")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.waf_violations.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.waf_violations.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.waf_violations.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.waf_violations.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/waf_violations/types.proto", fileDescriptor_7cb1e6a0267884e3)
}

var fileDescriptor_7cb1e6a0267884e3 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xbf, 0x6f, 0xd3, 0x4e,
	0x14, 0xf7, 0x35, 0x49, 0xdb, 0xef, 0x45, 0x6a, 0xfb, 0xb5, 0x32, 0x98, 0x52, 0x1d, 0x56, 0x06,
	0xf0, 0x40, 0x6d, 0x14, 0xa0, 0x03, 0x03, 0x12, 0xe5, 0x47, 0x0b, 0xa3, 0x8b, 0x3a, 0xb0, 0x58,
	0x67, 0xfb, 0xc5, 0x3d, 0x71, 0xf1, 0x9d, 0xec, 0x4b, 0xda, 0x0a, 0x84, 0x18, 0x19, 0x11, 0x7f,
	0x05, 0x7f, 0x03, 0x5d, 0x3a, 0x22, 0xa6, 0x88, 0xa9, 0x23, 0x71, 0x16, 0xd8, 0xfa, 0x27, 0x20,
	0xec, 0x24, 0xd8, 0x11, 0x74, 0x42, 0xea, 0xf6, 0xde, 0x7d, 0x3e, 0xef, 0xf3, 0xb9, 0xf7, 0x7c,
	0xcf, 0xd8, 0x1a, 0x40, 0x6a, 0x33, 0xe1, 0xa4, 0xc1, 0x01, 0xf4, 0xa8, 0x73, 0x48, 0xbb, 0xde,
	0x80, 0x09, 0x4e, 0x15, 0x13, 0x71, 0xea, 0xa8, 0x63, 0x09, 0xa9, 0x2d, 0x13, 0xa1, 0x84, 0xbe,
	0x51, 0x30, 0xed, 0x82, 0x69, 0x57, 0x99, 0xeb, 0x9b, 0x11, 0x53, 0x07, 0x7d, 0xdf, 0x0e, 0x44,
	0xcf, 0x89, 0x44, 0x24, 0x9c, 0xbc, 0xc8, 0xef, 0x77, 0xf3, 0x2c, 0x4f, 0xf2, 0xa8, 0x10, 0x5b,
	0xbf, 0x5e, 0xb5, 0xa5, 0x52, 0x7a, 0x5d, 0x96, 0xc0, 0x21, 0xe5, 0xbc, 0x6c, 0xba, 0x7e, 0xb5,
	0xca, 0x13, 0x32, 0x77, 0x9b, 0x80, 0x57, 0xaa, 0x60, 0xb9, 0x6e, 0xa3, 0x0a, 0x0d, 0x28, 0x67,
	0x21, 0x55, 0x30, 0x41, 0xcd, 0x39, 0x94, 0xc1, 0xa1, 0x57, 0x91, 0x6e, 0x7f, 0x5d, 0xc0, 0xc6,
	0xfe, 0xb4, 0xbb, 0x47, 0xd0, 0xa5, 0x7d, 0xae, 0xf6, 0x40, 0x29, 0x16, 0x47, 0xa9, 0xbe, 0x8b,
	0xeb, 0x31, 0xed, 0x81, 0x81, 0x4c, 0x64, 0xad, 0x74, 0xee, 0xd8, 0xd5, 0xc1, 0x94, 0x7b, 0xb1,
	0x1f, 0x48, 0xf9, 0x64, 0x12, 0xcf, 0xe4, 0x9e, 0x1f, 0x4b, 0x70, 0x73, 0x05, 0xbd, 0x85, 0x1b,
	0x8a, 0x29, 0x0e, 0xc6, 0x82, 0x89, 0xac, 0xff, 0xdc, 0x22, 0xd1, 0x4d, 0xdc, 0x0c, 0x21, 0x0d,
	0x12, 0x96, 0x5f, 0xc9, 0xa8, 0xe5, 0x58, 0xf9, 0x48, 0xbf, 0x85, 0x97, 0x20, 0xa6, 0x3e, 0x87,
	0xd0, 0x68, 0x98, 0xc8, 0x6a, 0x76, 0x5a, 0x73, 0x97, 0x78, 0xdc, 0x93, 0xea, 0x78, 0x57, 0x73,
	0xa7, 0x34, 0xbd, 0x83, 0x97, 0x43, 0x96, 0x16, 0x25, 0x8b, 0x17, 0x96, 0xcc, 0x78, 0xfa, 0x35,
	0xdc, 0x64, 0xa9, 0xc7, 0x62, 0x05, 0x49, 0x4c, 0xb9, 0xb1, 0x64, 0x22, 0x6b, 0xd9, 0xc5, 0x2c,
	0x7d, 0x3a, 0x39, 0xd9, 0xbe, 0x81, 0x5b, 0x61, 0x31, 0x1b, 0x2f, 0x55, 0x54, 0x81, 0x17, 0x1c,
	0x08, 0x16, 0x80, 0xbe, 0x7a, 0x7a, 0x82, 0x1a, 0xc3, 0x13, 0x54, 0xcf, 0x4e, 0x50, 0xed, 0xee,
	0xcd, 0xad, 0x67, 0xf5, 0xe5, 0xfa, 0x5a, 0xa3, 0xfd, 0x06, 0xaf, 0xec, 0x70, 0xe1, 0x53, 0xbe,
	0x27, 0x21, 0xf8, 0x35, 0x05, 0x9d, 0x63, 0xfc, 0xfb, 0x0d, 0x19, 0xc8, 0xac, 0x59, 0xcd, 0xce,
	0x96, 0x7d, 0xd1, 0x43, 0xb3, 0xff, 0xf6, 0x55, 0xb6, 0x5b, 0x9f, 0x7e, 0x9c, 0xd6, 0x1a, 0x1f,
	0xd0, 0xc2, 0x9a, 0x35, 0x8d, 0x0c, 0xe4, 0x96, 0xf4, 0xdb, 0xaf, 0xf0, 0xca, 0xc3, 0x04, 0xa8,
	0x82, 0x99, 0xff, 0xfe, 0xbf, 0xf3, 0x2f, 0x3b, 0xdd, 0xfb, 0xff, 0xcb, 0xfd, 0xb9, 0x56, 0xdb,
	0xaf, 0xf1, 0xaa, 0x0b, 0x92, 0xd3, 0xe0, 0x52, 0xdc, 0x8f, 0x70, 0x73, 0x07, 0xd4, 0x25, 0x38,
	0x6f, 0xbf, 0x43, 0xc3, 0x11, 0xd1, 0xce, 0x46, 0x44, 0x3b, 0x1f, 0x11, 0xf4, 0x36, 0x23, 0xe8,
	0x63, 0x46, 0xd0, 0xe7, 0x8c, 0xa0, 0x61, 0x46, 0xd0, 0xb7, 0x8c, 0xa0, 0xef, 0x19, 0xd1, 0xce,
	0x33, 0x82, 0xde, 0x8f, 0x89, 0x36, 0x1c, 0x13, 0xed, 0x6c, 0x4c, 0xb4, 0x17, 0x6e, 0x24, 0xe4,
	0xcb, 0xc8, 0x1e, 0x08, 0xae, 0x20, 0x49, 0xa8, 0xdd, 0x4f, 0x9d, 0x3c, 0xe8, 0x8a, 0xa4, 0xb7,
	0x29, 0x13, 0x31, 0x60, 0x21, 0x24, 0x9b, 0x53, 0xd8, 0x91, 0x7e, 0x24, 0x1c, 0x38, 0x52, 0x93,
	0x8d, 0xfe, 0xe3, 0xdf, 0xcc, 0x5f, 0xcc, 0x77, 0xfb, 0xf6, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x5c, 0x44, 0xb4, 0xa0, 0xf4, 0x04, 0x00, 0x00,
}

func (this *ViolationDefaultSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationDefaultSettings)
	if !ok {
		that2, ok := that.(ViolationDefaultSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if that1.DefaultStateChoice == nil {
		if this.DefaultStateChoice != nil {
			return false
		}
	} else if this.DefaultStateChoice == nil {
		return false
	} else if !this.DefaultStateChoice.Equal(that1.DefaultStateChoice) {
		return false
	}
	if this.IsInternal != that1.IsInternal {
		return false
	}
	return true
}
func (this *ViolationDefaultSettings_Enabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationDefaultSettings_Enabled)
	if !ok {
		that2, ok := that.(ViolationDefaultSettings_Enabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	return true
}
func (this *ViolationDefaultSettings_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationDefaultSettings_Disabled)
	if !ok {
		that2, ok := that.(ViolationDefaultSettings_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Violations) != len(that1.Violations) {
		return false
	}
	for i := range this.Violations {
		if !this.Violations[i].Equal(that1.Violations[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Violations) != len(that1.Violations) {
		return false
	}
	for i := range this.Violations {
		if !this.Violations[i].Equal(that1.Violations[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Violations) != len(that1.Violations) {
		return false
	}
	for i := range this.Violations {
		if !this.Violations[i].Equal(that1.Violations[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Violations) != len(that1.Violations) {
		return false
	}
	for i := range this.Violations {
		if !this.Violations[i].Equal(that1.Violations[i]) {
			return false
		}
	}
	return true
}
func (this *ViolationDefaultSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&waf_violations.ViolationDefaultSettings{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.DefaultStateChoice != nil {
		s = append(s, "DefaultStateChoice: "+fmt.Sprintf("%#v", this.DefaultStateChoice)+",\n")
	}
	s = append(s, "IsInternal: "+fmt.Sprintf("%#v", this.IsInternal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ViolationDefaultSettings_Enabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&waf_violations.ViolationDefaultSettings_Enabled{` +
		`Enabled:` + fmt.Sprintf("%#v", this.Enabled) + `}`}, ", ")
	return s
}
func (this *ViolationDefaultSettings_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&waf_violations.ViolationDefaultSettings_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_violations.GlobalSpecType{")
	if this.Violations != nil {
		s = append(s, "Violations: "+fmt.Sprintf("%#v", this.Violations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_violations.CreateSpecType{")
	if this.Violations != nil {
		s = append(s, "Violations: "+fmt.Sprintf("%#v", this.Violations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_violations.ReplaceSpecType{")
	if this.Violations != nil {
		s = append(s, "Violations: "+fmt.Sprintf("%#v", this.Violations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf_violations.GetSpecType{")
	if this.Violations != nil {
		s = append(s, "Violations: "+fmt.Sprintf("%#v", this.Violations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ViolationDefaultSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViolationDefaultSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationDefaultSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsInternal {
		i--
		if m.IsInternal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DefaultStateChoice != nil {
		{
			size := m.DefaultStateChoice.Size()
			i -= size
			if _, err := m.DefaultStateChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Name))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViolationDefaultSettings_Enabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationDefaultSettings_Enabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ViolationDefaultSettings_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationDefaultSettings_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Violations) > 0 {
		for iNdEx := len(m.Violations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Violations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Violations) > 0 {
		for iNdEx := len(m.Violations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Violations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Violations) > 0 {
		for iNdEx := len(m.Violations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Violations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Violations) > 0 {
		for iNdEx := len(m.Violations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Violations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ViolationDefaultSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != 0 {
		n += 1 + sovTypes(uint64(m.Name))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DefaultStateChoice != nil {
		n += m.DefaultStateChoice.Size()
	}
	if m.IsInternal {
		n += 2
	}
	return n
}

func (m *ViolationDefaultSettings_Enabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ViolationDefaultSettings_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Violations) > 0 {
		for _, e := range m.Violations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Violations) > 0 {
		for _, e := range m.Violations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Violations) > 0 {
		for _, e := range m.Violations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Violations) > 0 {
		for _, e := range m.Violations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ViolationDefaultSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationDefaultSettings{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`DefaultStateChoice:` + fmt.Sprintf("%v", this.DefaultStateChoice) + `,`,
		`IsInternal:` + fmt.Sprintf("%v", this.IsInternal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationDefaultSettings_Enabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationDefaultSettings_Enabled{`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationDefaultSettings_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationDefaultSettings_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForViolations := "[]*ViolationDefaultSettings{"
	for _, f := range this.Violations {
		repeatedStringForViolations += strings.Replace(f.String(), "ViolationDefaultSettings", "ViolationDefaultSettings", 1) + ","
	}
	repeatedStringForViolations += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Violations:` + repeatedStringForViolations + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForViolations := "[]*ViolationDefaultSettings{"
	for _, f := range this.Violations {
		repeatedStringForViolations += strings.Replace(f.String(), "ViolationDefaultSettings", "ViolationDefaultSettings", 1) + ","
	}
	repeatedStringForViolations += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Violations:` + repeatedStringForViolations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForViolations := "[]*ViolationDefaultSettings{"
	for _, f := range this.Violations {
		repeatedStringForViolations += strings.Replace(f.String(), "ViolationDefaultSettings", "ViolationDefaultSettings", 1) + ","
	}
	repeatedStringForViolations += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Violations:` + repeatedStringForViolations + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForViolations := "[]*ViolationDefaultSettings{"
	for _, f := range this.Violations {
		repeatedStringForViolations += strings.Replace(f.String(), "ViolationDefaultSettings", "ViolationDefaultSettings", 1) + ","
	}
	repeatedStringForViolations += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Violations:` + repeatedStringForViolations + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ViolationDefaultSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViolationDefaultSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViolationDefaultSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= app_firewall.AppFirewallViolationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultStateChoice = &ViolationDefaultSettings_Enabled{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultStateChoice = &ViolationDefaultSettings_Disabled{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInternal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInternal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Violations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Violations = append(m.Violations, &ViolationDefaultSettings{})
			if err := m.Violations[len(m.Violations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Violations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Violations = append(m.Violations, &ViolationDefaultSettings{})
			if err := m.Violations[len(m.Violations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Violations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Violations = append(m.Violations, &ViolationDefaultSettings{})
			if err := m.Violations[len(m.Violations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Violations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Violations = append(m.Violations, &ViolationDefaultSettings{})
			if err := m.Violations[len(m.Violations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/waf/public_waf_monitoring.proto

// WAF Monitoring APIs
//
// x-displayName: "WAF"
// APIs to get monitoring information about WAF instances on virtual-host basis.
// It gets data for a given virtual host based on any WAF instance attached to virtual host or route used by virtual host.

package waf

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WAF Metric Label Operator
//
// x-displayName: "WAF Metric Label Operator"
// The operator to use when querying WAF metrics with labels.
// Query can choose to either select a label if it matches a given value OR
// if it done not match a given value. This is done by choosing the EQ or NEQ operator
// in MetricLabelFilter
type MetricLabelOp int32

const (
	// x-displayName: "Equal To"
	// Equal to
	EQ MetricLabelOp = 0
	// x-displayName: "Not Equal To"
	// Not Equal to
	NEQ MetricLabelOp = 1
)

var MetricLabelOp_name = map[int32]string{
	0: "EQ",
	1: "NEQ",
}

var MetricLabelOp_value = map[string]int32{
	"EQ":  0,
	"NEQ": 1,
}

func (MetricLabelOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{0}
}

// Labels in the WAF metrics.
//
// x-displayName: "WAF Metric Label"
// Rule hits counter and the security events counter can be sliced and diced based
// on one or more labels listed below.
type MetricLabel int32

const (
	// x-displayName: "Namespace"
	// Namespace in which this WAF instance is running
	NAMESPACE MetricLabel = 0
	// x-displayName: "AppType"
	// AppType configured on the virtual_host under which this WAF instance is running
	APP_TYPE MetricLabel = 1
	// x-displayName: "Virtual Host"
	// Virtual host under which this WAF instance is running
	VIRTUAL_HOST MetricLabel = 2
	// x-displayName: "Site"
	// Site from which this WAF instance is reporting the metrics
	SITE MetricLabel = 3
	// x-displayName: "Service"
	// Service for which this WAF instance is reporting the metrics
	SERVICE MetricLabel = 4
	// x-displayName: "Instance"
	// Region from which the client's accesses caused WAF metrics to be generated
	INSTANCE MetricLabel = 5
	// x-displayName: "WAF Instance ID"
	// WAF instance ID
	WAF_INSTANCE_ID MetricLabel = 6
	// x-displayName: "Rule ID"
	// RuleID of the rule that was hit to cause this metric to be generated
	RULE_ID MetricLabel = 7
	// x-displayName: "Rule Severity"
	// Rule severity of the rule that was hit to cause this metric to be generated
	RULE_SEVERITY MetricLabel = 8
	// x-displayName: "Rule Tag"
	// Rule tag of the rule that was hit to cause this metric to be generated
	RULE_TAG MetricLabel = 9
	// x-displayName: "WAF Mode"
	// Block or AlertOnly
	WAF_MODE MetricLabel = 10
	// x-displayName: "Bot Type"
	// Type of the Bot (crawler, scanner, script)
	BOT_TYPE MetricLabel = 11
	// x-displayName: "Bot Name"
	// Name of the Bot associated with the waf rule
	BOT_NAME MetricLabel = 12
)

var MetricLabel_name = map[int32]string{
	0:  "NAMESPACE",
	1:  "APP_TYPE",
	2:  "VIRTUAL_HOST",
	3:  "SITE",
	4:  "SERVICE",
	5:  "INSTANCE",
	6:  "WAF_INSTANCE_ID",
	7:  "RULE_ID",
	8:  "RULE_SEVERITY",
	9:  "RULE_TAG",
	10: "WAF_MODE",
	11: "BOT_TYPE",
	12: "BOT_NAME",
}

var MetricLabel_value = map[string]int32{
	"NAMESPACE":       0,
	"APP_TYPE":        1,
	"VIRTUAL_HOST":    2,
	"SITE":            3,
	"SERVICE":         4,
	"INSTANCE":        5,
	"WAF_INSTANCE_ID": 6,
	"RULE_ID":         7,
	"RULE_SEVERITY":   8,
	"RULE_TAG":        9,
	"WAF_MODE":        10,
	"BOT_TYPE":        11,
	"BOT_NAME":        12,
}

func (MetricLabel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{1}
}

// RuleHitsCountRequest
//
// x-displayName: "Rule Hits Count Request"
// Request to get number of rule hits per client/server for a given namespace.
type RuleHitsCountRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// namespace is used to scope the WAF rule hits for the given namespace.
	// x-example: "bloggin-app-namespace-1"
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Label Filter"
	// List of label filter expressions of the form "label" Op "value".
	// Response will only contain data that matches all the conditions specified in the label_filter.
	// One or more of the following labels can be specified in the label_filter.
	// APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	//
	// Optional: If not specified, then the metrics will be filtered only based on the namespace in the request.
	LabelFilter []*MetricLabelFilter `protobuf:"bytes,2,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by one of more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	//
	// Optional: If not specified, then the rule hits are aggregated/grouped by VIRTUAL_HOST.
	GroupBy []MetricLabel `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.waf.MetricLabel" json:"group_by,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570007981"
	// start time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570007981"
	// end time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,6,opt,name=step,proto3" json:"step,omitempty"`
	// Range
	//
	// x-displayName: "Range"
	// x-example: "50m"
	// range decides how far to go back in time to fetch values for each step.
	// For example, if the range is 5m, then for step t1, query will be evaluated for t1-5m and for
	// t2, query will be evaluated for t2-5m and so on.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Note: For non-timeseries query, i.e., for step=end_time-start_time, range should be set to end_time-start_time
	//
	// Optional: If not specified, range is set to 5m
	Range string `protobuf:"bytes,7,opt,name=range,proto3" json:"range,omitempty"` // Deprecated: Do not use.
}

func (m *RuleHitsCountRequest) Reset()      { *m = RuleHitsCountRequest{} }
func (*RuleHitsCountRequest) ProtoMessage() {}
func (*RuleHitsCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{0}
}
func (m *RuleHitsCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleHitsCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleHitsCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleHitsCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleHitsCountRequest.Merge(m, src)
}
func (m *RuleHitsCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *RuleHitsCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleHitsCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleHitsCountRequest proto.InternalMessageInfo

func (m *RuleHitsCountRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RuleHitsCountRequest) GetLabelFilter() []*MetricLabelFilter {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *RuleHitsCountRequest) GetGroupBy() []MetricLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *RuleHitsCountRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RuleHitsCountRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *RuleHitsCountRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// Deprecated: Do not use.
func (m *RuleHitsCountRequest) GetRange() string {
	if m != nil {
		return m.Range
	}
	return ""
}

// RuleHitsCountResponse
//
// x-displayName: "Rule Hits Count Response"
// Number of rule hits for each unique combination of group_by labels in the RuleHitsCountRequest.
type RuleHitsCountResponse struct {
	// Rule hits counter
	//
	// x-displayName: "Rule hits counter"
	// List of rule hits counter data
	Data []*RuleHitsCounter `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "30m"
	// Actual step size used in the response. It could be higher than the requested step due to metric rollups and the query duration.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *RuleHitsCountResponse) Reset()      { *m = RuleHitsCountResponse{} }
func (*RuleHitsCountResponse) ProtoMessage() {}
func (*RuleHitsCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{1}
}
func (m *RuleHitsCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleHitsCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleHitsCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleHitsCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleHitsCountResponse.Merge(m, src)
}
func (m *RuleHitsCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *RuleHitsCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleHitsCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RuleHitsCountResponse proto.InternalMessageInfo

func (m *RuleHitsCountResponse) GetData() []*RuleHitsCounter {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RuleHitsCountResponse) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// SecurityEventsCountRequest
//
// x-displayName: "Security Events Count Request"
// Request to get number of security events per client/server for a given namespace.
type SecurityEventsCountRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "bloggin-app-namespace-1"
	// namespace is used to scope the WAF security events for the given namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Label Filter"
	// List of label filter expressions of the form "label" Op "value".
	// Response will only contain data that matches all the conditions specified in the label_filter.
	// One or more of the following labels can be specified in the label_filter.
	// APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	//
	// Optional: If not specified, then the metrics will be filtered only based on the namespace in the request.
	LabelFilter []*MetricLabelFilter `protobuf:"bytes,2,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	//
	// Optional: If not specified, then the rule hits are aggregated/grouped by VIRTUAL_HOST.
	GroupBy []MetricLabel `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.waf.MetricLabel" json:"group_by,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570007981"
	// start time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570007981"
	// end time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "15m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,6,opt,name=step,proto3" json:"step,omitempty"`
	// Range
	//
	// x-displayName: "Range"
	// x-example: "45m"
	// range decides how far to go back in time to fetch values for each step.
	// For example, if the range is 5m, then for step t1, query will be evaluated for t1-5m and for
	// t2, query will be evaluated for t2-5m and so on.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Note: For non-timeseries query, i.e., for step=end_time-start_time, range should be set to end_time-start_time
	//
	// Optional: If not specified, range is set to 5m
	Range string `protobuf:"bytes,7,opt,name=range,proto3" json:"range,omitempty"`
}

func (m *SecurityEventsCountRequest) Reset()      { *m = SecurityEventsCountRequest{} }
func (*SecurityEventsCountRequest) ProtoMessage() {}
func (*SecurityEventsCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{2}
}
func (m *SecurityEventsCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityEventsCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityEventsCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityEventsCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityEventsCountRequest.Merge(m, src)
}
func (m *SecurityEventsCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityEventsCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityEventsCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityEventsCountRequest proto.InternalMessageInfo

func (m *SecurityEventsCountRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SecurityEventsCountRequest) GetLabelFilter() []*MetricLabelFilter {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *SecurityEventsCountRequest) GetGroupBy() []MetricLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *SecurityEventsCountRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *SecurityEventsCountRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *SecurityEventsCountRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *SecurityEventsCountRequest) GetRange() string {
	if m != nil {
		return m.Range
	}
	return ""
}

// SecurityEventsCountResponse
//
// x-displayName: "Security Events Count Response"
// Number of security events for each unique combination of group_by labels in the SecurityEventsCountRequest.
type SecurityEventsCountResponse struct {
	// Security events counter data
	//
	// x-displayName: "Security events counter data"
	// List of security events counter data
	Data []*SecurityEventsCounter `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "30m"
	// Actual step size used in the response. It could be higher than the requested step due to metric rollups and the query duration.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *SecurityEventsCountResponse) Reset()      { *m = SecurityEventsCountResponse{} }
func (*SecurityEventsCountResponse) ProtoMessage() {}
func (*SecurityEventsCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{3}
}
func (m *SecurityEventsCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityEventsCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityEventsCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityEventsCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityEventsCountResponse.Merge(m, src)
}
func (m *SecurityEventsCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *SecurityEventsCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityEventsCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityEventsCountResponse proto.InternalMessageInfo

func (m *SecurityEventsCountResponse) GetData() []*SecurityEventsCounter {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SecurityEventsCountResponse) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// Label based filtering of WAF metrics.
//
// x-displayName: "WAF Metric Label Filter"
// WAF metrics are tagged with labels mentioned in MetricLabel.
// Metric label filter can be specified to query specific metrics based on label match
type MetricLabelFilter struct {
	// Label
	//
	// x-displayName: "Label"
	// Label name which is one out of the labels defined in MetricLabel enum.
	Label MetricLabel `protobuf:"varint,1,opt,name=label,proto3,enum=ves.io.schema.waf.MetricLabel" json:"label,omitempty"`
	// Operator
	//
	// x-displayName: "Operator"
	// Operator to evaluate the label in this filter
	Op MetricLabelOp `protobuf:"varint,2,opt,name=op,proto3,enum=ves.io.schema.waf.MetricLabelOp" json:"op,omitempty"`
	// Value
	//
	// x-displayName: "Value"
	// x-example: "blogging-app-namespace-1"
	// Value to be compared with
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricLabelFilter) Reset()      { *m = MetricLabelFilter{} }
func (*MetricLabelFilter) ProtoMessage() {}
func (*MetricLabelFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{4}
}
func (m *MetricLabelFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricLabelFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricLabelFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricLabelFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricLabelFilter.Merge(m, src)
}
func (m *MetricLabelFilter) XXX_Size() int {
	return m.Size()
}
func (m *MetricLabelFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricLabelFilter.DiscardUnknown(m)
}

var xxx_messageInfo_MetricLabelFilter proto.InternalMessageInfo

func (m *MetricLabelFilter) GetLabel() MetricLabel {
	if m != nil {
		return m.Label
	}
	return NAMESPACE
}

func (m *MetricLabelFilter) GetOp() MetricLabelOp {
	if m != nil {
		return m.Op
	}
	return EQ
}

func (m *MetricLabelFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Rule Hits Counter
//
// x-displayName: "Rule Hits Counter"
// RuleHitsCounter contains the timeseries data of rule hits counter.
type RuleHitsCounter struct {
	// Rule Hits ID
	//
	// x-displayName: "Rule Hits ID"
	// Rule Hits ID is the associated info for rule hits count
	Id *RuleHitsId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metric Values
	//
	// x-displayName: "Metric Values"
	// List of metric values
	Metric []*schema.MetricValue `protobuf:"bytes,2,rep,name=metric,proto3" json:"metric,omitempty"`
}

func (m *RuleHitsCounter) Reset()      { *m = RuleHitsCounter{} }
func (*RuleHitsCounter) ProtoMessage() {}
func (*RuleHitsCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{5}
}
func (m *RuleHitsCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleHitsCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleHitsCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleHitsCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleHitsCounter.Merge(m, src)
}
func (m *RuleHitsCounter) XXX_Size() int {
	return m.Size()
}
func (m *RuleHitsCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleHitsCounter.DiscardUnknown(m)
}

var xxx_messageInfo_RuleHitsCounter proto.InternalMessageInfo

func (m *RuleHitsCounter) GetId() *RuleHitsId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RuleHitsCounter) GetMetric() []*schema.MetricValue {
	if m != nil {
		return m.Metric
	}
	return nil
}

// Security Events Counter
//
// x-displayName: "Security Events Counter"
// SecurityEventsCounter contains the timeseries data of security events counter.
type SecurityEventsCounter struct {
	// Security Events ID
	//
	// x-displayName: "Security Events ID"
	// Security Event ID is the associated info for security events count
	Id *SecurityEventsId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metric Values
	//
	// x-displayName: "Metric Values"
	// List of metric values
	Metric []*schema.MetricValue `protobuf:"bytes,2,rep,name=metric,proto3" json:"metric,omitempty"`
}

func (m *SecurityEventsCounter) Reset()      { *m = SecurityEventsCounter{} }
func (*SecurityEventsCounter) ProtoMessage() {}
func (*SecurityEventsCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{6}
}
func (m *SecurityEventsCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityEventsCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityEventsCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityEventsCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityEventsCounter.Merge(m, src)
}
func (m *SecurityEventsCounter) XXX_Size() int {
	return m.Size()
}
func (m *SecurityEventsCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityEventsCounter.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityEventsCounter proto.InternalMessageInfo

func (m *SecurityEventsCounter) GetId() *SecurityEventsId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SecurityEventsCounter) GetMetric() []*schema.MetricValue {
	if m != nil {
		return m.Metric
	}
	return nil
}

// SecurityEventsId
//
// x-displayName: "Security Events ID"
// SecurityEventsId uniquely identifies an entry in the response for rule_hits metrics query.
// security events counter is aggregated based on the MetricLabel specified in the group_by field in the request.
// Therefore, only the fields that corresponds to the MetricLabel in the group_by will have non-empty
// value in the response.
type SecurityEventsId struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app-namespace-1"
	// Namespace in which this WAF instance is running
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// AppType
	//
	// x-displayName: "AppType"
	// x-example: "blogging-app"
	// AppType configured on the vhost under which this WAF instance is running
	AppType string `protobuf:"bytes,2,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	// Virtual Host
	//
	// x-displayName: "Virtual Host"
	// x-example: "VS:greatblogs-vhost"
	// Virtual host under which this WAF instance is running
	VirtualHost string `protobuf:"bytes,3,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// Site
	//
	// x-displayName: "Site"
	// x-example: "greatblogs-ce"
	// Site from which this WAF instance is reporting the metrics
	Site string `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	// Service
	//
	// x-displayName: "Service"
	// x-example: "N:greatblogs-ce"
	// Service for which this WAF instance is reporting the metrics
	Service string `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// Instance
	//
	// x-displayName: "Instance"
	// x-example: "India"
	// Region from which the client's accesses caused WAF metrics to be generated
	Instance string `protobuf:"bytes,6,opt,name=instance,proto3" json:"instance,omitempty"`
	// WAF Instance ID
	//
	// x-displayName: "WAF Instance ID"
	// x-example: "blogging-app-namespace-1:generated-waf-rules-greatblogs-waf"
	// WAF instance ID
	WafInstanceId string `protobuf:"bytes,7,opt,name=waf_instance_id,json=wafInstanceId,proto3" json:"waf_instance_id,omitempty"`
	// WAF Mode
	//
	// x-displayName: "WAF Mode"
	// x-example: "Block"
	// Block or AlertOnly
	WafMode string `protobuf:"bytes,8,opt,name=waf_mode,json=wafMode,proto3" json:"waf_mode,omitempty"`
	// Bot Type
	//
	// x-displayName: "Bot Type"
	// x-example: "scanner"
	// Type of Bot (crawler, scanner, script)
	BotType string `protobuf:"bytes,9,opt,name=bot_type,json=botType,proto3" json:"bot_type,omitempty"`
	// Bot Name
	//
	// x-displayName: "Bot Name"
	// x-example: "whatweb"
	// Name of the Bot associated with the waf rule
	BotName string `protobuf:"bytes,10,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
}

func (m *SecurityEventsId) Reset()      { *m = SecurityEventsId{} }
func (*SecurityEventsId) ProtoMessage() {}
func (*SecurityEventsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{7}
}
func (m *SecurityEventsId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityEventsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityEventsId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityEventsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityEventsId.Merge(m, src)
}
func (m *SecurityEventsId) XXX_Size() int {
	return m.Size()
}
func (m *SecurityEventsId) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityEventsId.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityEventsId proto.InternalMessageInfo

func (m *SecurityEventsId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SecurityEventsId) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *SecurityEventsId) GetVirtualHost() string {
	if m != nil {
		return m.VirtualHost
	}
	return ""
}

func (m *SecurityEventsId) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *SecurityEventsId) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *SecurityEventsId) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *SecurityEventsId) GetWafInstanceId() string {
	if m != nil {
		return m.WafInstanceId
	}
	return ""
}

func (m *SecurityEventsId) GetWafMode() string {
	if m != nil {
		return m.WafMode
	}
	return ""
}

func (m *SecurityEventsId) GetBotType() string {
	if m != nil {
		return m.BotType
	}
	return ""
}

func (m *SecurityEventsId) GetBotName() string {
	if m != nil {
		return m.BotName
	}
	return ""
}

// RuleHitsId
//
// x-displayName: "Rule Hits ID"
// RuleHitsId uniquely identifies an entry in the response for rule_hits metrics query.
// Rule hits counter is aggregated based on the MetricLabel specified in the group_by field in the request.
// Therefore, only the fields that corresponds to the MetricLabel in the group_by will have non-empty
// value in the response.
type RuleHitsId struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app-namespace-1"
	// Namespace in which this WAF instance is running
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// AppType
	//
	// x-displayName: "AppType"
	// x-example: "blogging-app"
	// AppType configured on the virtual_host under which this WAF instance is running
	AppType string `protobuf:"bytes,2,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	// Virtual Host
	//
	// x-displayName: "Virtual Host"
	// x-example: "VS:greatblogs-vhost"
	// Virtual host under which this WAF instance is running
	VirtualHost string `protobuf:"bytes,3,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// Site
	//
	// x-displayName: "Site"
	// x-example: "greatblogs-ce"
	// Site from which this WAF instance is reporting the metrics
	Site string `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	// Service
	//
	// x-displayName: "Service"
	// x-example: "N:greatblogs-ce"
	// Service for which this WAF instance is reporting the metrics
	Service string `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// Instance
	//
	// x-displayName: "Instance"
	// x-example: "India"
	// Region from which the client's accesses caused WAF metrics to be generated
	Instance string `protobuf:"bytes,6,opt,name=instance,proto3" json:"instance,omitempty"`
	// WAF Instance ID
	//
	// x-displayName: "WAF Instance ID"
	// x-example: "blogging-app-namespace-1:generated-waf-rules-greatblogs-waf"
	// WAF instance ID
	WafInstanceId string `protobuf:"bytes,7,opt,name=waf_instance_id,json=wafInstanceId,proto3" json:"waf_instance_id,omitempty"`
	// Rule ID
	//
	// x-displayName: "Rule ID"
	// x-example: "941210"
	// RuleID of the rule that was hit to cause this metric to be generated
	RuleId string `protobuf:"bytes,8,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// Rule Severity
	//
	// x-displayName: "Rule Severity"
	// x-example: "CRITICAL"
	// Rule severity of the rule that was hit to cause this metric to be generated
	RuleSeverity string `protobuf:"bytes,9,opt,name=rule_severity,json=ruleSeverity,proto3" json:"rule_severity,omitempty"`
	// Rule Tag
	//
	// x-displayName: "Rule Tag"
	// x-example: "CAPEC-272"
	// Rule tag of the rule that was hit to cause this metric to be generated
	RuleTag string `protobuf:"bytes,10,opt,name=rule_tag,json=ruleTag,proto3" json:"rule_tag,omitempty"`
	// Bot Type
	//
	// x-displayName: "Bot Type"
	// x-example: "scanner"
	// Type of Bot (crawler, scanner, script)
	BotType string `protobuf:"bytes,11,opt,name=bot_type,json=botType,proto3" json:"bot_type,omitempty"`
	// Bot Name
	//
	// x-displayName: "Bot Name"
	// x-example: "whatweb"
	// Name of the Bot associated with the waf rule
	BotName string `protobuf:"bytes,12,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
}

func (m *RuleHitsId) Reset()      { *m = RuleHitsId{} }
func (*RuleHitsId) ProtoMessage() {}
func (*RuleHitsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{8}
}
func (m *RuleHitsId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleHitsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleHitsId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleHitsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleHitsId.Merge(m, src)
}
func (m *RuleHitsId) XXX_Size() int {
	return m.Size()
}
func (m *RuleHitsId) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleHitsId.DiscardUnknown(m)
}

var xxx_messageInfo_RuleHitsId proto.InternalMessageInfo

func (m *RuleHitsId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RuleHitsId) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *RuleHitsId) GetVirtualHost() string {
	if m != nil {
		return m.VirtualHost
	}
	return ""
}

func (m *RuleHitsId) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *RuleHitsId) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RuleHitsId) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *RuleHitsId) GetWafInstanceId() string {
	if m != nil {
		return m.WafInstanceId
	}
	return ""
}

func (m *RuleHitsId) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *RuleHitsId) GetRuleSeverity() string {
	if m != nil {
		return m.RuleSeverity
	}
	return ""
}

func (m *RuleHitsId) GetRuleTag() string {
	if m != nil {
		return m.RuleTag
	}
	return ""
}

func (m *RuleHitsId) GetBotType() string {
	if m != nil {
		return m.BotType
	}
	return ""
}

func (m *RuleHitsId) GetBotName() string {
	if m != nil {
		return m.BotName
	}
	return ""
}

func init() {
	proto.RegisterEnum("ves.io.schema.waf.MetricLabelOp", MetricLabelOp_name, MetricLabelOp_value)
	golang_proto.RegisterEnum("ves.io.schema.waf.MetricLabelOp", MetricLabelOp_name, MetricLabelOp_value)
	proto.RegisterEnum("ves.io.schema.waf.MetricLabel", MetricLabel_name, MetricLabel_value)
	golang_proto.RegisterEnum("ves.io.schema.waf.MetricLabel", MetricLabel_name, MetricLabel_value)
	proto.RegisterType((*RuleHitsCountRequest)(nil), "ves.io.schema.waf.RuleHitsCountRequest")
	golang_proto.RegisterType((*RuleHitsCountRequest)(nil), "ves.io.schema.waf.RuleHitsCountRequest")
	proto.RegisterType((*RuleHitsCountResponse)(nil), "ves.io.schema.waf.RuleHitsCountResponse")
	golang_proto.RegisterType((*RuleHitsCountResponse)(nil), "ves.io.schema.waf.RuleHitsCountResponse")
	proto.RegisterType((*SecurityEventsCountRequest)(nil), "ves.io.schema.waf.SecurityEventsCountRequest")
	golang_proto.RegisterType((*SecurityEventsCountRequest)(nil), "ves.io.schema.waf.SecurityEventsCountRequest")
	proto.RegisterType((*SecurityEventsCountResponse)(nil), "ves.io.schema.waf.SecurityEventsCountResponse")
	golang_proto.RegisterType((*SecurityEventsCountResponse)(nil), "ves.io.schema.waf.SecurityEventsCountResponse")
	proto.RegisterType((*MetricLabelFilter)(nil), "ves.io.schema.waf.MetricLabelFilter")
	golang_proto.RegisterType((*MetricLabelFilter)(nil), "ves.io.schema.waf.MetricLabelFilter")
	proto.RegisterType((*RuleHitsCounter)(nil), "ves.io.schema.waf.RuleHitsCounter")
	golang_proto.RegisterType((*RuleHitsCounter)(nil), "ves.io.schema.waf.RuleHitsCounter")
	proto.RegisterType((*SecurityEventsCounter)(nil), "ves.io.schema.waf.SecurityEventsCounter")
	golang_proto.RegisterType((*SecurityEventsCounter)(nil), "ves.io.schema.waf.SecurityEventsCounter")
	proto.RegisterType((*SecurityEventsId)(nil), "ves.io.schema.waf.SecurityEventsId")
	golang_proto.RegisterType((*SecurityEventsId)(nil), "ves.io.schema.waf.SecurityEventsId")
	proto.RegisterType((*RuleHitsId)(nil), "ves.io.schema.waf.RuleHitsId")
	golang_proto.RegisterType((*RuleHitsId)(nil), "ves.io.schema.waf.RuleHitsId")
}

func init() {
	proto.RegisterFile("ves.io/schema/waf/public_waf_monitoring.proto", fileDescriptor_3c8c41ebe678456d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/waf/public_waf_monitoring.proto", fileDescriptor_3c8c41ebe678456d)
}

var fileDescriptor_3c8c41ebe678456d = []byte{
	// 1319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x1b, 0xf6, 0xac, 0x9d, 0xd8, 0x19, 0x3b, 0xed, 0x76, 0xbe, 0x56, 0xdf, 0xd6, 0x6d, 0x57, 0xfe,
	0xdc, 0xef, 0xeb, 0x17, 0x2a, 0xec, 0x85, 0x14, 0x90, 0x40, 0x15, 0x92, 0x93, 0xba, 0xa9, 0xa5,
	0xfc, 0xea, 0xda, 0x4d, 0x55, 0x2e, 0xd6, 0xd8, 0x3b, 0xde, 0x2c, 0xac, 0x77, 0x96, 0x9d, 0xb1,
	0xdd, 0xa8, 0x20, 0x95, 0xaa, 0x7f, 0x00, 0x88, 0x03, 0x1c, 0x40, 0xe2, 0xc8, 0x95, 0x2b, 0xbd,
	0xe4, 0x56, 0x4e, 0xa5, 0x2a, 0x97, 0x1e, 0xa9, 0xc3, 0xa1, 0xbd, 0xe5, 0x4f, 0x40, 0x33, 0xbb,
	0x4e, 0xb2, 0x49, 0x68, 0x42, 0x2b, 0x40, 0x42, 0xdc, 0xf6, 0x7d, 0xdf, 0x67, 0x66, 0xde, 0xe7,
	0x79, 0xdf, 0xf9, 0xb1, 0xb0, 0xd4, 0x27, 0xac, 0xec, 0x50, 0x83, 0xb5, 0x57, 0x49, 0x17, 0x1b,
	0x03, 0xdc, 0x31, 0xfc, 0x5e, 0xcb, 0x75, 0xda, 0xcd, 0x01, 0xee, 0x34, 0xbb, 0xd4, 0x73, 0x38,
	0x0d, 0x1c, 0xcf, 0x2e, 0xfb, 0x01, 0xe5, 0x14, 0x1d, 0x0b, 0xe1, 0xe5, 0x10, 0x5e, 0x1e, 0xe0,
	0x4e, 0xbe, 0x64, 0x3b, 0x7c, 0xb5, 0xd7, 0x2a, 0xb7, 0x69, 0xd7, 0xb0, 0xa9, 0x4d, 0x0d, 0x89,
	0x6c, 0xf5, 0x3a, 0xd2, 0x92, 0x86, 0xfc, 0x0a, 0x67, 0xc8, 0x9f, 0xb6, 0x29, 0xb5, 0x5d, 0x62,
	0x60, 0xdf, 0x31, 0xb0, 0xe7, 0x51, 0x8e, 0xb9, 0x43, 0x3d, 0x16, 0x45, 0xcf, 0xc4, 0xd3, 0x71,
	0xa9, 0x6d, 0xf0, 0x35, 0x9f, 0x8c, 0xc2, 0xa7, 0xe2, 0x61, 0xea, 0xef, 0x1c, 0x7b, 0x32, 0x1e,
	0xdc, 0x39, 0xee, 0x74, 0x3c, 0xd4, 0xc7, 0xae, 0x63, 0x61, 0x4e, 0xa2, 0x68, 0x71, 0x57, 0x94,
	0x30, 0xe2, 0xf5, 0xe3, 0x93, 0x17, 0x1f, 0x28, 0xf0, 0xb8, 0xd9, 0x73, 0xc9, 0x15, 0x87, 0xb3,
	0x59, 0xda, 0xf3, 0xb8, 0x49, 0x3e, 0xec, 0x11, 0xc6, 0xd1, 0x69, 0x38, 0xe1, 0xe1, 0x2e, 0x61,
	0x3e, 0x6e, 0x13, 0x0d, 0x14, 0xc0, 0xd4, 0x84, 0xb9, 0xed, 0x40, 0x73, 0x30, 0xe7, 0xe2, 0x16,
	0x71, 0x9b, 0x1d, 0xc7, 0xe5, 0x24, 0xd0, 0x94, 0x42, 0x72, 0x2a, 0x3b, 0xfd, 0xdf, 0xf2, 0x1e,
	0x19, 0xcb, 0x0b, 0x84, 0x07, 0x4e, 0x7b, 0x5e, 0x80, 0x2f, 0x4b, 0xac, 0x99, 0x75, 0xb7, 0x0d,
	0xf4, 0x36, 0xcc, 0xd8, 0x01, 0xed, 0xf9, 0xcd, 0xd6, 0x9a, 0x96, 0x2c, 0x24, 0xa7, 0x8e, 0x4c,
	0xeb, 0xcf, 0x9f, 0xc4, 0x4c, 0x4b, 0xfc, 0xcc, 0x1a, 0x7a, 0x05, 0x42, 0xc6, 0x71, 0xc0, 0x9b,
	0xdc, 0xe9, 0x12, 0x2d, 0x25, 0x52, 0x9c, 0x81, 0xdf, 0x3f, 0x5b, 0x4f, 0x8e, 0x05, 0xc9, 0x2f,
	0x53, 0xc0, 0x9c, 0x90, 0xd1, 0x86, 0xd3, 0x25, 0xe8, 0x7f, 0x30, 0x43, 0x3c, 0x2b, 0x04, 0x8e,
	0xed, 0x01, 0xa6, 0x89, 0x67, 0x49, 0x98, 0x0e, 0x53, 0x8c, 0x13, 0x5f, 0x1b, 0x8f, 0x41, 0xbe,
	0x49, 0x01, 0x53, 0xfa, 0x51, 0x11, 0x8e, 0x05, 0xd8, 0xb3, 0x89, 0x96, 0x96, 0x80, 0x5c, 0x04,
	0xd8, 0x54, 0x80, 0x06, 0xcc, 0x30, 0x54, 0xa4, 0xf0, 0xc4, 0x2e, 0x3d, 0x99, 0x4f, 0x3d, 0x46,
	0xd0, 0x5b, 0x30, 0x65, 0x61, 0x8e, 0x35, 0x20, 0xa5, 0x2a, 0xee, 0xc3, 0x32, 0x36, 0x8e, 0x04,
	0xa6, 0xc4, 0x6f, 0x25, 0xa5, 0xc4, 0x92, 0xda, 0x54, 0xa2, 0xa4, 0x8a, 0x8f, 0x14, 0x98, 0xaf,
	0x93, 0x76, 0x2f, 0x70, 0xf8, 0x5a, 0xb5, 0x4f, 0xbc, 0x7f, 0xea, 0x78, 0x60, 0x1d, 0x0b, 0xf1,
	0x3a, 0xee, 0xd4, 0x34, 0xaa, 0xe2, 0x2d, 0x78, 0x6a, 0x5f, 0x4d, 0xa3, 0x5a, 0x5e, 0x8c, 0xd5,
	0x72, 0x6a, 0x1f, 0xa6, 0xfb, 0x8c, 0x3e, 0x74, 0x45, 0x3f, 0x03, 0xf0, 0xd8, 0x1e, 0xb9, 0xd1,
	0x1b, 0x70, 0x4c, 0x0a, 0x2e, 0x8b, 0x78, 0xb0, 0xbc, 0x21, 0x18, 0xbd, 0x06, 0x15, 0x1a, 0xae,
	0x74, 0x64, 0xba, 0xf0, 0xfc, 0x21, 0x4b, 0xbe, 0xa9, 0x50, 0x1f, 0x1d, 0x87, 0x63, 0x7d, 0xec,
	0xf6, 0x88, 0x96, 0x94, 0xcd, 0x12, 0x1a, 0x45, 0x0e, 0x8f, 0xee, 0x6a, 0x4f, 0x54, 0x82, 0x8a,
	0x63, 0xc9, 0x6c, 0xb2, 0xd3, 0x67, 0x9e, 0xd3, 0xce, 0x35, 0xcb, 0x54, 0x1c, 0x0b, 0x4d, 0xc3,
	0xf1, 0xae, 0x5c, 0x2c, 0x6a, 0xb2, 0xfc, 0xae, 0x21, 0x61, 0x26, 0x2b, 0x62, 0x35, 0x33, 0x42,
	0x16, 0x6f, 0x03, 0x78, 0x62, 0x5f, 0x25, 0xd1, 0x85, 0x1d, 0x8b, 0x9f, 0x3d, 0x50, 0xff, 0x97,
	0x48, 0xe1, 0x3b, 0x05, 0xaa, 0xbb, 0x27, 0x3b, 0x60, 0x53, 0x9d, 0x84, 0x19, 0xec, 0xfb, 0x4d,
	0x71, 0x50, 0x87, 0x35, 0x36, 0xd3, 0xd8, 0xf7, 0x1b, 0x6b, 0x3e, 0x41, 0xff, 0x81, 0xb9, 0xbe,
	0x13, 0xf0, 0x1e, 0x76, 0x9b, 0xab, 0x94, 0xf1, 0x48, 0xe3, 0x6c, 0xe4, 0xbb, 0x42, 0x19, 0x47,
	0x08, 0xa6, 0x98, 0xc3, 0xa3, 0x8d, 0x60, 0xca, 0x6f, 0xa4, 0xc1, 0x34, 0x23, 0x41, 0xdf, 0x69,
	0x47, 0x6d, 0x6f, 0x8e, 0x4c, 0x94, 0x87, 0x19, 0xc7, 0x63, 0x1c, 0x7b, 0x6d, 0x12, 0xb6, 0xbb,
	0xb9, 0x65, 0xa3, 0x73, 0xf0, 0xa8, 0xb8, 0xec, 0x46, 0x76, 0xd3, 0xb1, 0xc2, 0x86, 0x37, 0x27,
	0x07, 0xb8, 0x53, 0x8b, 0xbc, 0x35, 0x4b, 0xe4, 0x1b, 0x5e, 0x8a, 0x16, 0xd1, 0x32, 0xe1, 0xf4,
	0x03, 0xdc, 0x59, 0xa0, 0x96, 0xa4, 0xd2, 0xa2, 0x3c, 0xa4, 0x32, 0x11, 0x86, 0x5a, 0x94, 0x4b,
	0x2a, 0x51, 0x48, 0xd0, 0xd6, 0xe0, 0x56, 0x68, 0x11, 0x77, 0x49, 0xf1, 0x99, 0x02, 0xe1, 0x76,
	0xf5, 0xff, 0x66, 0x6a, 0xfd, 0x1b, 0xa6, 0x83, 0x9e, 0x2b, 0xe3, 0xa1, 0x58, 0xe3, 0xc2, 0xac,
	0x59, 0xe8, 0x2c, 0x9c, 0x94, 0x01, 0x46, 0xfa, 0x44, 0x74, 0x4b, 0x24, 0x58, 0x4e, 0x38, 0xeb,
	0x91, 0x4f, 0xb0, 0x95, 0x20, 0x8e, 0xed, 0x91, 0x6a, 0xc2, 0x6e, 0x60, 0x3b, 0xa6, 0x75, 0xf6,
	0xb7, 0xb5, 0xce, 0xc5, 0xb4, 0x3e, 0x5f, 0x80, 0x93, 0xb1, 0x3d, 0x8c, 0xc6, 0xa1, 0x52, 0xbd,
	0xaa, 0x26, 0x50, 0x1a, 0x26, 0x17, 0xab, 0x57, 0x55, 0x70, 0xfe, 0x01, 0x80, 0xd9, 0x1d, 0x10,
	0x34, 0x09, 0x27, 0x16, 0x2b, 0x0b, 0xd5, 0xfa, 0x72, 0x65, 0xb6, 0xaa, 0x26, 0x50, 0x0e, 0x66,
	0x2a, 0xcb, 0xcb, 0xcd, 0xc6, 0x8d, 0xe5, 0xaa, 0x0a, 0x90, 0x0a, 0x73, 0x2b, 0x35, 0xb3, 0x71,
	0xad, 0x32, 0xdf, 0xbc, 0xb2, 0x54, 0x6f, 0xa8, 0x0a, 0xca, 0xc0, 0x54, 0xbd, 0xd6, 0xa8, 0xaa,
	0x49, 0x94, 0x85, 0xe9, 0x7a, 0xd5, 0x5c, 0xa9, 0xcd, 0x56, 0xd5, 0x94, 0x18, 0x56, 0x5b, 0xac,
	0x37, 0x2a, 0x8b, 0xb3, 0x55, 0x75, 0x0c, 0xfd, 0x0b, 0x1e, 0xbd, 0x5e, 0xb9, 0xdc, 0x1c, 0x79,
	0x9a, 0xb5, 0x4b, 0xea, 0xb8, 0xc0, 0x9b, 0xd7, 0xe6, 0xa5, 0x91, 0x46, 0xc7, 0xe0, 0xa4, 0x34,
	0xea, 0xd5, 0x95, 0xaa, 0x59, 0x6b, 0xdc, 0x50, 0x33, 0x62, 0x0a, 0xe9, 0x6a, 0x54, 0xe6, 0xd4,
	0x09, 0x61, 0x89, 0x29, 0x16, 0x96, 0x2e, 0x55, 0x55, 0x28, 0xac, 0x99, 0xa5, 0x46, 0x98, 0x55,
	0x76, 0x64, 0x89, 0xb4, 0xd5, 0xdc, 0xf4, 0x8f, 0x19, 0xa8, 0x5e, 0xaf, 0x5c, 0x5e, 0xd8, 0x7a,
	0xc4, 0x55, 0x96, 0x6b, 0xe8, 0xae, 0x02, 0x4f, 0xcc, 0xba, 0x0e, 0xf1, 0xf8, 0xa8, 0xf3, 0x42,
	0xce, 0x0c, 0xfd, 0xff, 0xa0, 0xab, 0x36, 0xba, 0x2a, 0xf3, 0x53, 0x07, 0x03, 0xc3, 0xf3, 0xbf,
	0xf8, 0x05, 0x18, 0xde, 0xd7, 0xe6, 0x3b, 0x6f, 0xde, 0x6c, 0x97, 0x06, 0x18, 0xfb, 0x25, 0xd1,
	0x1c, 0x16, 0x0e, 0xac, 0x52, 0xf4, 0xb0, 0x7c, 0xb5, 0xd0, 0x27, 0xac, 0xe4, 0xd0, 0x92, 0x1f,
	0xd0, 0x9b, 0x6b, 0x23, 0x6f, 0x29, 0x20, 0xd8, 0xda, 0x15, 0x1a, 0xe0, 0x8e, 0x74, 0xdf, 0xf9,
	0xe9, 0x97, 0xcf, 0x95, 0x4a, 0xf1, 0x62, 0xf4, 0x4a, 0x35, 0xb6, 0xf6, 0x07, 0x33, 0x6e, 0x6d,
	0x7d, 0x7f, 0x2c, 0xde, 0xb1, 0xcc, 0x08, 0x4f, 0x26, 0x66, 0xb4, 0x25, 0x5d, 0x43, 0xf6, 0xd3,
	0xaa, 0xc3, 0xd9, 0x3b, 0xe0, 0x3c, 0x7a, 0x2a, 0x4f, 0xcc, 0xa0, 0x4f, 0x82, 0x3f, 0x41, 0x86,
	0x8f, 0x86, 0xf7, 0xb5, 0xd7, 0x0f, 0xad, 0xc2, 0xcb, 0x50, 0x65, 0x92, 0x52, 0x9c, 0xea, 0x57,
	0x0a, 0x3c, 0x15, 0x56, 0x3c, 0x7e, 0x3e, 0x8f, 0x08, 0x97, 0x0e, 0x77, 0x2d, 0x8f, 0x68, 0x97,
	0x0f, 0x0b, 0x8f, 0xc8, 0x7f, 0xfd, 0xc7, 0xf4, 0xc0, 0x5c, 0x71, 0xe6, 0x05, 0x7a, 0x80, 0x45,
	0x89, 0x36, 0x89, 0xcc, 0x54, 0xc8, 0xf3, 0x89, 0x22, 0xde, 0x30, 0x42, 0xb6, 0xbf, 0x44, 0x9e,
	0x3b, 0xe0, 0xc5, 0x9b, 0xe3, 0x77, 0x6a, 0x10, 0x35, 0xc7, 0x5e, 0x0d, 0xf2, 0xe7, 0xd6, 0xef,
	0x81, 0xe4, 0xa3, 0x7b, 0x40, 0xdb, 0x9b, 0xfb, 0x52, 0xeb, 0x7d, 0xd2, 0xe6, 0x77, 0x1e, 0x68,
	0x8a, 0x06, 0x66, 0xee, 0x82, 0xf5, 0x77, 0x13, 0x0f, 0x9f, 0xe8, 0x89, 0xc7, 0x4f, 0xf4, 0xc4,
	0xe6, 0x13, 0x1d, 0xdc, 0x1e, 0xea, 0xe0, 0xdb, 0xa1, 0x0e, 0x7e, 0x18, 0xea, 0xe0, 0xe1, 0x50,
	0x07, 0x3f, 0x0f, 0x75, 0xf0, 0x74, 0xa8, 0x27, 0x36, 0x87, 0x3a, 0xf8, 0x74, 0x43, 0x4f, 0xac,
	0x6f, 0xe8, 0xe0, 0xe1, 0x86, 0x9e, 0x78, 0xbc, 0xa1, 0x27, 0xde, 0x9b, 0xb3, 0xa9, 0xff, 0x81,
	0x5d, 0xee, 0x53, 0xf1, 0x4e, 0x0b, 0x70, 0xb9, 0xc7, 0x0c, 0xf9, 0xd1, 0xa1, 0x41, 0x57, 0xd0,
	0xeb, 0x3b, 0x16, 0x09, 0x4a, 0xa3, 0xb0, 0xe1, 0xb7, 0x6c, 0x6a, 0x90, 0x9b, 0x3c, 0xfa, 0x2d,
	0xdb, 0xfe, 0x43, 0x6d, 0x8d, 0xcb, 0x7f, 0xb2, 0x0b, 0xbf, 0x06, 0x00, 0x00, 0xff, 0xff, 0xed,
	0x27, 0x2d, 0x0b, 0xbd, 0x0e, 0x00, 0x00,
}

func (x MetricLabelOp) String() string {
	s, ok := MetricLabelOp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MetricLabel) String() string {
	s, ok := MetricLabel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RuleHitsCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleHitsCountRequest)
	if !ok {
		that2, ok := that.(RuleHitsCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.LabelFilter) != len(that1.LabelFilter) {
		return false
	}
	for i := range this.LabelFilter {
		if !this.LabelFilter[i].Equal(that1.LabelFilter[i]) {
			return false
		}
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	return true
}
func (this *RuleHitsCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleHitsCountResponse)
	if !ok {
		that2, ok := that.(RuleHitsCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *SecurityEventsCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventsCountRequest)
	if !ok {
		that2, ok := that.(SecurityEventsCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.LabelFilter) != len(that1.LabelFilter) {
		return false
	}
	for i := range this.LabelFilter {
		if !this.LabelFilter[i].Equal(that1.LabelFilter[i]) {
			return false
		}
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	return true
}
func (this *SecurityEventsCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventsCountResponse)
	if !ok {
		that2, ok := that.(SecurityEventsCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *MetricLabelFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricLabelFilter)
	if !ok {
		that2, ok := that.(MetricLabelFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *RuleHitsCounter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleHitsCounter)
	if !ok {
		that2, ok := that.(RuleHitsCounter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if !this.Metric[i].Equal(that1.Metric[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityEventsCounter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventsCounter)
	if !ok {
		that2, ok := that.(SecurityEventsCounter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if !this.Metric[i].Equal(that1.Metric[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityEventsId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventsId)
	if !ok {
		that2, ok := that.(SecurityEventsId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.AppType != that1.AppType {
		return false
	}
	if this.VirtualHost != that1.VirtualHost {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Instance != that1.Instance {
		return false
	}
	if this.WafInstanceId != that1.WafInstanceId {
		return false
	}
	if this.WafMode != that1.WafMode {
		return false
	}
	if this.BotType != that1.BotType {
		return false
	}
	if this.BotName != that1.BotName {
		return false
	}
	return true
}
func (this *RuleHitsId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleHitsId)
	if !ok {
		that2, ok := that.(RuleHitsId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.AppType != that1.AppType {
		return false
	}
	if this.VirtualHost != that1.VirtualHost {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Instance != that1.Instance {
		return false
	}
	if this.WafInstanceId != that1.WafInstanceId {
		return false
	}
	if this.RuleId != that1.RuleId {
		return false
	}
	if this.RuleSeverity != that1.RuleSeverity {
		return false
	}
	if this.RuleTag != that1.RuleTag {
		return false
	}
	if this.BotType != that1.BotType {
		return false
	}
	if this.BotName != that1.BotName {
		return false
	}
	return true
}
func (this *RuleHitsCountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&waf.RuleHitsCountRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RuleHitsCountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.RuleHitsCountResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventsCountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&waf.SecurityEventsCountRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventsCountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.SecurityEventsCountResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricLabelFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf.MetricLabelFilter{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RuleHitsCounter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.RuleHitsCounter{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metric != nil {
		s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventsCounter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.SecurityEventsCounter{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metric != nil {
		s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventsId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&waf.SecurityEventsId{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "AppType: "+fmt.Sprintf("%#v", this.AppType)+",\n")
	s = append(s, "VirtualHost: "+fmt.Sprintf("%#v", this.VirtualHost)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	s = append(s, "WafInstanceId: "+fmt.Sprintf("%#v", this.WafInstanceId)+",\n")
	s = append(s, "WafMode: "+fmt.Sprintf("%#v", this.WafMode)+",\n")
	s = append(s, "BotType: "+fmt.Sprintf("%#v", this.BotType)+",\n")
	s = append(s, "BotName: "+fmt.Sprintf("%#v", this.BotName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RuleHitsId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&waf.RuleHitsId{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "AppType: "+fmt.Sprintf("%#v", this.AppType)+",\n")
	s = append(s, "VirtualHost: "+fmt.Sprintf("%#v", this.VirtualHost)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	s = append(s, "WafInstanceId: "+fmt.Sprintf("%#v", this.WafInstanceId)+",\n")
	s = append(s, "RuleId: "+fmt.Sprintf("%#v", this.RuleId)+",\n")
	s = append(s, "RuleSeverity: "+fmt.Sprintf("%#v", this.RuleSeverity)+",\n")
	s = append(s, "RuleTag: "+fmt.Sprintf("%#v", this.RuleTag)+",\n")
	s = append(s, "BotType: "+fmt.Sprintf("%#v", this.BotType)+",\n")
	s = append(s, "BotName: "+fmt.Sprintf("%#v", this.BotName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicWafMonitoring(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WAFMonitoringAPIClient is the client API for WAFMonitoringAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WAFMonitoringAPIClient interface {
	// ClientRuleHitsMetrics
	//
	// x-displayName: "Client Rule Hits Metrics"
	// Get number of rule hits per client for a given namespace.
	// The rule hits counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	ClientRuleHitsMetrics(ctx context.Context, in *RuleHitsCountRequest, opts ...grpc.CallOption) (*RuleHitsCountResponse, error)
	// ServerRuleHitsMetrics
	//
	// x-displayName: "Server Rule Hits Metrics"
	// Get number of rule hits per server for a given namespace.
	// The rule hits counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	ServerRuleHitsMetrics(ctx context.Context, in *RuleHitsCountRequest, opts ...grpc.CallOption) (*RuleHitsCountResponse, error)
	// ClientSecurityEventsMetrics
	//
	// x-displayName: "Client Security Events Metrics"
	// Get number of security events per client for a given namespace.
	// The security events counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	ClientSecurityEventsMetrics(ctx context.Context, in *SecurityEventsCountRequest, opts ...grpc.CallOption) (*SecurityEventsCountResponse, error)
	// ServerSecurityEventsMetrics
	//
	// x-displayName: "Server Security Events Metrics"
	// Get number of security events per server for a given namespace.
	// The security events counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	ServerSecurityEventsMetrics(ctx context.Context, in *SecurityEventsCountRequest, opts ...grpc.CallOption) (*SecurityEventsCountResponse, error)
}

type wAFMonitoringAPIClient struct {
	cc *grpc.ClientConn
}

func NewWAFMonitoringAPIClient(cc *grpc.ClientConn) WAFMonitoringAPIClient {
	return &wAFMonitoringAPIClient{cc}
}

func (c *wAFMonitoringAPIClient) ClientRuleHitsMetrics(ctx context.Context, in *RuleHitsCountRequest, opts ...grpc.CallOption) (*RuleHitsCountResponse, error) {
	out := new(RuleHitsCountResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.WAFMonitoringAPI/ClientRuleHitsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAFMonitoringAPIClient) ServerRuleHitsMetrics(ctx context.Context, in *RuleHitsCountRequest, opts ...grpc.CallOption) (*RuleHitsCountResponse, error) {
	out := new(RuleHitsCountResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.WAFMonitoringAPI/ServerRuleHitsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAFMonitoringAPIClient) ClientSecurityEventsMetrics(ctx context.Context, in *SecurityEventsCountRequest, opts ...grpc.CallOption) (*SecurityEventsCountResponse, error) {
	out := new(SecurityEventsCountResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.WAFMonitoringAPI/ClientSecurityEventsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAFMonitoringAPIClient) ServerSecurityEventsMetrics(ctx context.Context, in *SecurityEventsCountRequest, opts ...grpc.CallOption) (*SecurityEventsCountResponse, error) {
	out := new(SecurityEventsCountResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.WAFMonitoringAPI/ServerSecurityEventsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WAFMonitoringAPIServer is the server API for WAFMonitoringAPI service.
type WAFMonitoringAPIServer interface {
	// ClientRuleHitsMetrics
	//
	// x-displayName: "Client Rule Hits Metrics"
	// Get number of rule hits per client for a given namespace.
	// The rule hits counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	ClientRuleHitsMetrics(context.Context, *RuleHitsCountRequest) (*RuleHitsCountResponse, error)
	// ServerRuleHitsMetrics
	//
	// x-displayName: "Server Rule Hits Metrics"
	// Get number of rule hits per server for a given namespace.
	// The rule hits counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	ServerRuleHitsMetrics(context.Context, *RuleHitsCountRequest) (*RuleHitsCountResponse, error)
	// ClientSecurityEventsMetrics
	//
	// x-displayName: "Client Security Events Metrics"
	// Get number of security events per client for a given namespace.
	// The security events counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	ClientSecurityEventsMetrics(context.Context, *SecurityEventsCountRequest) (*SecurityEventsCountResponse, error)
	// ServerSecurityEventsMetrics
	//
	// x-displayName: "Server Security Events Metrics"
	// Get number of security events per server for a given namespace.
	// The security events counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	ServerSecurityEventsMetrics(context.Context, *SecurityEventsCountRequest) (*SecurityEventsCountResponse, error)
}

// UnimplementedWAFMonitoringAPIServer can be embedded to have forward compatible implementations.
type UnimplementedWAFMonitoringAPIServer struct {
}

func (*UnimplementedWAFMonitoringAPIServer) ClientRuleHitsMetrics(ctx context.Context, req *RuleHitsCountRequest) (*RuleHitsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRuleHitsMetrics not implemented")
}
func (*UnimplementedWAFMonitoringAPIServer) ServerRuleHitsMetrics(ctx context.Context, req *RuleHitsCountRequest) (*RuleHitsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerRuleHitsMetrics not implemented")
}
func (*UnimplementedWAFMonitoringAPIServer) ClientSecurityEventsMetrics(ctx context.Context, req *SecurityEventsCountRequest) (*SecurityEventsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientSecurityEventsMetrics not implemented")
}
func (*UnimplementedWAFMonitoringAPIServer) ServerSecurityEventsMetrics(ctx context.Context, req *SecurityEventsCountRequest) (*SecurityEventsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerSecurityEventsMetrics not implemented")
}

func RegisterWAFMonitoringAPIServer(s *grpc.Server, srv WAFMonitoringAPIServer) {
	s.RegisterService(&_WAFMonitoringAPI_serviceDesc, srv)
}

func _WAFMonitoringAPI_ClientRuleHitsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleHitsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFMonitoringAPIServer).ClientRuleHitsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.WAFMonitoringAPI/ClientRuleHitsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFMonitoringAPIServer).ClientRuleHitsMetrics(ctx, req.(*RuleHitsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAFMonitoringAPI_ServerRuleHitsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleHitsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFMonitoringAPIServer).ServerRuleHitsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.WAFMonitoringAPI/ServerRuleHitsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFMonitoringAPIServer).ServerRuleHitsMetrics(ctx, req.(*RuleHitsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAFMonitoringAPI_ClientSecurityEventsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityEventsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFMonitoringAPIServer).ClientSecurityEventsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.WAFMonitoringAPI/ClientSecurityEventsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFMonitoringAPIServer).ClientSecurityEventsMetrics(ctx, req.(*SecurityEventsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAFMonitoringAPI_ServerSecurityEventsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityEventsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFMonitoringAPIServer).ServerSecurityEventsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.WAFMonitoringAPI/ServerSecurityEventsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFMonitoringAPIServer).ServerSecurityEventsMetrics(ctx, req.(*SecurityEventsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WAFMonitoringAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.waf.WAFMonitoringAPI",
	HandlerType: (*WAFMonitoringAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientRuleHitsMetrics",
			Handler:    _WAFMonitoringAPI_ClientRuleHitsMetrics_Handler,
		},
		{
			MethodName: "ServerRuleHitsMetrics",
			Handler:    _WAFMonitoringAPI_ServerRuleHitsMetrics_Handler,
		},
		{
			MethodName: "ClientSecurityEventsMetrics",
			Handler:    _WAFMonitoringAPI_ClientSecurityEventsMetrics_Handler,
		},
		{
			MethodName: "ServerSecurityEventsMetrics",
			Handler:    _WAFMonitoringAPI_ServerSecurityEventsMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/waf/public_waf_monitoring.proto",
}

func (m *RuleHitsCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleHitsCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleHitsCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Range) > 0 {
		i -= len(m.Range)
		copy(dAtA[i:], m.Range)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Range)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupBy) > 0 {
		dAtA2 := make([]byte, len(m.GroupBy)*10)
		var j1 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LabelFilter) > 0 {
		for iNdEx := len(m.LabelFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleHitsCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleHitsCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleHitsCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityEventsCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventsCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityEventsCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Range) > 0 {
		i -= len(m.Range)
		copy(dAtA[i:], m.Range)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Range)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupBy) > 0 {
		dAtA4 := make([]byte, len(m.GroupBy)*10)
		var j3 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LabelFilter) > 0 {
		for iNdEx := len(m.LabelFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityEventsCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventsCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityEventsCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricLabelFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricLabelFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricLabelFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Op != 0 {
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x10
	}
	if m.Label != 0 {
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(m.Label))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RuleHitsCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleHitsCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleHitsCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		for iNdEx := len(m.Metric) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metric[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityEventsCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventsCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityEventsCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		for iNdEx := len(m.Metric) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metric[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityEventsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventsId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityEventsId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BotName) > 0 {
		i -= len(m.BotName)
		copy(dAtA[i:], m.BotName)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.BotName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BotType) > 0 {
		i -= len(m.BotType)
		copy(dAtA[i:], m.BotType)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.BotType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.WafMode) > 0 {
		i -= len(m.WafMode)
		copy(dAtA[i:], m.WafMode)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.WafMode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.WafInstanceId) > 0 {
		i -= len(m.WafInstanceId)
		copy(dAtA[i:], m.WafInstanceId)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.WafInstanceId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VirtualHost) > 0 {
		i -= len(m.VirtualHost)
		copy(dAtA[i:], m.VirtualHost)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.VirtualHost)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppType) > 0 {
		i -= len(m.AppType)
		copy(dAtA[i:], m.AppType)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.AppType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleHitsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleHitsId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleHitsId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BotName) > 0 {
		i -= len(m.BotName)
		copy(dAtA[i:], m.BotName)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.BotName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BotType) > 0 {
		i -= len(m.BotType)
		copy(dAtA[i:], m.BotType)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.BotType)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RuleTag) > 0 {
		i -= len(m.RuleTag)
		copy(dAtA[i:], m.RuleTag)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.RuleTag)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RuleSeverity) > 0 {
		i -= len(m.RuleSeverity)
		copy(dAtA[i:], m.RuleSeverity)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.RuleSeverity)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RuleId) > 0 {
		i -= len(m.RuleId)
		copy(dAtA[i:], m.RuleId)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.RuleId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.WafInstanceId) > 0 {
		i -= len(m.WafInstanceId)
		copy(dAtA[i:], m.WafInstanceId)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.WafInstanceId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VirtualHost) > 0 {
		i -= len(m.VirtualHost)
		copy(dAtA[i:], m.VirtualHost)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.VirtualHost)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppType) > 0 {
		i -= len(m.AppType)
		copy(dAtA[i:], m.AppType)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.AppType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicWafMonitoring(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicWafMonitoring(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RuleHitsCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	if len(m.LabelFilter) > 0 {
		for _, e := range m.LabelFilter {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicWafMonitoring(uint64(e))
		}
		n += 1 + sovPublicWafMonitoring(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Range)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func (m *RuleHitsCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func (m *SecurityEventsCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	if len(m.LabelFilter) > 0 {
		for _, e := range m.LabelFilter {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicWafMonitoring(uint64(e))
		}
		n += 1 + sovPublicWafMonitoring(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Range)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func (m *SecurityEventsCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func (m *MetricLabelFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Label != 0 {
		n += 1 + sovPublicWafMonitoring(uint64(m.Label))
	}
	if m.Op != 0 {
		n += 1 + sovPublicWafMonitoring(uint64(m.Op))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func (m *RuleHitsCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	if len(m.Metric) > 0 {
		for _, e := range m.Metric {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	return n
}

func (m *SecurityEventsCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	if len(m.Metric) > 0 {
		for _, e := range m.Metric {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	return n
}

func (m *SecurityEventsId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.AppType)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.VirtualHost)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.WafInstanceId)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.WafMode)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.BotType)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.BotName)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func (m *RuleHitsId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.AppType)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.VirtualHost)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.WafInstanceId)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.RuleId)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.RuleSeverity)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.RuleTag)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.BotType)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.BotName)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func sovPublicWafMonitoring(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicWafMonitoring(x uint64) (n int) {
	return sovPublicWafMonitoring(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RuleHitsCountRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabelFilter := "[]*MetricLabelFilter{"
	for _, f := range this.LabelFilter {
		repeatedStringForLabelFilter += strings.Replace(f.String(), "MetricLabelFilter", "MetricLabelFilter", 1) + ","
	}
	repeatedStringForLabelFilter += "}"
	s := strings.Join([]string{`&RuleHitsCountRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + repeatedStringForLabelFilter + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleHitsCountResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*RuleHitsCounter{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "RuleHitsCounter", "RuleHitsCounter", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&RuleHitsCountResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventsCountRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabelFilter := "[]*MetricLabelFilter{"
	for _, f := range this.LabelFilter {
		repeatedStringForLabelFilter += strings.Replace(f.String(), "MetricLabelFilter", "MetricLabelFilter", 1) + ","
	}
	repeatedStringForLabelFilter += "}"
	s := strings.Join([]string{`&SecurityEventsCountRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + repeatedStringForLabelFilter + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventsCountResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*SecurityEventsCounter{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "SecurityEventsCounter", "SecurityEventsCounter", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&SecurityEventsCountResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricLabelFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricLabelFilter{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleHitsCounter) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetric := "[]*MetricValue{"
	for _, f := range this.Metric {
		repeatedStringForMetric += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForMetric += "}"
	s := strings.Join([]string{`&RuleHitsCounter{`,
		`Id:` + strings.Replace(this.Id.String(), "RuleHitsId", "RuleHitsId", 1) + `,`,
		`Metric:` + repeatedStringForMetric + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventsCounter) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetric := "[]*MetricValue{"
	for _, f := range this.Metric {
		repeatedStringForMetric += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForMetric += "}"
	s := strings.Join([]string{`&SecurityEventsCounter{`,
		`Id:` + strings.Replace(this.Id.String(), "SecurityEventsId", "SecurityEventsId", 1) + `,`,
		`Metric:` + repeatedStringForMetric + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventsId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityEventsId{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`AppType:` + fmt.Sprintf("%v", this.AppType) + `,`,
		`VirtualHost:` + fmt.Sprintf("%v", this.VirtualHost) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`WafInstanceId:` + fmt.Sprintf("%v", this.WafInstanceId) + `,`,
		`WafMode:` + fmt.Sprintf("%v", this.WafMode) + `,`,
		`BotType:` + fmt.Sprintf("%v", this.BotType) + `,`,
		`BotName:` + fmt.Sprintf("%v", this.BotName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleHitsId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuleHitsId{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`AppType:` + fmt.Sprintf("%v", this.AppType) + `,`,
		`VirtualHost:` + fmt.Sprintf("%v", this.VirtualHost) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`WafInstanceId:` + fmt.Sprintf("%v", this.WafInstanceId) + `,`,
		`RuleId:` + fmt.Sprintf("%v", this.RuleId) + `,`,
		`RuleSeverity:` + fmt.Sprintf("%v", this.RuleSeverity) + `,`,
		`RuleTag:` + fmt.Sprintf("%v", this.RuleTag) + `,`,
		`BotType:` + fmt.Sprintf("%v", this.BotType) + `,`,
		`BotName:` + fmt.Sprintf("%v", this.BotName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicWafMonitoring(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RuleHitsCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleHitsCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleHitsCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = append(m.LabelFilter, &MetricLabelFilter{})
			if err := m.LabelFilter[len(m.LabelFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v MetricLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicWafMonitoring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= MetricLabel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicWafMonitoring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicWafMonitoring
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicWafMonitoring
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]MetricLabel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MetricLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicWafMonitoring
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= MetricLabel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Range = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleHitsCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleHitsCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleHitsCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RuleHitsCounter{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventsCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventsCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventsCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = append(m.LabelFilter, &MetricLabelFilter{})
			if err := m.LabelFilter[len(m.LabelFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v MetricLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicWafMonitoring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= MetricLabel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicWafMonitoring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicWafMonitoring
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicWafMonitoring
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]MetricLabel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MetricLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicWafMonitoring
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= MetricLabel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Range = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventsCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventsCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventsCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SecurityEventsCounter{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricLabelFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricLabelFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricLabelFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			m.Label = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label |= MetricLabel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= MetricLabelOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleHitsCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleHitsCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleHitsCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &RuleHitsId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = append(m.Metric, &schema.MetricValue{})
			if err := m.Metric[len(m.Metric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventsCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventsCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventsCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &SecurityEventsId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = append(m.Metric, &schema.MetricValue{})
			if err := m.Metric[len(m.Metric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafInstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafInstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleHitsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleHitsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleHitsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafInstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafInstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleSeverity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleSeverity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicWafMonitoring(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicWafMonitoring
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicWafMonitoring
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicWafMonitoring
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicWafMonitoring        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicWafMonitoring          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicWafMonitoring = fmt.Errorf("proto: unexpected end of group")
)

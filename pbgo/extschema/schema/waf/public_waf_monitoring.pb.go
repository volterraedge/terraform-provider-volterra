// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/waf/public_waf_monitoring.proto

// WAF Monitoring APIs
//
// x-displayName: "WAF"
// APIs to get monitoring information about WAF instances on virtual-host basis.
// It gets data for a given virtual host based on any WAF instance attached to virtual host or route used by virtual host.

package waf

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RuleHitsCountRequest
//
// x-displayName: "Rule Hits Count Request"
// Request to get number of rule hits per client/server for a given namespace.
type RuleHitsCountRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// namespace is used to scope the WAF rule hits for the given namespace.
	// x-example: "bloggin-app-namespace-1"
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Label Filter"
	// List of label filter expressions of the form "label" Op "value".
	// Response will only contain data that matches all the conditions specified in the label_filter.
	// One or more of the following labels can be specified in the label_filter.
	// APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	//
	// Optional: If not specified, then the metrics will be filtered only based on the namespace in the request.
	LabelFilter []*MetricLabelFilter `protobuf:"bytes,2,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by one of more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	//
	// Optional: If not specified, then the rule hits are aggregated/grouped by VIRTUAL_HOST.
	GroupBy []MetricLabel `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.waf.MetricLabel" json:"group_by,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570007981"
	// start time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570007981"
	// end time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,6,opt,name=step,proto3" json:"step,omitempty"`
	// Range
	//
	// x-displayName: "Range"
	// x-example: "50m"
	// range decides how far to go back in time to fetch values for each step.
	// For example, if the range is 5m, then for step t1, query will be evaluated for t1-5m and for
	// t2, query will be evaluated for t2-5m and so on.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Note: For non-timeseries query, i.e., for step=end_time-start_time, range should be set to end_time-start_time
	//
	// Optional: If not specified, range is set to 5m
	Range string `protobuf:"bytes,7,opt,name=range,proto3" json:"range,omitempty"`
}

func (m *RuleHitsCountRequest) Reset()      { *m = RuleHitsCountRequest{} }
func (*RuleHitsCountRequest) ProtoMessage() {}
func (*RuleHitsCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{0}
}
func (m *RuleHitsCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleHitsCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleHitsCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleHitsCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleHitsCountRequest.Merge(m, src)
}
func (m *RuleHitsCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *RuleHitsCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleHitsCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleHitsCountRequest proto.InternalMessageInfo

func (m *RuleHitsCountRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RuleHitsCountRequest) GetLabelFilter() []*MetricLabelFilter {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *RuleHitsCountRequest) GetGroupBy() []MetricLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *RuleHitsCountRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RuleHitsCountRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *RuleHitsCountRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *RuleHitsCountRequest) GetRange() string {
	if m != nil {
		return m.Range
	}
	return ""
}

// RuleHitsCountResponse
//
// x-displayName: "Rule Hits Count Response"
// Number of rule hits for each unique combination of group_by labels in the RuleHitsCountRequest.
type RuleHitsCountResponse struct {
	// Rule hits counter
	//
	// x-displayName: "Rule hits counter"
	// List of rule hits counter data
	Data []*RuleHitsCounter `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *RuleHitsCountResponse) Reset()      { *m = RuleHitsCountResponse{} }
func (*RuleHitsCountResponse) ProtoMessage() {}
func (*RuleHitsCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{1}
}
func (m *RuleHitsCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleHitsCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleHitsCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleHitsCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleHitsCountResponse.Merge(m, src)
}
func (m *RuleHitsCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *RuleHitsCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleHitsCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RuleHitsCountResponse proto.InternalMessageInfo

func (m *RuleHitsCountResponse) GetData() []*RuleHitsCounter {
	if m != nil {
		return m.Data
	}
	return nil
}

// SecurityEventsCountRequest
//
// x-displayName: "Security Events Count Request"
// Request to get number of security events per client/server for a given namespace.
type SecurityEventsCountRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "bloggin-app-namespace-1"
	// namespace is used to scope the WAF security events for the given namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Label Filter"
	// List of label filter expressions of the form "label" Op "value".
	// Response will only contain data that matches all the conditions specified in the label_filter.
	// One or more of the following labels can be specified in the label_filter.
	// APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	//
	// Optional: If not specified, then the metrics will be filtered only based on the namespace in the request.
	LabelFilter []*MetricLabelFilter `protobuf:"bytes,2,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	//
	// Optional: If not specified, then the rule hits are aggregated/grouped by VIRTUAL_HOST.
	GroupBy []MetricLabel `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.waf.MetricLabel" json:"group_by,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570007981"
	// start time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570007981"
	// end time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "15m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,6,opt,name=step,proto3" json:"step,omitempty"`
	// Range
	//
	// x-displayName: "Range"
	// x-example: "45m"
	// range decides how far to go back in time to fetch values for each step.
	// For example, if the range is 5m, then for step t1, query will be evaluated for t1-5m and for
	// t2, query will be evaluated for t2-5m and so on.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Note: For non-timeseries query, i.e., for step=end_time-start_time, range should be set to end_time-start_time
	//
	// Optional: If not specified, range is set to 5m
	Range string `protobuf:"bytes,7,opt,name=range,proto3" json:"range,omitempty"`
}

func (m *SecurityEventsCountRequest) Reset()      { *m = SecurityEventsCountRequest{} }
func (*SecurityEventsCountRequest) ProtoMessage() {}
func (*SecurityEventsCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{2}
}
func (m *SecurityEventsCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityEventsCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityEventsCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityEventsCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityEventsCountRequest.Merge(m, src)
}
func (m *SecurityEventsCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityEventsCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityEventsCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityEventsCountRequest proto.InternalMessageInfo

func (m *SecurityEventsCountRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SecurityEventsCountRequest) GetLabelFilter() []*MetricLabelFilter {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *SecurityEventsCountRequest) GetGroupBy() []MetricLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *SecurityEventsCountRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *SecurityEventsCountRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *SecurityEventsCountRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *SecurityEventsCountRequest) GetRange() string {
	if m != nil {
		return m.Range
	}
	return ""
}

// SecurityEventsCountResponse
//
// x-displayName: "Security Events Count Response"
// Number of security events for each unique combination of group_by labels in the SecurityEventsCountRequest.
type SecurityEventsCountResponse struct {
	// Security events counter data
	//
	// x-displayName: "Security events counter data"
	// List of security events counter data
	Data []*SecurityEventsCounter `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *SecurityEventsCountResponse) Reset()      { *m = SecurityEventsCountResponse{} }
func (*SecurityEventsCountResponse) ProtoMessage() {}
func (*SecurityEventsCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c8c41ebe678456d, []int{3}
}
func (m *SecurityEventsCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityEventsCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityEventsCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityEventsCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityEventsCountResponse.Merge(m, src)
}
func (m *SecurityEventsCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *SecurityEventsCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityEventsCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityEventsCountResponse proto.InternalMessageInfo

func (m *SecurityEventsCountResponse) GetData() []*SecurityEventsCounter {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RuleHitsCountRequest)(nil), "ves.io.schema.waf.RuleHitsCountRequest")
	golang_proto.RegisterType((*RuleHitsCountRequest)(nil), "ves.io.schema.waf.RuleHitsCountRequest")
	proto.RegisterType((*RuleHitsCountResponse)(nil), "ves.io.schema.waf.RuleHitsCountResponse")
	golang_proto.RegisterType((*RuleHitsCountResponse)(nil), "ves.io.schema.waf.RuleHitsCountResponse")
	proto.RegisterType((*SecurityEventsCountRequest)(nil), "ves.io.schema.waf.SecurityEventsCountRequest")
	golang_proto.RegisterType((*SecurityEventsCountRequest)(nil), "ves.io.schema.waf.SecurityEventsCountRequest")
	proto.RegisterType((*SecurityEventsCountResponse)(nil), "ves.io.schema.waf.SecurityEventsCountResponse")
	golang_proto.RegisterType((*SecurityEventsCountResponse)(nil), "ves.io.schema.waf.SecurityEventsCountResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/waf/public_waf_monitoring.proto", fileDescriptor_3c8c41ebe678456d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/waf/public_waf_monitoring.proto", fileDescriptor_3c8c41ebe678456d)
}

var fileDescriptor_3c8c41ebe678456d = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcf, 0x6a, 0x24, 0x45,
	0x1c, 0x9e, 0x9a, 0xc9, 0xee, 0xec, 0xd6, 0x8a, 0x68, 0xb3, 0x91, 0xde, 0xc9, 0xa6, 0x19, 0x1a,
	0xd1, 0x41, 0xec, 0x2e, 0x8c, 0x20, 0x28, 0x7b, 0x49, 0x16, 0x37, 0x0a, 0x2e, 0x2b, 0xb3, 0x82,
	0xa0, 0x87, 0xa1, 0xba, 0xe7, 0x37, 0x9d, 0xd2, 0xee, 0xae, 0xb6, 0xaa, 0xba, 0x27, 0x83, 0x0a,
	0x26, 0x4f, 0x20, 0x78, 0xf5, 0xe4, 0xc9, 0x77, 0xc8, 0x25, 0xb7, 0x78, 0x51, 0x82, 0x5e, 0x72,
	0x74, 0x7a, 0x14, 0x72, 0xcc, 0x23, 0xc8, 0x54, 0xf7, 0x24, 0xe9, 0xcc, 0x60, 0x62, 0x10, 0xbd,
	0xec, 0xad, 0xaa, 0xbe, 0xaf, 0x8a, 0xef, 0x4f, 0x77, 0x15, 0x76, 0x32, 0x90, 0x2e, 0xe3, 0x44,
	0xfa, 0x5b, 0x10, 0x51, 0x32, 0xa4, 0x03, 0x92, 0xa4, 0x5e, 0xc8, 0xfc, 0xde, 0x90, 0x0e, 0x7a,
	0x11, 0x8f, 0x99, 0xe2, 0x82, 0xc5, 0x81, 0x9b, 0x08, 0xae, 0xb8, 0xf1, 0x62, 0x41, 0x77, 0x0b,
	0xba, 0x3b, 0xa4, 0x83, 0x96, 0x13, 0x30, 0xb5, 0x95, 0x7a, 0xae, 0xcf, 0x23, 0x12, 0xf0, 0x80,
	0x13, 0xcd, 0xf4, 0xd2, 0x81, 0x9e, 0xe9, 0x89, 0x1e, 0x15, 0x27, 0xb4, 0xee, 0x07, 0x9c, 0x07,
	0x21, 0x10, 0x9a, 0x30, 0x42, 0xe3, 0x98, 0x2b, 0xaa, 0x18, 0x8f, 0x65, 0x89, 0xae, 0x56, 0xe5,
	0x84, 0x3c, 0x20, 0x6a, 0x94, 0xc0, 0x0c, 0x5e, 0xa9, 0xc2, 0x3c, 0x39, 0xbf, 0xf7, 0x5e, 0x15,
	0x3c, 0xbf, 0xcf, 0xae, 0x42, 0x19, 0x48, 0x88, 0xb3, 0x0b, 0xdb, 0x57, 0xe7, 0x93, 0x38, 0x77,
	0x84, 0xfd, 0x7d, 0x1d, 0xdf, 0xed, 0xa6, 0x21, 0xbc, 0xc7, 0x94, 0x7c, 0xc8, 0xd3, 0x58, 0x75,
	0xe1, 0x8b, 0x14, 0xa4, 0x32, 0xee, 0xe3, 0xdb, 0x31, 0x8d, 0x40, 0x26, 0xd4, 0x07, 0x13, 0xb5,
	0x51, 0xe7, 0x76, 0xf7, 0x6c, 0xc1, 0xd8, 0xc4, 0xcf, 0x85, 0xd4, 0x83, 0xb0, 0x37, 0x60, 0xa1,
	0x02, 0x61, 0xd6, 0xdb, 0x8d, 0xce, 0x9d, 0xb5, 0x97, 0xdd, 0xb9, 0x1c, 0xdd, 0xc7, 0xa0, 0x04,
	0xf3, 0x3f, 0x98, 0x92, 0x1f, 0x69, 0x6e, 0xf7, 0x4e, 0x78, 0x36, 0x31, 0xde, 0xc6, 0xb7, 0x02,
	0xc1, 0xd3, 0xa4, 0xe7, 0x8d, 0xcc, 0x46, 0xbb, 0xd1, 0x79, 0x7e, 0xcd, 0xfa, 0xfb, 0x43, 0xba,
	0x4d, 0xcd, 0xdf, 0x18, 0x19, 0xab, 0x18, 0x4b, 0x45, 0x85, 0xea, 0x29, 0x16, 0x81, 0xb9, 0x54,
	0x48, 0xd4, 0x2b, 0x1f, 0xb1, 0x08, 0x8c, 0x7b, 0xf8, 0x16, 0xc4, 0xfd, 0x02, 0xbc, 0xa1, 0xc1,
	0x26, 0xc4, 0x7d, 0x0d, 0x19, 0x78, 0x49, 0x2a, 0x48, 0xcc, 0x9b, 0x7a, 0x59, 0x8f, 0x8d, 0xbb,
	0xf8, 0x86, 0xa0, 0x71, 0x00, 0x66, 0x53, 0x2f, 0x16, 0x13, 0xfb, 0x09, 0x5e, 0xbe, 0x90, 0x8e,
	0x4c, 0x78, 0x2c, 0xc1, 0x78, 0x0b, 0x2f, 0xf5, 0xa9, 0xa2, 0x26, 0xd2, 0xc6, 0xed, 0x05, 0x9a,
	0x2b, 0xfb, 0x40, 0x74, 0x35, 0xdf, 0xfe, 0xa1, 0x8e, 0x5b, 0x4f, 0xc1, 0x4f, 0x05, 0x53, 0xa3,
	0x77, 0x33, 0x88, 0x9f, 0xa5, 0xbe, 0x20, 0xf5, 0x4f, 0xf1, 0xca, 0xc2, 0x8c, 0xca, 0xec, 0x1f,
	0x54, 0xb2, 0xef, 0x2c, 0x50, 0xbe, 0x60, 0xf7, 0xac, 0x81, 0xb5, 0x71, 0x13, 0xbf, 0xf0, 0xf1,
	0xfa, 0xa3, 0xc7, 0xa7, 0x77, 0xc0, 0xfa, 0x87, 0xef, 0x1b, 0xc7, 0x08, 0x2f, 0x3f, 0x0c, 0x19,
	0xc4, 0x6a, 0x56, 0x5b, 0x61, 0x5e, 0x1a, 0xaf, 0x5e, 0x56, 0x6d, 0x59, 0x5d, 0xab, 0x73, 0x39,
	0xb1, 0xd0, 0x6f, 0x7f, 0x95, 0x1f, 0x98, 0x6f, 0x64, 0x20, 0x1d, 0xc6, 0x9d, 0x44, 0xf0, 0xed,
	0x91, 0x53, 0x5e, 0x48, 0x8e, 0x00, 0xda, 0x7f, 0xbd, 0x5d, 0x81, 0x86, 0x74, 0xe0, 0x0c, 0x05,
	0x53, 0xb0, 0xfb, 0xdb, 0x1f, 0xdf, 0xd5, 0xd7, 0xed, 0x07, 0xe5, 0x45, 0x46, 0x4e, 0x3f, 0x0b,
	0x49, 0xbe, 0x3c, 0x1d, 0x7f, 0x3d, 0xfd, 0xc1, 0x25, 0x89, 0x0a, 0xf1, 0xc4, 0xd7, 0x96, 0x88,
	0x48, 0x43, 0xe8, 0x6d, 0x31, 0x25, 0xdf, 0x41, 0xaf, 0x19, 0x3f, 0x23, 0xbc, 0xfc, 0x14, 0x44,
	0x06, 0xe2, 0x3f, 0xb0, 0x4a, 0xf3, 0x03, 0xf3, 0xa5, 0x7f, 0xcf, 0x8f, 0xd4, 0xba, 0xab, 0x7e,
	0x76, 0xea, 0x78, 0xa5, 0xa8, 0xae, 0xda, 0xfa, 0xcc, 0x95, 0x73, 0xb5, 0xef, 0x63, 0xe6, 0xcd,
	0xbd, 0x2a, 0xbd, 0x74, 0xb8, 0x8b, 0xae, 0xdf, 0xe6, 0xa6, 0xbd, 0x71, 0x8d, 0x36, 0x65, 0xa9,
	0xa6, 0x07, 0x5a, 0xce, 0x34, 0x83, 0x3f, 0xd1, 0xf4, 0x8f, 0x99, 0x66, 0xf3, 0xbf, 0x64, 0x10,
	0x5c, 0xd2, 0xf2, 0x3f, 0xf4, 0x59, 0xb6, 0x3c, 0xef, 0xb3, 0xf5, 0xca, 0xfe, 0x1e, 0x6a, 0xfc,
	0xba, 0x87, 0xcc, 0x79, 0x7d, 0x4f, 0xbc, 0xcf, 0xc0, 0x57, 0xbb, 0xbf, 0x98, 0x75, 0x13, 0x6d,
	0xec, 0xa0, 0xc3, 0xb1, 0x55, 0x3b, 0x1a, 0x5b, 0xb5, 0x93, 0xb1, 0x85, 0xbe, 0xc9, 0x2d, 0xf4,
	0x63, 0x6e, 0xa1, 0x9f, 0x72, 0x0b, 0x1d, 0xe6, 0x16, 0xfa, 0x3d, 0xb7, 0xd0, 0x71, 0x6e, 0xd5,
	0x4e, 0x72, 0x0b, 0x7d, 0x3b, 0xb1, 0x6a, 0xfb, 0x13, 0x0b, 0x1d, 0x4e, 0xac, 0xda, 0xd1, 0xc4,
	0xaa, 0x7d, 0xb2, 0x19, 0xf0, 0xe4, 0xf3, 0xc0, 0xcd, 0xf8, 0xf4, 0xa2, 0x14, 0xd4, 0x4d, 0x25,
	0xd1, 0x83, 0x01, 0x17, 0xd1, 0xd4, 0x5c, 0xc6, 0xfa, 0x20, 0x9c, 0x19, 0x4c, 0x12, 0x2f, 0xe0,
	0x04, 0xb6, 0x55, 0xf9, 0xbc, 0x9e, 0xbd, 0xb2, 0xde, 0x4d, 0xfd, 0xc0, 0xbe, 0xf9, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xce, 0xb7, 0xdd, 0xf8, 0x8b, 0x08, 0x00, 0x00,
}

func (this *RuleHitsCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleHitsCountRequest)
	if !ok {
		that2, ok := that.(RuleHitsCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.LabelFilter) != len(that1.LabelFilter) {
		return false
	}
	for i := range this.LabelFilter {
		if !this.LabelFilter[i].Equal(that1.LabelFilter[i]) {
			return false
		}
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	return true
}
func (this *RuleHitsCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleHitsCountResponse)
	if !ok {
		that2, ok := that.(RuleHitsCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityEventsCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventsCountRequest)
	if !ok {
		that2, ok := that.(SecurityEventsCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.LabelFilter) != len(that1.LabelFilter) {
		return false
	}
	for i := range this.LabelFilter {
		if !this.LabelFilter[i].Equal(that1.LabelFilter[i]) {
			return false
		}
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	return true
}
func (this *SecurityEventsCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityEventsCountResponse)
	if !ok {
		that2, ok := that.(SecurityEventsCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *RuleHitsCountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&waf.RuleHitsCountRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RuleHitsCountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf.RuleHitsCountResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventsCountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&waf.SecurityEventsCountRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityEventsCountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf.SecurityEventsCountResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicWafMonitoring(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WAFMonitoringAPIClient is the client API for WAFMonitoringAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WAFMonitoringAPIClient interface {
	// ClientRuleHitsMetrics
	//
	// x-displayName: "Client Rule Hits Metrics"
	// Get number of rule hits per client for a given namespace.
	// The rule hits counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	ClientRuleHitsMetrics(ctx context.Context, in *RuleHitsCountRequest, opts ...grpc.CallOption) (*RuleHitsCountResponse, error)
	// ServerRuleHitsMetrics
	//
	// x-displayName: "Server Rule Hits Metrics"
	// Get number of rule hits per server for a given namespace.
	// The rule hits counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	ServerRuleHitsMetrics(ctx context.Context, in *RuleHitsCountRequest, opts ...grpc.CallOption) (*RuleHitsCountResponse, error)
	// ClientSecurityEventsMetrics
	//
	// x-displayName: "Client Security Events Metrics"
	// Get number of security events per client for a given namespace.
	// The security events counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	ClientSecurityEventsMetrics(ctx context.Context, in *SecurityEventsCountRequest, opts ...grpc.CallOption) (*SecurityEventsCountResponse, error)
	// ServerSecurityEventsMetrics
	//
	// x-displayName: "Server Security Events Metrics"
	// Get number of security events per server for a given namespace.
	// The security events counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	ServerSecurityEventsMetrics(ctx context.Context, in *SecurityEventsCountRequest, opts ...grpc.CallOption) (*SecurityEventsCountResponse, error)
}

type wAFMonitoringAPIClient struct {
	cc *grpc.ClientConn
}

func NewWAFMonitoringAPIClient(cc *grpc.ClientConn) WAFMonitoringAPIClient {
	return &wAFMonitoringAPIClient{cc}
}

func (c *wAFMonitoringAPIClient) ClientRuleHitsMetrics(ctx context.Context, in *RuleHitsCountRequest, opts ...grpc.CallOption) (*RuleHitsCountResponse, error) {
	out := new(RuleHitsCountResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.WAFMonitoringAPI/ClientRuleHitsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAFMonitoringAPIClient) ServerRuleHitsMetrics(ctx context.Context, in *RuleHitsCountRequest, opts ...grpc.CallOption) (*RuleHitsCountResponse, error) {
	out := new(RuleHitsCountResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.WAFMonitoringAPI/ServerRuleHitsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAFMonitoringAPIClient) ClientSecurityEventsMetrics(ctx context.Context, in *SecurityEventsCountRequest, opts ...grpc.CallOption) (*SecurityEventsCountResponse, error) {
	out := new(SecurityEventsCountResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.WAFMonitoringAPI/ClientSecurityEventsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAFMonitoringAPIClient) ServerSecurityEventsMetrics(ctx context.Context, in *SecurityEventsCountRequest, opts ...grpc.CallOption) (*SecurityEventsCountResponse, error) {
	out := new(SecurityEventsCountResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.WAFMonitoringAPI/ServerSecurityEventsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WAFMonitoringAPIServer is the server API for WAFMonitoringAPI service.
type WAFMonitoringAPIServer interface {
	// ClientRuleHitsMetrics
	//
	// x-displayName: "Client Rule Hits Metrics"
	// Get number of rule hits per client for a given namespace.
	// The rule hits counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	ClientRuleHitsMetrics(context.Context, *RuleHitsCountRequest) (*RuleHitsCountResponse, error)
	// ServerRuleHitsMetrics
	//
	// x-displayName: "Server Rule Hits Metrics"
	// Get number of rule hits per server for a given namespace.
	// The rule hits counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, RULE_ID, RULE_SEVERITY, RULE_TAG.
	ServerRuleHitsMetrics(context.Context, *RuleHitsCountRequest) (*RuleHitsCountResponse, error)
	// ClientSecurityEventsMetrics
	//
	// x-displayName: "Client Security Events Metrics"
	// Get number of security events per client for a given namespace.
	// The security events counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	ClientSecurityEventsMetrics(context.Context, *SecurityEventsCountRequest) (*SecurityEventsCountResponse, error)
	// ServerSecurityEventsMetrics
	//
	// x-displayName: "Server Security Events Metrics"
	// Get number of security events per server for a given namespace.
	// The security events counter can be aggregated based on one or more labels listed here.
	// NAMESPACE, APP_TYPE, VIRTUAL_HOST, SITE, SERVICE, INSTANCE, WAF_INSTANCE_ID, WAF_MODE.
	ServerSecurityEventsMetrics(context.Context, *SecurityEventsCountRequest) (*SecurityEventsCountResponse, error)
}

// UnimplementedWAFMonitoringAPIServer can be embedded to have forward compatible implementations.
type UnimplementedWAFMonitoringAPIServer struct {
}

func (*UnimplementedWAFMonitoringAPIServer) ClientRuleHitsMetrics(ctx context.Context, req *RuleHitsCountRequest) (*RuleHitsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRuleHitsMetrics not implemented")
}
func (*UnimplementedWAFMonitoringAPIServer) ServerRuleHitsMetrics(ctx context.Context, req *RuleHitsCountRequest) (*RuleHitsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerRuleHitsMetrics not implemented")
}
func (*UnimplementedWAFMonitoringAPIServer) ClientSecurityEventsMetrics(ctx context.Context, req *SecurityEventsCountRequest) (*SecurityEventsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientSecurityEventsMetrics not implemented")
}
func (*UnimplementedWAFMonitoringAPIServer) ServerSecurityEventsMetrics(ctx context.Context, req *SecurityEventsCountRequest) (*SecurityEventsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerSecurityEventsMetrics not implemented")
}

func RegisterWAFMonitoringAPIServer(s *grpc.Server, srv WAFMonitoringAPIServer) {
	s.RegisterService(&_WAFMonitoringAPI_serviceDesc, srv)
}

func _WAFMonitoringAPI_ClientRuleHitsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleHitsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFMonitoringAPIServer).ClientRuleHitsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.WAFMonitoringAPI/ClientRuleHitsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFMonitoringAPIServer).ClientRuleHitsMetrics(ctx, req.(*RuleHitsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAFMonitoringAPI_ServerRuleHitsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleHitsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFMonitoringAPIServer).ServerRuleHitsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.WAFMonitoringAPI/ServerRuleHitsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFMonitoringAPIServer).ServerRuleHitsMetrics(ctx, req.(*RuleHitsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAFMonitoringAPI_ClientSecurityEventsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityEventsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFMonitoringAPIServer).ClientSecurityEventsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.WAFMonitoringAPI/ClientSecurityEventsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFMonitoringAPIServer).ClientSecurityEventsMetrics(ctx, req.(*SecurityEventsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAFMonitoringAPI_ServerSecurityEventsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityEventsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAFMonitoringAPIServer).ServerSecurityEventsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.WAFMonitoringAPI/ServerSecurityEventsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAFMonitoringAPIServer).ServerSecurityEventsMetrics(ctx, req.(*SecurityEventsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WAFMonitoringAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.waf.WAFMonitoringAPI",
	HandlerType: (*WAFMonitoringAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientRuleHitsMetrics",
			Handler:    _WAFMonitoringAPI_ClientRuleHitsMetrics_Handler,
		},
		{
			MethodName: "ServerRuleHitsMetrics",
			Handler:    _WAFMonitoringAPI_ServerRuleHitsMetrics_Handler,
		},
		{
			MethodName: "ClientSecurityEventsMetrics",
			Handler:    _WAFMonitoringAPI_ClientSecurityEventsMetrics_Handler,
		},
		{
			MethodName: "ServerSecurityEventsMetrics",
			Handler:    _WAFMonitoringAPI_ServerSecurityEventsMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/waf/public_waf_monitoring.proto",
}

func (m *RuleHitsCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleHitsCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleHitsCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Range) > 0 {
		i -= len(m.Range)
		copy(dAtA[i:], m.Range)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Range)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupBy) > 0 {
		dAtA2 := make([]byte, len(m.GroupBy)*10)
		var j1 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LabelFilter) > 0 {
		for iNdEx := len(m.LabelFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleHitsCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleHitsCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleHitsCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityEventsCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventsCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityEventsCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Range) > 0 {
		i -= len(m.Range)
		copy(dAtA[i:], m.Range)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Range)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupBy) > 0 {
		dAtA4 := make([]byte, len(m.GroupBy)*10)
		var j3 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LabelFilter) > 0 {
		for iNdEx := len(m.LabelFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityEventsCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityEventsCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityEventsCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicWafMonitoring(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicWafMonitoring(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicWafMonitoring(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RuleHitsCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	if len(m.LabelFilter) > 0 {
		for _, e := range m.LabelFilter {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicWafMonitoring(uint64(e))
		}
		n += 1 + sovPublicWafMonitoring(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Range)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func (m *RuleHitsCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	return n
}

func (m *SecurityEventsCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	if len(m.LabelFilter) > 0 {
		for _, e := range m.LabelFilter {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicWafMonitoring(uint64(e))
		}
		n += 1 + sovPublicWafMonitoring(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	l = len(m.Range)
	if l > 0 {
		n += 1 + l + sovPublicWafMonitoring(uint64(l))
	}
	return n
}

func (m *SecurityEventsCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicWafMonitoring(uint64(l))
		}
	}
	return n
}

func sovPublicWafMonitoring(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicWafMonitoring(x uint64) (n int) {
	return sovPublicWafMonitoring(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RuleHitsCountRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabelFilter := "[]*MetricLabelFilter{"
	for _, f := range this.LabelFilter {
		repeatedStringForLabelFilter += strings.Replace(fmt.Sprintf("%v", f), "MetricLabelFilter", "MetricLabelFilter", 1) + ","
	}
	repeatedStringForLabelFilter += "}"
	s := strings.Join([]string{`&RuleHitsCountRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + repeatedStringForLabelFilter + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuleHitsCountResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*RuleHitsCounter{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(fmt.Sprintf("%v", f), "RuleHitsCounter", "RuleHitsCounter", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&RuleHitsCountResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventsCountRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabelFilter := "[]*MetricLabelFilter{"
	for _, f := range this.LabelFilter {
		repeatedStringForLabelFilter += strings.Replace(fmt.Sprintf("%v", f), "MetricLabelFilter", "MetricLabelFilter", 1) + ","
	}
	repeatedStringForLabelFilter += "}"
	s := strings.Join([]string{`&SecurityEventsCountRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + repeatedStringForLabelFilter + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityEventsCountResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*SecurityEventsCounter{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(fmt.Sprintf("%v", f), "SecurityEventsCounter", "SecurityEventsCounter", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&SecurityEventsCountResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicWafMonitoring(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RuleHitsCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleHitsCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleHitsCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = append(m.LabelFilter, &MetricLabelFilter{})
			if err := m.LabelFilter[len(m.LabelFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v MetricLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicWafMonitoring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= MetricLabel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicWafMonitoring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicWafMonitoring
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicWafMonitoring
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]MetricLabel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MetricLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicWafMonitoring
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= MetricLabel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Range = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleHitsCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleHitsCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleHitsCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RuleHitsCounter{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventsCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventsCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventsCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = append(m.LabelFilter, &MetricLabelFilter{})
			if err := m.LabelFilter[len(m.LabelFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v MetricLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicWafMonitoring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= MetricLabel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicWafMonitoring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicWafMonitoring
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicWafMonitoring
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]MetricLabel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MetricLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicWafMonitoring
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= MetricLabel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Range = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityEventsCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityEventsCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityEventsCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SecurityEventsCounter{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicWafMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicWafMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicWafMonitoring(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicWafMonitoring
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicWafMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicWafMonitoring
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicWafMonitoring
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicWafMonitoring
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicWafMonitoring        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicWafMonitoring          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicWafMonitoring = fmt.Errorf("proto: unexpected end of group")
)

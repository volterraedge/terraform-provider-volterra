// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/waf/public_customapi.proto

// WAF object
//
// x-displayName: "WAF"
// WAF Object to configure a WAF instance which can be associated with virtual_hosts or routes.

package waf

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	waf_rules "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rules"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VirtualHostWafStatusReq
//
// x-displayName: "Virtual Host WAF Status Request"
// Request to get the detailed WAF configuration defined for all waf instances for a given virtual_host
// object identified by (Namespace, Name)
type VirtualHostWafStatusReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app-namespace-1"
	// Namespace of the virtual host
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "greatblogs-vhost"
	// Name of the virtual host for which waf status is requested
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *VirtualHostWafStatusReq) Reset()      { *m = VirtualHostWafStatusReq{} }
func (*VirtualHostWafStatusReq) ProtoMessage() {}
func (*VirtualHostWafStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7cc0c6cbfadd3d9, []int{0}
}
func (m *VirtualHostWafStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualHostWafStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualHostWafStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualHostWafStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHostWafStatusReq.Merge(m, src)
}
func (m *VirtualHostWafStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *VirtualHostWafStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHostWafStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHostWafStatusReq proto.InternalMessageInfo

func (m *VirtualHostWafStatusReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *VirtualHostWafStatusReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// WAF Status
//
// x-displayName: "WAF Status"
// A list of detailed rule configurations currently enabled for a WAF instance.
type WafStatus struct {
	// WAF Instance
	//
	// x-displayName: "WAF Instance"
	// WAF instance associated with this virtual host.
	WafRef []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=waf_ref,json=wafRef,proto3" json:"waf_ref,omitempty"`
	// WAF Rules Instance
	//
	// x-displayName: "WAF Rules Instance"
	// WAF Rules instance associated with this virtual host.
	WafRulesRef []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=waf_rules_ref,json=wafRulesRef,proto3" json:"waf_rules_ref,omitempty"`
	// WAF Rules Status
	//
	// x-displayName: "WAF Rules Status"
	// WAF rules configured for this waf instance
	WafRulesStatus []*waf_rules.WafRulesStatus `protobuf:"bytes,3,rep,name=waf_rules_status,json=wafRulesStatus,proto3" json:"waf_rules_status,omitempty"`
}

func (m *WafStatus) Reset()      { *m = WafStatus{} }
func (*WafStatus) ProtoMessage() {}
func (*WafStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7cc0c6cbfadd3d9, []int{1}
}
func (m *WafStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WafStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WafStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WafStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WafStatus.Merge(m, src)
}
func (m *WafStatus) XXX_Size() int {
	return m.Size()
}
func (m *WafStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WafStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WafStatus proto.InternalMessageInfo

func (m *WafStatus) GetWafRef() []*schema.ObjectRefType {
	if m != nil {
		return m.WafRef
	}
	return nil
}

func (m *WafStatus) GetWafRulesRef() []*schema.ObjectRefType {
	if m != nil {
		return m.WafRulesRef
	}
	return nil
}

func (m *WafStatus) GetWafRulesStatus() []*waf_rules.WafRulesStatus {
	if m != nil {
		return m.WafRulesStatus
	}
	return nil
}

// Virtual Host WAF Status Response
//
// x-displayName: "Virtual Host WAF Rules Status Response"
// Response is a list of detailed rule configurations currently enabled for the given virtual_host.
type VirtualHostWafStatusRsp struct {
	// Virtual Host WAF Status
	//
	// x-displayName: "Virtual Host WAF Status"
	// Detailed configuration of all WAF instances under this virtual host
	WafStatus []*WafStatus `protobuf:"bytes,1,rep,name=waf_status,json=wafStatus,proto3" json:"waf_status,omitempty"`
}

func (m *VirtualHostWafStatusRsp) Reset()      { *m = VirtualHostWafStatusRsp{} }
func (*VirtualHostWafStatusRsp) ProtoMessage() {}
func (*VirtualHostWafStatusRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7cc0c6cbfadd3d9, []int{2}
}
func (m *VirtualHostWafStatusRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualHostWafStatusRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualHostWafStatusRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualHostWafStatusRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHostWafStatusRsp.Merge(m, src)
}
func (m *VirtualHostWafStatusRsp) XXX_Size() int {
	return m.Size()
}
func (m *VirtualHostWafStatusRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHostWafStatusRsp.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHostWafStatusRsp proto.InternalMessageInfo

func (m *VirtualHostWafStatusRsp) GetWafStatus() []*WafStatus {
	if m != nil {
		return m.WafStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*VirtualHostWafStatusReq)(nil), "ves.io.schema.waf.VirtualHostWafStatusReq")
	golang_proto.RegisterType((*VirtualHostWafStatusReq)(nil), "ves.io.schema.waf.VirtualHostWafStatusReq")
	proto.RegisterType((*WafStatus)(nil), "ves.io.schema.waf.WafStatus")
	golang_proto.RegisterType((*WafStatus)(nil), "ves.io.schema.waf.WafStatus")
	proto.RegisterType((*VirtualHostWafStatusRsp)(nil), "ves.io.schema.waf.VirtualHostWafStatusRsp")
	golang_proto.RegisterType((*VirtualHostWafStatusRsp)(nil), "ves.io.schema.waf.VirtualHostWafStatusRsp")
}

func init() {
	proto.RegisterFile("ves.io/schema/waf/public_customapi.proto", fileDescriptor_a7cc0c6cbfadd3d9)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/waf/public_customapi.proto", fileDescriptor_a7cc0c6cbfadd3d9)
}

var fileDescriptor_a7cc0c6cbfadd3d9 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x89, 0x54, 0x32, 0x55, 0xa9, 0xab, 0x60, 0x8c, 0x71, 0x28, 0xb9, 0x58, 0x84,
	0xcc, 0x40, 0x3d, 0x4a, 0x11, 0xeb, 0x41, 0x45, 0xf0, 0x47, 0x94, 0x16, 0xbc, 0xd4, 0xc9, 0xf6,
	0xed, 0x76, 0x75, 0x77, 0x67, 0xdc, 0x99, 0xdd, 0x58, 0x24, 0xa0, 0xfd, 0x0b, 0x04, 0xff, 0x09,
	0xe9, 0x5f, 0x20, 0x78, 0xe9, 0xcd, 0x9e, 0x24, 0xe0, 0xa5, 0x47, 0xbb, 0xf1, 0x20, 0x82, 0xd0,
	0x3f, 0x41, 0x32, 0xbb, 0xdd, 0x34, 0x4d, 0x03, 0xbd, 0x2c, 0xef, 0xed, 0xe7, 0xbd, 0xef, 0xbc,
	0x79, 0xf3, 0x1e, 0x5e, 0x48, 0x40, 0x51, 0x4f, 0x30, 0x65, 0x6f, 0x40, 0xc0, 0x59, 0x97, 0x3b,
	0x4c, 0xc6, 0x1d, 0xdf, 0xb3, 0xd7, 0xec, 0x58, 0x69, 0x11, 0x70, 0xe9, 0x51, 0x19, 0x09, 0x2d,
	0xac, 0x8b, 0x59, 0x24, 0xcd, 0x22, 0x69, 0x97, 0x3b, 0xf5, 0x96, 0xeb, 0xe9, 0x8d, 0xb8, 0x43,
	0x6d, 0x11, 0x30, 0x57, 0xb8, 0x82, 0x99, 0xc8, 0x4e, 0xec, 0x18, 0xcf, 0x38, 0xc6, 0xca, 0x14,
	0xea, 0x0d, 0x57, 0x08, 0xd7, 0x07, 0xc6, 0xa5, 0xc7, 0x78, 0x18, 0x0a, 0xcd, 0xb5, 0x27, 0x42,
	0x95, 0xd3, 0x6b, 0x39, 0x2d, 0x34, 0x20, 0x90, 0x7a, 0xf3, 0x10, 0x8e, 0x97, 0x29, 0xe4, 0xd1,
	0xcc, 0xab, 0xe3, 0x50, 0x6f, 0x4a, 0x38, 0x44, 0x8d, 0x71, 0x94, 0x70, 0xdf, 0x5b, 0xe7, 0x1a,
	0x72, 0xda, 0x3c, 0x46, 0x41, 0x41, 0x98, 0x1c, 0x13, 0x27, 0x93, 0x0d, 0x12, 0x9d, 0xd7, 0x60,
	0xeb, 0x9c, 0x5f, 0x9f, 0xe4, 0x47, 0x0b, 0xa0, 0x13, 0x78, 0x2d, 0x8a, 0x7d, 0x50, 0x53, 0xba,
	0xdc, 0x7c, 0x84, 0xaf, 0xac, 0x78, 0x91, 0x8e, 0xb9, 0xff, 0x40, 0x28, 0xbd, 0xca, 0x9d, 0xe7,
	0x9a, 0xeb, 0x58, 0xb5, 0xe1, 0xad, 0xd5, 0xc0, 0xd5, 0x90, 0x07, 0xa0, 0x24, 0xb7, 0xa1, 0x86,
	0xe6, 0xd1, 0x42, 0xb5, 0x3d, 0xfa, 0x61, 0x59, 0xf8, 0xcc, 0xd0, 0xa9, 0x95, 0x0d, 0x30, 0x76,
	0xf3, 0x1f, 0xc2, 0xd5, 0x42, 0xc2, 0x5a, 0xc2, 0x67, 0xcd, 0xf1, 0xe0, 0xd4, 0xd0, 0x7c, 0x65,
	0x61, 0x76, 0xb1, 0x41, 0xc7, 0x9f, 0xf4, 0x89, 0xb9, 0x57, 0x1b, 0x9c, 0x17, 0x9b, 0x12, 0x96,
	0x67, 0xb6, 0x7b, 0x95, 0x2e, 0x77, 0xda, 0x33, 0xc3, 0x0f, 0x38, 0xd6, 0x63, 0x7c, 0xbe, 0xa8,
	0xde, 0x88, 0x94, 0x4f, 0x21, 0x72, 0x6e, 0xbb, 0x57, 0x2d, 0xb2, 0xda, 0xb3, 0x43, 0x29, 0x63,
	0x81, 0x63, 0x3d, 0xc3, 0x73, 0x23, 0x3d, 0x65, 0x4a, 0xac, 0x55, 0x8c, 0xe4, 0x0d, 0x3a, 0x31,
	0x6a, 0x59, 0x18, 0x5d, 0xcd, 0xf3, 0xf3, 0xa6, 0x5c, 0xe8, 0x8e, 0xf9, 0xcd, 0x95, 0x29, 0xcd,
	0x53, 0xd2, 0xba, 0x8d, 0xf1, 0x50, 0x26, 0x3f, 0xe7, 0xe4, 0xfb, 0x77, 0xb9, 0x43, 0x47, 0x49,
	0xc3, 0xba, 0x33, 0x73, 0xf1, 0x2f, 0xc2, 0xd5, 0x7b, 0xe6, 0xa1, 0xee, 0x3e, 0x7d, 0x68, 0xf5,
	0x11, 0xbe, 0x7c, 0xd2, 0x31, 0xd6, 0xcd, 0x13, 0xf4, 0xa6, 0x3c, 0x66, 0xfd, 0xd4, 0xb1, 0x4a,
	0x36, 0x5f, 0xed, 0x7e, 0x2d, 0xa3, 0xf4, 0x7b, 0xed, 0x52, 0x02, 0xaa, 0xe5, 0x89, 0x96, 0x0b,
	0x21, 0x44, 0xdc, 0x6f, 0x45, 0xc0, 0xd7, 0xb7, 0x7e, 0xfe, 0xfe, 0x5c, 0xbe, 0x63, 0x2d, 0xe5,
	0xf3, 0xc4, 0x8a, 0x81, 0x50, 0xec, 0x7d, 0x61, 0xf7, 0xcc, 0x58, 0x26, 0x99, 0xfc, 0xda, 0x86,
	0x50, 0x9a, 0x65, 0x8d, 0xc8, 0x62, 0x7a, 0x75, 0xbc, 0xf3, 0x0d, 0x55, 0xb6, 0x7e, 0xd4, 0xca,
	0x73, 0x68, 0xf9, 0x23, 0xea, 0xef, 0x93, 0xd2, 0xde, 0x3e, 0x29, 0x1d, 0xec, 0x13, 0xf4, 0x21,
	0x25, 0xe8, 0x4b, 0x4a, 0xd0, 0x6e, 0x4a, 0x50, 0x3f, 0x25, 0xe8, 0x57, 0x4a, 0xd0, 0x9f, 0x94,
	0x94, 0x0e, 0x52, 0x82, 0x3e, 0x0d, 0x48, 0x69, 0x67, 0x40, 0x50, 0x7f, 0x40, 0x4a, 0x7b, 0x03,
	0x52, 0x7a, 0x79, 0xdf, 0x15, 0xf2, 0x8d, 0x4b, 0x13, 0xe1, 0x6b, 0x88, 0x22, 0x4e, 0x63, 0xc5,
	0x8c, 0xe1, 0x88, 0x28, 0x68, 0xc9, 0x48, 0x24, 0xde, 0x3a, 0x44, 0xad, 0x43, 0xcc, 0x64, 0xc7,
	0x15, 0x0c, 0xde, 0xe9, 0x7c, 0x37, 0x46, 0x2b, 0xd2, 0x99, 0x31, 0xcb, 0x70, 0xeb, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x27, 0x9a, 0xbc, 0x87, 0x9e, 0x04, 0x00, 0x00,
}

func (this *VirtualHostWafStatusReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostWafStatusReq)
	if !ok {
		that2, ok := that.(VirtualHostWafStatusReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *WafStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafStatus)
	if !ok {
		that2, ok := that.(WafStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WafRef) != len(that1.WafRef) {
		return false
	}
	for i := range this.WafRef {
		if !this.WafRef[i].Equal(that1.WafRef[i]) {
			return false
		}
	}
	if len(this.WafRulesRef) != len(that1.WafRulesRef) {
		return false
	}
	for i := range this.WafRulesRef {
		if !this.WafRulesRef[i].Equal(that1.WafRulesRef[i]) {
			return false
		}
	}
	if len(this.WafRulesStatus) != len(that1.WafRulesStatus) {
		return false
	}
	for i := range this.WafRulesStatus {
		if !this.WafRulesStatus[i].Equal(that1.WafRulesStatus[i]) {
			return false
		}
	}
	return true
}
func (this *VirtualHostWafStatusRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostWafStatusRsp)
	if !ok {
		that2, ok := that.(VirtualHostWafStatusRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WafStatus) != len(that1.WafStatus) {
		return false
	}
	for i := range this.WafStatus {
		if !this.WafStatus[i].Equal(that1.WafStatus[i]) {
			return false
		}
	}
	return true
}
func (this *VirtualHostWafStatusReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&waf.VirtualHostWafStatusReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WafStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf.WafStatus{")
	if this.WafRef != nil {
		s = append(s, "WafRef: "+fmt.Sprintf("%#v", this.WafRef)+",\n")
	}
	if this.WafRulesRef != nil {
		s = append(s, "WafRulesRef: "+fmt.Sprintf("%#v", this.WafRulesRef)+",\n")
	}
	if this.WafRulesStatus != nil {
		s = append(s, "WafRulesStatus: "+fmt.Sprintf("%#v", this.WafRulesStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualHostWafStatusRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&waf.VirtualHostWafStatusRsp{")
	if this.WafStatus != nil {
		s = append(s, "WafStatus: "+fmt.Sprintf("%#v", this.WafStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Virtual Host WAF Status
	//
	// x-displayName: "Virtual Host WAF Status"
	// Virtual Host WAF Status API is used to get information about the exact configuration, including
	// a list of waf instances and their respective waf-rules that are currently configured for various
	// routes on a given virtual_host identified by (Namespace, Name).
	VirtualHostWafStatus(ctx context.Context, in *VirtualHostWafStatusReq, opts ...grpc.CallOption) (*VirtualHostWafStatusRsp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) VirtualHostWafStatus(ctx context.Context, in *VirtualHostWafStatusReq, opts ...grpc.CallOption) (*VirtualHostWafStatusRsp, error) {
	out := new(VirtualHostWafStatusRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.waf.CustomAPI/VirtualHostWafStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Virtual Host WAF Status
	//
	// x-displayName: "Virtual Host WAF Status"
	// Virtual Host WAF Status API is used to get information about the exact configuration, including
	// a list of waf instances and their respective waf-rules that are currently configured for various
	// routes on a given virtual_host identified by (Namespace, Name).
	VirtualHostWafStatus(context.Context, *VirtualHostWafStatusReq) (*VirtualHostWafStatusRsp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) VirtualHostWafStatus(ctx context.Context, req *VirtualHostWafStatusReq) (*VirtualHostWafStatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualHostWafStatus not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_VirtualHostWafStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualHostWafStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).VirtualHostWafStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.waf.CustomAPI/VirtualHostWafStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).VirtualHostWafStatus(ctx, req.(*VirtualHostWafStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.waf.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VirtualHostWafStatus",
			Handler:    _CustomAPI_VirtualHostWafStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/waf/public_customapi.proto",
}

func (m *VirtualHostWafStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualHostWafStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualHostWafStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WafStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WafStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WafRulesStatus) > 0 {
		for iNdEx := len(m.WafRulesStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafRulesStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WafRulesRef) > 0 {
		for iNdEx := len(m.WafRulesRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafRulesRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WafRef) > 0 {
		for iNdEx := len(m.WafRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VirtualHostWafStatusRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualHostWafStatusRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualHostWafStatusRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WafStatus) > 0 {
		for iNdEx := len(m.WafStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VirtualHostWafStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *WafStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WafRef) > 0 {
		for _, e := range m.WafRef {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.WafRulesRef) > 0 {
		for _, e := range m.WafRulesRef {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.WafRulesStatus) > 0 {
		for _, e := range m.WafRulesStatus {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *VirtualHostWafStatusRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WafStatus) > 0 {
		for _, e := range m.WafStatus {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VirtualHostWafStatusReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualHostWafStatusReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWafRef := "[]*ObjectRefType{"
	for _, f := range this.WafRef {
		repeatedStringForWafRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForWafRef += "}"
	repeatedStringForWafRulesRef := "[]*ObjectRefType{"
	for _, f := range this.WafRulesRef {
		repeatedStringForWafRulesRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForWafRulesRef += "}"
	repeatedStringForWafRulesStatus := "[]*WafRulesStatus{"
	for _, f := range this.WafRulesStatus {
		repeatedStringForWafRulesStatus += strings.Replace(fmt.Sprintf("%v", f), "WafRulesStatus", "waf_rules.WafRulesStatus", 1) + ","
	}
	repeatedStringForWafRulesStatus += "}"
	s := strings.Join([]string{`&WafStatus{`,
		`WafRef:` + repeatedStringForWafRef + `,`,
		`WafRulesRef:` + repeatedStringForWafRulesRef + `,`,
		`WafRulesStatus:` + repeatedStringForWafRulesStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualHostWafStatusRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWafStatus := "[]*WafStatus{"
	for _, f := range this.WafStatus {
		repeatedStringForWafStatus += strings.Replace(f.String(), "WafStatus", "WafStatus", 1) + ","
	}
	repeatedStringForWafStatus += "}"
	s := strings.Join([]string{`&VirtualHostWafStatusRsp{`,
		`WafStatus:` + repeatedStringForWafStatus + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VirtualHostWafStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualHostWafStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualHostWafStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WafStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WafStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WafStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafRef = append(m.WafRef, &schema.ObjectRefType{})
			if err := m.WafRef[len(m.WafRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRulesRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafRulesRef = append(m.WafRulesRef, &schema.ObjectRefType{})
			if err := m.WafRulesRef[len(m.WafRulesRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRulesStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafRulesStatus = append(m.WafRulesStatus, &waf_rules.WafRulesStatus{})
			if err := m.WafRulesStatus[len(m.WafRulesStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualHostWafStatusRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualHostWafStatusRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualHostWafStatusRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafStatus = append(m.WafStatus, &WafStatus{})
			if err := m.WafStatus[len(m.WafStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

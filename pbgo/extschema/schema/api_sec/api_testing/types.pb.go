// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/api_sec/api_testing/types.proto

package api_testing

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Testing
//
// x-displayName: "API Testing"
type GlobalSpecType struct {
	// API Testing
	//
	// x-displayName: "Testing Environments"
	// x-required
	// Add and configure testing domains and credentials
	Domains []*DomainConfiguration `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Custom Header Value
	//
	// x-displayName: "Custom Header"
	// Add x-f5-api-testing-identifier header value to prevent security flags on API testing traffic
	CustomHeaderValue string `protobuf:"bytes,2,opt,name=custom_header_value,json=customHeaderValue,proto3" json:"custom_header_value,omitempty"`
	// Frequency of Api Testing
	//
	// x-displayName: "Frequency of Test"
	// x-required
	//
	// Types that are valid to be assigned to FrequencyChoice:
	//	*GlobalSpecType_EveryWeek
	//	*GlobalSpecType_EveryDay
	//	*GlobalSpecType_EveryMonth
	FrequencyChoice isGlobalSpecType_FrequencyChoice `protobuf_oneof:"frequency_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_FrequencyChoice interface {
	isGlobalSpecType_FrequencyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_EveryWeek struct {
	EveryWeek *schema.Empty `protobuf:"bytes,4,opt,name=every_week,json=everyWeek,proto3,oneof" json:"every_week,omitempty"`
}
type GlobalSpecType_EveryDay struct {
	EveryDay *schema.Empty `protobuf:"bytes,5,opt,name=every_day,json=everyDay,proto3,oneof" json:"every_day,omitempty"`
}
type GlobalSpecType_EveryMonth struct {
	EveryMonth *schema.Empty `protobuf:"bytes,6,opt,name=every_month,json=everyMonth,proto3,oneof" json:"every_month,omitempty"`
}

func (*GlobalSpecType_EveryWeek) isGlobalSpecType_FrequencyChoice()  {}
func (*GlobalSpecType_EveryDay) isGlobalSpecType_FrequencyChoice()   {}
func (*GlobalSpecType_EveryMonth) isGlobalSpecType_FrequencyChoice() {}

func (m *GlobalSpecType) GetFrequencyChoice() isGlobalSpecType_FrequencyChoice {
	if m != nil {
		return m.FrequencyChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []*DomainConfiguration {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetCustomHeaderValue() string {
	if m != nil {
		return m.CustomHeaderValue
	}
	return ""
}

func (m *GlobalSpecType) GetEveryWeek() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*GlobalSpecType_EveryWeek); ok {
		return x.EveryWeek
	}
	return nil
}

func (m *GlobalSpecType) GetEveryDay() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*GlobalSpecType_EveryDay); ok {
		return x.EveryDay
	}
	return nil
}

func (m *GlobalSpecType) GetEveryMonth() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*GlobalSpecType_EveryMonth); ok {
		return x.EveryMonth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_EveryWeek)(nil),
		(*GlobalSpecType_EveryDay)(nil),
		(*GlobalSpecType_EveryMonth)(nil),
	}
}

// Configured API Domains
//
// x-displayName: "Domain Configuration"
// The Domain configuration message
type DomainConfiguration struct {
	// Domain
	//
	// x-displayName: "Domain"
	// x-required
	// Add your testing environment domain. Be aware that running tests on a production domain can impact live applications, as API testing cannot distinguish between production and testing environments.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Destructive Methods
	//
	// x-displayName: "Run API tests for destructive methods (e.g., DELETE, PUT)."
	// Enable to allow API test to execute destructive methods. Be cautious as these can alter or delete data
	AllowDestructiveMethods bool `protobuf:"varint,2,opt,name=allow_destructive_methods,json=allowDestructiveMethods,proto3" json:"allow_destructive_methods,omitempty"`
	// The Domain credentials
	//
	// x-displayName: "Credentials"
	// x-required
	// Add credentials for API testing to use in the selected environment.
	Credentials []*Credentials `protobuf:"bytes,3,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *DomainConfiguration) Reset()      { *m = DomainConfiguration{} }
func (*DomainConfiguration) ProtoMessage() {}
func (*DomainConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{1}
}
func (m *DomainConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DomainConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainConfiguration.Merge(m, src)
}
func (m *DomainConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DomainConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DomainConfiguration proto.InternalMessageInfo

func (m *DomainConfiguration) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DomainConfiguration) GetAllowDestructiveMethods() bool {
	if m != nil {
		return m.AllowDestructiveMethods
	}
	return false
}

func (m *DomainConfiguration) GetCredentials() []*Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// Credentials
//
// x-displayName: "Credential Details"
// Select the type of your credential, their values and roles.
type Credentials struct {
	// Credential Name
	//
	// x-displayName: "Name"
	// x-required
	// Enter a unique name for the credentials used in API testing
	CredentialName string `protobuf:"bytes,1,opt,name=credential_name,json=credentialName,proto3" json:"credential_name,omitempty"`
	// Credential Type
	//
	// x-displayName: "Credential Type"
	// x-required
	//
	// Types that are valid to be assigned to CredentialsChoice:
	//	*Credentials_BasicAuth
	//	*Credentials_ApiKey
	//	*Credentials_BearerToken
	//	*Credentials_LoginEndpoint
	CredentialsChoice isCredentials_CredentialsChoice `protobuf_oneof:"credentials_choice"`
	// Role
	//
	// x-displayName: "Role"
	// x-required
	// Configure role type(.e.g.,Standard, Admin)
	//
	// Types that are valid to be assigned to RoleChoice:
	//	*Credentials_Standard
	//	*Credentials_Admin
	RoleChoice isCredentials_RoleChoice `protobuf_oneof:"role_choice"`
}

func (m *Credentials) Reset()      { *m = Credentials{} }
func (*Credentials) ProtoMessage() {}
func (*Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{2}
}
func (m *Credentials) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credentials.Merge(m, src)
}
func (m *Credentials) XXX_Size() int {
	return m.Size()
}
func (m *Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_Credentials proto.InternalMessageInfo

type isCredentials_CredentialsChoice interface {
	isCredentials_CredentialsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCredentials_RoleChoice interface {
	isCredentials_RoleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Credentials_BasicAuth struct {
	BasicAuth *BasicAuthentication `protobuf:"bytes,3,opt,name=basic_auth,json=basicAuth,proto3,oneof" json:"basic_auth,omitempty"`
}
type Credentials_ApiKey struct {
	ApiKey *ApiKey `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
}
type Credentials_BearerToken struct {
	BearerToken *Bearer `protobuf:"bytes,5,opt,name=bearer_token,json=bearerToken,proto3,oneof" json:"bearer_token,omitempty"`
}
type Credentials_LoginEndpoint struct {
	LoginEndpoint *LoginEndpoint `protobuf:"bytes,9,opt,name=login_endpoint,json=loginEndpoint,proto3,oneof" json:"login_endpoint,omitempty"`
}
type Credentials_Standard struct {
	Standard *schema.Empty `protobuf:"bytes,7,opt,name=standard,proto3,oneof" json:"standard,omitempty"`
}
type Credentials_Admin struct {
	Admin *schema.Empty `protobuf:"bytes,8,opt,name=admin,proto3,oneof" json:"admin,omitempty"`
}

func (*Credentials_BasicAuth) isCredentials_CredentialsChoice()     {}
func (*Credentials_ApiKey) isCredentials_CredentialsChoice()        {}
func (*Credentials_BearerToken) isCredentials_CredentialsChoice()   {}
func (*Credentials_LoginEndpoint) isCredentials_CredentialsChoice() {}
func (*Credentials_Standard) isCredentials_RoleChoice()             {}
func (*Credentials_Admin) isCredentials_RoleChoice()                {}

func (m *Credentials) GetCredentialsChoice() isCredentials_CredentialsChoice {
	if m != nil {
		return m.CredentialsChoice
	}
	return nil
}
func (m *Credentials) GetRoleChoice() isCredentials_RoleChoice {
	if m != nil {
		return m.RoleChoice
	}
	return nil
}

func (m *Credentials) GetCredentialName() string {
	if m != nil {
		return m.CredentialName
	}
	return ""
}

func (m *Credentials) GetBasicAuth() *BasicAuthentication {
	if x, ok := m.GetCredentialsChoice().(*Credentials_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *Credentials) GetApiKey() *ApiKey {
	if x, ok := m.GetCredentialsChoice().(*Credentials_ApiKey); ok {
		return x.ApiKey
	}
	return nil
}

func (m *Credentials) GetBearerToken() *Bearer {
	if x, ok := m.GetCredentialsChoice().(*Credentials_BearerToken); ok {
		return x.BearerToken
	}
	return nil
}

func (m *Credentials) GetLoginEndpoint() *LoginEndpoint {
	if x, ok := m.GetCredentialsChoice().(*Credentials_LoginEndpoint); ok {
		return x.LoginEndpoint
	}
	return nil
}

func (m *Credentials) GetStandard() *schema.Empty {
	if x, ok := m.GetRoleChoice().(*Credentials_Standard); ok {
		return x.Standard
	}
	return nil
}

func (m *Credentials) GetAdmin() *schema.Empty {
	if x, ok := m.GetRoleChoice().(*Credentials_Admin); ok {
		return x.Admin
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Credentials) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Credentials_BasicAuth)(nil),
		(*Credentials_ApiKey)(nil),
		(*Credentials_BearerToken)(nil),
		(*Credentials_LoginEndpoint)(nil),
		(*Credentials_Standard)(nil),
		(*Credentials_Admin)(nil),
	}
}

// Basic Authentication
//
// x-displayName: "Basic Authentication"
type BasicAuthentication struct {
	// The custom domain user authentication
	//
	// x-required
	// x-displayName: "User"
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// The custom domain password authentication
	//
	// x-required
	// x-displayName: "Password"
	Password *schema.SecretType `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *BasicAuthentication) Reset()      { *m = BasicAuthentication{} }
func (*BasicAuthentication) ProtoMessage() {}
func (*BasicAuthentication) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{3}
}
func (m *BasicAuthentication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicAuthentication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BasicAuthentication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAuthentication.Merge(m, src)
}
func (m *BasicAuthentication) XXX_Size() int {
	return m.Size()
}
func (m *BasicAuthentication) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAuthentication.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAuthentication proto.InternalMessageInfo

func (m *BasicAuthentication) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *BasicAuthentication) GetPassword() *schema.SecretType {
	if m != nil {
		return m.Password
	}
	return nil
}

// Api Key
//
// x-displayName: "Api Key"
type ApiKey struct {
	// Api Key
	//
	// x-required
	// x-displayName: "Key"
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Api Key Value
	//
	// x-required
	// x-displayName: "Value"
	Value *schema.SecretType `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ApiKey) Reset()      { *m = ApiKey{} }
func (*ApiKey) ProtoMessage() {}
func (*ApiKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{4}
}
func (m *ApiKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiKey.Merge(m, src)
}
func (m *ApiKey) XXX_Size() int {
	return m.Size()
}
func (m *ApiKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiKey.DiscardUnknown(m)
}

var xxx_messageInfo_ApiKey proto.InternalMessageInfo

func (m *ApiKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ApiKey) GetValue() *schema.SecretType {
	if m != nil {
		return m.Value
	}
	return nil
}

// Bearer Authentication
//
// x-displayName: "Bearer"
type Bearer struct {
	// Bearer Token
	//
	// x-required
	// x-displayName: "Token"
	Token *schema.SecretType `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Bearer) Reset()      { *m = Bearer{} }
func (*Bearer) ProtoMessage() {}
func (*Bearer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{5}
}
func (m *Bearer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bearer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Bearer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bearer.Merge(m, src)
}
func (m *Bearer) XXX_Size() int {
	return m.Size()
}
func (m *Bearer) XXX_DiscardUnknown() {
	xxx_messageInfo_Bearer.DiscardUnknown(m)
}

var xxx_messageInfo_Bearer proto.InternalMessageInfo

func (m *Bearer) GetToken() *schema.SecretType {
	if m != nil {
		return m.Token
	}
	return nil
}

// Login Endpoint
//
// x-displayName: "Login Endpoint"
type LoginEndpoint struct {
	// Login Endpoint Path
	//
	// x-required
	// x-displayName: "Path"
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Login Endpoint Method
	//
	// x-required
	// x-displayName: "Method"
	Method schema.HttpMethod `protobuf:"varint,3,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
	// Json Payload
	//
	// x-required
	// x-displayName: "JSON Payload"
	JsonPayload *schema.SecretType `protobuf:"bytes,6,opt,name=json_payload,json=jsonPayload,proto3" json:"json_payload,omitempty"`
	// Token Response Key
	//
	// x-required
	// x-displayName: "Token Response Key"
	TokenResponseKey string `protobuf:"bytes,7,opt,name=token_response_key,json=tokenResponseKey,proto3" json:"token_response_key,omitempty"`
}

func (m *LoginEndpoint) Reset()      { *m = LoginEndpoint{} }
func (*LoginEndpoint) ProtoMessage() {}
func (*LoginEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{6}
}
func (m *LoginEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LoginEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginEndpoint.Merge(m, src)
}
func (m *LoginEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *LoginEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_LoginEndpoint proto.InternalMessageInfo

func (m *LoginEndpoint) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *LoginEndpoint) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

func (m *LoginEndpoint) GetJsonPayload() *schema.SecretType {
	if m != nil {
		return m.JsonPayload
	}
	return nil
}

func (m *LoginEndpoint) GetTokenResponseKey() string {
	if m != nil {
		return m.TokenResponseKey
	}
	return ""
}

// Create API Testing
//
// x-displayName: "Create API Testing"
type CreateSpecType struct {
	Domains           []*DomainConfiguration `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	CustomHeaderValue string                 `protobuf:"bytes,2,opt,name=custom_header_value,json=customHeaderValue,proto3" json:"custom_header_value,omitempty"`
	// Types that are valid to be assigned to FrequencyChoice:
	//	*CreateSpecType_EveryWeek
	//	*CreateSpecType_EveryDay
	//	*CreateSpecType_EveryMonth
	FrequencyChoice isCreateSpecType_FrequencyChoice `protobuf_oneof:"frequency_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{7}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_FrequencyChoice interface {
	isCreateSpecType_FrequencyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_EveryWeek struct {
	EveryWeek *schema.Empty `protobuf:"bytes,4,opt,name=every_week,json=everyWeek,proto3,oneof" json:"every_week,omitempty"`
}
type CreateSpecType_EveryDay struct {
	EveryDay *schema.Empty `protobuf:"bytes,5,opt,name=every_day,json=everyDay,proto3,oneof" json:"every_day,omitempty"`
}
type CreateSpecType_EveryMonth struct {
	EveryMonth *schema.Empty `protobuf:"bytes,6,opt,name=every_month,json=everyMonth,proto3,oneof" json:"every_month,omitempty"`
}

func (*CreateSpecType_EveryWeek) isCreateSpecType_FrequencyChoice()  {}
func (*CreateSpecType_EveryDay) isCreateSpecType_FrequencyChoice()   {}
func (*CreateSpecType_EveryMonth) isCreateSpecType_FrequencyChoice() {}

func (m *CreateSpecType) GetFrequencyChoice() isCreateSpecType_FrequencyChoice {
	if m != nil {
		return m.FrequencyChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []*DomainConfiguration {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetCustomHeaderValue() string {
	if m != nil {
		return m.CustomHeaderValue
	}
	return ""
}

func (m *CreateSpecType) GetEveryWeek() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*CreateSpecType_EveryWeek); ok {
		return x.EveryWeek
	}
	return nil
}

func (m *CreateSpecType) GetEveryDay() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*CreateSpecType_EveryDay); ok {
		return x.EveryDay
	}
	return nil
}

func (m *CreateSpecType) GetEveryMonth() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*CreateSpecType_EveryMonth); ok {
		return x.EveryMonth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_EveryWeek)(nil),
		(*CreateSpecType_EveryDay)(nil),
		(*CreateSpecType_EveryMonth)(nil),
	}
}

// Replace API Testing
//
// x-displayName: "Replace API testing"
type ReplaceSpecType struct {
	Domains           []*DomainConfiguration `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	CustomHeaderValue string                 `protobuf:"bytes,2,opt,name=custom_header_value,json=customHeaderValue,proto3" json:"custom_header_value,omitempty"`
	// Types that are valid to be assigned to FrequencyChoice:
	//	*ReplaceSpecType_EveryWeek
	//	*ReplaceSpecType_EveryDay
	//	*ReplaceSpecType_EveryMonth
	FrequencyChoice isReplaceSpecType_FrequencyChoice `protobuf_oneof:"frequency_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{8}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_FrequencyChoice interface {
	isReplaceSpecType_FrequencyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_EveryWeek struct {
	EveryWeek *schema.Empty `protobuf:"bytes,4,opt,name=every_week,json=everyWeek,proto3,oneof" json:"every_week,omitempty"`
}
type ReplaceSpecType_EveryDay struct {
	EveryDay *schema.Empty `protobuf:"bytes,5,opt,name=every_day,json=everyDay,proto3,oneof" json:"every_day,omitempty"`
}
type ReplaceSpecType_EveryMonth struct {
	EveryMonth *schema.Empty `protobuf:"bytes,6,opt,name=every_month,json=everyMonth,proto3,oneof" json:"every_month,omitempty"`
}

func (*ReplaceSpecType_EveryWeek) isReplaceSpecType_FrequencyChoice()  {}
func (*ReplaceSpecType_EveryDay) isReplaceSpecType_FrequencyChoice()   {}
func (*ReplaceSpecType_EveryMonth) isReplaceSpecType_FrequencyChoice() {}

func (m *ReplaceSpecType) GetFrequencyChoice() isReplaceSpecType_FrequencyChoice {
	if m != nil {
		return m.FrequencyChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []*DomainConfiguration {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomHeaderValue() string {
	if m != nil {
		return m.CustomHeaderValue
	}
	return ""
}

func (m *ReplaceSpecType) GetEveryWeek() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*ReplaceSpecType_EveryWeek); ok {
		return x.EveryWeek
	}
	return nil
}

func (m *ReplaceSpecType) GetEveryDay() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*ReplaceSpecType_EveryDay); ok {
		return x.EveryDay
	}
	return nil
}

func (m *ReplaceSpecType) GetEveryMonth() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*ReplaceSpecType_EveryMonth); ok {
		return x.EveryMonth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_EveryWeek)(nil),
		(*ReplaceSpecType_EveryDay)(nil),
		(*ReplaceSpecType_EveryMonth)(nil),
	}
}

// Get API testing
//
// x-displayName: "Get API testing"
type GetSpecType struct {
	Domains           []*DomainConfiguration `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	CustomHeaderValue string                 `protobuf:"bytes,2,opt,name=custom_header_value,json=customHeaderValue,proto3" json:"custom_header_value,omitempty"`
	// Types that are valid to be assigned to FrequencyChoice:
	//	*GetSpecType_EveryWeek
	//	*GetSpecType_EveryDay
	//	*GetSpecType_EveryMonth
	FrequencyChoice isGetSpecType_FrequencyChoice `protobuf_oneof:"frequency_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00746620555a0e4, []int{9}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_FrequencyChoice interface {
	isGetSpecType_FrequencyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_EveryWeek struct {
	EveryWeek *schema.Empty `protobuf:"bytes,4,opt,name=every_week,json=everyWeek,proto3,oneof" json:"every_week,omitempty"`
}
type GetSpecType_EveryDay struct {
	EveryDay *schema.Empty `protobuf:"bytes,5,opt,name=every_day,json=everyDay,proto3,oneof" json:"every_day,omitempty"`
}
type GetSpecType_EveryMonth struct {
	EveryMonth *schema.Empty `protobuf:"bytes,6,opt,name=every_month,json=everyMonth,proto3,oneof" json:"every_month,omitempty"`
}

func (*GetSpecType_EveryWeek) isGetSpecType_FrequencyChoice()  {}
func (*GetSpecType_EveryDay) isGetSpecType_FrequencyChoice()   {}
func (*GetSpecType_EveryMonth) isGetSpecType_FrequencyChoice() {}

func (m *GetSpecType) GetFrequencyChoice() isGetSpecType_FrequencyChoice {
	if m != nil {
		return m.FrequencyChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []*DomainConfiguration {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetCustomHeaderValue() string {
	if m != nil {
		return m.CustomHeaderValue
	}
	return ""
}

func (m *GetSpecType) GetEveryWeek() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*GetSpecType_EveryWeek); ok {
		return x.EveryWeek
	}
	return nil
}

func (m *GetSpecType) GetEveryDay() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*GetSpecType_EveryDay); ok {
		return x.EveryDay
	}
	return nil
}

func (m *GetSpecType) GetEveryMonth() *schema.Empty {
	if x, ok := m.GetFrequencyChoice().(*GetSpecType_EveryMonth); ok {
		return x.EveryMonth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_EveryWeek)(nil),
		(*GetSpecType_EveryDay)(nil),
		(*GetSpecType_EveryMonth)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.api_sec.api_testing.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.api_sec.api_testing.GlobalSpecType")
	proto.RegisterType((*DomainConfiguration)(nil), "ves.io.schema.api_sec.api_testing.DomainConfiguration")
	golang_proto.RegisterType((*DomainConfiguration)(nil), "ves.io.schema.api_sec.api_testing.DomainConfiguration")
	proto.RegisterType((*Credentials)(nil), "ves.io.schema.api_sec.api_testing.Credentials")
	golang_proto.RegisterType((*Credentials)(nil), "ves.io.schema.api_sec.api_testing.Credentials")
	proto.RegisterType((*BasicAuthentication)(nil), "ves.io.schema.api_sec.api_testing.BasicAuthentication")
	golang_proto.RegisterType((*BasicAuthentication)(nil), "ves.io.schema.api_sec.api_testing.BasicAuthentication")
	proto.RegisterType((*ApiKey)(nil), "ves.io.schema.api_sec.api_testing.ApiKey")
	golang_proto.RegisterType((*ApiKey)(nil), "ves.io.schema.api_sec.api_testing.ApiKey")
	proto.RegisterType((*Bearer)(nil), "ves.io.schema.api_sec.api_testing.Bearer")
	golang_proto.RegisterType((*Bearer)(nil), "ves.io.schema.api_sec.api_testing.Bearer")
	proto.RegisterType((*LoginEndpoint)(nil), "ves.io.schema.api_sec.api_testing.LoginEndpoint")
	golang_proto.RegisterType((*LoginEndpoint)(nil), "ves.io.schema.api_sec.api_testing.LoginEndpoint")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.api_sec.api_testing.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.api_sec.api_testing.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.api_sec.api_testing.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.api_sec.api_testing.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.api_sec.api_testing.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.api_sec.api_testing.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/api_sec/api_testing/types.proto", fileDescriptor_d00746620555a0e4)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/api_sec/api_testing/types.proto", fileDescriptor_d00746620555a0e4)
}

var fileDescriptor_d00746620555a0e4 = []byte{
	// 1097 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x38, 0x69, 0x92, 0x4e, 0xb6, 0x6d, 0x76, 0x5a, 0x69, 0xdd, 0x52, 0x4c, 0x37, 0xa7,
	0x22, 0xb5, 0x0e, 0xea, 0x0a, 0x90, 0x7a, 0x40, 0x6c, 0xda, 0xd5, 0x86, 0x5d, 0xba, 0xaa, 0xbc,
	0x2b, 0x2a, 0x10, 0x92, 0x35, 0xb1, 0x5f, 0x13, 0x13, 0xdb, 0x63, 0xc6, 0xe3, 0x94, 0x9c, 0xa8,
	0xf6, 0xc4, 0x11, 0x21, 0xf1, 0x3f, 0x70, 0xe6, 0x48, 0x2e, 0x3d, 0xa2, 0x3d, 0xe5, 0x58, 0x6e,
	0x34, 0xbd, 0x2c, 0xb7, 0x1e, 0x90, 0x90, 0x76, 0x2f, 0xc8, 0x63, 0xb7, 0x49, 0x7f, 0x10, 0x0a,
	0x42, 0x2b, 0x21, 0xed, 0x29, 0xe3, 0x79, 0xdf, 0xf7, 0x66, 0xe6, 0x9b, 0xcf, 0xef, 0x39, 0x78,
	0xb5, 0x03, 0xa1, 0xee, 0xb0, 0x6a, 0x68, 0xb5, 0xc0, 0xa3, 0x55, 0x1a, 0x38, 0x66, 0x08, 0x96,
	0xfc, 0x15, 0x10, 0x0a, 0xc7, 0x6f, 0x56, 0x45, 0x37, 0x80, 0x50, 0x0f, 0x38, 0x13, 0x8c, 0xdc,
	0x4e, 0xe0, 0x7a, 0x02, 0xd7, 0x53, 0xb8, 0x3e, 0x02, 0x5f, 0x58, 0x6d, 0x3a, 0xa2, 0x15, 0x35,
	0x74, 0x8b, 0x79, 0xd5, 0x26, 0x6b, 0xb2, 0xaa, 0x64, 0x36, 0xa2, 0x5d, 0xf9, 0x24, 0x1f, 0xe4,
	0x28, 0xc9, 0xb8, 0xf0, 0xc6, 0xf9, 0x0d, 0xb0, 0x40, 0x38, 0xcc, 0x4f, 0x97, 0x5b, 0x98, 0x3f,
	0x1f, 0x1c, 0xd9, 0xc9, 0xc2, 0xe2, 0xf9, 0x50, 0x87, 0xba, 0x8e, 0x4d, 0x05, 0xa4, 0xd1, 0xa5,
	0x0b, 0x51, 0x07, 0xf6, 0xcc, 0xf3, 0xa9, 0xdf, 0xba, 0x8c, 0x08, 0x47, 0x17, 0xa8, 0xbc, 0x54,
	0xf0, 0xf4, 0x7d, 0x97, 0x35, 0xa8, 0xfb, 0x38, 0x00, 0xeb, 0x49, 0x37, 0x00, 0xf2, 0x39, 0x2e,
	0xd8, 0xcc, 0xa3, 0x8e, 0x1f, 0xaa, 0x68, 0x29, 0xbb, 0x5c, 0x5a, 0x7b, 0x4f, 0xff, 0x5b, 0x3d,
	0xf4, 0x4d, 0xc9, 0xd8, 0x60, 0xfe, 0xae, 0xd3, 0x8c, 0x38, 0x8d, 0xf7, 0x50, 0xc3, 0x3f, 0xfd,
	0x76, 0x90, 0x9d, 0xf8, 0x0e, 0x29, 0xe5, 0x25, 0xe3, 0x34, 0x25, 0x59, 0xc7, 0xb3, 0x56, 0x14,
	0x0a, 0xe6, 0x99, 0x2d, 0xa0, 0x36, 0x70, 0xb3, 0x43, 0xdd, 0x08, 0x54, 0x65, 0x09, 0x2d, 0x4f,
	0xa6, 0x0c, 0x9e, 0x55, 0xf7, 0x91, 0x71, 0x33, 0x81, 0xd5, 0x25, 0xea, 0x93, 0x18, 0x44, 0xde,
	0xc5, 0x18, 0x3a, 0xc0, 0xbb, 0xe6, 0x1e, 0x40, 0x5b, 0xcd, 0x2d, 0xa1, 0xe5, 0xd2, 0xda, 0xdc,
	0x85, 0xcd, 0xdd, 0xf3, 0x02, 0xd1, 0xad, 0x67, 0x8c, 0x49, 0x89, 0xdc, 0x01, 0x68, 0x93, 0x3b,
	0x38, 0x79, 0x30, 0x6d, 0xda, 0x55, 0x27, 0xc6, 0xb2, 0x8a, 0x12, 0xb8, 0x49, 0xbb, 0xe4, 0x7d,
	0x5c, 0x4a, 0x48, 0x1e, 0xf3, 0x45, 0x4b, 0xcd, 0x8f, 0xa5, 0x25, 0xdb, 0xda, 0x8a, 0x91, 0xeb,
	0xf9, 0x67, 0x3d, 0xa4, 0x94, 0x51, 0x6d, 0x11, 0x97, 0x77, 0x39, 0x7c, 0x19, 0x81, 0x6f, 0x75,
	0x4d, 0xab, 0xc5, 0x1c, 0x0b, 0x48, 0xf1, 0xa0, 0x87, 0x72, 0xfd, 0x1e, 0xca, 0x3e, 0xc8, 0x15,
	0xb3, 0xe5, 0x5c, 0xe5, 0x17, 0x84, 0x67, 0xaf, 0x50, 0x8e, 0xac, 0xe0, 0x7c, 0xa2, 0x97, 0x8a,
	0xa4, 0x2e, 0x73, 0x67, 0xba, 0x28, 0xe9, 0xe8, 0x1b, 0x05, 0x19, 0x29, 0x86, 0xac, 0xe3, 0x79,
	0xea, 0xba, 0x6c, 0xcf, 0xb4, 0x21, 0x14, 0x3c, 0xb2, 0x84, 0xd3, 0x01, 0xd3, 0x03, 0xd1, 0x62,
	0x76, 0x28, 0x85, 0x2d, 0x1a, 0xb7, 0x24, 0x60, 0x73, 0x18, 0xdf, 0x4a, 0xc2, 0x64, 0x1b, 0x97,
	0x2c, 0x0e, 0x36, 0xf8, 0xc2, 0xa1, 0x6e, 0xa8, 0x66, 0xe5, 0x85, 0xeb, 0xd7, 0xb8, 0xf0, 0x8d,
	0x21, 0xcb, 0x18, 0x4d, 0x71, 0x7a, 0xfe, 0xca, 0x8f, 0x39, 0x5c, 0x1a, 0x01, 0x91, 0x35, 0x3c,
	0x33, 0x84, 0x99, 0x3e, 0xf5, 0x20, 0x3d, 0xdc, 0x64, 0x7c, 0xa4, 0x1c, 0x57, 0xd4, 0x0f, 0x8d,
	0xe9, 0x21, 0xe2, 0x11, 0xf5, 0x80, 0xec, 0x60, 0xdc, 0xa0, 0xa1, 0x63, 0x99, 0x34, 0x12, 0x2d,
	0x35, 0x2b, 0xef, 0xe0, 0x3a, 0x6e, 0xac, 0xc5, 0xa4, 0xbb, 0x91, 0x68, 0xc5, 0xb9, 0x2c, 0xa9,
	0x69, 0x6c, 0x89, 0xc6, 0xe9, 0x34, 0xd9, 0xc4, 0x85, 0x18, 0xdf, 0x86, 0x6e, 0x6a, 0xa3, 0xb7,
	0xaf, 0x91, 0xf5, 0x6e, 0xe0, 0x3c, 0x84, 0xf8, 0xba, 0xf3, 0x54, 0x8e, 0xc8, 0x23, 0x7c, 0xa3,
	0x01, 0x94, 0x03, 0x37, 0x05, 0x6b, 0x83, 0x9f, 0x7a, 0xeb, 0x3a, 0xa9, 0x6a, 0x92, 0x56, 0xcf,
	0x18, 0xa5, 0x24, 0xc1, 0x93, 0x98, 0x4f, 0x3e, 0xc5, 0xd3, 0x2e, 0x6b, 0x3a, 0xbe, 0x09, 0xbe,
	0x1d, 0x30, 0xc7, 0x17, 0xea, 0xa4, 0xcc, 0xf8, 0xce, 0x35, 0x32, 0x7e, 0x1c, 0x13, 0xef, 0xa5,
	0xbc, 0x7a, 0xc6, 0x98, 0x72, 0x47, 0x27, 0xc8, 0x1a, 0x2e, 0x86, 0x82, 0xfa, 0x36, 0xe5, 0xb6,
	0x5a, 0x18, 0xe3, 0x65, 0x64, 0x9c, 0xe1, 0xc8, 0x0a, 0x9e, 0xa0, 0xb6, 0xe7, 0xf8, 0x6a, 0x71,
	0x2c, 0x21, 0x01, 0xd5, 0x34, 0x4c, 0x46, 0x6c, 0x30, 0xea, 0xf8, 0x6c, 0xbf, 0x87, 0x94, 0xda,
	0x2d, 0x5c, 0xe2, 0xcc, 0x85, 0xd1, 0x40, 0xa1, 0xdf, 0x43, 0xf9, 0x07, 0xb9, 0xa2, 0x52, 0x8e,
	0x5f, 0x88, 0x7c, 0xb9, 0x50, 0xf9, 0x1a, 0xcf, 0x5e, 0x71, 0x77, 0xe4, 0x4d, 0x9c, 0x8b, 0x42,
	0xe0, 0x97, 0x0d, 0x23, 0xa7, 0xc9, 0x47, 0xb8, 0x18, 0xd0, 0x30, 0xdc, 0x63, 0xdc, 0x96, 0x7e,
	0x2f, 0xad, 0xcd, 0x5f, 0xd8, 0xeb, 0x63, 0xb0, 0x38, 0x88, 0xb8, 0xbc, 0xd5, 0x48, 0xbf, 0x87,
	0xd0, 0x49, 0x0f, 0xa1, 0x91, 0x5a, 0x73, 0x46, 0xaf, 0xb4, 0x71, 0x3e, 0xb9, 0x66, 0xb2, 0x88,
	0xb3, 0xb1, 0x3d, 0xd0, 0xa5, 0xc2, 0x14, 0x4f, 0x93, 0x0d, 0x3c, 0x31, 0x2c, 0x5c, 0xff, 0x78,
	0xbd, 0x84, 0x5b, 0xd9, 0xc2, 0xf9, 0xc4, 0x08, 0x71, 0xba, 0xc4, 0x42, 0xe8, 0x5f, 0xa5, 0x93,
	0xdc, 0xca, 0xef, 0x08, 0x4f, 0x9d, 0xb3, 0x01, 0xb9, 0x8d, 0x73, 0x01, 0x15, 0xad, 0xf4, 0x10,
	0x53, 0x31, 0xa5, 0xc8, 0xf3, 0xea, 0x7e, 0xf1, 0xb9, 0x82, 0x0c, 0x19, 0x22, 0x35, 0x9c, 0x4f,
	0x4a, 0x85, 0x7c, 0xbd, 0xa6, 0x2f, 0x2d, 0x5d, 0x17, 0x22, 0x48, 0x8a, 0x45, 0x6d, 0x26, 0xe6,
	0xe3, 0xa7, 0xa8, 0x50, 0x46, 0x0b, 0x59, 0x94, 0xcd, 0x19, 0x29, 0x93, 0xd4, 0xf1, 0x8d, 0x2f,
	0x42, 0xe6, 0x9b, 0x01, 0xed, 0xba, 0x8c, 0xda, 0x69, 0xb1, 0x1c, 0x73, 0x88, 0xa1, 0x9c, 0x65,
	0xa3, 0x14, 0x53, 0xb7, 0x13, 0x26, 0x59, 0xc1, 0x44, 0x9e, 0xc5, 0xe4, 0x10, 0x06, 0xcc, 0x0f,
	0x41, 0xbe, 0xa2, 0xb1, 0x61, 0x27, 0x8d, 0xb2, 0x8c, 0x18, 0x69, 0xe0, 0x21, 0x74, 0x13, 0xe7,
	0x54, 0x5e, 0x28, 0x78, 0x7a, 0x83, 0x03, 0x15, 0x70, 0xd6, 0xc2, 0xb6, 0xff, 0xa3, 0x16, 0x36,
	0x6c, 0x5b, 0xfa, 0x98, 0xb6, 0xf5, 0xbf, 0x6d, 0x55, 0x37, 0x9f, 0x7d, 0x70, 0xa1, 0xf9, 0xd7,
	0x96, 0xaf, 0xe8, 0x5a, 0x73, 0x4f, 0x5f, 0xa0, 0x4b, 0xb3, 0x69, 0x07, 0x7b, 0xa9, 0xe0, 0x19,
	0x03, 0x02, 0x97, 0x5a, 0xaf, 0xd5, 0x7f, 0xf5, 0xea, 0xff, 0xa1, 0xe0, 0xd2, 0x7d, 0x10, 0xaf,
	0x95, 0x7f, 0xd5, 0xca, 0xd7, 0xbe, 0x47, 0xfd, 0x23, 0x2d, 0x73, 0x78, 0xa4, 0x65, 0x4e, 0x8e,
	0x34, 0xb4, 0x3f, 0xd0, 0xd0, 0x0f, 0x03, 0x0d, 0xfd, 0x3c, 0xd0, 0x50, 0x7f, 0xa0, 0xa1, 0xc3,
	0x81, 0x86, 0x7e, 0x1d, 0x68, 0xe8, 0xf9, 0x40, 0xcb, 0x9c, 0x0c, 0x34, 0xf4, 0xed, 0xb1, 0x96,
	0x39, 0x38, 0xd6, 0x50, 0xff, 0x58, 0xcb, 0x1c, 0x1e, 0x6b, 0x99, 0xcf, 0x76, 0x9a, 0x2c, 0x68,
	0x37, 0xf5, 0x0e, 0x73, 0x05, 0x70, 0x4e, 0xf5, 0x28, 0xac, 0xca, 0xc1, 0x2e, 0xe3, 0xde, 0x6a,
	0xc0, 0x59, 0xc7, 0xb1, 0x81, 0xaf, 0x9e, 0x86, 0xab, 0x41, 0xa3, 0xc9, 0xaa, 0xf0, 0x95, 0x48,
	0x3f, 0xe3, 0xff, 0xfa, 0x6f, 0x4c, 0x23, 0x2f, 0x3f, 0xeb, 0xef, 0xfc, 0x19, 0x00, 0x00, 0xff,
	0xff, 0xab, 0x7c, 0xb7, 0x81, 0xf2, 0x0c, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if !this.Domains[i].Equal(that1.Domains[i]) {
			return false
		}
	}
	if this.CustomHeaderValue != that1.CustomHeaderValue {
		return false
	}
	if that1.FrequencyChoice == nil {
		if this.FrequencyChoice != nil {
			return false
		}
	} else if this.FrequencyChoice == nil {
		return false
	} else if !this.FrequencyChoice.Equal(that1.FrequencyChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EveryWeek) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EveryWeek)
	if !ok {
		that2, ok := that.(GlobalSpecType_EveryWeek)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryWeek.Equal(that1.EveryWeek) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EveryDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EveryDay)
	if !ok {
		that2, ok := that.(GlobalSpecType_EveryDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryDay.Equal(that1.EveryDay) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EveryMonth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EveryMonth)
	if !ok {
		that2, ok := that.(GlobalSpecType_EveryMonth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryMonth.Equal(that1.EveryMonth) {
		return false
	}
	return true
}
func (this *DomainConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainConfiguration)
	if !ok {
		that2, ok := that.(DomainConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.AllowDestructiveMethods != that1.AllowDestructiveMethods {
		return false
	}
	if len(this.Credentials) != len(that1.Credentials) {
		return false
	}
	for i := range this.Credentials {
		if !this.Credentials[i].Equal(that1.Credentials[i]) {
			return false
		}
	}
	return true
}
func (this *Credentials) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials)
	if !ok {
		that2, ok := that.(Credentials)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CredentialName != that1.CredentialName {
		return false
	}
	if that1.CredentialsChoice == nil {
		if this.CredentialsChoice != nil {
			return false
		}
	} else if this.CredentialsChoice == nil {
		return false
	} else if !this.CredentialsChoice.Equal(that1.CredentialsChoice) {
		return false
	}
	if that1.RoleChoice == nil {
		if this.RoleChoice != nil {
			return false
		}
	} else if this.RoleChoice == nil {
		return false
	} else if !this.RoleChoice.Equal(that1.RoleChoice) {
		return false
	}
	return true
}
func (this *Credentials_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_BasicAuth)
	if !ok {
		that2, ok := that.(Credentials_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *Credentials_ApiKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_ApiKey)
	if !ok {
		that2, ok := that.(Credentials_ApiKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKey.Equal(that1.ApiKey) {
		return false
	}
	return true
}
func (this *Credentials_BearerToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_BearerToken)
	if !ok {
		that2, ok := that.(Credentials_BearerToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BearerToken.Equal(that1.BearerToken) {
		return false
	}
	return true
}
func (this *Credentials_LoginEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_LoginEndpoint)
	if !ok {
		that2, ok := that.(Credentials_LoginEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LoginEndpoint.Equal(that1.LoginEndpoint) {
		return false
	}
	return true
}
func (this *Credentials_Standard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_Standard)
	if !ok {
		that2, ok := that.(Credentials_Standard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Standard.Equal(that1.Standard) {
		return false
	}
	return true
}
func (this *Credentials_Admin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_Admin)
	if !ok {
		that2, ok := that.(Credentials_Admin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Admin.Equal(that1.Admin) {
		return false
	}
	return true
}
func (this *BasicAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicAuthentication)
	if !ok {
		that2, ok := that.(BasicAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	return true
}
func (this *ApiKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiKey)
	if !ok {
		that2, ok := that.(ApiKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Bearer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bearer)
	if !ok {
		that2, ok := that.(Bearer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *LoginEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginEndpoint)
	if !ok {
		that2, ok := that.(LoginEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if !this.JsonPayload.Equal(that1.JsonPayload) {
		return false
	}
	if this.TokenResponseKey != that1.TokenResponseKey {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if !this.Domains[i].Equal(that1.Domains[i]) {
			return false
		}
	}
	if this.CustomHeaderValue != that1.CustomHeaderValue {
		return false
	}
	if that1.FrequencyChoice == nil {
		if this.FrequencyChoice != nil {
			return false
		}
	} else if this.FrequencyChoice == nil {
		return false
	} else if !this.FrequencyChoice.Equal(that1.FrequencyChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_EveryWeek) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EveryWeek)
	if !ok {
		that2, ok := that.(CreateSpecType_EveryWeek)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryWeek.Equal(that1.EveryWeek) {
		return false
	}
	return true
}
func (this *CreateSpecType_EveryDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EveryDay)
	if !ok {
		that2, ok := that.(CreateSpecType_EveryDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryDay.Equal(that1.EveryDay) {
		return false
	}
	return true
}
func (this *CreateSpecType_EveryMonth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EveryMonth)
	if !ok {
		that2, ok := that.(CreateSpecType_EveryMonth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryMonth.Equal(that1.EveryMonth) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if !this.Domains[i].Equal(that1.Domains[i]) {
			return false
		}
	}
	if this.CustomHeaderValue != that1.CustomHeaderValue {
		return false
	}
	if that1.FrequencyChoice == nil {
		if this.FrequencyChoice != nil {
			return false
		}
	} else if this.FrequencyChoice == nil {
		return false
	} else if !this.FrequencyChoice.Equal(that1.FrequencyChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EveryWeek) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EveryWeek)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EveryWeek)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryWeek.Equal(that1.EveryWeek) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EveryDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EveryDay)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EveryDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryDay.Equal(that1.EveryDay) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EveryMonth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EveryMonth)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EveryMonth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryMonth.Equal(that1.EveryMonth) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if !this.Domains[i].Equal(that1.Domains[i]) {
			return false
		}
	}
	if this.CustomHeaderValue != that1.CustomHeaderValue {
		return false
	}
	if that1.FrequencyChoice == nil {
		if this.FrequencyChoice != nil {
			return false
		}
	} else if this.FrequencyChoice == nil {
		return false
	} else if !this.FrequencyChoice.Equal(that1.FrequencyChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_EveryWeek) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EveryWeek)
	if !ok {
		that2, ok := that.(GetSpecType_EveryWeek)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryWeek.Equal(that1.EveryWeek) {
		return false
	}
	return true
}
func (this *GetSpecType_EveryDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EveryDay)
	if !ok {
		that2, ok := that.(GetSpecType_EveryDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryDay.Equal(that1.EveryDay) {
		return false
	}
	return true
}
func (this *GetSpecType_EveryMonth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EveryMonth)
	if !ok {
		that2, ok := that.(GetSpecType_EveryMonth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EveryMonth.Equal(that1.EveryMonth) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&api_testing.GlobalSpecType{")
	if this.Domains != nil {
		s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	}
	s = append(s, "CustomHeaderValue: "+fmt.Sprintf("%#v", this.CustomHeaderValue)+",\n")
	if this.FrequencyChoice != nil {
		s = append(s, "FrequencyChoice: "+fmt.Sprintf("%#v", this.FrequencyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_EveryWeek) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.GlobalSpecType_EveryWeek{` +
		`EveryWeek:` + fmt.Sprintf("%#v", this.EveryWeek) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EveryDay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.GlobalSpecType_EveryDay{` +
		`EveryDay:` + fmt.Sprintf("%#v", this.EveryDay) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EveryMonth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.GlobalSpecType_EveryMonth{` +
		`EveryMonth:` + fmt.Sprintf("%#v", this.EveryMonth) + `}`}, ", ")
	return s
}
func (this *DomainConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api_testing.DomainConfiguration{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "AllowDestructiveMethods: "+fmt.Sprintf("%#v", this.AllowDestructiveMethods)+",\n")
	if this.Credentials != nil {
		s = append(s, "Credentials: "+fmt.Sprintf("%#v", this.Credentials)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Credentials) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&api_testing.Credentials{")
	s = append(s, "CredentialName: "+fmt.Sprintf("%#v", this.CredentialName)+",\n")
	if this.CredentialsChoice != nil {
		s = append(s, "CredentialsChoice: "+fmt.Sprintf("%#v", this.CredentialsChoice)+",\n")
	}
	if this.RoleChoice != nil {
		s = append(s, "RoleChoice: "+fmt.Sprintf("%#v", this.RoleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Credentials_BasicAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.Credentials_BasicAuth{` +
		`BasicAuth:` + fmt.Sprintf("%#v", this.BasicAuth) + `}`}, ", ")
	return s
}
func (this *Credentials_ApiKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.Credentials_ApiKey{` +
		`ApiKey:` + fmt.Sprintf("%#v", this.ApiKey) + `}`}, ", ")
	return s
}
func (this *Credentials_BearerToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.Credentials_BearerToken{` +
		`BearerToken:` + fmt.Sprintf("%#v", this.BearerToken) + `}`}, ", ")
	return s
}
func (this *Credentials_LoginEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.Credentials_LoginEndpoint{` +
		`LoginEndpoint:` + fmt.Sprintf("%#v", this.LoginEndpoint) + `}`}, ", ")
	return s
}
func (this *Credentials_Standard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.Credentials_Standard{` +
		`Standard:` + fmt.Sprintf("%#v", this.Standard) + `}`}, ", ")
	return s
}
func (this *Credentials_Admin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.Credentials_Admin{` +
		`Admin:` + fmt.Sprintf("%#v", this.Admin) + `}`}, ", ")
	return s
}
func (this *BasicAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_testing.BasicAuthentication{")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_testing.ApiKey{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bearer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_testing.Bearer{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_testing.LoginEndpoint{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	if this.JsonPayload != nil {
		s = append(s, "JsonPayload: "+fmt.Sprintf("%#v", this.JsonPayload)+",\n")
	}
	s = append(s, "TokenResponseKey: "+fmt.Sprintf("%#v", this.TokenResponseKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&api_testing.CreateSpecType{")
	if this.Domains != nil {
		s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	}
	s = append(s, "CustomHeaderValue: "+fmt.Sprintf("%#v", this.CustomHeaderValue)+",\n")
	if this.FrequencyChoice != nil {
		s = append(s, "FrequencyChoice: "+fmt.Sprintf("%#v", this.FrequencyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_EveryWeek) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.CreateSpecType_EveryWeek{` +
		`EveryWeek:` + fmt.Sprintf("%#v", this.EveryWeek) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EveryDay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.CreateSpecType_EveryDay{` +
		`EveryDay:` + fmt.Sprintf("%#v", this.EveryDay) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EveryMonth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.CreateSpecType_EveryMonth{` +
		`EveryMonth:` + fmt.Sprintf("%#v", this.EveryMonth) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&api_testing.ReplaceSpecType{")
	if this.Domains != nil {
		s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	}
	s = append(s, "CustomHeaderValue: "+fmt.Sprintf("%#v", this.CustomHeaderValue)+",\n")
	if this.FrequencyChoice != nil {
		s = append(s, "FrequencyChoice: "+fmt.Sprintf("%#v", this.FrequencyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_EveryWeek) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.ReplaceSpecType_EveryWeek{` +
		`EveryWeek:` + fmt.Sprintf("%#v", this.EveryWeek) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EveryDay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.ReplaceSpecType_EveryDay{` +
		`EveryDay:` + fmt.Sprintf("%#v", this.EveryDay) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EveryMonth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.ReplaceSpecType_EveryMonth{` +
		`EveryMonth:` + fmt.Sprintf("%#v", this.EveryMonth) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&api_testing.GetSpecType{")
	if this.Domains != nil {
		s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	}
	s = append(s, "CustomHeaderValue: "+fmt.Sprintf("%#v", this.CustomHeaderValue)+",\n")
	if this.FrequencyChoice != nil {
		s = append(s, "FrequencyChoice: "+fmt.Sprintf("%#v", this.FrequencyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_EveryWeek) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.GetSpecType_EveryWeek{` +
		`EveryWeek:` + fmt.Sprintf("%#v", this.EveryWeek) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EveryDay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.GetSpecType_EveryDay{` +
		`EveryDay:` + fmt.Sprintf("%#v", this.EveryDay) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EveryMonth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_testing.GetSpecType_EveryMonth{` +
		`EveryMonth:` + fmt.Sprintf("%#v", this.EveryMonth) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyChoice != nil {
		{
			size := m.FrequencyChoice.Size()
			i -= size
			if _, err := m.FrequencyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CustomHeaderValue) > 0 {
		i -= len(m.CustomHeaderValue)
		copy(dAtA[i:], m.CustomHeaderValue)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomHeaderValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_EveryWeek) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EveryWeek) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryWeek != nil {
		{
			size, err := m.EveryWeek.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EveryDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EveryDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryDay != nil {
		{
			size, err := m.EveryDay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EveryMonth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EveryMonth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryMonth != nil {
		{
			size, err := m.EveryMonth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *DomainConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Credentials) > 0 {
		for iNdEx := len(m.Credentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.AllowDestructiveMethods {
		i--
		if m.AllowDestructiveMethods {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Credentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credentials) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CredentialsChoice != nil {
		{
			size := m.CredentialsChoice.Size()
			i -= size
			if _, err := m.CredentialsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RoleChoice != nil {
		{
			size := m.RoleChoice.Size()
			i -= size
			if _, err := m.RoleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CredentialName) > 0 {
		i -= len(m.CredentialName)
		copy(dAtA[i:], m.CredentialName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CredentialName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Credentials_BasicAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credentials_BasicAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BasicAuth != nil {
		{
			size, err := m.BasicAuth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Credentials_ApiKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credentials_ApiKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiKey != nil {
		{
			size, err := m.ApiKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Credentials_BearerToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credentials_BearerToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BearerToken != nil {
		{
			size, err := m.BearerToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Credentials_Standard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credentials_Standard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Standard != nil {
		{
			size, err := m.Standard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Credentials_Admin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credentials_Admin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Admin != nil {
		{
			size, err := m.Admin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Credentials_LoginEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credentials_LoginEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LoginEndpoint != nil {
		{
			size, err := m.LoginEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *BasicAuthentication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicAuthentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicAuthentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bearer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bearer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bearer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenResponseKey) > 0 {
		i -= len(m.TokenResponseKey)
		copy(dAtA[i:], m.TokenResponseKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenResponseKey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.JsonPayload != nil {
		{
			size, err := m.JsonPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Method != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyChoice != nil {
		{
			size := m.FrequencyChoice.Size()
			i -= size
			if _, err := m.FrequencyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CustomHeaderValue) > 0 {
		i -= len(m.CustomHeaderValue)
		copy(dAtA[i:], m.CustomHeaderValue)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomHeaderValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_EveryWeek) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EveryWeek) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryWeek != nil {
		{
			size, err := m.EveryWeek.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EveryDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EveryDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryDay != nil {
		{
			size, err := m.EveryDay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EveryMonth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EveryMonth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryMonth != nil {
		{
			size, err := m.EveryMonth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyChoice != nil {
		{
			size := m.FrequencyChoice.Size()
			i -= size
			if _, err := m.FrequencyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CustomHeaderValue) > 0 {
		i -= len(m.CustomHeaderValue)
		copy(dAtA[i:], m.CustomHeaderValue)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomHeaderValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_EveryWeek) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EveryWeek) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryWeek != nil {
		{
			size, err := m.EveryWeek.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EveryDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EveryDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryDay != nil {
		{
			size, err := m.EveryDay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EveryMonth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EveryMonth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryMonth != nil {
		{
			size, err := m.EveryMonth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyChoice != nil {
		{
			size := m.FrequencyChoice.Size()
			i -= size
			if _, err := m.FrequencyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CustomHeaderValue) > 0 {
		i -= len(m.CustomHeaderValue)
		copy(dAtA[i:], m.CustomHeaderValue)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomHeaderValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_EveryWeek) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EveryWeek) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryWeek != nil {
		{
			size, err := m.EveryWeek.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EveryDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EveryDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryDay != nil {
		{
			size, err := m.EveryDay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EveryMonth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EveryMonth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EveryMonth != nil {
		{
			size, err := m.EveryMonth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.CustomHeaderValue)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FrequencyChoice != nil {
		n += m.FrequencyChoice.Size()
	}
	return n
}

func (m *GlobalSpecType_EveryWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryWeek != nil {
		l = m.EveryWeek.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EveryDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryDay != nil {
		l = m.EveryDay.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EveryMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryMonth != nil {
		l = m.EveryMonth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AllowDestructiveMethods {
		n += 2
	}
	if len(m.Credentials) > 0 {
		for _, e := range m.Credentials {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Credentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CredentialsChoice != nil {
		n += m.CredentialsChoice.Size()
	}
	if m.RoleChoice != nil {
		n += m.RoleChoice.Size()
	}
	return n
}

func (m *Credentials_BasicAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicAuth != nil {
		l = m.BasicAuth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Credentials_ApiKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiKey != nil {
		l = m.ApiKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Credentials_BearerToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BearerToken != nil {
		l = m.BearerToken.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Credentials_Standard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Standard != nil {
		l = m.Standard.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Credentials_Admin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Admin != nil {
		l = m.Admin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Credentials_LoginEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginEndpoint != nil {
		l = m.LoginEndpoint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BasicAuthentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ApiKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Bearer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LoginEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovTypes(uint64(m.Method))
	}
	if m.JsonPayload != nil {
		l = m.JsonPayload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TokenResponseKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.CustomHeaderValue)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FrequencyChoice != nil {
		n += m.FrequencyChoice.Size()
	}
	return n
}

func (m *CreateSpecType_EveryWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryWeek != nil {
		l = m.EveryWeek.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EveryDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryDay != nil {
		l = m.EveryDay.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EveryMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryMonth != nil {
		l = m.EveryMonth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.CustomHeaderValue)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FrequencyChoice != nil {
		n += m.FrequencyChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_EveryWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryWeek != nil {
		l = m.EveryWeek.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EveryDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryDay != nil {
		l = m.EveryDay.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EveryMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryMonth != nil {
		l = m.EveryMonth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.CustomHeaderValue)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FrequencyChoice != nil {
		n += m.FrequencyChoice.Size()
	}
	return n
}

func (m *GetSpecType_EveryWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryWeek != nil {
		l = m.EveryWeek.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EveryDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryDay != nil {
		l = m.EveryDay.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EveryMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EveryMonth != nil {
		l = m.EveryMonth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDomains := "[]*DomainConfiguration{"
	for _, f := range this.Domains {
		repeatedStringForDomains += strings.Replace(f.String(), "DomainConfiguration", "DomainConfiguration", 1) + ","
	}
	repeatedStringForDomains += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + repeatedStringForDomains + `,`,
		`CustomHeaderValue:` + fmt.Sprintf("%v", this.CustomHeaderValue) + `,`,
		`FrequencyChoice:` + fmt.Sprintf("%v", this.FrequencyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EveryWeek) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EveryWeek{`,
		`EveryWeek:` + strings.Replace(fmt.Sprintf("%v", this.EveryWeek), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EveryDay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EveryDay{`,
		`EveryDay:` + strings.Replace(fmt.Sprintf("%v", this.EveryDay), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EveryMonth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EveryMonth{`,
		`EveryMonth:` + strings.Replace(fmt.Sprintf("%v", this.EveryMonth), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCredentials := "[]*Credentials{"
	for _, f := range this.Credentials {
		repeatedStringForCredentials += strings.Replace(f.String(), "Credentials", "Credentials", 1) + ","
	}
	repeatedStringForCredentials += "}"
	s := strings.Join([]string{`&DomainConfiguration{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`AllowDestructiveMethods:` + fmt.Sprintf("%v", this.AllowDestructiveMethods) + `,`,
		`Credentials:` + repeatedStringForCredentials + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials{`,
		`CredentialName:` + fmt.Sprintf("%v", this.CredentialName) + `,`,
		`CredentialsChoice:` + fmt.Sprintf("%v", this.CredentialsChoice) + `,`,
		`RoleChoice:` + fmt.Sprintf("%v", this.RoleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_BasicAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_BasicAuth{`,
		`BasicAuth:` + strings.Replace(fmt.Sprintf("%v", this.BasicAuth), "BasicAuthentication", "BasicAuthentication", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_ApiKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_ApiKey{`,
		`ApiKey:` + strings.Replace(fmt.Sprintf("%v", this.ApiKey), "ApiKey", "ApiKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_BearerToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_BearerToken{`,
		`BearerToken:` + strings.Replace(fmt.Sprintf("%v", this.BearerToken), "Bearer", "Bearer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_Standard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_Standard{`,
		`Standard:` + strings.Replace(fmt.Sprintf("%v", this.Standard), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_Admin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_Admin{`,
		`Admin:` + strings.Replace(fmt.Sprintf("%v", this.Admin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_LoginEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_LoginEndpoint{`,
		`LoginEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.LoginEndpoint), "LoginEndpoint", "LoginEndpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BasicAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BasicAuthentication{`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiKey{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bearer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bearer{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginEndpoint{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`JsonPayload:` + strings.Replace(fmt.Sprintf("%v", this.JsonPayload), "SecretType", "schema.SecretType", 1) + `,`,
		`TokenResponseKey:` + fmt.Sprintf("%v", this.TokenResponseKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDomains := "[]*DomainConfiguration{"
	for _, f := range this.Domains {
		repeatedStringForDomains += strings.Replace(f.String(), "DomainConfiguration", "DomainConfiguration", 1) + ","
	}
	repeatedStringForDomains += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + repeatedStringForDomains + `,`,
		`CustomHeaderValue:` + fmt.Sprintf("%v", this.CustomHeaderValue) + `,`,
		`FrequencyChoice:` + fmt.Sprintf("%v", this.FrequencyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EveryWeek) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EveryWeek{`,
		`EveryWeek:` + strings.Replace(fmt.Sprintf("%v", this.EveryWeek), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EveryDay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EveryDay{`,
		`EveryDay:` + strings.Replace(fmt.Sprintf("%v", this.EveryDay), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EveryMonth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EveryMonth{`,
		`EveryMonth:` + strings.Replace(fmt.Sprintf("%v", this.EveryMonth), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDomains := "[]*DomainConfiguration{"
	for _, f := range this.Domains {
		repeatedStringForDomains += strings.Replace(f.String(), "DomainConfiguration", "DomainConfiguration", 1) + ","
	}
	repeatedStringForDomains += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + repeatedStringForDomains + `,`,
		`CustomHeaderValue:` + fmt.Sprintf("%v", this.CustomHeaderValue) + `,`,
		`FrequencyChoice:` + fmt.Sprintf("%v", this.FrequencyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EveryWeek) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EveryWeek{`,
		`EveryWeek:` + strings.Replace(fmt.Sprintf("%v", this.EveryWeek), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EveryDay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EveryDay{`,
		`EveryDay:` + strings.Replace(fmt.Sprintf("%v", this.EveryDay), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EveryMonth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EveryMonth{`,
		`EveryMonth:` + strings.Replace(fmt.Sprintf("%v", this.EveryMonth), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDomains := "[]*DomainConfiguration{"
	for _, f := range this.Domains {
		repeatedStringForDomains += strings.Replace(f.String(), "DomainConfiguration", "DomainConfiguration", 1) + ","
	}
	repeatedStringForDomains += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + repeatedStringForDomains + `,`,
		`CustomHeaderValue:` + fmt.Sprintf("%v", this.CustomHeaderValue) + `,`,
		`FrequencyChoice:` + fmt.Sprintf("%v", this.FrequencyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EveryWeek) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EveryWeek{`,
		`EveryWeek:` + strings.Replace(fmt.Sprintf("%v", this.EveryWeek), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EveryDay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EveryDay{`,
		`EveryDay:` + strings.Replace(fmt.Sprintf("%v", this.EveryDay), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EveryMonth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EveryMonth{`,
		`EveryMonth:` + strings.Replace(fmt.Sprintf("%v", this.EveryMonth), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &DomainConfiguration{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHeaderValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomHeaderValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryWeek", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &GlobalSpecType_EveryWeek{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &GlobalSpecType_EveryDay{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &GlobalSpecType_EveryMonth{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDestructiveMethods", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowDestructiveMethods = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, &Credentials{})
			if err := m.Credentials[len(m.Credentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BasicAuthentication{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialsChoice = &Credentials_BasicAuth{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialsChoice = &Credentials_ApiKey{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Bearer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialsChoice = &Credentials_BearerToken{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RoleChoice = &Credentials_Standard{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RoleChoice = &Credentials_Admin{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LoginEndpoint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialsChoice = &Credentials_LoginEndpoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasicAuthentication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicAuthentication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicAuthentication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &schema.SecretType{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &schema.SecretType{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bearer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bearer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bearer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &schema.SecretType{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JsonPayload == nil {
				m.JsonPayload = &schema.SecretType{}
			}
			if err := m.JsonPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenResponseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenResponseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &DomainConfiguration{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHeaderValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomHeaderValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryWeek", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &CreateSpecType_EveryWeek{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &CreateSpecType_EveryDay{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &CreateSpecType_EveryMonth{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &DomainConfiguration{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHeaderValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomHeaderValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryWeek", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &ReplaceSpecType_EveryWeek{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &ReplaceSpecType_EveryDay{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &ReplaceSpecType_EveryMonth{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &DomainConfiguration{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHeaderValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomHeaderValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryWeek", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &GetSpecType_EveryWeek{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &GetSpecType_EveryDay{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FrequencyChoice = &GetSpecType_EveryMonth{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

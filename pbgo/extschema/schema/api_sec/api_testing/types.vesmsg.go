// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package api_testing

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ApiKey) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiKey) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ApiKey) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetValue().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ApiKey.value")
	}

	return nil
}

func (m *ApiKey) DeepCopy() *ApiKey {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiKey{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiKey) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiKey) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiKeyValidator().Validate(ctx, m, opts...)
}

type ValidateApiKey struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiKey) KeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for key")
	}

	return validatorFn, nil
}

func (v *ValidateApiKey) ValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for value")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiKey) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiKey)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiKey got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["key"]; exists {

		vOpts := append(opts, db.WithValidateField("key"))
		if err := fv(ctx, m.GetKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiKeyValidator = func() *ValidateApiKey {
	v := &ValidateApiKey{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhKey := v.KeyValidationRuleHandler
	rulesKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFn, err = vrhKey(rulesKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiKey.key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["key"] = vFn

	vrhValue := v.ValueValidationRuleHandler
	rulesValue := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFn, err = vrhValue(rulesValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiKey.value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value"] = vFn

	return v
}()

func ApiKeyValidator() db.Validator {
	return DefaultApiKeyValidator
}

// augmented methods on protoc/std generated struct

func (m *BasicAuthentication) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BasicAuthentication) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *BasicAuthentication) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPassword().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting BasicAuthentication.password")
	}

	return nil
}

func (m *BasicAuthentication) DeepCopy() *BasicAuthentication {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BasicAuthentication{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BasicAuthentication) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BasicAuthentication) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BasicAuthenticationValidator().Validate(ctx, m, opts...)
}

type ValidateBasicAuthentication struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBasicAuthentication) UserValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user")
	}

	return validatorFn, nil
}

func (v *ValidateBasicAuthentication) PasswordValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for password")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBasicAuthentication) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BasicAuthentication)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BasicAuthentication got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["password"]; exists {

		vOpts := append(opts, db.WithValidateField("password"))
		if err := fv(ctx, m.GetPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user"]; exists {

		vOpts := append(opts, db.WithValidateField("user"))
		if err := fv(ctx, m.GetUser(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBasicAuthenticationValidator = func() *ValidateBasicAuthentication {
	v := &ValidateBasicAuthentication{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUser := v.UserValidationRuleHandler
	rulesUser := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhUser(rulesUser)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BasicAuthentication.user: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user"] = vFn

	vrhPassword := v.PasswordValidationRuleHandler
	rulesPassword := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFn, err = vrhPassword(rulesPassword)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BasicAuthentication.password: %s", err)
		panic(errMsg)
	}
	v.FldValidators["password"] = vFn

	return v
}()

func BasicAuthenticationValidator() db.Validator {
	return DefaultBasicAuthenticationValidator
}

// augmented methods on protoc/std generated struct

func (m *Bearer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Bearer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *Bearer) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting Bearer.token")
	}

	return nil
}

func (m *Bearer) DeepCopy() *Bearer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Bearer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Bearer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Bearer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BearerValidator().Validate(ctx, m, opts...)
}

type ValidateBearer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBearer) TokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for token")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBearer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Bearer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Bearer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["token"]; exists {

		vOpts := append(opts, db.WithValidateField("token"))
		if err := fv(ctx, m.GetToken(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBearerValidator = func() *ValidateBearer {
	v := &ValidateBearer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhToken := v.TokenValidationRuleHandler
	rulesToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFn, err = vrhToken(rulesToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Bearer.token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["token"] = vFn

	return v
}()

func BearerValidator() db.Validator {
	return DefaultBearerValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetDomains() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting CreateSpecType.domains idx %v", idx)
		}
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) FrequencyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for frequency_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DomainConfiguration, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DomainConfigurationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DomainConfiguration)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DomainConfiguration, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CustomHeaderValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for custom_header_value")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["custom_header_value"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_header_value"))
		if err := fv(ctx, m.GetCustomHeaderValue(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["frequency_choice"]; exists {
		val := m.GetFrequencyChoice()
		vOpts := append(opts,
			db.WithValidateField("frequency_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFrequencyChoice().(type) {
	case *CreateSpecType_EveryWeek:
		if fv, exists := v.FldValidators["frequency_choice.every_week"]; exists {
			val := m.GetFrequencyChoice().(*CreateSpecType_EveryWeek).EveryWeek
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_week"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EveryDay:
		if fv, exists := v.FldValidators["frequency_choice.every_day"]; exists {
			val := m.GetFrequencyChoice().(*CreateSpecType_EveryDay).EveryDay
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_day"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EveryMonth:
		if fv, exists := v.FldValidators["frequency_choice.every_month"]; exists {
			val := m.GetFrequencyChoice().(*CreateSpecType_EveryMonth).EveryMonth
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_month"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFrequencyChoice := v.FrequencyChoiceValidationRuleHandler
	rulesFrequencyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFrequencyChoice(rulesFrequencyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.frequency_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["frequency_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhCustomHeaderValue := v.CustomHeaderValueValidationRuleHandler
	rulesCustomHeaderValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFn, err = vrhCustomHeaderValue(rulesCustomHeaderValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.custom_header_value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_header_value"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Credentials) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Credentials) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *Credentials) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetBasicAuth().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting Credentials.basic_auth")
	}

	if err := m.GetApiKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting Credentials.api_key")
	}

	if err := m.GetBearerToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting Credentials.bearer_token")
	}

	if err := m.GetLoginEndpoint().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting Credentials.login_endpoint")
	}

	return nil
}

func (m *Credentials) DeepCopy() *Credentials {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Credentials{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Credentials) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Credentials) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CredentialsValidator().Validate(ctx, m, opts...)
}

type ValidateCredentials struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCredentials) CredentialsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for credentials_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCredentials) RoleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for role_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCredentials) CredentialNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for credential_name")
	}

	return validatorFn, nil
}

func (v *ValidateCredentials) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Credentials)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Credentials got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["credential_name"]; exists {

		vOpts := append(opts, db.WithValidateField("credential_name"))
		if err := fv(ctx, m.GetCredentialName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["credentials_choice"]; exists {
		val := m.GetCredentialsChoice()
		vOpts := append(opts,
			db.WithValidateField("credentials_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCredentialsChoice().(type) {
	case *Credentials_BasicAuth:
		if fv, exists := v.FldValidators["credentials_choice.basic_auth"]; exists {
			val := m.GetCredentialsChoice().(*Credentials_BasicAuth).BasicAuth
			vOpts := append(opts,
				db.WithValidateField("credentials_choice"),
				db.WithValidateField("basic_auth"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Credentials_ApiKey:
		if fv, exists := v.FldValidators["credentials_choice.api_key"]; exists {
			val := m.GetCredentialsChoice().(*Credentials_ApiKey).ApiKey
			vOpts := append(opts,
				db.WithValidateField("credentials_choice"),
				db.WithValidateField("api_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Credentials_BearerToken:
		if fv, exists := v.FldValidators["credentials_choice.bearer_token"]; exists {
			val := m.GetCredentialsChoice().(*Credentials_BearerToken).BearerToken
			vOpts := append(opts,
				db.WithValidateField("credentials_choice"),
				db.WithValidateField("bearer_token"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Credentials_LoginEndpoint:
		if fv, exists := v.FldValidators["credentials_choice.login_endpoint"]; exists {
			val := m.GetCredentialsChoice().(*Credentials_LoginEndpoint).LoginEndpoint
			vOpts := append(opts,
				db.WithValidateField("credentials_choice"),
				db.WithValidateField("login_endpoint"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["role_choice"]; exists {
		val := m.GetRoleChoice()
		vOpts := append(opts,
			db.WithValidateField("role_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRoleChoice().(type) {
	case *Credentials_Standard:
		if fv, exists := v.FldValidators["role_choice.standard"]; exists {
			val := m.GetRoleChoice().(*Credentials_Standard).Standard
			vOpts := append(opts,
				db.WithValidateField("role_choice"),
				db.WithValidateField("standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Credentials_Admin:
		if fv, exists := v.FldValidators["role_choice.admin"]; exists {
			val := m.GetRoleChoice().(*Credentials_Admin).Admin
			vOpts := append(opts,
				db.WithValidateField("role_choice"),
				db.WithValidateField("admin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCredentialsValidator = func() *ValidateCredentials {
	v := &ValidateCredentials{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCredentialsChoice := v.CredentialsChoiceValidationRuleHandler
	rulesCredentialsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCredentialsChoice(rulesCredentialsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Credentials.credentials_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["credentials_choice"] = vFn

	vrhRoleChoice := v.RoleChoiceValidationRuleHandler
	rulesRoleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRoleChoice(rulesRoleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Credentials.role_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["role_choice"] = vFn

	vrhCredentialName := v.CredentialNameValidationRuleHandler
	rulesCredentialName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhCredentialName(rulesCredentialName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Credentials.credential_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["credential_name"] = vFn

	v.FldValidators["credentials_choice.basic_auth"] = BasicAuthenticationValidator().Validate
	v.FldValidators["credentials_choice.api_key"] = ApiKeyValidator().Validate
	v.FldValidators["credentials_choice.bearer_token"] = BearerValidator().Validate
	v.FldValidators["credentials_choice.login_endpoint"] = LoginEndpointValidator().Validate

	return v
}()

func CredentialsValidator() db.Validator {
	return DefaultCredentialsValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainConfiguration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainConfiguration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *DomainConfiguration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetCredentials() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting DomainConfiguration.credentials idx %v", idx)
		}
	}

	return nil
}

func (m *DomainConfiguration) DeepCopy() *DomainConfiguration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainConfiguration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainConfiguration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainConfiguration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainConfigurationValidator().Validate(ctx, m, opts...)
}

type ValidateDomainConfiguration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainConfiguration) DomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain")
	}

	return validatorFn, nil
}

func (v *ValidateDomainConfiguration) CredentialsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for credentials")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Credentials, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CredentialsValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for credentials")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Credentials)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Credentials, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated credentials")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items credentials")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDomainConfiguration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainConfiguration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainConfiguration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allow_destructive_methods"]; exists {

		vOpts := append(opts, db.WithValidateField("allow_destructive_methods"))
		if err := fv(ctx, m.GetAllowDestructiveMethods(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["credentials"]; exists {
		vOpts := append(opts, db.WithValidateField("credentials"))
		if err := fv(ctx, m.GetCredentials(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainConfigurationValidator = func() *ValidateDomainConfiguration {
	v := &ValidateDomainConfiguration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomain := v.DomainValidationRuleHandler
	rulesDomain := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
		"ves.io.schema.rules.string.vh_domain": "true",
	}
	vFn, err = vrhDomain(rulesDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DomainConfiguration.domain: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain"] = vFn

	vrhCredentials := v.CredentialsValidationRuleHandler
	rulesCredentials := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCredentials(rulesCredentials)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DomainConfiguration.credentials: %s", err)
		panic(errMsg)
	}
	v.FldValidators["credentials"] = vFn

	return v
}()

func DomainConfigurationValidator() db.Validator {
	return DefaultDomainConfigurationValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetDomains() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GetSpecType.domains idx %v", idx)
		}
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) FrequencyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for frequency_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DomainConfiguration, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DomainConfigurationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DomainConfiguration)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DomainConfiguration, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CustomHeaderValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for custom_header_value")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["custom_header_value"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_header_value"))
		if err := fv(ctx, m.GetCustomHeaderValue(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["frequency_choice"]; exists {
		val := m.GetFrequencyChoice()
		vOpts := append(opts,
			db.WithValidateField("frequency_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFrequencyChoice().(type) {
	case *GetSpecType_EveryWeek:
		if fv, exists := v.FldValidators["frequency_choice.every_week"]; exists {
			val := m.GetFrequencyChoice().(*GetSpecType_EveryWeek).EveryWeek
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_week"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EveryDay:
		if fv, exists := v.FldValidators["frequency_choice.every_day"]; exists {
			val := m.GetFrequencyChoice().(*GetSpecType_EveryDay).EveryDay
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_day"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EveryMonth:
		if fv, exists := v.FldValidators["frequency_choice.every_month"]; exists {
			val := m.GetFrequencyChoice().(*GetSpecType_EveryMonth).EveryMonth
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_month"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFrequencyChoice := v.FrequencyChoiceValidationRuleHandler
	rulesFrequencyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFrequencyChoice(rulesFrequencyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.frequency_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["frequency_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhCustomHeaderValue := v.CustomHeaderValueValidationRuleHandler
	rulesCustomHeaderValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFn, err = vrhCustomHeaderValue(rulesCustomHeaderValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.custom_header_value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_header_value"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetDomains() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GlobalSpecType.domains idx %v", idx)
		}
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) FrequencyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for frequency_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DomainConfiguration, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DomainConfigurationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DomainConfiguration)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DomainConfiguration, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CustomHeaderValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for custom_header_value")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["custom_header_value"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_header_value"))
		if err := fv(ctx, m.GetCustomHeaderValue(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["frequency_choice"]; exists {
		val := m.GetFrequencyChoice()
		vOpts := append(opts,
			db.WithValidateField("frequency_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFrequencyChoice().(type) {
	case *GlobalSpecType_EveryWeek:
		if fv, exists := v.FldValidators["frequency_choice.every_week"]; exists {
			val := m.GetFrequencyChoice().(*GlobalSpecType_EveryWeek).EveryWeek
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_week"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EveryDay:
		if fv, exists := v.FldValidators["frequency_choice.every_day"]; exists {
			val := m.GetFrequencyChoice().(*GlobalSpecType_EveryDay).EveryDay
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_day"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EveryMonth:
		if fv, exists := v.FldValidators["frequency_choice.every_month"]; exists {
			val := m.GetFrequencyChoice().(*GlobalSpecType_EveryMonth).EveryMonth
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_month"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFrequencyChoice := v.FrequencyChoiceValidationRuleHandler
	rulesFrequencyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFrequencyChoice(rulesFrequencyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.frequency_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["frequency_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhCustomHeaderValue := v.CustomHeaderValueValidationRuleHandler
	rulesCustomHeaderValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFn, err = vrhCustomHeaderValue(rulesCustomHeaderValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.custom_header_value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_header_value"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LoginEndpoint) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LoginEndpoint) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *LoginEndpoint) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetJsonPayload().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting LoginEndpoint.json_payload")
	}

	return nil
}

func (m *LoginEndpoint) DeepCopy() *LoginEndpoint {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LoginEndpoint{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LoginEndpoint) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LoginEndpoint) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LoginEndpointValidator().Validate(ctx, m, opts...)
}

type ValidateLoginEndpoint struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLoginEndpoint) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path")
	}

	return validatorFn, nil
}

func (v *ValidateLoginEndpoint) MethodValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.HttpMethod)
		return int32(i)
	}
	// ves_io_schema.HttpMethod_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.HttpMethod_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for method")
	}

	return validatorFn, nil
}

func (v *ValidateLoginEndpoint) JsonPayloadValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for json_payload")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLoginEndpoint) TokenResponseKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for token_response_key")
	}

	return validatorFn, nil
}

func (v *ValidateLoginEndpoint) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LoginEndpoint)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LoginEndpoint got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["json_payload"]; exists {

		vOpts := append(opts, db.WithValidateField("json_payload"))
		if err := fv(ctx, m.GetJsonPayload(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["token_response_key"]; exists {

		vOpts := append(opts, db.WithValidateField("token_response_key"))
		if err := fv(ctx, m.GetTokenResponseKey(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLoginEndpointValidator = func() *ValidateLoginEndpoint {
	v := &ValidateLoginEndpoint{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LoginEndpoint.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhMethod := v.MethodValidationRuleHandler
	rulesMethod := map[string]string{
		"ves.io.schema.rules.enum.defined_only": "true",
		"ves.io.schema.rules.enum.in":           "[1,3,4]",
		"ves.io.schema.rules.message.required":  "true",
	}
	vFn, err = vrhMethod(rulesMethod)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LoginEndpoint.method: %s", err)
		panic(errMsg)
	}
	v.FldValidators["method"] = vFn

	vrhJsonPayload := v.JsonPayloadValidationRuleHandler
	rulesJsonPayload := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "2048",
	}
	vFn, err = vrhJsonPayload(rulesJsonPayload)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LoginEndpoint.json_payload: %s", err)
		panic(errMsg)
	}
	v.FldValidators["json_payload"] = vFn

	vrhTokenResponseKey := v.TokenResponseKeyValidationRuleHandler
	rulesTokenResponseKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTokenResponseKey(rulesTokenResponseKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LoginEndpoint.token_response_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["token_response_key"] = vFn

	return v
}()

func LoginEndpointValidator() db.Validator {
	return DefaultLoginEndpointValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetDomains() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting ReplaceSpecType.domains idx %v", idx)
		}
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) FrequencyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for frequency_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DomainConfiguration, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DomainConfigurationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DomainConfiguration)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DomainConfiguration, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CustomHeaderValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for custom_header_value")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["custom_header_value"]; exists {

		vOpts := append(opts, db.WithValidateField("custom_header_value"))
		if err := fv(ctx, m.GetCustomHeaderValue(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["frequency_choice"]; exists {
		val := m.GetFrequencyChoice()
		vOpts := append(opts,
			db.WithValidateField("frequency_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFrequencyChoice().(type) {
	case *ReplaceSpecType_EveryWeek:
		if fv, exists := v.FldValidators["frequency_choice.every_week"]; exists {
			val := m.GetFrequencyChoice().(*ReplaceSpecType_EveryWeek).EveryWeek
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_week"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EveryDay:
		if fv, exists := v.FldValidators["frequency_choice.every_day"]; exists {
			val := m.GetFrequencyChoice().(*ReplaceSpecType_EveryDay).EveryDay
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_day"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EveryMonth:
		if fv, exists := v.FldValidators["frequency_choice.every_month"]; exists {
			val := m.GetFrequencyChoice().(*ReplaceSpecType_EveryMonth).EveryMonth
			vOpts := append(opts,
				db.WithValidateField("frequency_choice"),
				db.WithValidateField("every_month"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFrequencyChoice := v.FrequencyChoiceValidationRuleHandler
	rulesFrequencyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFrequencyChoice(rulesFrequencyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.frequency_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["frequency_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhCustomHeaderValue := v.CustomHeaderValueValidationRuleHandler
	rulesCustomHeaderValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFn, err = vrhCustomHeaderValue(rulesCustomHeaderValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.custom_header_value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_header_value"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetFrequencyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FrequencyChoice.(type) {
	case nil:
		o.FrequencyChoice = nil

	case *CreateSpecType_EveryDay:
		o.FrequencyChoice = &GlobalSpecType_EveryDay{EveryDay: of.EveryDay}

	case *CreateSpecType_EveryMonth:
		o.FrequencyChoice = &GlobalSpecType_EveryMonth{EveryMonth: of.EveryMonth}

	case *CreateSpecType_EveryWeek:
		o.FrequencyChoice = &GlobalSpecType_EveryWeek{EveryWeek: of.EveryWeek}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetFrequencyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FrequencyChoice.(type) {
	case nil:
		r.FrequencyChoice = nil

	case *GlobalSpecType_EveryDay:
		r.FrequencyChoice = &CreateSpecType_EveryDay{EveryDay: of.EveryDay}

	case *GlobalSpecType_EveryMonth:
		r.FrequencyChoice = &CreateSpecType_EveryMonth{EveryMonth: of.EveryMonth}

	case *GlobalSpecType_EveryWeek:
		r.FrequencyChoice = &CreateSpecType_EveryWeek{EveryWeek: of.EveryWeek}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CustomHeaderValue = f.GetCustomHeaderValue()
	m.Domains = f.GetDomains()
	m.GetFrequencyChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CustomHeaderValue = m1.CustomHeaderValue
	f.Domains = m1.Domains
	m1.SetFrequencyChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetFrequencyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FrequencyChoice.(type) {
	case nil:
		o.FrequencyChoice = nil

	case *GetSpecType_EveryDay:
		o.FrequencyChoice = &GlobalSpecType_EveryDay{EveryDay: of.EveryDay}

	case *GetSpecType_EveryMonth:
		o.FrequencyChoice = &GlobalSpecType_EveryMonth{EveryMonth: of.EveryMonth}

	case *GetSpecType_EveryWeek:
		o.FrequencyChoice = &GlobalSpecType_EveryWeek{EveryWeek: of.EveryWeek}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetFrequencyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FrequencyChoice.(type) {
	case nil:
		r.FrequencyChoice = nil

	case *GlobalSpecType_EveryDay:
		r.FrequencyChoice = &GetSpecType_EveryDay{EveryDay: of.EveryDay}

	case *GlobalSpecType_EveryMonth:
		r.FrequencyChoice = &GetSpecType_EveryMonth{EveryMonth: of.EveryMonth}

	case *GlobalSpecType_EveryWeek:
		r.FrequencyChoice = &GetSpecType_EveryWeek{EveryWeek: of.EveryWeek}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CustomHeaderValue = f.GetCustomHeaderValue()
	m.Domains = f.GetDomains()
	m.GetFrequencyChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CustomHeaderValue = m1.CustomHeaderValue
	f.Domains = m1.Domains
	m1.SetFrequencyChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetFrequencyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FrequencyChoice.(type) {
	case nil:
		o.FrequencyChoice = nil

	case *ReplaceSpecType_EveryDay:
		o.FrequencyChoice = &GlobalSpecType_EveryDay{EveryDay: of.EveryDay}

	case *ReplaceSpecType_EveryMonth:
		o.FrequencyChoice = &GlobalSpecType_EveryMonth{EveryMonth: of.EveryMonth}

	case *ReplaceSpecType_EveryWeek:
		o.FrequencyChoice = &GlobalSpecType_EveryWeek{EveryWeek: of.EveryWeek}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetFrequencyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FrequencyChoice.(type) {
	case nil:
		r.FrequencyChoice = nil

	case *GlobalSpecType_EveryDay:
		r.FrequencyChoice = &ReplaceSpecType_EveryDay{EveryDay: of.EveryDay}

	case *GlobalSpecType_EveryMonth:
		r.FrequencyChoice = &ReplaceSpecType_EveryMonth{EveryMonth: of.EveryMonth}

	case *GlobalSpecType_EveryWeek:
		r.FrequencyChoice = &ReplaceSpecType_EveryWeek{EveryWeek: of.EveryWeek}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CustomHeaderValue = f.GetCustomHeaderValue()
	m.Domains = f.GetDomains()
	m.GetFrequencyChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CustomHeaderValue = m1.CustomHeaderValue
	f.Domains = m1.Domains
	m1.SetFrequencyChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

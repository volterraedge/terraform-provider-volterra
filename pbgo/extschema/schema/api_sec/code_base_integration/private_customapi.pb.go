// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/api_sec/code_base_integration/private_customapi.proto

package code_base_integration

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateCodeBaseIntegrationReq struct {
	Namespace         string             `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IntegrationHealth *IntegrationHealth `protobuf:"bytes,9,opt,name=integration_health,json=integrationHealth,proto3" json:"integration_health,omitempty"`
	NumberOfRepos     int32              `protobuf:"varint,6,opt,name=number_of_repos,json=numberOfRepos,proto3" json:"number_of_repos,omitempty"`
	NumberOfApiRepos  int32              `protobuf:"varint,7,opt,name=number_of_api_repos,json=numberOfApiRepos,proto3" json:"number_of_api_repos,omitempty"`
	UpdatedAt         *types.Timestamp   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Tenant            string             `protobuf:"bytes,10,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (m *UpdateCodeBaseIntegrationReq) Reset()      { *m = UpdateCodeBaseIntegrationReq{} }
func (*UpdateCodeBaseIntegrationReq) ProtoMessage() {}
func (*UpdateCodeBaseIntegrationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9445dec7a853dafc, []int{0}
}
func (m *UpdateCodeBaseIntegrationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCodeBaseIntegrationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCodeBaseIntegrationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCodeBaseIntegrationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCodeBaseIntegrationReq.Merge(m, src)
}
func (m *UpdateCodeBaseIntegrationReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCodeBaseIntegrationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCodeBaseIntegrationReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCodeBaseIntegrationReq proto.InternalMessageInfo

func (m *UpdateCodeBaseIntegrationReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateCodeBaseIntegrationReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateCodeBaseIntegrationReq) GetIntegrationHealth() *IntegrationHealth {
	if m != nil {
		return m.IntegrationHealth
	}
	return nil
}

func (m *UpdateCodeBaseIntegrationReq) GetNumberOfRepos() int32 {
	if m != nil {
		return m.NumberOfRepos
	}
	return 0
}

func (m *UpdateCodeBaseIntegrationReq) GetNumberOfApiRepos() int32 {
	if m != nil {
		return m.NumberOfApiRepos
	}
	return 0
}

func (m *UpdateCodeBaseIntegrationReq) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *UpdateCodeBaseIntegrationReq) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type UpdateCodeBaseIntegrationResp struct {
}

func (m *UpdateCodeBaseIntegrationResp) Reset()      { *m = UpdateCodeBaseIntegrationResp{} }
func (*UpdateCodeBaseIntegrationResp) ProtoMessage() {}
func (*UpdateCodeBaseIntegrationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9445dec7a853dafc, []int{1}
}
func (m *UpdateCodeBaseIntegrationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCodeBaseIntegrationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCodeBaseIntegrationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCodeBaseIntegrationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCodeBaseIntegrationResp.Merge(m, src)
}
func (m *UpdateCodeBaseIntegrationResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCodeBaseIntegrationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCodeBaseIntegrationResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCodeBaseIntegrationResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpdateCodeBaseIntegrationReq)(nil), "ves.io.schema.api_sec.code_base_integration.UpdateCodeBaseIntegrationReq")
	golang_proto.RegisterType((*UpdateCodeBaseIntegrationReq)(nil), "ves.io.schema.api_sec.code_base_integration.UpdateCodeBaseIntegrationReq")
	proto.RegisterType((*UpdateCodeBaseIntegrationResp)(nil), "ves.io.schema.api_sec.code_base_integration.UpdateCodeBaseIntegrationResp")
	golang_proto.RegisterType((*UpdateCodeBaseIntegrationResp)(nil), "ves.io.schema.api_sec.code_base_integration.UpdateCodeBaseIntegrationResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/api_sec/code_base_integration/private_customapi.proto", fileDescriptor_9445dec7a853dafc)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/api_sec/code_base_integration/private_customapi.proto", fileDescriptor_9445dec7a853dafc)
}

var fileDescriptor_9445dec7a853dafc = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x31, 0x6f, 0x13, 0x4b,
	0x10, 0xf6, 0xfa, 0x5d, 0xfc, 0xec, 0x7d, 0x7a, 0x7a, 0x7e, 0x87, 0x84, 0x2e, 0xc6, 0x6c, 0x2c,
	0x17, 0x28, 0x02, 0xf9, 0x4e, 0x0a, 0x05, 0x02, 0x21, 0x84, 0x93, 0x02, 0xe2, 0x26, 0x91, 0x05,
	0x0d, 0xcd, 0x69, 0xef, 0x3c, 0x3e, 0x2f, 0xf8, 0x6e, 0x97, 0xdb, 0xb5, 0x01, 0xa1, 0x48, 0x28,
	0xbf, 0x00, 0x89, 0x92, 0x3f, 0xc0, 0x7f, 0x48, 0x93, 0x92, 0x0a, 0x45, 0xa1, 0x49, 0x49, 0xce,
	0x14, 0x94, 0xe9, 0xd3, 0x20, 0xef, 0x9d, 0x13, 0xdb, 0x22, 0x11, 0x96, 0xe8, 0x66, 0xe6, 0xfb,
	0xe6, 0xdb, 0xd9, 0xd9, 0x99, 0xc5, 0x1b, 0x43, 0x90, 0x36, 0xe3, 0x8e, 0xf4, 0x7b, 0x10, 0x52,
	0x87, 0x0a, 0xe6, 0x4a, 0xf0, 0x1d, 0x9f, 0x77, 0xc0, 0xf5, 0xa8, 0x04, 0x97, 0x45, 0x0a, 0x82,
	0x98, 0x2a, 0xc6, 0x23, 0x47, 0xc4, 0x6c, 0x48, 0x15, 0xb8, 0xfe, 0x40, 0x2a, 0x1e, 0x52, 0xc1,
	0x6c, 0x11, 0x73, 0xc5, 0xcd, 0x5b, 0xa9, 0x88, 0x9d, 0x8a, 0xd8, 0x99, 0x88, 0xfd, 0x4b, 0x91,
	0x4a, 0x23, 0x60, 0xaa, 0x37, 0xf0, 0x6c, 0x9f, 0x87, 0x4e, 0xc0, 0x03, 0xee, 0x68, 0x0d, 0x6f,
	0xd0, 0xd5, 0x9e, 0x76, 0xb4, 0x95, 0x6a, 0x57, 0xaa, 0x01, 0xe7, 0x41, 0x1f, 0xc6, 0x95, 0x39,
	0x34, 0x8a, 0xb8, 0xd2, 0x2a, 0x32, 0x43, 0x57, 0x32, 0xf4, 0x4c, 0x43, 0xb1, 0x10, 0xa4, 0xa2,
	0xa1, 0xc8, 0x08, 0x77, 0x16, 0xb9, 0x9f, 0x7a, 0x23, 0x60, 0xa2, 0x7c, 0x6d, 0x36, 0x91, 0x8b,
	0xe9, 0x63, 0x97, 0x67, 0xc1, 0xe9, 0xbc, 0xea, 0x2c, 0x34, 0xa4, 0x7d, 0xd6, 0xa1, 0x0a, 0x32,
	0xb4, 0x3e, 0x87, 0x82, 0x84, 0x68, 0x38, 0x27, 0x5e, 0x9b, 0xe3, 0x30, 0x78, 0xe5, 0xce, 0x30,
	0xea, 0xa7, 0x79, 0x5c, 0x7d, 0x2a, 0xc6, 0xb2, 0x1b, 0xbc, 0x03, 0xeb, 0x54, 0xc2, 0xe6, 0xf9,
	0x2d, 0xda, 0xf0, 0xd2, 0xac, 0xe2, 0x52, 0x44, 0x43, 0x90, 0x82, 0xfa, 0x60, 0xa1, 0x1a, 0x5a,
	0x2d, 0xb5, 0xcf, 0x03, 0xa6, 0x89, 0x8d, 0xb1, 0x63, 0xe5, 0x35, 0xa0, 0x6d, 0x33, 0xc4, 0xe6,
	0x54, 0x27, 0xdc, 0x1e, 0xd0, 0xbe, 0xea, 0x59, 0xa5, 0x1a, 0x5a, 0xfd, 0x67, 0xed, 0x81, 0xbd,
	0xc0, 0xfb, 0xda, 0x53, 0xa5, 0x3c, 0xd6, 0x2a, 0xed, 0xff, 0xd9, 0x7c, 0xc8, 0xbc, 0x81, 0xff,
	0x8b, 0x06, 0xa1, 0x07, 0xb1, 0xcb, 0xbb, 0x6e, 0x0c, 0x82, 0x4b, 0xab, 0x50, 0x43, 0xab, 0x4b,
	0xed, 0x7f, 0xd3, 0xf0, 0x56, 0xb7, 0x3d, 0x0e, 0x9a, 0x0d, 0x7c, 0xe5, 0x9c, 0x37, 0x3e, 0x37,
	0xe5, 0xfe, 0xad, 0xb9, 0xe5, 0x09, 0xb7, 0x29, 0x58, 0x4a, 0xbf, 0x8b, 0xf1, 0x40, 0xf7, 0xa5,
	0xe3, 0x52, 0x65, 0x15, 0x75, 0xf5, 0x15, 0x3b, 0x9d, 0x11, 0x7b, 0x32, 0x23, 0xf6, 0x93, 0xc9,
	0x8c, 0xb4, 0x4b, 0x19, 0xbb, 0xa9, 0xcc, 0xab, 0xb8, 0xa0, 0x20, 0xa2, 0x91, 0xb2, 0xb0, 0x6e,
	0x4b, 0xe6, 0xb5, 0x8c, 0xe2, 0x5f, 0x65, 0xa3, 0x65, 0x14, 0x8d, 0xf2, 0x52, 0xcb, 0x28, 0x2e,
	0x95, 0x0b, 0xf5, 0x15, 0x7c, 0xfd, 0x92, 0xe6, 0x4b, 0xb1, 0x76, 0x98, 0xc7, 0xe5, 0xed, 0x74,
	0x55, 0x36, 0xf4, 0xa6, 0x34, 0xb7, 0x37, 0xcd, 0x53, 0x84, 0x97, 0x2f, 0x4c, 0x33, 0x37, 0x17,
	0x6a, 0xf1, 0x65, 0x6f, 0x5f, 0x69, 0xfd, 0x29, 0x29, 0x29, 0xea, 0x8f, 0x76, 0xbf, 0x7e, 0xff,
	0x90, 0x6f, 0xd6, 0xef, 0x4f, 0x56, 0xdf, 0x39, 0x9b, 0x22, 0xe9, 0xbc, 0x3d, 0xb3, 0x77, 0x2e,
	0xd8, 0x27, 0xcd, 0xd8, 0xb9, 0x87, 0x6e, 0x56, 0x1e, 0xee, 0xef, 0x21, 0xe3, 0x70, 0x0f, 0xad,
	0x2d, 0x52, 0xdb, 0x96, 0xf7, 0x1c, 0x7c, 0xb5, 0xfb, 0xc5, 0xca, 0x97, 0xd1, 0xfa, 0x47, 0x74,
	0x70, 0x4c, 0x72, 0x47, 0xc7, 0x24, 0x77, 0x72, 0x4c, 0xd0, 0xbb, 0x84, 0xa0, 0x4f, 0x09, 0x41,
	0x9f, 0x13, 0x82, 0x0e, 0x12, 0x82, 0xbe, 0x25, 0x04, 0xfd, 0x48, 0x48, 0xee, 0x24, 0x21, 0xe8,
	0xfd, 0x88, 0xe4, 0xf6, 0x47, 0x04, 0x1d, 0x8c, 0x48, 0xee, 0x68, 0x44, 0x72, 0xcf, 0x68, 0xc0,
	0xc5, 0x8b, 0xc0, 0x1e, 0xf2, 0xbe, 0x82, 0x38, 0xa6, 0xf6, 0x40, 0x3a, 0xda, 0xe8, 0xf2, 0x38,
	0x6c, 0x88, 0x98, 0x0f, 0x59, 0x07, 0xe2, 0xc6, 0x04, 0x76, 0x84, 0x17, 0x70, 0x07, 0x5e, 0xab,
	0x6c, 0xff, 0x7e, 0xe7, 0xe7, 0xf0, 0x0a, 0x7a, 0xb8, 0x6e, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0xa0, 0xfe, 0x97, 0x1e, 0x4f, 0x05, 0x00, 0x00,
}

func (this *UpdateCodeBaseIntegrationReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCodeBaseIntegrationReq)
	if !ok {
		that2, ok := that.(UpdateCodeBaseIntegrationReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.IntegrationHealth.Equal(that1.IntegrationHealth) {
		return false
	}
	if this.NumberOfRepos != that1.NumberOfRepos {
		return false
	}
	if this.NumberOfApiRepos != that1.NumberOfApiRepos {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	return true
}
func (this *UpdateCodeBaseIntegrationResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCodeBaseIntegrationResp)
	if !ok {
		that2, ok := that.(UpdateCodeBaseIntegrationResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateCodeBaseIntegrationReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&code_base_integration.UpdateCodeBaseIntegrationReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.IntegrationHealth != nil {
		s = append(s, "IntegrationHealth: "+fmt.Sprintf("%#v", this.IntegrationHealth)+",\n")
	}
	s = append(s, "NumberOfRepos: "+fmt.Sprintf("%#v", this.NumberOfRepos)+",\n")
	s = append(s, "NumberOfApiRepos: "+fmt.Sprintf("%#v", this.NumberOfApiRepos)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCodeBaseIntegrationResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&code_base_integration.UpdateCodeBaseIntegrationResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivateCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrivateCustomAPIClient is the client API for PrivateCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateCustomAPIClient interface {
	UpdateCodeBaseIntegration(ctx context.Context, in *UpdateCodeBaseIntegrationReq, opts ...grpc.CallOption) (*UpdateCodeBaseIntegrationResp, error)
}

type privateCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateCustomAPIClient(cc *grpc.ClientConn) PrivateCustomAPIClient {
	return &privateCustomAPIClient{cc}
}

func (c *privateCustomAPIClient) UpdateCodeBaseIntegration(ctx context.Context, in *UpdateCodeBaseIntegrationReq, opts ...grpc.CallOption) (*UpdateCodeBaseIntegrationResp, error) {
	out := new(UpdateCodeBaseIntegrationResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_sec.code_base_integration.PrivateCustomAPI/UpdateCodeBaseIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateCustomAPIServer is the server API for PrivateCustomAPI service.
type PrivateCustomAPIServer interface {
	UpdateCodeBaseIntegration(context.Context, *UpdateCodeBaseIntegrationReq) (*UpdateCodeBaseIntegrationResp, error)
}

// UnimplementedPrivateCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPrivateCustomAPIServer struct {
}

func (*UnimplementedPrivateCustomAPIServer) UpdateCodeBaseIntegration(ctx context.Context, req *UpdateCodeBaseIntegrationReq) (*UpdateCodeBaseIntegrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCodeBaseIntegration not implemented")
}

func RegisterPrivateCustomAPIServer(s *grpc.Server, srv PrivateCustomAPIServer) {
	s.RegisterService(&_PrivateCustomAPI_serviceDesc, srv)
}

func _PrivateCustomAPI_UpdateCodeBaseIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCodeBaseIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateCustomAPIServer).UpdateCodeBaseIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_sec.code_base_integration.PrivateCustomAPI/UpdateCodeBaseIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateCustomAPIServer).UpdateCodeBaseIntegration(ctx, req.(*UpdateCodeBaseIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.api_sec.code_base_integration.PrivateCustomAPI",
	HandlerType: (*PrivateCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCodeBaseIntegration",
			Handler:    _PrivateCustomAPI_UpdateCodeBaseIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/api_sec/code_base_integration/private_customapi.proto",
}

func (m *UpdateCodeBaseIntegrationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCodeBaseIntegrationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCodeBaseIntegrationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x52
	}
	if m.IntegrationHealth != nil {
		{
			size, err := m.IntegrationHealth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NumberOfApiRepos != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.NumberOfApiRepos))
		i--
		dAtA[i] = 0x38
	}
	if m.NumberOfRepos != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.NumberOfRepos))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCodeBaseIntegrationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCodeBaseIntegrationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCodeBaseIntegrationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPrivateCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivateCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateCodeBaseIntegrationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.NumberOfRepos != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.NumberOfRepos))
	}
	if m.NumberOfApiRepos != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.NumberOfApiRepos))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.IntegrationHealth != nil {
		l = m.IntegrationHealth.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *UpdateCodeBaseIntegrationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPrivateCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivateCustomapi(x uint64) (n int) {
	return sovPrivateCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateCodeBaseIntegrationReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCodeBaseIntegrationReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NumberOfRepos:` + fmt.Sprintf("%v", this.NumberOfRepos) + `,`,
		`NumberOfApiRepos:` + fmt.Sprintf("%v", this.NumberOfApiRepos) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`IntegrationHealth:` + strings.Replace(fmt.Sprintf("%v", this.IntegrationHealth), "IntegrationHealth", "IntegrationHealth", 1) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCodeBaseIntegrationResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCodeBaseIntegrationResp{`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivateCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateCodeBaseIntegrationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCodeBaseIntegrationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCodeBaseIntegrationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfRepos", wireType)
			}
			m.NumberOfRepos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfRepos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfApiRepos", wireType)
			}
			m.NumberOfApiRepos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfApiRepos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrationHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntegrationHealth == nil {
				m.IntegrationHealth = &IntegrationHealth{}
			}
			if err := m.IntegrationHealth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCodeBaseIntegrationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCodeBaseIntegrationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCodeBaseIntegrationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivateCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivateCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivateCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivateCustomapi = fmt.Errorf("proto: unexpected end of group")
)

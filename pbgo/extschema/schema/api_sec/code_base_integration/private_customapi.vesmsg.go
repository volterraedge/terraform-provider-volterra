// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package code_base_integration

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *UpdateCodeBaseIntegrationReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateCodeBaseIntegrationReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateCodeBaseIntegrationReq) DeepCopy() *UpdateCodeBaseIntegrationReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateCodeBaseIntegrationReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateCodeBaseIntegrationReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateCodeBaseIntegrationReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateCodeBaseIntegrationReqValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateCodeBaseIntegrationReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateCodeBaseIntegrationReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateCodeBaseIntegrationReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateCodeBaseIntegrationReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["integration_health"]; exists {

		vOpts := append(opts, db.WithValidateField("integration_health"))
		if err := fv(ctx, m.GetIntegrationHealth(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["number_of_api_repos"]; exists {

		vOpts := append(opts, db.WithValidateField("number_of_api_repos"))
		if err := fv(ctx, m.GetNumberOfApiRepos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["number_of_repos"]; exists {

		vOpts := append(opts, db.WithValidateField("number_of_repos"))
		if err := fv(ctx, m.GetNumberOfRepos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant"))
		if err := fv(ctx, m.GetTenant(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["updated_at"]; exists {

		vOpts := append(opts, db.WithValidateField("updated_at"))
		if err := fv(ctx, m.GetUpdatedAt(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateCodeBaseIntegrationReqValidator = func() *ValidateUpdateCodeBaseIntegrationReq {
	v := &ValidateUpdateCodeBaseIntegrationReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateCodeBaseIntegrationReqValidator() db.Validator {
	return DefaultUpdateCodeBaseIntegrationReqValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateCodeBaseIntegrationResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateCodeBaseIntegrationResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateCodeBaseIntegrationResp) DeepCopy() *UpdateCodeBaseIntegrationResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateCodeBaseIntegrationResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateCodeBaseIntegrationResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateCodeBaseIntegrationResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateCodeBaseIntegrationRespValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateCodeBaseIntegrationResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateCodeBaseIntegrationResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateCodeBaseIntegrationResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateCodeBaseIntegrationResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateCodeBaseIntegrationRespValidator = func() *ValidateUpdateCodeBaseIntegrationResp {
	v := &ValidateUpdateCodeBaseIntegrationResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateCodeBaseIntegrationRespValidator() db.Validator {
	return DefaultUpdateCodeBaseIntegrationRespValidator
}

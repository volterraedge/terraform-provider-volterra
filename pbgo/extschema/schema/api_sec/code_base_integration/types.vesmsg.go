// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package code_base_integration

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AzureReposIntegration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureReposIntegration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureReposIntegration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAccessToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureReposIntegration.access_token")
	}

	return nil
}

func (m *AzureReposIntegration) DeepCopy() *AzureReposIntegration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureReposIntegration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureReposIntegration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureReposIntegration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureReposIntegrationValidator().Validate(ctx, m, opts...)
}

type ValidateAzureReposIntegration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureReposIntegration) AccessTokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for access_token")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureReposIntegration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureReposIntegration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureReposIntegration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_token"]; exists {

		vOpts := append(opts, db.WithValidateField("access_token"))
		if err := fv(ctx, m.GetAccessToken(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureReposIntegrationValidator = func() *ValidateAzureReposIntegration {
	v := &ValidateAzureReposIntegration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAccessToken := v.AccessTokenValidationRuleHandler
	rulesAccessToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAccessToken(rulesAccessToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureReposIntegration.access_token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_token"] = vFn

	return v
}()

func AzureReposIntegrationValidator() db.Validator {
	return DefaultAzureReposIntegrationValidator
}

// augmented methods on protoc/std generated struct

func (m *BitBucketCloudIntegration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BitBucketCloudIntegration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *BitBucketCloudIntegration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPasswd().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting BitBucketCloudIntegration.passwd")
	}

	return nil
}

func (m *BitBucketCloudIntegration) DeepCopy() *BitBucketCloudIntegration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BitBucketCloudIntegration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BitBucketCloudIntegration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BitBucketCloudIntegration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BitBucketCloudIntegrationValidator().Validate(ctx, m, opts...)
}

type ValidateBitBucketCloudIntegration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBitBucketCloudIntegration) UsernameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for username")
	}

	return validatorFn, nil
}

func (v *ValidateBitBucketCloudIntegration) PasswdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for passwd")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBitBucketCloudIntegration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BitBucketCloudIntegration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BitBucketCloudIntegration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["passwd"]; exists {

		vOpts := append(opts, db.WithValidateField("passwd"))
		if err := fv(ctx, m.GetPasswd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["username"]; exists {

		vOpts := append(opts, db.WithValidateField("username"))
		if err := fv(ctx, m.GetUsername(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBitBucketCloudIntegrationValidator = func() *ValidateBitBucketCloudIntegration {
	v := &ValidateBitBucketCloudIntegration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUsername := v.UsernameValidationRuleHandler
	rulesUsername := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUsername(rulesUsername)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BitBucketCloudIntegration.username: %s", err)
		panic(errMsg)
	}
	v.FldValidators["username"] = vFn

	vrhPasswd := v.PasswdValidationRuleHandler
	rulesPasswd := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPasswd(rulesPasswd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BitBucketCloudIntegration.passwd: %s", err)
		panic(errMsg)
	}
	v.FldValidators["passwd"] = vFn

	return v
}()

func BitBucketCloudIntegrationValidator() db.Validator {
	return DefaultBitBucketCloudIntegrationValidator
}

// augmented methods on protoc/std generated struct

func (m *BitBucketServerIntegration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BitBucketServerIntegration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *BitBucketServerIntegration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPasswd().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting BitBucketServerIntegration.passwd")
	}

	return nil
}

func (m *BitBucketServerIntegration) DeepCopy() *BitBucketServerIntegration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BitBucketServerIntegration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BitBucketServerIntegration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BitBucketServerIntegration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BitBucketServerIntegrationValidator().Validate(ctx, m, opts...)
}

type ValidateBitBucketServerIntegration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBitBucketServerIntegration) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for url")
	}

	return validatorFn, nil
}

func (v *ValidateBitBucketServerIntegration) UsernameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for username")
	}

	return validatorFn, nil
}

func (v *ValidateBitBucketServerIntegration) PasswdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for passwd")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBitBucketServerIntegration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BitBucketServerIntegration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BitBucketServerIntegration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["passwd"]; exists {

		vOpts := append(opts, db.WithValidateField("passwd"))
		if err := fv(ctx, m.GetPasswd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["username"]; exists {

		vOpts := append(opts, db.WithValidateField("username"))
		if err := fv(ctx, m.GetUsername(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["verify_ssl"]; exists {

		vOpts := append(opts, db.WithValidateField("verify_ssl"))
		if err := fv(ctx, m.GetVerifySsl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBitBucketServerIntegrationValidator = func() *ValidateBitBucketServerIntegration {
	v := &ValidateBitBucketServerIntegration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BitBucketServerIntegration.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	vrhUsername := v.UsernameValidationRuleHandler
	rulesUsername := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUsername(rulesUsername)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BitBucketServerIntegration.username: %s", err)
		panic(errMsg)
	}
	v.FldValidators["username"] = vFn

	vrhPasswd := v.PasswdValidationRuleHandler
	rulesPasswd := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPasswd(rulesPasswd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BitBucketServerIntegration.passwd: %s", err)
		panic(errMsg)
	}
	v.FldValidators["passwd"] = vFn

	return v
}()

func BitBucketServerIntegrationValidator() db.Validator {
	return DefaultBitBucketServerIntegrationValidator
}

// augmented methods on protoc/std generated struct

func (m *CodeBaseIntegration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CodeBaseIntegration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CodeBaseIntegration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGithub().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CodeBaseIntegration.github")
	}

	if err := m.GetGithubEnterprise().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CodeBaseIntegration.github_enterprise")
	}

	if err := m.GetGitlab().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CodeBaseIntegration.gitlab")
	}

	if err := m.GetGitlabEnterprise().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CodeBaseIntegration.gitlab_enterprise")
	}

	if err := m.GetBitbucket().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CodeBaseIntegration.bitbucket")
	}

	if err := m.GetBitbucketServer().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CodeBaseIntegration.bitbucket_server")
	}

	if err := m.GetAzureRepos().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CodeBaseIntegration.azure_repos")
	}

	return nil
}

func (m *CodeBaseIntegration) DeepCopy() *CodeBaseIntegration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CodeBaseIntegration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CodeBaseIntegration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CodeBaseIntegration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CodeBaseIntegrationValidator().Validate(ctx, m, opts...)
}

type ValidateCodeBaseIntegration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCodeBaseIntegration) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}
	return validatorFn, nil
}

func (v *ValidateCodeBaseIntegration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CodeBaseIntegration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CodeBaseIntegration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["type"]; exists {
		val := m.GetType()
		vOpts := append(opts,
			db.WithValidateField("type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetType().(type) {
	case *CodeBaseIntegration_Github:
		if fv, exists := v.FldValidators["type.github"]; exists {
			val := m.GetType().(*CodeBaseIntegration_Github).Github
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("github"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CodeBaseIntegration_GithubEnterprise:
		if fv, exists := v.FldValidators["type.github_enterprise"]; exists {
			val := m.GetType().(*CodeBaseIntegration_GithubEnterprise).GithubEnterprise
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("github_enterprise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CodeBaseIntegration_Gitlab:
		if fv, exists := v.FldValidators["type.gitlab"]; exists {
			val := m.GetType().(*CodeBaseIntegration_Gitlab).Gitlab
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("gitlab"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CodeBaseIntegration_GitlabEnterprise:
		if fv, exists := v.FldValidators["type.gitlab_enterprise"]; exists {
			val := m.GetType().(*CodeBaseIntegration_GitlabEnterprise).GitlabEnterprise
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("gitlab_enterprise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CodeBaseIntegration_Bitbucket:
		if fv, exists := v.FldValidators["type.bitbucket"]; exists {
			val := m.GetType().(*CodeBaseIntegration_Bitbucket).Bitbucket
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("bitbucket"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CodeBaseIntegration_BitbucketServer:
		if fv, exists := v.FldValidators["type.bitbucket_server"]; exists {
			val := m.GetType().(*CodeBaseIntegration_BitbucketServer).BitbucketServer
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("bitbucket_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CodeBaseIntegration_AzureRepos:
		if fv, exists := v.FldValidators["type.azure_repos"]; exists {
			val := m.GetType().(*CodeBaseIntegration_AzureRepos).AzureRepos
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("azure_repos"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCodeBaseIntegrationValidator = func() *ValidateCodeBaseIntegration {
	v := &ValidateCodeBaseIntegration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CodeBaseIntegration.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	v.FldValidators["type.github"] = GithubIntegrationValidator().Validate
	v.FldValidators["type.github_enterprise"] = GithubEnterpriseIntegrationValidator().Validate
	v.FldValidators["type.gitlab"] = GitlabCloudIntegrationValidator().Validate
	v.FldValidators["type.gitlab_enterprise"] = GitlabEnterpriseIntegrationValidator().Validate
	v.FldValidators["type.bitbucket"] = BitBucketCloudIntegrationValidator().Validate
	v.FldValidators["type.bitbucket_server"] = BitBucketServerIntegrationValidator().Validate
	v.FldValidators["type.azure_repos"] = AzureReposIntegrationValidator().Validate

	return v
}()

func CodeBaseIntegrationValidator() db.Validator {
	return DefaultCodeBaseIntegrationValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCodeBaseIntegration().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.code_base_integration")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["code_base_integration"]; exists {

		vOpts := append(opts, db.WithValidateField("code_base_integration"))
		if err := fv(ctx, m.GetCodeBaseIntegration(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["code_base_integration"] = CodeBaseIntegrationValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCodeBaseIntegration().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.code_base_integration")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) IntegrationHealthValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for integration_health")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["code_base_integration"]; exists {

		vOpts := append(opts, db.WithValidateField("code_base_integration"))
		if err := fv(ctx, m.GetCodeBaseIntegration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["integration_health"]; exists {

		vOpts := append(opts, db.WithValidateField("integration_health"))
		if err := fv(ctx, m.GetIntegrationHealth(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["number_of_api_repos"]; exists {

		vOpts := append(opts, db.WithValidateField("number_of_api_repos"))
		if err := fv(ctx, m.GetNumberOfApiRepos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["number_of_repos"]; exists {

		vOpts := append(opts, db.WithValidateField("number_of_repos"))
		if err := fv(ctx, m.GetNumberOfRepos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["updated_at"]; exists {

		vOpts := append(opts, db.WithValidateField("updated_at"))
		if err := fv(ctx, m.GetUpdatedAt(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIntegrationHealth := v.IntegrationHealthValidationRuleHandler
	rulesIntegrationHealth := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIntegrationHealth(rulesIntegrationHealth)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.integration_health: %s", err)
		panic(errMsg)
	}
	v.FldValidators["integration_health"] = vFn

	v.FldValidators["code_base_integration"] = CodeBaseIntegrationValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GithubEnterpriseIntegration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GithubEnterpriseIntegration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GithubEnterpriseIntegration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAccessToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GithubEnterpriseIntegration.access_token")
	}

	return nil
}

func (m *GithubEnterpriseIntegration) DeepCopy() *GithubEnterpriseIntegration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GithubEnterpriseIntegration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GithubEnterpriseIntegration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GithubEnterpriseIntegration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GithubEnterpriseIntegrationValidator().Validate(ctx, m, opts...)
}

type ValidateGithubEnterpriseIntegration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGithubEnterpriseIntegration) HostnameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hostname")
	}

	return validatorFn, nil
}

func (v *ValidateGithubEnterpriseIntegration) UsernameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for username")
	}

	return validatorFn, nil
}

func (v *ValidateGithubEnterpriseIntegration) AccessTokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for access_token")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGithubEnterpriseIntegration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GithubEnterpriseIntegration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GithubEnterpriseIntegration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_token"]; exists {

		vOpts := append(opts, db.WithValidateField("access_token"))
		if err := fv(ctx, m.GetAccessToken(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hostname"]; exists {

		vOpts := append(opts, db.WithValidateField("hostname"))
		if err := fv(ctx, m.GetHostname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["username"]; exists {

		vOpts := append(opts, db.WithValidateField("username"))
		if err := fv(ctx, m.GetUsername(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGithubEnterpriseIntegrationValidator = func() *ValidateGithubEnterpriseIntegration {
	v := &ValidateGithubEnterpriseIntegration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostname := v.HostnameValidationRuleHandler
	rulesHostname := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhHostname(rulesHostname)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GithubEnterpriseIntegration.hostname: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hostname"] = vFn

	vrhUsername := v.UsernameValidationRuleHandler
	rulesUsername := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUsername(rulesUsername)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GithubEnterpriseIntegration.username: %s", err)
		panic(errMsg)
	}
	v.FldValidators["username"] = vFn

	vrhAccessToken := v.AccessTokenValidationRuleHandler
	rulesAccessToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAccessToken(rulesAccessToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GithubEnterpriseIntegration.access_token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_token"] = vFn

	return v
}()

func GithubEnterpriseIntegrationValidator() db.Validator {
	return DefaultGithubEnterpriseIntegrationValidator
}

// augmented methods on protoc/std generated struct

func (m *GithubIntegration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GithubIntegration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GithubIntegration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAccessToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GithubIntegration.access_token")
	}

	return nil
}

func (m *GithubIntegration) DeepCopy() *GithubIntegration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GithubIntegration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GithubIntegration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GithubIntegration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GithubIntegrationValidator().Validate(ctx, m, opts...)
}

type ValidateGithubIntegration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGithubIntegration) UsernameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for username")
	}

	return validatorFn, nil
}

func (v *ValidateGithubIntegration) AccessTokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for access_token")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGithubIntegration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GithubIntegration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GithubIntegration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_token"]; exists {

		vOpts := append(opts, db.WithValidateField("access_token"))
		if err := fv(ctx, m.GetAccessToken(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["username"]; exists {

		vOpts := append(opts, db.WithValidateField("username"))
		if err := fv(ctx, m.GetUsername(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["verify_ssl"]; exists {

		vOpts := append(opts, db.WithValidateField("verify_ssl"))
		if err := fv(ctx, m.GetVerifySsl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGithubIntegrationValidator = func() *ValidateGithubIntegration {
	v := &ValidateGithubIntegration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUsername := v.UsernameValidationRuleHandler
	rulesUsername := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUsername(rulesUsername)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GithubIntegration.username: %s", err)
		panic(errMsg)
	}
	v.FldValidators["username"] = vFn

	vrhAccessToken := v.AccessTokenValidationRuleHandler
	rulesAccessToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAccessToken(rulesAccessToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GithubIntegration.access_token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_token"] = vFn

	return v
}()

func GithubIntegrationValidator() db.Validator {
	return DefaultGithubIntegrationValidator
}

// augmented methods on protoc/std generated struct

func (m *GitlabCloudIntegration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GitlabCloudIntegration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GitlabCloudIntegration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAccessToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GitlabCloudIntegration.access_token")
	}

	return nil
}

func (m *GitlabCloudIntegration) DeepCopy() *GitlabCloudIntegration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GitlabCloudIntegration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GitlabCloudIntegration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GitlabCloudIntegration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GitlabCloudIntegrationValidator().Validate(ctx, m, opts...)
}

type ValidateGitlabCloudIntegration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGitlabCloudIntegration) AccessTokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for access_token")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGitlabCloudIntegration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GitlabCloudIntegration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GitlabCloudIntegration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_token"]; exists {

		vOpts := append(opts, db.WithValidateField("access_token"))
		if err := fv(ctx, m.GetAccessToken(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGitlabCloudIntegrationValidator = func() *ValidateGitlabCloudIntegration {
	v := &ValidateGitlabCloudIntegration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAccessToken := v.AccessTokenValidationRuleHandler
	rulesAccessToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAccessToken(rulesAccessToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GitlabCloudIntegration.access_token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_token"] = vFn

	return v
}()

func GitlabCloudIntegrationValidator() db.Validator {
	return DefaultGitlabCloudIntegrationValidator
}

// augmented methods on protoc/std generated struct

func (m *GitlabEnterpriseIntegration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GitlabEnterpriseIntegration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GitlabEnterpriseIntegration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAccessToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GitlabEnterpriseIntegration.access_token")
	}

	return nil
}

func (m *GitlabEnterpriseIntegration) DeepCopy() *GitlabEnterpriseIntegration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GitlabEnterpriseIntegration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GitlabEnterpriseIntegration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GitlabEnterpriseIntegration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GitlabEnterpriseIntegrationValidator().Validate(ctx, m, opts...)
}

type ValidateGitlabEnterpriseIntegration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGitlabEnterpriseIntegration) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for url")
	}

	return validatorFn, nil
}

func (v *ValidateGitlabEnterpriseIntegration) AccessTokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for access_token")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGitlabEnterpriseIntegration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GitlabEnterpriseIntegration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GitlabEnterpriseIntegration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_token"]; exists {

		vOpts := append(opts, db.WithValidateField("access_token"))
		if err := fv(ctx, m.GetAccessToken(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGitlabEnterpriseIntegrationValidator = func() *ValidateGitlabEnterpriseIntegration {
	v := &ValidateGitlabEnterpriseIntegration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GitlabEnterpriseIntegration.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	vrhAccessToken := v.AccessTokenValidationRuleHandler
	rulesAccessToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAccessToken(rulesAccessToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GitlabEnterpriseIntegration.access_token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_token"] = vFn

	return v
}()

func GitlabEnterpriseIntegrationValidator() db.Validator {
	return DefaultGitlabEnterpriseIntegrationValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCodeBaseIntegration().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.code_base_integration")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) IntegrationHealthValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for integration_health")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["code_base_integration"]; exists {

		vOpts := append(opts, db.WithValidateField("code_base_integration"))
		if err := fv(ctx, m.GetCodeBaseIntegration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["integration_health"]; exists {

		vOpts := append(opts, db.WithValidateField("integration_health"))
		if err := fv(ctx, m.GetIntegrationHealth(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["number_of_api_repos"]; exists {

		vOpts := append(opts, db.WithValidateField("number_of_api_repos"))
		if err := fv(ctx, m.GetNumberOfApiRepos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["number_of_repos"]; exists {

		vOpts := append(opts, db.WithValidateField("number_of_repos"))
		if err := fv(ctx, m.GetNumberOfRepos(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["updated_at"]; exists {

		vOpts := append(opts, db.WithValidateField("updated_at"))
		if err := fv(ctx, m.GetUpdatedAt(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIntegrationHealth := v.IntegrationHealthValidationRuleHandler
	rulesIntegrationHealth := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIntegrationHealth(rulesIntegrationHealth)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.integration_health: %s", err)
		panic(errMsg)
	}
	v.FldValidators["integration_health"] = vFn

	v.FldValidators["code_base_integration"] = CodeBaseIntegrationValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *IntegrationHealth) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *IntegrationHealth) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *IntegrationHealth) DeepCopy() *IntegrationHealth {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &IntegrationHealth{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *IntegrationHealth) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *IntegrationHealth) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IntegrationHealthValidator().Validate(ctx, m, opts...)
}

type ValidateIntegrationHealth struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIntegrationHealth) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*IntegrationHealth)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *IntegrationHealth got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_status"]; exists {

		vOpts := append(opts, db.WithValidateField("health_status"))
		if err := fv(ctx, m.GetHealthStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["reason"]; exists {

		vOpts := append(opts, db.WithValidateField("reason"))
		if err := fv(ctx, m.GetReason(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIntegrationHealthValidator = func() *ValidateIntegrationHealth {
	v := &ValidateIntegrationHealth{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func IntegrationHealthValidator() db.Validator {
	return DefaultIntegrationHealthValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCodeBaseIntegration().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.code_base_integration")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["code_base_integration"]; exists {

		vOpts := append(opts, db.WithValidateField("code_base_integration"))
		if err := fv(ctx, m.GetCodeBaseIntegration(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["code_base_integration"] = CodeBaseIntegrationValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CodeBaseIntegration = f.GetCodeBaseIntegration()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CodeBaseIntegration = m1.CodeBaseIntegration
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CodeBaseIntegration = f.GetCodeBaseIntegration()
	m.IntegrationHealth = f.GetIntegrationHealth()
	m.NumberOfApiRepos = f.GetNumberOfApiRepos()
	m.NumberOfRepos = f.GetNumberOfRepos()
	m.UpdatedAt = f.GetUpdatedAt()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CodeBaseIntegration = m1.CodeBaseIntegration
	f.IntegrationHealth = m1.IntegrationHealth
	f.NumberOfApiRepos = m1.NumberOfApiRepos
	f.NumberOfRepos = m1.NumberOfRepos
	f.UpdatedAt = m1.UpdatedAt
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CodeBaseIntegration = f.GetCodeBaseIntegration()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CodeBaseIntegration = m1.CodeBaseIntegration
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

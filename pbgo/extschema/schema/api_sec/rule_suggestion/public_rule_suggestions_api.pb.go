// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/api_sec/rule_suggestion/public_rule_suggestions_api.proto

// Application Security Monitoring APIs
//
// x-displayName: "Application Security Monitoring APIs"
// APIs to get rule suggestions from App Security Monitoring pages

package rule_suggestion

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
	http_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer"
	virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetSuggestedSensitiveDataRuleReq
//
// x-displayName: "Get Suggested Sensitive Data Rule Request"
// Get suggested sensitive data rule for a given path
type GetSuggestedSensitiveDataRuleReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "ves-io-frontend"
	// x-required
	// Virtual Host for which this sensitive data rule applied
	VirtualHostName string `protobuf:"bytes,2,opt,name=virtual_host_name,json=virtualHostName,proto3" json:"virtual_host_name,omitempty"`
	// Path
	//
	// x-displayName: "Request Path"
	// x-example: "/example"
	// x-required
	// Path to apply the senstive data to
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Method
	//
	// x-displayName: "Request Method"
	// x-example: "POST"
	// x-required
	// Method to apply the sensitive data to
	Method schema.HttpMethod `protobuf:"varint,4,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
}

func (m *GetSuggestedSensitiveDataRuleReq) Reset()      { *m = GetSuggestedSensitiveDataRuleReq{} }
func (*GetSuggestedSensitiveDataRuleReq) ProtoMessage() {}
func (*GetSuggestedSensitiveDataRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_389ee07209b8c3fa, []int{0}
}
func (m *GetSuggestedSensitiveDataRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSuggestedSensitiveDataRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSuggestedSensitiveDataRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSuggestedSensitiveDataRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestedSensitiveDataRuleReq.Merge(m, src)
}
func (m *GetSuggestedSensitiveDataRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSuggestedSensitiveDataRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestedSensitiveDataRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestedSensitiveDataRuleReq proto.InternalMessageInfo

func (m *GetSuggestedSensitiveDataRuleReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetSuggestedSensitiveDataRuleReq) GetVirtualHostName() string {
	if m != nil {
		return m.VirtualHostName
	}
	return ""
}

func (m *GetSuggestedSensitiveDataRuleReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GetSuggestedSensitiveDataRuleReq) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

// GetSuggestedOasValidationRuleRsp
//
// x-displayName: "Get Suggested Open API specification validation Rule Response"
// Get suggested Open API specification validation for a given path
type GetSuggestedOasValidationRuleRsp struct {
	// Types that are valid to be assigned to ApiValidationChoice:
	//	*GetSuggestedOasValidationRuleRsp_CustomOasValidation
	//	*GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation
	ApiValidationChoice isGetSuggestedOasValidationRuleRsp_ApiValidationChoice `protobuf_oneof:"api_validation_choice"`
	// Loadbalancer Type
	//
	// x-displayName: "Loadbalancer Type"
	// The type of load balancer, can be "http" or "cdn"
	LoadbalancerType virtual_host.VirtualHostType `protobuf:"varint,5,opt,name=loadbalancer_type,json=loadbalancerType,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"loadbalancer_type,omitempty"`
	// FoundExistingRule
	//
	// x-displayName: "Found existing rule"
	// Specifies if an existing rule to block this client already exists with same match conditions
	FoundExistingRule *schema.Empty `protobuf:"bytes,4,opt,name=found_existing_rule,json=foundExistingRule,proto3" json:"found_existing_rule,omitempty"`
}

func (m *GetSuggestedOasValidationRuleRsp) Reset()      { *m = GetSuggestedOasValidationRuleRsp{} }
func (*GetSuggestedOasValidationRuleRsp) ProtoMessage() {}
func (*GetSuggestedOasValidationRuleRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_389ee07209b8c3fa, []int{1}
}
func (m *GetSuggestedOasValidationRuleRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSuggestedOasValidationRuleRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSuggestedOasValidationRuleRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSuggestedOasValidationRuleRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestedOasValidationRuleRsp.Merge(m, src)
}
func (m *GetSuggestedOasValidationRuleRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetSuggestedOasValidationRuleRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestedOasValidationRuleRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestedOasValidationRuleRsp proto.InternalMessageInfo

type isGetSuggestedOasValidationRuleRsp_ApiValidationChoice interface {
	isGetSuggestedOasValidationRuleRsp_ApiValidationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSuggestedOasValidationRuleRsp_CustomOasValidation struct {
	CustomOasValidation *common_waf.OpenApiValidationRule `protobuf:"bytes,2,opt,name=custom_oas_validation,json=customOasValidation,proto3,oneof" json:"custom_oas_validation,omitempty"`
}
type GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation struct {
	AllEndpointsOasValidation *common_waf.OpenApiValidationAllSpecEndpointsSettings `protobuf:"bytes,3,opt,name=all_endpoints_oas_validation,json=allEndpointsOasValidation,proto3,oneof" json:"all_endpoints_oas_validation,omitempty"`
}

func (*GetSuggestedOasValidationRuleRsp_CustomOasValidation) isGetSuggestedOasValidationRuleRsp_ApiValidationChoice() {
}
func (*GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation) isGetSuggestedOasValidationRuleRsp_ApiValidationChoice() {
}

func (m *GetSuggestedOasValidationRuleRsp) GetApiValidationChoice() isGetSuggestedOasValidationRuleRsp_ApiValidationChoice {
	if m != nil {
		return m.ApiValidationChoice
	}
	return nil
}

func (m *GetSuggestedOasValidationRuleRsp) GetCustomOasValidation() *common_waf.OpenApiValidationRule {
	if x, ok := m.GetApiValidationChoice().(*GetSuggestedOasValidationRuleRsp_CustomOasValidation); ok {
		return x.CustomOasValidation
	}
	return nil
}

func (m *GetSuggestedOasValidationRuleRsp) GetAllEndpointsOasValidation() *common_waf.OpenApiValidationAllSpecEndpointsSettings {
	if x, ok := m.GetApiValidationChoice().(*GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation); ok {
		return x.AllEndpointsOasValidation
	}
	return nil
}

func (m *GetSuggestedOasValidationRuleRsp) GetLoadbalancerType() virtual_host.VirtualHostType {
	if m != nil {
		return m.LoadbalancerType
	}
	return virtual_host.VIRTUAL_SERVICE
}

func (m *GetSuggestedOasValidationRuleRsp) GetFoundExistingRule() *schema.Empty {
	if m != nil {
		return m.FoundExistingRule
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSuggestedOasValidationRuleRsp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSuggestedOasValidationRuleRsp_CustomOasValidation)(nil),
		(*GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation)(nil),
	}
}

// GetSuggestedOasValidationRuleReq
//
// x-displayName: "Get Suggested Open API specification validation Rule Request"
// Get suggested Open API specification validation for a given path
type GetSuggestedOasValidationRuleReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "ves-io-frontend"
	// x-required
	// Virtual Host for which this Open API specification validation rule applied
	VirtualHostName string `protobuf:"bytes,2,opt,name=virtual_host_name,json=virtualHostName,proto3" json:"virtual_host_name,omitempty"`
	// Path
	//
	// x-displayName: "Request Path"
	// x-example: "/example"
	// x-required
	// Path to apply the Open API specification validation to
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Method
	//
	// x-displayName: "Request Method"
	// x-example: "POST"
	// x-required
	// Method to apply the Open API specification validation to
	Method schema.HttpMethod `protobuf:"varint,4,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
	// API Groups membership
	//
	// x-displayName: "API Groups membership"
	// x-example: ["group-1", "group-2"]
	// List of API Groups the API Endpoint is a member of.
	ApiGroups []string `protobuf:"bytes,5,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
}

func (m *GetSuggestedOasValidationRuleReq) Reset()      { *m = GetSuggestedOasValidationRuleReq{} }
func (*GetSuggestedOasValidationRuleReq) ProtoMessage() {}
func (*GetSuggestedOasValidationRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_389ee07209b8c3fa, []int{2}
}
func (m *GetSuggestedOasValidationRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSuggestedOasValidationRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSuggestedOasValidationRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSuggestedOasValidationRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestedOasValidationRuleReq.Merge(m, src)
}
func (m *GetSuggestedOasValidationRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSuggestedOasValidationRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestedOasValidationRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestedOasValidationRuleReq proto.InternalMessageInfo

func (m *GetSuggestedOasValidationRuleReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetSuggestedOasValidationRuleReq) GetVirtualHostName() string {
	if m != nil {
		return m.VirtualHostName
	}
	return ""
}

func (m *GetSuggestedOasValidationRuleReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GetSuggestedOasValidationRuleReq) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

func (m *GetSuggestedOasValidationRuleReq) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

// GetSuggestedRateLimitRuleReq
//
// x-displayName: "Get Suggested Rate Limit Rule Request"
// Get suggested rate limit rule for a given path
type GetSuggestedRateLimitRuleReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "ves-io-frontend"
	// x-required
	// Virtual Host for which this rate limit rule applied
	VirtualHostName string `protobuf:"bytes,2,opt,name=virtual_host_name,json=virtualHostName,proto3" json:"virtual_host_name,omitempty"`
	// Path
	//
	// x-displayName: "Request Path"
	// x-example: "/example"
	// x-required
	// Path to apply the rate limit to
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Method
	//
	// x-displayName: "Request Method"
	// x-example: "POST"
	// x-required
	// Method to apply the rate limit to
	Method schema.HttpMethod `protobuf:"varint,4,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
}

func (m *GetSuggestedRateLimitRuleReq) Reset()      { *m = GetSuggestedRateLimitRuleReq{} }
func (*GetSuggestedRateLimitRuleReq) ProtoMessage() {}
func (*GetSuggestedRateLimitRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_389ee07209b8c3fa, []int{3}
}
func (m *GetSuggestedRateLimitRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSuggestedRateLimitRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSuggestedRateLimitRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSuggestedRateLimitRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestedRateLimitRuleReq.Merge(m, src)
}
func (m *GetSuggestedRateLimitRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSuggestedRateLimitRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestedRateLimitRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestedRateLimitRuleReq proto.InternalMessageInfo

func (m *GetSuggestedRateLimitRuleReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetSuggestedRateLimitRuleReq) GetVirtualHostName() string {
	if m != nil {
		return m.VirtualHostName
	}
	return ""
}

func (m *GetSuggestedRateLimitRuleReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GetSuggestedRateLimitRuleReq) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

// GetSuggestedAPIEndpointProtectionRuleReq
//
// x-displayName: "Get Suggested API endpoint protection Rule Request"
// Get suggested API endpoint protection rule for a given path
type GetSuggestedAPIEndpointProtectionRuleReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// x-required
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "ves-io-frontend"
	// x-required
	// Virtual Host for which this API endpoint protection rule applied
	VirtualHostName string `protobuf:"bytes,2,opt,name=virtual_host_name,json=virtualHostName,proto3" json:"virtual_host_name,omitempty"`
	// Path
	//
	// x-displayName: "Request Path"
	// x-example: "/example"
	// x-required
	// Path to apply the API endpoint protection to
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Method
	//
	// x-displayName: "Request Method"
	// x-example: "POST"
	// x-required
	// Method to apply the API endpoint protection to
	Method schema.HttpMethod `protobuf:"varint,4,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
}

func (m *GetSuggestedAPIEndpointProtectionRuleReq) Reset() {
	*m = GetSuggestedAPIEndpointProtectionRuleReq{}
}
func (*GetSuggestedAPIEndpointProtectionRuleReq) ProtoMessage() {}
func (*GetSuggestedAPIEndpointProtectionRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_389ee07209b8c3fa, []int{4}
}
func (m *GetSuggestedAPIEndpointProtectionRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSuggestedAPIEndpointProtectionRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSuggestedAPIEndpointProtectionRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSuggestedAPIEndpointProtectionRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestedAPIEndpointProtectionRuleReq.Merge(m, src)
}
func (m *GetSuggestedAPIEndpointProtectionRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSuggestedAPIEndpointProtectionRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestedAPIEndpointProtectionRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestedAPIEndpointProtectionRuleReq proto.InternalMessageInfo

func (m *GetSuggestedAPIEndpointProtectionRuleReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetSuggestedAPIEndpointProtectionRuleReq) GetVirtualHostName() string {
	if m != nil {
		return m.VirtualHostName
	}
	return ""
}

func (m *GetSuggestedAPIEndpointProtectionRuleReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GetSuggestedAPIEndpointProtectionRuleReq) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

// GetSuggestedAPIEndpointProtectionRuleRsp
//
// x-displayName: "Get Suggested API endpoint protection Rule Response"
// Get suggested API endpoint protection rule for a given path
type GetSuggestedAPIEndpointProtectionRuleRsp struct {
	// ApiEndpointRule
	//
	// x-displayName: "Api Endpoint Protection Rule"
	// Api endpoint protection rule specifies the endpoint to be API endpoint protected
	Rule *common_waf.APIEndpointProtectionRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// Loadbalancer Type
	//
	// x-displayName: "Loadbalancer Type"
	// The type of load balancer, can be "http" or "cdn"
	LoadbalancerType virtual_host.VirtualHostType `protobuf:"varint,3,opt,name=loadbalancer_type,json=loadbalancerType,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"loadbalancer_type,omitempty"`
	// FoundExistingRule
	//
	// x-displayName: "Found existing rule"
	// Specifies if an existing rule already exists with same conditions
	FoundExistingRule *schema.Empty `protobuf:"bytes,2,opt,name=found_existing_rule,json=foundExistingRule,proto3" json:"found_existing_rule,omitempty"`
}

func (m *GetSuggestedAPIEndpointProtectionRuleRsp) Reset() {
	*m = GetSuggestedAPIEndpointProtectionRuleRsp{}
}
func (*GetSuggestedAPIEndpointProtectionRuleRsp) ProtoMessage() {}
func (*GetSuggestedAPIEndpointProtectionRuleRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_389ee07209b8c3fa, []int{5}
}
func (m *GetSuggestedAPIEndpointProtectionRuleRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSuggestedAPIEndpointProtectionRuleRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSuggestedAPIEndpointProtectionRuleRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSuggestedAPIEndpointProtectionRuleRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestedAPIEndpointProtectionRuleRsp.Merge(m, src)
}
func (m *GetSuggestedAPIEndpointProtectionRuleRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetSuggestedAPIEndpointProtectionRuleRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestedAPIEndpointProtectionRuleRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestedAPIEndpointProtectionRuleRsp proto.InternalMessageInfo

func (m *GetSuggestedAPIEndpointProtectionRuleRsp) GetRule() *common_waf.APIEndpointProtectionRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *GetSuggestedAPIEndpointProtectionRuleRsp) GetLoadbalancerType() virtual_host.VirtualHostType {
	if m != nil {
		return m.LoadbalancerType
	}
	return virtual_host.VIRTUAL_SERVICE
}

func (m *GetSuggestedAPIEndpointProtectionRuleRsp) GetFoundExistingRule() *schema.Empty {
	if m != nil {
		return m.FoundExistingRule
	}
	return nil
}

// GetSuggestedRateLimitRuleRsp
//
// x-displayName: "Get Suggested Rate Limit Rule Response"
// Get suggested rate limit rule for a given path
type GetSuggestedRateLimitRuleRsp struct {
	// ApiEndpointRule
	//
	// x-displayName: "Api Endpoint Rule"
	// Api endpoint rule specifies the endpoint to be rate limited
	Rule *common_waf.ApiEndpointRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// Loadbalancer Type
	//
	// x-displayName: "Loadbalancer Type"
	// The type of load balancer, can be "http" or "cdn"
	LoadbalancerType virtual_host.VirtualHostType `protobuf:"varint,3,opt,name=loadbalancer_type,json=loadbalancerType,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"loadbalancer_type,omitempty"`
	// FoundExistingRule
	//
	// x-displayName: "Found existing rule"
	// Specifies if an existing rule to block this client already exists with same match conditions
	FoundExistingRule *schema.Empty `protobuf:"bytes,2,opt,name=found_existing_rule,json=foundExistingRule,proto3" json:"found_existing_rule,omitempty"`
}

func (m *GetSuggestedRateLimitRuleRsp) Reset()      { *m = GetSuggestedRateLimitRuleRsp{} }
func (*GetSuggestedRateLimitRuleRsp) ProtoMessage() {}
func (*GetSuggestedRateLimitRuleRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_389ee07209b8c3fa, []int{6}
}
func (m *GetSuggestedRateLimitRuleRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSuggestedRateLimitRuleRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSuggestedRateLimitRuleRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSuggestedRateLimitRuleRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestedRateLimitRuleRsp.Merge(m, src)
}
func (m *GetSuggestedRateLimitRuleRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetSuggestedRateLimitRuleRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestedRateLimitRuleRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestedRateLimitRuleRsp proto.InternalMessageInfo

func (m *GetSuggestedRateLimitRuleRsp) GetRule() *common_waf.ApiEndpointRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *GetSuggestedRateLimitRuleRsp) GetLoadbalancerType() virtual_host.VirtualHostType {
	if m != nil {
		return m.LoadbalancerType
	}
	return virtual_host.VIRTUAL_SERVICE
}

func (m *GetSuggestedRateLimitRuleRsp) GetFoundExistingRule() *schema.Empty {
	if m != nil {
		return m.FoundExistingRule
	}
	return nil
}

// GetSuggestedSensitiveDataRuleRsp
//
// x-displayName: "Get Suggested Sensitive Data Rule Response"
// Get suggested sensitive data rule for a given path
type GetSuggestedSensitiveDataRuleRsp struct {
	// ApiEndpointRule
	//
	// x-displayName: "Api Endpoint Rule"
	// Api endpoint rule specifies the endpoint to be handled with sensitive data
	Rule *http_loadbalancer.SensitiveDataTypes `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// Loadbalancer Type
	//
	// x-displayName: "Loadbalancer Type"
	// The type of load balancer, can be "http" or "cdn"
	LoadbalancerType virtual_host.VirtualHostType `protobuf:"varint,3,opt,name=loadbalancer_type,json=loadbalancerType,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"loadbalancer_type,omitempty"`
	// FoundExistingRule
	//
	// x-displayName: "Found existing rule"
	// Specifies if an existing rule to block this client already exists with same match conditions
	FoundExistingRule *schema.Empty `protobuf:"bytes,2,opt,name=found_existing_rule,json=foundExistingRule,proto3" json:"found_existing_rule,omitempty"`
}

func (m *GetSuggestedSensitiveDataRuleRsp) Reset()      { *m = GetSuggestedSensitiveDataRuleRsp{} }
func (*GetSuggestedSensitiveDataRuleRsp) ProtoMessage() {}
func (*GetSuggestedSensitiveDataRuleRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_389ee07209b8c3fa, []int{7}
}
func (m *GetSuggestedSensitiveDataRuleRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSuggestedSensitiveDataRuleRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSuggestedSensitiveDataRuleRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSuggestedSensitiveDataRuleRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSuggestedSensitiveDataRuleRsp.Merge(m, src)
}
func (m *GetSuggestedSensitiveDataRuleRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetSuggestedSensitiveDataRuleRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSuggestedSensitiveDataRuleRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSuggestedSensitiveDataRuleRsp proto.InternalMessageInfo

func (m *GetSuggestedSensitiveDataRuleRsp) GetRule() *http_loadbalancer.SensitiveDataTypes {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *GetSuggestedSensitiveDataRuleRsp) GetLoadbalancerType() virtual_host.VirtualHostType {
	if m != nil {
		return m.LoadbalancerType
	}
	return virtual_host.VIRTUAL_SERVICE
}

func (m *GetSuggestedSensitiveDataRuleRsp) GetFoundExistingRule() *schema.Empty {
	if m != nil {
		return m.FoundExistingRule
	}
	return nil
}

func init() {
	proto.RegisterType((*GetSuggestedSensitiveDataRuleReq)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedSensitiveDataRuleReq")
	golang_proto.RegisterType((*GetSuggestedSensitiveDataRuleReq)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedSensitiveDataRuleReq")
	proto.RegisterType((*GetSuggestedOasValidationRuleRsp)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedOasValidationRuleRsp")
	golang_proto.RegisterType((*GetSuggestedOasValidationRuleRsp)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedOasValidationRuleRsp")
	proto.RegisterType((*GetSuggestedOasValidationRuleReq)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedOasValidationRuleReq")
	golang_proto.RegisterType((*GetSuggestedOasValidationRuleReq)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedOasValidationRuleReq")
	proto.RegisterType((*GetSuggestedRateLimitRuleReq)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedRateLimitRuleReq")
	golang_proto.RegisterType((*GetSuggestedRateLimitRuleReq)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedRateLimitRuleReq")
	proto.RegisterType((*GetSuggestedAPIEndpointProtectionRuleReq)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedAPIEndpointProtectionRuleReq")
	golang_proto.RegisterType((*GetSuggestedAPIEndpointProtectionRuleReq)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedAPIEndpointProtectionRuleReq")
	proto.RegisterType((*GetSuggestedAPIEndpointProtectionRuleRsp)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedAPIEndpointProtectionRuleRsp")
	golang_proto.RegisterType((*GetSuggestedAPIEndpointProtectionRuleRsp)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedAPIEndpointProtectionRuleRsp")
	proto.RegisterType((*GetSuggestedRateLimitRuleRsp)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedRateLimitRuleRsp")
	golang_proto.RegisterType((*GetSuggestedRateLimitRuleRsp)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedRateLimitRuleRsp")
	proto.RegisterType((*GetSuggestedSensitiveDataRuleRsp)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedSensitiveDataRuleRsp")
	golang_proto.RegisterType((*GetSuggestedSensitiveDataRuleRsp)(nil), "ves.io.schema.api_sec.rule_suggestion.GetSuggestedSensitiveDataRuleRsp")
}

func init() {
	proto.RegisterFile("ves.io/schema/api_sec/rule_suggestion/public_rule_suggestions_api.proto", fileDescriptor_389ee07209b8c3fa)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/api_sec/rule_suggestion/public_rule_suggestions_api.proto", fileDescriptor_389ee07209b8c3fa)
}

var fileDescriptor_389ee07209b8c3fa = []byte{
	// 1110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x6b, 0x24, 0x45,
	0x14, 0x9f, 0xea, 0xc9, 0x2e, 0xbb, 0xb5, 0xa0, 0x49, 0xef, 0x2e, 0x4c, 0xc6, 0xa4, 0x09, 0x0d,
	0x2b, 0x21, 0xee, 0x74, 0x63, 0x24, 0x82, 0x01, 0x0f, 0xc9, 0x26, 0x26, 0x59, 0xdc, 0x4d, 0xe8,
	0x91, 0x45, 0xf4, 0xd0, 0xd4, 0x74, 0x57, 0x7a, 0xca, 0xed, 0xee, 0x2a, 0xbb, 0xaa, 0x27, 0x09,
	0x22, 0x2c, 0xf1, 0x26, 0x2a, 0x2b, 0x22, 0xe2, 0x37, 0xf0, 0xec, 0x49, 0xcc, 0x25, 0x7a, 0x71,
	0x4f, 0x12, 0x15, 0x61, 0x2f, 0x82, 0x99, 0xf1, 0xa0, 0xb7, 0x05, 0xfd, 0x00, 0xd2, 0x35, 0x7f,
	0x32, 0xdd, 0xf9, 0x37, 0x3b, 0x8e, 0x87, 0xb9, 0xd5, 0xd4, 0x7b, 0xef, 0x57, 0xef, 0xfd, 0xde,
	0xab, 0x57, 0xaf, 0x07, 0xae, 0xd4, 0x30, 0x37, 0x08, 0x35, 0xb9, 0x53, 0xc5, 0x01, 0x32, 0x11,
	0x23, 0x36, 0xc7, 0x8e, 0x19, 0xc5, 0x3e, 0xb6, 0x79, 0xec, 0x79, 0x98, 0x0b, 0x42, 0x43, 0x93,
	0xc5, 0x15, 0x9f, 0x38, 0x76, 0x66, 0x9b, 0xdb, 0x88, 0x11, 0x83, 0x45, 0x54, 0x50, 0xf5, 0x46,
	0x13, 0xc8, 0x68, 0x02, 0x19, 0x2d, 0x20, 0x23, 0x63, 0x51, 0x2c, 0x79, 0x44, 0x54, 0xe3, 0x8a,
	0xe1, 0xd0, 0xc0, 0xf4, 0xa8, 0x47, 0x4d, 0x69, 0x5d, 0x89, 0x37, 0xe5, 0x2f, 0xf9, 0x43, 0xae,
	0x9a, 0xa8, 0xc5, 0x09, 0x8f, 0x52, 0xcf, 0xc7, 0x89, 0x5f, 0x26, 0x0a, 0x43, 0x2a, 0x90, 0x3c,
	0xb7, 0x25, 0x7d, 0x2e, 0xed, 0x3c, 0x65, 0xdd, 0xc2, 0xf1, 0xb4, 0x50, 0xec, 0x30, 0xdc, 0x16,
	0x4d, 0xa4, 0x45, 0x35, 0xe4, 0x13, 0x17, 0x09, 0xdc, 0x92, 0xea, 0x19, 0x29, 0xe6, 0x38, 0xac,
	0x65, 0xc0, 0xa7, 0x32, 0x3a, 0x04, 0x6f, 0xd9, 0x69, 0x8d, 0xb9, 0xe3, 0x1a, 0xdc, 0x74, 0x68,
	0x10, 0xd0, 0xd0, 0xde, 0x42, 0x9b, 0x5d, 0x4b, 0xbb, 0xdb, 0xb5, 0x17, 0x4f, 0x32, 0xab, 0x0a,
	0xc1, 0x6c, 0x9f, 0x22, 0xb7, 0x82, 0x7c, 0x14, 0x3a, 0x38, 0x4a, 0x45, 0xf3, 0x7c, 0xd6, 0x24,
	0x12, 0x31, 0xf2, 0xed, 0x2a, 0xe5, 0xa2, 0x5b, 0x4f, 0xff, 0x15, 0xc0, 0xa9, 0x15, 0x2c, 0xca,
	0xcd, 0x64, 0x60, 0xb7, 0x8c, 0x43, 0x4e, 0x04, 0xa9, 0xe1, 0x25, 0x24, 0x90, 0x15, 0xfb, 0xd8,
	0xc2, 0xef, 0xaa, 0x13, 0xf0, 0x72, 0x88, 0x02, 0xcc, 0x19, 0x72, 0x70, 0x01, 0x4c, 0x81, 0xe9,
	0xcb, 0xd6, 0xd1, 0x86, 0x3a, 0x03, 0xc7, 0xba, 0xe1, 0xed, 0x44, 0x52, 0x50, 0xa4, 0xd6, 0xb3,
	0x2d, 0xc1, 0x2a, 0xe5, 0xe2, 0x2e, 0x0a, 0xb0, 0x3a, 0x0d, 0x47, 0x18, 0x12, 0xd5, 0x42, 0x3e,
	0x11, 0x2f, 0x5e, 0xfb, 0xf6, 0xaf, 0xfd, 0xfc, 0x85, 0x28, 0x5f, 0x78, 0x70, 0xa9, 0xb5, 0x7a,
	0x98, 0x07, 0x96, 0xd4, 0x50, 0x5f, 0x85, 0x17, 0x03, 0x2c, 0xaa, 0xd4, 0x2d, 0x8c, 0x4c, 0x81,
	0xe9, 0x67, 0x66, 0xc7, 0x8d, 0x74, 0x2d, 0xad, 0x0a, 0xc1, 0xee, 0x48, 0x85, 0x45, 0x28, 0x8d,
	0x77, 0x81, 0x32, 0x0a, 0xac, 0x96, 0x91, 0xde, 0xc8, 0xa7, 0xe3, 0x5a, 0x47, 0xfc, 0x5e, 0x33,
	0xa3, 0x84, 0x86, 0x32, 0x2e, 0xce, 0xd4, 0xfb, 0xf0, 0xba, 0x13, 0x73, 0x41, 0x03, 0x9b, 0x22,
	0x6e, 0xd7, 0x3a, 0x72, 0xe9, 0xfd, 0x95, 0xd9, 0xb9, 0xcc, 0x91, 0x92, 0x77, 0xe3, 0x28, 0x47,
	0xc6, 0x3a, 0xc3, 0xe1, 0x02, 0x23, 0x69, 0xe0, 0xd5, 0x9c, 0x75, 0xb5, 0x89, 0x9a, 0x3a, 0x53,
	0xfd, 0x08, 0xc0, 0x09, 0xe4, 0xfb, 0x36, 0x0e, 0x5d, 0x46, 0x49, 0x28, 0x78, 0xf6, 0xd0, 0xbc,
	0x3c, 0x74, 0xed, 0xa9, 0x0f, 0x5d, 0xf0, 0xfd, 0x32, 0xc3, 0xce, 0x72, 0x1b, 0xb7, 0x8c, 0x85,
	0x20, 0xa1, 0xc7, 0x57, 0x73, 0xd6, 0x38, 0xf2, 0xfd, 0xce, 0x7e, 0xda, 0x9d, 0x37, 0xe1, 0x58,
	0x77, 0xf1, 0xc8, 0x7a, 0x2b, 0x5c, 0x90, 0x54, 0xbf, 0x70, 0xcc, 0x85, 0xa3, 0xec, 0x1a, 0xf7,
	0x8e, 0x32, 0xfa, 0xc6, 0x0e, 0xc3, 0xd6, 0x68, 0x37, 0x4a, 0xb2, 0xa3, 0x2e, 0xc1, 0xab, 0x9b,
	0x34, 0x0e, 0x5d, 0x1b, 0x6f, 0x13, 0x9e, 0x78, 0x22, 0x3b, 0x84, 0x4c, 0xe3, 0x95, 0xd9, 0x6b,
	0x19, 0xec, 0xe5, 0x80, 0x89, 0x1d, 0x6b, 0x4c, 0x1a, 0x2c, 0xb7, 0xf4, 0x13, 0x16, 0x17, 0x27,
	0xe1, 0xf5, 0xa4, 0x5d, 0x1c, 0xf1, 0x63, 0x3b, 0x55, 0x4a, 0x1c, 0xac, 0x8e, 0x1c, 0xec, 0x01,
	0x70, 0x7b, 0xe4, 0x12, 0x18, 0x55, 0xf4, 0x7f, 0xc0, 0x79, 0x59, 0x1e, 0xca, 0xea, 0x55, 0x27,
	0x21, 0x4c, 0x82, 0xf7, 0x22, 0x1a, 0x33, 0x5e, 0xb8, 0x30, 0x95, 0x4f, 0x7c, 0x46, 0x8c, 0xac,
	0xc8, 0x0d, 0xfd, 0x27, 0x00, 0x27, 0xba, 0xc3, 0xb6, 0x90, 0xc0, 0xaf, 0x93, 0x80, 0x88, 0x21,
	0xbe, 0xb0, 0xbf, 0x01, 0x38, 0xdd, 0x1d, 0xd3, 0xc2, 0xc6, 0x5a, 0xbb, 0x72, 0x37, 0x22, 0x2a,
	0xb0, 0x33, 0xdc, 0x29, 0xd5, 0xbf, 0x54, 0x7a, 0x8d, 0x8f, 0x33, 0xf5, 0x0e, 0x1c, 0x91, 0x77,
	0x06, 0xc8, 0x3b, 0xf3, 0xca, 0x79, 0x2d, 0xe1, 0x74, 0x2c, 0x09, 0x73, 0xf2, 0x5d, 0xcf, 0xff,
	0x8f, 0x77, 0x5d, 0x79, 0xaa, 0xbb, 0xae, 0x7f, 0xa0, 0x9c, 0x55, 0xcf, 0x9c, 0xa9, 0xb7, 0x52,
	0x7c, 0x98, 0xe7, 0xf2, 0xc1, 0x48, 0x9b, 0x8f, 0x21, 0x62, 0xe1, 0x53, 0xe5, 0xbc, 0xa7, 0xb8,
	0xc7, 0xca, 0x38, 0x36, 0x19, 0x18, 0x29, 0xa8, 0xc4, 0x65, 0x3e, 0x1c, 0x9c, 0xcc, 0xfe, 0x0d,
	0xe1, 0x58, 0xb2, 0x28, 0x77, 0x86, 0xc5, 0x85, 0x8d, 0x35, 0xf5, 0x7b, 0x05, 0x4e, 0x9e, 0xd9,
	0xf6, 0xd5, 0x15, 0xa3, 0xa7, 0xc9, 0xd3, 0x38, 0xef, 0xf1, 0x28, 0x0e, 0x06, 0x88, 0x33, 0xfd,
	0x13, 0xf0, 0xe8, 0x1b, 0x05, 0xd4, 0x7f, 0x28, 0xbc, 0xbc, 0x39, 0xb7, 0xed, 0x94, 0xb6, 0x10,
	0x62, 0x25, 0xe4, 0xd6, 0x12, 0xc2, 0xdc, 0x52, 0x40, 0x43, 0x22, 0x68, 0x74, 0x33, 0x99, 0x20,
	0x4b, 0x84, 0x96, 0x58, 0x44, 0xb7, 0x77, 0x4a, 0x1c, 0x3b, 0x71, 0x44, 0xc4, 0x4e, 0x29, 0xc2,
	0xc8, 0xdd, 0xfd, 0xe5, 0x8f, 0xcf, 0x94, 0xdb, 0xfa, 0x72, 0x6b, 0xea, 0x36, 0x3b, 0xed, 0x8e,
	0x9b, 0xef, 0x75, 0xd6, 0xef, 0x9f, 0x3a, 0xab, 0xa7, 0x67, 0x8d, 0x79, 0x30, 0xa3, 0x7e, 0x97,
	0x21, 0xf1, 0x58, 0xb9, 0xf5, 0x45, 0xe2, 0x49, 0xf3, 0x63, 0x71, 0x30, 0x40, 0x9c, 0xe9, 0x1f,
	0x0f, 0x82, 0xc4, 0x35, 0x7d, 0xa9, 0x4f, 0x12, 0x5d, 0x24, 0x90, 0x8d, 0xb7, 0x19, 0xe5, 0x71,
	0x84, 0x13, 0x0e, 0xbf, 0x56, 0xe0, 0xf8, 0xa9, 0x8d, 0x4b, 0xbd, 0xd5, 0x47, 0xd8, 0xd9, 0xa7,
	0xbc, 0xf8, 0xdf, 0x41, 0x38, 0xd3, 0x3f, 0x1c, 0x04, 0x6f, 0xaf, 0xe9, 0x0b, 0x7d, 0xf2, 0x16,
	0x21, 0x81, 0x6d, 0x3f, 0x71, 0x28, 0x21, 0xad, 0xa1, 0xc0, 0x1b, 0x3d, 0xbd, 0x84, 0xea, 0x7a,
	0x1f, 0xb1, 0x9f, 0x35, 0x37, 0x14, 0x07, 0x0b, 0xc8, 0x99, 0xfe, 0xc5, 0x20, 0x88, 0x2d, 0xeb,
	0x77, 0xfb, 0x24, 0x36, 0xd9, 0x6f, 0x7f, 0x4f, 0xd8, 0xac, 0xe3, 0xdd, 0x3c, 0x98, 0x29, 0xce,
	0xef, 0xef, 0x81, 0xfc, 0xcf, 0x7b, 0xe0, 0x66, 0x6f, 0x11, 0xaf, 0x57, 0xde, 0xc1, 0x8e, 0xd8,
	0xfd, 0xb1, 0xa0, 0x8c, 0x82, 0xc5, 0xcf, 0xc1, 0xc1, 0xa1, 0x96, 0x7b, 0x7c, 0xa8, 0xe5, 0x9e,
	0x1c, 0x6a, 0xe0, 0x41, 0x5d, 0x03, 0x5f, 0xd5, 0x35, 0xf0, 0xa8, 0xae, 0x81, 0x83, 0xba, 0x06,
	0x7e, 0xaf, 0x6b, 0xe0, 0xcf, 0xba, 0x96, 0x7b, 0x52, 0xd7, 0xc0, 0xc3, 0x86, 0x96, 0xdb, 0x6f,
	0x68, 0xe0, 0xa0, 0xa1, 0xe5, 0x1e, 0x37, 0xb4, 0xdc, 0x5b, 0x6f, 0x7b, 0x94, 0xdd, 0xf7, 0x8c,
	0x1a, 0xf5, 0x05, 0x8e, 0x22, 0x64, 0xc4, 0xdc, 0x94, 0x8b, 0x4d, 0x1a, 0x05, 0x09, 0x01, 0x35,
	0xe2, 0xe2, 0xa8, 0xd4, 0x16, 0x9b, 0xac, 0xe2, 0x51, 0x13, 0x6f, 0x8b, 0xd6, 0x67, 0xea, 0xd9,
	0x7f, 0x38, 0x54, 0x2e, 0xca, 0x6f, 0xd6, 0x97, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x91, 0xef,
	0xd6, 0xf9, 0xa0, 0x10, 0x00, 0x00,
}

func (this *GetSuggestedSensitiveDataRuleReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedSensitiveDataRuleReq)
	if !ok {
		that2, ok := that.(GetSuggestedSensitiveDataRuleReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.VirtualHostName != that1.VirtualHostName {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	return true
}
func (this *GetSuggestedOasValidationRuleRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedOasValidationRuleRsp)
	if !ok {
		that2, ok := that.(GetSuggestedOasValidationRuleRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ApiValidationChoice == nil {
		if this.ApiValidationChoice != nil {
			return false
		}
	} else if this.ApiValidationChoice == nil {
		return false
	} else if !this.ApiValidationChoice.Equal(that1.ApiValidationChoice) {
		return false
	}
	if this.LoadbalancerType != that1.LoadbalancerType {
		return false
	}
	if !this.FoundExistingRule.Equal(that1.FoundExistingRule) {
		return false
	}
	return true
}
func (this *GetSuggestedOasValidationRuleRsp_CustomOasValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedOasValidationRuleRsp_CustomOasValidation)
	if !ok {
		that2, ok := that.(GetSuggestedOasValidationRuleRsp_CustomOasValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomOasValidation.Equal(that1.CustomOasValidation) {
		return false
	}
	return true
}
func (this *GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation)
	if !ok {
		that2, ok := that.(GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllEndpointsOasValidation.Equal(that1.AllEndpointsOasValidation) {
		return false
	}
	return true
}
func (this *GetSuggestedOasValidationRuleReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedOasValidationRuleReq)
	if !ok {
		that2, ok := that.(GetSuggestedOasValidationRuleReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.VirtualHostName != that1.VirtualHostName {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if this.ApiGroups[i] != that1.ApiGroups[i] {
			return false
		}
	}
	return true
}
func (this *GetSuggestedRateLimitRuleReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedRateLimitRuleReq)
	if !ok {
		that2, ok := that.(GetSuggestedRateLimitRuleReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.VirtualHostName != that1.VirtualHostName {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	return true
}
func (this *GetSuggestedAPIEndpointProtectionRuleReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedAPIEndpointProtectionRuleReq)
	if !ok {
		that2, ok := that.(GetSuggestedAPIEndpointProtectionRuleReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.VirtualHostName != that1.VirtualHostName {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	return true
}
func (this *GetSuggestedAPIEndpointProtectionRuleRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedAPIEndpointProtectionRuleRsp)
	if !ok {
		that2, ok := that.(GetSuggestedAPIEndpointProtectionRuleRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rule.Equal(that1.Rule) {
		return false
	}
	if this.LoadbalancerType != that1.LoadbalancerType {
		return false
	}
	if !this.FoundExistingRule.Equal(that1.FoundExistingRule) {
		return false
	}
	return true
}
func (this *GetSuggestedRateLimitRuleRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedRateLimitRuleRsp)
	if !ok {
		that2, ok := that.(GetSuggestedRateLimitRuleRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rule.Equal(that1.Rule) {
		return false
	}
	if this.LoadbalancerType != that1.LoadbalancerType {
		return false
	}
	if !this.FoundExistingRule.Equal(that1.FoundExistingRule) {
		return false
	}
	return true
}
func (this *GetSuggestedSensitiveDataRuleRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSuggestedSensitiveDataRuleRsp)
	if !ok {
		that2, ok := that.(GetSuggestedSensitiveDataRuleRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rule.Equal(that1.Rule) {
		return false
	}
	if this.LoadbalancerType != that1.LoadbalancerType {
		return false
	}
	if !this.FoundExistingRule.Equal(that1.FoundExistingRule) {
		return false
	}
	return true
}
func (this *GetSuggestedSensitiveDataRuleReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rule_suggestion.GetSuggestedSensitiveDataRuleReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "VirtualHostName: "+fmt.Sprintf("%#v", this.VirtualHostName)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSuggestedOasValidationRuleRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rule_suggestion.GetSuggestedOasValidationRuleRsp{")
	if this.ApiValidationChoice != nil {
		s = append(s, "ApiValidationChoice: "+fmt.Sprintf("%#v", this.ApiValidationChoice)+",\n")
	}
	s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	if this.FoundExistingRule != nil {
		s = append(s, "FoundExistingRule: "+fmt.Sprintf("%#v", this.FoundExistingRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSuggestedOasValidationRuleRsp_CustomOasValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rule_suggestion.GetSuggestedOasValidationRuleRsp_CustomOasValidation{` +
		`CustomOasValidation:` + fmt.Sprintf("%#v", this.CustomOasValidation) + `}`}, ", ")
	return s
}
func (this *GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rule_suggestion.GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation{` +
		`AllEndpointsOasValidation:` + fmt.Sprintf("%#v", this.AllEndpointsOasValidation) + `}`}, ", ")
	return s
}
func (this *GetSuggestedOasValidationRuleReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rule_suggestion.GetSuggestedOasValidationRuleReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "VirtualHostName: "+fmt.Sprintf("%#v", this.VirtualHostName)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSuggestedRateLimitRuleReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rule_suggestion.GetSuggestedRateLimitRuleReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "VirtualHostName: "+fmt.Sprintf("%#v", this.VirtualHostName)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSuggestedAPIEndpointProtectionRuleReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rule_suggestion.GetSuggestedAPIEndpointProtectionRuleReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "VirtualHostName: "+fmt.Sprintf("%#v", this.VirtualHostName)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSuggestedAPIEndpointProtectionRuleRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rule_suggestion.GetSuggestedAPIEndpointProtectionRuleRsp{")
	if this.Rule != nil {
		s = append(s, "Rule: "+fmt.Sprintf("%#v", this.Rule)+",\n")
	}
	s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	if this.FoundExistingRule != nil {
		s = append(s, "FoundExistingRule: "+fmt.Sprintf("%#v", this.FoundExistingRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSuggestedRateLimitRuleRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rule_suggestion.GetSuggestedRateLimitRuleRsp{")
	if this.Rule != nil {
		s = append(s, "Rule: "+fmt.Sprintf("%#v", this.Rule)+",\n")
	}
	s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	if this.FoundExistingRule != nil {
		s = append(s, "FoundExistingRule: "+fmt.Sprintf("%#v", this.FoundExistingRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSuggestedSensitiveDataRuleRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rule_suggestion.GetSuggestedSensitiveDataRuleRsp{")
	if this.Rule != nil {
		s = append(s, "Rule: "+fmt.Sprintf("%#v", this.Rule)+",\n")
	}
	s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	if this.FoundExistingRule != nil {
		s = append(s, "FoundExistingRule: "+fmt.Sprintf("%#v", this.FoundExistingRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicRuleSuggestionsApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RuleSuggestionAPIClient is the client API for RuleSuggestionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuleSuggestionAPIClient interface {
	// Suggest Open API specification validation rule
	//
	// x-displayName: "Suggest Open API specification validation rule"
	// Suggest Open API specification validation rule for a given path
	GetSuggestedOasValidationRule(ctx context.Context, in *GetSuggestedOasValidationRuleReq, opts ...grpc.CallOption) (*GetSuggestedOasValidationRuleRsp, error)
	// Suggest sensitive data rule
	//
	// x-displayName: "Suggest sensitive data rule"
	// Suggest sensitive data rule for a given path
	GetSuggestedSensitiveDataRule(ctx context.Context, in *GetSuggestedSensitiveDataRuleReq, opts ...grpc.CallOption) (*GetSuggestedSensitiveDataRuleRsp, error)
	// Suggest rate limit rule
	//
	// x-displayName: "Suggest rate limit rule"
	// Suggest rate limit rule for a given path
	GetSuggestedRateLimitRule(ctx context.Context, in *GetSuggestedRateLimitRuleReq, opts ...grpc.CallOption) (*GetSuggestedRateLimitRuleRsp, error)
	// Suggest API endpoint protection rule
	//
	// x-displayName: "Suggest api endpoint protection rule"
	// Suggest API endpoint protection rule for a given path
	GetSuggestedAPIEndpointProtectionRule(ctx context.Context, in *GetSuggestedAPIEndpointProtectionRuleReq, opts ...grpc.CallOption) (*GetSuggestedAPIEndpointProtectionRuleRsp, error)
}

type ruleSuggestionAPIClient struct {
	cc *grpc.ClientConn
}

func NewRuleSuggestionAPIClient(cc *grpc.ClientConn) RuleSuggestionAPIClient {
	return &ruleSuggestionAPIClient{cc}
}

func (c *ruleSuggestionAPIClient) GetSuggestedOasValidationRule(ctx context.Context, in *GetSuggestedOasValidationRuleReq, opts ...grpc.CallOption) (*GetSuggestedOasValidationRuleRsp, error) {
	out := new(GetSuggestedOasValidationRuleRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI/GetSuggestedOasValidationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSuggestionAPIClient) GetSuggestedSensitiveDataRule(ctx context.Context, in *GetSuggestedSensitiveDataRuleReq, opts ...grpc.CallOption) (*GetSuggestedSensitiveDataRuleRsp, error) {
	out := new(GetSuggestedSensitiveDataRuleRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI/GetSuggestedSensitiveDataRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSuggestionAPIClient) GetSuggestedRateLimitRule(ctx context.Context, in *GetSuggestedRateLimitRuleReq, opts ...grpc.CallOption) (*GetSuggestedRateLimitRuleRsp, error) {
	out := new(GetSuggestedRateLimitRuleRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI/GetSuggestedRateLimitRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSuggestionAPIClient) GetSuggestedAPIEndpointProtectionRule(ctx context.Context, in *GetSuggestedAPIEndpointProtectionRuleReq, opts ...grpc.CallOption) (*GetSuggestedAPIEndpointProtectionRuleRsp, error) {
	out := new(GetSuggestedAPIEndpointProtectionRuleRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI/GetSuggestedAPIEndpointProtectionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleSuggestionAPIServer is the server API for RuleSuggestionAPI service.
type RuleSuggestionAPIServer interface {
	// Suggest Open API specification validation rule
	//
	// x-displayName: "Suggest Open API specification validation rule"
	// Suggest Open API specification validation rule for a given path
	GetSuggestedOasValidationRule(context.Context, *GetSuggestedOasValidationRuleReq) (*GetSuggestedOasValidationRuleRsp, error)
	// Suggest sensitive data rule
	//
	// x-displayName: "Suggest sensitive data rule"
	// Suggest sensitive data rule for a given path
	GetSuggestedSensitiveDataRule(context.Context, *GetSuggestedSensitiveDataRuleReq) (*GetSuggestedSensitiveDataRuleRsp, error)
	// Suggest rate limit rule
	//
	// x-displayName: "Suggest rate limit rule"
	// Suggest rate limit rule for a given path
	GetSuggestedRateLimitRule(context.Context, *GetSuggestedRateLimitRuleReq) (*GetSuggestedRateLimitRuleRsp, error)
	// Suggest API endpoint protection rule
	//
	// x-displayName: "Suggest api endpoint protection rule"
	// Suggest API endpoint protection rule for a given path
	GetSuggestedAPIEndpointProtectionRule(context.Context, *GetSuggestedAPIEndpointProtectionRuleReq) (*GetSuggestedAPIEndpointProtectionRuleRsp, error)
}

// UnimplementedRuleSuggestionAPIServer can be embedded to have forward compatible implementations.
type UnimplementedRuleSuggestionAPIServer struct {
}

func (*UnimplementedRuleSuggestionAPIServer) GetSuggestedOasValidationRule(ctx context.Context, req *GetSuggestedOasValidationRuleReq) (*GetSuggestedOasValidationRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedOasValidationRule not implemented")
}
func (*UnimplementedRuleSuggestionAPIServer) GetSuggestedSensitiveDataRule(ctx context.Context, req *GetSuggestedSensitiveDataRuleReq) (*GetSuggestedSensitiveDataRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedSensitiveDataRule not implemented")
}
func (*UnimplementedRuleSuggestionAPIServer) GetSuggestedRateLimitRule(ctx context.Context, req *GetSuggestedRateLimitRuleReq) (*GetSuggestedRateLimitRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedRateLimitRule not implemented")
}
func (*UnimplementedRuleSuggestionAPIServer) GetSuggestedAPIEndpointProtectionRule(ctx context.Context, req *GetSuggestedAPIEndpointProtectionRuleReq) (*GetSuggestedAPIEndpointProtectionRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedAPIEndpointProtectionRule not implemented")
}

func RegisterRuleSuggestionAPIServer(s *grpc.Server, srv RuleSuggestionAPIServer) {
	s.RegisterService(&_RuleSuggestionAPI_serviceDesc, srv)
}

func _RuleSuggestionAPI_GetSuggestedOasValidationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestedOasValidationRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSuggestionAPIServer).GetSuggestedOasValidationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI/GetSuggestedOasValidationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSuggestionAPIServer).GetSuggestedOasValidationRule(ctx, req.(*GetSuggestedOasValidationRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSuggestionAPI_GetSuggestedSensitiveDataRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestedSensitiveDataRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSuggestionAPIServer).GetSuggestedSensitiveDataRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI/GetSuggestedSensitiveDataRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSuggestionAPIServer).GetSuggestedSensitiveDataRule(ctx, req.(*GetSuggestedSensitiveDataRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSuggestionAPI_GetSuggestedRateLimitRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestedRateLimitRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSuggestionAPIServer).GetSuggestedRateLimitRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI/GetSuggestedRateLimitRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSuggestionAPIServer).GetSuggestedRateLimitRule(ctx, req.(*GetSuggestedRateLimitRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSuggestionAPI_GetSuggestedAPIEndpointProtectionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestedAPIEndpointProtectionRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSuggestionAPIServer).GetSuggestedAPIEndpointProtectionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI/GetSuggestedAPIEndpointProtectionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSuggestionAPIServer).GetSuggestedAPIEndpointProtectionRule(ctx, req.(*GetSuggestedAPIEndpointProtectionRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleSuggestionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.api_sec.rule_suggestion.RuleSuggestionAPI",
	HandlerType: (*RuleSuggestionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuggestedOasValidationRule",
			Handler:    _RuleSuggestionAPI_GetSuggestedOasValidationRule_Handler,
		},
		{
			MethodName: "GetSuggestedSensitiveDataRule",
			Handler:    _RuleSuggestionAPI_GetSuggestedSensitiveDataRule_Handler,
		},
		{
			MethodName: "GetSuggestedRateLimitRule",
			Handler:    _RuleSuggestionAPI_GetSuggestedRateLimitRule_Handler,
		},
		{
			MethodName: "GetSuggestedAPIEndpointProtectionRule",
			Handler:    _RuleSuggestionAPI_GetSuggestedAPIEndpointProtectionRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/api_sec/rule_suggestion/public_rule_suggestions_api.proto",
}

func (m *GetSuggestedSensitiveDataRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSuggestedSensitiveDataRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedSensitiveDataRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Method != 0 {
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VirtualHostName) > 0 {
		i -= len(m.VirtualHostName)
		copy(dAtA[i:], m.VirtualHostName)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.VirtualHostName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSuggestedOasValidationRuleRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSuggestedOasValidationRuleRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedOasValidationRuleRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerType != 0 {
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(m.LoadbalancerType))
		i--
		dAtA[i] = 0x28
	}
	if m.FoundExistingRule != nil {
		{
			size, err := m.FoundExistingRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ApiValidationChoice != nil {
		{
			size := m.ApiValidationChoice.Size()
			i -= size
			if _, err := m.ApiValidationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSuggestedOasValidationRuleRsp_CustomOasValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedOasValidationRuleRsp_CustomOasValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomOasValidation != nil {
		{
			size, err := m.CustomOasValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllEndpointsOasValidation != nil {
		{
			size, err := m.AllEndpointsOasValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSuggestedOasValidationRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSuggestedOasValidationRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedOasValidationRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroups[iNdEx])
			copy(dAtA[i:], m.ApiGroups[iNdEx])
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.ApiGroups[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Method != 0 {
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VirtualHostName) > 0 {
		i -= len(m.VirtualHostName)
		copy(dAtA[i:], m.VirtualHostName)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.VirtualHostName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSuggestedRateLimitRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSuggestedRateLimitRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedRateLimitRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Method != 0 {
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VirtualHostName) > 0 {
		i -= len(m.VirtualHostName)
		copy(dAtA[i:], m.VirtualHostName)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.VirtualHostName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSuggestedAPIEndpointProtectionRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSuggestedAPIEndpointProtectionRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedAPIEndpointProtectionRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Method != 0 {
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VirtualHostName) > 0 {
		i -= len(m.VirtualHostName)
		copy(dAtA[i:], m.VirtualHostName)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.VirtualHostName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSuggestedAPIEndpointProtectionRuleRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSuggestedAPIEndpointProtectionRuleRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedAPIEndpointProtectionRuleRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerType != 0 {
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(m.LoadbalancerType))
		i--
		dAtA[i] = 0x18
	}
	if m.FoundExistingRule != nil {
		{
			size, err := m.FoundExistingRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Rule != nil {
		{
			size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSuggestedRateLimitRuleRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSuggestedRateLimitRuleRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedRateLimitRuleRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerType != 0 {
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(m.LoadbalancerType))
		i--
		dAtA[i] = 0x18
	}
	if m.FoundExistingRule != nil {
		{
			size, err := m.FoundExistingRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Rule != nil {
		{
			size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSuggestedSensitiveDataRuleRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSuggestedSensitiveDataRuleRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSuggestedSensitiveDataRuleRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerType != 0 {
		i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(m.LoadbalancerType))
		i--
		dAtA[i] = 0x18
	}
	if m.FoundExistingRule != nil {
		{
			size, err := m.FoundExistingRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Rule != nil {
		{
			size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicRuleSuggestionsApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicRuleSuggestionsApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicRuleSuggestionsApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSuggestedSensitiveDataRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	l = len(m.VirtualHostName)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovPublicRuleSuggestionsApi(uint64(m.Method))
	}
	return n
}

func (m *GetSuggestedOasValidationRuleRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiValidationChoice != nil {
		n += m.ApiValidationChoice.Size()
	}
	if m.FoundExistingRule != nil {
		l = m.FoundExistingRule.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.LoadbalancerType != 0 {
		n += 1 + sovPublicRuleSuggestionsApi(uint64(m.LoadbalancerType))
	}
	return n
}

func (m *GetSuggestedOasValidationRuleRsp_CustomOasValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomOasValidation != nil {
		l = m.CustomOasValidation.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	return n
}
func (m *GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllEndpointsOasValidation != nil {
		l = m.AllEndpointsOasValidation.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	return n
}
func (m *GetSuggestedOasValidationRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	l = len(m.VirtualHostName)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovPublicRuleSuggestionsApi(uint64(m.Method))
	}
	if len(m.ApiGroups) > 0 {
		for _, s := range m.ApiGroups {
			l = len(s)
			n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
		}
	}
	return n
}

func (m *GetSuggestedRateLimitRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	l = len(m.VirtualHostName)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovPublicRuleSuggestionsApi(uint64(m.Method))
	}
	return n
}

func (m *GetSuggestedAPIEndpointProtectionRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	l = len(m.VirtualHostName)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovPublicRuleSuggestionsApi(uint64(m.Method))
	}
	return n
}

func (m *GetSuggestedAPIEndpointProtectionRuleRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.FoundExistingRule != nil {
		l = m.FoundExistingRule.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.LoadbalancerType != 0 {
		n += 1 + sovPublicRuleSuggestionsApi(uint64(m.LoadbalancerType))
	}
	return n
}

func (m *GetSuggestedRateLimitRuleRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.FoundExistingRule != nil {
		l = m.FoundExistingRule.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.LoadbalancerType != 0 {
		n += 1 + sovPublicRuleSuggestionsApi(uint64(m.LoadbalancerType))
	}
	return n
}

func (m *GetSuggestedSensitiveDataRuleRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.FoundExistingRule != nil {
		l = m.FoundExistingRule.Size()
		n += 1 + l + sovPublicRuleSuggestionsApi(uint64(l))
	}
	if m.LoadbalancerType != 0 {
		n += 1 + sovPublicRuleSuggestionsApi(uint64(m.LoadbalancerType))
	}
	return n
}

func sovPublicRuleSuggestionsApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicRuleSuggestionsApi(x uint64) (n int) {
	return sovPublicRuleSuggestionsApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetSuggestedSensitiveDataRuleReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedSensitiveDataRuleReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`VirtualHostName:` + fmt.Sprintf("%v", this.VirtualHostName) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedOasValidationRuleRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedOasValidationRuleRsp{`,
		`ApiValidationChoice:` + fmt.Sprintf("%v", this.ApiValidationChoice) + `,`,
		`FoundExistingRule:` + strings.Replace(fmt.Sprintf("%v", this.FoundExistingRule), "Empty", "schema.Empty", 1) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedOasValidationRuleRsp_CustomOasValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedOasValidationRuleRsp_CustomOasValidation{`,
		`CustomOasValidation:` + strings.Replace(fmt.Sprintf("%v", this.CustomOasValidation), "OpenApiValidationRule", "common_waf.OpenApiValidationRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation{`,
		`AllEndpointsOasValidation:` + strings.Replace(fmt.Sprintf("%v", this.AllEndpointsOasValidation), "OpenApiValidationAllSpecEndpointsSettings", "common_waf.OpenApiValidationAllSpecEndpointsSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedOasValidationRuleReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedOasValidationRuleReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`VirtualHostName:` + fmt.Sprintf("%v", this.VirtualHostName) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`ApiGroups:` + fmt.Sprintf("%v", this.ApiGroups) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedRateLimitRuleReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedRateLimitRuleReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`VirtualHostName:` + fmt.Sprintf("%v", this.VirtualHostName) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedAPIEndpointProtectionRuleReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedAPIEndpointProtectionRuleReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`VirtualHostName:` + fmt.Sprintf("%v", this.VirtualHostName) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedAPIEndpointProtectionRuleRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedAPIEndpointProtectionRuleRsp{`,
		`Rule:` + strings.Replace(fmt.Sprintf("%v", this.Rule), "APIEndpointProtectionRule", "common_waf.APIEndpointProtectionRule", 1) + `,`,
		`FoundExistingRule:` + strings.Replace(fmt.Sprintf("%v", this.FoundExistingRule), "Empty", "schema.Empty", 1) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedRateLimitRuleRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedRateLimitRuleRsp{`,
		`Rule:` + strings.Replace(fmt.Sprintf("%v", this.Rule), "ApiEndpointRule", "common_waf.ApiEndpointRule", 1) + `,`,
		`FoundExistingRule:` + strings.Replace(fmt.Sprintf("%v", this.FoundExistingRule), "Empty", "schema.Empty", 1) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSuggestedSensitiveDataRuleRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSuggestedSensitiveDataRuleRsp{`,
		`Rule:` + strings.Replace(fmt.Sprintf("%v", this.Rule), "SensitiveDataTypes", "http_loadbalancer.SensitiveDataTypes", 1) + `,`,
		`FoundExistingRule:` + strings.Replace(fmt.Sprintf("%v", this.FoundExistingRule), "Empty", "schema.Empty", 1) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicRuleSuggestionsApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetSuggestedSensitiveDataRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSuggestedSensitiveDataRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSuggestedSensitiveDataRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicRuleSuggestionsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSuggestedOasValidationRuleRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSuggestedOasValidationRuleRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSuggestedOasValidationRuleRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomOasValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.OpenApiValidationRule{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiValidationChoice = &GetSuggestedOasValidationRuleRsp_CustomOasValidation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllEndpointsOasValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.OpenApiValidationAllSpecEndpointsSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiValidationChoice = &GetSuggestedOasValidationRuleRsp_AllEndpointsOasValidation{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundExistingRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FoundExistingRule == nil {
				m.FoundExistingRule = &schema.Empty{}
			}
			if err := m.FoundExistingRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerType", wireType)
			}
			m.LoadbalancerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerType |= virtual_host.VirtualHostType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicRuleSuggestionsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSuggestedOasValidationRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSuggestedOasValidationRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSuggestedOasValidationRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicRuleSuggestionsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSuggestedRateLimitRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSuggestedRateLimitRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSuggestedRateLimitRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicRuleSuggestionsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSuggestedAPIEndpointProtectionRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSuggestedAPIEndpointProtectionRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSuggestedAPIEndpointProtectionRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicRuleSuggestionsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSuggestedAPIEndpointProtectionRuleRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSuggestedAPIEndpointProtectionRuleRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSuggestedAPIEndpointProtectionRuleRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &common_waf.APIEndpointProtectionRule{}
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundExistingRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FoundExistingRule == nil {
				m.FoundExistingRule = &schema.Empty{}
			}
			if err := m.FoundExistingRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerType", wireType)
			}
			m.LoadbalancerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerType |= virtual_host.VirtualHostType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicRuleSuggestionsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSuggestedRateLimitRuleRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSuggestedRateLimitRuleRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSuggestedRateLimitRuleRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &common_waf.ApiEndpointRule{}
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundExistingRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FoundExistingRule == nil {
				m.FoundExistingRule = &schema.Empty{}
			}
			if err := m.FoundExistingRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerType", wireType)
			}
			m.LoadbalancerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerType |= virtual_host.VirtualHostType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicRuleSuggestionsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSuggestedSensitiveDataRuleRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSuggestedSensitiveDataRuleRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSuggestedSensitiveDataRuleRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &http_loadbalancer.SensitiveDataTypes{}
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundExistingRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FoundExistingRule == nil {
				m.FoundExistingRule = &schema.Empty{}
			}
			if err := m.FoundExistingRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerType", wireType)
			}
			m.LoadbalancerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerType |= virtual_host.VirtualHostType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicRuleSuggestionsApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicRuleSuggestionsApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicRuleSuggestionsApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicRuleSuggestionsApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicRuleSuggestionsApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicRuleSuggestionsApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicRuleSuggestionsApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicRuleSuggestionsApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicRuleSuggestionsApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicRuleSuggestionsApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicRuleSuggestionsApi = fmt.Errorf("proto: unexpected end of group")
)

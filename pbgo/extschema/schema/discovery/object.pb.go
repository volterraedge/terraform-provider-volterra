// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/discovery/object.proto

package discovery

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Discovery object
//
// x-displayName: "Discovery"
// Discovery object
type Object struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard object's metadata
	Metadata *schema.ObjectMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// System generated object's metadata
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// Specification of the discovery
	Spec *SpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Object) Reset()      { *m = Object{} }
func (*Object) ProtoMessage() {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_56065040c22ef933, []int{0}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *Object) GetSpec() *SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Specification for Discovery object
//
// x-displayName: "Specification"
// Shape of the discovery specification
type SpecType struct {
	// gc_spec
	//
	// x-displayName: "GC Spec"
	// desired state of discovery
	GcSpec *GlobalSpecType `protobuf:"bytes,2,opt,name=gc_spec,json=gcSpec,proto3" json:"gc_spec,omitempty"`
}

func (m *SpecType) Reset()      { *m = SpecType{} }
func (*SpecType) ProtoMessage() {}
func (*SpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_56065040c22ef933, []int{1}
}
func (m *SpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecType.Merge(m, src)
}
func (m *SpecType) XXX_Size() int {
	return m.Size()
}
func (m *SpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecType proto.InternalMessageInfo

func (m *SpecType) GetGcSpec() *GlobalSpecType {
	if m != nil {
		return m.GcSpec
	}
	return nil
}

// Discovery Status Object
//
// x-displayName: "Discovery Status"
// Most recently observed status of object
type StatusObject struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard status's metadata
	Metadata *schema.StatusMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// object_refs
	//
	// x-displayName: "Config Object"
	// Object reference
	ObjectRefs []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
	// conditions
	//
	// x-displayName: "Conditions"
	// Conditions
	Conditions []*schema.ConditionType `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// ver_status
	//
	// x-displayName: "VER Status"
	// VerStatusType shows connection status to external cluster and
	// list of services discovered on that cluster. This is applicable
	// only for k8s and consul discovery.
	VerStatus *VerStatusType `protobuf:"bytes,3,opt,name=ver_status,json=verStatus,proto3" json:"ver_status,omitempty"`
	// cbip_discovery_status
	// This and VerStatusType should be oneofs
	//
	// x-displayName: "cBIP Status"
	// CBIPStatusType captures the status of the cbip discovery
	// workflow, especially the internal LB status on the CE
	CbipStatus *CBIPStatusType `protobuf:"bytes,5,opt,name=cbip_status,json=cbipStatus,proto3" json:"cbip_status,omitempty"`
}

func (m *StatusObject) Reset()      { *m = StatusObject{} }
func (*StatusObject) ProtoMessage() {}
func (*StatusObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_56065040c22ef933, []int{2}
}
func (m *StatusObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatusObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusObject.Merge(m, src)
}
func (m *StatusObject) XXX_Size() int {
	return m.Size()
}
func (m *StatusObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusObject.DiscardUnknown(m)
}

var xxx_messageInfo_StatusObject proto.InternalMessageInfo

func (m *StatusObject) GetMetadata() *schema.StatusMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StatusObject) GetObjectRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.ObjectRefs
	}
	return nil
}

func (m *StatusObject) GetConditions() []*schema.ConditionType {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *StatusObject) GetVerStatus() *VerStatusType {
	if m != nil {
		return m.VerStatus
	}
	return nil
}

func (m *StatusObject) GetCbipStatus() *CBIPStatusType {
	if m != nil {
		return m.CbipStatus
	}
	return nil
}

// Status for cBIP Discovery
//
// x-displayName: "cBIP Discovery Status"
// This status captures the status of the cBIP discovery and its internal objects like LB.
type CBIPStatusType struct {
	// Internal LB
	//
	// x-displayName: "LB domain"
	// Domain name of the internal LB
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// cbip Device Discovery Status
	//
	// x-displayName: "Device Discovery Status"
	// Status of the discovery task for each cbip device
	DeviceStatus []*CBIPDeviceStatus `protobuf:"bytes,2,rep,name=device_status,json=deviceStatus,proto3" json:"device_status,omitempty"`
}

func (m *CBIPStatusType) Reset()      { *m = CBIPStatusType{} }
func (*CBIPStatusType) ProtoMessage() {}
func (*CBIPStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_56065040c22ef933, []int{3}
}
func (m *CBIPStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CBIPStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CBIPStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CBIPStatusType.Merge(m, src)
}
func (m *CBIPStatusType) XXX_Size() int {
	return m.Size()
}
func (m *CBIPStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_CBIPStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_CBIPStatusType proto.InternalMessageInfo

func (m *CBIPStatusType) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CBIPStatusType) GetDeviceStatus() []*CBIPDeviceStatus {
	if m != nil {
		return m.DeviceStatus
	}
	return nil
}

// Status for each cbip device
type CBIPDeviceStatus struct {
	// Management IP
	//
	// x-displayName: "Management IP"
	// x-required
	// x-example: "10.1.1.1"
	// IP Address of the Classic BIG-IP device
	CbipMgmtIp string `protobuf:"bytes,1,opt,name=cbip_mgmt_ip,json=cbipMgmtIp,proto3" json:"cbip_mgmt_ip,omitempty"`
	// Status condition
	//
	// x-displayName: "Conditions"
	// Discovery Status condition of the device
	Condition *schema.ConditionType `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (m *CBIPDeviceStatus) Reset()      { *m = CBIPDeviceStatus{} }
func (*CBIPDeviceStatus) ProtoMessage() {}
func (*CBIPDeviceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_56065040c22ef933, []int{4}
}
func (m *CBIPDeviceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CBIPDeviceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CBIPDeviceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CBIPDeviceStatus.Merge(m, src)
}
func (m *CBIPDeviceStatus) XXX_Size() int {
	return m.Size()
}
func (m *CBIPDeviceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CBIPDeviceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CBIPDeviceStatus proto.InternalMessageInfo

func (m *CBIPDeviceStatus) GetCbipMgmtIp() string {
	if m != nil {
		return m.CbipMgmtIp
	}
	return ""
}

func (m *CBIPDeviceStatus) GetCondition() *schema.ConditionType {
	if m != nil {
		return m.Condition
	}
	return nil
}

func init() {
	proto.RegisterType((*Object)(nil), "ves.io.schema.discovery.Object")
	golang_proto.RegisterType((*Object)(nil), "ves.io.schema.discovery.Object")
	proto.RegisterType((*SpecType)(nil), "ves.io.schema.discovery.SpecType")
	golang_proto.RegisterType((*SpecType)(nil), "ves.io.schema.discovery.SpecType")
	proto.RegisterType((*StatusObject)(nil), "ves.io.schema.discovery.StatusObject")
	golang_proto.RegisterType((*StatusObject)(nil), "ves.io.schema.discovery.StatusObject")
	proto.RegisterType((*CBIPStatusType)(nil), "ves.io.schema.discovery.CBIPStatusType")
	golang_proto.RegisterType((*CBIPStatusType)(nil), "ves.io.schema.discovery.CBIPStatusType")
	proto.RegisterType((*CBIPDeviceStatus)(nil), "ves.io.schema.discovery.CBIPDeviceStatus")
	golang_proto.RegisterType((*CBIPDeviceStatus)(nil), "ves.io.schema.discovery.CBIPDeviceStatus")
}

func init() {
	proto.RegisterFile("ves.io/schema/discovery/object.proto", fileDescriptor_56065040c22ef933)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/discovery/object.proto", fileDescriptor_56065040c22ef933)
}

var fileDescriptor_56065040c22ef933 = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xbf, 0x6f, 0x23, 0x45,
	0x14, 0xc7, 0x3d, 0x8e, 0xcf, 0x39, 0xbf, 0x98, 0x10, 0x96, 0x02, 0x73, 0x1c, 0xab, 0xe0, 0x43,
	0x70, 0x27, 0xd8, 0xb5, 0x14, 0x74, 0x05, 0xd1, 0x09, 0xa1, 0x24, 0xa7, 0xe3, 0x44, 0x02, 0xc8,
	0x41, 0x14, 0x34, 0xab, 0xf1, 0xec, 0xf3, 0x66, 0xc0, 0xbb, 0xb3, 0x9a, 0x99, 0xdd, 0x24, 0x42,
	0x91, 0x68, 0xd1, 0x35, 0x94, 0x48, 0xfc, 0x03, 0x88, 0x3f, 0x01, 0x9a, 0x0b, 0x15, 0x65, 0x74,
	0xa2, 0x88, 0x28, 0x10, 0xd9, 0x34, 0x47, 0x77, 0x35, 0x15, 0xf2, 0xec, 0x0f, 0x6c, 0x2b, 0x0e,
	0x48, 0x69, 0xec, 0x7d, 0x7e, 0x9f, 0xf7, 0xdd, 0x37, 0xdf, 0x79, 0xe3, 0x81, 0xd7, 0x53, 0x54,
	0x2e, 0x17, 0x3d, 0xc5, 0xf6, 0x30, 0xa4, 0x3d, 0x9f, 0x2b, 0x26, 0x52, 0x94, 0x87, 0x3d, 0x31,
	0xf8, 0x02, 0x99, 0x76, 0x63, 0x29, 0xb4, 0xb0, 0x5e, 0xca, 0x29, 0x37, 0xa7, 0xdc, 0x8a, 0xba,
	0xe1, 0x04, 0x5c, 0xef, 0x25, 0x03, 0x97, 0x89, 0xb0, 0x17, 0x88, 0x40, 0xf4, 0x0c, 0x3f, 0x48,
	0x86, 0x26, 0x32, 0x81, 0x79, 0xca, 0x75, 0x6e, 0xdc, 0x9a, 0xf7, 0x36, 0x7d, 0x18, 0xa3, 0x2a,
	0xa0, 0x57, 0xa6, 0x21, 0x11, 0x6b, 0x2e, 0xa2, 0x32, 0xf9, 0xf2, 0x74, 0x72, 0xb2, 0xee, 0xe6,
	0x74, 0x2a, 0xa5, 0x23, 0xee, 0x53, 0x8d, 0x45, 0xb6, 0x3b, 0x93, 0x45, 0x85, 0x51, 0x3a, 0x23,
	0xbe, 0x3a, 0xc3, 0x70, 0xdc, 0xf7, 0xa6, 0x88, 0xee, 0x6f, 0xd7, 0xa0, 0xf9, 0xb1, 0x71, 0xc6,
	0x7a, 0x17, 0xae, 0x87, 0xa8, 0xa9, 0x4f, 0x35, 0xed, 0x90, 0x55, 0x72, 0x7b, 0x69, 0xed, 0x55,
	0x77, 0xda, 0xa6, 0x1c, 0xdc, 0x41, 0x4d, 0x3f, 0x3d, 0x8c, 0xb1, 0x5f, 0xe1, 0xd6, 0x36, 0x3c,
	0xaf, 0x0e, 0x95, 0xc6, 0xd0, 0xab, 0x14, 0xea, 0x46, 0xe1, 0xd6, 0x8c, 0xc2, 0xae, 0xa1, 0x66,
	0x74, 0x96, 0xf3, 0xda, 0x9d, 0x52, 0xed, 0x2e, 0x34, 0x54, 0x8c, 0xac, 0xb3, 0x60, 0x24, 0x5e,
	0x73, 0xe7, 0xec, 0x95, 0xbb, 0x1b, 0x23, 0x33, 0x02, 0x06, 0x5f, 0xff, 0xa6, 0xf1, 0xcb, 0x71,
	0xa7, 0xbe, 0x42, 0x9e, 0x1c, 0x77, 0xfe, 0xa8, 0xc3, 0x26, 0x2c, 0x3c, 0x40, 0x6d, 0xdd, 0x1b,
	0xde, 0x3d, 0x60, 0x8e, 0x42, 0x96, 0x48, 0x0c, 0x51, 0xed, 0x39, 0x4a, 0xd3, 0xc8, 0xa7, 0xd2,
	0x77, 0x42, 0x11, 0x71, 0x2d, 0xe4, 0xdb, 0x63, 0x8f, 0x1c, 0x2e, 0x1c, 0x1e, 0x0d, 0x25, 0x55,
	0x5a, 0x26, 0x4c, 0x27, 0x12, 0x1d, 0x89, 0xd4, 0x87, 0xfb, 0xb0, 0xd8, 0xc7, 0x78, 0x44, 0x19,
	0x5a, 0xeb, 0x73, 0x85, 0x12, 0x85, 0x73, 0x55, 0xf6, 0x25, 0xd7, 0x08, 0x5b, 0xd0, 0xdc, 0x94,
	0x48, 0xf5, 0x95, 0x55, 0xb6, 0x70, 0x84, 0x57, 0x56, 0x69, 0x6c, 0x73, 0x75, 0x45, 0x63, 0x7e,
	0x3f, 0xee, 0x7c, 0x4f, 0xe0, 0x3b, 0x02, 0x83, 0xb1, 0xf3, 0x6e, 0xc0, 0x3c, 0xf3, 0x5d, 0x6d,
	0x8d, 0xc7, 0xf6, 0x04, 0x67, 0x38, 0xf9, 0xc3, 0x80, 0xc7, 0xee, 0xf8, 0xc3, 0x63, 0xa3, 0x44,
	0x69, 0x94, 0x2a, 0x8f, 0x7c, 0x4c, 0x39, 0x43, 0xe5, 0x52, 0x3f, 0xe4, 0x91, 0xc7, 0x24, 0xfa,
	0x18, 0x69, 0x4e, 0x47, 0xca, 0x8d, 0xa9, 0x52, 0xfb, 0x42, 0xfa, 0xd6, 0x5a, 0xd1, 0x47, 0x25,
	0xe6, 0x8c, 0x2b, 0x9d, 0xbc, 0xd2, 0x31, 0x85, 0x4e, 0x09, 0x8f, 0x17, 0x24, 0x51, 0x77, 0xb7,
	0xe1, 0x7a, 0x39, 0x1d, 0xd6, 0xfb, 0xb0, 0x58, 0x34, 0x58, 0x0c, 0xe5, 0x9b, 0x73, 0x27, 0xea,
	0xc1, 0x48, 0x0c, 0xe8, 0xa8, 0x9a, 0xab, 0x66, 0xc0, 0xc6, 0xcf, 0xdd, 0xbf, 0xeb, 0xd0, 0xde,
	0xd5, 0x54, 0x27, 0xea, 0x7f, 0x1f, 0x95, 0x1c, 0xbf, 0xe0, 0xa8, 0x7c, 0x08, 0x4b, 0xf9, 0x3f,
	0x91, 0x27, 0x71, 0xa8, 0x3a, 0xf5, 0xd5, 0x85, 0xdb, 0x4b, 0x6b, 0x37, 0x2f, 0x3c, 0x68, 0x7d,
	0x1c, 0x8e, 0x8b, 0x37, 0xda, 0x3f, 0x1e, 0xb5, 0xaa, 0x1e, 0xfb, 0x20, 0xca, 0xa4, 0xb2, 0xee,
	0x01, 0x30, 0x11, 0xf9, 0xdc, 0x9c, 0xe8, 0x4e, 0xe3, 0x42, 0xad, 0xcd, 0x12, 0x30, 0x8d, 0x4c,
	0xf0, 0xd6, 0x7d, 0x80, 0x14, 0xa5, 0xa7, 0x4c, 0xab, 0xc5, 0x69, 0x7b, 0x63, 0xae, 0x37, 0x9f,
	0xa1, 0xcc, 0x17, 0x65, 0x74, 0x5a, 0x69, 0x19, 0x5a, 0x1f, 0xc0, 0x92, 0xd9, 0xca, 0x42, 0xe7,
	0xda, 0x7f, 0x78, 0xbc, 0xb9, 0xf1, 0xf0, 0x93, 0x09, 0x21, 0x18, 0xd7, 0xe6, 0xf1, 0xfa, 0x8b,
	0x4f, 0xde, 0x5b, 0x81, 0x65, 0x68, 0x97, 0x66, 0xb9, 0x09, 0xf7, 0xbb, 0x8f, 0x08, 0x2c, 0x4f,
	0xd7, 0x58, 0x77, 0xa0, 0xe9, 0x8b, 0x90, 0xf2, 0xc8, 0x98, 0xdf, 0xda, 0x78, 0xe1, 0xf4, 0x88,
	0x64, 0x47, 0x8b, 0x7d, 0x0c, 0x45, 0x8a, 0xfe, 0xd3, 0x9f, 0x09, 0xe9, 0x17, 0x80, 0xf5, 0x11,
	0x3c, 0x97, 0x0f, 0x4a, 0xd9, 0x5e, 0x6e, 0xf8, 0x9d, 0x4b, 0xdb, 0xdb, 0x32, 0x15, 0xf9, 0x0b,
	0xfb, 0x6d, 0x7f, 0x22, 0xea, 0x7e, 0x05, 0x2b, 0xb3, 0x84, 0xf5, 0x16, 0xb4, 0x8d, 0x01, 0x61,
	0x10, 0x6a, 0x8f, 0xc7, 0x45, 0x53, 0xad, 0x9f, 0xfe, 0x7a, 0xbc, 0xd0, 0x90, 0xf5, 0x03, 0x92,
	0xaf, 0x71, 0x27, 0x08, 0xf5, 0xc3, 0xd8, 0x5a, 0x87, 0x56, 0xb5, 0x05, 0xc5, 0x3c, 0x5e, 0xbe,
	0x63, 0xff, 0xe2, 0x1b, 0x8f, 0xc8, 0xc9, 0x99, 0x5d, 0x3b, 0x3d, 0xb3, 0x6b, 0xcf, 0xce, 0x6c,
	0xf2, 0x75, 0x66, 0x93, 0x1f, 0x32, 0x9b, 0xfc, 0x9a, 0xd9, 0xe4, 0x24, 0xb3, 0xc9, 0x69, 0x66,
	0x93, 0x3f, 0x33, 0x9b, 0x3c, 0xcd, 0xec, 0xda, 0xb3, 0xcc, 0x26, 0xdf, 0x9e, 0xdb, 0xb5, 0xc7,
	0xe7, 0x36, 0x39, 0x39, 0xb7, 0x6b, 0xa7, 0xe7, 0x76, 0xed, 0xf3, 0x9d, 0x40, 0xc4, 0x5f, 0x06,
	0x6e, 0x2a, 0x46, 0x1a, 0xa5, 0xa4, 0x6e, 0xa2, 0x7a, 0xe6, 0x61, 0x28, 0x64, 0xe8, 0xc4, 0x52,
	0xa4, 0xdc, 0x47, 0xe9, 0x94, 0xe9, 0x5e, 0x3c, 0x08, 0x44, 0x0f, 0x0f, 0x74, 0x71, 0x79, 0xcc,
	0x5e, 0x71, 0x83, 0xa6, 0xb9, 0x41, 0xde, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xde, 0xd4,
	0xba, 0x72, 0x07, 0x00, 0x00,
}

func (this *Object) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Object)
	if !ok {
		that2, ok := that.(Object)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *SpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecType)
	if !ok {
		that2, ok := that.(SpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcSpec.Equal(that1.GcSpec) {
		return false
	}
	return true
}
func (this *StatusObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusObject)
	if !ok {
		that2, ok := that.(StatusObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.ObjectRefs) != len(that1.ObjectRefs) {
		return false
	}
	for i := range this.ObjectRefs {
		if !this.ObjectRefs[i].Equal(that1.ObjectRefs[i]) {
			return false
		}
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	if !this.VerStatus.Equal(that1.VerStatus) {
		return false
	}
	if !this.CbipStatus.Equal(that1.CbipStatus) {
		return false
	}
	return true
}
func (this *CBIPStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CBIPStatusType)
	if !ok {
		that2, ok := that.(CBIPStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if len(this.DeviceStatus) != len(that1.DeviceStatus) {
		return false
	}
	for i := range this.DeviceStatus {
		if !this.DeviceStatus[i].Equal(that1.DeviceStatus[i]) {
			return false
		}
	}
	return true
}
func (this *CBIPDeviceStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CBIPDeviceStatus)
	if !ok {
		that2, ok := that.(CBIPDeviceStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CbipMgmtIp != that1.CbipMgmtIp {
		return false
	}
	if !this.Condition.Equal(that1.Condition) {
		return false
	}
	return true
}
func (this *Object) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&discovery.Object{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&discovery.SpecType{")
	if this.GcSpec != nil {
		s = append(s, "GcSpec: "+fmt.Sprintf("%#v", this.GcSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&discovery.StatusObject{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ObjectRefs != nil {
		s = append(s, "ObjectRefs: "+fmt.Sprintf("%#v", this.ObjectRefs)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	if this.VerStatus != nil {
		s = append(s, "VerStatus: "+fmt.Sprintf("%#v", this.VerStatus)+",\n")
	}
	if this.CbipStatus != nil {
		s = append(s, "CbipStatus: "+fmt.Sprintf("%#v", this.CbipStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CBIPStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovery.CBIPStatusType{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.DeviceStatus != nil {
		s = append(s, "DeviceStatus: "+fmt.Sprintf("%#v", this.DeviceStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CBIPDeviceStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovery.CBIPDeviceStatus{")
	s = append(s, "CbipMgmtIp: "+fmt.Sprintf("%#v", this.CbipMgmtIp)+",\n")
	if this.Condition != nil {
		s = append(s, "Condition: "+fmt.Sprintf("%#v", this.Condition)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringObject(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GcSpec != nil {
		{
			size, err := m.GcSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *StatusObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CbipStatus != nil {
		{
			size, err := m.CbipStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.VerStatus != nil {
		{
			size, err := m.VerStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ObjectRefs) > 0 {
		for iNdEx := len(m.ObjectRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObjectRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CBIPStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBIPStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CBIPStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceStatus) > 0 {
		for iNdEx := len(m.DeviceStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeviceStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintObject(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CBIPDeviceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBIPDeviceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CBIPDeviceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Condition != nil {
		{
			size, err := m.Condition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CbipMgmtIp) > 0 {
		i -= len(m.CbipMgmtIp)
		copy(dAtA[i:], m.CbipMgmtIp)
		i = encodeVarintObject(dAtA, i, uint64(len(m.CbipMgmtIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *SpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcSpec != nil {
		l = m.GcSpec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *StatusObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if len(m.ObjectRefs) > 0 {
		for _, e := range m.ObjectRefs {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.VerStatus != nil {
		l = m.VerStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.CbipStatus != nil {
		l = m.CbipStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *CBIPStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	if len(m.DeviceStatus) > 0 {
		for _, e := range m.DeviceStatus {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	return n
}

func (m *CBIPDeviceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CbipMgmtIp)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Condition != nil {
		l = m.Condition.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func sovObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObject(x uint64) (n int) {
	return sovObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Object) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Object{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "SpecType", "SpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecType{`,
		`GcSpec:` + strings.Replace(fmt.Sprintf("%v", this.GcSpec), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusObject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjectRefs := "[]*ObjectRefType{"
	for _, f := range this.ObjectRefs {
		repeatedStringForObjectRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForObjectRefs += "}"
	repeatedStringForConditions := "[]*ConditionType{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(fmt.Sprintf("%v", f), "ConditionType", "schema.ConditionType", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&StatusObject{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "StatusMetaType", "schema.StatusMetaType", 1) + `,`,
		`ObjectRefs:` + repeatedStringForObjectRefs + `,`,
		`VerStatus:` + strings.Replace(fmt.Sprintf("%v", this.VerStatus), "VerStatusType", "VerStatusType", 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`CbipStatus:` + strings.Replace(this.CbipStatus.String(), "CBIPStatusType", "CBIPStatusType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CBIPStatusType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDeviceStatus := "[]*CBIPDeviceStatus{"
	for _, f := range this.DeviceStatus {
		repeatedStringForDeviceStatus += strings.Replace(f.String(), "CBIPDeviceStatus", "CBIPDeviceStatus", 1) + ","
	}
	repeatedStringForDeviceStatus += "}"
	s := strings.Join([]string{`&CBIPStatusType{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`DeviceStatus:` + repeatedStringForDeviceStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *CBIPDeviceStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBIPDeviceStatus{`,
		`CbipMgmtIp:` + fmt.Sprintf("%v", this.CbipMgmtIp) + `,`,
		`Condition:` + strings.Replace(fmt.Sprintf("%v", this.Condition), "ConditionType", "schema.ConditionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringObject(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GcSpec == nil {
				m.GcSpec = &GlobalSpecType{}
			}
			if err := m.GcSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.StatusMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectRefs = append(m.ObjectRefs, &schema.ObjectRefType{})
			if err := m.ObjectRefs[len(m.ObjectRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerStatus == nil {
				m.VerStatus = &VerStatusType{}
			}
			if err := m.VerStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &schema.ConditionType{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbipStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CbipStatus == nil {
				m.CbipStatus = &CBIPStatusType{}
			}
			if err := m.CbipStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CBIPStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBIPStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBIPStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceStatus = append(m.DeviceStatus, &CBIPDeviceStatus{})
			if err := m.DeviceStatus[len(m.DeviceStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CBIPDeviceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBIPDeviceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBIPDeviceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbipMgmtIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CbipMgmtIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Condition == nil {
				m.Condition = &schema.ConditionType{}
			}
			if err := m.Condition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObject = fmt.Errorf("proto: unexpected end of group")
)

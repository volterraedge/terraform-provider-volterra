// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package discovery

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.discovery.CBIPDeviceStatus"] = CBIPDeviceStatusValidator()
	vr["ves.io.schema.discovery.CBIPStatusType"] = CBIPStatusTypeValidator()
	vr["ves.io.schema.discovery.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.discovery.Object"] = ObjectValidator()
	vr["ves.io.schema.discovery.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.discovery.CreateRequest"] = CreateRequestValidator()
	vr["ves.io.schema.discovery.CreateResponse"] = CreateResponseValidator()
	vr["ves.io.schema.discovery.DeleteRequest"] = DeleteRequestValidator()
	vr["ves.io.schema.discovery.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.discovery.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.discovery.ListRequest"] = ListRequestValidator()
	vr["ves.io.schema.discovery.ListResponse"] = ListResponseValidator()
	vr["ves.io.schema.discovery.ListResponseItem"] = ListResponseItemValidator()
	vr["ves.io.schema.discovery.ReplaceRequest"] = ReplaceRequestValidator()
	vr["ves.io.schema.discovery.ReplaceResponse"] = ReplaceResponseValidator()

	vr["ves.io.schema.discovery.CbipAdminCredentials"] = CbipAdminCredentialsValidator()
	vr["ves.io.schema.discovery.CbipCertificateAuthority"] = CbipCertificateAuthorityValidator()
	vr["ves.io.schema.discovery.CbipCluster"] = CbipClusterValidator()
	vr["ves.io.schema.discovery.CbipDeviceConfig"] = CbipDeviceConfigValidator()
	vr["ves.io.schema.discovery.CbipDiscoveryType"] = CbipDiscoveryTypeValidator()
	vr["ves.io.schema.discovery.ConsulAccessInfo"] = ConsulAccessInfoValidator()
	vr["ves.io.schema.discovery.ConsulDiscoveryType"] = ConsulDiscoveryTypeValidator()
	vr["ves.io.schema.discovery.ConsulHttpBasicAuthInfoType"] = ConsulHttpBasicAuthInfoTypeValidator()
	vr["ves.io.schema.discovery.ConsulVipDiscoveryInfoType"] = ConsulVipDiscoveryInfoTypeValidator()
	vr["ves.io.schema.discovery.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.discovery.DiscoveredServiceType"] = DiscoveredServiceTypeValidator()
	vr["ves.io.schema.discovery.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.discovery.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.discovery.K8SAccessInfo"] = K8SAccessInfoValidator()
	vr["ves.io.schema.discovery.K8SDelegationType"] = K8SDelegationTypeValidator()
	vr["ves.io.schema.discovery.K8SDiscoveryType"] = K8SDiscoveryTypeValidator()
	vr["ves.io.schema.discovery.K8SPublishType"] = K8SPublishTypeValidator()
	vr["ves.io.schema.discovery.K8SVipDiscoveryInfoType"] = K8SVipDiscoveryInfoTypeValidator()
	vr["ves.io.schema.discovery.NamespaceMapping"] = NamespaceMappingValidator()
	vr["ves.io.schema.discovery.NamespaceMappingItem"] = NamespaceMappingItemValidator()
	vr["ves.io.schema.discovery.PodInfoType"] = PodInfoTypeValidator()
	vr["ves.io.schema.discovery.PortInfoType"] = PortInfoTypeValidator()
	vr["ves.io.schema.discovery.ReplaceSpecType"] = ReplaceSpecTypeValidator()
	vr["ves.io.schema.discovery.RestConfigType"] = RestConfigTypeValidator()
	vr["ves.io.schema.discovery.TLSClientConfigType"] = TLSClientConfigTypeValidator()
	vr["ves.io.schema.discovery.VerStatusType"] = VerStatusTypeValidator()
	vr["ves.io.schema.discovery.VipDiscoveryInfoType"] = VipDiscoveryInfoTypeValidator()
	vr["ves.io.schema.discovery.VirtualServerFilter"] = VirtualServerFilterValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.discovery.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.discovery.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.discovery.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.discovery.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.discovery.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.discovery.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.discovery.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.discovery.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.discovery.API.Create"] = []string{
		"spec.discovery_cbip.cbip_clusters.#.cbip_devices.#.admin_credentials.password.blindfold_secret_info_internal",
		"spec.discovery_cbip.cbip_clusters.#.cbip_devices.#.admin_credentials.password.secret_encoding_type",
		"spec.discovery_cbip.cbip_clusters.#.cbip_devices.#.admin_credentials.password.vault_secret_info",
		"spec.discovery_cbip.cbip_clusters.#.cbip_devices.#.admin_credentials.password.wingman_secret_info",
		"spec.discovery_cbip.cbip_clusters.#.metadata.disable",
		"spec.discovery_cbip.internal_lb_domain",
		"spec.discovery_consul.access_info.connection_info.tls_info.ca_certificate_url",
		"spec.discovery_consul.access_info.connection_info.tls_info.certificate_url",
		"spec.discovery_consul.access_info.connection_info.tls_info.key_url.blindfold_secret_info_internal",
		"spec.discovery_consul.access_info.connection_info.tls_info.key_url.secret_encoding_type",
		"spec.discovery_consul.access_info.connection_info.tls_info.key_url.vault_secret_info",
		"spec.discovery_consul.access_info.connection_info.tls_info.key_url.wingman_secret_info",
		"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url.blindfold_secret_info_internal",
		"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url.secret_encoding_type",
		"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url.vault_secret_info",
		"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url.wingman_secret_info",
		"spec.discovery_consul.access_info.scheme",
		"spec.discovery_k8s.access_info.connection_info.tls_info.ca_certificate_url",
		"spec.discovery_k8s.access_info.connection_info.tls_info.certificate_url",
		"spec.discovery_k8s.access_info.connection_info.tls_info.key_url.blindfold_secret_info_internal",
		"spec.discovery_k8s.access_info.connection_info.tls_info.key_url.secret_encoding_type",
		"spec.discovery_k8s.access_info.connection_info.tls_info.key_url.vault_secret_info",
		"spec.discovery_k8s.access_info.connection_info.tls_info.key_url.wingman_secret_info",
		"spec.discovery_k8s.access_info.in_cluster",
		"spec.discovery_k8s.access_info.kubeconfig_url.blindfold_secret_info_internal",
		"spec.discovery_k8s.access_info.kubeconfig_url.secret_encoding_type",
		"spec.discovery_k8s.access_info.kubeconfig_url.vault_secret_info",
		"spec.discovery_k8s.access_info.kubeconfig_url.wingman_secret_info",
		"spec.where.site.refs.#",
		"spec.where.virtual_site.refs.#",
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.discovery.API.Create"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.discovery_cbip",
			AllowedEnvironments: []string{"crt", "demo1", "test"},
		},
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.discovery.API.Create"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.discovery_cbip",
			AllowedEnvironments: []string{"crt", "demo1", "test"},
		},
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.discovery.API.Create"] = "ves.io.schema.discovery.CreateRequest"

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.discovery.API.Get"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "create_form.spec.discovery_cbip",
			AllowedEnvironments: []string{"crt", "demo1", "test"},
		},
		{
			FieldPath:           "replace_form.spec.discovery_cbip",
			AllowedEnvironments: []string{"crt", "demo1", "test"},
		},
		{
			FieldPath:           "spec.discovery_cbip",
			AllowedEnvironments: []string{"crt", "demo1", "test"},
		},
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.discovery.API.List"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "items.#.get_spec.discovery_cbip",
			AllowedEnvironments: []string{"crt", "demo1", "test"},
		},
	}

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.discovery.API.Replace"] = []string{
		"spec.discovery_cbip.cbip_clusters.#.cbip_devices.#.admin_credentials.password.blindfold_secret_info_internal",
		"spec.discovery_cbip.cbip_clusters.#.cbip_devices.#.admin_credentials.password.secret_encoding_type",
		"spec.discovery_cbip.cbip_clusters.#.cbip_devices.#.admin_credentials.password.vault_secret_info",
		"spec.discovery_cbip.cbip_clusters.#.cbip_devices.#.admin_credentials.password.wingman_secret_info",
		"spec.discovery_cbip.cbip_clusters.#.metadata.disable",
		"spec.discovery_cbip.internal_lb_domain",
		"spec.discovery_consul.access_info.connection_info.tls_info.ca_certificate_url",
		"spec.discovery_consul.access_info.connection_info.tls_info.certificate_url",
		"spec.discovery_consul.access_info.connection_info.tls_info.key_url.blindfold_secret_info_internal",
		"spec.discovery_consul.access_info.connection_info.tls_info.key_url.secret_encoding_type",
		"spec.discovery_consul.access_info.connection_info.tls_info.key_url.vault_secret_info",
		"spec.discovery_consul.access_info.connection_info.tls_info.key_url.wingman_secret_info",
		"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url.blindfold_secret_info_internal",
		"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url.secret_encoding_type",
		"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url.vault_secret_info",
		"spec.discovery_consul.access_info.http_basic_auth_info.passwd_url.wingman_secret_info",
		"spec.discovery_consul.access_info.scheme",
		"spec.discovery_k8s.access_info.connection_info.tls_info.ca_certificate_url",
		"spec.discovery_k8s.access_info.connection_info.tls_info.certificate_url",
		"spec.discovery_k8s.access_info.connection_info.tls_info.key_url.blindfold_secret_info_internal",
		"spec.discovery_k8s.access_info.connection_info.tls_info.key_url.secret_encoding_type",
		"spec.discovery_k8s.access_info.connection_info.tls_info.key_url.vault_secret_info",
		"spec.discovery_k8s.access_info.connection_info.tls_info.key_url.wingman_secret_info",
		"spec.discovery_k8s.access_info.in_cluster",
		"spec.discovery_k8s.access_info.kubeconfig_url.blindfold_secret_info_internal",
		"spec.discovery_k8s.access_info.kubeconfig_url.secret_encoding_type",
		"spec.discovery_k8s.access_info.kubeconfig_url.vault_secret_info",
		"spec.discovery_k8s.access_info.kubeconfig_url.wingman_secret_info",
		"spec.where.site.refs.#",
		"spec.where.virtual_site.refs.#",
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.discovery.API.Replace"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.discovery_cbip",
			AllowedEnvironments: []string{"crt", "demo1", "test"},
		},
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.discovery.API.Replace"] = "ves.io.schema.discovery.ReplaceRequest"

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.discovery.API"] = "config"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

	sm["config"] = svcfw.P0PolicyInfo{
		Name:            "ves-io-allow-config",
		ServiceSelector: "akar\\.gc.*\\",
	}

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	csr = mdr.PubCRUDServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		csr.CRUDSwaggerRegistry["ves.io.schema.discovery.Object"] = APISwaggerJSON
		csr.CRUDGrpcClientRegistry["ves.io.schema.discovery.Object"] = NewCRUDAPIGrpcClient
		csr.CRUDRestClientRegistry["ves.io.schema.discovery.Object"] = NewCRUDAPIRestClient
		csr.CRUDInprocClientRegistry["ves.io.schema.discovery.Object"] = NewCRUDAPIInprocClient
		if isExternal {
			return
		}
		// registration of api handlers if our own schema
		mdr.SvcRegisterHandlers["ves.io.schema.discovery.API"] = RegisterAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.discovery.API"] = RegisterGwAPIHandler
		csr.CRUDServerRegistry["ves.io.schema.discovery.Object"] = NewCRUDAPIServer

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

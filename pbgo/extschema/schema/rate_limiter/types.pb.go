// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/rate_limiter/types.proto

package rate_limiter

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RateLimiterMode
//
// x-displayName: "Rate Limiter Mode"
type RateLimiterMode int32

const (
	// Not Shared
	//
	// x-displayName: "Not Shared"
	// Allot unique pool of request limits for each reference to a rate_limiter object.
	RATE_LIMITER_MODE_NOT_SHARED RateLimiterMode = 0
	// Shared
	//
	// x-displayName: "Shared"
	// Use a common pool of request limits for all references to a rate_limiter object.
	RATE_LIMITER_MODE_SHARED RateLimiterMode = 1
)

var RateLimiterMode_name = map[int32]string{
	0: "RATE_LIMITER_MODE_NOT_SHARED",
	1: "RATE_LIMITER_MODE_SHARED",
}

var RateLimiterMode_value = map[string]int32{
	"RATE_LIMITER_MODE_NOT_SHARED": 0,
	"RATE_LIMITER_MODE_SHARED":     1,
}

func (RateLimiterMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{0}
}

// RateLimitPeriodUnit
//
// x-displayName: "Rate Limit Period Unit"
// Unit for the period per which the rate limit is applied.
type RateLimitPeriodUnit int32

const (
	// Second
	//
	// x-displayName: "Seconds"
	// Rate limit period unit is seconds
	SECOND RateLimitPeriodUnit = 0
	// Minute
	//
	// x-displayName: "Minutes"
	// Rate limit period unit is minutes
	MINUTE RateLimitPeriodUnit = 1
	// Hour
	//
	// x-displayName: "Hours"
	// Rate limit period unit is hours
	HOUR RateLimitPeriodUnit = 2
	// Day
	//
	// x-displayName: "Days"
	// Rate limit period unit is days
	DAY RateLimitPeriodUnit = 3
)

var RateLimitPeriodUnit_name = map[int32]string{
	0: "SECOND",
	1: "MINUTE",
	2: "HOUR",
	3: "DAY",
}

var RateLimitPeriodUnit_value = map[string]int32{
	"SECOND": 0,
	"MINUTE": 1,
	"HOUR":   2,
	"DAY":    3,
}

func (RateLimitPeriodUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{1}
}

// Hours
//
// x-displayName: "Hours"
// Input Duration Hours
type InputHours struct {
	// Duration
	//
	// x-displayName: "Duration"
	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *InputHours) Reset()      { *m = InputHours{} }
func (*InputHours) ProtoMessage() {}
func (*InputHours) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{0}
}
func (m *InputHours) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputHours) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InputHours) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputHours.Merge(m, src)
}
func (m *InputHours) XXX_Size() int {
	return m.Size()
}
func (m *InputHours) XXX_DiscardUnknown() {
	xxx_messageInfo_InputHours.DiscardUnknown(m)
}

var xxx_messageInfo_InputHours proto.InternalMessageInfo

func (m *InputHours) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Minutes
//
// x-displayName: "Minutes"
// Input Duration Minutes
type InputMinutes struct {
	// Duration
	//
	// x-displayName: "Duration"
	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *InputMinutes) Reset()      { *m = InputMinutes{} }
func (*InputMinutes) ProtoMessage() {}
func (*InputMinutes) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{1}
}
func (m *InputMinutes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputMinutes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InputMinutes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputMinutes.Merge(m, src)
}
func (m *InputMinutes) XXX_Size() int {
	return m.Size()
}
func (m *InputMinutes) XXX_DiscardUnknown() {
	xxx_messageInfo_InputMinutes.DiscardUnknown(m)
}

var xxx_messageInfo_InputMinutes proto.InternalMessageInfo

func (m *InputMinutes) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Seconds
//
// x-displayName: "Seconds"
// Input Duration Seconds
type InputSeconds struct {
	// Duration
	//
	// x-displayName: "Duration"
	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *InputSeconds) Reset()      { *m = InputSeconds{} }
func (*InputSeconds) ProtoMessage() {}
func (*InputSeconds) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{2}
}
func (m *InputSeconds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputSeconds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InputSeconds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputSeconds.Merge(m, src)
}
func (m *InputSeconds) XXX_Size() int {
	return m.Size()
}
func (m *InputSeconds) XXX_DiscardUnknown() {
	xxx_messageInfo_InputSeconds.DiscardUnknown(m)
}

var xxx_messageInfo_InputSeconds proto.InternalMessageInfo

func (m *InputSeconds) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// RateLimitBlockAction
//
// x-displayName: "Rate Limit Block Action"
// Action where a user is blocked from making further requests after exceeding rate limit threshold.
type RateLimitBlockAction struct {
	// block_duration_choice
	//
	// x-displayName: "Duration"
	// Period of time after rate limit threshold is exceeded where a user is blocked from making further requests.
	//
	// Types that are valid to be assigned to BlockDurationChoice:
	//	*RateLimitBlockAction_Seconds
	//	*RateLimitBlockAction_Minutes
	//	*RateLimitBlockAction_Hours
	BlockDurationChoice isRateLimitBlockAction_BlockDurationChoice `protobuf_oneof:"block_duration_choice"`
}

func (m *RateLimitBlockAction) Reset()      { *m = RateLimitBlockAction{} }
func (*RateLimitBlockAction) ProtoMessage() {}
func (*RateLimitBlockAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{3}
}
func (m *RateLimitBlockAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitBlockAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RateLimitBlockAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitBlockAction.Merge(m, src)
}
func (m *RateLimitBlockAction) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitBlockAction) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitBlockAction.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitBlockAction proto.InternalMessageInfo

type isRateLimitBlockAction_BlockDurationChoice interface {
	isRateLimitBlockAction_BlockDurationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RateLimitBlockAction_Seconds struct {
	Seconds *InputSeconds `protobuf:"bytes,2,opt,name=seconds,proto3,oneof" json:"seconds,omitempty"`
}
type RateLimitBlockAction_Minutes struct {
	Minutes *InputMinutes `protobuf:"bytes,3,opt,name=minutes,proto3,oneof" json:"minutes,omitempty"`
}
type RateLimitBlockAction_Hours struct {
	Hours *InputHours `protobuf:"bytes,4,opt,name=hours,proto3,oneof" json:"hours,omitempty"`
}

func (*RateLimitBlockAction_Seconds) isRateLimitBlockAction_BlockDurationChoice() {}
func (*RateLimitBlockAction_Minutes) isRateLimitBlockAction_BlockDurationChoice() {}
func (*RateLimitBlockAction_Hours) isRateLimitBlockAction_BlockDurationChoice()   {}

func (m *RateLimitBlockAction) GetBlockDurationChoice() isRateLimitBlockAction_BlockDurationChoice {
	if m != nil {
		return m.BlockDurationChoice
	}
	return nil
}

func (m *RateLimitBlockAction) GetSeconds() *InputSeconds {
	if x, ok := m.GetBlockDurationChoice().(*RateLimitBlockAction_Seconds); ok {
		return x.Seconds
	}
	return nil
}

func (m *RateLimitBlockAction) GetMinutes() *InputMinutes {
	if x, ok := m.GetBlockDurationChoice().(*RateLimitBlockAction_Minutes); ok {
		return x.Minutes
	}
	return nil
}

func (m *RateLimitBlockAction) GetHours() *InputHours {
	if x, ok := m.GetBlockDurationChoice().(*RateLimitBlockAction_Hours); ok {
		return x.Hours
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RateLimitBlockAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RateLimitBlockAction_Seconds)(nil),
		(*RateLimitBlockAction_Minutes)(nil),
		(*RateLimitBlockAction_Hours)(nil),
	}
}

// RateLimitValue
//
// x-displayName: "Rate Limit Value"
// A tuple consisting of a rate limit period unit and the total number of allowed requests for that period.
type RateLimitValue struct {
	// unit
	//
	// x-displayName: "Per Period"
	// x-required
	// Unit for the period per which the rate limit is applied.
	Unit RateLimitPeriodUnit `protobuf:"varint,1,opt,name=unit,proto3,enum=ves.io.schema.rate_limiter.RateLimitPeriodUnit" json:"unit,omitempty"`
	// total_number
	//
	// x-displayName: "Number Of Requests"
	// x-example: "1"
	// x-required
	// The total number of allowed requests per rate-limiting period.
	TotalNumber uint32 `protobuf:"varint,2,opt,name=total_number,json=totalNumber,proto3" json:"total_number,omitempty"`
	// burst_multiplier
	//
	// x-displayName: "Burst Multiplier"
	// x-example: "1"
	// The maximum burst of requests to accommodate, expressed as a multiple of the rate.
	BurstMultiplier uint32 `protobuf:"varint,3,opt,name=burst_multiplier,json=burstMultiplier,proto3" json:"burst_multiplier,omitempty"`
	// period_multiplier
	//
	// x-displayName: "Periods"
	// x-example: "1"
	// This setting, combined with Per Period units, provides a duration
	PeriodMultiplier uint32 `protobuf:"varint,4,opt,name=period_multiplier,json=periodMultiplier,proto3" json:"period_multiplier,omitempty"`
	// Rate Limiter Action
	//
	// x-displayName: "Mitigation Action"
	// Applies the specified action to the user after threshold is reached.
	//
	// Types that are valid to be assigned to ActionChoice:
	//	*RateLimitValue_Disabled
	//	*RateLimitValue_ActionBlock
	ActionChoice isRateLimitValue_ActionChoice `protobuf_oneof:"action_choice"`
}

func (m *RateLimitValue) Reset()      { *m = RateLimitValue{} }
func (*RateLimitValue) ProtoMessage() {}
func (*RateLimitValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{4}
}
func (m *RateLimitValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RateLimitValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitValue.Merge(m, src)
}
func (m *RateLimitValue) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitValue.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitValue proto.InternalMessageInfo

type isRateLimitValue_ActionChoice interface {
	isRateLimitValue_ActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RateLimitValue_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,201,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}
type RateLimitValue_ActionBlock struct {
	ActionBlock *RateLimitBlockAction `protobuf:"bytes,202,opt,name=action_block,json=actionBlock,proto3,oneof" json:"action_block,omitempty"`
}

func (*RateLimitValue_Disabled) isRateLimitValue_ActionChoice()    {}
func (*RateLimitValue_ActionBlock) isRateLimitValue_ActionChoice() {}

func (m *RateLimitValue) GetActionChoice() isRateLimitValue_ActionChoice {
	if m != nil {
		return m.ActionChoice
	}
	return nil
}

func (m *RateLimitValue) GetUnit() RateLimitPeriodUnit {
	if m != nil {
		return m.Unit
	}
	return SECOND
}

func (m *RateLimitValue) GetTotalNumber() uint32 {
	if m != nil {
		return m.TotalNumber
	}
	return 0
}

func (m *RateLimitValue) GetBurstMultiplier() uint32 {
	if m != nil {
		return m.BurstMultiplier
	}
	return 0
}

func (m *RateLimitValue) GetPeriodMultiplier() uint32 {
	if m != nil {
		return m.PeriodMultiplier
	}
	return 0
}

func (m *RateLimitValue) GetDisabled() *schema.Empty {
	if x, ok := m.GetActionChoice().(*RateLimitValue_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *RateLimitValue) GetActionBlock() *RateLimitBlockAction {
	if x, ok := m.GetActionChoice().(*RateLimitValue_ActionBlock); ok {
		return x.ActionBlock
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RateLimitValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RateLimitValue_Disabled)(nil),
		(*RateLimitValue_ActionBlock)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of rate_limiter in the storage backend.
type GlobalSpecType struct {
	// limits
	//
	// x-displayName: "Rate Limit Values"
	// x-required
	// A list of RateLimitValues that specifies the total number of allowed requests for each specified period.
	Limits []*RateLimitValue `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	// user_identification
	//
	// x-displayName: "User Identification Policy"
	// A reference to user_identification object.
	// The rules in the user_identification object are evaluated to determine the user identifier to be rate limited.
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
	// mode
	//
	// x-displayName: "Rate Limiter Mode"
	// Specifies if the request limits are shared across all references to this rate limiter or unique rate limits are allotted for each reference.
	Mode RateLimiterMode `protobuf:"varint,3,opt,name=mode,proto3,enum=ves.io.schema.rate_limiter.RateLimiterMode" json:"mode,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{5}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetLimits() []*RateLimitValue {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetMode() RateLimiterMode {
	if m != nil {
		return m.Mode
	}
	return RATE_LIMITER_MODE_NOT_SHARED
}

// Create rate limiter
//
// x-displayName: "Create Rate Limiter"
// Create rate_limiter creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Limits             []*RateLimitValue       `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{6}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetLimits() []*RateLimitValue {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

// Replace rate limiter
//
// x-displayName: "Replace Rate Limiter"
// Replace rate_limiter replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Limits             []*RateLimitValue       `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{7}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetLimits() []*RateLimitValue {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

// Get rate limiter
//
// x-displayName: "Get Rate Limiter"
// Get rate_limiter reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Limits             []*RateLimitValue       `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{8}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetLimits() []*RateLimitValue {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.rate_limiter.RateLimiterMode", RateLimiterMode_name, RateLimiterMode_value)
	golang_proto.RegisterEnum("ves.io.schema.rate_limiter.RateLimiterMode", RateLimiterMode_name, RateLimiterMode_value)
	proto.RegisterEnum("ves.io.schema.rate_limiter.RateLimitPeriodUnit", RateLimitPeriodUnit_name, RateLimitPeriodUnit_value)
	golang_proto.RegisterEnum("ves.io.schema.rate_limiter.RateLimitPeriodUnit", RateLimitPeriodUnit_name, RateLimitPeriodUnit_value)
	proto.RegisterType((*InputHours)(nil), "ves.io.schema.rate_limiter.InputHours")
	golang_proto.RegisterType((*InputHours)(nil), "ves.io.schema.rate_limiter.InputHours")
	proto.RegisterType((*InputMinutes)(nil), "ves.io.schema.rate_limiter.InputMinutes")
	golang_proto.RegisterType((*InputMinutes)(nil), "ves.io.schema.rate_limiter.InputMinutes")
	proto.RegisterType((*InputSeconds)(nil), "ves.io.schema.rate_limiter.InputSeconds")
	golang_proto.RegisterType((*InputSeconds)(nil), "ves.io.schema.rate_limiter.InputSeconds")
	proto.RegisterType((*RateLimitBlockAction)(nil), "ves.io.schema.rate_limiter.RateLimitBlockAction")
	golang_proto.RegisterType((*RateLimitBlockAction)(nil), "ves.io.schema.rate_limiter.RateLimitBlockAction")
	proto.RegisterType((*RateLimitValue)(nil), "ves.io.schema.rate_limiter.RateLimitValue")
	golang_proto.RegisterType((*RateLimitValue)(nil), "ves.io.schema.rate_limiter.RateLimitValue")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.rate_limiter.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.rate_limiter.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.rate_limiter.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.rate_limiter.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.rate_limiter.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.rate_limiter.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.rate_limiter.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.rate_limiter.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/rate_limiter/types.proto", fileDescriptor_79d4234d464550a7)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/rate_limiter/types.proto", fileDescriptor_79d4234d464550a7)
}

var fileDescriptor_79d4234d464550a7 = []byte{
	// 1034 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x41, 0x4f, 0x1b, 0x47,
	0x14, 0xde, 0xb7, 0x5e, 0xc0, 0x1a, 0xc0, 0x2c, 0x03, 0xa4, 0x8e, 0x8b, 0xb6, 0xae, 0xa5, 0x46,
	0xc8, 0x35, 0x36, 0x98, 0x5c, 0x82, 0x22, 0x5a, 0x36, 0xb8, 0x31, 0x08, 0xe3, 0x74, 0x81, 0x48,
	0xed, 0x65, 0xb5, 0xb6, 0x07, 0xb3, 0xcd, 0xda, 0xb3, 0xdd, 0x9d, 0xa5, 0xe5, 0x10, 0x29, 0x97,
	0x4a, 0x3d, 0x55, 0x55, 0xd5, 0x7f, 0xd0, 0x4b, 0x55, 0xf5, 0x56, 0xa9, 0x95, 0xba, 0x3d, 0xa0,
	0x9e, 0x80, 0x13, 0x47, 0x94, 0x53, 0x31, 0x97, 0xf4, 0xc6, 0x4f, 0xa8, 0x76, 0x76, 0x6d, 0x19,
	0x42, 0x13, 0x94, 0x5b, 0x6e, 0xb3, 0x7e, 0xdf, 0xf7, 0xbd, 0xf7, 0xbe, 0xf7, 0x3c, 0x1a, 0x74,
	0x67, 0x8f, 0xb8, 0x79, 0x93, 0x16, 0xdc, 0xfa, 0x2e, 0x69, 0x19, 0x05, 0xc7, 0x60, 0x44, 0xb7,
	0xcc, 0x96, 0xc9, 0x88, 0x53, 0x60, 0xfb, 0x36, 0x71, 0xf3, 0xb6, 0x43, 0x19, 0xc5, 0xa9, 0x10,
	0x97, 0x0f, 0x71, 0xf9, 0x7e, 0x5c, 0x6a, 0xb6, 0x69, 0xb2, 0x5d, 0xaf, 0x96, 0xaf, 0xd3, 0x56,
	0xa1, 0x49, 0x9b, 0xb4, 0xc0, 0x29, 0x35, 0x6f, 0x87, 0x7f, 0xf1, 0x0f, 0x7e, 0x0a, 0xa5, 0x52,
	0xef, 0x5e, 0x4e, 0x49, 0x6d, 0x66, 0xd2, 0x76, 0x94, 0x27, 0x75, 0xfb, 0x72, 0xb0, 0xaf, 0x84,
	0xd4, 0xf4, 0xe5, 0xd0, 0x9e, 0x61, 0x99, 0x0d, 0x83, 0x91, 0x28, 0x9a, 0xbe, 0x12, 0x35, 0xc9,
	0x57, 0xfa, 0x25, 0xe9, 0xcc, 0x7d, 0x84, 0x56, 0xdb, 0xb6, 0xc7, 0xca, 0xd4, 0x73, 0x5c, 0x9c,
	0x47, 0xf1, 0x86, 0xe7, 0x18, 0x01, 0x20, 0x09, 0x69, 0x98, 0x19, 0x55, 0xf1, 0x73, 0x1f, 0x60,
	0xfe, 0xdb, 0xbf, 0x20, 0xf6, 0xe7, 0xbf, 0x07, 0x31, 0x29, 0x2b, 0x26, 0xe7, 0xb4, 0x1e, 0x26,
	0xb3, 0x84, 0x46, 0x38, 0xbb, 0x62, 0xb6, 0x3d, 0x46, 0x5e, 0xc9, 0x17, 0xbb, 0xfc, 0xfb, 0x7d,
	0xfc, 0x8f, 0x22, 0xfe, 0x26, 0xa9, 0xd3, 0x76, 0xc3, 0xc5, 0x85, 0x97, 0xf8, 0x13, 0x5d, 0x3e,
	0x04, 0xfc, 0x81, 0x6c, 0x2c, 0xf9, 0xab, 0xd8, 0x27, 0xf0, 0xa3, 0x88, 0x26, 0x35, 0x83, 0x91,
	0xf5, 0xc0, 0x75, 0xd5, 0xa2, 0xf5, 0x27, 0xcb, 0xf5, 0x20, 0x80, 0x57, 0xd0, 0x90, 0x1b, 0x8a,
	0x26, 0xc5, 0x34, 0xcc, 0x0c, 0x17, 0x67, 0xf2, 0xff, 0x3f, 0xac, 0x7c, 0x7f, 0x11, 0x65, 0x41,
	0xeb, 0x52, 0x03, 0x95, 0x56, 0xd8, 0x5a, 0x32, 0x76, 0x43, 0x95, 0xc8, 0x8a, 0x40, 0x25, 0xa2,
	0xe2, 0x25, 0x34, 0xb0, 0x1b, 0xd8, 0x9b, 0x94, 0xb8, 0xc6, 0x9d, 0xd7, 0x6a, 0xf0, 0x61, 0x94,
	0x05, 0x2d, 0xa4, 0xa9, 0x59, 0x34, 0x55, 0x0b, 0x5a, 0xd3, 0xbb, 0x6d, 0xeb, 0xf5, 0x5d, 0x6a,
	0xd6, 0x09, 0x1e, 0x3f, 0xf0, 0x41, 0x3c, 0xf1, 0x01, 0x3a, 0x3e, 0x0c, 0x14, 0x73, 0x0b, 0xb9,
	0xbb, 0x6b, 0x52, 0x1c, 0x64, 0x31, 0xf3, 0x8d, 0x84, 0x12, 0x3d, 0x5b, 0x1e, 0x1b, 0x96, 0x47,
	0x70, 0x15, 0x49, 0x5e, 0xdb, 0x64, 0xdc, 0xd6, 0x44, 0xb1, 0xf0, 0xaa, 0x1a, 0x7a, 0xcc, 0x47,
	0xc4, 0x31, 0x69, 0x63, 0xbb, 0x6d, 0x32, 0x15, 0x3d, 0xf7, 0x61, 0x70, 0xb3, 0xf4, 0xa0, 0xba,
	0xb1, 0xa2, 0x71, 0x21, 0x5c, 0x44, 0x23, 0x8c, 0x32, 0xc3, 0xd2, 0xdb, 0x5e, 0xab, 0x46, 0x1c,
	0x6e, 0xf3, 0xa8, 0x3a, 0xc6, 0xe7, 0xd5, 0x9d, 0xd5, 0xb3, 0x8f, 0xb5, 0x61, 0x0e, 0xda, 0xe0,
	0x18, 0x7c, 0x0f, 0xc9, 0x35, 0xcf, 0x71, 0x99, 0xde, 0xf2, 0x2c, 0x66, 0xda, 0x96, 0x49, 0x1c,
	0x6e, 0xec, 0xa8, 0x9a, 0xe8, 0xf1, 0x82, 0x1d, 0x69, 0x68, 0x63, 0x1c, 0x57, 0xe9, 0xc1, 0xf0,
	0x3d, 0x34, 0x6e, 0xf3, 0x72, 0xfa, 0xb9, 0x12, 0xe7, 0x8e, 0xf4, 0xb8, 0x62, 0x56, 0xd0, 0xe4,
	0x10, 0xd6, 0x47, 0x5d, 0x40, 0xf1, 0x86, 0xe9, 0x1a, 0x35, 0x8b, 0x34, 0x92, 0x47, 0xc0, 0x67,
	0x30, 0x79, 0xa5, 0xff, 0x52, 0xcb, 0x66, 0xfb, 0x65, 0x41, 0xeb, 0x01, 0xf1, 0x63, 0x34, 0x62,
	0xf0, 0x55, 0xd2, 0xb9, 0xf7, 0xc9, 0xe3, 0x90, 0x38, 0x77, 0x23, 0xe3, 0xfa, 0x36, 0xb1, 0x2c,
	0x68, 0xc3, 0xa1, 0x10, 0xff, 0x71, 0xf1, 0x83, 0xbf, 0x7d, 0x78, 0x1f, 0xbd, 0x87, 0x26, 0x35,
	0xf2, 0xa5, 0x47, 0x5c, 0x96, 0x0e, 0x48, 0xe9, 0xf5, 0x50, 0x01, 0x0f, 0x15, 0x73, 0xf3, 0xb9,
	0xbb, 0xb9, 0x05, 0x35, 0x8b, 0x46, 0xa3, 0xf4, 0xd1, 0xac, 0x6f, 0x1f, 0xf8, 0x70, 0x04, 0x27,
	0x3e, 0x1c, 0x06, 0xd3, 0x1e, 0x2a, 0xce, 0xcd, 0xe7, 0x8a, 0x73, 0xc5, 0x0b, 0x1f, 0x60, 0x4d,
	0x8a, 0x4f, 0xca, 0x53, 0x6b, 0x52, 0x7c, 0x4a, 0xbe, 0xb5, 0x26, 0xc5, 0x6f, 0xc9, 0xef, 0xac,
	0x0d, 0xc6, 0x0f, 0x41, 0x3e, 0x82, 0xcc, 0x4f, 0x22, 0x4a, 0x3c, 0xb4, 0x68, 0xcd, 0xb0, 0x36,
	0x6d, 0x52, 0xdf, 0xda, 0xb7, 0x09, 0xde, 0x40, 0x83, 0xbc, 0x5c, 0x37, 0x09, 0xe9, 0xd8, 0xcc,
	0x70, 0x31, 0x7b, 0xa3, 0x86, 0xf8, 0x0e, 0xa9, 0x88, 0xcf, 0xf5, 0x07, 0x10, 0x65, 0xd0, 0x22,
	0x15, 0x4c, 0xd1, 0x84, 0xe7, 0x12, 0x47, 0x37, 0x1b, 0xa4, 0xcd, 0xcc, 0x1d, 0xb3, 0x1e, 0xfe,
	0x7b, 0x45, 0x2e, 0x3e, 0x7d, 0x45, 0xbc, 0x5a, 0xfb, 0x82, 0xd4, 0x99, 0x46, 0x76, 0x82, 0x52,
	0xd4, 0xf4, 0x2f, 0x4f, 0xaf, 0xe3, 0xf6, 0x25, 0xc1, 0x41, 0x78, 0xf5, 0x52, 0x14, 0x97, 0x91,
	0xd4, 0xa2, 0x0d, 0xc2, 0xf7, 0x26, 0x51, 0xfc, 0xf0, 0x46, 0xe5, 0x13, 0xa7, 0x42, 0x1b, 0x44,
	0x1d, 0x3a, 0x7d, 0x0a, 0x2f, 0x7c, 0x00, 0x8d, 0x2b, 0x2c, 0x0e, 0x1e, 0xfb, 0x41, 0x96, 0xcc,
	0xef, 0x80, 0x12, 0x0f, 0x1c, 0x62, 0x30, 0xd2, 0x73, 0x49, 0x7d, 0x73, 0x97, 0x7a, 0xce, 0x54,
	0xde, 0xd8, 0x99, 0xeb, 0xfa, 0x5e, 0x1c, 0x3f, 0x5e, 0xba, 0x32, 0xcb, 0xcc, 0x1f, 0x80, 0xc6,
	0x34, 0x62, 0x5b, 0x46, 0xfd, 0x6d, 0xab, 0xfc, 0x37, 0x40, 0xc3, 0x0f, 0x09, 0x7b, 0xbb, 0xaa,
	0xce, 0x7e, 0x8a, 0xc6, 0xae, 0xac, 0x14, 0x4e, 0xa3, 0x69, 0x6d, 0x79, 0xab, 0xa4, 0xaf, 0xaf,
	0x56, 0x56, 0xb7, 0x4a, 0x9a, 0x5e, 0xa9, 0xae, 0x94, 0xf4, 0x8d, 0xea, 0x96, 0xbe, 0x59, 0x5e,
	0xd6, 0x4a, 0x2b, 0xb2, 0x80, 0xa7, 0x51, 0xf2, 0x65, 0x44, 0x14, 0x85, 0xec, 0x27, 0x68, 0xe2,
	0x9a, 0xeb, 0x16, 0x23, 0x14, 0x5d, 0xb6, 0xb2, 0x10, 0x9c, 0x2b, 0xab, 0x1b, 0xdb, 0x5b, 0x25,
	0x19, 0x70, 0x1c, 0x49, 0xe5, 0xea, 0xb6, 0x26, 0x8b, 0x78, 0x14, 0xc5, 0x56, 0x96, 0x3f, 0x93,
	0x63, 0x29, 0xe9, 0xc0, 0x07, 0x50, 0xbf, 0x83, 0x93, 0x33, 0x45, 0x38, 0x3d, 0x53, 0x84, 0x8b,
	0x33, 0x05, 0x9e, 0x75, 0x14, 0xf8, 0xb9, 0xa3, 0xc0, 0x61, 0x47, 0x81, 0x93, 0x8e, 0x02, 0xa7,
	0x1d, 0x05, 0xfe, 0xe9, 0x28, 0xf0, 0xa2, 0xa3, 0x08, 0x17, 0x1d, 0x05, 0xbe, 0x3f, 0x57, 0x84,
	0x83, 0x73, 0x05, 0x4e, 0xce, 0x15, 0xe1, 0xf4, 0x5c, 0x11, 0x3e, 0x7f, 0xd4, 0xa4, 0xf6, 0x93,
	0x66, 0x7e, 0x8f, 0x5a, 0x8c, 0x38, 0x8e, 0x91, 0xf7, 0xdc, 0x02, 0x3f, 0xec, 0x50, 0xa7, 0x35,
	0x6b, 0x3b, 0x74, 0xcf, 0x6c, 0x10, 0x67, 0xb6, 0x1b, 0x2e, 0xd8, 0xb5, 0x26, 0x2d, 0x90, 0xaf,
	0x59, 0xf4, 0xae, 0xb8, 0xe6, 0x9d, 0x54, 0x1b, 0xe4, 0xef, 0x8b, 0x85, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x35, 0xe1, 0xb6, 0x4e, 0x4c, 0x09, 0x00, 0x00,
}

func (x RateLimiterMode) String() string {
	s, ok := RateLimiterMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RateLimitPeriodUnit) String() string {
	s, ok := RateLimitPeriodUnit_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *InputHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InputHours)
	if !ok {
		that2, ok := that.(InputHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *InputMinutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InputMinutes)
	if !ok {
		that2, ok := that.(InputMinutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *InputSeconds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InputSeconds)
	if !ok {
		that2, ok := that.(InputSeconds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *RateLimitBlockAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitBlockAction)
	if !ok {
		that2, ok := that.(RateLimitBlockAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.BlockDurationChoice == nil {
		if this.BlockDurationChoice != nil {
			return false
		}
	} else if this.BlockDurationChoice == nil {
		return false
	} else if !this.BlockDurationChoice.Equal(that1.BlockDurationChoice) {
		return false
	}
	return true
}
func (this *RateLimitBlockAction_Seconds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitBlockAction_Seconds)
	if !ok {
		that2, ok := that.(RateLimitBlockAction_Seconds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Seconds.Equal(that1.Seconds) {
		return false
	}
	return true
}
func (this *RateLimitBlockAction_Minutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitBlockAction_Minutes)
	if !ok {
		that2, ok := that.(RateLimitBlockAction_Minutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Minutes.Equal(that1.Minutes) {
		return false
	}
	return true
}
func (this *RateLimitBlockAction_Hours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitBlockAction_Hours)
	if !ok {
		that2, ok := that.(RateLimitBlockAction_Hours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hours.Equal(that1.Hours) {
		return false
	}
	return true
}
func (this *RateLimitValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitValue)
	if !ok {
		that2, ok := that.(RateLimitValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if this.TotalNumber != that1.TotalNumber {
		return false
	}
	if this.BurstMultiplier != that1.BurstMultiplier {
		return false
	}
	if this.PeriodMultiplier != that1.PeriodMultiplier {
		return false
	}
	if that1.ActionChoice == nil {
		if this.ActionChoice != nil {
			return false
		}
	} else if this.ActionChoice == nil {
		return false
	} else if !this.ActionChoice.Equal(that1.ActionChoice) {
		return false
	}
	return true
}
func (this *RateLimitValue_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitValue_Disabled)
	if !ok {
		that2, ok := that.(RateLimitValue_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *RateLimitValue_ActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitValue_ActionBlock)
	if !ok {
		that2, ok := that.(RateLimitValue_ActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionBlock.Equal(that1.ActionBlock) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Limits) != len(that1.Limits) {
		return false
	}
	for i := range this.Limits {
		if !this.Limits[i].Equal(that1.Limits[i]) {
			return false
		}
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Limits) != len(that1.Limits) {
		return false
	}
	for i := range this.Limits {
		if !this.Limits[i].Equal(that1.Limits[i]) {
			return false
		}
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Limits) != len(that1.Limits) {
		return false
	}
	for i := range this.Limits {
		if !this.Limits[i].Equal(that1.Limits[i]) {
			return false
		}
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Limits) != len(that1.Limits) {
		return false
	}
	for i := range this.Limits {
		if !this.Limits[i].Equal(that1.Limits[i]) {
			return false
		}
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	return true
}
func (this *InputHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rate_limiter.InputHours{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InputMinutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rate_limiter.InputMinutes{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InputSeconds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rate_limiter.InputSeconds{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitBlockAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rate_limiter.RateLimitBlockAction{")
	if this.BlockDurationChoice != nil {
		s = append(s, "BlockDurationChoice: "+fmt.Sprintf("%#v", this.BlockDurationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitBlockAction_Seconds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rate_limiter.RateLimitBlockAction_Seconds{` +
		`Seconds:` + fmt.Sprintf("%#v", this.Seconds) + `}`}, ", ")
	return s
}
func (this *RateLimitBlockAction_Minutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rate_limiter.RateLimitBlockAction_Minutes{` +
		`Minutes:` + fmt.Sprintf("%#v", this.Minutes) + `}`}, ", ")
	return s
}
func (this *RateLimitBlockAction_Hours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rate_limiter.RateLimitBlockAction_Hours{` +
		`Hours:` + fmt.Sprintf("%#v", this.Hours) + `}`}, ", ")
	return s
}
func (this *RateLimitValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&rate_limiter.RateLimitValue{")
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	s = append(s, "TotalNumber: "+fmt.Sprintf("%#v", this.TotalNumber)+",\n")
	s = append(s, "BurstMultiplier: "+fmt.Sprintf("%#v", this.BurstMultiplier)+",\n")
	s = append(s, "PeriodMultiplier: "+fmt.Sprintf("%#v", this.PeriodMultiplier)+",\n")
	if this.ActionChoice != nil {
		s = append(s, "ActionChoice: "+fmt.Sprintf("%#v", this.ActionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitValue_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rate_limiter.RateLimitValue_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *RateLimitValue_ActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rate_limiter.RateLimitValue_ActionBlock{` +
		`ActionBlock:` + fmt.Sprintf("%#v", this.ActionBlock) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rate_limiter.GlobalSpecType{")
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rate_limiter.CreateSpecType{")
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rate_limiter.ReplaceSpecType{")
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rate_limiter.GetSpecType{")
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InputHours) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InputMinutes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputMinutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputMinutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InputSeconds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputSeconds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputSeconds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitBlockAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitBlockAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitBlockAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockDurationChoice != nil {
		{
			size := m.BlockDurationChoice.Size()
			i -= size
			if _, err := m.BlockDurationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitBlockAction_Seconds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitBlockAction_Seconds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Seconds != nil {
		{
			size, err := m.Seconds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitBlockAction_Minutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitBlockAction_Minutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Minutes != nil {
		{
			size, err := m.Minutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitBlockAction_Hours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitBlockAction_Hours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hours != nil {
		{
			size, err := m.Hours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionChoice != nil {
		{
			size := m.ActionChoice.Size()
			i -= size
			if _, err := m.ActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PeriodMultiplier != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PeriodMultiplier))
		i--
		dAtA[i] = 0x20
	}
	if m.BurstMultiplier != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BurstMultiplier))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Unit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Unit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitValue_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitValue_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitValue_ActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitValue_ActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionBlock != nil {
		{
			size, err := m.ActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InputHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovTypes(uint64(m.Duration))
	}
	return n
}

func (m *InputMinutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovTypes(uint64(m.Duration))
	}
	return n
}

func (m *InputSeconds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovTypes(uint64(m.Duration))
	}
	return n
}

func (m *RateLimitBlockAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockDurationChoice != nil {
		n += m.BlockDurationChoice.Size()
	}
	return n
}

func (m *RateLimitBlockAction_Seconds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seconds != nil {
		l = m.Seconds.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitBlockAction_Minutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Minutes != nil {
		l = m.Minutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitBlockAction_Hours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hours != nil {
		l = m.Hours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unit != 0 {
		n += 1 + sovTypes(uint64(m.Unit))
	}
	if m.TotalNumber != 0 {
		n += 1 + sovTypes(uint64(m.TotalNumber))
	}
	if m.BurstMultiplier != 0 {
		n += 1 + sovTypes(uint64(m.BurstMultiplier))
	}
	if m.PeriodMultiplier != 0 {
		n += 1 + sovTypes(uint64(m.PeriodMultiplier))
	}
	if m.ActionChoice != nil {
		n += m.ActionChoice.Size()
	}
	return n
}

func (m *RateLimitValue_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitValue_ActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionBlock != nil {
		l = m.ActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Mode != 0 {
		n += 1 + sovTypes(uint64(m.Mode))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InputHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InputHours{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InputMinutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InputMinutes{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InputSeconds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InputSeconds{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitBlockAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitBlockAction{`,
		`BlockDurationChoice:` + fmt.Sprintf("%v", this.BlockDurationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitBlockAction_Seconds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitBlockAction_Seconds{`,
		`Seconds:` + strings.Replace(fmt.Sprintf("%v", this.Seconds), "InputSeconds", "InputSeconds", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitBlockAction_Minutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitBlockAction_Minutes{`,
		`Minutes:` + strings.Replace(fmt.Sprintf("%v", this.Minutes), "InputMinutes", "InputMinutes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitBlockAction_Hours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitBlockAction_Hours{`,
		`Hours:` + strings.Replace(fmt.Sprintf("%v", this.Hours), "InputHours", "InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitValue{`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`TotalNumber:` + fmt.Sprintf("%v", this.TotalNumber) + `,`,
		`BurstMultiplier:` + fmt.Sprintf("%v", this.BurstMultiplier) + `,`,
		`PeriodMultiplier:` + fmt.Sprintf("%v", this.PeriodMultiplier) + `,`,
		`ActionChoice:` + fmt.Sprintf("%v", this.ActionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitValue_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitValue_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitValue_ActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitValue_ActionBlock{`,
		`ActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.ActionBlock), "RateLimitBlockAction", "RateLimitBlockAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]*RateLimitValue{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(f.String(), "RateLimitValue", "RateLimitValue", 1) + ","
	}
	repeatedStringForLimits += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]*RateLimitValue{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(f.String(), "RateLimitValue", "RateLimitValue", 1) + ","
	}
	repeatedStringForLimits += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]*RateLimitValue{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(f.String(), "RateLimitValue", "RateLimitValue", 1) + ","
	}
	repeatedStringForLimits += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]*RateLimitValue{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(f.String(), "RateLimitValue", "RateLimitValue", 1) + ","
	}
	repeatedStringForLimits += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InputHours) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputHours: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputHours: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputMinutes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputMinutes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputMinutes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputSeconds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputSeconds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputSeconds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitBlockAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitBlockAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitBlockAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InputSeconds{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockDurationChoice = &RateLimitBlockAction_Seconds{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InputMinutes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockDurationChoice = &RateLimitBlockAction_Minutes{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockDurationChoice = &RateLimitBlockAction_Hours{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= RateLimitPeriodUnit(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNumber", wireType)
			}
			m.TotalNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstMultiplier", wireType)
			}
			m.BurstMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstMultiplier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodMultiplier", wireType)
			}
			m.PeriodMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodMultiplier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &RateLimitValue_Disabled{v}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitBlockAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &RateLimitValue_ActionBlock{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, &RateLimitValue{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= RateLimiterMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, &RateLimitValue{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, &RateLimitValue{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, &RateLimitValue{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

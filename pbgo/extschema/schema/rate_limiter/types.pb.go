// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/rate_limiter/types.proto

package rate_limiter

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RateLimiterMode
//
// x-displayName: "Rate Limiter Mode"
type RateLimiterMode int32

const (
	// Not Shared
	//
	// x-displayName: "Not Shared"
	// Allot unique pool of request limits for each reference to a rate_limiter object.
	RATE_LIMITER_MODE_NOT_SHARED RateLimiterMode = 0
	// Shared
	//
	// x-displayName: "Shared"
	// Use a common pool of request limits for all references to a rate_limiter object.
	RATE_LIMITER_MODE_SHARED RateLimiterMode = 1
)

var RateLimiterMode_name = map[int32]string{
	0: "RATE_LIMITER_MODE_NOT_SHARED",
	1: "RATE_LIMITER_MODE_SHARED",
}

var RateLimiterMode_value = map[string]int32{
	"RATE_LIMITER_MODE_NOT_SHARED": 0,
	"RATE_LIMITER_MODE_SHARED":     1,
}

func (RateLimiterMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{0}
}

// RateLimitPeriodUnit
//
// x-displayName: "Rate Limit Period Unit"
// Unit for the period per which the rate limit is applied.
type RateLimitPeriodUnit int32

const (
	// Second
	//
	// x-displayName: "Second"
	// Rate limit period is 1 second
	SECOND RateLimitPeriodUnit = 0
	// Minute
	//
	// x-displayName: "Minute"
	// Rate limit period is 1 minute
	MINUTE RateLimitPeriodUnit = 1
	// Hour
	//
	// x-displayName: "Hour"
	// Rate limit period is 1 hour
	HOUR RateLimitPeriodUnit = 2
	// Day
	//
	// x-displayName: "Day"
	// Rate limit period is 1 day
	DAY RateLimitPeriodUnit = 3
)

var RateLimitPeriodUnit_name = map[int32]string{
	0: "SECOND",
	1: "MINUTE",
	2: "HOUR",
	3: "DAY",
}

var RateLimitPeriodUnit_value = map[string]int32{
	"SECOND": 0,
	"MINUTE": 1,
	"HOUR":   2,
	"DAY":    3,
}

func (RateLimitPeriodUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{1}
}

// RateLimitValue
//
// x-displayName: "Rate Limit Value"
// A tuple consisting of a rate limit period unit and the total number of allowed requests for that period.
type RateLimitValue struct {
	// unit
	//
	// x-displayName: "Per Period"
	// x-required
	// Unit for the period per which the rate limit is applied.
	Unit RateLimitPeriodUnit `protobuf:"varint,1,opt,name=unit,proto3,enum=ves.io.schema.rate_limiter.RateLimitPeriodUnit" json:"unit,omitempty"`
	// total_number
	//
	// x-displayName: "Number"
	// x-required
	// The total number of allowed requests for 1 unit (e.g. SECOND/MINUTE/HOUR etc.) of the specified period.
	TotalNumber uint32 `protobuf:"varint,2,opt,name=total_number,json=totalNumber,proto3" json:"total_number,omitempty"`
	// burst_multiplier
	//
	// x-displayName: "Burst Multiplier"
	// The maximum burst of requests to accommodate, expressed as a multiple of the rate.
	BurstMultiplier uint32 `protobuf:"varint,3,opt,name=burst_multiplier,json=burstMultiplier,proto3" json:"burst_multiplier,omitempty"`
}

func (m *RateLimitValue) Reset()      { *m = RateLimitValue{} }
func (*RateLimitValue) ProtoMessage() {}
func (*RateLimitValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{0}
}
func (m *RateLimitValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RateLimitValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitValue.Merge(m, src)
}
func (m *RateLimitValue) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitValue.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitValue proto.InternalMessageInfo

func (m *RateLimitValue) GetUnit() RateLimitPeriodUnit {
	if m != nil {
		return m.Unit
	}
	return SECOND
}

func (m *RateLimitValue) GetTotalNumber() uint32 {
	if m != nil {
		return m.TotalNumber
	}
	return 0
}

func (m *RateLimitValue) GetBurstMultiplier() uint32 {
	if m != nil {
		return m.BurstMultiplier
	}
	return 0
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of rate_limiter in the storage backend.
type GlobalSpecType struct {
	// limits
	//
	// x-displayName: "Rate Limit Values"
	// x-required
	// A list of RateLimitValues that specifies the total number of allowed requests for each specified period.
	Limits []*RateLimitValue `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	// user_identification
	//
	// x-displayName: "User Identification Policy"
	// A reference to user_identification object.
	// The rules in the user_identification object are evaluated to determine the user identifier to be rate limited.
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
	// mode
	//
	// x-displayName: "Rate Limiter Mode"
	// Specifies if the request limits are shared across all references to this rate limiter or unique rate limits are allotted for each reference.
	Mode RateLimiterMode `protobuf:"varint,3,opt,name=mode,proto3,enum=ves.io.schema.rate_limiter.RateLimiterMode" json:"mode,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetLimits() []*RateLimitValue {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetMode() RateLimiterMode {
	if m != nil {
		return m.Mode
	}
	return RATE_LIMITER_MODE_NOT_SHARED
}

// Create rate limiter
//
// x-displayName: "Create Rate Limiter"
// Create rate_limiter creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Limits             []*RateLimitValue       `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetLimits() []*RateLimitValue {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

// Replace rate limiter
//
// x-displayName: "Replace Rate Limiter"
// Replace rate_limiter replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Limits             []*RateLimitValue       `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetLimits() []*RateLimitValue {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

// Get rate limiter
//
// x-displayName: "Get Rate Limiter"
// Get rate_limiter reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Limits             []*RateLimitValue       `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d4234d464550a7, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetLimits() []*RateLimitValue {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.rate_limiter.RateLimiterMode", RateLimiterMode_name, RateLimiterMode_value)
	golang_proto.RegisterEnum("ves.io.schema.rate_limiter.RateLimiterMode", RateLimiterMode_name, RateLimiterMode_value)
	proto.RegisterEnum("ves.io.schema.rate_limiter.RateLimitPeriodUnit", RateLimitPeriodUnit_name, RateLimitPeriodUnit_value)
	golang_proto.RegisterEnum("ves.io.schema.rate_limiter.RateLimitPeriodUnit", RateLimitPeriodUnit_name, RateLimitPeriodUnit_value)
	proto.RegisterType((*RateLimitValue)(nil), "ves.io.schema.rate_limiter.RateLimitValue")
	golang_proto.RegisterType((*RateLimitValue)(nil), "ves.io.schema.rate_limiter.RateLimitValue")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.rate_limiter.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.rate_limiter.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.rate_limiter.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.rate_limiter.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.rate_limiter.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.rate_limiter.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.rate_limiter.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.rate_limiter.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/rate_limiter/types.proto", fileDescriptor_79d4234d464550a7)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/rate_limiter/types.proto", fileDescriptor_79d4234d464550a7)
}

var fileDescriptor_79d4234d464550a7 = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x31, 0x6f, 0x1a, 0x49,
	0x14, 0xde, 0x07, 0x1c, 0x27, 0x8d, 0xcf, 0xc0, 0xad, 0x9b, 0x3d, 0x0e, 0x8d, 0x10, 0xc5, 0xc9,
	0xe2, 0xce, 0xbb, 0x32, 0x57, 0x9d, 0x0b, 0xeb, 0x8c, 0x41, 0x36, 0x92, 0x01, 0xdf, 0x1a, 0x9f,
	0x94, 0x34, 0xab, 0x5d, 0x18, 0xf0, 0x24, 0x0b, 0xb3, 0x1a, 0x66, 0x49, 0x5c, 0x58, 0xf2, 0x2f,
	0x88, 0xa2, 0xb4, 0xf9, 0x03, 0x51, 0xda, 0x48, 0x89, 0x14, 0x1a, 0x97, 0x51, 0x2a, 0x97, 0xc8,
	0x55, 0xbc, 0x34, 0x4e, 0x67, 0xe5, 0x17, 0x44, 0x0c, 0x04, 0x19, 0x42, 0x24, 0xcb, 0x9d, 0xbb,
	0x79, 0xfa, 0xbe, 0xf7, 0xbd, 0xef, 0x7d, 0xa0, 0xb7, 0xe8, 0x8f, 0x1e, 0xe9, 0xea, 0x94, 0x19,
	0xdd, 0xfa, 0x11, 0x69, 0xdb, 0x06, 0xb7, 0x05, 0xb1, 0x5c, 0xda, 0xa6, 0x82, 0x70, 0x43, 0x1c,
	0x7b, 0xa4, 0xab, 0x7b, 0x9c, 0x09, 0xa6, 0x26, 0xc7, 0x3c, 0x7d, 0xcc, 0xd3, 0x6f, 0xf2, 0x92,
	0x6b, 0x2d, 0x2a, 0x8e, 0x7c, 0x47, 0xaf, 0xb3, 0xb6, 0xd1, 0x62, 0x2d, 0x66, 0xc8, 0x16, 0xc7,
	0x6f, 0xca, 0x4a, 0x16, 0xf2, 0x35, 0x96, 0x4a, 0xfe, 0x3e, 0x3b, 0x92, 0x79, 0x82, 0xb2, 0xce,
	0x64, 0x4e, 0xf2, 0xb7, 0x59, 0xf0, 0x86, 0x85, 0x64, 0x6a, 0x16, 0xea, 0xd9, 0x2e, 0x6d, 0xd8,
	0x82, 0x4c, 0xd0, 0xf4, 0x1c, 0x4a, 0xc9, 0x13, 0x6b, 0x46, 0x3a, 0x33, 0x00, 0x14, 0x33, 0x6d,
	0x41, 0xf6, 0x46, 0xb6, 0xff, 0xb7, 0x5d, 0x9f, 0xa8, 0x55, 0x14, 0xf1, 0x3b, 0x54, 0x68, 0x90,
	0x86, 0xd5, 0x58, 0xce, 0xd0, 0x7f, 0xbc, 0xa4, 0x3e, 0xed, 0xdc, 0x27, 0x9c, 0xb2, 0xc6, 0x61,
	0x87, 0x8a, 0x3c, 0xba, 0xe8, 0x43, 0xf4, 0xa0, 0xb8, 0x5d, 0xad, 0x14, 0x4c, 0x29, 0xa4, 0xe6,
	0xd0, 0x2f, 0x82, 0x09, 0xdb, 0xb5, 0x3a, 0x7e, 0xdb, 0x21, 0x5c, 0x0b, 0xa5, 0x61, 0x75, 0x39,
	0x1f, 0xbf, 0xe8, 0x03, 0xac, 0xbf, 0xff, 0x7c, 0x16, 0xfe, 0x29, 0x1b, 0xd6, 0x4e, 0xff, 0x35,
	0x97, 0x24, 0xa9, 0x22, 0x39, 0xea, 0x3f, 0x28, 0xe1, 0xf8, 0xbc, 0x2b, 0xac, 0xb6, 0xef, 0x0a,
	0xea, 0xb9, 0x94, 0x70, 0x2d, 0x2c, 0xfb, 0x62, 0xd3, 0xbe, 0x48, 0x36, 0xa4, 0x35, 0xcc, 0xb8,
	0xe4, 0x95, 0xa7, 0xb4, 0x8d, 0xe8, 0x97, 0xcd, 0x70, 0xee, 0xaf, 0xf5, 0xcc, 0xcb, 0x10, 0x8a,
	0xed, 0xb8, 0xcc, 0xb1, 0xdd, 0x03, 0x8f, 0xd4, 0x6b, 0xc7, 0x1e, 0x51, 0x2b, 0x28, 0x2a, 0xad,
	0x77, 0x35, 0x48, 0x87, 0x57, 0x97, 0x72, 0xd9, 0x5b, 0x2d, 0x27, 0x63, 0xc9, 0x23, 0x69, 0xf5,
	0x05, 0x84, 0x12, 0x60, 0x4e, 0x54, 0x54, 0x86, 0x56, 0xfc, 0x2e, 0xe1, 0x16, 0x6d, 0x90, 0x8e,
	0xa0, 0x4d, 0x5a, 0xb7, 0x47, 0xd9, 0x6a, 0x21, 0x29, 0x9e, 0x9a, 0x13, 0xaf, 0x3a, 0x8f, 0x48,
	0x5d, 0x98, 0xa4, 0x39, 0xb2, 0x92, 0x4f, 0xbf, 0x3e, 0x59, 0xd4, 0x7b, 0x63, 0x88, 0x3a, 0x82,
	0x4b, 0x33, 0xa8, 0xba, 0x8b, 0x22, 0x6d, 0xd6, 0x20, 0x32, 0x8a, 0x58, 0xee, 0xcf, 0x5b, 0xd9,
	0x27, 0xbc, 0xcc, 0x1a, 0x24, 0xff, 0xf3, 0xe0, 0x04, 0xae, 0xfa, 0x00, 0xa6, 0x54, 0xc8, 0xbc,
	0x05, 0x14, 0xdb, 0xe6, 0xc4, 0x16, 0x64, 0x9a, 0x4e, 0xfe, 0xee, 0xe9, 0x4c, 0x13, 0x29, 0xdf,
	0x39, 0x91, 0x45, 0xfb, 0x6e, 0xfc, 0xfa, 0x71, 0x73, 0xee, 0x37, 0xcc, 0xbc, 0x03, 0x14, 0x37,
	0x89, 0xe7, 0xda, 0xf5, 0xfb, 0xe6, 0xfc, 0x0d, 0xa0, 0xa5, 0x1d, 0x22, 0xee, 0x97, 0xeb, 0xec,
	0x7f, 0x28, 0x3e, 0xf7, 0x57, 0x52, 0xd3, 0x28, 0x65, 0x6e, 0xd5, 0x8a, 0xd6, 0x5e, 0xa9, 0x5c,
	0xaa, 0x15, 0x4d, 0xab, 0x5c, 0x2d, 0x14, 0xad, 0x4a, 0xb5, 0x66, 0x1d, 0xec, 0x6e, 0x99, 0xc5,
	0x42, 0x42, 0x51, 0x53, 0x48, 0xfb, 0x9e, 0x31, 0x41, 0x21, 0xbb, 0x87, 0x56, 0x16, 0x5c, 0x0e,
	0x15, 0xa1, 0xc9, 0xdd, 0x48, 0x28, 0xa3, 0x77, 0xb9, 0x54, 0x39, 0xac, 0x15, 0x13, 0xa0, 0xc6,
	0x50, 0x64, 0xb7, 0x7a, 0x68, 0x26, 0x42, 0xc9, 0xc8, 0x59, 0x1f, 0x40, 0x5d, 0x46, 0xe1, 0xc2,
	0xd6, 0x83, 0x44, 0x78, 0x5c, 0xe6, 0x9f, 0xc1, 0xf9, 0x25, 0x56, 0x06, 0x97, 0x58, 0xb9, 0xbe,
	0xc4, 0x70, 0x1a, 0x60, 0x78, 0x15, 0x60, 0xf8, 0x10, 0x60, 0x38, 0x0f, 0x30, 0x0c, 0x02, 0x0c,
	0x9f, 0x02, 0x0c, 0x57, 0x01, 0x56, 0xae, 0x03, 0x0c, 0xcf, 0x87, 0x58, 0x39, 0x1b, 0x62, 0x38,
	0x1f, 0x62, 0x65, 0x30, 0xc4, 0xca, 0xc3, 0xfd, 0x16, 0xf3, 0x1e, 0xb7, 0xf4, 0x1e, 0x73, 0x05,
	0xe1, 0xdc, 0xd6, 0xfd, 0xae, 0x21, 0x1f, 0x4d, 0xc6, 0xdb, 0x6b, 0x1e, 0x67, 0x3d, 0xda, 0x20,
	0x7c, 0xed, 0x1b, 0x6c, 0x78, 0x4e, 0x8b, 0x19, 0xe4, 0xa9, 0x98, 0x9c, 0xd4, 0x05, 0x9f, 0x08,
	0x27, 0x2a, 0x4f, 0xeb, 0xdf, 0x5f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xc9, 0x1b, 0x55, 0x47,
	0x06, 0x00, 0x00,
}

func (x RateLimiterMode) String() string {
	s, ok := RateLimiterMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RateLimitPeriodUnit) String() string {
	s, ok := RateLimitPeriodUnit_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RateLimitValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitValue)
	if !ok {
		that2, ok := that.(RateLimitValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if this.TotalNumber != that1.TotalNumber {
		return false
	}
	if this.BurstMultiplier != that1.BurstMultiplier {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Limits) != len(that1.Limits) {
		return false
	}
	for i := range this.Limits {
		if !this.Limits[i].Equal(that1.Limits[i]) {
			return false
		}
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Limits) != len(that1.Limits) {
		return false
	}
	for i := range this.Limits {
		if !this.Limits[i].Equal(that1.Limits[i]) {
			return false
		}
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Limits) != len(that1.Limits) {
		return false
	}
	for i := range this.Limits {
		if !this.Limits[i].Equal(that1.Limits[i]) {
			return false
		}
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Limits) != len(that1.Limits) {
		return false
	}
	for i := range this.Limits {
		if !this.Limits[i].Equal(that1.Limits[i]) {
			return false
		}
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	return true
}
func (this *RateLimitValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rate_limiter.RateLimitValue{")
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	s = append(s, "TotalNumber: "+fmt.Sprintf("%#v", this.TotalNumber)+",\n")
	s = append(s, "BurstMultiplier: "+fmt.Sprintf("%#v", this.BurstMultiplier)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rate_limiter.GlobalSpecType{")
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rate_limiter.CreateSpecType{")
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rate_limiter.ReplaceSpecType{")
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rate_limiter.GetSpecType{")
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RateLimitValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurstMultiplier != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BurstMultiplier))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Unit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Unit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Limits) > 0 {
		for iNdEx := len(m.Limits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RateLimitValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unit != 0 {
		n += 1 + sovTypes(uint64(m.Unit))
	}
	if m.TotalNumber != 0 {
		n += 1 + sovTypes(uint64(m.TotalNumber))
	}
	if m.BurstMultiplier != 0 {
		n += 1 + sovTypes(uint64(m.BurstMultiplier))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Mode != 0 {
		n += 1 + sovTypes(uint64(m.Mode))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limits) > 0 {
		for _, e := range m.Limits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RateLimitValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitValue{`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`TotalNumber:` + fmt.Sprintf("%v", this.TotalNumber) + `,`,
		`BurstMultiplier:` + fmt.Sprintf("%v", this.BurstMultiplier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]*RateLimitValue{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(f.String(), "RateLimitValue", "RateLimitValue", 1) + ","
	}
	repeatedStringForLimits += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]*RateLimitValue{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(f.String(), "RateLimitValue", "RateLimitValue", 1) + ","
	}
	repeatedStringForLimits += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]*RateLimitValue{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(f.String(), "RateLimitValue", "RateLimitValue", 1) + ","
	}
	repeatedStringForLimits += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLimits := "[]*RateLimitValue{"
	for _, f := range this.Limits {
		repeatedStringForLimits += strings.Replace(f.String(), "RateLimitValue", "RateLimitValue", 1) + ","
	}
	repeatedStringForLimits += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Limits:` + repeatedStringForLimits + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RateLimitValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= RateLimitPeriodUnit(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNumber", wireType)
			}
			m.TotalNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstMultiplier", wireType)
			}
			m.BurstMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstMultiplier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, &RateLimitValue{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= RateLimiterMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, &RateLimitValue{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, &RateLimitValue{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limits = append(m.Limits, &RateLimitValue{})
			if err := m.Limits[len(m.Limits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

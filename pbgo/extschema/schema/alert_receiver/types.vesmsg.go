// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package alert_receiver

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AuthToken) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AuthToken) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AuthToken) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AuthToken.token")
	}

	return nil
}

func (m *AuthToken) DeepCopy() *AuthToken {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AuthToken{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AuthToken) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AuthToken) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AuthTokenValidator().Validate(ctx, m, opts...)
}

type ValidateAuthToken struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAuthToken) TokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for token")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAuthToken) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AuthToken)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AuthToken got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["token"]; exists {

		vOpts := append(opts, db.WithValidateField("token"))
		if err := fv(ctx, m.GetToken(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAuthTokenValidator = func() *ValidateAuthToken {
	v := &ValidateAuthToken{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhToken := v.TokenValidationRuleHandler
	rulesToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhToken(rulesToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AuthToken.token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["token"] = vFn

	return v
}()

func AuthTokenValidator() db.Validator {
	return DefaultAuthTokenValidator
}

// augmented methods on protoc/std generated struct

func (m *CACertificateObj) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CACertificateObj) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CACertificateObj) DeepCopy() *CACertificateObj {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CACertificateObj{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CACertificateObj) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CACertificateObj) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CACertificateObjValidator().Validate(ctx, m, opts...)
}

func (m *CACertificateObj) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTrustedCaDRefInfo()

}

func (m *CACertificateObj) GetTrustedCaDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetTrustedCa()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("CACertificateObj.trusted_ca[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "trusted_ca_list.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "trusted_ca",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetTrustedCaDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CACertificateObj) GetTrustedCaDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "trusted_ca_list.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: trusted_ca_list")
	}
	for _, ref := range m.GetTrustedCa() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCACertificateObj struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCACertificateObj) TrustedCaValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_ca")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_ca")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_ca")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_ca")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCACertificateObj) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CACertificateObj)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CACertificateObj got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["trusted_ca"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_ca"))
		if err := fv(ctx, m.GetTrustedCa(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCACertificateObjValidator = func() *ValidateCACertificateObj {
	v := &ValidateCACertificateObj{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTrustedCa := v.TrustedCaValidationRuleHandler
	rulesTrustedCa := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhTrustedCa(rulesTrustedCa)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CACertificateObj.trusted_ca: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_ca"] = vFn

	return v
}()

func CACertificateObjValidator() db.Validator {
	return DefaultCACertificateObjValidator
}

// augmented methods on protoc/std generated struct

func (m *ClientCertificateObj) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ClientCertificateObj) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ClientCertificateObj) DeepCopy() *ClientCertificateObj {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ClientCertificateObj{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ClientCertificateObj) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ClientCertificateObj) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ClientCertificateObjValidator().Validate(ctx, m, opts...)
}

func (m *ClientCertificateObj) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUseTlsObjDRefInfo()

}

func (m *ClientCertificateObj) GetUseTlsObjDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetUseTlsObj()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("ClientCertificateObj.use_tls_obj[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "certificate.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "use_tls_obj",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetUseTlsObjDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ClientCertificateObj) GetUseTlsObjDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "certificate.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: certificate")
	}
	for _, ref := range m.GetUseTlsObj() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateClientCertificateObj struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateClientCertificateObj) UseTlsObjValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for use_tls_obj")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for use_tls_obj")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated use_tls_obj")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items use_tls_obj")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateClientCertificateObj) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ClientCertificateObj)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ClientCertificateObj got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["use_tls_obj"]; exists {
		vOpts := append(opts, db.WithValidateField("use_tls_obj"))
		if err := fv(ctx, m.GetUseTlsObj(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultClientCertificateObjValidator = func() *ValidateClientCertificateObj {
	v := &ValidateClientCertificateObj{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUseTlsObj := v.UseTlsObjValidationRuleHandler
	rulesUseTlsObj := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhUseTlsObj(rulesUseTlsObj)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ClientCertificateObj.use_tls_obj: %s", err)
		panic(errMsg)
	}
	v.FldValidators["use_tls_obj"] = vFn

	return v
}()

func ClientCertificateObjValidator() db.Validator {
	return DefaultClientCertificateObjValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSlack().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.slack")
	}

	if err := m.GetPagerduty().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.pagerduty")
	}

	if err := m.GetOpsgenie().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.opsgenie")
	}

	if err := m.GetWebhook().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.webhook")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *CreateSpecType_Slack:

		return nil, nil

	case *CreateSpecType_Pagerduty:

		return nil, nil

	case *CreateSpecType_Opsgenie:

		return nil, nil

	case *CreateSpecType_Email:

		return nil, nil

	case *CreateSpecType_Sms:

		return nil, nil

	case *CreateSpecType_Webhook:

		drInfos, err := m.GetWebhook().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetWebhook().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "webhook." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *CreateSpecType_Slack:
		if fv, exists := v.FldValidators["receiver.slack"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Slack).Slack
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("slack"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Pagerduty:
		if fv, exists := v.FldValidators["receiver.pagerduty"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Pagerduty).Pagerduty
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("pagerduty"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Opsgenie:
		if fv, exists := v.FldValidators["receiver.opsgenie"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Opsgenie).Opsgenie
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("opsgenie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Email:
		if fv, exists := v.FldValidators["receiver.email"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Email).Email
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("email"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Sms:
		if fv, exists := v.FldValidators["receiver.sms"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Sms).Sms
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Webhook:
		if fv, exists := v.FldValidators["receiver.webhook"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Webhook).Webhook
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("webhook"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["receiver.slack"] = SlackConfigValidator().Validate
	v.FldValidators["receiver.pagerduty"] = PagerDutyConfigValidator().Validate
	v.FldValidators["receiver.opsgenie"] = OpsGenieConfigValidator().Validate
	v.FldValidators["receiver.email"] = EmailConfigValidator().Validate
	v.FldValidators["receiver.sms"] = SMSConfigValidator().Validate
	v.FldValidators["receiver.webhook"] = WebhookConfigValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *EmailConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EmailConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EmailConfig) DeepCopy() *EmailConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EmailConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EmailConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EmailConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EmailConfigValidator().Validate(ctx, m, opts...)
}

type ValidateEmailConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEmailConfig) EmailValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for email")
	}

	return validatorFn, nil
}

func (v *ValidateEmailConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EmailConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EmailConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["email"]; exists {

		vOpts := append(opts, db.WithValidateField("email"))
		if err := fv(ctx, m.GetEmail(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEmailConfigValidator = func() *ValidateEmailConfig {
	v := &ValidateEmailConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEmail := v.EmailValidationRuleHandler
	rulesEmail := map[string]string{
		"ves.io.schema.rules.string.email": "true",
	}
	vFn, err = vrhEmail(rulesEmail)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EmailConfig.email: %s", err)
		panic(errMsg)
	}
	v.FldValidators["email"] = vFn

	return v
}()

func EmailConfigValidator() db.Validator {
	return DefaultEmailConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSlack().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.slack")
	}

	if err := m.GetPagerduty().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.pagerduty")
	}

	if err := m.GetOpsgenie().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.opsgenie")
	}

	if err := m.GetWebhook().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.webhook")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *GetSpecType_Slack:

		return nil, nil

	case *GetSpecType_Pagerduty:

		return nil, nil

	case *GetSpecType_Opsgenie:

		return nil, nil

	case *GetSpecType_Email:

		return nil, nil

	case *GetSpecType_Sms:

		return nil, nil

	case *GetSpecType_Webhook:

		drInfos, err := m.GetWebhook().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetWebhook().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "webhook." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *GetSpecType_Slack:
		if fv, exists := v.FldValidators["receiver.slack"]; exists {
			val := m.GetReceiver().(*GetSpecType_Slack).Slack
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("slack"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Pagerduty:
		if fv, exists := v.FldValidators["receiver.pagerduty"]; exists {
			val := m.GetReceiver().(*GetSpecType_Pagerduty).Pagerduty
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("pagerduty"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Opsgenie:
		if fv, exists := v.FldValidators["receiver.opsgenie"]; exists {
			val := m.GetReceiver().(*GetSpecType_Opsgenie).Opsgenie
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("opsgenie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Email:
		if fv, exists := v.FldValidators["receiver.email"]; exists {
			val := m.GetReceiver().(*GetSpecType_Email).Email
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("email"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Sms:
		if fv, exists := v.FldValidators["receiver.sms"]; exists {
			val := m.GetReceiver().(*GetSpecType_Sms).Sms
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Webhook:
		if fv, exists := v.FldValidators["receiver.webhook"]; exists {
			val := m.GetReceiver().(*GetSpecType_Webhook).Webhook
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("webhook"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["receiver.slack"] = SlackConfigValidator().Validate
	v.FldValidators["receiver.pagerduty"] = PagerDutyConfigValidator().Validate
	v.FldValidators["receiver.opsgenie"] = OpsGenieConfigValidator().Validate
	v.FldValidators["receiver.email"] = EmailConfigValidator().Validate
	v.FldValidators["receiver.sms"] = SMSConfigValidator().Validate
	v.FldValidators["receiver.webhook"] = WebhookConfigValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSlack().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.slack")
	}

	if err := m.GetPagerduty().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.pagerduty")
	}

	if err := m.GetOpsgenie().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.opsgenie")
	}

	if err := m.GetWebhook().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.webhook")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *GlobalSpecType_Slack:

		return nil, nil

	case *GlobalSpecType_Pagerduty:

		return nil, nil

	case *GlobalSpecType_Opsgenie:

		return nil, nil

	case *GlobalSpecType_Email:

		return nil, nil

	case *GlobalSpecType_Sms:

		return nil, nil

	case *GlobalSpecType_Webhook:

		drInfos, err := m.GetWebhook().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetWebhook().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "webhook." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *GlobalSpecType_Slack:
		if fv, exists := v.FldValidators["receiver.slack"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Slack).Slack
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("slack"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Pagerduty:
		if fv, exists := v.FldValidators["receiver.pagerduty"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Pagerduty).Pagerduty
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("pagerduty"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Opsgenie:
		if fv, exists := v.FldValidators["receiver.opsgenie"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Opsgenie).Opsgenie
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("opsgenie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Email:
		if fv, exists := v.FldValidators["receiver.email"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Email).Email
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("email"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Sms:
		if fv, exists := v.FldValidators["receiver.sms"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Sms).Sms
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Webhook:
		if fv, exists := v.FldValidators["receiver.webhook"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Webhook).Webhook
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("webhook"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["receiver.slack"] = SlackConfigValidator().Validate
	v.FldValidators["receiver.pagerduty"] = PagerDutyConfigValidator().Validate
	v.FldValidators["receiver.opsgenie"] = OpsGenieConfigValidator().Validate
	v.FldValidators["receiver.email"] = EmailConfigValidator().Validate
	v.FldValidators["receiver.sms"] = SMSConfigValidator().Validate
	v.FldValidators["receiver.webhook"] = WebhookConfigValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HTTPConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HTTPConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *HTTPConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetBasicAuth().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HTTPConfig.basic_auth")
	}

	if err := m.GetAuthToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HTTPConfig.auth_token")
	}

	return nil
}

func (m *HTTPConfig) DeepCopy() *HTTPConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HTTPConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HTTPConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HTTPConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HTTPConfigValidator().Validate(ctx, m, opts...)
}

func (m *HTTPConfig) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAuthChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAuthChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTlsChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTlsChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *HTTPConfig) GetAuthChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAuthChoice() == nil {
		return nil, nil
	}
	switch m.GetAuthChoice().(type) {
	case *HTTPConfig_BasicAuth:

		return nil, nil

	case *HTTPConfig_NoAuthorization:

		return nil, nil

	case *HTTPConfig_AuthToken:

		return nil, nil

	case *HTTPConfig_ClientCertObj:

		drInfos, err := m.GetClientCertObj().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetClientCertObj().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "client_cert_obj." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *HTTPConfig) GetTlsChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetTlsChoice() == nil {
		return nil, nil
	}
	switch m.GetTlsChoice().(type) {
	case *HTTPConfig_NoTls:

		return nil, nil

	case *HTTPConfig_UseTls:

		drInfos, err := m.GetUseTls().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseTls().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_tls." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateHTTPConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHTTPConfig) AuthChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_choice")
	}
	return validatorFn, nil
}

func (v *ValidateHTTPConfig) TlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateHTTPConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HTTPConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HTTPConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_choice"]; exists {
		val := m.GetAuthChoice()
		vOpts := append(opts,
			db.WithValidateField("auth_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAuthChoice().(type) {
	case *HTTPConfig_BasicAuth:
		if fv, exists := v.FldValidators["auth_choice.basic_auth"]; exists {
			val := m.GetAuthChoice().(*HTTPConfig_BasicAuth).BasicAuth
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("basic_auth"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *HTTPConfig_NoAuthorization:
		if fv, exists := v.FldValidators["auth_choice.no_authorization"]; exists {
			val := m.GetAuthChoice().(*HTTPConfig_NoAuthorization).NoAuthorization
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("no_authorization"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *HTTPConfig_AuthToken:
		if fv, exists := v.FldValidators["auth_choice.auth_token"]; exists {
			val := m.GetAuthChoice().(*HTTPConfig_AuthToken).AuthToken
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("auth_token"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *HTTPConfig_ClientCertObj:
		if fv, exists := v.FldValidators["auth_choice.client_cert_obj"]; exists {
			val := m.GetAuthChoice().(*HTTPConfig_ClientCertObj).ClientCertObj
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("client_cert_obj"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["enable_http2"]; exists {

		vOpts := append(opts, db.WithValidateField("enable_http2"))
		if err := fv(ctx, m.GetEnableHttp2(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["follow_redirects"]; exists {

		vOpts := append(opts, db.WithValidateField("follow_redirects"))
		if err := fv(ctx, m.GetFollowRedirects(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_choice"]; exists {
		val := m.GetTlsChoice()
		vOpts := append(opts,
			db.WithValidateField("tls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTlsChoice().(type) {
	case *HTTPConfig_NoTls:
		if fv, exists := v.FldValidators["tls_choice.no_tls"]; exists {
			val := m.GetTlsChoice().(*HTTPConfig_NoTls).NoTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("no_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *HTTPConfig_UseTls:
		if fv, exists := v.FldValidators["tls_choice.use_tls"]; exists {
			val := m.GetTlsChoice().(*HTTPConfig_UseTls).UseTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("use_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHTTPConfigValidator = func() *ValidateHTTPConfig {
	v := &ValidateHTTPConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthChoice := v.AuthChoiceValidationRuleHandler
	rulesAuthChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAuthChoice(rulesAuthChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPConfig.auth_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_choice"] = vFn

	vrhTlsChoice := v.TlsChoiceValidationRuleHandler
	rulesTlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTlsChoice(rulesTlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPConfig.tls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_choice"] = vFn

	v.FldValidators["auth_choice.basic_auth"] = HttpBasicAuthValidator().Validate
	v.FldValidators["auth_choice.auth_token"] = AuthTokenValidator().Validate
	v.FldValidators["auth_choice.client_cert_obj"] = ClientCertificateObjValidator().Validate

	v.FldValidators["tls_choice.use_tls"] = TLSConfigValidator().Validate

	return v
}()

func HTTPConfigValidator() db.Validator {
	return DefaultHTTPConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *HttpBasicAuth) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HttpBasicAuth) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *HttpBasicAuth) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPassword().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HttpBasicAuth.password")
	}

	return nil
}

func (m *HttpBasicAuth) DeepCopy() *HttpBasicAuth {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HttpBasicAuth{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HttpBasicAuth) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HttpBasicAuth) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HttpBasicAuthValidator().Validate(ctx, m, opts...)
}

type ValidateHttpBasicAuth struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHttpBasicAuth) UserNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_name")
	}

	return validatorFn, nil
}

func (v *ValidateHttpBasicAuth) PasswordValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for password")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHttpBasicAuth) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HttpBasicAuth)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HttpBasicAuth got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["password"]; exists {

		vOpts := append(opts, db.WithValidateField("password"))
		if err := fv(ctx, m.GetPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_name"]; exists {

		vOpts := append(opts, db.WithValidateField("user_name"))
		if err := fv(ctx, m.GetUserName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHttpBasicAuthValidator = func() *ValidateHttpBasicAuth {
	v := &ValidateHttpBasicAuth{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUserName := v.UserNameValidationRuleHandler
	rulesUserName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhUserName(rulesUserName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpBasicAuth.user_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_name"] = vFn

	vrhPassword := v.PasswordValidationRuleHandler
	rulesPassword := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPassword(rulesPassword)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpBasicAuth.password: %s", err)
		panic(errMsg)
	}
	v.FldValidators["password"] = vFn

	return v
}()

func HttpBasicAuthValidator() db.Validator {
	return DefaultHttpBasicAuthValidator
}

// augmented methods on protoc/std generated struct

func (m *OpsGenieConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpsGenieConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *OpsGenieConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetApiKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting OpsGenieConfig.api_key")
	}

	return nil
}

func (m *OpsGenieConfig) DeepCopy() *OpsGenieConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpsGenieConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpsGenieConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpsGenieConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpsGenieConfigValidator().Validate(ctx, m, opts...)
}

type ValidateOpsGenieConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpsGenieConfig) ApiKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for api_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOpsGenieConfig) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for url")
	}

	return validatorFn, nil
}

func (v *ValidateOpsGenieConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpsGenieConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpsGenieConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_key"]; exists {

		vOpts := append(opts, db.WithValidateField("api_key"))
		if err := fv(ctx, m.GetApiKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpsGenieConfigValidator = func() *ValidateOpsGenieConfig {
	v := &ValidateOpsGenieConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiKey := v.ApiKeyValidationRuleHandler
	rulesApiKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhApiKey(rulesApiKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpsGenieConfig.api_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_key"] = vFn

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpsGenieConfig.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	return v
}()

func OpsGenieConfigValidator() db.Validator {
	return DefaultOpsGenieConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *PagerDutyConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PagerDutyConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *PagerDutyConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetRoutingKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting PagerDutyConfig.routing_key")
	}

	return nil
}

func (m *PagerDutyConfig) DeepCopy() *PagerDutyConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PagerDutyConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PagerDutyConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PagerDutyConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PagerDutyConfigValidator().Validate(ctx, m, opts...)
}

type ValidatePagerDutyConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePagerDutyConfig) RoutingKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for routing_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePagerDutyConfig) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for url")
	}

	return validatorFn, nil
}

func (v *ValidatePagerDutyConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PagerDutyConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PagerDutyConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["routing_key"]; exists {

		vOpts := append(opts, db.WithValidateField("routing_key"))
		if err := fv(ctx, m.GetRoutingKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPagerDutyConfigValidator = func() *ValidatePagerDutyConfig {
	v := &ValidatePagerDutyConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRoutingKey := v.RoutingKeyValidationRuleHandler
	rulesRoutingKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRoutingKey(rulesRoutingKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PagerDutyConfig.routing_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routing_key"] = vFn

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PagerDutyConfig.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	return v
}()

func PagerDutyConfigValidator() db.Validator {
	return DefaultPagerDutyConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSlack().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.slack")
	}

	if err := m.GetPagerduty().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.pagerduty")
	}

	if err := m.GetOpsgenie().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.opsgenie")
	}

	if err := m.GetWebhook().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.webhook")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *ReplaceSpecType_Slack:

		return nil, nil

	case *ReplaceSpecType_Pagerduty:

		return nil, nil

	case *ReplaceSpecType_Opsgenie:

		return nil, nil

	case *ReplaceSpecType_Email:

		return nil, nil

	case *ReplaceSpecType_Sms:

		return nil, nil

	case *ReplaceSpecType_Webhook:

		drInfos, err := m.GetWebhook().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetWebhook().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "webhook." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *ReplaceSpecType_Slack:
		if fv, exists := v.FldValidators["receiver.slack"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Slack).Slack
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("slack"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Pagerduty:
		if fv, exists := v.FldValidators["receiver.pagerduty"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Pagerduty).Pagerduty
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("pagerduty"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Opsgenie:
		if fv, exists := v.FldValidators["receiver.opsgenie"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Opsgenie).Opsgenie
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("opsgenie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Email:
		if fv, exists := v.FldValidators["receiver.email"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Email).Email
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("email"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Sms:
		if fv, exists := v.FldValidators["receiver.sms"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Sms).Sms
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Webhook:
		if fv, exists := v.FldValidators["receiver.webhook"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Webhook).Webhook
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("webhook"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["receiver.slack"] = SlackConfigValidator().Validate
	v.FldValidators["receiver.pagerduty"] = PagerDutyConfigValidator().Validate
	v.FldValidators["receiver.opsgenie"] = OpsGenieConfigValidator().Validate
	v.FldValidators["receiver.email"] = EmailConfigValidator().Validate
	v.FldValidators["receiver.sms"] = SMSConfigValidator().Validate
	v.FldValidators["receiver.webhook"] = WebhookConfigValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SMSConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SMSConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SMSConfig) DeepCopy() *SMSConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SMSConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SMSConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SMSConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SMSConfigValidator().Validate(ctx, m, opts...)
}

type ValidateSMSConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSMSConfig) ContactNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for contact_number")
	}

	return validatorFn, nil
}

func (v *ValidateSMSConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SMSConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SMSConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["contact_number"]; exists {

		vOpts := append(opts, db.WithValidateField("contact_number"))
		if err := fv(ctx, m.GetContactNumber(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSMSConfigValidator = func() *ValidateSMSConfig {
	v := &ValidateSMSConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhContactNumber := v.ContactNumberValidationRuleHandler
	rulesContactNumber := map[string]string{
		"ves.io.schema.rules.string.phone_number": "true",
	}
	vFn, err = vrhContactNumber(rulesContactNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SMSConfig.contact_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["contact_number"] = vFn

	return v
}()

func SMSConfigValidator() db.Validator {
	return DefaultSMSConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *SlackConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SlackConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SlackConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetUrl().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SlackConfig.url")
	}

	return nil
}

func (m *SlackConfig) DeepCopy() *SlackConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SlackConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SlackConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SlackConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SlackConfigValidator().Validate(ctx, m, opts...)
}

type ValidateSlackConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSlackConfig) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for url")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSlackConfig) ChannelValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for channel")
	}

	return validatorFn, nil
}

func (v *ValidateSlackConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SlackConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SlackConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["channel"]; exists {

		vOpts := append(opts, db.WithValidateField("channel"))
		if err := fv(ctx, m.GetChannel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSlackConfigValidator = func() *ValidateSlackConfig {
	v := &ValidateSlackConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SlackConfig.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	vrhChannel := v.ChannelValidationRuleHandler
	rulesChannel := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "^[a-z0-9-_]{1,80}$",
	}
	vFn, err = vrhChannel(rulesChannel)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SlackConfig.channel: %s", err)
		panic(errMsg)
	}
	v.FldValidators["channel"] = vFn

	return v
}()

func SlackConfigValidator() db.Validator {
	return DefaultSlackConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *TLSConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TLSConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TLSConfig) DeepCopy() *TLSConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TLSConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TLSConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TLSConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TLSConfigValidator().Validate(ctx, m, opts...)
}

func (m *TLSConfig) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetServerValidationChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *TLSConfig) GetServerValidationChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServerValidationChoice() == nil {
		return nil, nil
	}
	switch m.GetServerValidationChoice().(type) {
	case *TLSConfig_VolterraTrustedCa:

		return nil, nil

	case *TLSConfig_UseServerVerification:

		drInfos, err := m.GetUseServerVerification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseServerVerification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_server_verification." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateTLSConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTLSConfig) ServerValidationChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_validation_choice")
	}
	return validatorFn, nil
}

func (v *ValidateTLSConfig) SniChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sni_choice")
	}
	return validatorFn, nil
}

func (v *ValidateTLSConfig) SniChoiceSniValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Sni, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sni")
	}
	return oValidatorFn_Sni, nil
}

func (v *ValidateTLSConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TLSConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TLSConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["max_version"]; exists {

		vOpts := append(opts, db.WithValidateField("max_version"))
		if err := fv(ctx, m.GetMaxVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["min_version"]; exists {

		vOpts := append(opts, db.WithValidateField("min_version"))
		if err := fv(ctx, m.GetMinVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_validation_choice"]; exists {
		val := m.GetServerValidationChoice()
		vOpts := append(opts,
			db.WithValidateField("server_validation_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerValidationChoice().(type) {
	case *TLSConfig_VolterraTrustedCa:
		if fv, exists := v.FldValidators["server_validation_choice.volterra_trusted_ca"]; exists {
			val := m.GetServerValidationChoice().(*TLSConfig_VolterraTrustedCa).VolterraTrustedCa
			vOpts := append(opts,
				db.WithValidateField("server_validation_choice"),
				db.WithValidateField("volterra_trusted_ca"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfig_UseServerVerification:
		if fv, exists := v.FldValidators["server_validation_choice.use_server_verification"]; exists {
			val := m.GetServerValidationChoice().(*TLSConfig_UseServerVerification).UseServerVerification
			vOpts := append(opts,
				db.WithValidateField("server_validation_choice"),
				db.WithValidateField("use_server_verification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sni_choice"]; exists {
		val := m.GetSniChoice()
		vOpts := append(opts,
			db.WithValidateField("sni_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSniChoice().(type) {
	case *TLSConfig_DisableSni:
		if fv, exists := v.FldValidators["sni_choice.disable_sni"]; exists {
			val := m.GetSniChoice().(*TLSConfig_DisableSni).DisableSni
			vOpts := append(opts,
				db.WithValidateField("sni_choice"),
				db.WithValidateField("disable_sni"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfig_Sni:
		if fv, exists := v.FldValidators["sni_choice.sni"]; exists {
			val := m.GetSniChoice().(*TLSConfig_Sni).Sni
			vOpts := append(opts,
				db.WithValidateField("sni_choice"),
				db.WithValidateField("sni"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTLSConfigValidator = func() *ValidateTLSConfig {
	v := &ValidateTLSConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerValidationChoice := v.ServerValidationChoiceValidationRuleHandler
	rulesServerValidationChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServerValidationChoice(rulesServerValidationChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSConfig.server_validation_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_validation_choice"] = vFn

	vrhSniChoice := v.SniChoiceValidationRuleHandler
	rulesSniChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSniChoice(rulesSniChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSConfig.sni_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sni_choice"] = vFn

	vrhSniChoiceSni := v.SniChoiceSniValidationRuleHandler
	rulesSniChoiceSni := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
	}
	vFnMap["sni_choice.sni"], err = vrhSniChoiceSni(rulesSniChoiceSni)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field TLSConfig.sni_choice_sni: %s", err)
		panic(errMsg)
	}

	v.FldValidators["sni_choice.sni"] = vFnMap["sni_choice.sni"]

	v.FldValidators["server_validation_choice.use_server_verification"] = UpstreamTlsValidationContextValidator().Validate

	return v
}()

func TLSConfigValidator() db.Validator {
	return DefaultTLSConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *UpstreamTlsValidationContext) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpstreamTlsValidationContext) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpstreamTlsValidationContext) DeepCopy() *UpstreamTlsValidationContext {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpstreamTlsValidationContext{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpstreamTlsValidationContext) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpstreamTlsValidationContext) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpstreamTlsValidationContextValidator().Validate(ctx, m, opts...)
}

func (m *UpstreamTlsValidationContext) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCaCertObjDRefInfo()

}

// GetDRefInfo for the field's type
func (m *UpstreamTlsValidationContext) GetCaCertObjDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCaCertObj() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCaCertObj().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCaCertObj().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "ca_cert_obj." + dri.DRField
	}
	return drInfos, err

}

type ValidateUpstreamTlsValidationContext struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpstreamTlsValidationContext) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpstreamTlsValidationContext)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpstreamTlsValidationContext got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ca_cert_obj"]; exists {

		vOpts := append(opts, db.WithValidateField("ca_cert_obj"))
		if err := fv(ctx, m.GetCaCertObj(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpstreamTlsValidationContextValidator = func() *ValidateUpstreamTlsValidationContext {
	v := &ValidateUpstreamTlsValidationContext{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["ca_cert_obj"] = CACertificateObjValidator().Validate

	return v
}()

func UpstreamTlsValidationContextValidator() db.Validator {
	return DefaultUpstreamTlsValidationContextValidator
}

// augmented methods on protoc/std generated struct

func (m *WebhookConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *WebhookConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *WebhookConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting WebhookConfig.http_config")
	}

	if err := m.GetUrl().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting WebhookConfig.url")
	}

	return nil
}

func (m *WebhookConfig) DeepCopy() *WebhookConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &WebhookConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *WebhookConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *WebhookConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return WebhookConfigValidator().Validate(ctx, m, opts...)
}

func (m *WebhookConfig) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetHttpConfigDRefInfo()

}

// GetDRefInfo for the field's type
func (m *WebhookConfig) GetHttpConfigDRefInfo() ([]db.DRefInfo, error) {
	if m.GetHttpConfig() == nil {
		return nil, nil
	}

	drInfos, err := m.GetHttpConfig().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetHttpConfig().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "http_config." + dri.DRField
	}
	return drInfos, err

}

type ValidateWebhookConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateWebhookConfig) HttpConfigValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for http_config")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := HTTPConfigValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateWebhookConfig) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for url")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateWebhookConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*WebhookConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *WebhookConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_config"]; exists {

		vOpts := append(opts, db.WithValidateField("http_config"))
		if err := fv(ctx, m.GetHttpConfig(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultWebhookConfigValidator = func() *ValidateWebhookConfig {
	v := &ValidateWebhookConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHttpConfig := v.HttpConfigValidationRuleHandler
	rulesHttpConfig := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhHttpConfig(rulesHttpConfig)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for WebhookConfig.http_config: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_config"] = vFn

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for WebhookConfig.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	return v
}()

func WebhookConfigValidator() db.Validator {
	return DefaultWebhookConfigValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *CreateSpecType_Email:
		o.Receiver = &GlobalSpecType_Email{Email: of.Email}

	case *CreateSpecType_Opsgenie:
		o.Receiver = &GlobalSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *CreateSpecType_Pagerduty:
		o.Receiver = &GlobalSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *CreateSpecType_Slack:
		o.Receiver = &GlobalSpecType_Slack{Slack: of.Slack}

	case *CreateSpecType_Sms:
		o.Receiver = &GlobalSpecType_Sms{Sms: of.Sms}

	case *CreateSpecType_Webhook:
		o.Receiver = &GlobalSpecType_Webhook{Webhook: of.Webhook}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_Email:
		r.Receiver = &CreateSpecType_Email{Email: of.Email}

	case *GlobalSpecType_Opsgenie:
		r.Receiver = &CreateSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *GlobalSpecType_Pagerduty:
		r.Receiver = &CreateSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *GlobalSpecType_Slack:
		r.Receiver = &CreateSpecType_Slack{Slack: of.Slack}

	case *GlobalSpecType_Sms:
		r.Receiver = &CreateSpecType_Sms{Sms: of.Sms}

	case *GlobalSpecType_Webhook:
		r.Receiver = &CreateSpecType_Webhook{Webhook: of.Webhook}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetReceiverToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *GetSpecType_Email:
		o.Receiver = &GlobalSpecType_Email{Email: of.Email}

	case *GetSpecType_Opsgenie:
		o.Receiver = &GlobalSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *GetSpecType_Pagerduty:
		o.Receiver = &GlobalSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *GetSpecType_Slack:
		o.Receiver = &GlobalSpecType_Slack{Slack: of.Slack}

	case *GetSpecType_Sms:
		o.Receiver = &GlobalSpecType_Sms{Sms: of.Sms}

	case *GetSpecType_Webhook:
		o.Receiver = &GlobalSpecType_Webhook{Webhook: of.Webhook}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_Email:
		r.Receiver = &GetSpecType_Email{Email: of.Email}

	case *GlobalSpecType_Opsgenie:
		r.Receiver = &GetSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *GlobalSpecType_Pagerduty:
		r.Receiver = &GetSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *GlobalSpecType_Slack:
		r.Receiver = &GetSpecType_Slack{Slack: of.Slack}

	case *GlobalSpecType_Sms:
		r.Receiver = &GetSpecType_Sms{Sms: of.Sms}

	case *GlobalSpecType_Webhook:
		r.Receiver = &GetSpecType_Webhook{Webhook: of.Webhook}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetReceiverToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *ReplaceSpecType_Email:
		o.Receiver = &GlobalSpecType_Email{Email: of.Email}

	case *ReplaceSpecType_Opsgenie:
		o.Receiver = &GlobalSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *ReplaceSpecType_Pagerduty:
		o.Receiver = &GlobalSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *ReplaceSpecType_Slack:
		o.Receiver = &GlobalSpecType_Slack{Slack: of.Slack}

	case *ReplaceSpecType_Sms:
		o.Receiver = &GlobalSpecType_Sms{Sms: of.Sms}

	case *ReplaceSpecType_Webhook:
		o.Receiver = &GlobalSpecType_Webhook{Webhook: of.Webhook}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_Email:
		r.Receiver = &ReplaceSpecType_Email{Email: of.Email}

	case *GlobalSpecType_Opsgenie:
		r.Receiver = &ReplaceSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *GlobalSpecType_Pagerduty:
		r.Receiver = &ReplaceSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *GlobalSpecType_Slack:
		r.Receiver = &ReplaceSpecType_Slack{Slack: of.Slack}

	case *GlobalSpecType_Sms:
		r.Receiver = &ReplaceSpecType_Sms{Sms: of.Sms}

	case *GlobalSpecType_Webhook:
		r.Receiver = &ReplaceSpecType_Webhook{Webhook: of.Webhook}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetReceiverToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

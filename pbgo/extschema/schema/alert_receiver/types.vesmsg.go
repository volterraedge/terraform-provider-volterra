//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package alert_receiver

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSlack().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.slack")
	}

	if err := m.GetPagerduty().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.pagerduty")
	}

	if err := m.GetOpsgenie().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.opsgenie")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *CreateSpecType_Slack:
		if fv, exists := v.FldValidators["receiver.slack"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Slack).Slack
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("slack"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Pagerduty:
		if fv, exists := v.FldValidators["receiver.pagerduty"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Pagerduty).Pagerduty
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("pagerduty"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Opsgenie:
		if fv, exists := v.FldValidators["receiver.opsgenie"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Opsgenie).Opsgenie
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("opsgenie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Email:
		if fv, exists := v.FldValidators["receiver.email"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Email).Email
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("email"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Sms:
		if fv, exists := v.FldValidators["receiver.sms"]; exists {
			val := m.GetReceiver().(*CreateSpecType_Sms).Sms
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["receiver.slack"] = SlackConfigValidator().Validate
	v.FldValidators["receiver.pagerduty"] = PagerDutyConfigValidator().Validate
	v.FldValidators["receiver.opsgenie"] = OpsGenieConfigValidator().Validate
	v.FldValidators["receiver.email"] = EmailConfigValidator().Validate
	v.FldValidators["receiver.sms"] = SMSConfigValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *EmailConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EmailConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EmailConfig) DeepCopy() *EmailConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EmailConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EmailConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EmailConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EmailConfigValidator().Validate(ctx, m, opts...)
}

type ValidateEmailConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEmailConfig) EmailValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for email")
	}

	return validatorFn, nil
}

func (v *ValidateEmailConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EmailConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EmailConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["email"]; exists {

		vOpts := append(opts, db.WithValidateField("email"))
		if err := fv(ctx, m.GetEmail(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEmailConfigValidator = func() *ValidateEmailConfig {
	v := &ValidateEmailConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEmail := v.EmailValidationRuleHandler
	rulesEmail := map[string]string{
		"ves.io.schema.rules.string.email": "true",
	}
	vFn, err = vrhEmail(rulesEmail)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EmailConfig.email: %s", err)
		panic(errMsg)
	}
	v.FldValidators["email"] = vFn

	return v
}()

func EmailConfigValidator() db.Validator {
	return DefaultEmailConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSlack().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.slack")
	}

	if err := m.GetPagerduty().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.pagerduty")
	}

	if err := m.GetOpsgenie().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.opsgenie")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *GetSpecType_Slack:
		if fv, exists := v.FldValidators["receiver.slack"]; exists {
			val := m.GetReceiver().(*GetSpecType_Slack).Slack
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("slack"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Pagerduty:
		if fv, exists := v.FldValidators["receiver.pagerduty"]; exists {
			val := m.GetReceiver().(*GetSpecType_Pagerduty).Pagerduty
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("pagerduty"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Opsgenie:
		if fv, exists := v.FldValidators["receiver.opsgenie"]; exists {
			val := m.GetReceiver().(*GetSpecType_Opsgenie).Opsgenie
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("opsgenie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Email:
		if fv, exists := v.FldValidators["receiver.email"]; exists {
			val := m.GetReceiver().(*GetSpecType_Email).Email
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("email"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Sms:
		if fv, exists := v.FldValidators["receiver.sms"]; exists {
			val := m.GetReceiver().(*GetSpecType_Sms).Sms
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["receiver.slack"] = SlackConfigValidator().Validate
	v.FldValidators["receiver.pagerduty"] = PagerDutyConfigValidator().Validate
	v.FldValidators["receiver.opsgenie"] = OpsGenieConfigValidator().Validate
	v.FldValidators["receiver.email"] = EmailConfigValidator().Validate
	v.FldValidators["receiver.sms"] = SMSConfigValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSlack().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.slack")
	}

	if err := m.GetPagerduty().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.pagerduty")
	}

	if err := m.GetOpsgenie().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.opsgenie")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *GlobalSpecType_Slack:
		if fv, exists := v.FldValidators["receiver.slack"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Slack).Slack
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("slack"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Pagerduty:
		if fv, exists := v.FldValidators["receiver.pagerduty"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Pagerduty).Pagerduty
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("pagerduty"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Opsgenie:
		if fv, exists := v.FldValidators["receiver.opsgenie"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Opsgenie).Opsgenie
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("opsgenie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Email:
		if fv, exists := v.FldValidators["receiver.email"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Email).Email
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("email"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Sms:
		if fv, exists := v.FldValidators["receiver.sms"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_Sms).Sms
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["receiver.slack"] = SlackConfigValidator().Validate
	v.FldValidators["receiver.pagerduty"] = PagerDutyConfigValidator().Validate
	v.FldValidators["receiver.opsgenie"] = OpsGenieConfigValidator().Validate
	v.FldValidators["receiver.email"] = EmailConfigValidator().Validate
	v.FldValidators["receiver.sms"] = SMSConfigValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *OpsGenieConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpsGenieConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *OpsGenieConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetApiKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting OpsGenieConfig.api_key")
	}

	return nil
}

func (m *OpsGenieConfig) DeepCopy() *OpsGenieConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpsGenieConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpsGenieConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpsGenieConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpsGenieConfigValidator().Validate(ctx, m, opts...)
}

type ValidateOpsGenieConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpsGenieConfig) ApiKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for api_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOpsGenieConfig) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for url")
	}

	return validatorFn, nil
}

func (v *ValidateOpsGenieConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpsGenieConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpsGenieConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_key"]; exists {

		vOpts := append(opts, db.WithValidateField("api_key"))
		if err := fv(ctx, m.GetApiKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpsGenieConfigValidator = func() *ValidateOpsGenieConfig {
	v := &ValidateOpsGenieConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiKey := v.ApiKeyValidationRuleHandler
	rulesApiKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhApiKey(rulesApiKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpsGenieConfig.api_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_key"] = vFn

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpsGenieConfig.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	return v
}()

func OpsGenieConfigValidator() db.Validator {
	return DefaultOpsGenieConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *PagerDutyConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PagerDutyConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *PagerDutyConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetRoutingKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting PagerDutyConfig.routing_key")
	}

	return nil
}

func (m *PagerDutyConfig) DeepCopy() *PagerDutyConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PagerDutyConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PagerDutyConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PagerDutyConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PagerDutyConfigValidator().Validate(ctx, m, opts...)
}

type ValidatePagerDutyConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePagerDutyConfig) RoutingKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for routing_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePagerDutyConfig) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for url")
	}

	return validatorFn, nil
}

func (v *ValidatePagerDutyConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PagerDutyConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PagerDutyConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["routing_key"]; exists {

		vOpts := append(opts, db.WithValidateField("routing_key"))
		if err := fv(ctx, m.GetRoutingKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPagerDutyConfigValidator = func() *ValidatePagerDutyConfig {
	v := &ValidatePagerDutyConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRoutingKey := v.RoutingKeyValidationRuleHandler
	rulesRoutingKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRoutingKey(rulesRoutingKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PagerDutyConfig.routing_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routing_key"] = vFn

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PagerDutyConfig.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	return v
}()

func PagerDutyConfigValidator() db.Validator {
	return DefaultPagerDutyConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSlack().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.slack")
	}

	if err := m.GetPagerduty().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.pagerduty")
	}

	if err := m.GetOpsgenie().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.opsgenie")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *ReplaceSpecType_Slack:
		if fv, exists := v.FldValidators["receiver.slack"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Slack).Slack
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("slack"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Pagerduty:
		if fv, exists := v.FldValidators["receiver.pagerduty"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Pagerduty).Pagerduty
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("pagerduty"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Opsgenie:
		if fv, exists := v.FldValidators["receiver.opsgenie"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Opsgenie).Opsgenie
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("opsgenie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Email:
		if fv, exists := v.FldValidators["receiver.email"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Email).Email
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("email"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Sms:
		if fv, exists := v.FldValidators["receiver.sms"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_Sms).Sms
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["receiver.slack"] = SlackConfigValidator().Validate
	v.FldValidators["receiver.pagerduty"] = PagerDutyConfigValidator().Validate
	v.FldValidators["receiver.opsgenie"] = OpsGenieConfigValidator().Validate
	v.FldValidators["receiver.email"] = EmailConfigValidator().Validate
	v.FldValidators["receiver.sms"] = SMSConfigValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SMSConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SMSConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SMSConfig) DeepCopy() *SMSConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SMSConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SMSConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SMSConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SMSConfigValidator().Validate(ctx, m, opts...)
}

type ValidateSMSConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSMSConfig) ContactNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for contact_number")
	}

	return validatorFn, nil
}

func (v *ValidateSMSConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SMSConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SMSConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["contact_number"]; exists {

		vOpts := append(opts, db.WithValidateField("contact_number"))
		if err := fv(ctx, m.GetContactNumber(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSMSConfigValidator = func() *ValidateSMSConfig {
	v := &ValidateSMSConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhContactNumber := v.ContactNumberValidationRuleHandler
	rulesContactNumber := map[string]string{
		"ves.io.schema.rules.string.phone_number": "true",
	}
	vFn, err = vrhContactNumber(rulesContactNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SMSConfig.contact_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["contact_number"] = vFn

	return v
}()

func SMSConfigValidator() db.Validator {
	return DefaultSMSConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *SlackConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SlackConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SlackConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetUrl().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SlackConfig.url")
	}

	return nil
}

func (m *SlackConfig) DeepCopy() *SlackConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SlackConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SlackConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SlackConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SlackConfigValidator().Validate(ctx, m, opts...)
}

type ValidateSlackConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSlackConfig) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for url")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSlackConfig) ChannelValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for channel")
	}

	return validatorFn, nil
}

func (v *ValidateSlackConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SlackConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SlackConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["channel"]; exists {

		vOpts := append(opts, db.WithValidateField("channel"))
		if err := fv(ctx, m.GetChannel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSlackConfigValidator = func() *ValidateSlackConfig {
	v := &ValidateSlackConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SlackConfig.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	vrhChannel := v.ChannelValidationRuleHandler
	rulesChannel := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "^[a-z0-9-_]{1,80}$",
	}
	vFn, err = vrhChannel(rulesChannel)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SlackConfig.channel: %s", err)
		panic(errMsg)
	}
	v.FldValidators["channel"] = vFn

	return v
}()

func SlackConfigValidator() db.Validator {
	return DefaultSlackConfigValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *CreateSpecType_Email:
		o.Receiver = &GlobalSpecType_Email{Email: of.Email}

	case *CreateSpecType_Opsgenie:
		o.Receiver = &GlobalSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *CreateSpecType_Pagerduty:
		o.Receiver = &GlobalSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *CreateSpecType_Slack:
		o.Receiver = &GlobalSpecType_Slack{Slack: of.Slack}

	case *CreateSpecType_Sms:
		o.Receiver = &GlobalSpecType_Sms{Sms: of.Sms}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_Email:
		r.Receiver = &CreateSpecType_Email{Email: of.Email}

	case *GlobalSpecType_Opsgenie:
		r.Receiver = &CreateSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *GlobalSpecType_Pagerduty:
		r.Receiver = &CreateSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *GlobalSpecType_Slack:
		r.Receiver = &CreateSpecType_Slack{Slack: of.Slack}

	case *GlobalSpecType_Sms:
		r.Receiver = &CreateSpecType_Sms{Sms: of.Sms}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetReceiverToGlobalSpecType(f)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *GetSpecType_Email:
		o.Receiver = &GlobalSpecType_Email{Email: of.Email}

	case *GetSpecType_Opsgenie:
		o.Receiver = &GlobalSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *GetSpecType_Pagerduty:
		o.Receiver = &GlobalSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *GetSpecType_Slack:
		o.Receiver = &GlobalSpecType_Slack{Slack: of.Slack}

	case *GetSpecType_Sms:
		o.Receiver = &GlobalSpecType_Sms{Sms: of.Sms}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_Email:
		r.Receiver = &GetSpecType_Email{Email: of.Email}

	case *GlobalSpecType_Opsgenie:
		r.Receiver = &GetSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *GlobalSpecType_Pagerduty:
		r.Receiver = &GetSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *GlobalSpecType_Slack:
		r.Receiver = &GetSpecType_Slack{Slack: of.Slack}

	case *GlobalSpecType_Sms:
		r.Receiver = &GetSpecType_Sms{Sms: of.Sms}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetReceiverToGlobalSpecType(f)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *ReplaceSpecType_Email:
		o.Receiver = &GlobalSpecType_Email{Email: of.Email}

	case *ReplaceSpecType_Opsgenie:
		o.Receiver = &GlobalSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *ReplaceSpecType_Pagerduty:
		o.Receiver = &GlobalSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *ReplaceSpecType_Slack:
		o.Receiver = &GlobalSpecType_Slack{Slack: of.Slack}

	case *ReplaceSpecType_Sms:
		o.Receiver = &GlobalSpecType_Sms{Sms: of.Sms}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_Email:
		r.Receiver = &ReplaceSpecType_Email{Email: of.Email}

	case *GlobalSpecType_Opsgenie:
		r.Receiver = &ReplaceSpecType_Opsgenie{Opsgenie: of.Opsgenie}

	case *GlobalSpecType_Pagerduty:
		r.Receiver = &ReplaceSpecType_Pagerduty{Pagerduty: of.Pagerduty}

	case *GlobalSpecType_Slack:
		r.Receiver = &ReplaceSpecType_Slack{Slack: of.Slack}

	case *GlobalSpecType_Sms:
		r.Receiver = &ReplaceSpecType_Sms{Sms: of.Sms}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetReceiverToGlobalSpecType(f)
}

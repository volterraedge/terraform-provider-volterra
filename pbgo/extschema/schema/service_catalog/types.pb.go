// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/service_catalog/types.proto

package service_catalog

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Service Catalog Record
//
// x-displayName: "Service Catalog Record"
// Desired state of the Service Catalog record
type GlobalSpecType struct {
	// service_type
	//
	// x-required
	// x-displayName: "Service Type"
	// Reference to service to be monitored.
	//
	// Types that are valid to be assigned to ServiceType:
	//	*GlobalSpecType_HttpLoadBalancer
	ServiceType isGlobalSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e2dd5edf70c1fb, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ServiceType interface {
	isGlobalSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_HttpLoadBalancer struct {
	HttpLoadBalancer *HTTPLoadBalancer `protobuf:"bytes,2,opt,name=http_load_balancer,json=httpLoadBalancer,proto3,oneof" json:"http_load_balancer,omitempty"`
}

func (*GlobalSpecType_HttpLoadBalancer) isGlobalSpecType_ServiceType() {}

func (m *GlobalSpecType) GetServiceType() isGlobalSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *GlobalSpecType) GetHttpLoadBalancer() *HTTPLoadBalancer {
	if x, ok := m.GetServiceType().(*GlobalSpecType_HttpLoadBalancer); ok {
		return x.HttpLoadBalancer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_HttpLoadBalancer)(nil),
	}
}

type HTTPLoadBalancer struct {
	// http_load_balancer
	//
	// x-displayName: "HTTP Load Balancer"
	// Owner object of virtual host.
	HttpLoadBalancer *views.ObjectRefType `protobuf:"bytes,1,opt,name=http_load_balancer,json=httpLoadBalancer,proto3" json:"http_load_balancer,omitempty"`
	// virtual_host
	//
	// x-required
	// x-displayName: "Virtual Host"
	// Virtual host fields for monitoring.
	VirtualHost *VirtualHost `protobuf:"bytes,2,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
}

func (m *HTTPLoadBalancer) Reset()      { *m = HTTPLoadBalancer{} }
func (*HTTPLoadBalancer) ProtoMessage() {}
func (*HTTPLoadBalancer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e2dd5edf70c1fb, []int{1}
}
func (m *HTTPLoadBalancer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPLoadBalancer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HTTPLoadBalancer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPLoadBalancer.Merge(m, src)
}
func (m *HTTPLoadBalancer) XXX_Size() int {
	return m.Size()
}
func (m *HTTPLoadBalancer) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPLoadBalancer.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPLoadBalancer proto.InternalMessageInfo

func (m *HTTPLoadBalancer) GetHttpLoadBalancer() *views.ObjectRefType {
	if m != nil {
		return m.HttpLoadBalancer
	}
	return nil
}

func (m *HTTPLoadBalancer) GetVirtualHost() *VirtualHost {
	if m != nil {
		return m.VirtualHost
	}
	return nil
}

type VirtualHost struct {
	// virtual_ips
	//
	// x-required
	// x-displayName: "Virtual IP"
	// List of virtual IPs to monitor.
	VirtualIps []string `protobuf:"bytes,1,rep,name=virtual_ips,json=virtualIps,proto3" json:"virtual_ips,omitempty"`
	// domains
	//
	// x-required
	// x-displayName: "Domains"
	// List of domains matched with the load balancer.
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	// host_name
	//
	// x-required
	// x-displayName: "Host Name"
	// x-example: "ves-io-f73a29d2-2d64-4095-a6f7-57fd3639d56e.ac.vh.ves.io"
	// Host name to monitored.
	HostName string `protobuf:"bytes,3,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Port Choice
	//
	// x-required
	// x-displayName: "Port"
	// Available options: user provided port or system default port or port range.
	//
	// Types that are valid to be assigned to PortChoice:
	//	*VirtualHost_Port
	//	*VirtualHost_PortRanges
	PortChoice isVirtualHost_PortChoice `protobuf_oneof:"port_choice"`
	// protocol
	//
	// x-displayName: "Protocol"
	// x-example: "https"
	// Protocol for monitoring.
	Protocol string `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *VirtualHost) Reset()      { *m = VirtualHost{} }
func (*VirtualHost) ProtoMessage() {}
func (*VirtualHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e2dd5edf70c1fb, []int{2}
}
func (m *VirtualHost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VirtualHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHost.Merge(m, src)
}
func (m *VirtualHost) XXX_Size() int {
	return m.Size()
}
func (m *VirtualHost) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHost.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHost proto.InternalMessageInfo

type isVirtualHost_PortChoice interface {
	isVirtualHost_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VirtualHost_Port struct {
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3,oneof" json:"port,omitempty"`
}
type VirtualHost_PortRanges struct {
	PortRanges string `protobuf:"bytes,6,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}

func (*VirtualHost_Port) isVirtualHost_PortChoice()       {}
func (*VirtualHost_PortRanges) isVirtualHost_PortChoice() {}

func (m *VirtualHost) GetPortChoice() isVirtualHost_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}

func (m *VirtualHost) GetVirtualIps() []string {
	if m != nil {
		return m.VirtualIps
	}
	return nil
}

func (m *VirtualHost) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *VirtualHost) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *VirtualHost) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*VirtualHost_Port); ok {
		return x.Port
	}
	return 0
}

func (m *VirtualHost) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*VirtualHost_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *VirtualHost) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VirtualHost) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VirtualHost_Port)(nil),
		(*VirtualHost_PortRanges)(nil),
	}
}

// Create Service Catalog Object
//
// x-displayName: "Create Service Catalog Object"
// Create Service Catalog Object.
type CreateSpecType struct {
	// Types that are valid to be assigned to ServiceType:
	//	*CreateSpecType_HttpLoadBalancer
	ServiceType isCreateSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e2dd5edf70c1fb, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ServiceType interface {
	isCreateSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_HttpLoadBalancer struct {
	HttpLoadBalancer *HTTPLoadBalancer `protobuf:"bytes,2,opt,name=http_load_balancer,json=httpLoadBalancer,proto3,oneof" json:"http_load_balancer,omitempty"`
}

func (*CreateSpecType_HttpLoadBalancer) isCreateSpecType_ServiceType() {}

func (m *CreateSpecType) GetServiceType() isCreateSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *CreateSpecType) GetHttpLoadBalancer() *HTTPLoadBalancer {
	if x, ok := m.GetServiceType().(*CreateSpecType_HttpLoadBalancer); ok {
		return x.HttpLoadBalancer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_HttpLoadBalancer)(nil),
	}
}

// Get Service Catalog Object
//
// x-displayName: "Get Service Catalog Object"
// Get Service Catalog Object.
type GetSpecType struct {
	// Types that are valid to be assigned to ServiceType:
	//	*GetSpecType_HttpLoadBalancer
	ServiceType isGetSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e2dd5edf70c1fb, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ServiceType interface {
	isGetSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_HttpLoadBalancer struct {
	HttpLoadBalancer *HTTPLoadBalancer `protobuf:"bytes,2,opt,name=http_load_balancer,json=httpLoadBalancer,proto3,oneof" json:"http_load_balancer,omitempty"`
}

func (*GetSpecType_HttpLoadBalancer) isGetSpecType_ServiceType() {}

func (m *GetSpecType) GetServiceType() isGetSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *GetSpecType) GetHttpLoadBalancer() *HTTPLoadBalancer {
	if x, ok := m.GetServiceType().(*GetSpecType_HttpLoadBalancer); ok {
		return x.HttpLoadBalancer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_HttpLoadBalancer)(nil),
	}
}

// Replace Service Catalog Object
//
// x-displayName: "Replace Service Catalog Object"
// Replace Service Catalog Object.
type ReplaceSpecType struct {
	// Types that are valid to be assigned to ServiceType:
	//	*ReplaceSpecType_HttpLoadBalancer
	ServiceType isReplaceSpecType_ServiceType `protobuf_oneof:"service_type"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e2dd5edf70c1fb, []int{5}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ServiceType interface {
	isReplaceSpecType_ServiceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_HttpLoadBalancer struct {
	HttpLoadBalancer *HTTPLoadBalancer `protobuf:"bytes,2,opt,name=http_load_balancer,json=httpLoadBalancer,proto3,oneof" json:"http_load_balancer,omitempty"`
}

func (*ReplaceSpecType_HttpLoadBalancer) isReplaceSpecType_ServiceType() {}

func (m *ReplaceSpecType) GetServiceType() isReplaceSpecType_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpLoadBalancer() *HTTPLoadBalancer {
	if x, ok := m.GetServiceType().(*ReplaceSpecType_HttpLoadBalancer); ok {
		return x.HttpLoadBalancer
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_HttpLoadBalancer)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.service_catalog.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.service_catalog.GlobalSpecType")
	proto.RegisterType((*HTTPLoadBalancer)(nil), "ves.io.schema.service_catalog.HTTPLoadBalancer")
	golang_proto.RegisterType((*HTTPLoadBalancer)(nil), "ves.io.schema.service_catalog.HTTPLoadBalancer")
	proto.RegisterType((*VirtualHost)(nil), "ves.io.schema.service_catalog.VirtualHost")
	golang_proto.RegisterType((*VirtualHost)(nil), "ves.io.schema.service_catalog.VirtualHost")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.service_catalog.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.service_catalog.CreateSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.service_catalog.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.service_catalog.GetSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.service_catalog.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.service_catalog.ReplaceSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/service_catalog/types.proto", fileDescriptor_e5e2dd5edf70c1fb)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/service_catalog/types.proto", fileDescriptor_e5e2dd5edf70c1fb)
}

var fileDescriptor_e5e2dd5edf70c1fb = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xbd, 0x8f, 0xe3, 0x44,
	0x14, 0xf7, 0xb3, 0x9d, 0x6c, 0x32, 0xb9, 0x8f, 0x9c, 0x41, 0x3a, 0x93, 0xe3, 0x7c, 0x51, 0x1a,
	0xc2, 0x49, 0x6b, 0x4b, 0xdc, 0x36, 0x50, 0x20, 0x64, 0x8a, 0x0b, 0x11, 0x5f, 0xf2, 0xad, 0x28,
	0x68, 0xac, 0x89, 0x33, 0x71, 0x0c, 0x76, 0x66, 0x34, 0x9e, 0x18, 0xb6, 0x40, 0x3a, 0x51, 0x51,
	0x72, 0x5b, 0xf0, 0x37, 0x00, 0x82, 0x7f, 0x80, 0x34, 0x5b, 0x02, 0x55, 0xca, 0xe8, 0x2a, 0xd6,
	0x69, 0xa0, 0xbb, 0x9a, 0xe6, 0xd0, 0x38, 0xce, 0x5d, 0x9c, 0x5b, 0x41, 0x87, 0xb4, 0x55, 0xde,
	0x9b, 0xdf, 0xc7, 0xfc, 0x9e, 0x33, 0xa3, 0x41, 0xaf, 0x67, 0x24, 0xb5, 0x23, 0xea, 0xa4, 0xc1,
	0x94, 0x24, 0xd8, 0x49, 0x09, 0xcf, 0xa2, 0x80, 0xf8, 0x01, 0x16, 0x38, 0xa6, 0xa1, 0x23, 0x4e,
	0x18, 0x49, 0x6d, 0xc6, 0xa9, 0xa0, 0xc6, 0xed, 0x0d, 0xd5, 0xde, 0x50, 0xed, 0x3d, 0x6a, 0xe7,
	0x30, 0x8c, 0xc4, 0x74, 0x3e, 0xb2, 0x03, 0x9a, 0x38, 0x21, 0x0d, 0xa9, 0x53, 0xa8, 0x46, 0xf3,
	0x49, 0xd1, 0x15, 0x4d, 0x51, 0x6d, 0xdc, 0x3a, 0x77, 0x42, 0x4a, 0xc3, 0x98, 0x3c, 0x67, 0x89,
	0x28, 0x21, 0xa9, 0xc0, 0x09, 0x2b, 0x09, 0x37, 0xab, 0xc9, 0x66, 0x44, 0x94, 0xc0, 0xad, 0x2a,
	0x40, 0x99, 0x88, 0xe8, 0xac, 0x0c, 0xd9, 0xe9, 0x56, 0x41, 0x46, 0xe3, 0x28, 0x38, 0xd9, 0x1d,
	0xa3, 0xf3, 0x4a, 0x95, 0xb1, 0x0b, 0xbd, 0x5a, 0x85, 0x32, 0x1c, 0x47, 0x63, 0x2c, 0xc8, 0xc5,
	0xd6, 0x59, 0x44, 0xbe, 0xf0, 0xab, 0x9b, 0xdf, 0x79, 0x91, 0x91, 0xee, 0x6e, 0xd0, 0x7b, 0x04,
	0xe8, 0xda, 0xfd, 0x98, 0x8e, 0x70, 0xfc, 0x80, 0x91, 0xe0, 0xf8, 0x84, 0x11, 0xc3, 0x47, 0xc6,
	0x54, 0x08, 0xe6, 0xc7, 0x14, 0x8f, 0xfd, 0x11, 0x8e, 0xf1, 0x2c, 0x20, 0xdc, 0x54, 0xbb, 0xd0,
	0x6f, 0xbd, 0xe1, 0xd8, 0xff, 0xfa, 0xc9, 0xed, 0xc1, 0xf1, 0xf1, 0xc7, 0xef, 0x53, 0x3c, 0x76,
	0x4b, 0xd9, 0x40, 0xf1, 0xda, 0xd2, 0x6c, 0x77, 0xcd, 0x35, 0xd1, 0x95, 0xad, 0x4e, 0x46, 0x31,
	0x1a, 0x67, 0x0b, 0x50, 0x97, 0x0b, 0x80, 0xa1, 0xde, 0x80, 0xb6, 0xda, 0xfb, 0x0d, 0x50, 0x7b,
	0xdf, 0xc8, 0x98, 0x5c, 0x98, 0x0a, 0x8a, 0x54, 0xbd, 0xbd, 0x54, 0xc5, 0x98, 0xf6, 0x47, 0xa3,
	0xcf, 0x48, 0x20, 0x3c, 0x32, 0x91, 0x53, 0xb9, 0x2f, 0xff, 0xf8, 0xd5, 0x8d, 0x67, 0x06, 0x5b,
	0xfd, 0x8b, 0xe1, 0x8c, 0x0f, 0xd0, 0x95, 0x2c, 0xe2, 0x62, 0x8e, 0x63, 0x7f, 0x4a, 0x53, 0x51,
	0xce, 0x7d, 0xf7, 0x3f, 0xe6, 0xfe, 0x64, 0x23, 0x19, 0xd0, 0x54, 0x78, 0xad, 0xec, 0x79, 0xd3,
	0xfb, 0x4e, 0x43, 0xad, 0x1d, 0xd0, 0x38, 0x42, 0x5b, 0xd8, 0x8f, 0x58, 0x6a, 0x42, 0x57, 0xeb,
	0x37, 0xdd, 0x97, 0x7e, 0xf9, 0xeb, 0x4c, 0xab, 0x9d, 0x82, 0xda, 0x00, 0x59, 0xe9, 0x5c, 0x65,
	0xe0, 0xa1, 0x92, 0xf7, 0x1e, 0x4b, 0x8d, 0x31, 0x3a, 0x18, 0xd3, 0x04, 0x47, 0xb3, 0xd4, 0x54,
	0x0b, 0xc5, 0x50, 0xf2, 0xd0, 0x29, 0x1c, 0xf4, 0x6a, 0x5c, 0x33, 0x1f, 0xaa, 0xb2, 0x6d, 0x9e,
	0x42, 0xbd, 0xa7, 0x73, 0xb5, 0x0d, 0xbb, 0xe0, 0x37, 0x2a, 0x6c, 0xdd, 0xdb, 0xdd, 0xea, 0x3e,
	0xb2, 0x32, 0xc1, 0xdb, 0x5a, 0x1b, 0xb7, 0x50, 0x53, 0x8e, 0xec, 0xcf, 0x70, 0x42, 0x4c, 0xad,
	0x0b, 0xfd, 0xa6, 0xd7, 0x90, 0x0b, 0x1f, 0xe2, 0x84, 0x18, 0x7d, 0xa4, 0x33, 0xca, 0x85, 0x59,
	0xeb, 0x42, 0xff, 0xaa, 0x6b, 0x3c, 0x5e, 0x80, 0x76, 0x74, 0x74, 0x4f, 0xda, 0xd4, 0xef, 0xea,
	0xe6, 0xd3, 0xa7, 0xda, 0x40, 0xf1, 0x0a, 0x86, 0x31, 0x44, 0x2d, 0xf9, 0xeb, 0x73, 0x3c, 0x0b,
	0x49, 0x6a, 0xd6, 0xa5, 0x91, 0xfb, 0x5a, 0xb1, 0xa1, 0xcc, 0xaa, 0x97, 0xd5, 0x52, 0x7f, 0xa7,
	0x1c, 0x76, 0x13, 0xb8, 0xc6, 0xb5, 0x95, 0x0e, 0x03, 0xc5, 0x43, 0x52, 0xed, 0x15, 0x62, 0xe3,
	0x4d, 0xd4, 0x28, 0xce, 0x69, 0x40, 0x63, 0xf3, 0xa0, 0x30, 0xba, 0xfd, 0x78, 0x01, 0x35, 0xf9,
	0xaf, 0xa5, 0x52, 0x74, 0x9d, 0x5f, 0xf5, 0x74, 0xd9, 0x79, 0x9b, 0x35, 0xef, 0x19, 0xdd, 0xbd,
	0x59, 0xc6, 0x08, 0xa6, 0x34, 0x0a, 0x36, 0x87, 0xac, 0xb6, 0x5c, 0x80, 0x3e, 0xd4, 0x1b, 0x7a,
	0xbb, 0xd6, 0xfb, 0x09, 0xd0, 0xb5, 0x77, 0x39, 0xc1, 0x82, 0xfc, 0x6f, 0x07, 0xff, 0xad, 0x1b,
	0xbf, 0xbf, 0xbd, 0x77, 0xd9, 0xdc, 0xee, 0xde, 0x5d, 0x68, 0x7f, 0xfd, 0x37, 0x54, 0x56, 0xca,
	0x3b, 0xf1, 0x03, 0xa0, 0xd6, 0x7d, 0x22, 0x2e, 0x45, 0xd6, 0x9f, 0x01, 0x5d, 0xf7, 0x08, 0x8b,
	0x71, 0x70, 0x29, 0xbe, 0xad, 0xfb, 0x08, 0x96, 0xe7, 0x96, 0xb2, 0x3a, 0xb7, 0x94, 0x27, 0xe7,
	0x16, 0x3c, 0xcc, 0x2d, 0xf8, 0x3e, 0xb7, 0xe0, 0xd7, 0xdc, 0x82, 0x65, 0x6e, 0xc1, 0x2a, 0xb7,
	0xe0, 0x8f, 0xdc, 0x82, 0x3f, 0x73, 0x4b, 0x79, 0x92, 0x5b, 0xf0, 0xed, 0xda, 0x52, 0xce, 0xd6,
	0x16, 0x2c, 0xd7, 0x96, 0xb2, 0x5a, 0x5b, 0xca, 0xa7, 0x0f, 0x42, 0xca, 0x3e, 0x0f, 0xed, 0x8c,
	0xc6, 0x82, 0x70, 0x8e, 0xed, 0x79, 0xea, 0x14, 0xc5, 0x84, 0xf2, 0xe4, 0x90, 0x71, 0x9a, 0x45,
	0x63, 0xc2, 0x0f, 0xb7, 0xb0, 0xc3, 0x46, 0x21, 0x75, 0xc8, 0x97, 0x62, 0xfb, 0xbe, 0x5d, 0xf8,
	0xcc, 0x8d, 0xea, 0xc5, 0x39, 0xbe, 0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0x85, 0x78,
	0xf5, 0x0e, 0x07, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpLoadBalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpLoadBalancer)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpLoadBalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadBalancer.Equal(that1.HttpLoadBalancer) {
		return false
	}
	return true
}
func (this *HTTPLoadBalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLoadBalancer)
	if !ok {
		that2, ok := that.(HTTPLoadBalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadBalancer.Equal(that1.HttpLoadBalancer) {
		return false
	}
	if !this.VirtualHost.Equal(that1.VirtualHost) {
		return false
	}
	return true
}
func (this *VirtualHost) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHost)
	if !ok {
		that2, ok := that.(VirtualHost)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VirtualIps) != len(that1.VirtualIps) {
		return false
	}
	for i := range this.VirtualIps {
		if this.VirtualIps[i] != that1.VirtualIps[i] {
			return false
		}
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.HostName != that1.HostName {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *VirtualHost_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHost_Port)
	if !ok {
		that2, ok := that.(VirtualHost_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *VirtualHost_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHost_PortRanges)
	if !ok {
		that2, ok := that.(VirtualHost_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpLoadBalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpLoadBalancer)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpLoadBalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadBalancer.Equal(that1.HttpLoadBalancer) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpLoadBalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpLoadBalancer)
	if !ok {
		that2, ok := that.(GetSpecType_HttpLoadBalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadBalancer.Equal(that1.HttpLoadBalancer) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceType == nil {
		if this.ServiceType != nil {
			return false
		}
	} else if this.ServiceType == nil {
		return false
	} else if !this.ServiceType.Equal(that1.ServiceType) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpLoadBalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpLoadBalancer)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpLoadBalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadBalancer.Equal(that1.HttpLoadBalancer) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service_catalog.GlobalSpecType{")
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_HttpLoadBalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service_catalog.GlobalSpecType_HttpLoadBalancer{` +
		`HttpLoadBalancer:` + fmt.Sprintf("%#v", this.HttpLoadBalancer) + `}`}, ", ")
	return s
}
func (this *HTTPLoadBalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service_catalog.HTTPLoadBalancer{")
	if this.HttpLoadBalancer != nil {
		s = append(s, "HttpLoadBalancer: "+fmt.Sprintf("%#v", this.HttpLoadBalancer)+",\n")
	}
	if this.VirtualHost != nil {
		s = append(s, "VirtualHost: "+fmt.Sprintf("%#v", this.VirtualHost)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualHost) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&service_catalog.VirtualHost{")
	s = append(s, "VirtualIps: "+fmt.Sprintf("%#v", this.VirtualIps)+",\n")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualHost_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service_catalog.VirtualHost_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *VirtualHost_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service_catalog.VirtualHost_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service_catalog.CreateSpecType{")
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_HttpLoadBalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service_catalog.CreateSpecType_HttpLoadBalancer{` +
		`HttpLoadBalancer:` + fmt.Sprintf("%#v", this.HttpLoadBalancer) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service_catalog.GetSpecType{")
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_HttpLoadBalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service_catalog.GetSpecType_HttpLoadBalancer{` +
		`HttpLoadBalancer:` + fmt.Sprintf("%#v", this.HttpLoadBalancer) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service_catalog.ReplaceSpecType{")
	if this.ServiceType != nil {
		s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_HttpLoadBalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service_catalog.ReplaceSpecType_HttpLoadBalancer{` +
		`HttpLoadBalancer:` + fmt.Sprintf("%#v", this.HttpLoadBalancer) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_HttpLoadBalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpLoadBalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadBalancer != nil {
		{
			size, err := m.HttpLoadBalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *HTTPLoadBalancer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPLoadBalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLoadBalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VirtualHost != nil {
		{
			size, err := m.VirtualHost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HttpLoadBalancer != nil {
		{
			size, err := m.HttpLoadBalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualHost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualHost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualHost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.VirtualIps) > 0 {
		for iNdEx := len(m.VirtualIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VirtualIps[iNdEx])
			copy(dAtA[i:], m.VirtualIps[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.VirtualIps[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VirtualHost_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualHost_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *VirtualHost_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualHost_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_HttpLoadBalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpLoadBalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadBalancer != nil {
		{
			size, err := m.HttpLoadBalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_HttpLoadBalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpLoadBalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadBalancer != nil {
		{
			size, err := m.HttpLoadBalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceType != nil {
		{
			size := m.ServiceType.Size()
			i -= size
			if _, err := m.ServiceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_HttpLoadBalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpLoadBalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadBalancer != nil {
		{
			size, err := m.HttpLoadBalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *GlobalSpecType_HttpLoadBalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadBalancer != nil {
		l = m.HttpLoadBalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HTTPLoadBalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadBalancer != nil {
		l = m.HttpLoadBalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VirtualHost != nil {
		l = m.VirtualHost.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VirtualHost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VirtualIps) > 0 {
		for _, s := range m.VirtualIps {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VirtualHost_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *VirtualHost_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *CreateSpecType_HttpLoadBalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadBalancer != nil {
		l = m.HttpLoadBalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *GetSpecType_HttpLoadBalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadBalancer != nil {
		l = m.HttpLoadBalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceType != nil {
		n += m.ServiceType.Size()
	}
	return n
}

func (m *ReplaceSpecType_HttpLoadBalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadBalancer != nil {
		l = m.HttpLoadBalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpLoadBalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpLoadBalancer{`,
		`HttpLoadBalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadBalancer), "HTTPLoadBalancer", "HTTPLoadBalancer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLoadBalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLoadBalancer{`,
		`HttpLoadBalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadBalancer), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`VirtualHost:` + strings.Replace(this.VirtualHost.String(), "VirtualHost", "VirtualHost", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualHost) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualHost{`,
		`VirtualIps:` + fmt.Sprintf("%v", this.VirtualIps) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualHost_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualHost_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualHost_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualHost_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpLoadBalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpLoadBalancer{`,
		`HttpLoadBalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadBalancer), "HTTPLoadBalancer", "HTTPLoadBalancer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpLoadBalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpLoadBalancer{`,
		`HttpLoadBalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadBalancer), "HTTPLoadBalancer", "HTTPLoadBalancer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpLoadBalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpLoadBalancer{`,
		`HttpLoadBalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadBalancer), "HTTPLoadBalancer", "HTTPLoadBalancer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPLoadBalancer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &GlobalSpecType_HttpLoadBalancer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPLoadBalancer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPLoadBalancer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPLoadBalancer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpLoadBalancer == nil {
				m.HttpLoadBalancer = &views.ObjectRefType{}
			}
			if err := m.HttpLoadBalancer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualHost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VirtualHost == nil {
				m.VirtualHost = &VirtualHost{}
			}
			if err := m.VirtualHost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualHost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualHost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualHost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIps = append(m.VirtualIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &VirtualHost_Port{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &VirtualHost_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPLoadBalancer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &CreateSpecType_HttpLoadBalancer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPLoadBalancer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &GetSpecType_HttpLoadBalancer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPLoadBalancer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceType = &ReplaceSpecType_HttpLoadBalancer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

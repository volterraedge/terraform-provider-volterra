// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package service_catalog

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetServiceTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetServiceTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServiceType() == nil {
		return nil, nil
	}
	switch m.GetServiceType().(type) {
	case *CreateSpecType_HttpLoadBalancer:

		drInfos, err := m.GetHttpLoadBalancer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpLoadBalancer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "http_load_balancer." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ServiceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["service_type"]; exists {
		val := m.GetServiceType()
		vOpts := append(opts,
			db.WithValidateField("service_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceType().(type) {
	case *CreateSpecType_HttpLoadBalancer:
		if fv, exists := v.FldValidators["service_type.http_load_balancer"]; exists {
			val := m.GetServiceType().(*CreateSpecType_HttpLoadBalancer).HttpLoadBalancer
			vOpts := append(opts,
				db.WithValidateField("service_type"),
				db.WithValidateField("http_load_balancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceType := v.ServiceTypeValidationRuleHandler
	rulesServiceType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceType(rulesServiceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.service_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_type"] = vFn

	v.FldValidators["service_type.http_load_balancer"] = HTTPLoadBalancerValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetServiceTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetServiceTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServiceType() == nil {
		return nil, nil
	}
	switch m.GetServiceType().(type) {
	case *GetSpecType_HttpLoadBalancer:

		drInfos, err := m.GetHttpLoadBalancer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpLoadBalancer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "http_load_balancer." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ServiceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["service_type"]; exists {
		val := m.GetServiceType()
		vOpts := append(opts,
			db.WithValidateField("service_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceType().(type) {
	case *GetSpecType_HttpLoadBalancer:
		if fv, exists := v.FldValidators["service_type.http_load_balancer"]; exists {
			val := m.GetServiceType().(*GetSpecType_HttpLoadBalancer).HttpLoadBalancer
			vOpts := append(opts,
				db.WithValidateField("service_type"),
				db.WithValidateField("http_load_balancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceType := v.ServiceTypeValidationRuleHandler
	rulesServiceType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceType(rulesServiceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.service_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_type"] = vFn

	v.FldValidators["service_type.http_load_balancer"] = HTTPLoadBalancerValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetServiceTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetServiceTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServiceType() == nil {
		return nil, nil
	}
	switch m.GetServiceType().(type) {
	case *GlobalSpecType_HttpLoadBalancer:

		drInfos, err := m.GetHttpLoadBalancer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpLoadBalancer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "http_load_balancer." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ServiceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["service_type"]; exists {
		val := m.GetServiceType()
		vOpts := append(opts,
			db.WithValidateField("service_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceType().(type) {
	case *GlobalSpecType_HttpLoadBalancer:
		if fv, exists := v.FldValidators["service_type.http_load_balancer"]; exists {
			val := m.GetServiceType().(*GlobalSpecType_HttpLoadBalancer).HttpLoadBalancer
			vOpts := append(opts,
				db.WithValidateField("service_type"),
				db.WithValidateField("http_load_balancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceType := v.ServiceTypeValidationRuleHandler
	rulesServiceType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceType(rulesServiceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.service_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_type"] = vFn

	v.FldValidators["service_type.http_load_balancer"] = HTTPLoadBalancerValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HTTPLoadBalancer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HTTPLoadBalancer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HTTPLoadBalancer) DeepCopy() *HTTPLoadBalancer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HTTPLoadBalancer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HTTPLoadBalancer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HTTPLoadBalancer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HTTPLoadBalancerValidator().Validate(ctx, m, opts...)
}

func (m *HTTPLoadBalancer) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetHttpLoadBalancerDRefInfo()

}

func (m *HTTPLoadBalancer) GetHttpLoadBalancerDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetHttpLoadBalancer()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("http_loadbalancer.Object")
	dri := db.DRefInfo{
		RefdType:   "http_loadbalancer.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "http_load_balancer",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetHttpLoadBalancerDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *HTTPLoadBalancer) GetHttpLoadBalancerDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}

	vref := m.GetHttpLoadBalancer()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "http_loadbalancer.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateHTTPLoadBalancer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHTTPLoadBalancer) VirtualHostValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for virtual_host")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := VirtualHostValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHTTPLoadBalancer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HTTPLoadBalancer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HTTPLoadBalancer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_load_balancer"]; exists {

		vOpts := append(opts, db.WithValidateField("http_load_balancer"))
		if err := fv(ctx, m.GetHttpLoadBalancer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_host"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_host"))
		if err := fv(ctx, m.GetVirtualHost(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHTTPLoadBalancerValidator = func() *ValidateHTTPLoadBalancer {
	v := &ValidateHTTPLoadBalancer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhVirtualHost := v.VirtualHostValidationRuleHandler
	rulesVirtualHost := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVirtualHost(rulesVirtualHost)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPLoadBalancer.virtual_host: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_host"] = vFn

	v.FldValidators["http_load_balancer"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func HTTPLoadBalancerValidator() db.Validator {
	return DefaultHTTPLoadBalancerValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetServiceTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetServiceTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServiceType() == nil {
		return nil, nil
	}
	switch m.GetServiceType().(type) {
	case *ReplaceSpecType_HttpLoadBalancer:

		drInfos, err := m.GetHttpLoadBalancer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpLoadBalancer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "http_load_balancer." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ServiceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["service_type"]; exists {
		val := m.GetServiceType()
		vOpts := append(opts,
			db.WithValidateField("service_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceType().(type) {
	case *ReplaceSpecType_HttpLoadBalancer:
		if fv, exists := v.FldValidators["service_type.http_load_balancer"]; exists {
			val := m.GetServiceType().(*ReplaceSpecType_HttpLoadBalancer).HttpLoadBalancer
			vOpts := append(opts,
				db.WithValidateField("service_type"),
				db.WithValidateField("http_load_balancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceType := v.ServiceTypeValidationRuleHandler
	rulesServiceType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceType(rulesServiceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.service_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_type"] = vFn

	v.FldValidators["service_type.http_load_balancer"] = HTTPLoadBalancerValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VirtualHost) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VirtualHost) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VirtualHost) DeepCopy() *VirtualHost {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VirtualHost{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VirtualHost) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VirtualHost) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VirtualHostValidator().Validate(ctx, m, opts...)
}

type ValidateVirtualHost struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVirtualHost) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVirtualHost) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}
func (v *ValidateVirtualHost) PortChoicePortRangesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PortRanges, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_ranges")
	}
	return oValidatorFn_PortRanges, nil
}

func (v *ValidateVirtualHost) VirtualIpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for virtual_ips")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for virtual_ips")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated virtual_ips")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items virtual_ips")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateVirtualHost) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateVirtualHost) HostNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_name")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualHost) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualHost) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VirtualHost)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VirtualHost got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *VirtualHost_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*VirtualHost_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VirtualHost_PortRanges:
		if fv, exists := v.FldValidators["port_choice.port_ranges"]; exists {
			val := m.GetPortChoice().(*VirtualHost_PortRanges).PortRanges
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port_ranges"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_ips"]; exists {
		vOpts := append(opts, db.WithValidateField("virtual_ips"))
		if err := fv(ctx, m.GetVirtualIps(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVirtualHostValidator = func() *ValidateVirtualHost {
	v := &ValidateVirtualHost{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualHost.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field VirtualHost.port_choice_port: %s", err)
		panic(errMsg)
	}
	vrhPortChoicePortRanges := v.PortChoicePortRangesValidationRuleHandler
	rulesPortChoicePortRanges := map[string]string{
		"ves.io.schema.rules.string.max_len":                "512",
		"ves.io.schema.rules.string.max_ports":              "64",
		"ves.io.schema.rules.string.min_len":                "1",
		"ves.io.schema.rules.string.unique_port_range_list": "true",
	}
	vFnMap["port_choice.port_ranges"], err = vrhPortChoicePortRanges(rulesPortChoicePortRanges)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field VirtualHost.port_choice_port_ranges: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]
	v.FldValidators["port_choice.port_ranges"] = vFnMap["port_choice.port_ranges"]

	vrhVirtualIps := v.VirtualIpsValidationRuleHandler
	rulesVirtualIps := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.string.ip":          "true",
	}
	vFn, err = vrhVirtualIps(rulesVirtualIps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualHost.virtual_ips: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_ips"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualHost.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhHostName := v.HostNameValidationRuleHandler
	rulesHostName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhHostName(rulesHostName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualHost.host_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_name"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"http\",\"https\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualHost.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	return v
}()

func VirtualHostValidator() db.Validator {
	return DefaultVirtualHostValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetServiceTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServiceType.(type) {
	case nil:
		o.ServiceType = nil

	case *CreateSpecType_HttpLoadBalancer:
		o.ServiceType = &GlobalSpecType_HttpLoadBalancer{HttpLoadBalancer: of.HttpLoadBalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetServiceTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServiceType.(type) {
	case nil:
		r.ServiceType = nil

	case *GlobalSpecType_HttpLoadBalancer:
		r.ServiceType = &CreateSpecType_HttpLoadBalancer{HttpLoadBalancer: of.HttpLoadBalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetServiceTypeFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetServiceTypeToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetServiceTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServiceType.(type) {
	case nil:
		o.ServiceType = nil

	case *GetSpecType_HttpLoadBalancer:
		o.ServiceType = &GlobalSpecType_HttpLoadBalancer{HttpLoadBalancer: of.HttpLoadBalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetServiceTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServiceType.(type) {
	case nil:
		r.ServiceType = nil

	case *GlobalSpecType_HttpLoadBalancer:
		r.ServiceType = &GetSpecType_HttpLoadBalancer{HttpLoadBalancer: of.HttpLoadBalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetServiceTypeFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetServiceTypeToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetServiceTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServiceType.(type) {
	case nil:
		o.ServiceType = nil

	case *ReplaceSpecType_HttpLoadBalancer:
		o.ServiceType = &GlobalSpecType_HttpLoadBalancer{HttpLoadBalancer: of.HttpLoadBalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetServiceTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServiceType.(type) {
	case nil:
		r.ServiceType = nil

	case *GlobalSpecType_HttpLoadBalancer:
		r.ServiceType = &ReplaceSpecType_HttpLoadBalancer{HttpLoadBalancer: of.HttpLoadBalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetServiceTypeFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetServiceTypeToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/view_options.proto

package schema

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LabelKeyClass
//
// x-displayName: "LabelKeyClass"
// LabelKeyClass is an enumeration of supported label key classes
type LabelKeyClass int32

const (
	// Includes label keys with generic names such as "my-key", "foobar-key" etc.
	KEY_CLASS_GENERIC LabelKeyClass = 0
	// Keys that are obtained using GET on /api/config/namespaces/shared/known_label_keys
	// Includes volterra-defined known label keys such as "ves.io/app_type", "ves.io/app" and "ves.io/siteType" as well as tenant-defined known keys such as
	// "my-key", "acme-key-foo" and "acme-key-bar". Note that tenant-defined known keys don't have any standard name format - they are known keys because they
	// have been explicitly created as known keys by the tenant and are stored in the configuration as known_label_keys.
	KEY_CLASS_KNOWN LabelKeyClass = 1
	// Includes implicit geoip label keys "geoip.ves.io/city", "geoip.ves.io/region" and "geoip.ves.io/country"
	KEY_CLASS_GEOIP LabelKeyClass = 2
	// Includes implicit label keys associated with packets/requests by the infrastructure e.g. "implicit.ves.io/namespace"
	KEY_CLASS_IMPLICIT LabelKeyClass = 3
)

var LabelKeyClass_name = map[int32]string{
	0: "KEY_CLASS_GENERIC",
	1: "KEY_CLASS_KNOWN",
	2: "KEY_CLASS_GEOIP",
	3: "KEY_CLASS_IMPLICIT",
}

var LabelKeyClass_value = map[string]int32{
	"KEY_CLASS_GENERIC":  0,
	"KEY_CLASS_KNOWN":    1,
	"KEY_CLASS_GEOIP":    2,
	"KEY_CLASS_IMPLICIT": 3,
}

func (LabelKeyClass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{0}
}

// InputSizeType
//
// x-displayName: "InputSizeType"
// InputSizeType is enumeration of supported input box sizes in UI
type InputSizeType int32

const (
	// 1 column wide input
	INPUT_SIZE_SMALL InputSizeType = 0
	// 2 column wide input
	INPUT_SIZE_MEDIUM InputSizeType = 1
	// 3 column wide input
	INPUT_SIZE_FULL InputSizeType = 2
	// Use bigger multi-line text box
	INPUT_SIZE_MULTI_LINE InputSizeType = 3
	// Use bigger multi-line text box
	INPUT_CUSTOM_URL_STRING InputSizeType = 4
)

var InputSizeType_name = map[int32]string{
	0: "INPUT_SIZE_SMALL",
	1: "INPUT_SIZE_MEDIUM",
	2: "INPUT_SIZE_FULL",
	3: "INPUT_SIZE_MULTI_LINE",
	4: "INPUT_CUSTOM_URL_STRING",
}

var InputSizeType_value = map[string]int32{
	"INPUT_SIZE_SMALL":        0,
	"INPUT_SIZE_MEDIUM":       1,
	"INPUT_SIZE_FULL":         2,
	"INPUT_SIZE_MULTI_LINE":   3,
	"INPUT_CUSTOM_URL_STRING": 4,
}

func (InputSizeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{1}
}

// UnitType
//
// x-displayName: "Unit"
// UnitType is enumeration of units for scalar fields
type UnitType int32

const (
	UNIT_MILLISECONDS           UnitType = 0
	UNIT_SECONDS                UnitType = 1
	UNIT_MINUTES                UnitType = 2
	UNIT_HOURS                  UnitType = 3
	UNIT_DAYS                   UnitType = 4
	UNIT_BYTES                  UnitType = 10
	UNIT_KBYTES                 UnitType = 11
	UNIT_MBYTES                 UnitType = 12
	UNIT_GBYTES                 UnitType = 13
	UNIT_TBYTES                 UnitType = 14
	UNIT_KIBIBYTES              UnitType = 15
	UNIT_MIBIBYTES              UnitType = 16
	UNIT_GIBIBYTES              UnitType = 17
	UNIT_TEBIBYTES              UnitType = 18
	UNIT_BITS_PER_SECOND        UnitType = 20
	UNIT_BYTES_PER_SECOND       UnitType = 21
	UNIT_KBITS_PER_SECOND       UnitType = 22
	UNIT_KBYTES_PER_SECOND      UnitType = 23
	UNIT_MBITS_PER_SECOND       UnitType = 24
	UNIT_MBYTES_PER_SECOND      UnitType = 25
	UNIT_CONNECTIONS_PER_SECOND UnitType = 30
	UNIT_ERRORS_PER_SECOND      UnitType = 31
	UNIT_PACKETS_PER_SECOND     UnitType = 32
	UNIT_REQUESTS_PER_SECOND    UnitType = 33
)

var UnitType_name = map[int32]string{
	0:  "UNIT_MILLISECONDS",
	1:  "UNIT_SECONDS",
	2:  "UNIT_MINUTES",
	3:  "UNIT_HOURS",
	4:  "UNIT_DAYS",
	10: "UNIT_BYTES",
	11: "UNIT_KBYTES",
	12: "UNIT_MBYTES",
	13: "UNIT_GBYTES",
	14: "UNIT_TBYTES",
	15: "UNIT_KIBIBYTES",
	16: "UNIT_MIBIBYTES",
	17: "UNIT_GIBIBYTES",
	18: "UNIT_TEBIBYTES",
	20: "UNIT_BITS_PER_SECOND",
	21: "UNIT_BYTES_PER_SECOND",
	22: "UNIT_KBITS_PER_SECOND",
	23: "UNIT_KBYTES_PER_SECOND",
	24: "UNIT_MBITS_PER_SECOND",
	25: "UNIT_MBYTES_PER_SECOND",
	30: "UNIT_CONNECTIONS_PER_SECOND",
	31: "UNIT_ERRORS_PER_SECOND",
	32: "UNIT_PACKETS_PER_SECOND",
	33: "UNIT_REQUESTS_PER_SECOND",
}

var UnitType_value = map[string]int32{
	"UNIT_MILLISECONDS":           0,
	"UNIT_SECONDS":                1,
	"UNIT_MINUTES":                2,
	"UNIT_HOURS":                  3,
	"UNIT_DAYS":                   4,
	"UNIT_BYTES":                  10,
	"UNIT_KBYTES":                 11,
	"UNIT_MBYTES":                 12,
	"UNIT_GBYTES":                 13,
	"UNIT_TBYTES":                 14,
	"UNIT_KIBIBYTES":              15,
	"UNIT_MIBIBYTES":              16,
	"UNIT_GIBIBYTES":              17,
	"UNIT_TEBIBYTES":              18,
	"UNIT_BITS_PER_SECOND":        20,
	"UNIT_BYTES_PER_SECOND":       21,
	"UNIT_KBITS_PER_SECOND":       22,
	"UNIT_KBYTES_PER_SECOND":      23,
	"UNIT_MBITS_PER_SECOND":       24,
	"UNIT_MBYTES_PER_SECOND":      25,
	"UNIT_CONNECTIONS_PER_SECOND": 30,
	"UNIT_ERRORS_PER_SECOND":      31,
	"UNIT_PACKETS_PER_SECOND":     32,
	"UNIT_REQUESTS_PER_SECOND":    33,
}

func (UnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{2}
}

// MapRenderStyle
//
// x-displayName: "MapRenderStyle"
// MapRenderStyle is enumeration of supported rendering styles for map
type MapRenderStyle int32

const (
	// Render using widget built for labels
	MAP_RENDER_LABELS MapRenderStyle = 0
	// Render as table of (string,string)
	MAP_RENDER_TABLE MapRenderStyle = 1
)

var MapRenderStyle_name = map[int32]string{
	0: "MAP_RENDER_LABELS",
	1: "MAP_RENDER_TABLE",
}

var MapRenderStyle_value = map[string]int32{
	"MAP_RENDER_LABELS": 0,
	"MAP_RENDER_TABLE":  1,
}

func (MapRenderStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{3}
}

// RepeatedRenderStyle
//
// x-displayName: "RepeatedRenderStyle"
// RepeatedRenderStyle is enumeration of supported rendering styles for repeated field
type RepeatedRenderStyle int32

const (
	// Render each item as row in a table
	REPEATED_RENDER_TABLE RepeatedRenderStyle = 0
	// Render each item as a tile
	REPEATED_RENDER_TILES RepeatedRenderStyle = 1
)

var RepeatedRenderStyle_name = map[int32]string{
	0: "REPEATED_RENDER_TABLE",
	1: "REPEATED_RENDER_TILES",
}

var RepeatedRenderStyle_value = map[string]int32{
	"REPEATED_RENDER_TABLE": 0,
	"REPEATED_RENDER_TILES": 1,
}

func (RepeatedRenderStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{4}
}

// choices
//
// x-displayName: "Choices"
// List of common choices for a field.
type Choices struct {
	// Title
	//
	// x-displayName "displayname"
	// field number of a field inside oneof that should be default choice in UI.
	Choice []string `protobuf:"bytes,1,rep,name=choice,proto3" json:"choice,omitempty"`
}

func (m *Choices) Reset()      { *m = Choices{} }
func (*Choices) ProtoMessage() {}
func (*Choices) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{0}
}
func (m *Choices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Choices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Choices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Choices.Merge(m, src)
}
func (m *Choices) XXX_Size() int {
	return m.Size()
}
func (m *Choices) XXX_DiscardUnknown() {
	xxx_messageInfo_Choices.DiscardUnknown(m)
}

var xxx_messageInfo_Choices proto.InternalMessageInfo

func (m *Choices) GetChoice() []string {
	if m != nil {
		return m.Choice
	}
	return nil
}

// choice item
//
// x-displayName: "Choice Item"
// A common choice value and it's description.
type ChoiceItem struct {
	// value
	//
	// x-displayName: "Value"
	// Value of the common choice.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// Description of the common choice.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ChoiceItem) Reset()      { *m = ChoiceItem{} }
func (*ChoiceItem) ProtoMessage() {}
func (*ChoiceItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{1}
}
func (m *ChoiceItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChoiceItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChoiceItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChoiceItem.Merge(m, src)
}
func (m *ChoiceItem) XXX_Size() int {
	return m.Size()
}
func (m *ChoiceItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ChoiceItem.DiscardUnknown(m)
}

var xxx_messageInfo_ChoiceItem proto.InternalMessageInfo

func (m *ChoiceItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ChoiceItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// choice item list
//
// x-displayName: "Choice Item List"
// List of common choice items.
type ChoiceItemList struct {
	// choice items
	//
	// x-displayName: "Choice Items"
	// List of common choice items.
	ChoiceItems []*ChoiceItem `protobuf:"bytes,1,rep,name=choice_items,json=choiceItems,proto3" json:"choice_items,omitempty"`
}

func (m *ChoiceItemList) Reset()      { *m = ChoiceItemList{} }
func (*ChoiceItemList) ProtoMessage() {}
func (*ChoiceItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{2}
}
func (m *ChoiceItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChoiceItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChoiceItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChoiceItemList.Merge(m, src)
}
func (m *ChoiceItemList) XXX_Size() int {
	return m.Size()
}
func (m *ChoiceItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChoiceItemList.DiscardUnknown(m)
}

var xxx_messageInfo_ChoiceItemList proto.InternalMessageInfo

func (m *ChoiceItemList) GetChoiceItems() []*ChoiceItem {
	if m != nil {
		return m.ChoiceItems
	}
	return nil
}

// label key class list
//
// x-displayName: "Label Key Class List"
// List of label key classes.
type LabelKeyClassList struct {
	// key classes
	//
	// x-displayName: "Choice Items"
	// List of common choice items.
	KeyClasses []LabelKeyClass `protobuf:"varint,1,rep,packed,name=key_classes,json=keyClasses,proto3,enum=ves.io.schema.LabelKeyClass" json:"key_classes,omitempty"`
}

func (m *LabelKeyClassList) Reset()      { *m = LabelKeyClassList{} }
func (*LabelKeyClassList) ProtoMessage() {}
func (*LabelKeyClassList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{3}
}
func (m *LabelKeyClassList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelKeyClassList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LabelKeyClassList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelKeyClassList.Merge(m, src)
}
func (m *LabelKeyClassList) XXX_Size() int {
	return m.Size()
}
func (m *LabelKeyClassList) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelKeyClassList.DiscardUnknown(m)
}

var xxx_messageInfo_LabelKeyClassList proto.InternalMessageInfo

func (m *LabelKeyClassList) GetKeyClasses() []LabelKeyClass {
	if m != nil {
		return m.KeyClasses
	}
	return nil
}

// HiddenConditions
//
// x-displayName: "HiddenConditions"
// HiddenConditions specifies a set of conditions for which a field should be hidden.
type HiddenConditions struct {
	// root_object_in
	//
	// x-displayName: "Root Object In"
	// List of root object types for which the field should be hidden.
	RootObjectIn []string `protobuf:"bytes,1,rep,name=root_object_in,json=rootObjectIn,proto3" json:"root_object_in,omitempty"`
	// ancestor_message_in
	//
	// x-displayName: "Ancestor Message In"
	// List of ancestor message types for which the field should be hidden.
	AncestorMessageIn []string `protobuf:"bytes,2,rep,name=ancestor_message_in,json=ancestorMessageIn,proto3" json:"ancestor_message_in,omitempty"`
	// path_suffix_in
	//
	// x-displayName: "Path Suffix In"
	// List of path suffixes for which the field should be hidden. Note that each
	// entry is a path suffix containing field names, not message types.
	PathSuffixIn []string `protobuf:"bytes,3,rep,name=path_suffix_in,json=pathSuffixIn,proto3" json:"path_suffix_in,omitempty"`
}

func (m *HiddenConditions) Reset()      { *m = HiddenConditions{} }
func (*HiddenConditions) ProtoMessage() {}
func (*HiddenConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{4}
}
func (m *HiddenConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HiddenConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HiddenConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HiddenConditions.Merge(m, src)
}
func (m *HiddenConditions) XXX_Size() int {
	return m.Size()
}
func (m *HiddenConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_HiddenConditions.DiscardUnknown(m)
}

var xxx_messageInfo_HiddenConditions proto.InternalMessageInfo

func (m *HiddenConditions) GetRootObjectIn() []string {
	if m != nil {
		return m.RootObjectIn
	}
	return nil
}

func (m *HiddenConditions) GetAncestorMessageIn() []string {
	if m != nil {
		return m.AncestorMessageIn
	}
	return nil
}

func (m *HiddenConditions) GetPathSuffixIn() []string {
	if m != nil {
		return m.PathSuffixIn
	}
	return nil
}

// field view options
//
// x-displayName "Field View Options"
// FieldViewOptions encapsulates the view options for each type of field. Depending on the
// field, the correct set should be used to ensure proper rendering.
type FieldViewOptions struct {
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	//
	// Types that are valid to be assigned to Type:
	//	*FieldViewOptions_NewForm
	//	*FieldViewOptions_InputBoxSize
	//	*FieldViewOptions_DefaultValue
	//	*FieldViewOptions_CommonChoices
	//	*FieldViewOptions_DisplayName
	//	*FieldViewOptions_Description
	//	*FieldViewOptions_Map
	//	*FieldViewOptions_Repeated
	//	*FieldViewOptions_InNamespaceTypes
	//	*FieldViewOptions_InputBoxFormat
	Type isFieldViewOptions_Type `protobuf_oneof:"type"`
}

func (m *FieldViewOptions) Reset()      { *m = FieldViewOptions{} }
func (*FieldViewOptions) ProtoMessage() {}
func (*FieldViewOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{5}
}
func (m *FieldViewOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldViewOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FieldViewOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldViewOptions.Merge(m, src)
}
func (m *FieldViewOptions) XXX_Size() int {
	return m.Size()
}
func (m *FieldViewOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldViewOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FieldViewOptions proto.InternalMessageInfo

type isFieldViewOptions_Type interface {
	isFieldViewOptions_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldViewOptions_NewForm struct {
	NewForm bool `protobuf:"varint,3000,opt,name=new_form,json=newForm,proto3,oneof" json:"new_form,omitempty"`
}
type FieldViewOptions_InputBoxSize struct {
	InputBoxSize InputSizeType `protobuf:"varint,3001,opt,name=input_box_size,json=inputBoxSize,proto3,enum=ves.io.schema.InputSizeType,oneof" json:"input_box_size,omitempty"`
}
type FieldViewOptions_DefaultValue struct {
	DefaultValue string `protobuf:"bytes,3002,opt,name=default_value,json=defaultValue,proto3,oneof" json:"default_value,omitempty"`
}
type FieldViewOptions_CommonChoices struct {
	CommonChoices *Choices `protobuf:"bytes,3003,opt,name=common_choices,json=commonChoices,proto3,oneof" json:"common_choices,omitempty"`
}
type FieldViewOptions_DisplayName struct {
	DisplayName string `protobuf:"bytes,3004,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
}
type FieldViewOptions_Description struct {
	Description string `protobuf:"bytes,3005,opt,name=description,proto3,oneof" json:"description,omitempty"`
}
type FieldViewOptions_Map struct {
	Map *MapOptions `protobuf:"bytes,3009,opt,name=map,proto3,oneof" json:"map,omitempty"`
}
type FieldViewOptions_Repeated struct {
	Repeated *RepeatedOptions `protobuf:"bytes,3010,opt,name=repeated,proto3,oneof" json:"repeated,omitempty"`
}
type FieldViewOptions_InNamespaceTypes struct {
	InNamespaceTypes string `protobuf:"bytes,3011,opt,name=in_namespace_types,json=inNamespaceTypes,proto3,oneof" json:"in_namespace_types,omitempty"`
}
type FieldViewOptions_InputBoxFormat struct {
	InputBoxFormat string `protobuf:"bytes,3012,opt,name=input_box_format,json=inputBoxFormat,proto3,oneof" json:"input_box_format,omitempty"`
}

func (*FieldViewOptions_NewForm) isFieldViewOptions_Type()          {}
func (*FieldViewOptions_InputBoxSize) isFieldViewOptions_Type()     {}
func (*FieldViewOptions_DefaultValue) isFieldViewOptions_Type()     {}
func (*FieldViewOptions_CommonChoices) isFieldViewOptions_Type()    {}
func (*FieldViewOptions_DisplayName) isFieldViewOptions_Type()      {}
func (*FieldViewOptions_Description) isFieldViewOptions_Type()      {}
func (*FieldViewOptions_Map) isFieldViewOptions_Type()              {}
func (*FieldViewOptions_Repeated) isFieldViewOptions_Type()         {}
func (*FieldViewOptions_InNamespaceTypes) isFieldViewOptions_Type() {}
func (*FieldViewOptions_InputBoxFormat) isFieldViewOptions_Type()   {}

func (m *FieldViewOptions) GetType() isFieldViewOptions_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FieldViewOptions) GetNewForm() bool {
	if x, ok := m.GetType().(*FieldViewOptions_NewForm); ok {
		return x.NewForm
	}
	return false
}

func (m *FieldViewOptions) GetInputBoxSize() InputSizeType {
	if x, ok := m.GetType().(*FieldViewOptions_InputBoxSize); ok {
		return x.InputBoxSize
	}
	return INPUT_SIZE_SMALL
}

func (m *FieldViewOptions) GetDefaultValue() string {
	if x, ok := m.GetType().(*FieldViewOptions_DefaultValue); ok {
		return x.DefaultValue
	}
	return ""
}

func (m *FieldViewOptions) GetCommonChoices() *Choices {
	if x, ok := m.GetType().(*FieldViewOptions_CommonChoices); ok {
		return x.CommonChoices
	}
	return nil
}

func (m *FieldViewOptions) GetDisplayName() string {
	if x, ok := m.GetType().(*FieldViewOptions_DisplayName); ok {
		return x.DisplayName
	}
	return ""
}

func (m *FieldViewOptions) GetDescription() string {
	if x, ok := m.GetType().(*FieldViewOptions_Description); ok {
		return x.Description
	}
	return ""
}

func (m *FieldViewOptions) GetMap() *MapOptions {
	if x, ok := m.GetType().(*FieldViewOptions_Map); ok {
		return x.Map
	}
	return nil
}

func (m *FieldViewOptions) GetRepeated() *RepeatedOptions {
	if x, ok := m.GetType().(*FieldViewOptions_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (m *FieldViewOptions) GetInNamespaceTypes() string {
	if x, ok := m.GetType().(*FieldViewOptions_InNamespaceTypes); ok {
		return x.InNamespaceTypes
	}
	return ""
}

func (m *FieldViewOptions) GetInputBoxFormat() string {
	if x, ok := m.GetType().(*FieldViewOptions_InputBoxFormat); ok {
		return x.InputBoxFormat
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldViewOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldViewOptions_NewForm)(nil),
		(*FieldViewOptions_InputBoxSize)(nil),
		(*FieldViewOptions_DefaultValue)(nil),
		(*FieldViewOptions_CommonChoices)(nil),
		(*FieldViewOptions_DisplayName)(nil),
		(*FieldViewOptions_Description)(nil),
		(*FieldViewOptions_Map)(nil),
		(*FieldViewOptions_Repeated)(nil),
		(*FieldViewOptions_InNamespaceTypes)(nil),
		(*FieldViewOptions_InputBoxFormat)(nil),
	}
}

type MapOptions struct {
	// style
	//
	// x-displayName "Rendering Style"
	// Style specifies the rendering style to use for the map
	Style MapRenderStyle `protobuf:"varint,1,opt,name=style,proto3,enum=ves.io.schema.MapRenderStyle" json:"style,omitempty"`
	// keys
	//
	// x-displayName "Keys Options"
	// Keys specifies the view options to be applied to each key in the field.
	Keys *FieldViewOptions `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
	// values
	//
	// x-displayName "Values Options"
	// Values specifies the view options to be applied to each key in the field.
	Values *FieldViewOptions `protobuf:"bytes,3,opt,name=values,proto3" json:"values,omitempty"`
}

func (m *MapOptions) Reset()      { *m = MapOptions{} }
func (*MapOptions) ProtoMessage() {}
func (*MapOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{6}
}
func (m *MapOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MapOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapOptions.Merge(m, src)
}
func (m *MapOptions) XXX_Size() int {
	return m.Size()
}
func (m *MapOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MapOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MapOptions proto.InternalMessageInfo

func (m *MapOptions) GetStyle() MapRenderStyle {
	if m != nil {
		return m.Style
	}
	return MAP_RENDER_LABELS
}

func (m *MapOptions) GetKeys() *FieldViewOptions {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *MapOptions) GetValues() *FieldViewOptions {
	if m != nil {
		return m.Values
	}
	return nil
}

type RepeatedOptions struct {
	// style
	//
	// x-displayName "Rendering Style"
	// Style specifies the rendering style to use for repeated field
	Style RepeatedRenderStyle `protobuf:"varint,1,opt,name=style,proto3,enum=ves.io.schema.RepeatedRenderStyle" json:"style,omitempty"`
	// ordered_list
	//
	// x-displayName "Ordered List"
	// Order of items in repeated field is significant.
	OrderedList bool `protobuf:"varint,2,opt,name=ordered_list,json=orderedList,proto3" json:"ordered_list,omitempty"`
}

func (m *RepeatedOptions) Reset()      { *m = RepeatedOptions{} }
func (*RepeatedOptions) ProtoMessage() {}
func (*RepeatedOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{7}
}
func (m *RepeatedOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RepeatedOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedOptions.Merge(m, src)
}
func (m *RepeatedOptions) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedOptions proto.InternalMessageInfo

func (m *RepeatedOptions) GetStyle() RepeatedRenderStyle {
	if m != nil {
		return m.Style
	}
	return REPEATED_RENDER_TABLE
}

func (m *RepeatedOptions) GetOrderedList() bool {
	if m != nil {
		return m.OrderedList
	}
	return false
}

// Tile
//
// x-displayName "Tile"
// Title of the Tile and comma separated list of fields
type Tile struct {
	// Title
	//
	// x-displayName "Title"
	// Title of the Tile
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Fields
	//
	// x-displayName "Fields"
	// comma separated lists of field numbers
	Fields string `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	// Help
	//
	// x-displayName "Help"
	// help string for tile
	Help string `protobuf:"bytes,3,opt,name=help,proto3" json:"help,omitempty"`
	// Inherit Description
	//
	// x-displayName "Help"
	// inherit description from parent field
	InheritDescription bool `protobuf:"varint,4,opt,name=inherit_description,json=inheritDescription,proto3" json:"inherit_description,omitempty"`
}

func (m *Tile) Reset()      { *m = Tile{} }
func (*Tile) ProtoMessage() {}
func (*Tile) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{8}
}
func (m *Tile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Tile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tile.Merge(m, src)
}
func (m *Tile) XXX_Size() int {
	return m.Size()
}
func (m *Tile) XXX_DiscardUnknown() {
	xxx_messageInfo_Tile.DiscardUnknown(m)
}

var xxx_messageInfo_Tile proto.InternalMessageInfo

func (m *Tile) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Tile) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *Tile) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *Tile) GetInheritDescription() bool {
	if m != nil {
		return m.InheritDescription
	}
	return false
}

// Tiles
//
// x-displayName "Tiles"
// List of Tiles in a message
type Tiles struct {
	// Title
	//
	// x-displayName "displayname"
	// field number of a field inside oneof that should be default choice in UI.
	TileList []*Tile `protobuf:"bytes,1,rep,name=tile_list,json=tileList,proto3" json:"tile_list,omitempty"`
}

func (m *Tiles) Reset()      { *m = Tiles{} }
func (*Tiles) ProtoMessage() {}
func (*Tiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{9}
}
func (m *Tiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Tiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tiles.Merge(m, src)
}
func (m *Tiles) XXX_Size() int {
	return m.Size()
}
func (m *Tiles) XXX_DiscardUnknown() {
	xxx_messageInfo_Tiles.DiscardUnknown(m)
}

var xxx_messageInfo_Tiles proto.InternalMessageInfo

func (m *Tiles) GetTileList() []*Tile {
	if m != nil {
		return m.TileList
	}
	return nil
}

var E_AdvancedLevel = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3000,
	Name:          "ves.io.schema.advanced_level",
	Tag:           "varint,3000,opt,name=advanced_level",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_SiteType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3001,
	Name:          "ves.io.schema.site_type",
	Tag:           "bytes,3001,opt,name=site_type",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_NewForm = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3002,
	Name:          "ves.io.schema.new_form",
	Tag:           "varint,3002,opt,name=new_form",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DefaultValue = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3003,
	Name:          "ves.io.schema.default_value",
	Tag:           "bytes,3003,opt,name=default_value",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_CommonChoices = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*Choices)(nil),
	Field:         3004,
	Name:          "ves.io.schema.common_choices",
	Tag:           "bytes,3004,opt,name=common_choices",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Hidden = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3005,
	Name:          "ves.io.schema.hidden",
	Tag:           "varint,3005,opt,name=hidden",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Anonymous = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3006,
	Name:          "ves.io.schema.anonymous",
	Tag:           "varint,3006,opt,name=anonymous",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_InputBoxSize = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*InputSizeType)(nil),
	Field:         3007,
	Name:          "ves.io.schema.input_box_size",
	Tag:           "varint,3007,opt,name=input_box_size,enum=ves.io.schema.InputSizeType",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DisableCreate = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3008,
	Name:          "ves.io.schema.disable_create",
	Tag:           "varint,3008,opt,name=disable_create",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Unit = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*UnitType)(nil),
	Field:         3009,
	Name:          "ves.io.schema.unit",
	Tag:           "varint,3009,opt,name=unit,enum=ves.io.schema.UnitType",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_CommonChoiceItems = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*ChoiceItemList)(nil),
	Field:         3010,
	Name:          "ves.io.schema.common_choice_items",
	Tag:           "bytes,3010,opt,name=common_choice_items",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_LabelKeyClasses = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*LabelKeyClassList)(nil),
	Field:         3011,
	Name:          "ves.io.schema.label_key_classes",
	Tag:           "bytes,3011,opt,name=label_key_classes",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_InputBoxFormat = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3012,
	Name:          "ves.io.schema.input_box_format",
	Tag:           "bytes,3012,opt,name=input_box_format",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_HiddenConditions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*HiddenConditions)(nil),
	Field:         3013,
	Name:          "ves.io.schema.hidden_conditions",
	Tag:           "bytes,3013,opt,name=hidden_conditions",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DefaultEnum = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3000,
	Name:          "ves.io.schema.default_enum",
	Tag:           "varint,3000,opt,name=default_enum",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_EnumDisplayOrder = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3004,
	Name:          "ves.io.schema.enum_display_order",
	Tag:           "bytes,3004,opt,name=enum_display_order",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_HiddenValue = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3000,
	Name:          "ves.io.schema.hidden_value",
	Tag:           "varint,3000,opt,name=hidden_value",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DefaultChoice = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3000,
	Name:          "ves.io.schema.default_choice",
	Tag:           "varint,3000,opt,name=default_choice",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofAdvancedLevel = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3001,
	Name:          "ves.io.schema.oneof_advanced_level",
	Tag:           "varint,3001,opt,name=oneof_advanced_level",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofFieldNumber = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3002,
	Name:          "ves.io.schema.oneof_field_number",
	Tag:           "varint,3002,opt,name=oneof_field_number",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofDisplayOrder = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3004,
	Name:          "ves.io.schema.oneof_display_order",
	Tag:           "bytes,3004,opt,name=oneof_display_order",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofIsImmutable = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3005,
	Name:          "ves.io.schema.oneof_is_immutable",
	Tag:           "varint,3005,opt,name=oneof_is_immutable",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofHidden = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3006,
	Name:          "ves.io.schema.oneof_hidden",
	Tag:           "varint,3006,opt,name=oneof_hidden",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofInputBoxSize = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*InputSizeType)(nil),
	Field:         3007,
	Name:          "ves.io.schema.oneof_input_box_size",
	Tag:           "varint,3007,opt,name=oneof_input_box_size,enum=ves.io.schema.InputSizeType",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofInNamespaceTypes = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3008,
	Name:          "ves.io.schema.oneof_in_namespace_types",
	Tag:           "bytes,3008,opt,name=oneof_in_namespace_types",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofHiddenConditions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*HiddenConditions)(nil),
	Field:         3009,
	Name:          "ves.io.schema.oneof_hidden_conditions",
	Tag:           "bytes,3009,opt,name=oneof_hidden_conditions",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_ViewOptions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*FieldViewOptions)(nil),
	Field:         929292,
	Name:          "ves.io.schema.view_options",
	Tag:           "bytes,929292,opt,name=view_options",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Tiles = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*Tiles)(nil),
	Field:         3000,
	Name:          "ves.io.schema.tiles",
	Tag:           "bytes,3000,opt,name=tiles",
	Filename:      "ves.io/schema/view_options.proto",
}

func init() {
	proto.RegisterEnum("ves.io.schema.LabelKeyClass", LabelKeyClass_name, LabelKeyClass_value)
	proto.RegisterEnum("ves.io.schema.InputSizeType", InputSizeType_name, InputSizeType_value)
	proto.RegisterEnum("ves.io.schema.UnitType", UnitType_name, UnitType_value)
	proto.RegisterEnum("ves.io.schema.MapRenderStyle", MapRenderStyle_name, MapRenderStyle_value)
	proto.RegisterEnum("ves.io.schema.RepeatedRenderStyle", RepeatedRenderStyle_name, RepeatedRenderStyle_value)
	proto.RegisterType((*Choices)(nil), "ves.io.schema.Choices")
	proto.RegisterType((*ChoiceItem)(nil), "ves.io.schema.ChoiceItem")
	proto.RegisterType((*ChoiceItemList)(nil), "ves.io.schema.ChoiceItemList")
	proto.RegisterType((*LabelKeyClassList)(nil), "ves.io.schema.LabelKeyClassList")
	proto.RegisterType((*HiddenConditions)(nil), "ves.io.schema.HiddenConditions")
	proto.RegisterType((*FieldViewOptions)(nil), "ves.io.schema.FieldViewOptions")
	proto.RegisterType((*MapOptions)(nil), "ves.io.schema.MapOptions")
	proto.RegisterType((*RepeatedOptions)(nil), "ves.io.schema.RepeatedOptions")
	proto.RegisterType((*Tile)(nil), "ves.io.schema.Tile")
	proto.RegisterType((*Tiles)(nil), "ves.io.schema.Tiles")
	proto.RegisterExtension(E_AdvancedLevel)
	proto.RegisterExtension(E_SiteType)
	proto.RegisterExtension(E_NewForm)
	proto.RegisterExtension(E_DefaultValue)
	proto.RegisterExtension(E_CommonChoices)
	proto.RegisterExtension(E_Hidden)
	proto.RegisterExtension(E_Anonymous)
	proto.RegisterExtension(E_InputBoxSize)
	proto.RegisterExtension(E_DisableCreate)
	proto.RegisterExtension(E_Unit)
	proto.RegisterExtension(E_CommonChoiceItems)
	proto.RegisterExtension(E_LabelKeyClasses)
	proto.RegisterExtension(E_InputBoxFormat)
	proto.RegisterExtension(E_HiddenConditions)
	proto.RegisterExtension(E_DefaultEnum)
	proto.RegisterExtension(E_EnumDisplayOrder)
	proto.RegisterExtension(E_HiddenValue)
	proto.RegisterExtension(E_DefaultChoice)
	proto.RegisterExtension(E_OneofAdvancedLevel)
	proto.RegisterExtension(E_OneofFieldNumber)
	proto.RegisterExtension(E_OneofDisplayOrder)
	proto.RegisterExtension(E_OneofIsImmutable)
	proto.RegisterExtension(E_OneofHidden)
	proto.RegisterExtension(E_OneofInputBoxSize)
	proto.RegisterExtension(E_OneofInNamespaceTypes)
	proto.RegisterExtension(E_OneofHiddenConditions)
	proto.RegisterExtension(E_ViewOptions)
	proto.RegisterExtension(E_Tiles)
}

func init() { proto.RegisterFile("ves.io/schema/view_options.proto", fileDescriptor_2e60bc66177b50a0) }

var fileDescriptor_2e60bc66177b50a0 = []byte{
	// 1909 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0xcf, 0x6f, 0xdb, 0xc8,
	0xf5, 0x97, 0x6c, 0xc5, 0x6b, 0x3f, 0xc9, 0x32, 0x3d, 0xfe, 0xa5, 0x64, 0x1d, 0xc5, 0xd1, 0x77,
	0xf1, 0x45, 0xe0, 0x22, 0x72, 0xe1, 0x00, 0xed, 0x2e, 0xbb, 0x01, 0x56, 0x96, 0x19, 0x9b, 0x30,
	0x25, 0xb9, 0x23, 0x69, 0x17, 0x59, 0xa0, 0x18, 0x50, 0xd2, 0xd8, 0x66, 0xc3, 0x1f, 0x82, 0x48,
	0xd9, 0xd1, 0x02, 0x05, 0xda, 0x63, 0x81, 0xa2, 0xe8, 0xff, 0xd0, 0x4b, 0x6f, 0xbd, 0x76, 0x7f,
	0xb5, 0x9b, 0x6e, 0x0b, 0xf4, 0x98, 0x63, 0x0e, 0x3d, 0x34, 0xce, 0xa5, 0xc7, 0xfd, 0x13, 0x8a,
	0x99, 0x21, 0x29, 0x92, 0x76, 0x42, 0x9f, 0xc4, 0xf9, 0xbc, 0xf7, 0x79, 0xef, 0xcd, 0x9b, 0x99,
	0x37, 0x6f, 0x04, 0x5b, 0xe7, 0xd4, 0xad, 0x1a, 0xce, 0x8e, 0xdb, 0x3f, 0xa3, 0x96, 0xbe, 0x73,
	0x6e, 0xd0, 0x0b, 0xe2, 0x0c, 0x3d, 0xc3, 0xb1, 0xdd, 0xea, 0x70, 0xe4, 0x78, 0x0e, 0x5a, 0x14,
	0x1a, 0x55, 0xa1, 0x71, 0xe7, 0xe1, 0xa9, 0xe1, 0x9d, 0x8d, 0x7b, 0xd5, 0xbe, 0x63, 0xed, 0x9c,
	0x3a, 0xa7, 0xce, 0x0e, 0xd7, 0xea, 0x8d, 0x4f, 0xf8, 0x88, 0x0f, 0xf8, 0x97, 0x60, 0xdf, 0xd9,
	0x3a, 0x75, 0x9c, 0x53, 0x93, 0x4e, 0xb5, 0x06, 0xd4, 0xed, 0x8f, 0x8c, 0xa1, 0xe7, 0x8c, 0x7c,
	0x8d, 0xcd, 0x44, 0x04, 0xba, 0x69, 0x0c, 0x74, 0x8f, 0x0a, 0x69, 0xe5, 0x3e, 0xbc, 0x57, 0x3f,
	0x73, 0x8c, 0x3e, 0x75, 0xd1, 0x3a, 0xcc, 0xf5, 0xf9, 0x67, 0x29, 0xbb, 0x35, 0xfb, 0x60, 0x01,
	0xfb, 0xa3, 0xca, 0x3e, 0x80, 0x50, 0x51, 0x3d, 0x6a, 0xa1, 0x55, 0xb8, 0x75, 0xae, 0x9b, 0x63,
	0xa6, 0x94, 0x7d, 0xb0, 0x80, 0xc5, 0x00, 0x6d, 0x41, 0x3e, 0x70, 0x6c, 0x38, 0x76, 0x69, 0x86,
	0xcb, 0xa2, 0x50, 0xa5, 0x09, 0xc5, 0xa9, 0x15, 0xcd, 0x70, 0x3d, 0xf4, 0x31, 0x14, 0x84, 0x07,
	0x62, 0x78, 0xd4, 0x72, 0xb9, 0xd7, 0xfc, 0xee, 0xed, 0x6a, 0x2c, 0x1f, 0xd5, 0x29, 0x09, 0xe7,
	0xfb, 0xe1, 0xb7, 0x5b, 0xc1, 0xb0, 0xac, 0xe9, 0x3d, 0x6a, 0x1e, 0xd1, 0x49, 0xdd, 0xd4, 0x5d,
	0x97, 0x9b, 0x7c, 0x0c, 0xf9, 0x67, 0x74, 0x42, 0xfa, 0x0c, 0xa0, 0xc2, 0x62, 0x71, 0x77, 0x33,
	0x61, 0x31, 0x46, 0xc3, 0xf0, 0xcc, 0xff, 0xa2, 0x6e, 0xe5, 0xf7, 0x59, 0x90, 0x0e, 0x8d, 0xc1,
	0x80, 0xda, 0x75, 0xc7, 0x1e, 0x18, 0x7c, 0x95, 0xd0, 0x07, 0x50, 0x1c, 0x39, 0x8e, 0x47, 0x9c,
	0xde, 0x2f, 0x69, 0xdf, 0x23, 0x86, 0xed, 0xa7, 0xa7, 0xc0, 0xd0, 0x16, 0x07, 0x55, 0x1b, 0x55,
	0x61, 0x45, 0xb7, 0xfb, 0xd4, 0xf5, 0x9c, 0x11, 0xb1, 0xa8, 0xeb, 0xea, 0xa7, 0x94, 0xa9, 0xce,
	0x70, 0xd5, 0xe5, 0x40, 0xd4, 0x10, 0x12, 0xd5, 0x66, 0x56, 0x87, 0xba, 0x77, 0x46, 0xdc, 0xf1,
	0xc9, 0x89, 0xf1, 0x9c, 0xa9, 0xce, 0x0a, 0xab, 0x0c, 0x6d, 0x73, 0x50, 0xb5, 0x2b, 0xbf, 0xc9,
	0x81, 0xf4, 0xc4, 0xa0, 0xe6, 0xe0, 0x53, 0x83, 0x5e, 0xb4, 0xc4, 0xb6, 0x41, 0x9b, 0x30, 0x6f,
	0xd3, 0x0b, 0x72, 0xe2, 0x8c, 0xac, 0xd2, 0x5f, 0x36, 0xb6, 0xb2, 0x0f, 0xe6, 0x0f, 0x33, 0xf8,
	0x3d, 0x9b, 0x5e, 0x3c, 0x71, 0x46, 0x16, 0x52, 0xa0, 0x68, 0xd8, 0xc3, 0xb1, 0x47, 0x7a, 0xce,
	0x73, 0xe2, 0x1a, 0x5f, 0xd0, 0xd2, 0x97, 0x4c, 0xe7, 0x6a, 0x1a, 0x54, 0xa6, 0xd5, 0x36, 0xbe,
	0xa0, 0x9d, 0xc9, 0x90, 0x1e, 0x66, 0x70, 0x81, 0xd3, 0xf6, 0x9c, 0xe7, 0x0c, 0x43, 0xff, 0x0f,
	0x8b, 0x03, 0x7a, 0xa2, 0x8f, 0x4d, 0x8f, 0x88, 0xe5, 0xfe, 0x8a, 0x59, 0x59, 0x60, 0x7a, 0x3e,
	0xfe, 0x29, 0x5f, 0xf8, 0x4f, 0xa0, 0xd8, 0x77, 0x2c, 0xcb, 0xb1, 0x89, 0x58, 0x1c, 0xb7, 0xf4,
	0x35, 0x53, 0xcc, 0xef, 0xae, 0x5f, 0xbb, 0x8e, 0xee, 0x61, 0x06, 0x2f, 0x0a, 0x42, 0xb0, 0xed,
	0x3e, 0x80, 0xc2, 0xc0, 0x70, 0x87, 0xa6, 0x3e, 0x21, 0xb6, 0x6e, 0xd1, 0xd2, 0x37, 0x81, 0xa3,
	0xbc, 0x0f, 0x37, 0x75, 0x8b, 0xa2, 0xff, 0x8b, 0x6f, 0xb0, 0x6f, 0xa7, 0x4a, 0x53, 0x14, 0x55,
	0x61, 0xd6, 0xd2, 0x87, 0xa5, 0x17, 0x22, 0x82, 0xe4, 0x4e, 0x6a, 0xe8, 0x43, 0x3f, 0x85, 0x87,
	0x19, 0xcc, 0x14, 0xd1, 0x63, 0x98, 0x1f, 0xd1, 0x21, 0xd5, 0x3d, 0x3a, 0x28, 0xfd, 0x5d, 0x90,
	0xca, 0x09, 0x12, 0xf6, 0xe5, 0x53, 0x66, 0x48, 0x41, 0x3b, 0x80, 0x0c, 0x9b, 0x07, 0xed, 0x0e,
	0xf5, 0x3e, 0x25, 0xde, 0x64, 0x48, 0xdd, 0xd2, 0xf7, 0x41, 0x68, 0x92, 0x61, 0x37, 0x03, 0x19,
	0xcb, 0xb1, 0x8b, 0x7e, 0x04, 0xd2, 0x74, 0x6d, 0xd8, 0xfa, 0xe9, 0x5e, 0xe9, 0x1f, 0x81, 0x7a,
	0x31, 0xc8, 0xff, 0x13, 0x2e, 0xd8, 0x9b, 0x83, 0x1c, 0x33, 0x58, 0xf9, 0x73, 0x16, 0x60, 0x1a,
	0x3a, 0x7a, 0x04, 0xb7, 0x5c, 0x6f, 0x62, 0x8a, 0xf3, 0x57, 0xdc, 0xbd, 0x7b, 0x75, 0x92, 0x98,
	0xda, 0x03, 0x3a, 0x6a, 0x33, 0x25, 0x2c, 0x74, 0xd1, 0x23, 0xc8, 0x3d, 0xa3, 0x13, 0x97, 0x9f,
	0xcb, 0xfc, 0xee, 0xbd, 0x04, 0x27, 0xb9, 0xc3, 0x30, 0x57, 0x46, 0x3f, 0x85, 0x39, 0xbe, 0xf4,
	0x6e, 0x69, 0xf6, 0x66, 0x34, 0x5f, 0xbd, 0x62, 0xc3, 0x52, 0x22, 0x6d, 0xe8, 0xc3, 0x78, 0xd4,
	0x95, 0xb7, 0x64, 0xf9, 0x9a, 0xd0, 0xef, 0x43, 0xc1, 0x19, 0x0d, 0xe8, 0x88, 0x0e, 0x88, 0x69,
	0xb8, 0x1e, 0x9f, 0xc2, 0x3c, 0xce, 0xfb, 0x18, 0x3b, 0xf5, 0x95, 0x09, 0xe4, 0x3a, 0x86, 0x49,
	0x59, 0x69, 0xf2, 0x0c, 0xcf, 0x0c, 0x4b, 0x13, 0x1f, 0xb0, 0xb2, 0x76, 0xc2, 0x22, 0x75, 0xfd,
	0xaa, 0xe4, 0x8f, 0x10, 0x82, 0xdc, 0x19, 0x35, 0x87, 0x7c, 0x72, 0x0b, 0x98, 0x7f, 0xa3, 0x1d,
	0x58, 0x31, 0xec, 0x33, 0x3a, 0x32, 0x3c, 0x12, 0xdd, 0x6d, 0x39, 0xee, 0x13, 0xf9, 0xa2, 0xfd,
	0x48, 0x55, 0xfb, 0x08, 0x6e, 0x31, 0xd7, 0x2e, 0xfa, 0x31, 0x2c, 0x78, 0x86, 0x49, 0x45, 0x8c,
	0xa2, 0x92, 0xad, 0x24, 0x26, 0xc9, 0x14, 0xf1, 0x3c, 0xd3, 0x62, 0x51, 0x6f, 0x9f, 0xc1, 0x62,
	0xac, 0x12, 0xa1, 0x35, 0x58, 0x3e, 0x52, 0x9e, 0x92, 0xba, 0x56, 0x6b, 0xb7, 0xc9, 0x81, 0xd2,
	0x54, 0xb0, 0x5a, 0x97, 0x32, 0x68, 0x05, 0x96, 0xa6, 0xf0, 0x51, 0xb3, 0xf5, 0x59, 0x53, 0xca,
	0xc6, 0xc1, 0x03, 0xa5, 0xa5, 0x1e, 0x4b, 0x33, 0x68, 0x1d, 0xd0, 0x14, 0x54, 0x1b, 0xc7, 0x9a,
	0x5a, 0x57, 0x3b, 0xd2, 0xec, 0xf6, 0x6f, 0xb3, 0xb0, 0x18, 0x3b, 0xed, 0x68, 0x15, 0x24, 0xb5,
	0x79, 0xdc, 0xed, 0x90, 0xb6, 0xfa, 0xb9, 0x42, 0xda, 0x8d, 0x9a, 0xa6, 0x49, 0x19, 0x16, 0x40,
	0x04, 0x6d, 0x28, 0xfb, 0x6a, 0xb7, 0x21, 0x7c, 0x45, 0xe0, 0x27, 0x5d, 0x4d, 0x93, 0x66, 0xd0,
	0x6d, 0x58, 0x8b, 0xea, 0x76, 0xb5, 0x8e, 0x4a, 0x34, 0xb5, 0xa9, 0x48, 0xb3, 0xe8, 0x7d, 0xd8,
	0x10, 0xa2, 0x7a, 0xb7, 0xdd, 0x69, 0x35, 0x48, 0x17, 0x6b, 0xa4, 0xdd, 0xc1, 0x6a, 0xf3, 0x40,
	0xca, 0x6d, 0xff, 0x31, 0x07, 0xf3, 0x5d, 0xdb, 0xf0, 0x78, 0x18, 0x6b, 0xb0, 0xdc, 0x6d, 0xaa,
	0x1d, 0xd2, 0x50, 0x35, 0x4d, 0x6d, 0x2b, 0xf5, 0x56, 0x73, 0xbf, 0x2d, 0x65, 0x90, 0x04, 0x05,
	0x0e, 0x07, 0x48, 0x36, 0x44, 0x1a, 0x6a, 0xb3, 0xdb, 0x51, 0xda, 0xd2, 0x0c, 0x2a, 0x02, 0x70,
	0xe4, 0xb0, 0xd5, 0xc5, 0x6d, 0x69, 0x16, 0x2d, 0xc2, 0x02, 0x1f, 0xef, 0xd7, 0x9e, 0xb6, 0xa5,
	0x5c, 0x28, 0xde, 0x7b, 0xca, 0xd4, 0x01, 0x2d, 0x41, 0x9e, 0x8f, 0x8f, 0x04, 0x90, 0x0f, 0x81,
	0x86, 0x00, 0x0a, 0x21, 0x70, 0x20, 0x80, 0xc5, 0x10, 0xe8, 0x08, 0xa0, 0x88, 0x10, 0x14, 0x85,
	0x0d, 0x75, 0x4f, 0x15, 0xd8, 0x52, 0x88, 0x35, 0x42, 0x4c, 0x0a, 0xb1, 0x83, 0x10, 0x5b, 0x0e,
	0xb1, 0x8e, 0x12, 0x60, 0x08, 0x95, 0x60, 0x55, 0xc4, 0xa8, 0x76, 0xda, 0xe4, 0x58, 0xc1, 0xfe,
	0x7c, 0xa5, 0x55, 0x96, 0xdc, 0x69, 0xf4, 0x51, 0xd1, 0x5a, 0x28, 0x3a, 0x4a, 0xb2, 0xd6, 0xd1,
	0x1d, 0x58, 0x8f, 0xcc, 0x31, 0x2a, 0xdb, 0x08, 0x69, 0x8d, 0x24, 0xad, 0x14, 0xd2, 0x1a, 0x57,
	0x68, 0xb7, 0xd1, 0x3d, 0x78, 0x9f, 0xcb, 0xea, 0xad, 0x66, 0x53, 0xa9, 0x77, 0xd4, 0x56, 0x33,
	0xa6, 0x50, 0x0e, 0xc9, 0x0a, 0xc6, 0x2d, 0x1c, 0x93, 0xdd, 0x63, 0xfb, 0x80, 0xcb, 0x8e, 0x6b,
	0xf5, 0x23, 0x25, 0xee, 0x75, 0x0b, 0x6d, 0x42, 0x89, 0x0b, 0xb1, 0xf2, 0xf3, 0xae, 0xd2, 0x8e,
	0x4b, 0xef, 0x6f, 0x3f, 0x86, 0x62, 0xbc, 0x90, 0xb1, 0xad, 0xd2, 0xa8, 0x1d, 0x13, 0xac, 0x34,
	0xf7, 0x15, 0x4c, 0xb4, 0xda, 0x9e, 0xa2, 0xb1, 0xad, 0xb2, 0x0a, 0x52, 0x04, 0xee, 0xd4, 0xf6,
	0x34, 0x45, 0xca, 0x6e, 0x1f, 0xc1, 0xca, 0x35, 0x15, 0x85, 0x25, 0x01, 0x2b, 0xc7, 0x4a, 0xad,
	0xa3, 0xec, 0xc7, 0x19, 0x99, 0x6b, 0x45, 0xaa, 0xa6, 0xb4, 0xa5, 0xac, 0xac, 0x40, 0x51, 0x1f,
	0x9c, 0xb3, 0x1b, 0x7c, 0x40, 0x4c, 0x7a, 0x4e, 0x4d, 0x74, 0xb7, 0x2a, 0x9a, 0xae, 0x6a, 0xd0,
	0x74, 0x89, 0x52, 0xe8, 0xd7, 0x3a, 0x71, 0x27, 0xdf, 0xc2, 0x8b, 0x01, 0x4b, 0x63, 0x24, 0xf9,
	0x67, 0xb0, 0xe0, 0x1a, 0x9e, 0xb8, 0x24, 0xd2, 0x2c, 0xf0, 0x1b, 0x7b, 0x01, 0xcf, 0x33, 0x02,
	0x3b, 0x28, 0xf2, 0x47, 0xd3, 0x2b, 0x3f, 0x8d, 0xcb, 0xef, 0xe9, 0xf9, 0xb0, 0x1f, 0x90, 0xeb,
	0x89, 0x8b, 0x3c, 0x8d, 0xff, 0xb5, 0xf0, 0x1d, 0xbb, 0xe5, 0xe5, 0x5f, 0x24, 0x6f, 0xf9, 0x34,
	0x2b, 0xdf, 0xbc, 0xb3, 0x09, 0x48, 0xb4, 0x00, 0xf2, 0x4f, 0x60, 0xee, 0x8c, 0xb7, 0x5d, 0x69,
	0x66, 0xbf, 0x15, 0x93, 0xf3, 0xb5, 0xe5, 0x8f, 0x61, 0x41, 0xb7, 0x1d, 0x7b, 0x62, 0x39, 0xe3,
	0xd4, 0x88, 0xfe, 0x2a, 0xa8, 0x53, 0x82, 0xdc, 0x4b, 0x76, 0x4a, 0x69, 0x26, 0xfe, 0x76, 0x83,
	0x46, 0x2a, 0xde, 0x46, 0xb1, 0xcd, 0x33, 0x30, 0x5c, 0xbd, 0x67, 0x52, 0xd2, 0x1f, 0xb1, 0x0d,
	0x99, 0xe6, 0xe3, 0x3b, 0x11, 0xe6, 0xa2, 0xcf, 0xaa, 0x73, 0x92, 0x7c, 0x04, 0xb9, 0xb1, 0x6d,
	0x78, 0x69, 0xe4, 0x17, 0x22, 0xc0, 0x8d, 0x44, 0x80, 0x41, 0xbd, 0xc5, 0xdc, 0x88, 0x6c, 0xc1,
	0x4a, 0x6c, 0x31, 0x45, 0xfb, 0x9d, 0x66, 0xdb, 0xef, 0x8f, 0xee, 0xbe, 0xb5, 0x3d, 0x67, 0x97,
	0x1a, 0x5e, 0x8e, 0x2e, 0x2c, 0x6f, 0xd4, 0x65, 0x13, 0x96, 0x4d, 0x76, 0xcf, 0x91, 0x48, 0x67,
	0x9e, 0xe6, 0xec, 0x7b, 0xe1, 0x6c, 0xeb, 0x5d, 0x9d, 0x3b, 0xf7, 0xb7, 0x64, 0x46, 0x21, 0xea,
	0xca, 0x87, 0x57, 0x5b, 0xac, 0x34, 0x67, 0xa2, 0x03, 0x4b, 0xf6, 0x5f, 0x2c, 0x6e, 0xb1, 0xcd,
	0x48, 0x7f, 0xfa, 0x18, 0x48, 0x31, 0xf5, 0xcf, 0x8d, 0x6b, 0x3b, 0xa5, 0xe4, 0x9b, 0x02, 0x4b,
	0x67, 0x09, 0x44, 0xfe, 0x04, 0x82, 0x13, 0x47, 0xa8, 0x3d, 0xb6, 0xd0, 0xe6, 0x15, 0x47, 0x8a,
	0x3d, 0xb6, 0x12, 0x25, 0x26, 0xef, 0x53, 0x98, 0x48, 0x3e, 0x02, 0xc4, 0x98, 0x24, 0x68, 0xa6,
	0x79, 0x87, 0x94, 0x62, 0x47, 0xf4, 0xda, 0x58, 0x62, 0xc4, 0x7d, 0xc1, 0x6b, 0x31, 0x9a, 0xac,
	0x40, 0xc1, 0x9f, 0xbc, 0x28, 0x1a, 0xf7, 0xaf, 0x35, 0xc3, 0x8b, 0x43, 0x2c, 0xa6, 0x79, 0x9c,
	0x17, 0x3c, 0x51, 0x37, 0xd8, 0xf6, 0xf7, 0x67, 0x25, 0xf6, 0xda, 0x35, 0x09, 0x6c, 0xd9, 0xd4,
	0x39, 0x49, 0xd6, 0x4e, 0x9f, 0x25, 0xf6, 0x91, 0x7c, 0x0c, 0xab, 0x0e, 0xd3, 0x22, 0xa9, 0x85,
	0x38, 0x66, 0xec, 0x4b, 0x61, 0x0c, 0x71, 0x6e, 0x2d, 0x56, 0x8d, 0x35, 0x10, 0x28, 0xe1, 0xcd,
	0x20, 0xb1, 0xc7, 0x56, 0x8f, 0x8e, 0xd2, 0xec, 0x7d, 0x25, 0xec, 0x49, 0x9c, 0xc9, 0xd7, 0xbd,
	0xc9, 0x79, 0x72, 0x13, 0x56, 0x84, 0xb5, 0x78, 0xee, 0x53, 0xcc, 0xf9, 0xc9, 0x5f, 0xe6, 0xd4,
	0x58, 0xf6, 0xc3, 0xe8, 0x0c, 0x97, 0x18, 0x96, 0x35, 0xf6, 0x58, 0x29, 0x48, 0x33, 0xe7, 0xd7,
	0x46, 0x11, 0x9d, 0xea, 0xaa, 0x01, 0x4f, 0xae, 0x41, 0x41, 0x58, 0x7b, 0x6b, 0x8d, 0x8d, 0xd9,
	0xf1, 0x0b, 0x65, 0x9e, 0x73, 0xc4, 0xce, 0x95, 0xad, 0x60, 0x01, 0x52, 0x0b, 0x66, 0xcc, 0xd4,
	0x8d, 0x0a, 0xa6, 0x98, 0xbf, 0x1a, 0xad, 0x9a, 0x9f, 0x41, 0x29, 0x70, 0x97, 0x7c, 0x5e, 0xa5,
	0xb9, 0xfc, 0x4e, 0x24, 0x75, 0xcd, 0x37, 0x1a, 0x7f, 0x80, 0xc9, 0x17, 0xb0, 0x11, 0x4d, 0xc5,
	0xbb, 0x4f, 0x76, 0xcc, 0xee, 0x8b, 0x1b, 0x9e, 0xec, 0xb5, 0x48, 0xda, 0x22, 0xc7, 0xbb, 0x0f,
	0x85, 0xe8, 0x5f, 0x3f, 0x69, 0x75, 0xe4, 0x77, 0xff, 0xfe, 0xf0, 0x66, 0x4f, 0xae, 0xfc, 0xf9,
	0x74, 0x20, 0x6b, 0xec, 0xfd, 0xc3, 0x1e, 0x23, 0xf7, 0xae, 0x58, 0xf7, 0xff, 0x78, 0x88, 0x1d,
	0xb3, 0xfc, 0xee, 0xea, 0x35, 0x2f, 0x14, 0x17, 0x0b, 0x23, 0x7b, 0xbf, 0x7a, 0xf9, 0xba, 0x9c,
	0x79, 0xf5, 0xba, 0x9c, 0xf9, 0xe1, 0x75, 0x39, 0xfb, 0xeb, 0xcb, 0x72, 0xf6, 0x4f, 0x97, 0xe5,
	0xec, 0xbf, 0x2e, 0xcb, 0xd9, 0x97, 0x97, 0xe5, 0xec, 0xab, 0xcb, 0x72, 0xf6, 0x3f, 0x97, 0xe5,
	0xec, 0x7f, 0x2f, 0xcb, 0x99, 0x1f, 0x2e, 0xcb, 0xd9, 0x3f, 0xbc, 0x29, 0x67, 0x5e, 0xbe, 0x29,
	0x67, 0x5e, 0xbd, 0x29, 0x67, 0x3e, 0xaf, 0x9f, 0x3a, 0xc3, 0x67, 0xa7, 0xd5, 0x73, 0xc7, 0xf4,
	0xe8, 0x68, 0xa4, 0x57, 0xc7, 0xee, 0x0e, 0xff, 0x60, 0xe5, 0xf8, 0xe1, 0x70, 0xe4, 0x9c, 0x1b,
	0x03, 0x3a, 0x7a, 0x18, 0x88, 0x77, 0x86, 0xbd, 0x53, 0x67, 0x87, 0x3e, 0xf7, 0xfc, 0x3f, 0xa8,
	0xc4, 0x4f, 0x6f, 0x8e, 0xc7, 0xfe, 0xe8, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xc2, 0x16,
	0x57, 0x41, 0x13, 0x00, 0x00,
}

func (x LabelKeyClass) String() string {
	s, ok := LabelKeyClass_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InputSizeType) String() string {
	s, ok := InputSizeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UnitType) String() string {
	s, ok := UnitType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MapRenderStyle) String() string {
	s, ok := MapRenderStyle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RepeatedRenderStyle) String() string {
	s, ok := RepeatedRenderStyle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Choices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Choices)
	if !ok {
		that2, ok := that.(Choices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Choice) != len(that1.Choice) {
		return false
	}
	for i := range this.Choice {
		if this.Choice[i] != that1.Choice[i] {
			return false
		}
	}
	return true
}
func (this *ChoiceItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChoiceItem)
	if !ok {
		that2, ok := that.(ChoiceItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *ChoiceItemList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChoiceItemList)
	if !ok {
		that2, ok := that.(ChoiceItemList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ChoiceItems) != len(that1.ChoiceItems) {
		return false
	}
	for i := range this.ChoiceItems {
		if !this.ChoiceItems[i].Equal(that1.ChoiceItems[i]) {
			return false
		}
	}
	return true
}
func (this *LabelKeyClassList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelKeyClassList)
	if !ok {
		that2, ok := that.(LabelKeyClassList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.KeyClasses) != len(that1.KeyClasses) {
		return false
	}
	for i := range this.KeyClasses {
		if this.KeyClasses[i] != that1.KeyClasses[i] {
			return false
		}
	}
	return true
}
func (this *HiddenConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HiddenConditions)
	if !ok {
		that2, ok := that.(HiddenConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RootObjectIn) != len(that1.RootObjectIn) {
		return false
	}
	for i := range this.RootObjectIn {
		if this.RootObjectIn[i] != that1.RootObjectIn[i] {
			return false
		}
	}
	if len(this.AncestorMessageIn) != len(that1.AncestorMessageIn) {
		return false
	}
	for i := range this.AncestorMessageIn {
		if this.AncestorMessageIn[i] != that1.AncestorMessageIn[i] {
			return false
		}
	}
	if len(this.PathSuffixIn) != len(that1.PathSuffixIn) {
		return false
	}
	for i := range this.PathSuffixIn {
		if this.PathSuffixIn[i] != that1.PathSuffixIn[i] {
			return false
		}
	}
	return true
}
func (this *FieldViewOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions)
	if !ok {
		that2, ok := that.(FieldViewOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *FieldViewOptions_NewForm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_NewForm)
	if !ok {
		that2, ok := that.(FieldViewOptions_NewForm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewForm != that1.NewForm {
		return false
	}
	return true
}
func (this *FieldViewOptions_InputBoxSize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_InputBoxSize)
	if !ok {
		that2, ok := that.(FieldViewOptions_InputBoxSize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InputBoxSize != that1.InputBoxSize {
		return false
	}
	return true
}
func (this *FieldViewOptions_DefaultValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_DefaultValue)
	if !ok {
		that2, ok := that.(FieldViewOptions_DefaultValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	return true
}
func (this *FieldViewOptions_CommonChoices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_CommonChoices)
	if !ok {
		that2, ok := that.(FieldViewOptions_CommonChoices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonChoices.Equal(that1.CommonChoices) {
		return false
	}
	return true
}
func (this *FieldViewOptions_DisplayName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_DisplayName)
	if !ok {
		that2, ok := that.(FieldViewOptions_DisplayName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	return true
}
func (this *FieldViewOptions_Description) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_Description)
	if !ok {
		that2, ok := that.(FieldViewOptions_Description)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *FieldViewOptions_Map) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_Map)
	if !ok {
		that2, ok := that.(FieldViewOptions_Map)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Map.Equal(that1.Map) {
		return false
	}
	return true
}
func (this *FieldViewOptions_Repeated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_Repeated)
	if !ok {
		that2, ok := that.(FieldViewOptions_Repeated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Repeated.Equal(that1.Repeated) {
		return false
	}
	return true
}
func (this *FieldViewOptions_InNamespaceTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_InNamespaceTypes)
	if !ok {
		that2, ok := that.(FieldViewOptions_InNamespaceTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InNamespaceTypes != that1.InNamespaceTypes {
		return false
	}
	return true
}
func (this *FieldViewOptions_InputBoxFormat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions_InputBoxFormat)
	if !ok {
		that2, ok := that.(FieldViewOptions_InputBoxFormat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InputBoxFormat != that1.InputBoxFormat {
		return false
	}
	return true
}
func (this *MapOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapOptions)
	if !ok {
		that2, ok := that.(MapOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Style != that1.Style {
		return false
	}
	if !this.Keys.Equal(that1.Keys) {
		return false
	}
	if !this.Values.Equal(that1.Values) {
		return false
	}
	return true
}
func (this *RepeatedOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RepeatedOptions)
	if !ok {
		that2, ok := that.(RepeatedOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Style != that1.Style {
		return false
	}
	if this.OrderedList != that1.OrderedList {
		return false
	}
	return true
}
func (this *Tile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tile)
	if !ok {
		that2, ok := that.(Tile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Fields != that1.Fields {
		return false
	}
	if this.Help != that1.Help {
		return false
	}
	if this.InheritDescription != that1.InheritDescription {
		return false
	}
	return true
}
func (this *Tiles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tiles)
	if !ok {
		that2, ok := that.(Tiles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TileList) != len(that1.TileList) {
		return false
	}
	for i := range this.TileList {
		if !this.TileList[i].Equal(that1.TileList[i]) {
			return false
		}
	}
	return true
}
func (this *Choices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.Choices{")
	s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChoiceItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.ChoiceItem{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChoiceItemList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.ChoiceItemList{")
	if this.ChoiceItems != nil {
		s = append(s, "ChoiceItems: "+fmt.Sprintf("%#v", this.ChoiceItems)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LabelKeyClassList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.LabelKeyClassList{")
	s = append(s, "KeyClasses: "+fmt.Sprintf("%#v", this.KeyClasses)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HiddenConditions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.HiddenConditions{")
	s = append(s, "RootObjectIn: "+fmt.Sprintf("%#v", this.RootObjectIn)+",\n")
	s = append(s, "AncestorMessageIn: "+fmt.Sprintf("%#v", this.AncestorMessageIn)+",\n")
	s = append(s, "PathSuffixIn: "+fmt.Sprintf("%#v", this.PathSuffixIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldViewOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&schema.FieldViewOptions{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldViewOptions_NewForm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_NewForm{` +
		`NewForm:` + fmt.Sprintf("%#v", this.NewForm) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_InputBoxSize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_InputBoxSize{` +
		`InputBoxSize:` + fmt.Sprintf("%#v", this.InputBoxSize) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_DefaultValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_DefaultValue{` +
		`DefaultValue:` + fmt.Sprintf("%#v", this.DefaultValue) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_CommonChoices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_CommonChoices{` +
		`CommonChoices:` + fmt.Sprintf("%#v", this.CommonChoices) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_DisplayName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_DisplayName{` +
		`DisplayName:` + fmt.Sprintf("%#v", this.DisplayName) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_Description) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_Description{` +
		`Description:` + fmt.Sprintf("%#v", this.Description) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_Map) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_Map{` +
		`Map:` + fmt.Sprintf("%#v", this.Map) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_Repeated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_Repeated{` +
		`Repeated:` + fmt.Sprintf("%#v", this.Repeated) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_InNamespaceTypes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_InNamespaceTypes{` +
		`InNamespaceTypes:` + fmt.Sprintf("%#v", this.InNamespaceTypes) + `}`}, ", ")
	return s
}
func (this *FieldViewOptions_InputBoxFormat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldViewOptions_InputBoxFormat{` +
		`InputBoxFormat:` + fmt.Sprintf("%#v", this.InputBoxFormat) + `}`}, ", ")
	return s
}
func (this *MapOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.MapOptions{")
	s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RepeatedOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.RepeatedOptions{")
	s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	s = append(s, "OrderedList: "+fmt.Sprintf("%#v", this.OrderedList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schema.Tile{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	s = append(s, "Help: "+fmt.Sprintf("%#v", this.Help)+",\n")
	s = append(s, "InheritDescription: "+fmt.Sprintf("%#v", this.InheritDescription)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tiles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.Tiles{")
	if this.TileList != nil {
		s = append(s, "TileList: "+fmt.Sprintf("%#v", this.TileList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringViewOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Choices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Choices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Choices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Choice) > 0 {
		for iNdEx := len(m.Choice) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Choice[iNdEx])
			copy(dAtA[i:], m.Choice[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Choice[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChoiceItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChoiceItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChoiceItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChoiceItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChoiceItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChoiceItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChoiceItems) > 0 {
		for iNdEx := len(m.ChoiceItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChoiceItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LabelKeyClassList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelKeyClassList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelKeyClassList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyClasses) > 0 {
		dAtA2 := make([]byte, len(m.KeyClasses)*10)
		var j1 int
		for _, num := range m.KeyClasses {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintViewOptions(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HiddenConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HiddenConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HiddenConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PathSuffixIn) > 0 {
		for iNdEx := len(m.PathSuffixIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PathSuffixIn[iNdEx])
			copy(dAtA[i:], m.PathSuffixIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.PathSuffixIn[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AncestorMessageIn) > 0 {
		for iNdEx := len(m.AncestorMessageIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AncestorMessageIn[iNdEx])
			copy(dAtA[i:], m.AncestorMessageIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.AncestorMessageIn[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RootObjectIn) > 0 {
		for iNdEx := len(m.RootObjectIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RootObjectIn[iNdEx])
			copy(dAtA[i:], m.RootObjectIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.RootObjectIn[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldViewOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldViewOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldViewOptions_NewForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_NewForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.NewForm {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xbb
	i--
	dAtA[i] = 0xc0
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_InputBoxSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_InputBoxSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintViewOptions(dAtA, i, uint64(m.InputBoxSize))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xbb
	i--
	dAtA[i] = 0xc8
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_DefaultValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_DefaultValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DefaultValue)
	copy(dAtA[i:], m.DefaultValue)
	i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DefaultValue)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xbb
	i--
	dAtA[i] = 0xd2
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_CommonChoices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_CommonChoices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommonChoices != nil {
		{
			size, err := m.CommonChoices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbb
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_DisplayName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_DisplayName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DisplayName)
	copy(dAtA[i:], m.DisplayName)
	i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DisplayName)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xbb
	i--
	dAtA[i] = 0xe2
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xbb
	i--
	dAtA[i] = 0xea
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbc
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_Repeated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_Repeated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Repeated != nil {
		{
			size, err := m.Repeated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbc
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_InNamespaceTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_InNamespaceTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.InNamespaceTypes)
	copy(dAtA[i:], m.InNamespaceTypes)
	i = encodeVarintViewOptions(dAtA, i, uint64(len(m.InNamespaceTypes)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xbc
	i--
	dAtA[i] = 0x9a
	return len(dAtA) - i, nil
}
func (m *FieldViewOptions_InputBoxFormat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions_InputBoxFormat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.InputBoxFormat)
	copy(dAtA[i:], m.InputBoxFormat)
	i = encodeVarintViewOptions(dAtA, i, uint64(len(m.InputBoxFormat)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xbc
	i--
	dAtA[i] = 0xa2
	return len(dAtA) - i, nil
}
func (m *MapOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Values != nil {
		{
			size, err := m.Values.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Keys != nil {
		{
			size, err := m.Keys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Style != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepeatedOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderedList {
		i--
		if m.OrderedList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Style != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InheritDescription {
		i--
		if m.InheritDescription {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Help) > 0 {
		i -= len(m.Help)
		copy(dAtA[i:], m.Help)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Help)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fields) > 0 {
		i -= len(m.Fields)
		copy(dAtA[i:], m.Fields)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Fields)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TileList) > 0 {
		for iNdEx := len(m.TileList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TileList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintViewOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovViewOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Choices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Choice) > 0 {
		for _, s := range m.Choice {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *ChoiceItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *ChoiceItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChoiceItems) > 0 {
		for _, e := range m.ChoiceItems {
			l = e.Size()
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *LabelKeyClassList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyClasses) > 0 {
		l = 0
		for _, e := range m.KeyClasses {
			l += sovViewOptions(uint64(e))
		}
		n += 1 + sovViewOptions(uint64(l)) + l
	}
	return n
}

func (m *HiddenConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RootObjectIn) > 0 {
		for _, s := range m.RootObjectIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if len(m.AncestorMessageIn) > 0 {
		for _, s := range m.AncestorMessageIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if len(m.PathSuffixIn) > 0 {
		for _, s := range m.PathSuffixIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *FieldViewOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *FieldViewOptions_NewForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 4
	return n
}
func (m *FieldViewOptions_InputBoxSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3 + sovViewOptions(uint64(m.InputBoxSize))
	return n
}
func (m *FieldViewOptions_DefaultValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefaultValue)
	n += 3 + l + sovViewOptions(uint64(l))
	return n
}
func (m *FieldViewOptions_CommonChoices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonChoices != nil {
		l = m.CommonChoices.Size()
		n += 3 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *FieldViewOptions_DisplayName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	n += 3 + l + sovViewOptions(uint64(l))
	return n
}
func (m *FieldViewOptions_Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	n += 3 + l + sovViewOptions(uint64(l))
	return n
}
func (m *FieldViewOptions_Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = m.Map.Size()
		n += 3 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *FieldViewOptions_Repeated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Repeated != nil {
		l = m.Repeated.Size()
		n += 3 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *FieldViewOptions_InNamespaceTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InNamespaceTypes)
	n += 3 + l + sovViewOptions(uint64(l))
	return n
}
func (m *FieldViewOptions_InputBoxFormat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InputBoxFormat)
	n += 3 + l + sovViewOptions(uint64(l))
	return n
}
func (m *MapOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Style != 0 {
		n += 1 + sovViewOptions(uint64(m.Style))
	}
	if m.Keys != nil {
		l = m.Keys.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.Values != nil {
		l = m.Values.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *RepeatedOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Style != 0 {
		n += 1 + sovViewOptions(uint64(m.Style))
	}
	if m.OrderedList {
		n += 2
	}
	return n
}

func (m *Tile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Help)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.InheritDescription {
		n += 2
	}
	return n
}

func (m *Tiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TileList) > 0 {
		for _, e := range m.TileList {
			l = e.Size()
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func sovViewOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozViewOptions(x uint64) (n int) {
	return sovViewOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Choices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Choices{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChoiceItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChoiceItem{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChoiceItemList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChoiceItems := "[]*ChoiceItem{"
	for _, f := range this.ChoiceItems {
		repeatedStringForChoiceItems += strings.Replace(f.String(), "ChoiceItem", "ChoiceItem", 1) + ","
	}
	repeatedStringForChoiceItems += "}"
	s := strings.Join([]string{`&ChoiceItemList{`,
		`ChoiceItems:` + repeatedStringForChoiceItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *LabelKeyClassList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LabelKeyClassList{`,
		`KeyClasses:` + fmt.Sprintf("%v", this.KeyClasses) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HiddenConditions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HiddenConditions{`,
		`RootObjectIn:` + fmt.Sprintf("%v", this.RootObjectIn) + `,`,
		`AncestorMessageIn:` + fmt.Sprintf("%v", this.AncestorMessageIn) + `,`,
		`PathSuffixIn:` + fmt.Sprintf("%v", this.PathSuffixIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_NewForm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_NewForm{`,
		`NewForm:` + fmt.Sprintf("%v", this.NewForm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_InputBoxSize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_InputBoxSize{`,
		`InputBoxSize:` + fmt.Sprintf("%v", this.InputBoxSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_DefaultValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_DefaultValue{`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_CommonChoices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_CommonChoices{`,
		`CommonChoices:` + strings.Replace(fmt.Sprintf("%v", this.CommonChoices), "Choices", "Choices", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_DisplayName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_DisplayName{`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_Description) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_Description{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_Map) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_Map{`,
		`Map:` + strings.Replace(fmt.Sprintf("%v", this.Map), "MapOptions", "MapOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_Repeated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_Repeated{`,
		`Repeated:` + strings.Replace(fmt.Sprintf("%v", this.Repeated), "RepeatedOptions", "RepeatedOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_InNamespaceTypes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_InNamespaceTypes{`,
		`InNamespaceTypes:` + fmt.Sprintf("%v", this.InNamespaceTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions_InputBoxFormat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions_InputBoxFormat{`,
		`InputBoxFormat:` + fmt.Sprintf("%v", this.InputBoxFormat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MapOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MapOptions{`,
		`Style:` + fmt.Sprintf("%v", this.Style) + `,`,
		`Keys:` + strings.Replace(this.Keys.String(), "FieldViewOptions", "FieldViewOptions", 1) + `,`,
		`Values:` + strings.Replace(this.Values.String(), "FieldViewOptions", "FieldViewOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepeatedOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RepeatedOptions{`,
		`Style:` + fmt.Sprintf("%v", this.Style) + `,`,
		`OrderedList:` + fmt.Sprintf("%v", this.OrderedList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tile{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`Help:` + fmt.Sprintf("%v", this.Help) + `,`,
		`InheritDescription:` + fmt.Sprintf("%v", this.InheritDescription) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tiles) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTileList := "[]*Tile{"
	for _, f := range this.TileList {
		repeatedStringForTileList += strings.Replace(f.String(), "Tile", "Tile", 1) + ","
	}
	repeatedStringForTileList += "}"
	s := strings.Join([]string{`&Tiles{`,
		`TileList:` + repeatedStringForTileList + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringViewOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Choices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Choices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Choices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Choice = append(m.Choice, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChoiceItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChoiceItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChoiceItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChoiceItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChoiceItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChoiceItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChoiceItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChoiceItems = append(m.ChoiceItems, &ChoiceItem{})
			if err := m.ChoiceItems[len(m.ChoiceItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelKeyClassList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelKeyClassList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelKeyClassList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v LabelKeyClass
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowViewOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LabelKeyClass(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyClasses = append(m.KeyClasses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowViewOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthViewOptions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthViewOptions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.KeyClasses) == 0 {
					m.KeyClasses = make([]LabelKeyClass, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LabelKeyClass
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowViewOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LabelKeyClass(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyClasses = append(m.KeyClasses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyClasses", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HiddenConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HiddenConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HiddenConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootObjectIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootObjectIn = append(m.RootObjectIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AncestorMessageIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AncestorMessageIn = append(m.AncestorMessageIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathSuffixIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathSuffixIn = append(m.PathSuffixIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldViewOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldViewOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldViewOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewForm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Type = &FieldViewOptions_NewForm{b}
		case 3001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputBoxSize", wireType)
			}
			var v InputSizeType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= InputSizeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &FieldViewOptions_InputBoxSize{v}
		case 3002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = &FieldViewOptions_DefaultValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChoices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Choices{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldViewOptions_CommonChoices{v}
			iNdEx = postIndex
		case 3004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = &FieldViewOptions_DisplayName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3005:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = &FieldViewOptions_Description{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3009:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldViewOptions_Map{v}
			iNdEx = postIndex
		case 3010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RepeatedOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldViewOptions_Repeated{v}
			iNdEx = postIndex
		case 3011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InNamespaceTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = &FieldViewOptions_InNamespaceTypes{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3012:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputBoxFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = &FieldViewOptions_InputBoxFormat{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= MapRenderStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = &FieldViewOptions{}
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = &FieldViewOptions{}
			}
			if err := m.Values.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= RepeatedRenderStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderedList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderedList = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Help", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Help = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritDescription", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InheritDescription = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TileList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TileList = append(m.TileList, &Tile{})
			if err := m.TileList[len(m.TileList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipViewOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthViewOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupViewOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthViewOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthViewOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowViewOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupViewOptions = fmt.Errorf("proto: unexpected end of group")
)

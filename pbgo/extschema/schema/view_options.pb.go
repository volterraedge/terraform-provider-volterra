// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/view_options.proto

package schema

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LabelKeyClass
//
// x-displayName: "LabelKeyClass"
// LabelKeyClass is an enumeration of supported label key classes
type LabelKeyClass int32

const (
	// x-displayName: "Key Class Generic"
	// Includes label keys with generic names such as "my-key", "foobar-key" etc.
	KEY_CLASS_GENERIC LabelKeyClass = 0
	// x-displayName: "Key Class Known"
	// Keys that are obtained using GET on /api/config/namespaces/shared/known_label_keys
	// Includes volterra-defined known label keys such as "ves.io/app_type", "ves.io/app" and "ves.io/siteType" as well as tenant-defined known keys such as
	// "my-key", "acme-key-foo" and "acme-key-bar". Note that tenant-defined known keys don't have any standard name format - they are known keys because they
	// have been explicitly created as known keys by the tenant and are stored in the configuration as known_label_keys.
	KEY_CLASS_KNOWN LabelKeyClass = 1
	// x-displayName: "Key Class GeoIp"
	// Includes implicit geoip label keys "geoip.ves.io/city", "geoip.ves.io/region" and "geoip.ves.io/country"
	KEY_CLASS_GEOIP LabelKeyClass = 2
	// x-displayName: "Key Class Implicit"
	// Includes implicit label keys associated with packets/requests by the infrastructure e.g. "implicit.ves.io/namespace"
	KEY_CLASS_IMPLICIT LabelKeyClass = 3
	// x-displayName: "Key Class Reputation"
	// Include ip reputation label keys "ipreputation.ves.io/threattype", "ipreputation.ves.io/threatlevel"
	KEY_CLASS_IP_REPUTATION LabelKeyClass = 4
	// x-displayName: "Key Class URL Reputation"
	// Include url reputation label keys "urlreputation.ves.io/category", "urlreputation.ves.io/reputationlevel"
	KEY_CLASS_URL_REPUTATION LabelKeyClass = 5
	// x-displayName: "Key Class GeoIp Extended"
	// Includes implicit geoip label keys "geoip.ves.io/continent"
	KEY_CLASS_GEOIP_EXTENDED LabelKeyClass = 6
	// x-displayName: "Key Class DNS GeoIp"
	// Includes implicit geoip label keys  "geoip.ves.io/region", "geoip.ves.io/country" and "geoip.ves.io/continent"
	KEY_CLASS_DNS_GEOIP LabelKeyClass = 7
	// x-displayName: "Key Class AWS"
	// Implicit aws resource labels (dynamically queried). This may be vpc level tags and/or subnet level tags
	KEY_CLASS_AWS LabelKeyClass = 8
)

var LabelKeyClass_name = map[int32]string{
	0: "KEY_CLASS_GENERIC",
	1: "KEY_CLASS_KNOWN",
	2: "KEY_CLASS_GEOIP",
	3: "KEY_CLASS_IMPLICIT",
	4: "KEY_CLASS_IP_REPUTATION",
	5: "KEY_CLASS_URL_REPUTATION",
	6: "KEY_CLASS_GEOIP_EXTENDED",
	7: "KEY_CLASS_DNS_GEOIP",
	8: "KEY_CLASS_AWS",
}

var LabelKeyClass_value = map[string]int32{
	"KEY_CLASS_GENERIC":        0,
	"KEY_CLASS_KNOWN":          1,
	"KEY_CLASS_GEOIP":          2,
	"KEY_CLASS_IMPLICIT":       3,
	"KEY_CLASS_IP_REPUTATION":  4,
	"KEY_CLASS_URL_REPUTATION": 5,
	"KEY_CLASS_GEOIP_EXTENDED": 6,
	"KEY_CLASS_DNS_GEOIP":      7,
	"KEY_CLASS_AWS":            8,
}

func (LabelKeyClass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{0}
}

// LabelSelectorOperator
//
// x-displayName: "Label Selector Operator"
// LabelSelectorOperator is an enumeration of label selector operators.
type LabelSelectorOperator int32

const (
	LABEL_SELECTOR_OP_UNDEFINED      LabelSelectorOperator = 0
	LABEL_SELECTOR_OP_EXISTS         LabelSelectorOperator = 1
	LABEL_SELECTOR_OP_EQUALS         LabelSelectorOperator = 2
	LABEL_SELECTOR_OP_DOUBLE_EQUALS  LabelSelectorOperator = 3
	LABEL_SELECTOR_OP_IN             LabelSelectorOperator = 4
	LABEL_SELECTOR_OP_NOT_EQUALS     LabelSelectorOperator = 5
	LABEL_SELECTOR_OP_NOT_IN         LabelSelectorOperator = 6
	LABEL_SELECTOR_OP_DOES_NOT_EXIST LabelSelectorOperator = 7
)

var LabelSelectorOperator_name = map[int32]string{
	0: "LABEL_SELECTOR_OP_UNDEFINED",
	1: "LABEL_SELECTOR_OP_EXISTS",
	2: "LABEL_SELECTOR_OP_EQUALS",
	3: "LABEL_SELECTOR_OP_DOUBLE_EQUALS",
	4: "LABEL_SELECTOR_OP_IN",
	5: "LABEL_SELECTOR_OP_NOT_EQUALS",
	6: "LABEL_SELECTOR_OP_NOT_IN",
	7: "LABEL_SELECTOR_OP_DOES_NOT_EXIST",
}

var LabelSelectorOperator_value = map[string]int32{
	"LABEL_SELECTOR_OP_UNDEFINED":      0,
	"LABEL_SELECTOR_OP_EXISTS":         1,
	"LABEL_SELECTOR_OP_EQUALS":         2,
	"LABEL_SELECTOR_OP_DOUBLE_EQUALS":  3,
	"LABEL_SELECTOR_OP_IN":             4,
	"LABEL_SELECTOR_OP_NOT_EQUALS":     5,
	"LABEL_SELECTOR_OP_NOT_IN":         6,
	"LABEL_SELECTOR_OP_DOES_NOT_EXIST": 7,
}

func (LabelSelectorOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{1}
}

// SuggestedValuesCountType
//
// x-displayName: "Suggested Values Count Type"
// SuggestedValuesCountType is an enumeration of the expected count of the number of suggested values.
type SuggestedValuesCountType int32

const (
	// Large number of expected suggested values
	SUGGESTED_VALUES_COUNT_LARGE SuggestedValuesCountType = 0
	// Medium number of expected suggested values
	SUGGESTED_VALUES_COUNT_MEDIUM SuggestedValuesCountType = 1
	// Small number of expected suggested values
	SUGGESTED_VALUES_COUNT_SMALL SuggestedValuesCountType = 2
)

var SuggestedValuesCountType_name = map[int32]string{
	0: "SUGGESTED_VALUES_COUNT_LARGE",
	1: "SUGGESTED_VALUES_COUNT_MEDIUM",
	2: "SUGGESTED_VALUES_COUNT_SMALL",
}

var SuggestedValuesCountType_value = map[string]int32{
	"SUGGESTED_VALUES_COUNT_LARGE":  0,
	"SUGGESTED_VALUES_COUNT_MEDIUM": 1,
	"SUGGESTED_VALUES_COUNT_SMALL":  2,
}

func (SuggestedValuesCountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{2}
}

// InputSizeType
//
// x-displayName: "InputSizeType"
// InputSizeType is enumeration of supported input box sizes in UI
type InputSizeType int32

const (
	// 1 column wide input
	INPUT_SIZE_SMALL InputSizeType = 0
	// 2 column wide input
	INPUT_SIZE_MEDIUM InputSizeType = 1
	// 3 column wide input
	INPUT_SIZE_FULL InputSizeType = 2
	// Use bigger multi-line text box
	INPUT_SIZE_MULTI_LINE InputSizeType = 3
	// Use bigger multi-line text box
	INPUT_CUSTOM_URL_STRING InputSizeType = 4
)

var InputSizeType_name = map[int32]string{
	0: "INPUT_SIZE_SMALL",
	1: "INPUT_SIZE_MEDIUM",
	2: "INPUT_SIZE_FULL",
	3: "INPUT_SIZE_MULTI_LINE",
	4: "INPUT_CUSTOM_URL_STRING",
}

var InputSizeType_value = map[string]int32{
	"INPUT_SIZE_SMALL":        0,
	"INPUT_SIZE_MEDIUM":       1,
	"INPUT_SIZE_FULL":         2,
	"INPUT_SIZE_MULTI_LINE":   3,
	"INPUT_CUSTOM_URL_STRING": 4,
}

func (InputSizeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{3}
}

// UnitType
//
// x-displayName: "Unit"
// UnitType is enumeration of units for scalar fields
type UnitType int32

const (
	UNIT_MILLISECONDS           UnitType = 0
	UNIT_SECONDS                UnitType = 1
	UNIT_MINUTES                UnitType = 2
	UNIT_HOURS                  UnitType = 3
	UNIT_DAYS                   UnitType = 4
	UNIT_BYTES                  UnitType = 10
	UNIT_KBYTES                 UnitType = 11
	UNIT_MBYTES                 UnitType = 12
	UNIT_GBYTES                 UnitType = 13
	UNIT_TBYTES                 UnitType = 14
	UNIT_KIBIBYTES              UnitType = 15
	UNIT_MIBIBYTES              UnitType = 16
	UNIT_GIBIBYTES              UnitType = 17
	UNIT_TEBIBYTES              UnitType = 18
	UNIT_BITS_PER_SECOND        UnitType = 20
	UNIT_BYTES_PER_SECOND       UnitType = 21
	UNIT_KBITS_PER_SECOND       UnitType = 22
	UNIT_KBYTES_PER_SECOND      UnitType = 23
	UNIT_MBITS_PER_SECOND       UnitType = 24
	UNIT_MBYTES_PER_SECOND      UnitType = 25
	UNIT_CONNECTIONS_PER_SECOND UnitType = 30
	UNIT_ERRORS_PER_SECOND      UnitType = 31
	UNIT_PACKETS_PER_SECOND     UnitType = 32
	UNIT_REQUESTS_PER_SECOND    UnitType = 33
	UNIT_PACKETS                UnitType = 40
	UNIT_PERCENTAGE             UnitType = 41
	UNIT_COUNT                  UnitType = 42
)

var UnitType_name = map[int32]string{
	0:  "UNIT_MILLISECONDS",
	1:  "UNIT_SECONDS",
	2:  "UNIT_MINUTES",
	3:  "UNIT_HOURS",
	4:  "UNIT_DAYS",
	10: "UNIT_BYTES",
	11: "UNIT_KBYTES",
	12: "UNIT_MBYTES",
	13: "UNIT_GBYTES",
	14: "UNIT_TBYTES",
	15: "UNIT_KIBIBYTES",
	16: "UNIT_MIBIBYTES",
	17: "UNIT_GIBIBYTES",
	18: "UNIT_TEBIBYTES",
	20: "UNIT_BITS_PER_SECOND",
	21: "UNIT_BYTES_PER_SECOND",
	22: "UNIT_KBITS_PER_SECOND",
	23: "UNIT_KBYTES_PER_SECOND",
	24: "UNIT_MBITS_PER_SECOND",
	25: "UNIT_MBYTES_PER_SECOND",
	30: "UNIT_CONNECTIONS_PER_SECOND",
	31: "UNIT_ERRORS_PER_SECOND",
	32: "UNIT_PACKETS_PER_SECOND",
	33: "UNIT_REQUESTS_PER_SECOND",
	40: "UNIT_PACKETS",
	41: "UNIT_PERCENTAGE",
	42: "UNIT_COUNT",
}

var UnitType_value = map[string]int32{
	"UNIT_MILLISECONDS":           0,
	"UNIT_SECONDS":                1,
	"UNIT_MINUTES":                2,
	"UNIT_HOURS":                  3,
	"UNIT_DAYS":                   4,
	"UNIT_BYTES":                  10,
	"UNIT_KBYTES":                 11,
	"UNIT_MBYTES":                 12,
	"UNIT_GBYTES":                 13,
	"UNIT_TBYTES":                 14,
	"UNIT_KIBIBYTES":              15,
	"UNIT_MIBIBYTES":              16,
	"UNIT_GIBIBYTES":              17,
	"UNIT_TEBIBYTES":              18,
	"UNIT_BITS_PER_SECOND":        20,
	"UNIT_BYTES_PER_SECOND":       21,
	"UNIT_KBITS_PER_SECOND":       22,
	"UNIT_KBYTES_PER_SECOND":      23,
	"UNIT_MBITS_PER_SECOND":       24,
	"UNIT_MBYTES_PER_SECOND":      25,
	"UNIT_CONNECTIONS_PER_SECOND": 30,
	"UNIT_ERRORS_PER_SECOND":      31,
	"UNIT_PACKETS_PER_SECOND":     32,
	"UNIT_REQUESTS_PER_SECOND":    33,
	"UNIT_PACKETS":                40,
	"UNIT_PERCENTAGE":             41,
	"UNIT_COUNT":                  42,
}

func (UnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{4}
}

// MapRenderStyle
//
// x-displayName: "MapRenderStyle"
// MapRenderStyle is enumeration of supported rendering styles for map
type MapRenderStyle int32

const (
	// Render using widget built for labels
	MAP_RENDER_LABELS MapRenderStyle = 0
	// Render as table of (string,string)
	MAP_RENDER_TABLE MapRenderStyle = 1
)

var MapRenderStyle_name = map[int32]string{
	0: "MAP_RENDER_LABELS",
	1: "MAP_RENDER_TABLE",
}

var MapRenderStyle_value = map[string]int32{
	"MAP_RENDER_LABELS": 0,
	"MAP_RENDER_TABLE":  1,
}

func (MapRenderStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{5}
}

// RepeatedRenderStyle
//
// x-displayName: "RepeatedRenderStyle"
// RepeatedRenderStyle is enumeration of supported rendering styles for repeated field
type RepeatedRenderStyle int32

const (
	// Render each item as row in a table
	REPEATED_RENDER_TABLE RepeatedRenderStyle = 0
	// Render each item as a tile
	REPEATED_RENDER_TILES RepeatedRenderStyle = 1
	// Render using widget built for labels
	REPEATED_RENDER_LABELS RepeatedRenderStyle = 2
)

var RepeatedRenderStyle_name = map[int32]string{
	0: "REPEATED_RENDER_TABLE",
	1: "REPEATED_RENDER_TILES",
	2: "REPEATED_RENDER_LABELS",
}

var RepeatedRenderStyle_value = map[string]int32{
	"REPEATED_RENDER_TABLE":  0,
	"REPEATED_RENDER_TILES":  1,
	"REPEATED_RENDER_LABELS": 2,
}

func (RepeatedRenderStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{6}
}

// FileType
//
// x-displayName: "Upload File Type"
// File types that are acceptable in upload
type UploadFileType int32

const (
	// x-displayName: "Image"
	IMAGE UploadFileType = 0
)

var UploadFileType_name = map[int32]string{
	0: "IMAGE",
}

var UploadFileType_value = map[string]int32{
	"IMAGE": 0,
}

func (UploadFileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{7}
}

// HintActionType
//
// x-displayName: "Hint Action Type"
// UI Action types to take action on click on Action button
type HintActionType int32

const (
	// x-displayName: ""
	OPEN_ARN_MODAL HintActionType = 0
)

var HintActionType_name = map[int32]string{
	0: "OPEN_ARN_MODAL",
}

var HintActionType_value = map[string]int32{
	"OPEN_ARN_MODAL": 0,
}

func (HintActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{8}
}

// choices
//
// x-displayName: "Choices"
// List of common choices for a field.
type Choices struct {
	// Title
	//
	// x-displayName "displayname"
	// field number of a field inside oneof that should be default choice in UI.
	Choice []string `protobuf:"bytes,1,rep,name=choice,proto3" json:"choice,omitempty"`
}

func (m *Choices) Reset()      { *m = Choices{} }
func (*Choices) ProtoMessage() {}
func (*Choices) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{0}
}
func (m *Choices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Choices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Choices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Choices.Merge(m, src)
}
func (m *Choices) XXX_Size() int {
	return m.Size()
}
func (m *Choices) XXX_DiscardUnknown() {
	xxx_messageInfo_Choices.DiscardUnknown(m)
}

var xxx_messageInfo_Choices proto.InternalMessageInfo

func (m *Choices) GetChoice() []string {
	if m != nil {
		return m.Choice
	}
	return nil
}

// choice item
//
// x-displayName: "Choice Item"
// A common choice value and it's description.
type ChoiceItem struct {
	// value
	//
	// x-displayName: "Value"
	// Value of the common choice.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// Description of the common choice.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ChoiceItem) Reset()      { *m = ChoiceItem{} }
func (*ChoiceItem) ProtoMessage() {}
func (*ChoiceItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{1}
}
func (m *ChoiceItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChoiceItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChoiceItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChoiceItem.Merge(m, src)
}
func (m *ChoiceItem) XXX_Size() int {
	return m.Size()
}
func (m *ChoiceItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ChoiceItem.DiscardUnknown(m)
}

var xxx_messageInfo_ChoiceItem proto.InternalMessageInfo

func (m *ChoiceItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ChoiceItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// choice item list
//
// x-displayName: "Choice Item List"
// List of common choice items.
type ChoiceItemList struct {
	// choice items
	//
	// x-displayName: "Choice Items"
	// List of common choice items.
	ChoiceItems []*ChoiceItem `protobuf:"bytes,1,rep,name=choice_items,json=choiceItems,proto3" json:"choice_items,omitempty"`
}

func (m *ChoiceItemList) Reset()      { *m = ChoiceItemList{} }
func (*ChoiceItemList) ProtoMessage() {}
func (*ChoiceItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{2}
}
func (m *ChoiceItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChoiceItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChoiceItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChoiceItemList.Merge(m, src)
}
func (m *ChoiceItemList) XXX_Size() int {
	return m.Size()
}
func (m *ChoiceItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChoiceItemList.DiscardUnknown(m)
}

var xxx_messageInfo_ChoiceItemList proto.InternalMessageInfo

func (m *ChoiceItemList) GetChoiceItems() []*ChoiceItem {
	if m != nil {
		return m.ChoiceItems
	}
	return nil
}

// label key class list
//
// x-displayName: "Label Key Class List"
// List of label key classes.
type LabelKeyClassList struct {
	// key classes
	//
	// x-displayName: "Choice Items"
	// List of common choice items.
	KeyClasses []LabelKeyClass `protobuf:"varint,1,rep,packed,name=key_classes,json=keyClasses,proto3,enum=ves.io.schema.LabelKeyClass" json:"key_classes,omitempty"`
}

func (m *LabelKeyClassList) Reset()      { *m = LabelKeyClassList{} }
func (*LabelKeyClassList) ProtoMessage() {}
func (*LabelKeyClassList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{3}
}
func (m *LabelKeyClassList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelKeyClassList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LabelKeyClassList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelKeyClassList.Merge(m, src)
}
func (m *LabelKeyClassList) XXX_Size() int {
	return m.Size()
}
func (m *LabelKeyClassList) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelKeyClassList.DiscardUnknown(m)
}

var xxx_messageInfo_LabelKeyClassList proto.InternalMessageInfo

func (m *LabelKeyClassList) GetKeyClasses() []LabelKeyClass {
	if m != nil {
		return m.KeyClasses
	}
	return nil
}

// LabelSelectorOperatorList
//
// x-displayName: "Label Selector Operator List"
// List of label selector operators.
type LabelSelectorOperatorList struct {
	// key classes
	//
	// x-displayName: "Operator"
	// List of operators.
	Operators []LabelSelectorOperator `protobuf:"varint,1,rep,packed,name=operators,proto3,enum=ves.io.schema.LabelSelectorOperator" json:"operators,omitempty"`
}

func (m *LabelSelectorOperatorList) Reset()      { *m = LabelSelectorOperatorList{} }
func (*LabelSelectorOperatorList) ProtoMessage() {}
func (*LabelSelectorOperatorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{4}
}
func (m *LabelSelectorOperatorList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelSelectorOperatorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LabelSelectorOperatorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelSelectorOperatorList.Merge(m, src)
}
func (m *LabelSelectorOperatorList) XXX_Size() int {
	return m.Size()
}
func (m *LabelSelectorOperatorList) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelSelectorOperatorList.DiscardUnknown(m)
}

var xxx_messageInfo_LabelSelectorOperatorList proto.InternalMessageInfo

func (m *LabelSelectorOperatorList) GetOperators() []LabelSelectorOperator {
	if m != nil {
		return m.Operators
	}
	return nil
}

// Stored Object URL
//
// x-displayName "Stored Object URL"
// Specifies properties for a stored object URL.
//
// The information here is used by the FE to render a string or repeated string field using the same or
// similar component used for ObjectRefType and views.ObjectRefType.
// The URL below is displayed with name "foo-ns/bar-file/v1-22-01-12" in the selection dropdown.
// https://my.tenant.domain/api/object_store/namespaces/foo-ns/stored_objects/swagger/bar-file/v1-22-01-12
//
// If disable_create is false, FE adds a "Create new <object_type>" button to the dropdown that opens up
// the appropriate form and stacks the stored object in the wizard sidebar.
// In RO mode, the name "foo-ns/bar-file/v1-22-01-12" is clickable and stacks the stored object in wizard
// sidebar.
type StoredObjectURL struct {
	// object_type
	//
	// x-displayName: "Object Type"
	// The type of the stored object e.g. "swagger", "certificate", "html", "javascript" etc.
	ObjectType string `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// Disable Create
	//
	// x-displayName: "Disable Create"
	// If this option is set then FE will not show create option for stored object. It will
	// only show selection of existing stored objects.
	DisableCreate bool `protobuf:"varint,2,opt,name=disable_create,json=disableCreate,proto3" json:"disable_create,omitempty"`
}

func (m *StoredObjectURL) Reset()      { *m = StoredObjectURL{} }
func (*StoredObjectURL) ProtoMessage() {}
func (*StoredObjectURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{5}
}
func (m *StoredObjectURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredObjectURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StoredObjectURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredObjectURL.Merge(m, src)
}
func (m *StoredObjectURL) XXX_Size() int {
	return m.Size()
}
func (m *StoredObjectURL) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredObjectURL.DiscardUnknown(m)
}

var xxx_messageInfo_StoredObjectURL proto.InternalMessageInfo

func (m *StoredObjectURL) GetObjectType() string {
	if m != nil {
		return m.ObjectType
	}
	return ""
}

func (m *StoredObjectURL) GetDisableCreate() bool {
	if m != nil {
		return m.DisableCreate
	}
	return false
}

// HiddenConditions
//
// x-displayName: "HiddenConditions"
// HiddenConditions specifies a set of conditions for which a field should be hidden.
type HiddenConditions struct {
	// root_object_in
	//
	// x-displayName: "Root Object In"
	// List of root object types for which the field should be hidden.
	RootObjectIn []string `protobuf:"bytes,1,rep,name=root_object_in,json=rootObjectIn,proto3" json:"root_object_in,omitempty"`
	// ancestor_message_in
	//
	// x-displayName: "Ancestor Message In"
	// List of ancestor message types for which the field should be hidden.
	AncestorMessageIn []string `protobuf:"bytes,2,rep,name=ancestor_message_in,json=ancestorMessageIn,proto3" json:"ancestor_message_in,omitempty"`
	// path_suffix_in
	//
	// x-displayName: "Path Suffix In"
	// List of path suffixes for which the field should be hidden. Note that each
	// entry is a path suffix containing field names, not message types.
	PathSuffixIn []string `protobuf:"bytes,3,rep,name=path_suffix_in,json=pathSuffixIn,proto3" json:"path_suffix_in,omitempty"`
	// environment_in
	//
	// x-displayName: "Environment In"
	// List of environments for which the field should be hidden.
	// The values can be "devtest", "crt", "staging", "prod".
	EnvironmentIn []string `protobuf:"bytes,5,rep,name=environment_in,json=environmentIn,proto3" json:"environment_in,omitempty"`
	// invert_match
	//
	// x-displayName: "Invert Match"
	// Invertly match the root_object/ancestor_message/path_suffix. If this is set, field will be hidden everywhere except the configured root_objects/ancestor_messages/path_suffixes.
	InvertMatch bool `protobuf:"varint,4,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	// workspaces_in
	//
	// x-displayName: "Workspaces In"
	// List of workspaces for which the field should be hidden.
	// The values can be "web-app-and-api-protection", "bot-defense".
	WorkspacesIn []string `protobuf:"bytes,6,rep,name=workspaces_in,json=workspacesIn,proto3" json:"workspaces_in,omitempty"`
}

func (m *HiddenConditions) Reset()      { *m = HiddenConditions{} }
func (*HiddenConditions) ProtoMessage() {}
func (*HiddenConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{6}
}
func (m *HiddenConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HiddenConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HiddenConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HiddenConditions.Merge(m, src)
}
func (m *HiddenConditions) XXX_Size() int {
	return m.Size()
}
func (m *HiddenConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_HiddenConditions.DiscardUnknown(m)
}

var xxx_messageInfo_HiddenConditions proto.InternalMessageInfo

func (m *HiddenConditions) GetRootObjectIn() []string {
	if m != nil {
		return m.RootObjectIn
	}
	return nil
}

func (m *HiddenConditions) GetAncestorMessageIn() []string {
	if m != nil {
		return m.AncestorMessageIn
	}
	return nil
}

func (m *HiddenConditions) GetPathSuffixIn() []string {
	if m != nil {
		return m.PathSuffixIn
	}
	return nil
}

func (m *HiddenConditions) GetEnvironmentIn() []string {
	if m != nil {
		return m.EnvironmentIn
	}
	return nil
}

func (m *HiddenConditions) GetInvertMatch() bool {
	if m != nil {
		return m.InvertMatch
	}
	return false
}

func (m *HiddenConditions) GetWorkspacesIn() []string {
	if m != nil {
		return m.WorkspacesIn
	}
	return nil
}

// Suggested Values
//
// x-displayName: "Suggested Values"
// SuggestedValues specifies a set of conditions for which the FE should query the BE for suggested values for a field.
// The FE must not query the BE if none of the conditions are satisfied.
type SuggestedValues struct {
	// Expected Count
	//
	// x-displayName: "Expected Count"
	// Hint to the FE regarding the number of suggested values that may be returned by the BE.
	ExpectedCount SuggestedValuesCountType `protobuf:"varint,1,opt,name=expected_count,json=expectedCount,proto3,enum=ves.io.schema.SuggestedValuesCountType" json:"expected_count,omitempty"`
	// root_object_in
	//
	// x-displayName: "Root Object In"
	// List of root object types for which the FE should query the BE.
	RootObjectIn []string `protobuf:"bytes,2,rep,name=root_object_in,json=rootObjectIn,proto3" json:"root_object_in,omitempty"`
	// ancestor_message_in
	//
	// x-displayName: "Ancestor Message In"
	// List of ancestor message types for which the FE should query the BE.
	AncestorMessageIn []string `protobuf:"bytes,3,rep,name=ancestor_message_in,json=ancestorMessageIn,proto3" json:"ancestor_message_in,omitempty"`
	// path_suffix_in
	//
	// x-displayName: "Path Suffix In"
	// List of path suffixes for which the FE should query the BE.
	// Note that each entry is a path suffix containing field names, not message types.
	PathSuffixIn []string `protobuf:"bytes,4,rep,name=path_suffix_in,json=pathSuffixIn,proto3" json:"path_suffix_in,omitempty"`
	// Exclusive
	//
	// x-displayName: "Exclusive"
	// Instruction to the FE to disallow any user input other than the suggested values returned by the BE.
	Exclusive bool `protobuf:"varint,5,opt,name=exclusive,proto3" json:"exclusive,omitempty"`
	// Prefetch
	//
	// x-displayName: "Prefetch"
	// Instruction to the FE to prefetch the suggested values before loading the component.
	Prefetch bool `protobuf:"varint,6,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	// service_slug
	//
	// x-displayName: "Service Slug"
	// This indicates which backend service slug in apigw to use(e.g. config shape/csd) to get the suggested values.
	ServiceSlug string `protobuf:"bytes,7,opt,name=service_slug,json=serviceSlug,proto3" json:"service_slug,omitempty"`
}

func (m *SuggestedValues) Reset()      { *m = SuggestedValues{} }
func (*SuggestedValues) ProtoMessage() {}
func (*SuggestedValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{7}
}
func (m *SuggestedValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestedValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SuggestedValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestedValues.Merge(m, src)
}
func (m *SuggestedValues) XXX_Size() int {
	return m.Size()
}
func (m *SuggestedValues) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestedValues.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestedValues proto.InternalMessageInfo

func (m *SuggestedValues) GetExpectedCount() SuggestedValuesCountType {
	if m != nil {
		return m.ExpectedCount
	}
	return SUGGESTED_VALUES_COUNT_LARGE
}

func (m *SuggestedValues) GetRootObjectIn() []string {
	if m != nil {
		return m.RootObjectIn
	}
	return nil
}

func (m *SuggestedValues) GetAncestorMessageIn() []string {
	if m != nil {
		return m.AncestorMessageIn
	}
	return nil
}

func (m *SuggestedValues) GetPathSuffixIn() []string {
	if m != nil {
		return m.PathSuffixIn
	}
	return nil
}

func (m *SuggestedValues) GetExclusive() bool {
	if m != nil {
		return m.Exclusive
	}
	return false
}

func (m *SuggestedValues) GetPrefetch() bool {
	if m != nil {
		return m.Prefetch
	}
	return false
}

func (m *SuggestedValues) GetServiceSlug() string {
	if m != nil {
		return m.ServiceSlug
	}
	return ""
}

// field view options
//
// x-displayName "Field View Options"
// FieldViewOptions encapsulates the view options for each type of field. Depending on the
// field, the correct set should be used to ensure proper rendering.
type FieldViewOptions struct {
	// new_form
	//
	// x-displayName: "New Form"
	// Indicates whether UI should open new "form"
	NewForm bool `protobuf:"varint,3000,opt,name=new_form,json=newForm,proto3" json:"new_form,omitempty"`
	// input_box_size
	//
	// x-displayName: "Input Box Size"
	// Input box size in UI forms for this field
	InputBoxSize InputSizeType `protobuf:"varint,3001,opt,name=input_box_size,json=inputBoxSize,proto3,enum=ves.io.schema.InputSizeType" json:"input_box_size,omitempty"`
	// Default Value
	//
	// x-displayName "Default Value"
	// Default value to be used by UI to initialize the entry box. Note that the value is always specified as a string for fields of any scalar type.
	// Further, the value for an enum field is specified as name of the enum value, rather than the numerical value.
	DefaultValue string `protobuf:"bytes,3002,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// common choices
	//
	// x-displayName: "Common Choices"
	// Common string values that UI can show in drop down, while also supporting entering any arbitrary string
	CommonChoices *Choices `protobuf:"bytes,3003,opt,name=common_choices,json=commonChoices,proto3" json:"common_choices,omitempty"`
	// display name
	//
	// x-displayName: "Display Name"
	// Display Name for field
	DisplayName string `protobuf:"bytes,3004,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// Description for field
	Description string `protobuf:"bytes,3005,opt,name=description,proto3" json:"description,omitempty"`
	// map
	//
	// x-displayName: "Map Options"
	// View options for map including for map keys and values.
	Map *MapOptions `protobuf:"bytes,3009,opt,name=map,proto3" json:"map,omitempty"`
	// repeated
	//
	// x-displayName: "Repeated Options"
	// View options for repeated
	Repeated *RepeatedOptions `protobuf:"bytes,3010,opt,name=repeated,proto3" json:"repeated,omitempty"`
	// in_namespace_types
	//
	// x-displayName: "In Namespace Types"
	// This is a comma-separated list of namespace types for which the field is valid.
	// The possible values are all combinations of "system", "shared" and "user" e.g.
	// "system,shared".
	InNamespaceTypes string `protobuf:"bytes,3011,opt,name=in_namespace_types,json=inNamespaceTypes,proto3" json:"in_namespace_types,omitempty"`
	// input_box_format
	//
	// x-displayName: "Input Box Format"
	// x-example: "json,yaml"
	// Input box format is a string of comma-separated values with possible values being ascii, base64, json and yaml.
	// This is currently relevant only if input_box_size is INPUT_CUSTOM_URL_STRING.
	InputBoxFormat string `protobuf:"bytes,3012,opt,name=input_box_format,json=inputBoxFormat,proto3" json:"input_box_format,omitempty"`
}

func (m *FieldViewOptions) Reset()      { *m = FieldViewOptions{} }
func (*FieldViewOptions) ProtoMessage() {}
func (*FieldViewOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{8}
}
func (m *FieldViewOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldViewOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FieldViewOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldViewOptions.Merge(m, src)
}
func (m *FieldViewOptions) XXX_Size() int {
	return m.Size()
}
func (m *FieldViewOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldViewOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FieldViewOptions proto.InternalMessageInfo

func (m *FieldViewOptions) GetNewForm() bool {
	if m != nil {
		return m.NewForm
	}
	return false
}

func (m *FieldViewOptions) GetInputBoxSize() InputSizeType {
	if m != nil {
		return m.InputBoxSize
	}
	return INPUT_SIZE_SMALL
}

func (m *FieldViewOptions) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *FieldViewOptions) GetCommonChoices() *Choices {
	if m != nil {
		return m.CommonChoices
	}
	return nil
}

func (m *FieldViewOptions) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FieldViewOptions) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FieldViewOptions) GetMap() *MapOptions {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *FieldViewOptions) GetRepeated() *RepeatedOptions {
	if m != nil {
		return m.Repeated
	}
	return nil
}

func (m *FieldViewOptions) GetInNamespaceTypes() string {
	if m != nil {
		return m.InNamespaceTypes
	}
	return ""
}

func (m *FieldViewOptions) GetInputBoxFormat() string {
	if m != nil {
		return m.InputBoxFormat
	}
	return ""
}

type MapOptions struct {
	// style
	//
	// x-displayName "Rendering Style"
	// Style specifies the rendering style to use for the map
	Style MapRenderStyle `protobuf:"varint,1,opt,name=style,proto3,enum=ves.io.schema.MapRenderStyle" json:"style,omitempty"`
	// keys
	//
	// x-displayName "Keys Options"
	// Keys specifies the view options to be applied to each key in the field.
	Keys *FieldViewOptions `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
	// values
	//
	// x-displayName "Values Options"
	// Values specifies the view options to be applied to each key in the field.
	Values *FieldViewOptions `protobuf:"bytes,3,opt,name=values,proto3" json:"values,omitempty"`
}

func (m *MapOptions) Reset()      { *m = MapOptions{} }
func (*MapOptions) ProtoMessage() {}
func (*MapOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{9}
}
func (m *MapOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MapOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapOptions.Merge(m, src)
}
func (m *MapOptions) XXX_Size() int {
	return m.Size()
}
func (m *MapOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MapOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MapOptions proto.InternalMessageInfo

func (m *MapOptions) GetStyle() MapRenderStyle {
	if m != nil {
		return m.Style
	}
	return MAP_RENDER_LABELS
}

func (m *MapOptions) GetKeys() *FieldViewOptions {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *MapOptions) GetValues() *FieldViewOptions {
	if m != nil {
		return m.Values
	}
	return nil
}

type RepeatedOptions struct {
	// style
	//
	// x-displayName "Rendering Style"
	// Style specifies the rendering style to use for repeated field
	Style RepeatedRenderStyle `protobuf:"varint,1,opt,name=style,proto3,enum=ves.io.schema.RepeatedRenderStyle" json:"style,omitempty"`
	// ordered_list
	//
	// x-displayName "Ordered List"
	// Order of items in repeated field is significant.
	OrderedList bool `protobuf:"varint,2,opt,name=ordered_list,json=orderedList,proto3" json:"ordered_list,omitempty"`
	// disable_create_on_table
	//
	// x-displayName: "Disable Create on Table"
	// This option disables create through form on the table through UI. Rows will be created dynamically and will be editable
	DisableCreateOnTable bool `protobuf:"varint,3,opt,name=disable_create_on_table,json=disableCreateOnTable,proto3" json:"disable_create_on_table,omitempty"`
	// custom_empty_table_text
	//
	// x-displayName: "Custom Empty Table Text"
	// Add custom text when the rows are empty in a table.
	CustomEmptyTableText string `protobuf:"bytes,4,opt,name=custom_empty_table_text,json=customEmptyTableText,proto3" json:"custom_empty_table_text,omitempty"`
}

func (m *RepeatedOptions) Reset()      { *m = RepeatedOptions{} }
func (*RepeatedOptions) ProtoMessage() {}
func (*RepeatedOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{10}
}
func (m *RepeatedOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RepeatedOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedOptions.Merge(m, src)
}
func (m *RepeatedOptions) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedOptions proto.InternalMessageInfo

func (m *RepeatedOptions) GetStyle() RepeatedRenderStyle {
	if m != nil {
		return m.Style
	}
	return REPEATED_RENDER_TABLE
}

func (m *RepeatedOptions) GetOrderedList() bool {
	if m != nil {
		return m.OrderedList
	}
	return false
}

func (m *RepeatedOptions) GetDisableCreateOnTable() bool {
	if m != nil {
		return m.DisableCreateOnTable
	}
	return false
}

func (m *RepeatedOptions) GetCustomEmptyTableText() string {
	if m != nil {
		return m.CustomEmptyTableText
	}
	return ""
}

// Tile
//
// x-displayName "Tile"
// Title of the tile and comma separated list of fields
type Tile struct {
	// Title
	//
	// x-displayName "Title"
	// Title of the tile
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Fields
	//
	// x-displayName "Fields"
	// Comma separated list of field numbers
	Fields string `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	// Help
	//
	// x-displayName "Help"
	// Help string for tile
	Help string `protobuf:"bytes,3,opt,name=help,proto3" json:"help,omitempty"`
	// Inherit Description
	//
	// x-displayName "Inherit Description"
	// Inherit description from parent field
	InheritDescription bool `protobuf:"varint,4,opt,name=inherit_description,json=inheritDescription,proto3" json:"inherit_description,omitempty"`
	// Anonymous
	//
	// x-displayName "Anonymous"
	// Do not render the tile.
	// The tile is defined only to control the order in which the fields in the tile appear in the form relative to other fields.
	Anonymous bool `protobuf:"varint,5,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
}

func (m *Tile) Reset()      { *m = Tile{} }
func (*Tile) ProtoMessage() {}
func (*Tile) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{11}
}
func (m *Tile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Tile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tile.Merge(m, src)
}
func (m *Tile) XXX_Size() int {
	return m.Size()
}
func (m *Tile) XXX_DiscardUnknown() {
	xxx_messageInfo_Tile.DiscardUnknown(m)
}

var xxx_messageInfo_Tile proto.InternalMessageInfo

func (m *Tile) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Tile) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *Tile) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *Tile) GetInheritDescription() bool {
	if m != nil {
		return m.InheritDescription
	}
	return false
}

func (m *Tile) GetAnonymous() bool {
	if m != nil {
		return m.Anonymous
	}
	return false
}

// Tiles
//
// x-displayName "Tiles"
// List of Tiles in a message
type Tiles struct {
	// Title
	//
	// x-displayName "displayname"
	// field number of a field inside oneof that should be default choice in UI.
	TileList []*Tile `protobuf:"bytes,1,rep,name=tile_list,json=tileList,proto3" json:"tile_list,omitempty"`
}

func (m *Tiles) Reset()      { *m = Tiles{} }
func (*Tiles) ProtoMessage() {}
func (*Tiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{12}
}
func (m *Tiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Tiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tiles.Merge(m, src)
}
func (m *Tiles) XXX_Size() int {
	return m.Size()
}
func (m *Tiles) XXX_DiscardUnknown() {
	xxx_messageInfo_Tiles.DiscardUnknown(m)
}

var xxx_messageInfo_Tiles proto.InternalMessageInfo

func (m *Tiles) GetTileList() []*Tile {
	if m != nil {
		return m.TileList
	}
	return nil
}

// ConstraintLength
//
// x-displayName "Length Constraint"
// Predicate to check the length of a field
type ConstraintLength struct {
	// Path
	//
	// x-displayName "Path"
	// Relative path of the repeated/map field whose length is to be checked
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Length Choice
	//
	// x-displayName "Length Choice"
	// Specify how the field length is to be checked
	//
	// Types that are valid to be assigned to LengthChoice:
	//	*ConstraintLength_Equals
	//	*ConstraintLength_NotEquals
	LengthChoice isConstraintLength_LengthChoice `protobuf_oneof:"length_choice"`
}

func (m *ConstraintLength) Reset()      { *m = ConstraintLength{} }
func (*ConstraintLength) ProtoMessage() {}
func (*ConstraintLength) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{13}
}
func (m *ConstraintLength) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstraintLength) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConstraintLength) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstraintLength.Merge(m, src)
}
func (m *ConstraintLength) XXX_Size() int {
	return m.Size()
}
func (m *ConstraintLength) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstraintLength.DiscardUnknown(m)
}

var xxx_messageInfo_ConstraintLength proto.InternalMessageInfo

type isConstraintLength_LengthChoice interface {
	isConstraintLength_LengthChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConstraintLength_Equals struct {
	Equals uint32 `protobuf:"varint,2,opt,name=equals,proto3,oneof" json:"equals,omitempty"`
}
type ConstraintLength_NotEquals struct {
	NotEquals uint32 `protobuf:"varint,3,opt,name=not_equals,json=notEquals,proto3,oneof" json:"not_equals,omitempty"`
}

func (*ConstraintLength_Equals) isConstraintLength_LengthChoice()    {}
func (*ConstraintLength_NotEquals) isConstraintLength_LengthChoice() {}

func (m *ConstraintLength) GetLengthChoice() isConstraintLength_LengthChoice {
	if m != nil {
		return m.LengthChoice
	}
	return nil
}

func (m *ConstraintLength) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ConstraintLength) GetEquals() uint32 {
	if x, ok := m.GetLengthChoice().(*ConstraintLength_Equals); ok {
		return x.Equals
	}
	return 0
}

func (m *ConstraintLength) GetNotEquals() uint32 {
	if x, ok := m.GetLengthChoice().(*ConstraintLength_NotEquals); ok {
		return x.NotEquals
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConstraintLength) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConstraintLength_Equals)(nil),
		(*ConstraintLength_NotEquals)(nil),
	}
}

// DisplayValue
//
// x-displayName "Display Value"
// Display the value of a scalar field.
type DisplayValue struct {
	// Path
	//
	// x-displayName "Path"
	// Relative path of the scalar field
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Default Value
	//
	// x-displayName "Default Value"
	// Default value to display if the path is nil
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Prefix
	//
	// x-displayName "Prefix"
	// Literal to prepend to the value extracted from the field e.g. "Namespace"
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Is Enum
	//
	// x-displayName "Is Enum"
	// The field is an enum.
	IsEnum bool `protobuf:"varint,4,opt,name=is_enum,json=isEnum,proto3" json:"is_enum,omitempty"`
}

func (m *DisplayValue) Reset()      { *m = DisplayValue{} }
func (*DisplayValue) ProtoMessage() {}
func (*DisplayValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{14}
}
func (m *DisplayValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayValue.Merge(m, src)
}
func (m *DisplayValue) XXX_Size() int {
	return m.Size()
}
func (m *DisplayValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayValue.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayValue proto.InternalMessageInfo

func (m *DisplayValue) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DisplayValue) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *DisplayValue) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *DisplayValue) GetIsEnum() bool {
	if m != nil {
		return m.IsEnum
	}
	return false
}

// DisplayExistsNotExists
//
// x-displayName "Display Exists or Not Exists"
// Display one of 2 specified strings depending on whether a message field exists or not
type DisplayExistsNotExists struct {
	// Path
	//
	// x-displayName "Path"
	// Relative path of the message field
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Exists Value
	//
	// x-displayName "Exists Value"
	// Value to display when the message is non-null
	ExistsValue string `protobuf:"bytes,2,opt,name=exists_value,json=existsValue,proto3" json:"exists_value,omitempty"`
	// No Exists Value
	//
	// x-displayName "No Exists Value"
	// Value to display when the message is null
	NoExistsValue string `protobuf:"bytes,3,opt,name=no_exists_value,json=noExistsValue,proto3" json:"no_exists_value,omitempty"`
}

func (m *DisplayExistsNotExists) Reset()      { *m = DisplayExistsNotExists{} }
func (*DisplayExistsNotExists) ProtoMessage() {}
func (*DisplayExistsNotExists) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{15}
}
func (m *DisplayExistsNotExists) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayExistsNotExists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayExistsNotExists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayExistsNotExists.Merge(m, src)
}
func (m *DisplayExistsNotExists) XXX_Size() int {
	return m.Size()
}
func (m *DisplayExistsNotExists) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayExistsNotExists.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayExistsNotExists proto.InternalMessageInfo

func (m *DisplayExistsNotExists) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DisplayExistsNotExists) GetExistsValue() string {
	if m != nil {
		return m.ExistsValue
	}
	return ""
}

func (m *DisplayExistsNotExists) GetNoExistsValue() string {
	if m != nil {
		return m.NoExistsValue
	}
	return ""
}

// DisplayOneofItem
//
// x-displayName "Display Oneof Item"
// Attributes of a field in a oneof.
type DisplayOneofItem struct {
	// Length Constraint
	//
	// x-displayName "Length Constraint"
	// Constraint on the length of the field if it's repeated/map
	LengthOf *ConstraintLength `protobuf:"bytes,10,opt,name=length_of,json=lengthOf,proto3" json:"length_of,omitempty"`
	// Path
	//
	// x-displayName ""Path
	// Relative path of the message field
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Value Choice
	//
	// x-displayName "Value Choice"
	// Determine how the field value is chosen
	//
	// Types that are valid to be assigned to ValueChoice:
	//	*DisplayOneofItem_FieldValue
	//	*DisplayOneofItem_FieldLength
	//	*DisplayOneofItem_FieldElements
	//	*DisplayOneofItem_FieldMapElements
	//	*DisplayOneofItem_Value
	ValueChoice isDisplayOneofItem_ValueChoice `protobuf_oneof:"value_choice"`
}

func (m *DisplayOneofItem) Reset()      { *m = DisplayOneofItem{} }
func (*DisplayOneofItem) ProtoMessage() {}
func (*DisplayOneofItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{16}
}
func (m *DisplayOneofItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayOneofItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayOneofItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayOneofItem.Merge(m, src)
}
func (m *DisplayOneofItem) XXX_Size() int {
	return m.Size()
}
func (m *DisplayOneofItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayOneofItem.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayOneofItem proto.InternalMessageInfo

type isDisplayOneofItem_ValueChoice interface {
	isDisplayOneofItem_ValueChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DisplayOneofItem_FieldValue struct {
	FieldValue *DisplayValue `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3,oneof" json:"field_value,omitempty"`
}
type DisplayOneofItem_FieldLength struct {
	FieldLength *DisplayLength `protobuf:"bytes,3,opt,name=field_length,json=fieldLength,proto3,oneof" json:"field_length,omitempty"`
}
type DisplayOneofItem_FieldElements struct {
	FieldElements *DisplayElements `protobuf:"bytes,4,opt,name=field_elements,json=fieldElements,proto3,oneof" json:"field_elements,omitempty"`
}
type DisplayOneofItem_FieldMapElements struct {
	FieldMapElements *DisplayMapElements `protobuf:"bytes,5,opt,name=field_map_elements,json=fieldMapElements,proto3,oneof" json:"field_map_elements,omitempty"`
}
type DisplayOneofItem_Value struct {
	Value string `protobuf:"bytes,6,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (*DisplayOneofItem_FieldValue) isDisplayOneofItem_ValueChoice()       {}
func (*DisplayOneofItem_FieldLength) isDisplayOneofItem_ValueChoice()      {}
func (*DisplayOneofItem_FieldElements) isDisplayOneofItem_ValueChoice()    {}
func (*DisplayOneofItem_FieldMapElements) isDisplayOneofItem_ValueChoice() {}
func (*DisplayOneofItem_Value) isDisplayOneofItem_ValueChoice()            {}

func (m *DisplayOneofItem) GetValueChoice() isDisplayOneofItem_ValueChoice {
	if m != nil {
		return m.ValueChoice
	}
	return nil
}

func (m *DisplayOneofItem) GetLengthOf() *ConstraintLength {
	if m != nil {
		return m.LengthOf
	}
	return nil
}

func (m *DisplayOneofItem) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DisplayOneofItem) GetFieldValue() *DisplayValue {
	if x, ok := m.GetValueChoice().(*DisplayOneofItem_FieldValue); ok {
		return x.FieldValue
	}
	return nil
}

func (m *DisplayOneofItem) GetFieldLength() *DisplayLength {
	if x, ok := m.GetValueChoice().(*DisplayOneofItem_FieldLength); ok {
		return x.FieldLength
	}
	return nil
}

func (m *DisplayOneofItem) GetFieldElements() *DisplayElements {
	if x, ok := m.GetValueChoice().(*DisplayOneofItem_FieldElements); ok {
		return x.FieldElements
	}
	return nil
}

func (m *DisplayOneofItem) GetFieldMapElements() *DisplayMapElements {
	if x, ok := m.GetValueChoice().(*DisplayOneofItem_FieldMapElements); ok {
		return x.FieldMapElements
	}
	return nil
}

func (m *DisplayOneofItem) GetValue() string {
	if x, ok := m.GetValueChoice().(*DisplayOneofItem_Value); ok {
		return x.Value
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DisplayOneofItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DisplayOneofItem_FieldValue)(nil),
		(*DisplayOneofItem_FieldLength)(nil),
		(*DisplayOneofItem_FieldElements)(nil),
		(*DisplayOneofItem_FieldMapElements)(nil),
		(*DisplayOneofItem_Value)(nil),
	}
}

// DisplayOneofItemList
//
// x-displayName "Display Oneof Item List"
// List of DisplayOneofItem.
type DisplayOneofItemList struct {
	// Items
	//
	// x-displayName "Items"
	// List of oneof fields and their values.
	Items []*DisplayOneofItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *DisplayOneofItemList) Reset()      { *m = DisplayOneofItemList{} }
func (*DisplayOneofItemList) ProtoMessage() {}
func (*DisplayOneofItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{17}
}
func (m *DisplayOneofItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayOneofItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayOneofItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayOneofItemList.Merge(m, src)
}
func (m *DisplayOneofItemList) XXX_Size() int {
	return m.Size()
}
func (m *DisplayOneofItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayOneofItemList.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayOneofItemList proto.InternalMessageInfo

func (m *DisplayOneofItemList) GetItems() []*DisplayOneofItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// DisplayOneof
//
// x-displayName "Display Oneof"
// Display one of a list of specified values depending on which field of a oneof is present
// The assumption is that only one of paths in the specified item list is non-nil for a given message.
type DisplayOneof struct {
	// Oneof List
	//
	// x-displayName "Oneof List"
	// List of oneof fields and their values.
	OneofList *DisplayOneofItemList `protobuf:"bytes,1,opt,name=oneof_list,json=oneofList,proto3" json:"oneof_list,omitempty"`
	// Default Value
	//
	// x-displayName "Default Value"
	// Default value to display if none of the paths in the list is non-nil
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *DisplayOneof) Reset()      { *m = DisplayOneof{} }
func (*DisplayOneof) ProtoMessage() {}
func (*DisplayOneof) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{18}
}
func (m *DisplayOneof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayOneof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayOneof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayOneof.Merge(m, src)
}
func (m *DisplayOneof) XXX_Size() int {
	return m.Size()
}
func (m *DisplayOneof) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayOneof.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayOneof proto.InternalMessageInfo

func (m *DisplayOneof) GetOneofList() *DisplayOneofItemList {
	if m != nil {
		return m.OneofList
	}
	return nil
}

func (m *DisplayOneof) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

// DisplayOneValue
//
// x-displayName "Display One Value"
// Display the value of one scalar field from the given list.
// The assumption is that only one of the specified paths is non-nil for a given message.
type DisplayOneValue struct {
	// Path List
	//
	// x-displayName "Path List"
	// Relative paths of the scalar fields.
	PathList []string `protobuf:"bytes,1,rep,name=path_list,json=pathList,proto3" json:"path_list,omitempty"`
	// Default Value
	//
	// x-displayName "Default Value"
	// Default value to display if none of the paths in the list is non-nil
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *DisplayOneValue) Reset()      { *m = DisplayOneValue{} }
func (*DisplayOneValue) ProtoMessage() {}
func (*DisplayOneValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{19}
}
func (m *DisplayOneValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayOneValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayOneValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayOneValue.Merge(m, src)
}
func (m *DisplayOneValue) XXX_Size() int {
	return m.Size()
}
func (m *DisplayOneValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayOneValue.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayOneValue proto.InternalMessageInfo

func (m *DisplayOneValue) GetPathList() []string {
	if m != nil {
		return m.PathList
	}
	return nil
}

func (m *DisplayOneValue) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

// DisplayLength
//
// x-displayName "Display Length"
// Display the length of a repeated/map field.
type DisplayLength struct {
	// Path
	//
	// x-displayName "Path"
	// Relative path of the repeated/map field
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Suffix
	//
	// x-displayName "Suffix"
	// Literal to append to the length extracted from the field e.g. "Rules", "URLs", "Labels"
	Suffix string `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// Placeholder
	//
	// x-displayName "Placeholder"
	// This should be set in lieu of using an empty DisplayLength to ensure that repositories
	// that import the schema repo (e.g. stellar) do not elide empty DisplayLength fields.
	Placeholder bool `protobuf:"varint,3,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
}

func (m *DisplayLength) Reset()      { *m = DisplayLength{} }
func (*DisplayLength) ProtoMessage() {}
func (*DisplayLength) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{20}
}
func (m *DisplayLength) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayLength) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayLength) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayLength.Merge(m, src)
}
func (m *DisplayLength) XXX_Size() int {
	return m.Size()
}
func (m *DisplayLength) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayLength.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayLength proto.InternalMessageInfo

func (m *DisplayLength) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DisplayLength) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *DisplayLength) GetPlaceholder() bool {
	if m != nil {
		return m.Placeholder
	}
	return false
}

// DisplayElements
//
// x-displayName "Display Elements"
// Display the elements of a repeated field.
// The elements in question would be a scalar type
type DisplayElements struct {
	// Path
	//
	// x-displayName "Path"
	// Relative path of the repeated/map field
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Limit
	//
	// x-displayName "Limit"
	// Limit of the number of elements to display
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Default Value
	//
	// x-displayName "Default Value"
	// Default value to display if the field is empty
	DefaultValue string `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Sub Path
	//
	// x-displayName "Sub Path"
	// Sub path within a repeated message field.
	SubPath string `protobuf:"bytes,4,opt,name=sub_path,json=subPath,proto3" json:"sub_path,omitempty"`
	// Prefix
	//
	// x-displayName "Prefix"
	// Literal to prepend to the list of values extracted from the field e.g. "IP Prefixes".
	// The prefix should be prepended to the list, not to each item in the list.
	Prefix string `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Is Enum
	//
	// x-displayName "Is Enum"
	// The repeated field is an enum.
	IsEnum bool `protobuf:"varint,6,opt,name=is_enum,json=isEnum,proto3" json:"is_enum,omitempty"`
}

func (m *DisplayElements) Reset()      { *m = DisplayElements{} }
func (*DisplayElements) ProtoMessage() {}
func (*DisplayElements) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{21}
}
func (m *DisplayElements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayElements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayElements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayElements.Merge(m, src)
}
func (m *DisplayElements) XXX_Size() int {
	return m.Size()
}
func (m *DisplayElements) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayElements.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayElements proto.InternalMessageInfo

func (m *DisplayElements) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DisplayElements) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DisplayElements) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *DisplayElements) GetSubPath() string {
	if m != nil {
		return m.SubPath
	}
	return ""
}

func (m *DisplayElements) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *DisplayElements) GetIsEnum() bool {
	if m != nil {
		return m.IsEnum
	}
	return false
}

// DisplayMapElements
//
// x-displayName "Display Map Elements"
// Display the elements of a map field.
// The map in question would have both key and value as scalar fields e.g. map<string, string>,
// map<enum, string> etc.
type DisplayMapElements struct {
	// Path
	//
	// x-displayName "Path"
	// Relative path of the repeated/map field
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Limit
	//
	// x-displayName "Limit"
	// Limit of the number of elements to display
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Default Value
	//
	// x-displayName "Default Value"
	// Default value to display if the field is empty
	DefaultValue string `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Key Is Enum
	//
	// x-displayName "Key Is Enum"
	// The map key is an enum.
	KeyIsEnum bool `protobuf:"varint,4,opt,name=key_is_enum,json=keyIsEnum,proto3" json:"key_is_enum,omitempty"`
	// Key Is Enum
	//
	// x-displayName "Key Is Enum"
	// The map value is an enum.
	ValueIsEnum bool `protobuf:"varint,5,opt,name=value_is_enum,json=valueIsEnum,proto3" json:"value_is_enum,omitempty"`
}

func (m *DisplayMapElements) Reset()      { *m = DisplayMapElements{} }
func (*DisplayMapElements) ProtoMessage() {}
func (*DisplayMapElements) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{22}
}
func (m *DisplayMapElements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayMapElements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayMapElements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayMapElements.Merge(m, src)
}
func (m *DisplayMapElements) XXX_Size() int {
	return m.Size()
}
func (m *DisplayMapElements) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayMapElements.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayMapElements proto.InternalMessageInfo

func (m *DisplayMapElements) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DisplayMapElements) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DisplayMapElements) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *DisplayMapElements) GetKeyIsEnum() bool {
	if m != nil {
		return m.KeyIsEnum
	}
	return false
}

func (m *DisplayMapElements) GetValueIsEnum() bool {
	if m != nil {
		return m.ValueIsEnum
	}
	return false
}

// DisplayKVItem
//
// x-displayName "Key and Value Item"
// Display a field as a KV Item.
// The assumption is that only items with non-nil paths will be displayed.
type DisplayKVItem struct {
	// Length Constraint
	//
	// x-displayName "Length Constraint"
	// Constraint on the length of a repeated/map field
	LengthOf *ConstraintLength `protobuf:"bytes,1,opt,name=length_of,json=lengthOf,proto3" json:"length_of,omitempty"`
	// Path
	//
	// x-displayName "Path"
	// Relative path of the field
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Key
	//
	// x-displayName "Key"
	// Use the specified literal value
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Value Choice
	//
	// x-displayName "Value Choice"
	// Determine how the field value is chosen
	//
	// Types that are valid to be assigned to ValueChoice:
	//	*DisplayKVItem_FieldValue
	//	*DisplayKVItem_FieldLength
	//	*DisplayKVItem_FieldElements
	//	*DisplayKVItem_Value
	ValueChoice isDisplayKVItem_ValueChoice `protobuf_oneof:"value_choice"`
}

func (m *DisplayKVItem) Reset()      { *m = DisplayKVItem{} }
func (*DisplayKVItem) ProtoMessage() {}
func (*DisplayKVItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{23}
}
func (m *DisplayKVItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayKVItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayKVItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayKVItem.Merge(m, src)
}
func (m *DisplayKVItem) XXX_Size() int {
	return m.Size()
}
func (m *DisplayKVItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayKVItem.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayKVItem proto.InternalMessageInfo

type isDisplayKVItem_ValueChoice interface {
	isDisplayKVItem_ValueChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DisplayKVItem_FieldValue struct {
	FieldValue *DisplayValue `protobuf:"bytes,6,opt,name=field_value,json=fieldValue,proto3,oneof" json:"field_value,omitempty"`
}
type DisplayKVItem_FieldLength struct {
	FieldLength *DisplayLength `protobuf:"bytes,4,opt,name=field_length,json=fieldLength,proto3,oneof" json:"field_length,omitempty"`
}
type DisplayKVItem_FieldElements struct {
	FieldElements *DisplayElements `protobuf:"bytes,5,opt,name=field_elements,json=fieldElements,proto3,oneof" json:"field_elements,omitempty"`
}
type DisplayKVItem_Value struct {
	Value string `protobuf:"bytes,7,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (*DisplayKVItem_FieldValue) isDisplayKVItem_ValueChoice()    {}
func (*DisplayKVItem_FieldLength) isDisplayKVItem_ValueChoice()   {}
func (*DisplayKVItem_FieldElements) isDisplayKVItem_ValueChoice() {}
func (*DisplayKVItem_Value) isDisplayKVItem_ValueChoice()         {}

func (m *DisplayKVItem) GetValueChoice() isDisplayKVItem_ValueChoice {
	if m != nil {
		return m.ValueChoice
	}
	return nil
}

func (m *DisplayKVItem) GetLengthOf() *ConstraintLength {
	if m != nil {
		return m.LengthOf
	}
	return nil
}

func (m *DisplayKVItem) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DisplayKVItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DisplayKVItem) GetFieldValue() *DisplayValue {
	if x, ok := m.GetValueChoice().(*DisplayKVItem_FieldValue); ok {
		return x.FieldValue
	}
	return nil
}

func (m *DisplayKVItem) GetFieldLength() *DisplayLength {
	if x, ok := m.GetValueChoice().(*DisplayKVItem_FieldLength); ok {
		return x.FieldLength
	}
	return nil
}

func (m *DisplayKVItem) GetFieldElements() *DisplayElements {
	if x, ok := m.GetValueChoice().(*DisplayKVItem_FieldElements); ok {
		return x.FieldElements
	}
	return nil
}

func (m *DisplayKVItem) GetValue() string {
	if x, ok := m.GetValueChoice().(*DisplayKVItem_Value); ok {
		return x.Value
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DisplayKVItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DisplayKVItem_FieldValue)(nil),
		(*DisplayKVItem_FieldLength)(nil),
		(*DisplayKVItem_FieldElements)(nil),
		(*DisplayKVItem_Value)(nil),
	}
}

// DisplayKVItemList
//
// x-displayName "Key and Value Pairs"
// Display the specified fields as KV pairs.
type DisplayKVItemList struct {
	// Items
	//
	// x-displayName "Items"
	// List of KV pairs.
	Items []*DisplayKVItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *DisplayKVItemList) Reset()      { *m = DisplayKVItemList{} }
func (*DisplayKVItemList) ProtoMessage() {}
func (*DisplayKVItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{24}
}
func (m *DisplayKVItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayKVItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DisplayKVItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayKVItemList.Merge(m, src)
}
func (m *DisplayKVItemList) XXX_Size() int {
	return m.Size()
}
func (m *DisplayKVItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayKVItemList.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayKVItemList proto.InternalMessageInfo

func (m *DisplayKVItemList) GetItems() []*DisplayKVItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// Column
//
// x-displayName "Column"
// Columns for displaying a message in tabular format
type Column struct {
	// Title
	//
	// x-displayName "Title"
	// Title of the column
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Optional
	//
	// x-displayName "Optional"
	// Do not include this column in the table by default.
	Optional bool `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
	// Show Copy Button
	//
	// x-displayName "Show Copy Button"
	// Show copy button on hover when set to true
	ShowCopyButton bool `protobuf:"varint,11,opt,name=show_copy_button,json=showCopyButton,proto3" json:"show_copy_button,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	//
	// Types that are valid to be assigned to FieldChoice:
	//	*Column_FieldValue
	//	*Column_FieldExistsNotExists
	//	*Column_FieldOneof
	//	*Column_FieldOneValue
	//	*Column_FieldLength
	//	*Column_FieldElements
	//	*Column_FieldMapElements
	//	*Column_FieldKvPairs
	FieldChoice isColumn_FieldChoice `protobuf_oneof:"field_choice"`
}

func (m *Column) Reset()      { *m = Column{} }
func (*Column) ProtoMessage() {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{25}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

type isColumn_FieldChoice interface {
	isColumn_FieldChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Column_FieldValue struct {
	FieldValue *DisplayValue `protobuf:"bytes,3,opt,name=field_value,json=fieldValue,proto3,oneof" json:"field_value,omitempty"`
}
type Column_FieldExistsNotExists struct {
	FieldExistsNotExists *DisplayExistsNotExists `protobuf:"bytes,4,opt,name=field_exists_not_exists,json=fieldExistsNotExists,proto3,oneof" json:"field_exists_not_exists,omitempty"`
}
type Column_FieldOneof struct {
	FieldOneof *DisplayOneof `protobuf:"bytes,5,opt,name=field_oneof,json=fieldOneof,proto3,oneof" json:"field_oneof,omitempty"`
}
type Column_FieldOneValue struct {
	FieldOneValue *DisplayOneValue `protobuf:"bytes,6,opt,name=field_one_value,json=fieldOneValue,proto3,oneof" json:"field_one_value,omitempty"`
}
type Column_FieldLength struct {
	FieldLength *DisplayLength `protobuf:"bytes,7,opt,name=field_length,json=fieldLength,proto3,oneof" json:"field_length,omitempty"`
}
type Column_FieldElements struct {
	FieldElements *DisplayElements `protobuf:"bytes,8,opt,name=field_elements,json=fieldElements,proto3,oneof" json:"field_elements,omitempty"`
}
type Column_FieldMapElements struct {
	FieldMapElements *DisplayMapElements `protobuf:"bytes,9,opt,name=field_map_elements,json=fieldMapElements,proto3,oneof" json:"field_map_elements,omitempty"`
}
type Column_FieldKvPairs struct {
	FieldKvPairs *DisplayKVItemList `protobuf:"bytes,10,opt,name=field_kv_pairs,json=fieldKvPairs,proto3,oneof" json:"field_kv_pairs,omitempty"`
}

func (*Column_FieldValue) isColumn_FieldChoice()           {}
func (*Column_FieldExistsNotExists) isColumn_FieldChoice() {}
func (*Column_FieldOneof) isColumn_FieldChoice()           {}
func (*Column_FieldOneValue) isColumn_FieldChoice()        {}
func (*Column_FieldLength) isColumn_FieldChoice()          {}
func (*Column_FieldElements) isColumn_FieldChoice()        {}
func (*Column_FieldMapElements) isColumn_FieldChoice()     {}
func (*Column_FieldKvPairs) isColumn_FieldChoice()         {}

func (m *Column) GetFieldChoice() isColumn_FieldChoice {
	if m != nil {
		return m.FieldChoice
	}
	return nil
}

func (m *Column) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Column) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Column) GetShowCopyButton() bool {
	if m != nil {
		return m.ShowCopyButton
	}
	return false
}

func (m *Column) GetFieldValue() *DisplayValue {
	if x, ok := m.GetFieldChoice().(*Column_FieldValue); ok {
		return x.FieldValue
	}
	return nil
}

func (m *Column) GetFieldExistsNotExists() *DisplayExistsNotExists {
	if x, ok := m.GetFieldChoice().(*Column_FieldExistsNotExists); ok {
		return x.FieldExistsNotExists
	}
	return nil
}

func (m *Column) GetFieldOneof() *DisplayOneof {
	if x, ok := m.GetFieldChoice().(*Column_FieldOneof); ok {
		return x.FieldOneof
	}
	return nil
}

func (m *Column) GetFieldOneValue() *DisplayOneValue {
	if x, ok := m.GetFieldChoice().(*Column_FieldOneValue); ok {
		return x.FieldOneValue
	}
	return nil
}

func (m *Column) GetFieldLength() *DisplayLength {
	if x, ok := m.GetFieldChoice().(*Column_FieldLength); ok {
		return x.FieldLength
	}
	return nil
}

func (m *Column) GetFieldElements() *DisplayElements {
	if x, ok := m.GetFieldChoice().(*Column_FieldElements); ok {
		return x.FieldElements
	}
	return nil
}

func (m *Column) GetFieldMapElements() *DisplayMapElements {
	if x, ok := m.GetFieldChoice().(*Column_FieldMapElements); ok {
		return x.FieldMapElements
	}
	return nil
}

func (m *Column) GetFieldKvPairs() *DisplayKVItemList {
	if x, ok := m.GetFieldChoice().(*Column_FieldKvPairs); ok {
		return x.FieldKvPairs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Column) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Column_FieldValue)(nil),
		(*Column_FieldExistsNotExists)(nil),
		(*Column_FieldOneof)(nil),
		(*Column_FieldOneValue)(nil),
		(*Column_FieldLength)(nil),
		(*Column_FieldElements)(nil),
		(*Column_FieldMapElements)(nil),
		(*Column_FieldKvPairs)(nil),
	}
}

// Columns
//
// x-displayName "Columns"
// Columns for displaying a message in tabular format
type Columns struct {
	// column_list
	//
	// x-displayName "List of Columns"
	// Columns for displaying a message in tabular format
	ColumnList []*Column `protobuf:"bytes,1,rep,name=column_list,json=columnList,proto3" json:"column_list,omitempty"`
	// not_required
	//
	// x-displayName "Not Required"
	// The list of columns does not need to be defined.
	// This could be because the message is a well-known type or it's not needed
	// by the FE e.g. it's used only in hidden/internal fields or in Custom API
	// requests or responses.
	NotRequired bool `protobuf:"varint,2,opt,name=not_required,json=notRequired,proto3" json:"not_required,omitempty"`
}

func (m *Columns) Reset()      { *m = Columns{} }
func (*Columns) ProtoMessage() {}
func (*Columns) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{26}
}
func (m *Columns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Columns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Columns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Columns.Merge(m, src)
}
func (m *Columns) XXX_Size() int {
	return m.Size()
}
func (m *Columns) XXX_DiscardUnknown() {
	xxx_messageInfo_Columns.DiscardUnknown(m)
}

var xxx_messageInfo_Columns proto.InternalMessageInfo

func (m *Columns) GetColumnList() []*Column {
	if m != nil {
		return m.ColumnList
	}
	return nil
}

func (m *Columns) GetNotRequired() bool {
	if m != nil {
		return m.NotRequired
	}
	return false
}

// DateRangeOptions
//
// x-displayName "Date Range Options"
// Date range options
type DateRangeOptions struct {
	// min_days
	//
	// x-displayName "Min Limit on Start Date"
	// Minimum number of days before current date or after depending on sign of the int that is allowed to be selected as start date in the date range
	MinDays int32 `protobuf:"varint,1,opt,name=min_days,json=minDays,proto3" json:"min_days,omitempty"`
	// max_days
	//
	// x-displayName "Max Limit in End Date"
	// Maximum number of days before current date or after depending on sign of the int that is allowed to be selected as start date or end date in the date range
	MaxDays int32 `protobuf:"varint,2,opt,name=max_days,json=maxDays,proto3" json:"max_days,omitempty"`
}

func (m *DateRangeOptions) Reset()      { *m = DateRangeOptions{} }
func (*DateRangeOptions) ProtoMessage() {}
func (*DateRangeOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{27}
}
func (m *DateRangeOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DateRangeOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DateRangeOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateRangeOptions.Merge(m, src)
}
func (m *DateRangeOptions) XXX_Size() int {
	return m.Size()
}
func (m *DateRangeOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DateRangeOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DateRangeOptions proto.InternalMessageInfo

func (m *DateRangeOptions) GetMinDays() int32 {
	if m != nil {
		return m.MinDays
	}
	return 0
}

func (m *DateRangeOptions) GetMaxDays() int32 {
	if m != nil {
		return m.MaxDays
	}
	return 0
}

// HintWithAction
//
// x-displayName: "Hint With Action"
// UI will use this to show click to action button with text
type HintWithAction struct {
	// action_label
	// x-displayName: "Action Label"
	// Hint action label
	ActionLabel string `protobuf:"bytes,1,opt,name=action_label,json=actionLabel,proto3" json:"action_label,omitempty"`
	// action_type
	// x-displayName: "Action Type"
	// Hint action type
	ActionType HintActionType `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3,enum=ves.io.schema.HintActionType" json:"action_type,omitempty"`
}

func (m *HintWithAction) Reset()      { *m = HintWithAction{} }
func (*HintWithAction) ProtoMessage() {}
func (*HintWithAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{28}
}
func (m *HintWithAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HintWithAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HintWithAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HintWithAction.Merge(m, src)
}
func (m *HintWithAction) XXX_Size() int {
	return m.Size()
}
func (m *HintWithAction) XXX_DiscardUnknown() {
	xxx_messageInfo_HintWithAction.DiscardUnknown(m)
}

var xxx_messageInfo_HintWithAction proto.InternalMessageInfo

func (m *HintWithAction) GetActionLabel() string {
	if m != nil {
		return m.ActionLabel
	}
	return ""
}

func (m *HintWithAction) GetActionType() HintActionType {
	if m != nil {
		return m.ActionType
	}
	return OPEN_ARN_MODAL
}

// HintWithLink
//
// x-displayName: "Hint With Link"
// UI will use this to show click to link url with text
type HintWithLink struct {
	// link_text
	// x-displayName: "Link Text"
	// Hint link text
	LinkText string `protobuf:"bytes,1,opt,name=link_text,json=linkText,proto3" json:"link_text,omitempty"`
	// link_url
	// x-displayName: "Link Url"
	// Hint link url
	LinkUrl string `protobuf:"bytes,2,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
}

func (m *HintWithLink) Reset()      { *m = HintWithLink{} }
func (*HintWithLink) ProtoMessage() {}
func (*HintWithLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e60bc66177b50a0, []int{29}
}
func (m *HintWithLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HintWithLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HintWithLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HintWithLink.Merge(m, src)
}
func (m *HintWithLink) XXX_Size() int {
	return m.Size()
}
func (m *HintWithLink) XXX_DiscardUnknown() {
	xxx_messageInfo_HintWithLink.DiscardUnknown(m)
}

var xxx_messageInfo_HintWithLink proto.InternalMessageInfo

func (m *HintWithLink) GetLinkText() string {
	if m != nil {
		return m.LinkText
	}
	return ""
}

func (m *HintWithLink) GetLinkUrl() string {
	if m != nil {
		return m.LinkUrl
	}
	return ""
}

var E_AdvancedLevel = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3000,
	Name:          "ves.io.schema.advanced_level",
	Tag:           "varint,3000,opt,name=advanced_level",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_SiteType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3001,
	Name:          "ves.io.schema.site_type",
	Tag:           "bytes,3001,opt,name=site_type",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_NewForm = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3002,
	Name:          "ves.io.schema.new_form",
	Tag:           "varint,3002,opt,name=new_form",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DefaultValue = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3003,
	Name:          "ves.io.schema.default_value",
	Tag:           "bytes,3003,opt,name=default_value",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_CommonChoices = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*Choices)(nil),
	Field:         3004,
	Name:          "ves.io.schema.common_choices",
	Tag:           "bytes,3004,opt,name=common_choices",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Hidden = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3005,
	Name:          "ves.io.schema.hidden",
	Tag:           "varint,3005,opt,name=hidden",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Anonymous = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3006,
	Name:          "ves.io.schema.anonymous",
	Tag:           "varint,3006,opt,name=anonymous",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_InputBoxSize = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*InputSizeType)(nil),
	Field:         3007,
	Name:          "ves.io.schema.input_box_size",
	Tag:           "varint,3007,opt,name=input_box_size,enum=ves.io.schema.InputSizeType",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DisableCreate = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3008,
	Name:          "ves.io.schema.disable_create",
	Tag:           "varint,3008,opt,name=disable_create",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Unit = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*UnitType)(nil),
	Field:         3009,
	Name:          "ves.io.schema.unit",
	Tag:           "varint,3009,opt,name=unit,enum=ves.io.schema.UnitType",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_CommonChoiceItems = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*ChoiceItemList)(nil),
	Field:         3010,
	Name:          "ves.io.schema.common_choice_items",
	Tag:           "bytes,3010,opt,name=common_choice_items",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_LabelKeyClasses = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*LabelKeyClassList)(nil),
	Field:         3011,
	Name:          "ves.io.schema.label_key_classes",
	Tag:           "bytes,3011,opt,name=label_key_classes",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_InputBoxFormat = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3012,
	Name:          "ves.io.schema.input_box_format",
	Tag:           "bytes,3012,opt,name=input_box_format",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_HiddenConditions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*HiddenConditions)(nil),
	Field:         3013,
	Name:          "ves.io.schema.hidden_conditions",
	Tag:           "bytes,3013,opt,name=hidden_conditions",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_AnonymousRetainLabel = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3014,
	Name:          "ves.io.schema.anonymous_retain_label",
	Tag:           "varint,3014,opt,name=anonymous_retain_label",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_SuggestedValues = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*SuggestedValues)(nil),
	Field:         3015,
	Name:          "ves.io.schema.suggested_values",
	Tag:           "bytes,3015,opt,name=suggested_values",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_StoredObjectUrl = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*StoredObjectURL)(nil),
	Field:         3016,
	Name:          "ves.io.schema.stored_object_url",
	Tag:           "bytes,3016,opt,name=stored_object_url",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_IncludeChildObjects = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3017,
	Name:          "ves.io.schema.include_child_objects",
	Tag:           "varint,3017,opt,name=include_child_objects",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_PullupTiles = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3018,
	Name:          "ves.io.schema.pullup_tiles",
	Tag:           "varint,3018,opt,name=pullup_tiles",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_NeedsRole = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3019,
	Name:          "ves.io.schema.needs_role",
	Tag:           "bytes,3019,opt,name=needs_role",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DisallowedOperators = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*LabelSelectorOperatorList)(nil),
	Field:         3020,
	Name:          "ves.io.schema.disallowed_operators",
	Tag:           "bytes,3020,opt,name=disallowed_operators",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DateRangeOptions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*DateRangeOptions)(nil),
	Field:         3021,
	Name:          "ves.io.schema.date_range_options",
	Tag:           "bytes,3021,opt,name=date_range_options",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_UploadFileType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*UploadFileType)(nil),
	Field:         3022,
	Name:          "ves.io.schema.upload_file_type",
	Tag:           "varint,3022,opt,name=upload_file_type,enum=ves.io.schema.UploadFileType",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_HintWithAction = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*HintWithAction)(nil),
	Field:         3023,
	Name:          "ves.io.schema.hint_with_action",
	Tag:           "bytes,3023,opt,name=hint_with_action",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_HintWithLink = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*HintWithLink)(nil),
	Field:         3024,
	Name:          "ves.io.schema.hint_with_link",
	Tag:           "bytes,3024,opt,name=hint_with_link",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_NeedsAddonService = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3025,
	Name:          "ves.io.schema.needs_addon_service",
	Tag:           "bytes,3025,opt,name=needs_addon_service",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DefaultEnum = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3000,
	Name:          "ves.io.schema.default_enum",
	Tag:           "varint,3000,opt,name=default_enum",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_EnumDisplayOrder = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3004,
	Name:          "ves.io.schema.enum_display_order",
	Tag:           "bytes,3004,opt,name=enum_display_order",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_EnumSortByDisplayName = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3005,
	Name:          "ves.io.schema.enum_sort_by_display_name",
	Tag:           "varint,3005,opt,name=enum_sort_by_display_name",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_HiddenValue = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3000,
	Name:          "ves.io.schema.hidden_value",
	Tag:           "varint,3000,opt,name=hidden_value",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_EnumValueHiddenConditions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*HiddenConditions)(nil),
	Field:         3001,
	Name:          "ves.io.schema.enum_value_hidden_conditions",
	Tag:           "bytes,3001,opt,name=enum_value_hidden_conditions",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_DefaultChoice = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3000,
	Name:          "ves.io.schema.default_choice",
	Tag:           "varint,3000,opt,name=default_choice",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofAdvancedLevel = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3001,
	Name:          "ves.io.schema.oneof_advanced_level",
	Tag:           "varint,3001,opt,name=oneof_advanced_level",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofFieldNumber = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         3002,
	Name:          "ves.io.schema.oneof_field_number",
	Tag:           "varint,3002,opt,name=oneof_field_number",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofDisplayOrder = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3004,
	Name:          "ves.io.schema.oneof_display_order",
	Tag:           "bytes,3004,opt,name=oneof_display_order",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofIsImmutable = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3005,
	Name:          "ves.io.schema.oneof_is_immutable",
	Tag:           "varint,3005,opt,name=oneof_is_immutable",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofHidden = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3006,
	Name:          "ves.io.schema.oneof_hidden",
	Tag:           "varint,3006,opt,name=oneof_hidden",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofInputBoxSize = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*InputSizeType)(nil),
	Field:         3007,
	Name:          "ves.io.schema.oneof_input_box_size",
	Tag:           "varint,3007,opt,name=oneof_input_box_size,enum=ves.io.schema.InputSizeType",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofInNamespaceTypes = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3008,
	Name:          "ves.io.schema.oneof_in_namespace_types",
	Tag:           "bytes,3008,opt,name=oneof_in_namespace_types",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofHiddenConditions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*HiddenConditions)(nil),
	Field:         3009,
	Name:          "ves.io.schema.oneof_hidden_conditions",
	Tag:           "bytes,3009,opt,name=oneof_hidden_conditions",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofNeedsAddonService = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3010,
	Name:          "ves.io.schema.oneof_needs_addon_service",
	Tag:           "bytes,3010,opt,name=oneof_needs_addon_service",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofNeedsRole = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3011,
	Name:          "ves.io.schema.oneof_needs_role",
	Tag:           "bytes,3011,opt,name=oneof_needs_role",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_OneofAnonymous = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3012,
	Name:          "ves.io.schema.oneof_anonymous",
	Tag:           "varint,3012,opt,name=oneof_anonymous",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_ViewOptions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*FieldViewOptions)(nil),
	Field:         929292,
	Name:          "ves.io.schema.view_options",
	Tag:           "bytes,929292,opt,name=view_options",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Tiles = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*Tiles)(nil),
	Field:         3000,
	Name:          "ves.io.schema.tiles",
	Tag:           "bytes,3000,opt,name=tiles",
	Filename:      "ves.io/schema/view_options.proto",
}

var E_Columns = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*Columns)(nil),
	Field:         3001,
	Name:          "ves.io.schema.columns",
	Tag:           "bytes,3001,opt,name=columns",
	Filename:      "ves.io/schema/view_options.proto",
}

func init() {
	proto.RegisterEnum("ves.io.schema.LabelKeyClass", LabelKeyClass_name, LabelKeyClass_value)
	golang_proto.RegisterEnum("ves.io.schema.LabelKeyClass", LabelKeyClass_name, LabelKeyClass_value)
	proto.RegisterEnum("ves.io.schema.LabelSelectorOperator", LabelSelectorOperator_name, LabelSelectorOperator_value)
	golang_proto.RegisterEnum("ves.io.schema.LabelSelectorOperator", LabelSelectorOperator_name, LabelSelectorOperator_value)
	proto.RegisterEnum("ves.io.schema.SuggestedValuesCountType", SuggestedValuesCountType_name, SuggestedValuesCountType_value)
	golang_proto.RegisterEnum("ves.io.schema.SuggestedValuesCountType", SuggestedValuesCountType_name, SuggestedValuesCountType_value)
	proto.RegisterEnum("ves.io.schema.InputSizeType", InputSizeType_name, InputSizeType_value)
	golang_proto.RegisterEnum("ves.io.schema.InputSizeType", InputSizeType_name, InputSizeType_value)
	proto.RegisterEnum("ves.io.schema.UnitType", UnitType_name, UnitType_value)
	golang_proto.RegisterEnum("ves.io.schema.UnitType", UnitType_name, UnitType_value)
	proto.RegisterEnum("ves.io.schema.MapRenderStyle", MapRenderStyle_name, MapRenderStyle_value)
	golang_proto.RegisterEnum("ves.io.schema.MapRenderStyle", MapRenderStyle_name, MapRenderStyle_value)
	proto.RegisterEnum("ves.io.schema.RepeatedRenderStyle", RepeatedRenderStyle_name, RepeatedRenderStyle_value)
	golang_proto.RegisterEnum("ves.io.schema.RepeatedRenderStyle", RepeatedRenderStyle_name, RepeatedRenderStyle_value)
	proto.RegisterEnum("ves.io.schema.UploadFileType", UploadFileType_name, UploadFileType_value)
	golang_proto.RegisterEnum("ves.io.schema.UploadFileType", UploadFileType_name, UploadFileType_value)
	proto.RegisterEnum("ves.io.schema.HintActionType", HintActionType_name, HintActionType_value)
	golang_proto.RegisterEnum("ves.io.schema.HintActionType", HintActionType_name, HintActionType_value)
	proto.RegisterType((*Choices)(nil), "ves.io.schema.Choices")
	golang_proto.RegisterType((*Choices)(nil), "ves.io.schema.Choices")
	proto.RegisterType((*ChoiceItem)(nil), "ves.io.schema.ChoiceItem")
	golang_proto.RegisterType((*ChoiceItem)(nil), "ves.io.schema.ChoiceItem")
	proto.RegisterType((*ChoiceItemList)(nil), "ves.io.schema.ChoiceItemList")
	golang_proto.RegisterType((*ChoiceItemList)(nil), "ves.io.schema.ChoiceItemList")
	proto.RegisterType((*LabelKeyClassList)(nil), "ves.io.schema.LabelKeyClassList")
	golang_proto.RegisterType((*LabelKeyClassList)(nil), "ves.io.schema.LabelKeyClassList")
	proto.RegisterType((*LabelSelectorOperatorList)(nil), "ves.io.schema.LabelSelectorOperatorList")
	golang_proto.RegisterType((*LabelSelectorOperatorList)(nil), "ves.io.schema.LabelSelectorOperatorList")
	proto.RegisterType((*StoredObjectURL)(nil), "ves.io.schema.StoredObjectURL")
	golang_proto.RegisterType((*StoredObjectURL)(nil), "ves.io.schema.StoredObjectURL")
	proto.RegisterType((*HiddenConditions)(nil), "ves.io.schema.HiddenConditions")
	golang_proto.RegisterType((*HiddenConditions)(nil), "ves.io.schema.HiddenConditions")
	proto.RegisterType((*SuggestedValues)(nil), "ves.io.schema.SuggestedValues")
	golang_proto.RegisterType((*SuggestedValues)(nil), "ves.io.schema.SuggestedValues")
	proto.RegisterType((*FieldViewOptions)(nil), "ves.io.schema.FieldViewOptions")
	golang_proto.RegisterType((*FieldViewOptions)(nil), "ves.io.schema.FieldViewOptions")
	proto.RegisterType((*MapOptions)(nil), "ves.io.schema.MapOptions")
	golang_proto.RegisterType((*MapOptions)(nil), "ves.io.schema.MapOptions")
	proto.RegisterType((*RepeatedOptions)(nil), "ves.io.schema.RepeatedOptions")
	golang_proto.RegisterType((*RepeatedOptions)(nil), "ves.io.schema.RepeatedOptions")
	proto.RegisterType((*Tile)(nil), "ves.io.schema.Tile")
	golang_proto.RegisterType((*Tile)(nil), "ves.io.schema.Tile")
	proto.RegisterType((*Tiles)(nil), "ves.io.schema.Tiles")
	golang_proto.RegisterType((*Tiles)(nil), "ves.io.schema.Tiles")
	proto.RegisterType((*ConstraintLength)(nil), "ves.io.schema.ConstraintLength")
	golang_proto.RegisterType((*ConstraintLength)(nil), "ves.io.schema.ConstraintLength")
	proto.RegisterType((*DisplayValue)(nil), "ves.io.schema.DisplayValue")
	golang_proto.RegisterType((*DisplayValue)(nil), "ves.io.schema.DisplayValue")
	proto.RegisterType((*DisplayExistsNotExists)(nil), "ves.io.schema.DisplayExistsNotExists")
	golang_proto.RegisterType((*DisplayExistsNotExists)(nil), "ves.io.schema.DisplayExistsNotExists")
	proto.RegisterType((*DisplayOneofItem)(nil), "ves.io.schema.DisplayOneofItem")
	golang_proto.RegisterType((*DisplayOneofItem)(nil), "ves.io.schema.DisplayOneofItem")
	proto.RegisterType((*DisplayOneofItemList)(nil), "ves.io.schema.DisplayOneofItemList")
	golang_proto.RegisterType((*DisplayOneofItemList)(nil), "ves.io.schema.DisplayOneofItemList")
	proto.RegisterType((*DisplayOneof)(nil), "ves.io.schema.DisplayOneof")
	golang_proto.RegisterType((*DisplayOneof)(nil), "ves.io.schema.DisplayOneof")
	proto.RegisterType((*DisplayOneValue)(nil), "ves.io.schema.DisplayOneValue")
	golang_proto.RegisterType((*DisplayOneValue)(nil), "ves.io.schema.DisplayOneValue")
	proto.RegisterType((*DisplayLength)(nil), "ves.io.schema.DisplayLength")
	golang_proto.RegisterType((*DisplayLength)(nil), "ves.io.schema.DisplayLength")
	proto.RegisterType((*DisplayElements)(nil), "ves.io.schema.DisplayElements")
	golang_proto.RegisterType((*DisplayElements)(nil), "ves.io.schema.DisplayElements")
	proto.RegisterType((*DisplayMapElements)(nil), "ves.io.schema.DisplayMapElements")
	golang_proto.RegisterType((*DisplayMapElements)(nil), "ves.io.schema.DisplayMapElements")
	proto.RegisterType((*DisplayKVItem)(nil), "ves.io.schema.DisplayKVItem")
	golang_proto.RegisterType((*DisplayKVItem)(nil), "ves.io.schema.DisplayKVItem")
	proto.RegisterType((*DisplayKVItemList)(nil), "ves.io.schema.DisplayKVItemList")
	golang_proto.RegisterType((*DisplayKVItemList)(nil), "ves.io.schema.DisplayKVItemList")
	proto.RegisterType((*Column)(nil), "ves.io.schema.Column")
	golang_proto.RegisterType((*Column)(nil), "ves.io.schema.Column")
	proto.RegisterType((*Columns)(nil), "ves.io.schema.Columns")
	golang_proto.RegisterType((*Columns)(nil), "ves.io.schema.Columns")
	proto.RegisterType((*DateRangeOptions)(nil), "ves.io.schema.DateRangeOptions")
	golang_proto.RegisterType((*DateRangeOptions)(nil), "ves.io.schema.DateRangeOptions")
	proto.RegisterType((*HintWithAction)(nil), "ves.io.schema.HintWithAction")
	golang_proto.RegisterType((*HintWithAction)(nil), "ves.io.schema.HintWithAction")
	proto.RegisterType((*HintWithLink)(nil), "ves.io.schema.HintWithLink")
	golang_proto.RegisterType((*HintWithLink)(nil), "ves.io.schema.HintWithLink")
	proto.RegisterExtension(E_AdvancedLevel)
	proto.RegisterExtension(E_SiteType)
	proto.RegisterExtension(E_NewForm)
	proto.RegisterExtension(E_DefaultValue)
	proto.RegisterExtension(E_CommonChoices)
	proto.RegisterExtension(E_Hidden)
	proto.RegisterExtension(E_Anonymous)
	proto.RegisterExtension(E_InputBoxSize)
	proto.RegisterExtension(E_DisableCreate)
	proto.RegisterExtension(E_Unit)
	proto.RegisterExtension(E_CommonChoiceItems)
	proto.RegisterExtension(E_LabelKeyClasses)
	proto.RegisterExtension(E_InputBoxFormat)
	proto.RegisterExtension(E_HiddenConditions)
	proto.RegisterExtension(E_AnonymousRetainLabel)
	proto.RegisterExtension(E_SuggestedValues)
	proto.RegisterExtension(E_StoredObjectUrl)
	proto.RegisterExtension(E_IncludeChildObjects)
	proto.RegisterExtension(E_PullupTiles)
	proto.RegisterExtension(E_NeedsRole)
	proto.RegisterExtension(E_DisallowedOperators)
	proto.RegisterExtension(E_DateRangeOptions)
	proto.RegisterExtension(E_UploadFileType)
	proto.RegisterExtension(E_HintWithAction)
	proto.RegisterExtension(E_HintWithLink)
	proto.RegisterExtension(E_NeedsAddonService)
	proto.RegisterExtension(E_DefaultEnum)
	proto.RegisterExtension(E_EnumDisplayOrder)
	proto.RegisterExtension(E_EnumSortByDisplayName)
	proto.RegisterExtension(E_HiddenValue)
	proto.RegisterExtension(E_EnumValueHiddenConditions)
	proto.RegisterExtension(E_DefaultChoice)
	proto.RegisterExtension(E_OneofAdvancedLevel)
	proto.RegisterExtension(E_OneofFieldNumber)
	proto.RegisterExtension(E_OneofDisplayOrder)
	proto.RegisterExtension(E_OneofIsImmutable)
	proto.RegisterExtension(E_OneofHidden)
	proto.RegisterExtension(E_OneofInputBoxSize)
	proto.RegisterExtension(E_OneofInNamespaceTypes)
	proto.RegisterExtension(E_OneofHiddenConditions)
	proto.RegisterExtension(E_OneofNeedsAddonService)
	proto.RegisterExtension(E_OneofNeedsRole)
	proto.RegisterExtension(E_OneofAnonymous)
	proto.RegisterExtension(E_ViewOptions)
	proto.RegisterExtension(E_Tiles)
	proto.RegisterExtension(E_Columns)
}

func init() { proto.RegisterFile("ves.io/schema/view_options.proto", fileDescriptor_2e60bc66177b50a0) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/view_options.proto", fileDescriptor_2e60bc66177b50a0)
}

var fileDescriptor_2e60bc66177b50a0 = []byte{
	// 3790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xdb, 0x6f, 0xe3, 0xd8,
	0x79, 0x97, 0x7c, 0xd7, 0xa7, 0x8b, 0xe9, 0xe3, 0x8b, 0x34, 0x33, 0x5e, 0xcd, 0x58, 0x3b, 0x69,
	0x27, 0x46, 0xd7, 0x53, 0xcc, 0xa2, 0x69, 0xa2, 0xec, 0x06, 0x95, 0x25, 0x8e, 0x4d, 0x58, 0x17,
	0x2f, 0x25, 0xed, 0x64, 0x02, 0xa4, 0x04, 0x2d, 0x1d, 0x4b, 0x8c, 0x29, 0x52, 0x21, 0x29, 0xdb,
	0x4a, 0x5f, 0x1a, 0xa0, 0x2f, 0x05, 0xfa, 0xd0, 0xb7, 0xa2, 0x7f, 0x41, 0x0b, 0xb4, 0x40, 0x5f,
	0x3b, 0x9b, 0xa4, 0xdd, 0x4d, 0xd2, 0x26, 0xbd, 0x6f, 0xdf, 0x16, 0x45, 0x1e, 0xba, 0xb3, 0x28,
	0xda, 0x97, 0x02, 0xf9, 0x07, 0x0a, 0x14, 0xe7, 0x42, 0x8a, 0xa4, 0xe8, 0xa1, 0x37, 0x3b, 0x4f,
	0xe2, 0xf9, 0x2e, 0xbf, 0xef, 0x3b, 0xdf, 0xf9, 0xce, 0x77, 0x6e, 0x82, 0x07, 0x97, 0xd8, 0x3e,
	0xd0, 0xcc, 0xc7, 0x76, 0x6f, 0x88, 0x47, 0xea, 0xe3, 0x4b, 0x0d, 0x5f, 0x29, 0xe6, 0xd8, 0xd1,
	0x4c, 0xc3, 0x3e, 0x18, 0x5b, 0xa6, 0x63, 0xa2, 0x2c, 0x93, 0x38, 0x60, 0x12, 0x77, 0xdf, 0x1a,
	0x68, 0xce, 0x70, 0x72, 0x76, 0xd0, 0x33, 0x47, 0x8f, 0x07, 0xe6, 0xc0, 0x7c, 0x4c, 0xa5, 0xce,
	0x26, 0xe7, 0xb4, 0x45, 0x1b, 0xf4, 0x8b, 0x69, 0xdf, 0x7d, 0x30, 0x30, 0xcd, 0x81, 0x8e, 0x67,
	0x52, 0x7d, 0x6c, 0xf7, 0x2c, 0x6d, 0xec, 0x98, 0x16, 0x97, 0xd8, 0x0d, 0x79, 0xa0, 0xea, 0x5a,
	0x5f, 0x75, 0x30, 0xe3, 0x96, 0xf6, 0x60, 0xb5, 0x3a, 0x34, 0xb5, 0x1e, 0xb6, 0xd1, 0x0e, 0xac,
	0xf4, 0xe8, 0x67, 0x21, 0xf9, 0x60, 0xf1, 0x51, 0x4a, 0xe6, 0xad, 0x52, 0x0d, 0x80, 0x89, 0x48,
	0x0e, 0x1e, 0xa1, 0x2d, 0x58, 0xbe, 0x54, 0xf5, 0x09, 0x11, 0x4a, 0x3e, 0x4a, 0xc9, 0xac, 0x81,
	0x1e, 0x40, 0xda, 0x35, 0xac, 0x99, 0x46, 0x61, 0x81, 0xf2, 0xfc, 0xa4, 0x52, 0x13, 0x72, 0x33,
	0x94, 0xba, 0x66, 0x3b, 0xe8, 0x1d, 0xc8, 0x30, 0x0b, 0x8a, 0xe6, 0xe0, 0x91, 0x4d, 0xad, 0xa6,
	0x9f, 0xdc, 0x39, 0x08, 0xc4, 0xe3, 0x60, 0xa6, 0x24, 0xa7, 0x7b, 0xde, 0xb7, 0x5d, 0x92, 0x61,
	0xa3, 0xae, 0x9e, 0x61, 0xfd, 0x04, 0x4f, 0xab, 0xba, 0x6a, 0xdb, 0x14, 0xf2, 0x5d, 0x48, 0x5f,
	0xe0, 0xa9, 0xd2, 0x23, 0x04, 0xcc, 0x10, 0x73, 0x4f, 0x76, 0x43, 0x88, 0x01, 0x35, 0x19, 0x2e,
	0xf8, 0x17, 0xb6, 0x4b, 0x0a, 0xdc, 0xa1, 0xcc, 0x36, 0xd6, 0x71, 0xcf, 0x31, 0xad, 0xd6, 0x18,
	0x5b, 0xaa, 0x63, 0x5a, 0x14, 0xfb, 0x10, 0x52, 0x26, 0x6f, 0xbb, 0xc8, 0x0f, 0xa3, 0x90, 0xc3,
	0xca, 0xf2, 0x4c, 0xad, 0xf4, 0x1c, 0xd6, 0xdb, 0x8e, 0x69, 0xe1, 0x7e, 0xeb, 0xec, 0x3b, 0xb8,
	0xe7, 0x74, 0xe5, 0x3a, 0xba, 0x0f, 0x69, 0x93, 0x36, 0x14, 0x67, 0x3a, 0x76, 0xa3, 0x0a, 0x8c,
	0xd4, 0x99, 0x8e, 0x31, 0xfa, 0x12, 0xe4, 0xfa, 0x9a, 0xad, 0x9e, 0xe9, 0x58, 0xe9, 0x59, 0x58,
	0x75, 0x30, 0x8d, 0xee, 0x9a, 0x9c, 0xe5, 0xd4, 0x2a, 0x25, 0x96, 0xfe, 0x2f, 0x09, 0xc2, 0xb1,
	0xd6, 0xef, 0x63, 0xa3, 0x6a, 0x1a, 0x7d, 0x8d, 0x66, 0x18, 0x7a, 0x08, 0x39, 0xcb, 0x34, 0x1d,
	0x85, 0x5b, 0xd0, 0x0c, 0x3e, 0xb4, 0x19, 0x42, 0x65, 0x3e, 0x48, 0x06, 0x3a, 0x80, 0x4d, 0xd5,
	0xe8, 0x61, 0xdb, 0x31, 0x2d, 0x65, 0x84, 0x6d, 0x5b, 0x1d, 0x60, 0x22, 0xba, 0x40, 0x45, 0x37,
	0x5c, 0x56, 0x83, 0x71, 0x24, 0x83, 0xa0, 0x8e, 0x55, 0x67, 0xa8, 0xd8, 0x93, 0xf3, 0x73, 0xed,
	0x9a, 0x88, 0x2e, 0x32, 0x54, 0x42, 0x6d, 0x53, 0xa2, 0x64, 0x10, 0xbf, 0xb1, 0x71, 0xa9, 0x59,
	0xa6, 0x31, 0xc2, 0x06, 0xb5, 0xbd, 0x4c, 0xa5, 0xb2, 0x3e, 0xaa, 0x64, 0xa0, 0x3d, 0xc8, 0x68,
	0xc6, 0x25, 0xb6, 0x1c, 0x65, 0xa4, 0x3a, 0xbd, 0x61, 0x61, 0x89, 0x76, 0x2e, 0xcd, 0x68, 0x0d,
	0x42, 0x42, 0x6f, 0x42, 0xf6, 0xca, 0xb4, 0x2e, 0xec, 0xb1, 0xda, 0xc3, 0x36, 0x01, 0x5a, 0x61,
	0xe6, 0x66, 0x44, 0xc9, 0x28, 0x7d, 0xb0, 0x00, 0xeb, 0xed, 0xc9, 0x60, 0x80, 0x6d, 0x07, 0xf7,
	0xdf, 0x27, 0x49, 0x69, 0xa3, 0x26, 0xe4, 0xf0, 0xf5, 0x18, 0xf7, 0x1c, 0xdc, 0x57, 0x7a, 0xe6,
	0xc4, 0x70, 0x68, 0x78, 0x73, 0x4f, 0x7e, 0x3d, 0x34, 0x6e, 0x21, 0xbd, 0x2a, 0x11, 0x25, 0xb1,
	0x97, 0xb3, 0xae, 0x3a, 0x25, 0x45, 0x84, 0x73, 0xe1, 0xf6, 0xe1, 0x5c, 0xbc, 0x7d, 0x38, 0x97,
	0x22, 0xc2, 0xb9, 0x0b, 0x29, 0x7c, 0xdd, 0xd3, 0x27, 0xb6, 0x76, 0x89, 0x0b, 0xcb, 0x34, 0x48,
	0x33, 0x02, 0xba, 0x0b, 0x6b, 0x63, 0x0b, 0x9f, 0x63, 0x12, 0xc1, 0x15, 0xca, 0xf4, 0xda, 0x24,
	0xc2, 0x36, 0xb6, 0x2e, 0xc9, 0x44, 0xb3, 0xf5, 0xc9, 0xa0, 0xb0, 0xca, 0x26, 0x27, 0xa7, 0xb5,
	0xf5, 0xc9, 0xa0, 0xf4, 0x5f, 0x8b, 0x20, 0x3c, 0xd5, 0xb0, 0xde, 0x7f, 0x5f, 0xc3, 0x57, 0x2d,
	0x56, 0x9e, 0x08, 0xa6, 0x81, 0xaf, 0x94, 0x73, 0xd3, 0x1a, 0x15, 0xfe, 0x3a, 0x4f, 0x41, 0x57,
	0x0d, 0x7c, 0xf5, 0xd4, 0xb4, 0x46, 0xa8, 0x0a, 0x39, 0xcd, 0x18, 0x4f, 0x1c, 0xe5, 0xcc, 0xbc,
	0x56, 0x6c, 0xed, 0x7b, 0xb8, 0xf0, 0x22, 0x4f, 0x43, 0x1b, 0x9e, 0x6c, 0x12, 0x91, 0x6a, 0x6b,
	0xdf, 0xc3, 0x34, 0x9e, 0x19, 0xaa, 0x74, 0x68, 0x5e, 0x13, 0x0a, 0x7a, 0x08, 0xd9, 0x3e, 0x3e,
	0x57, 0x27, 0xba, 0xa3, 0xb0, 0x92, 0xf2, 0x41, 0x9e, 0xba, 0x96, 0xe1, 0x54, 0x3a, 0x1a, 0xe8,
	0x1b, 0x90, 0xeb, 0x99, 0xa3, 0x91, 0x69, 0x28, 0x6c, 0xfa, 0xdb, 0x85, 0x1f, 0x10, 0xb1, 0xf4,
	0x93, 0x9d, 0xc8, 0x4a, 0x61, 0xcb, 0x59, 0x26, 0xee, 0x96, 0xb5, 0x12, 0x64, 0xfa, 0x9a, 0x3d,
	0xd6, 0xd5, 0xa9, 0x62, 0xa8, 0x23, 0x5c, 0xf8, 0x61, 0x9e, 0x17, 0x27, 0x46, 0x6c, 0xaa, 0x23,
	0x8c, 0xf6, 0x82, 0xe5, 0xeb, 0x47, 0xf9, 0xb9, 0xfa, 0x85, 0x7e, 0x03, 0x16, 0x47, 0xea, 0xb8,
	0xf0, 0x11, 0xb3, 0x1d, 0xae, 0x52, 0x0d, 0x75, 0xcc, 0xc3, 0x26, 0x13, 0x31, 0xf4, 0x75, 0x58,
	0xb3, 0xf0, 0x98, 0x4c, 0xcc, 0x7e, 0xe1, 0xc7, 0x4c, 0xa5, 0x18, 0x52, 0x91, 0x39, 0xdf, 0xd5,
	0xf3, 0x14, 0xd0, 0x5b, 0x80, 0x34, 0x83, 0x3a, 0x4b, 0xb3, 0x9b, 0x16, 0x06, 0xbb, 0xf0, 0x13,
	0xe6, 0x94, 0xa0, 0x19, 0x4d, 0x97, 0x43, 0x62, 0x6a, 0xa3, 0x2f, 0x83, 0x30, 0x1b, 0x0b, 0x32,
	0x5a, 0xaa, 0x53, 0xf8, 0x29, 0x13, 0xce, 0xb9, 0xf1, 0x7e, 0x4a, 0xc9, 0xa5, 0xbf, 0x4a, 0x02,
	0xcc, 0x5c, 0x45, 0x6f, 0xc3, 0xb2, 0xed, 0x4c, 0x75, 0xcc, 0xa7, 0xc5, 0x1b, 0xf3, 0x9d, 0x92,
	0xb1, 0xd1, 0xc7, 0x56, 0x9b, 0x08, 0xc9, 0x4c, 0x16, 0xbd, 0x0d, 0x4b, 0x17, 0x78, 0x6a, 0xd3,
	0x2a, 0x94, 0x7e, 0x72, 0x3f, 0xa4, 0x13, 0xce, 0x22, 0x99, 0x0a, 0xa3, 0xdf, 0x86, 0x15, 0x3a,
	0xc4, 0x76, 0x61, 0xf1, 0x76, 0x6a, 0x5c, 0xbc, 0xf4, 0x8b, 0x24, 0xac, 0x87, 0x22, 0x85, 0xbe,
	0x1a, 0x74, 0xbb, 0x74, 0x43, 0x60, 0x23, 0x7c, 0xdf, 0x83, 0x8c, 0x69, 0xf5, 0xb1, 0x85, 0xfb,
	0x8a, 0xae, 0xd9, 0x0e, 0xaf, 0xa4, 0x69, 0x4e, 0xa3, 0x65, 0xfe, 0xb7, 0x20, 0x1f, 0x2c, 0xb7,
	0x8a, 0x69, 0x28, 0x0e, 0x69, 0x53, 0xd7, 0xd7, 0xe4, 0xad, 0x40, 0xdd, 0x6d, 0x19, 0x1d, 0xd2,
	0x20, 0x6a, 0xbd, 0x89, 0xed, 0x98, 0x23, 0x05, 0x8f, 0xc6, 0xce, 0x94, 0x69, 0x28, 0x0e, 0xbe,
	0x76, 0x68, 0x45, 0x4b, 0xc9, 0x5b, 0x8c, 0x2d, 0x12, 0x2e, 0x55, 0xe9, 0xe0, 0x6b, 0xa7, 0xf4,
	0x27, 0x49, 0x58, 0xea, 0x68, 0x3a, 0x26, 0xcb, 0xaa, 0xa3, 0x39, 0xba, 0xb7, 0xac, 0xd2, 0x06,
	0x59, 0x92, 0xcf, 0x49, 0x64, 0x6c, 0xbe, 0xa2, 0xf2, 0x16, 0x42, 0xb0, 0x34, 0xc4, 0xfa, 0x98,
	0x7a, 0x94, 0x92, 0xe9, 0x37, 0x7a, 0x0c, 0x9b, 0x9a, 0x31, 0xc4, 0x96, 0xe6, 0x28, 0xfe, 0x5c,
	0x66, 0xf5, 0x14, 0x71, 0x56, 0xcd, 0x97, 0xd1, 0xbb, 0x90, 0x52, 0x0d, 0xd3, 0x98, 0x8e, 0xcc,
	0x89, 0xed, 0x56, 0x14, 0x8f, 0x50, 0xfa, 0x1a, 0x2c, 0x13, 0xc7, 0x6c, 0xf4, 0x9b, 0x90, 0x72,
	0x34, 0x1d, 0xb3, 0x80, 0xb1, 0x35, 0x7a, 0x33, 0x14, 0x71, 0x22, 0x28, 0xaf, 0x11, 0x29, 0x12,
	0xc2, 0x92, 0x05, 0x42, 0xd5, 0x34, 0x6c, 0xc7, 0x52, 0x35, 0xc3, 0xa9, 0x63, 0x63, 0xe0, 0x0c,
	0x89, 0xc7, 0xa4, 0x9c, 0xf1, 0xee, 0xd1, 0x6f, 0x54, 0x80, 0x15, 0xfc, 0xdd, 0x89, 0xaa, 0xb3,
	0xde, 0x65, 0x8f, 0x13, 0x32, 0x6f, 0xa3, 0xfb, 0x00, 0x86, 0xe9, 0x28, 0x9c, 0xbb, 0xc8, 0xb9,
	0x29, 0xc3, 0x74, 0x44, 0x4a, 0x3a, 0x5c, 0x87, 0xac, 0x4e, 0x81, 0x79, 0x51, 0x28, 0x5d, 0x43,
	0xa6, 0xc6, 0x26, 0x34, 0xab, 0x1a, 0x51, 0xf6, 0xde, 0x0c, 0xd7, 0x9b, 0x85, 0x88, 0x72, 0xb3,
	0x03, 0x2b, 0xa4, 0x72, 0x6a, 0xd7, 0x3c, 0xb8, 0xbc, 0x85, 0xf2, 0xb0, 0xaa, 0xd9, 0x0a, 0x36,
	0x26, 0x23, 0x1e, 0xd2, 0x15, 0xcd, 0x16, 0x8d, 0xc9, 0xa8, 0x74, 0x05, 0x3b, 0xdc, 0xb2, 0x78,
	0xad, 0xd9, 0x8e, 0xdd, 0x34, 0x1d, 0xf6, 0x11, 0xe9, 0xc3, 0x1e, 0x64, 0x30, 0xe5, 0x06, 0x5c,
	0x48, 0x33, 0x1a, 0xf3, 0xe0, 0xd7, 0x60, 0xdd, 0x30, 0x95, 0x80, 0x14, 0x73, 0x25, 0x6b, 0x98,
	0xe2, 0x4c, 0xae, 0xf4, 0x17, 0x8b, 0x20, 0x70, 0xcb, 0x2d, 0x03, 0x9b, 0xe7, 0x74, 0x7b, 0xf6,
	0x0e, 0xa4, 0x78, 0x60, 0xcc, 0xf3, 0x02, 0x44, 0xce, 0xb5, 0xf0, 0xd8, 0xc8, 0x6b, 0x4c, 0xa3,
	0x75, 0x1e, 0xe9, 0xf1, 0x37, 0x20, 0x4d, 0xb3, 0xce, 0xe7, 0x70, 0xfa, 0xc9, 0xbd, 0x10, 0xa6,
	0x3f, 0xf6, 0xc7, 0x09, 0x19, 0xa8, 0x06, 0xeb, 0x4e, 0x05, 0x32, 0x4c, 0x9f, 0x59, 0xe1, 0x05,
	0x60, 0x37, 0x1a, 0x80, 0x79, 0x74, 0x9c, 0x90, 0x99, 0x4d, 0x9e, 0x3c, 0x47, 0x90, 0x63, 0x10,
	0x58, 0xc7, 0x64, 0xdb, 0x60, 0xd3, 0x21, 0x98, 0x2f, 0xa9, 0xee, 0x38, 0x70, 0xa9, 0xe3, 0x84,
	0x9c, 0xa5, 0x7a, 0x2e, 0x01, 0xbd, 0x07, 0x88, 0x01, 0x8d, 0xd4, 0xf1, 0x0c, 0x6c, 0x99, 0x82,
	0xed, 0x45, 0x83, 0x35, 0xd4, 0xb1, 0x0f, 0x4f, 0xa0, 0xea, 0x3e, 0x1a, 0xda, 0x71, 0xf7, 0xc3,
	0x64, 0xd9, 0x4d, 0x1d, 0x27, 0xf8, 0x8e, 0xf8, 0x30, 0x07, 0x19, 0xfa, 0xe1, 0x26, 0x68, 0x03,
	0xb6, 0xc2, 0x83, 0xc5, 0xeb, 0xcd, 0xb2, 0x7f, 0xfb, 0x7b, 0x3f, 0xda, 0x0b, 0x4f, 0x47, 0x66,
	0xd2, 0xa5, 0x2b, 0x2f, 0xdf, 0x29, 0x0b, 0x1d, 0x02, 0x98, 0xe4, 0xc3, 0x9d, 0xa6, 0xa4, 0x47,
	0x6f, 0xc6, 0x60, 0x11, 0xfb, 0x72, 0x8a, 0xaa, 0x51, 0x57, 0x6e, 0x33, 0x3f, 0x4a, 0x6d, 0x58,
	0x9f, 0xe1, 0xb0, 0x11, 0xbe, 0x07, 0x29, 0xba, 0x81, 0xf1, 0x2a, 0x44, 0x4a, 0x5e, 0x23, 0x84,
	0xdb, 0x83, 0x7e, 0x1b, 0xb2, 0x81, 0x04, 0x88, 0x4c, 0xc4, 0x1d, 0x58, 0x61, 0x5b, 0x24, 0xb7,
	0x18, 0xb2, 0x16, 0x39, 0x7b, 0x8c, 0x75, 0xb5, 0x87, 0x87, 0xa6, 0xde, 0xc7, 0x16, 0xaf, 0xd2,
	0x7e, 0x52, 0xe9, 0x2f, 0x93, 0x9e, 0xd3, 0xde, 0xb8, 0x45, 0x59, 0xd8, 0x82, 0x65, 0x5d, 0x1b,
	0x69, 0x6c, 0x5d, 0xc8, 0xca, 0xac, 0x31, 0xdf, 0x83, 0xc5, 0x88, 0xb2, 0x71, 0x07, 0xd6, 0xec,
	0xc9, 0x99, 0x42, 0x21, 0x59, 0xc1, 0x5f, 0xb5, 0x27, 0x67, 0xa7, 0xdc, 0x6f, 0x5e, 0x51, 0x96,
	0x6f, 0xaa, 0x28, 0x2b, 0x81, 0x8a, 0xf2, 0x67, 0x49, 0x40, 0xf3, 0xd9, 0xf7, 0xba, 0x3d, 0x2e,
	0xb2, 0xb3, 0x52, 0xb0, 0xa8, 0xa5, 0x2e, 0xf0, 0x54, 0xa2, 0x5e, 0xa0, 0x12, 0x64, 0x59, 0x02,
	0xbb, 0x12, 0x6c, 0x89, 0x48, 0x53, 0x22, 0x93, 0x29, 0xfd, 0xf7, 0x82, 0x37, 0x70, 0x27, 0xef,
	0xcf, 0xd7, 0x9f, 0xe4, 0xaf, 0x5a, 0x7f, 0x16, 0x7c, 0x5d, 0x14, 0x60, 0xf1, 0x02, 0x4f, 0x79,
	0x17, 0xc8, 0x67, 0xb8, 0x22, 0xad, 0x7c, 0xd1, 0x8a, 0xb4, 0xf4, 0x3a, 0x2a, 0xd2, 0xf2, 0xaf,
	0x56, 0x91, 0xbc, 0xf2, 0xb1, 0xfa, 0xea, 0xf2, 0x71, 0x04, 0x1b, 0x81, 0x40, 0xd3, 0xb9, 0xf5,
	0x24, 0x58, 0x3b, 0x6e, 0xe8, 0x01, 0x53, 0x70, 0x0b, 0xc7, 0xcf, 0x96, 0x61, 0xa5, 0x6a, 0xea,
	0x93, 0x91, 0x71, 0xc3, 0x9e, 0xe3, 0x2e, 0xac, 0xb1, 0x0b, 0x0a, 0x55, 0xe7, 0xfb, 0x23, 0xaf,
	0x8d, 0x1e, 0x81, 0x60, 0x0f, 0xcd, 0x2b, 0xa5, 0x67, 0x8e, 0xa7, 0xca, 0xd9, 0xc4, 0x71, 0x4c,
	0xa3, 0x90, 0xa6, 0x32, 0x39, 0x42, 0xaf, 0x9a, 0xe3, 0xe9, 0x21, 0xa5, 0x86, 0xc7, 0x68, 0xf1,
	0xf3, 0x8e, 0xd1, 0xef, 0x42, 0x9e, 0x07, 0x98, 0xad, 0x83, 0x74, 0x3b, 0x40, 0x3f, 0xf9, 0x70,
	0x7d, 0xe9, 0x86, 0x48, 0x07, 0xd7, 0xe0, 0xe3, 0x84, 0xbc, 0xc5, 0x02, 0x1e, 0x5a, 0x9b, 0x3d,
	0xff, 0x68, 0xf9, 0xe3, 0xa3, 0x77, 0xef, 0x15, 0x05, 0xd3, 0xf3, 0x8f, 0xd5, 0xdb, 0x63, 0x58,
	0xf7, 0xf4, 0x03, 0x79, 0x58, 0xbc, 0x11, 0xc3, 0xed, 0x66, 0xd6, 0x85, 0x89, 0xce, 0xc6, 0xd5,
	0xd7, 0x91, 0x8d, 0x6b, 0xaf, 0x73, 0x7d, 0x4c, 0x7d, 0x91, 0xf5, 0xf1, 0xd8, 0xf5, 0xed, 0xe2,
	0x52, 0x19, 0xab, 0x9a, 0x65, 0xf3, 0x5d, 0xc9, 0x83, 0x57, 0x25, 0x2b, 0xc9, 0xee, 0xe3, 0x84,
	0xcc, 0x02, 0x73, 0x72, 0x79, 0x4a, 0xf4, 0xc8, 0x94, 0x60, 0x48, 0x7c, 0x4a, 0xf4, 0x61, 0x95,
	0x25, 0xb2, 0x8d, 0xbe, 0x02, 0xe9, 0x1e, 0xfd, 0xf4, 0xef, 0x52, 0xb7, 0xe7, 0xea, 0x0e, 0x91,
	0x90, 0x81, 0x49, 0xd2, 0x09, 0xb4, 0x07, 0x19, 0x92, 0x58, 0x16, 0xfe, 0xee, 0x44, 0xb3, 0x70,
	0xdf, 0x3d, 0x0f, 0x18, 0xa6, 0x23, 0x73, 0x52, 0xe9, 0x18, 0x84, 0x9a, 0xea, 0x60, 0x59, 0x35,
	0x06, 0xd8, 0x3d, 0x80, 0xdc, 0x81, 0xb5, 0x91, 0x66, 0x28, 0x7d, 0x75, 0x6a, 0xd3, 0xb9, 0xb3,
	0x2c, 0xaf, 0x8e, 0x34, 0xa3, 0xa6, 0x4e, 0x19, 0x4b, 0xbd, 0x66, 0xac, 0x05, 0xce, 0x52, 0xaf,
	0x09, 0xab, 0x64, 0x43, 0xee, 0x58, 0x33, 0x9c, 0x67, 0x9a, 0x33, 0xac, 0xf4, 0xe8, 0x0e, 0x7c,
	0x0f, 0x32, 0x2a, 0xfd, 0x52, 0x74, 0xf5, 0x0c, 0xeb, 0x7c, 0x1e, 0xa6, 0x19, 0x8d, 0x5e, 0x26,
	0x91, 0x3c, 0xe5, 0x22, 0xf4, 0x7a, 0x68, 0x21, 0xf2, 0xa0, 0x46, 0x60, 0x19, 0x24, 0x3d, 0x65,
	0x83, 0xea, 0x7d, 0x97, 0x9e, 0x42, 0xc6, 0x35, 0x5a, 0xd7, 0x8c, 0x0b, 0xb2, 0x56, 0xeb, 0x9a,
	0x71, 0xc1, 0x4e, 0x26, 0xcc, 0xde, 0x1a, 0x21, 0x90, 0xd3, 0x08, 0x71, 0x9e, 0x32, 0x27, 0x96,
	0xce, 0x4b, 0xf0, 0x2a, 0x69, 0x77, 0x2d, 0x7d, 0xff, 0x7f, 0x93, 0x90, 0x0d, 0x5c, 0x9c, 0xa1,
	0x6d, 0xd8, 0x38, 0x11, 0x9f, 0x2b, 0xd5, 0x7a, 0xa5, 0xdd, 0x56, 0x8e, 0xc4, 0xa6, 0x28, 0x4b,
	0x55, 0x21, 0x81, 0x36, 0x61, 0x7d, 0x46, 0x3e, 0x69, 0xb6, 0x9e, 0x35, 0x85, 0x64, 0x90, 0x78,
	0x24, 0xb6, 0xa4, 0x53, 0x61, 0x01, 0xed, 0x00, 0x9a, 0x11, 0xa5, 0xc6, 0x69, 0x5d, 0xaa, 0x4a,
	0x1d, 0x61, 0x11, 0xdd, 0x83, 0xbc, 0x8f, 0x7e, 0xaa, 0xc8, 0xe2, 0x69, 0xb7, 0x53, 0xe9, 0x48,
	0xad, 0xa6, 0xb0, 0x84, 0x76, 0xa1, 0x30, 0x63, 0x76, 0xe5, 0xba, 0x9f, 0xbb, 0x1c, 0xe4, 0x52,
	0x3b, 0x8a, 0xf8, 0xcd, 0x8e, 0xd8, 0xac, 0x89, 0x35, 0x61, 0x05, 0xe5, 0x61, 0x73, 0xc6, 0xad,
	0x35, 0x5d, 0x4f, 0x56, 0xd1, 0x06, 0x64, 0x67, 0x8c, 0xca, 0xb3, 0xb6, 0xb0, 0xb6, 0xff, 0xa7,
	0x0b, 0xb0, 0x1d, 0x79, 0x9d, 0x87, 0xee, 0xc3, 0xbd, 0x7a, 0xe5, 0x50, 0xac, 0x2b, 0x6d, 0xb1,
	0x2e, 0x56, 0x3b, 0x2d, 0x59, 0x69, 0x9d, 0x2a, 0xdd, 0x66, 0x4d, 0x7c, 0x2a, 0x35, 0xc5, 0x9a,
	0x90, 0x20, 0x4e, 0xcc, 0x0b, 0x88, 0xdf, 0x94, 0xda, 0x9d, 0xb6, 0x90, 0xbc, 0x81, 0xfb, 0x5e,
	0xb7, 0x52, 0x6f, 0x0b, 0x0b, 0xe8, 0x4d, 0xb8, 0x3f, 0xcf, 0xad, 0xb5, 0xba, 0x87, 0x75, 0xd1,
	0x15, 0x5a, 0x44, 0x05, 0xd8, 0x9a, 0x17, 0x92, 0x48, 0x74, 0x1e, 0xc0, 0xee, 0x3c, 0xa7, 0xd9,
	0xea, 0xb8, 0xba, 0xcb, 0xd1, 0xe6, 0x89, 0x84, 0xd4, 0x14, 0x56, 0xd0, 0x43, 0x78, 0x10, 0x65,
	0x5e, 0x6c, 0x33, 0x10, 0xd2, 0x07, 0x61, 0x75, 0xff, 0xfb, 0x49, 0x28, 0xdc, 0x74, 0x65, 0x46,
	0x5c, 0x68, 0x77, 0x8f, 0x8e, 0xc4, 0x76, 0x47, 0xac, 0x29, 0xef, 0x57, 0xea, 0x5d, 0xb1, 0xad,
	0x54, 0x5b, 0xdd, 0x66, 0x47, 0xa9, 0x57, 0xe4, 0x23, 0x51, 0x48, 0xa0, 0x3d, 0x78, 0xe3, 0x06,
	0x89, 0x86, 0x58, 0x93, 0xba, 0x0d, 0x21, 0xf9, 0x0a, 0x90, 0x76, 0xa3, 0x52, 0xaf, 0x0b, 0x0b,
	0xfb, 0x7f, 0x98, 0x84, 0x6c, 0xe0, 0x6e, 0x09, 0x6d, 0x81, 0x20, 0x35, 0x4f, 0xbb, 0x1d, 0xa5,
	0x2d, 0x7d, 0x4b, 0xe4, 0x72, 0x09, 0x92, 0xa5, 0x3e, 0xaa, 0x67, 0x60, 0x13, 0xd6, 0x7d, 0xe4,
	0xa7, 0x5d, 0x82, 0x89, 0xee, 0xc0, 0xb6, 0x5f, 0xb6, 0x5b, 0xef, 0x48, 0x4a, 0x5d, 0x6a, 0x8a,
	0x2c, 0x27, 0x19, 0xab, 0xda, 0x6d, 0x77, 0x5a, 0x0d, 0x9a, 0x79, 0xed, 0x8e, 0x2c, 0x35, 0x8f,
	0x84, 0xa5, 0xfd, 0xff, 0x58, 0x82, 0xb5, 0xae, 0xa1, 0xb1, 0xfe, 0x6f, 0xc3, 0x46, 0xb7, 0x29,
	0x75, 0x94, 0x86, 0x54, 0xaf, 0x4b, 0x6d, 0xb1, 0xda, 0x6a, 0xd6, 0xda, 0x42, 0x02, 0x09, 0x90,
	0xa1, 0x64, 0x97, 0x92, 0xf4, 0x28, 0x0d, 0xa9, 0xd9, 0xed, 0x88, 0x64, 0xf0, 0x73, 0x00, 0x94,
	0x72, 0xdc, 0xea, 0xca, 0x64, 0x9c, 0xb3, 0x90, 0xa2, 0xed, 0x5a, 0xe5, 0x79, 0x5b, 0x58, 0xf2,
	0xd8, 0x87, 0xcf, 0x89, 0x38, 0xa0, 0x75, 0x48, 0xd3, 0xf6, 0x09, 0x23, 0xa4, 0x3d, 0x42, 0x83,
	0x11, 0x32, 0x1e, 0xe1, 0x88, 0x11, 0xb2, 0x1e, 0xa1, 0xc3, 0x08, 0x39, 0x84, 0x20, 0xc7, 0x30,
	0xa4, 0x43, 0x89, 0xd1, 0xd6, 0x3d, 0x5a, 0xc3, 0xa3, 0x09, 0x1e, 0xed, 0xc8, 0xa3, 0x6d, 0x78,
	0xb4, 0x8e, 0xe8, 0xd2, 0x10, 0x49, 0x4d, 0xe6, 0xa3, 0xd4, 0x69, 0x2b, 0xa7, 0xa2, 0xcc, 0xfb,
	0x2b, 0x6c, 0x91, 0xe0, 0xce, 0xbc, 0xf7, 0xb3, 0xb6, 0x3d, 0xd6, 0x49, 0x58, 0x6b, 0x07, 0xdd,
	0x85, 0x1d, 0x5f, 0x1f, 0xfd, 0xbc, 0xbc, 0xa7, 0xd6, 0x08, 0xab, 0x15, 0x3c, 0xb5, 0xc6, 0x9c,
	0xda, 0x1d, 0x32, 0x7f, 0x29, 0xaf, 0xda, 0x6a, 0x36, 0xc5, 0x2a, 0x29, 0x1c, 0x01, 0x81, 0xa2,
	0xa7, 0x2c, 0xca, 0x72, 0x4b, 0x0e, 0xf0, 0xee, 0x93, 0x3c, 0xa0, 0xbc, 0xd3, 0x4a, 0xf5, 0x44,
	0x0c, 0x5a, 0x7d, 0x40, 0xe6, 0x16, 0x65, 0xca, 0xe2, 0x7b, 0x5d, 0xb1, 0x1d, 0xe4, 0xee, 0x79,
	0xe3, 0xcd, 0x55, 0x85, 0x47, 0x24, 0x09, 0x19, 0x45, 0x94, 0xab, 0x62, 0xb3, 0x53, 0x39, 0x12,
	0x85, 0x2f, 0x7b, 0xa3, 0x4c, 0xd3, 0x5d, 0xd8, 0xdf, 0x7f, 0x17, 0x72, 0xc1, 0x7b, 0x38, 0x92,
	0x61, 0x8d, 0x0a, 0x29, 0x8b, 0xcd, 0x9a, 0x28, 0x2b, 0x74, 0xbe, 0x92, 0x0c, 0xdb, 0x02, 0xc1,
	0x47, 0xee, 0x54, 0x0e, 0xeb, 0xa2, 0x90, 0xdc, 0x1f, 0xc0, 0x66, 0xc4, 0x7d, 0x18, 0x89, 0x9d,
	0x2c, 0x9e, 0x8a, 0x15, 0x32, 0xbf, 0x02, 0x1a, 0x89, 0x48, 0x96, 0x54, 0x17, 0x49, 0xca, 0xde,
	0x85, 0x9d, 0x30, 0x8b, 0x9b, 0x5f, 0xd8, 0xbf, 0x07, 0xb9, 0xee, 0x58, 0x37, 0xd5, 0xfe, 0x53,
	0x4d, 0x67, 0x13, 0x32, 0x05, 0xcb, 0x52, 0x83, 0x74, 0x2a, 0xb1, 0xff, 0x90, 0x2d, 0x7d, 0xb3,
	0x35, 0x8a, 0x24, 0x4f, 0xeb, 0x54, 0x6c, 0x2a, 0x15, 0xb9, 0xa9, 0x34, 0x5a, 0xb5, 0x4a, 0x5d,
	0x48, 0x94, 0x45, 0xc8, 0xa9, 0xfd, 0x4b, 0xd5, 0xe8, 0x61, 0xb2, 0x19, 0xba, 0xc4, 0x3a, 0x7a,
	0xe3, 0x80, 0x3d, 0x6f, 0x1d, 0xb8, 0xcf, 0x5b, 0xec, 0xa2, 0x90, 0xaf, 0xc3, 0xec, 0x56, 0x7a,
	0x59, 0xce, 0xba, 0x5a, 0x75, 0xa2, 0x54, 0xfe, 0x3a, 0xa4, 0x6c, 0xcd, 0x61, 0xd7, 0xa6, 0x71,
	0x08, 0x2f, 0xd8, 0x3d, 0xe9, 0x1a, 0x51, 0x20, 0x7e, 0x95, 0xbf, 0x36, 0xbb, 0xf4, 0x8e, 0xd3,
	0xfd, 0x20, 0x78, 0x27, 0x5e, 0xae, 0x86, 0x4e, 0x5d, 0x71, 0xfa, 0x3f, 0x88, 0xb8, 0xed, 0x2e,
	0x7f, 0x3b, 0x7c, 0xdb, 0x1d, 0x87, 0xf2, 0xc3, 0xcf, 0x73, 0x19, 0x5e, 0xfe, 0x0a, 0xac, 0x0c,
	0xe9, 0x23, 0x51, 0x1c, 0xec, 0x8f, 0x58, 0xe7, 0xb8, 0x74, 0xf9, 0x1d, 0xdf, 0x5d, 0x61, 0x9c,
	0xea, 0xdf, 0xe4, 0x43, 0x77, 0x89, 0xe5, 0xb3, 0xf0, 0x6b, 0x41, 0x1c, 0xc4, 0xdf, 0x7e, 0xee,
	0xc7, 0x04, 0x92, 0x3c, 0xc1, 0x7b, 0xdb, 0x38, 0x1b, 0x1f, 0xe6, 0x23, 0x9e, 0xd1, 0xca, 0x27,
	0xb0, 0x34, 0x31, 0x34, 0x27, 0x4e, 0xf9, 0x23, 0xe6, 0x60, 0x3e, 0xe4, 0xa0, 0xbb, 0x0a, 0xc8,
	0x14, 0xa4, 0x3c, 0x82, 0xcd, 0xc0, 0x60, 0xb2, 0x87, 0xce, 0x38, 0x6c, 0xfe, 0x5e, 0xf0, 0xc6,
	0x8d, 0x0f, 0xa1, 0xf4, 0xde, 0x66, 0xc3, 0x3f, 0xb0, 0xf4, 0x49, 0xb4, 0xac, 0xc3, 0x06, 0xdd,
	0x47, 0x2a, 0xbe, 0x37, 0xd0, 0x38, 0x63, 0x3f, 0xc9, 0x47, 0xee, 0xc6, 0xe7, 0x9e, 0x56, 0xe5,
	0x75, 0xdd, 0x4f, 0xc2, 0x76, 0xf9, 0x78, 0xfe, 0xd9, 0x21, 0xce, 0x58, 0xf4, 0xab, 0x04, 0xf1,
	0x9b, 0xa5, 0x99, 0xd2, 0x9b, 0x3d, 0x5d, 0xc6, 0x40, 0xfd, 0x5d, 0x3e, 0xf2, 0x6e, 0x21, 0xfc,
	0x02, 0x2a, 0x0b, 0xc3, 0x10, 0xa5, 0xdc, 0x81, 0x1d, 0x2f, 0x33, 0x15, 0x0b, 0x3b, 0xaa, 0xc6,
	0xb7, 0xdf, 0x71, 0x26, 0xff, 0x9e, 0x25, 0xcc, 0x96, 0xa7, 0x2d, 0x53, 0x65, 0x1a, 0xaa, 0xb2,
	0x06, 0x82, 0xed, 0x6e, 0x89, 0xd8, 0xf4, 0x8f, 0xed, 0xc2, 0xcf, 0xa2, 0xdf, 0x85, 0x42, 0x3b,
	0x2b, 0x79, 0xdd, 0x0e, 0x12, 0xca, 0xdf, 0x81, 0x0d, 0x9b, 0x3e, 0x22, 0xbb, 0xef, 0x90, 0x13,
	0x2b, 0xd6, 0xf7, 0x9f, 0xdf, 0x60, 0x2b, 0xf8, 0x18, 0x2d, 0xaf, 0xdb, 0x7e, 0x82, 0xa5, 0x97,
	0x65, 0xd8, 0xd6, 0x8c, 0x9e, 0x3e, 0xe9, 0x63, 0xa5, 0x37, 0xd4, 0x74, 0xd7, 0x64, 0x6c, 0xdf,
	0xfe, 0x81, 0xc5, 0x6a, 0x93, 0x2b, 0x57, 0x89, 0x2e, 0x43, 0xb5, 0xcb, 0x15, 0xc8, 0x8c, 0x27,
	0xba, 0x3e, 0x19, 0x2b, 0x0e, 0x7d, 0x60, 0x88, 0x81, 0xfa, 0xc7, 0x3c, 0xbf, 0xd0, 0xa3, 0x3a,
	0xf4, 0x4d, 0xa2, 0xfc, 0x2e, 0x80, 0x81, 0x71, 0xdf, 0x56, 0x2c, 0x53, 0x8f, 0x9d, 0xe8, 0xff,
	0xc4, 0xb2, 0x2e, 0x45, 0x35, 0x64, 0x53, 0xc7, 0xe5, 0xdf, 0x03, 0xfa, 0x88, 0xa3, 0xeb, 0xe6,
	0x15, 0x89, 0xa2, 0xfb, 0x3c, 0x1f, 0x07, 0xf4, 0xcf, 0x2c, 0x88, 0x8f, 0x6e, 0xf3, 0xea, 0x4f,
	0xe7, 0xcc, 0xe6, 0xcc, 0x8a, 0x4b, 0xb7, 0xcb, 0x23, 0x40, 0x7d, 0xd5, 0xc1, 0x8a, 0x45, 0x4e,
	0x94, 0xee, 0x7f, 0x41, 0xe2, 0x4c, 0xff, 0x4b, 0x74, 0xba, 0x87, 0x4f, 0xa6, 0xb2, 0xd0, 0x0f,
	0x51, 0xca, 0x03, 0x10, 0x26, 0x74, 0x5d, 0x56, 0xce, 0x35, 0xfd, 0x76, 0x8b, 0xe2, 0xbf, 0xe6,
	0x23, 0x4f, 0x99, 0xc1, 0xe5, 0x5d, 0xce, 0x4d, 0x02, 0x6d, 0x62, 0x68, 0xa8, 0x19, 0x8e, 0x72,
	0xa5, 0x39, 0x43, 0x85, 0x9d, 0x40, 0xe3, 0x0c, 0xfd, 0x5b, 0x74, 0xa5, 0x0b, 0x9e, 0x92, 0xe5,
	0xdc, 0x30, 0xd0, 0x2e, 0xab, 0x90, 0x9b, 0x19, 0x22, 0xe7, 0xd3, 0x38, 0x33, 0x1f, 0xe7, 0x23,
	0x6f, 0x77, 0xfc, 0xe7, 0x62, 0x39, 0x33, 0xf4, 0xb5, 0xca, 0x4d, 0xd8, 0x64, 0xf9, 0xa5, 0xf6,
	0xfb, 0xa6, 0xa1, 0xf0, 0xa7, 0xf2, 0x38, 0x3b, 0xff, 0xce, 0x12, 0x6d, 0x83, 0xaa, 0x56, 0x88,
	0x66, 0x9b, 0x29, 0x96, 0x7f, 0x07, 0xdc, 0x55, 0x9e, 0x5e, 0xa5, 0xa2, 0xdd, 0x39, 0x20, 0xd1,
	0x98, 0x8c, 0x42, 0xdb, 0x9a, 0x34, 0x57, 0x21, 0xac, 0xf2, 0x09, 0x20, 0xa2, 0xa9, 0xb8, 0x4f,
	0xd9, 0xf4, 0xc9, 0x32, 0x06, 0x87, 0xbf, 0x74, 0x0b, 0x44, 0xd1, 0xbd, 0x86, 0x22, 0x6a, 0xe5,
	0x67, 0x70, 0x87, 0x82, 0xd9, 0xa6, 0xe5, 0x28, 0x67, 0x53, 0xc5, 0xff, 0x3e, 0x1e, 0x83, 0xc9,
	0xf7, 0x05, 0xdb, 0x44, 0xbf, 0x6d, 0x5a, 0xce, 0xe1, 0xb4, 0x36, 0x7b, 0x47, 0x2f, 0x8b, 0x90,
	0xe1, 0x95, 0x9c, 0xed, 0x80, 0xf6, 0x22, 0xb1, 0x68, 0x1d, 0x0b, 0x74, 0x76, 0x4d, 0x4e, 0x33,
	0x3d, 0xb6, 0x09, 0xfa, 0x83, 0x24, 0xec, 0x52, 0x07, 0xd9, 0x15, 0xe8, 0xfc, 0xe2, 0x70, 0x0b,
	0xdc, 0x17, 0xb7, 0x5c, 0x20, 0x68, 0x24, 0xd8, 0xd5, 0x5c, 0x78, 0xa5, 0x20, 0x5b, 0x0a, 0x3e,
	0x6a, 0x6c, 0xfd, 0x8e, 0x48, 0x00, 0x7a, 0x1b, 0x18, 0xde, 0x8f, 0x72, 0x2d, 0xb6, 0x36, 0x97,
	0x4f, 0x61, 0x8b, 0x3d, 0xcd, 0xc4, 0x6e, 0x6e, 0x03, 0x60, 0x2f, 0x18, 0x18, 0xa2, 0xba, 0x95,
	0xc0, 0x0e, 0xb7, 0x0e, 0x8c, 0xaa, 0xb0, 0xfb, 0x30, 0x63, 0x32, 0x3a, 0xc3, 0x56, 0x1c, 0xde,
	0x07, 0x0c, 0x4f, 0xa0, 0x9a, 0x34, 0x6f, 0x9b, 0x54, 0x8f, 0x24, 0x3b, 0x43, 0x0b, 0xe6, 0x56,
	0x0c, 0x1c, 0x4f, 0xae, 0x0d, 0xaa, 0x1a, 0xc8, 0x2e, 0xcf, 0x3b, 0xcd, 0x56, 0xb4, 0xd1, 0x68,
	0x42, 0x9f, 0xc2, 0xe3, 0xe0, 0x78, 0x5e, 0x31, 0xef, 0x24, 0x5b, 0x72, 0xf5, 0xc8, 0x6a, 0xc1,
	0xd0, 0x6e, 0xdc, 0xb7, 0x06, 0x70, 0xf8, 0xe6, 0x33, 0x4d, 0x75, 0xd8, 0x88, 0x96, 0x47, 0xee,
	0x00, 0xc4, 0x6e, 0x42, 0x03, 0x50, 0xb7, 0xda, 0x84, 0xb2, 0xfe, 0x4b, 0xfe, 0x9d, 0xe8, 0x33,
	0x28, 0xb8, 0xe6, 0xc2, 0x7f, 0xe2, 0x88, 0x33, 0xf9, 0x21, 0x0b, 0xea, 0x36, 0x07, 0x0d, 0xfe,
	0xd1, 0xa3, 0x7c, 0x05, 0x79, 0x7f, 0x28, 0x5e, 0xbd, 0x5b, 0x0a, 0xe0, 0x7e, 0x74, 0xcb, 0xc9,
	0xb0, 0xed, 0x0b, 0x9b, 0x6f, 0x22, 0x3c, 0x87, 0x3b, 0xcc, 0xf0, 0xed, 0x8a, 0x62, 0xc0, 0xf4,
	0x8f, 0x59, 0x97, 0x76, 0x28, 0x40, 0x73, 0xae, 0x32, 0x1e, 0x83, 0xe0, 0x87, 0xbe, 0x61, 0x3d,
	0x0f, 0x20, 0xf2, 0x3f, 0xc2, 0xe4, 0x66, 0x88, 0x74, 0x51, 0x3f, 0x82, 0x75, 0x3e, 0xcd, 0x5e,
	0x71, 0x50, 0x09, 0x00, 0xfd, 0x94, 0xe5, 0x0a, 0x03, 0xaa, 0x78, 0xa7, 0x95, 0x1e, 0x64, 0xfc,
	0x7f, 0xd3, 0x8c, 0xab, 0xfa, 0x7f, 0xf4, 0x8b, 0xaf, 0xde, 0xee, 0x2f, 0x2d, 0xe9, 0xcb, 0x59,
	0xa3, 0x5c, 0x87, 0x65, 0xb6, 0xfb, 0xb9, 0x3f, 0x87, 0xce, 0xff, 0x19, 0x16, 0x28, 0x2a, 0xe9,
	0x27, 0x5b, 0x11, 0xff, 0xb9, 0xb0, 0x65, 0x06, 0x52, 0x96, 0x61, 0xb5, 0xc7, 0xaf, 0xc2, 0x63,
	0xf1, 0x5e, 0xdc, 0x70, 0x60, 0x64, 0xfa, 0xb2, 0x0b, 0x74, 0xf8, 0xfd, 0xe4, 0xc7, 0x9f, 0x16,
	0x13, 0x9f, 0x7c, 0x5a, 0x4c, 0xfc, 0xf2, 0xd3, 0x62, 0xf2, 0xf7, 0x5f, 0x16, 0x93, 0x7f, 0xfe,
	0xb2, 0x98, 0xfc, 0xf9, 0xcb, 0x62, 0xf2, 0xe3, 0x97, 0xc5, 0xe4, 0x27, 0x2f, 0x8b, 0xc9, 0xff,
	0x7c, 0x59, 0x4c, 0xfe, 0xcf, 0xcb, 0x62, 0xe2, 0x97, 0x2f, 0x8b, 0xc9, 0x3f, 0xfe, 0xac, 0x98,
	0xf8, 0xf0, 0xb3, 0x62, 0xf2, 0xe3, 0xcf, 0x8a, 0x89, 0x4f, 0x3e, 0x2b, 0x26, 0xbe, 0x55, 0x1d,
	0x98, 0xe3, 0x8b, 0xc1, 0xc1, 0xa5, 0xa9, 0x3b, 0xd8, 0xb2, 0xd4, 0x83, 0x89, 0xfd, 0x98, 0x7e,
	0x90, 0x93, 0xc2, 0x5b, 0x63, 0xcb, 0xbc, 0xd4, 0xfa, 0xd8, 0x7a, 0xcb, 0x65, 0x3f, 0x1e, 0x9f,
	0x0d, 0xcc, 0xc7, 0xf8, 0xda, 0xe1, 0xff, 0x52, 0x65, 0x3f, 0x67, 0x2b, 0xb4, 0x13, 0x6f, 0xff,
	0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x16, 0x02, 0x42, 0x46, 0x2b, 0x00, 0x00,
}

func (x LabelKeyClass) String() string {
	s, ok := LabelKeyClass_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LabelSelectorOperator) String() string {
	s, ok := LabelSelectorOperator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SuggestedValuesCountType) String() string {
	s, ok := SuggestedValuesCountType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InputSizeType) String() string {
	s, ok := InputSizeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UnitType) String() string {
	s, ok := UnitType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MapRenderStyle) String() string {
	s, ok := MapRenderStyle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RepeatedRenderStyle) String() string {
	s, ok := RepeatedRenderStyle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UploadFileType) String() string {
	s, ok := UploadFileType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HintActionType) String() string {
	s, ok := HintActionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Choices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Choices)
	if !ok {
		that2, ok := that.(Choices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Choice) != len(that1.Choice) {
		return false
	}
	for i := range this.Choice {
		if this.Choice[i] != that1.Choice[i] {
			return false
		}
	}
	return true
}
func (this *ChoiceItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChoiceItem)
	if !ok {
		that2, ok := that.(ChoiceItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *ChoiceItemList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChoiceItemList)
	if !ok {
		that2, ok := that.(ChoiceItemList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ChoiceItems) != len(that1.ChoiceItems) {
		return false
	}
	for i := range this.ChoiceItems {
		if !this.ChoiceItems[i].Equal(that1.ChoiceItems[i]) {
			return false
		}
	}
	return true
}
func (this *LabelKeyClassList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelKeyClassList)
	if !ok {
		that2, ok := that.(LabelKeyClassList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.KeyClasses) != len(that1.KeyClasses) {
		return false
	}
	for i := range this.KeyClasses {
		if this.KeyClasses[i] != that1.KeyClasses[i] {
			return false
		}
	}
	return true
}
func (this *LabelSelectorOperatorList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelSelectorOperatorList)
	if !ok {
		that2, ok := that.(LabelSelectorOperatorList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Operators) != len(that1.Operators) {
		return false
	}
	for i := range this.Operators {
		if this.Operators[i] != that1.Operators[i] {
			return false
		}
	}
	return true
}
func (this *StoredObjectURL) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoredObjectURL)
	if !ok {
		that2, ok := that.(StoredObjectURL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectType != that1.ObjectType {
		return false
	}
	if this.DisableCreate != that1.DisableCreate {
		return false
	}
	return true
}
func (this *HiddenConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HiddenConditions)
	if !ok {
		that2, ok := that.(HiddenConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RootObjectIn) != len(that1.RootObjectIn) {
		return false
	}
	for i := range this.RootObjectIn {
		if this.RootObjectIn[i] != that1.RootObjectIn[i] {
			return false
		}
	}
	if len(this.AncestorMessageIn) != len(that1.AncestorMessageIn) {
		return false
	}
	for i := range this.AncestorMessageIn {
		if this.AncestorMessageIn[i] != that1.AncestorMessageIn[i] {
			return false
		}
	}
	if len(this.PathSuffixIn) != len(that1.PathSuffixIn) {
		return false
	}
	for i := range this.PathSuffixIn {
		if this.PathSuffixIn[i] != that1.PathSuffixIn[i] {
			return false
		}
	}
	if len(this.EnvironmentIn) != len(that1.EnvironmentIn) {
		return false
	}
	for i := range this.EnvironmentIn {
		if this.EnvironmentIn[i] != that1.EnvironmentIn[i] {
			return false
		}
	}
	if this.InvertMatch != that1.InvertMatch {
		return false
	}
	if len(this.WorkspacesIn) != len(that1.WorkspacesIn) {
		return false
	}
	for i := range this.WorkspacesIn {
		if this.WorkspacesIn[i] != that1.WorkspacesIn[i] {
			return false
		}
	}
	return true
}
func (this *SuggestedValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestedValues)
	if !ok {
		that2, ok := that.(SuggestedValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExpectedCount != that1.ExpectedCount {
		return false
	}
	if len(this.RootObjectIn) != len(that1.RootObjectIn) {
		return false
	}
	for i := range this.RootObjectIn {
		if this.RootObjectIn[i] != that1.RootObjectIn[i] {
			return false
		}
	}
	if len(this.AncestorMessageIn) != len(that1.AncestorMessageIn) {
		return false
	}
	for i := range this.AncestorMessageIn {
		if this.AncestorMessageIn[i] != that1.AncestorMessageIn[i] {
			return false
		}
	}
	if len(this.PathSuffixIn) != len(that1.PathSuffixIn) {
		return false
	}
	for i := range this.PathSuffixIn {
		if this.PathSuffixIn[i] != that1.PathSuffixIn[i] {
			return false
		}
	}
	if this.Exclusive != that1.Exclusive {
		return false
	}
	if this.Prefetch != that1.Prefetch {
		return false
	}
	if this.ServiceSlug != that1.ServiceSlug {
		return false
	}
	return true
}
func (this *FieldViewOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldViewOptions)
	if !ok {
		that2, ok := that.(FieldViewOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewForm != that1.NewForm {
		return false
	}
	if this.InputBoxSize != that1.InputBoxSize {
		return false
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	if !this.CommonChoices.Equal(that1.CommonChoices) {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Map.Equal(that1.Map) {
		return false
	}
	if !this.Repeated.Equal(that1.Repeated) {
		return false
	}
	if this.InNamespaceTypes != that1.InNamespaceTypes {
		return false
	}
	if this.InputBoxFormat != that1.InputBoxFormat {
		return false
	}
	return true
}
func (this *MapOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapOptions)
	if !ok {
		that2, ok := that.(MapOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Style != that1.Style {
		return false
	}
	if !this.Keys.Equal(that1.Keys) {
		return false
	}
	if !this.Values.Equal(that1.Values) {
		return false
	}
	return true
}
func (this *RepeatedOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RepeatedOptions)
	if !ok {
		that2, ok := that.(RepeatedOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Style != that1.Style {
		return false
	}
	if this.OrderedList != that1.OrderedList {
		return false
	}
	if this.DisableCreateOnTable != that1.DisableCreateOnTable {
		return false
	}
	if this.CustomEmptyTableText != that1.CustomEmptyTableText {
		return false
	}
	return true
}
func (this *Tile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tile)
	if !ok {
		that2, ok := that.(Tile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Fields != that1.Fields {
		return false
	}
	if this.Help != that1.Help {
		return false
	}
	if this.InheritDescription != that1.InheritDescription {
		return false
	}
	if this.Anonymous != that1.Anonymous {
		return false
	}
	return true
}
func (this *Tiles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tiles)
	if !ok {
		that2, ok := that.(Tiles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TileList) != len(that1.TileList) {
		return false
	}
	for i := range this.TileList {
		if !this.TileList[i].Equal(that1.TileList[i]) {
			return false
		}
	}
	return true
}
func (this *ConstraintLength) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConstraintLength)
	if !ok {
		that2, ok := that.(ConstraintLength)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if that1.LengthChoice == nil {
		if this.LengthChoice != nil {
			return false
		}
	} else if this.LengthChoice == nil {
		return false
	} else if !this.LengthChoice.Equal(that1.LengthChoice) {
		return false
	}
	return true
}
func (this *ConstraintLength_Equals) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConstraintLength_Equals)
	if !ok {
		that2, ok := that.(ConstraintLength_Equals)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Equals != that1.Equals {
		return false
	}
	return true
}
func (this *ConstraintLength_NotEquals) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConstraintLength_NotEquals)
	if !ok {
		that2, ok := that.(ConstraintLength_NotEquals)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotEquals != that1.NotEquals {
		return false
	}
	return true
}
func (this *DisplayValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayValue)
	if !ok {
		that2, ok := that.(DisplayValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if this.IsEnum != that1.IsEnum {
		return false
	}
	return true
}
func (this *DisplayExistsNotExists) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayExistsNotExists)
	if !ok {
		that2, ok := that.(DisplayExistsNotExists)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.ExistsValue != that1.ExistsValue {
		return false
	}
	if this.NoExistsValue != that1.NoExistsValue {
		return false
	}
	return true
}
func (this *DisplayOneofItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneofItem)
	if !ok {
		that2, ok := that.(DisplayOneofItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LengthOf.Equal(that1.LengthOf) {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if that1.ValueChoice == nil {
		if this.ValueChoice != nil {
			return false
		}
	} else if this.ValueChoice == nil {
		return false
	} else if !this.ValueChoice.Equal(that1.ValueChoice) {
		return false
	}
	return true
}
func (this *DisplayOneofItem_FieldValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneofItem_FieldValue)
	if !ok {
		that2, ok := that.(DisplayOneofItem_FieldValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldValue.Equal(that1.FieldValue) {
		return false
	}
	return true
}
func (this *DisplayOneofItem_FieldLength) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneofItem_FieldLength)
	if !ok {
		that2, ok := that.(DisplayOneofItem_FieldLength)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldLength.Equal(that1.FieldLength) {
		return false
	}
	return true
}
func (this *DisplayOneofItem_FieldElements) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneofItem_FieldElements)
	if !ok {
		that2, ok := that.(DisplayOneofItem_FieldElements)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldElements.Equal(that1.FieldElements) {
		return false
	}
	return true
}
func (this *DisplayOneofItem_FieldMapElements) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneofItem_FieldMapElements)
	if !ok {
		that2, ok := that.(DisplayOneofItem_FieldMapElements)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldMapElements.Equal(that1.FieldMapElements) {
		return false
	}
	return true
}
func (this *DisplayOneofItem_Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneofItem_Value)
	if !ok {
		that2, ok := that.(DisplayOneofItem_Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *DisplayOneofItemList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneofItemList)
	if !ok {
		that2, ok := that.(DisplayOneofItemList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *DisplayOneof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneof)
	if !ok {
		that2, ok := that.(DisplayOneof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneofList.Equal(that1.OneofList) {
		return false
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	return true
}
func (this *DisplayOneValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayOneValue)
	if !ok {
		that2, ok := that.(DisplayOneValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PathList) != len(that1.PathList) {
		return false
	}
	for i := range this.PathList {
		if this.PathList[i] != that1.PathList[i] {
			return false
		}
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	return true
}
func (this *DisplayLength) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayLength)
	if !ok {
		that2, ok := that.(DisplayLength)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Suffix != that1.Suffix {
		return false
	}
	if this.Placeholder != that1.Placeholder {
		return false
	}
	return true
}
func (this *DisplayElements) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayElements)
	if !ok {
		that2, ok := that.(DisplayElements)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	if this.SubPath != that1.SubPath {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if this.IsEnum != that1.IsEnum {
		return false
	}
	return true
}
func (this *DisplayMapElements) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayMapElements)
	if !ok {
		that2, ok := that.(DisplayMapElements)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	if this.KeyIsEnum != that1.KeyIsEnum {
		return false
	}
	if this.ValueIsEnum != that1.ValueIsEnum {
		return false
	}
	return true
}
func (this *DisplayKVItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayKVItem)
	if !ok {
		that2, ok := that.(DisplayKVItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LengthOf.Equal(that1.LengthOf) {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if that1.ValueChoice == nil {
		if this.ValueChoice != nil {
			return false
		}
	} else if this.ValueChoice == nil {
		return false
	} else if !this.ValueChoice.Equal(that1.ValueChoice) {
		return false
	}
	return true
}
func (this *DisplayKVItem_FieldValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayKVItem_FieldValue)
	if !ok {
		that2, ok := that.(DisplayKVItem_FieldValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldValue.Equal(that1.FieldValue) {
		return false
	}
	return true
}
func (this *DisplayKVItem_FieldLength) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayKVItem_FieldLength)
	if !ok {
		that2, ok := that.(DisplayKVItem_FieldLength)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldLength.Equal(that1.FieldLength) {
		return false
	}
	return true
}
func (this *DisplayKVItem_FieldElements) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayKVItem_FieldElements)
	if !ok {
		that2, ok := that.(DisplayKVItem_FieldElements)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldElements.Equal(that1.FieldElements) {
		return false
	}
	return true
}
func (this *DisplayKVItem_Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayKVItem_Value)
	if !ok {
		that2, ok := that.(DisplayKVItem_Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *DisplayKVItemList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisplayKVItemList)
	if !ok {
		that2, ok := that.(DisplayKVItemList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Optional != that1.Optional {
		return false
	}
	if this.ShowCopyButton != that1.ShowCopyButton {
		return false
	}
	if that1.FieldChoice == nil {
		if this.FieldChoice != nil {
			return false
		}
	} else if this.FieldChoice == nil {
		return false
	} else if !this.FieldChoice.Equal(that1.FieldChoice) {
		return false
	}
	return true
}
func (this *Column_FieldValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_FieldValue)
	if !ok {
		that2, ok := that.(Column_FieldValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldValue.Equal(that1.FieldValue) {
		return false
	}
	return true
}
func (this *Column_FieldExistsNotExists) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_FieldExistsNotExists)
	if !ok {
		that2, ok := that.(Column_FieldExistsNotExists)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldExistsNotExists.Equal(that1.FieldExistsNotExists) {
		return false
	}
	return true
}
func (this *Column_FieldOneof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_FieldOneof)
	if !ok {
		that2, ok := that.(Column_FieldOneof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldOneof.Equal(that1.FieldOneof) {
		return false
	}
	return true
}
func (this *Column_FieldOneValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_FieldOneValue)
	if !ok {
		that2, ok := that.(Column_FieldOneValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldOneValue.Equal(that1.FieldOneValue) {
		return false
	}
	return true
}
func (this *Column_FieldLength) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_FieldLength)
	if !ok {
		that2, ok := that.(Column_FieldLength)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldLength.Equal(that1.FieldLength) {
		return false
	}
	return true
}
func (this *Column_FieldElements) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_FieldElements)
	if !ok {
		that2, ok := that.(Column_FieldElements)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldElements.Equal(that1.FieldElements) {
		return false
	}
	return true
}
func (this *Column_FieldMapElements) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_FieldMapElements)
	if !ok {
		that2, ok := that.(Column_FieldMapElements)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldMapElements.Equal(that1.FieldMapElements) {
		return false
	}
	return true
}
func (this *Column_FieldKvPairs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_FieldKvPairs)
	if !ok {
		that2, ok := that.(Column_FieldKvPairs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldKvPairs.Equal(that1.FieldKvPairs) {
		return false
	}
	return true
}
func (this *Columns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Columns)
	if !ok {
		that2, ok := that.(Columns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ColumnList) != len(that1.ColumnList) {
		return false
	}
	for i := range this.ColumnList {
		if !this.ColumnList[i].Equal(that1.ColumnList[i]) {
			return false
		}
	}
	if this.NotRequired != that1.NotRequired {
		return false
	}
	return true
}
func (this *DateRangeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateRangeOptions)
	if !ok {
		that2, ok := that.(DateRangeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinDays != that1.MinDays {
		return false
	}
	if this.MaxDays != that1.MaxDays {
		return false
	}
	return true
}
func (this *HintWithAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HintWithAction)
	if !ok {
		that2, ok := that.(HintWithAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActionLabel != that1.ActionLabel {
		return false
	}
	if this.ActionType != that1.ActionType {
		return false
	}
	return true
}
func (this *HintWithLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HintWithLink)
	if !ok {
		that2, ok := that.(HintWithLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LinkText != that1.LinkText {
		return false
	}
	if this.LinkUrl != that1.LinkUrl {
		return false
	}
	return true
}
func (this *Choices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.Choices{")
	s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChoiceItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.ChoiceItem{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChoiceItemList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.ChoiceItemList{")
	if this.ChoiceItems != nil {
		s = append(s, "ChoiceItems: "+fmt.Sprintf("%#v", this.ChoiceItems)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LabelKeyClassList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.LabelKeyClassList{")
	s = append(s, "KeyClasses: "+fmt.Sprintf("%#v", this.KeyClasses)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LabelSelectorOperatorList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.LabelSelectorOperatorList{")
	s = append(s, "Operators: "+fmt.Sprintf("%#v", this.Operators)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StoredObjectURL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.StoredObjectURL{")
	s = append(s, "ObjectType: "+fmt.Sprintf("%#v", this.ObjectType)+",\n")
	s = append(s, "DisableCreate: "+fmt.Sprintf("%#v", this.DisableCreate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HiddenConditions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.HiddenConditions{")
	s = append(s, "RootObjectIn: "+fmt.Sprintf("%#v", this.RootObjectIn)+",\n")
	s = append(s, "AncestorMessageIn: "+fmt.Sprintf("%#v", this.AncestorMessageIn)+",\n")
	s = append(s, "PathSuffixIn: "+fmt.Sprintf("%#v", this.PathSuffixIn)+",\n")
	s = append(s, "EnvironmentIn: "+fmt.Sprintf("%#v", this.EnvironmentIn)+",\n")
	s = append(s, "InvertMatch: "+fmt.Sprintf("%#v", this.InvertMatch)+",\n")
	s = append(s, "WorkspacesIn: "+fmt.Sprintf("%#v", this.WorkspacesIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuggestedValues) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SuggestedValues{")
	s = append(s, "ExpectedCount: "+fmt.Sprintf("%#v", this.ExpectedCount)+",\n")
	s = append(s, "RootObjectIn: "+fmt.Sprintf("%#v", this.RootObjectIn)+",\n")
	s = append(s, "AncestorMessageIn: "+fmt.Sprintf("%#v", this.AncestorMessageIn)+",\n")
	s = append(s, "PathSuffixIn: "+fmt.Sprintf("%#v", this.PathSuffixIn)+",\n")
	s = append(s, "Exclusive: "+fmt.Sprintf("%#v", this.Exclusive)+",\n")
	s = append(s, "Prefetch: "+fmt.Sprintf("%#v", this.Prefetch)+",\n")
	s = append(s, "ServiceSlug: "+fmt.Sprintf("%#v", this.ServiceSlug)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldViewOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&schema.FieldViewOptions{")
	s = append(s, "NewForm: "+fmt.Sprintf("%#v", this.NewForm)+",\n")
	s = append(s, "InputBoxSize: "+fmt.Sprintf("%#v", this.InputBoxSize)+",\n")
	s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	if this.CommonChoices != nil {
		s = append(s, "CommonChoices: "+fmt.Sprintf("%#v", this.CommonChoices)+",\n")
	}
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Map != nil {
		s = append(s, "Map: "+fmt.Sprintf("%#v", this.Map)+",\n")
	}
	if this.Repeated != nil {
		s = append(s, "Repeated: "+fmt.Sprintf("%#v", this.Repeated)+",\n")
	}
	s = append(s, "InNamespaceTypes: "+fmt.Sprintf("%#v", this.InNamespaceTypes)+",\n")
	s = append(s, "InputBoxFormat: "+fmt.Sprintf("%#v", this.InputBoxFormat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MapOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.MapOptions{")
	s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RepeatedOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schema.RepeatedOptions{")
	s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	s = append(s, "OrderedList: "+fmt.Sprintf("%#v", this.OrderedList)+",\n")
	s = append(s, "DisableCreateOnTable: "+fmt.Sprintf("%#v", this.DisableCreateOnTable)+",\n")
	s = append(s, "CustomEmptyTableText: "+fmt.Sprintf("%#v", this.CustomEmptyTableText)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schema.Tile{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	s = append(s, "Help: "+fmt.Sprintf("%#v", this.Help)+",\n")
	s = append(s, "InheritDescription: "+fmt.Sprintf("%#v", this.InheritDescription)+",\n")
	s = append(s, "Anonymous: "+fmt.Sprintf("%#v", this.Anonymous)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tiles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.Tiles{")
	if this.TileList != nil {
		s = append(s, "TileList: "+fmt.Sprintf("%#v", this.TileList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConstraintLength) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.ConstraintLength{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	if this.LengthChoice != nil {
		s = append(s, "LengthChoice: "+fmt.Sprintf("%#v", this.LengthChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConstraintLength_Equals) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.ConstraintLength_Equals{` +
		`Equals:` + fmt.Sprintf("%#v", this.Equals) + `}`}, ", ")
	return s
}
func (this *ConstraintLength_NotEquals) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.ConstraintLength_NotEquals{` +
		`NotEquals:` + fmt.Sprintf("%#v", this.NotEquals) + `}`}, ", ")
	return s
}
func (this *DisplayValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schema.DisplayValue{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "IsEnum: "+fmt.Sprintf("%#v", this.IsEnum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayExistsNotExists) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.DisplayExistsNotExists{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "ExistsValue: "+fmt.Sprintf("%#v", this.ExistsValue)+",\n")
	s = append(s, "NoExistsValue: "+fmt.Sprintf("%#v", this.NoExistsValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayOneofItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.DisplayOneofItem{")
	if this.LengthOf != nil {
		s = append(s, "LengthOf: "+fmt.Sprintf("%#v", this.LengthOf)+",\n")
	}
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	if this.ValueChoice != nil {
		s = append(s, "ValueChoice: "+fmt.Sprintf("%#v", this.ValueChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayOneofItem_FieldValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayOneofItem_FieldValue{` +
		`FieldValue:` + fmt.Sprintf("%#v", this.FieldValue) + `}`}, ", ")
	return s
}
func (this *DisplayOneofItem_FieldLength) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayOneofItem_FieldLength{` +
		`FieldLength:` + fmt.Sprintf("%#v", this.FieldLength) + `}`}, ", ")
	return s
}
func (this *DisplayOneofItem_FieldElements) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayOneofItem_FieldElements{` +
		`FieldElements:` + fmt.Sprintf("%#v", this.FieldElements) + `}`}, ", ")
	return s
}
func (this *DisplayOneofItem_FieldMapElements) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayOneofItem_FieldMapElements{` +
		`FieldMapElements:` + fmt.Sprintf("%#v", this.FieldMapElements) + `}`}, ", ")
	return s
}
func (this *DisplayOneofItem_Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayOneofItem_Value{` +
		`Value:` + fmt.Sprintf("%#v", this.Value) + `}`}, ", ")
	return s
}
func (this *DisplayOneofItemList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.DisplayOneofItemList{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayOneof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.DisplayOneof{")
	if this.OneofList != nil {
		s = append(s, "OneofList: "+fmt.Sprintf("%#v", this.OneofList)+",\n")
	}
	s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayOneValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.DisplayOneValue{")
	s = append(s, "PathList: "+fmt.Sprintf("%#v", this.PathList)+",\n")
	s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayLength) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.DisplayLength{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Suffix: "+fmt.Sprintf("%#v", this.Suffix)+",\n")
	s = append(s, "Placeholder: "+fmt.Sprintf("%#v", this.Placeholder)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayElements) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.DisplayElements{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	s = append(s, "SubPath: "+fmt.Sprintf("%#v", this.SubPath)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "IsEnum: "+fmt.Sprintf("%#v", this.IsEnum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayMapElements) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schema.DisplayMapElements{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	s = append(s, "KeyIsEnum: "+fmt.Sprintf("%#v", this.KeyIsEnum)+",\n")
	s = append(s, "ValueIsEnum: "+fmt.Sprintf("%#v", this.ValueIsEnum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayKVItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.DisplayKVItem{")
	if this.LengthOf != nil {
		s = append(s, "LengthOf: "+fmt.Sprintf("%#v", this.LengthOf)+",\n")
	}
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.ValueChoice != nil {
		s = append(s, "ValueChoice: "+fmt.Sprintf("%#v", this.ValueChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisplayKVItem_FieldValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayKVItem_FieldValue{` +
		`FieldValue:` + fmt.Sprintf("%#v", this.FieldValue) + `}`}, ", ")
	return s
}
func (this *DisplayKVItem_FieldLength) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayKVItem_FieldLength{` +
		`FieldLength:` + fmt.Sprintf("%#v", this.FieldLength) + `}`}, ", ")
	return s
}
func (this *DisplayKVItem_FieldElements) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayKVItem_FieldElements{` +
		`FieldElements:` + fmt.Sprintf("%#v", this.FieldElements) + `}`}, ", ")
	return s
}
func (this *DisplayKVItem_Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DisplayKVItem_Value{` +
		`Value:` + fmt.Sprintf("%#v", this.Value) + `}`}, ", ")
	return s
}
func (this *DisplayKVItemList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.DisplayKVItemList{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&schema.Column{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Optional: "+fmt.Sprintf("%#v", this.Optional)+",\n")
	s = append(s, "ShowCopyButton: "+fmt.Sprintf("%#v", this.ShowCopyButton)+",\n")
	if this.FieldChoice != nil {
		s = append(s, "FieldChoice: "+fmt.Sprintf("%#v", this.FieldChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column_FieldValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.Column_FieldValue{` +
		`FieldValue:` + fmt.Sprintf("%#v", this.FieldValue) + `}`}, ", ")
	return s
}
func (this *Column_FieldExistsNotExists) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.Column_FieldExistsNotExists{` +
		`FieldExistsNotExists:` + fmt.Sprintf("%#v", this.FieldExistsNotExists) + `}`}, ", ")
	return s
}
func (this *Column_FieldOneof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.Column_FieldOneof{` +
		`FieldOneof:` + fmt.Sprintf("%#v", this.FieldOneof) + `}`}, ", ")
	return s
}
func (this *Column_FieldOneValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.Column_FieldOneValue{` +
		`FieldOneValue:` + fmt.Sprintf("%#v", this.FieldOneValue) + `}`}, ", ")
	return s
}
func (this *Column_FieldLength) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.Column_FieldLength{` +
		`FieldLength:` + fmt.Sprintf("%#v", this.FieldLength) + `}`}, ", ")
	return s
}
func (this *Column_FieldElements) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.Column_FieldElements{` +
		`FieldElements:` + fmt.Sprintf("%#v", this.FieldElements) + `}`}, ", ")
	return s
}
func (this *Column_FieldMapElements) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.Column_FieldMapElements{` +
		`FieldMapElements:` + fmt.Sprintf("%#v", this.FieldMapElements) + `}`}, ", ")
	return s
}
func (this *Column_FieldKvPairs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.Column_FieldKvPairs{` +
		`FieldKvPairs:` + fmt.Sprintf("%#v", this.FieldKvPairs) + `}`}, ", ")
	return s
}
func (this *Columns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.Columns{")
	if this.ColumnList != nil {
		s = append(s, "ColumnList: "+fmt.Sprintf("%#v", this.ColumnList)+",\n")
	}
	s = append(s, "NotRequired: "+fmt.Sprintf("%#v", this.NotRequired)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DateRangeOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.DateRangeOptions{")
	s = append(s, "MinDays: "+fmt.Sprintf("%#v", this.MinDays)+",\n")
	s = append(s, "MaxDays: "+fmt.Sprintf("%#v", this.MaxDays)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HintWithAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.HintWithAction{")
	s = append(s, "ActionLabel: "+fmt.Sprintf("%#v", this.ActionLabel)+",\n")
	s = append(s, "ActionType: "+fmt.Sprintf("%#v", this.ActionType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HintWithLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.HintWithLink{")
	s = append(s, "LinkText: "+fmt.Sprintf("%#v", this.LinkText)+",\n")
	s = append(s, "LinkUrl: "+fmt.Sprintf("%#v", this.LinkUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringViewOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Choices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Choices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Choices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Choice) > 0 {
		for iNdEx := len(m.Choice) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Choice[iNdEx])
			copy(dAtA[i:], m.Choice[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Choice[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChoiceItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChoiceItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChoiceItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChoiceItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChoiceItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChoiceItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChoiceItems) > 0 {
		for iNdEx := len(m.ChoiceItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChoiceItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LabelKeyClassList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelKeyClassList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelKeyClassList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyClasses) > 0 {
		dAtA2 := make([]byte, len(m.KeyClasses)*10)
		var j1 int
		for _, num := range m.KeyClasses {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintViewOptions(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelSelectorOperatorList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelSelectorOperatorList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelSelectorOperatorList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operators) > 0 {
		dAtA4 := make([]byte, len(m.Operators)*10)
		var j3 int
		for _, num := range m.Operators {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintViewOptions(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StoredObjectURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredObjectURL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredObjectURL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisableCreate {
		i--
		if m.DisableCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjectType) > 0 {
		i -= len(m.ObjectType)
		copy(dAtA[i:], m.ObjectType)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.ObjectType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HiddenConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HiddenConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HiddenConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkspacesIn) > 0 {
		for iNdEx := len(m.WorkspacesIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkspacesIn[iNdEx])
			copy(dAtA[i:], m.WorkspacesIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.WorkspacesIn[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.EnvironmentIn) > 0 {
		for iNdEx := len(m.EnvironmentIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnvironmentIn[iNdEx])
			copy(dAtA[i:], m.EnvironmentIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.EnvironmentIn[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.InvertMatch {
		i--
		if m.InvertMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PathSuffixIn) > 0 {
		for iNdEx := len(m.PathSuffixIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PathSuffixIn[iNdEx])
			copy(dAtA[i:], m.PathSuffixIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.PathSuffixIn[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AncestorMessageIn) > 0 {
		for iNdEx := len(m.AncestorMessageIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AncestorMessageIn[iNdEx])
			copy(dAtA[i:], m.AncestorMessageIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.AncestorMessageIn[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RootObjectIn) > 0 {
		for iNdEx := len(m.RootObjectIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RootObjectIn[iNdEx])
			copy(dAtA[i:], m.RootObjectIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.RootObjectIn[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SuggestedValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestedValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestedValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceSlug) > 0 {
		i -= len(m.ServiceSlug)
		copy(dAtA[i:], m.ServiceSlug)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.ServiceSlug)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Prefetch {
		i--
		if m.Prefetch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Exclusive {
		i--
		if m.Exclusive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.PathSuffixIn) > 0 {
		for iNdEx := len(m.PathSuffixIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PathSuffixIn[iNdEx])
			copy(dAtA[i:], m.PathSuffixIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.PathSuffixIn[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AncestorMessageIn) > 0 {
		for iNdEx := len(m.AncestorMessageIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AncestorMessageIn[iNdEx])
			copy(dAtA[i:], m.AncestorMessageIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.AncestorMessageIn[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RootObjectIn) > 0 {
		for iNdEx := len(m.RootObjectIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RootObjectIn[iNdEx])
			copy(dAtA[i:], m.RootObjectIn[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.RootObjectIn[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ExpectedCount != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.ExpectedCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FieldViewOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldViewOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldViewOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InputBoxFormat) > 0 {
		i -= len(m.InputBoxFormat)
		copy(dAtA[i:], m.InputBoxFormat)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.InputBoxFormat)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbc
		i--
		dAtA[i] = 0xa2
	}
	if len(m.InNamespaceTypes) > 0 {
		i -= len(m.InNamespaceTypes)
		copy(dAtA[i:], m.InNamespaceTypes)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.InNamespaceTypes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbc
		i--
		dAtA[i] = 0x9a
	}
	if m.Repeated != nil {
		{
			size, err := m.Repeated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbc
		i--
		dAtA[i] = 0x92
	}
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbc
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbb
		i--
		dAtA[i] = 0xea
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbb
		i--
		dAtA[i] = 0xe2
	}
	if m.CommonChoices != nil {
		{
			size, err := m.CommonChoices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbb
		i--
		dAtA[i] = 0xda
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbb
		i--
		dAtA[i] = 0xd2
	}
	if m.InputBoxSize != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.InputBoxSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbb
		i--
		dAtA[i] = 0xc8
	}
	if m.NewForm {
		i--
		if m.NewForm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xbb
		i--
		dAtA[i] = 0xc0
	}
	return len(dAtA) - i, nil
}

func (m *MapOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Values != nil {
		{
			size, err := m.Values.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Keys != nil {
		{
			size, err := m.Keys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Style != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepeatedOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomEmptyTableText) > 0 {
		i -= len(m.CustomEmptyTableText)
		copy(dAtA[i:], m.CustomEmptyTableText)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.CustomEmptyTableText)))
		i--
		dAtA[i] = 0x22
	}
	if m.DisableCreateOnTable {
		i--
		if m.DisableCreateOnTable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.OrderedList {
		i--
		if m.OrderedList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Style != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Anonymous {
		i--
		if m.Anonymous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.InheritDescription {
		i--
		if m.InheritDescription {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Help) > 0 {
		i -= len(m.Help)
		copy(dAtA[i:], m.Help)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Help)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fields) > 0 {
		i -= len(m.Fields)
		copy(dAtA[i:], m.Fields)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Fields)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TileList) > 0 {
		for iNdEx := len(m.TileList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TileList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConstraintLength) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintLength) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintLength) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LengthChoice != nil {
		{
			size := m.LengthChoice.Size()
			i -= size
			if _, err := m.LengthChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConstraintLength_Equals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintLength_Equals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintViewOptions(dAtA, i, uint64(m.Equals))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ConstraintLength_NotEquals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintLength_NotEquals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintViewOptions(dAtA, i, uint64(m.NotEquals))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *DisplayValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnum {
		i--
		if m.IsEnum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayExistsNotExists) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayExistsNotExists) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayExistsNotExists) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NoExistsValue) > 0 {
		i -= len(m.NoExistsValue)
		copy(dAtA[i:], m.NoExistsValue)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.NoExistsValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExistsValue) > 0 {
		i -= len(m.ExistsValue)
		copy(dAtA[i:], m.ExistsValue)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.ExistsValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayOneofItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayOneofItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneofItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LengthOf != nil {
		{
			size, err := m.LengthOf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ValueChoice != nil {
		{
			size := m.ValueChoice.Size()
			i -= size
			if _, err := m.ValueChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayOneofItem_FieldValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneofItem_FieldValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldValue != nil {
		{
			size, err := m.FieldValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DisplayOneofItem_FieldLength) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneofItem_FieldLength) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldLength != nil {
		{
			size, err := m.FieldLength.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DisplayOneofItem_FieldElements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneofItem_FieldElements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldElements != nil {
		{
			size, err := m.FieldElements.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DisplayOneofItem_FieldMapElements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneofItem_FieldMapElements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldMapElements != nil {
		{
			size, err := m.FieldMapElements.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DisplayOneofItem_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneofItem_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *DisplayOneofItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayOneofItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneofItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DisplayOneof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayOneof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.OneofList != nil {
		{
			size, err := m.OneofList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayOneValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayOneValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayOneValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PathList) > 0 {
		for iNdEx := len(m.PathList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PathList[iNdEx])
			copy(dAtA[i:], m.PathList[iNdEx])
			i = encodeVarintViewOptions(dAtA, i, uint64(len(m.PathList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DisplayLength) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayLength) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayLength) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Placeholder {
		i--
		if m.Placeholder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Suffix) > 0 {
		i -= len(m.Suffix)
		copy(dAtA[i:], m.Suffix)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Suffix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayElements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayElements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayElements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnum {
		i--
		if m.IsEnum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubPath) > 0 {
		i -= len(m.SubPath)
		copy(dAtA[i:], m.SubPath)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.SubPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayMapElements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayMapElements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayMapElements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueIsEnum {
		i--
		if m.ValueIsEnum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.KeyIsEnum {
		i--
		if m.KeyIsEnum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayKVItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayKVItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayKVItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueChoice != nil {
		{
			size := m.ValueChoice.Size()
			i -= size
			if _, err := m.ValueChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.LengthOf != nil {
		{
			size, err := m.LengthOf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayKVItem_FieldLength) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayKVItem_FieldLength) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldLength != nil {
		{
			size, err := m.FieldLength.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DisplayKVItem_FieldElements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayKVItem_FieldElements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldElements != nil {
		{
			size, err := m.FieldElements.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DisplayKVItem_FieldValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayKVItem_FieldValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldValue != nil {
		{
			size, err := m.FieldValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *DisplayKVItem_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayKVItem_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *DisplayKVItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayKVItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayKVItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShowCopyButton {
		i--
		if m.ShowCopyButton {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.FieldChoice != nil {
		{
			size := m.FieldChoice.Size()
			i -= size
			if _, err := m.FieldChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Optional {
		i--
		if m.Optional {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Column_FieldValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_FieldValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldValue != nil {
		{
			size, err := m.FieldValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Column_FieldExistsNotExists) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_FieldExistsNotExists) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldExistsNotExists != nil {
		{
			size, err := m.FieldExistsNotExists.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Column_FieldOneof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_FieldOneof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldOneof != nil {
		{
			size, err := m.FieldOneof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Column_FieldOneValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_FieldOneValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldOneValue != nil {
		{
			size, err := m.FieldOneValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Column_FieldLength) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_FieldLength) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldLength != nil {
		{
			size, err := m.FieldLength.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Column_FieldElements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_FieldElements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldElements != nil {
		{
			size, err := m.FieldElements.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Column_FieldMapElements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_FieldMapElements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldMapElements != nil {
		{
			size, err := m.FieldMapElements.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Column_FieldKvPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_FieldKvPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldKvPairs != nil {
		{
			size, err := m.FieldKvPairs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViewOptions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Columns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Columns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Columns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotRequired {
		i--
		if m.NotRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ColumnList) > 0 {
		for iNdEx := len(m.ColumnList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ColumnList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintViewOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DateRangeOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateRangeOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateRangeOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxDays != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.MaxDays))
		i--
		dAtA[i] = 0x10
	}
	if m.MinDays != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.MinDays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HintWithAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HintWithAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HintWithAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionType != 0 {
		i = encodeVarintViewOptions(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ActionLabel) > 0 {
		i -= len(m.ActionLabel)
		copy(dAtA[i:], m.ActionLabel)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.ActionLabel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HintWithLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HintWithLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HintWithLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LinkUrl) > 0 {
		i -= len(m.LinkUrl)
		copy(dAtA[i:], m.LinkUrl)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.LinkUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LinkText) > 0 {
		i -= len(m.LinkText)
		copy(dAtA[i:], m.LinkText)
		i = encodeVarintViewOptions(dAtA, i, uint64(len(m.LinkText)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintViewOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovViewOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Choices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Choice) > 0 {
		for _, s := range m.Choice {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *ChoiceItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *ChoiceItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChoiceItems) > 0 {
		for _, e := range m.ChoiceItems {
			l = e.Size()
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *LabelKeyClassList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyClasses) > 0 {
		l = 0
		for _, e := range m.KeyClasses {
			l += sovViewOptions(uint64(e))
		}
		n += 1 + sovViewOptions(uint64(l)) + l
	}
	return n
}

func (m *LabelSelectorOperatorList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Operators) > 0 {
		l = 0
		for _, e := range m.Operators {
			l += sovViewOptions(uint64(e))
		}
		n += 1 + sovViewOptions(uint64(l)) + l
	}
	return n
}

func (m *StoredObjectURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectType)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.DisableCreate {
		n += 2
	}
	return n
}

func (m *HiddenConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RootObjectIn) > 0 {
		for _, s := range m.RootObjectIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if len(m.AncestorMessageIn) > 0 {
		for _, s := range m.AncestorMessageIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if len(m.PathSuffixIn) > 0 {
		for _, s := range m.PathSuffixIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if m.InvertMatch {
		n += 2
	}
	if len(m.EnvironmentIn) > 0 {
		for _, s := range m.EnvironmentIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if len(m.WorkspacesIn) > 0 {
		for _, s := range m.WorkspacesIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *SuggestedValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpectedCount != 0 {
		n += 1 + sovViewOptions(uint64(m.ExpectedCount))
	}
	if len(m.RootObjectIn) > 0 {
		for _, s := range m.RootObjectIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if len(m.AncestorMessageIn) > 0 {
		for _, s := range m.AncestorMessageIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if len(m.PathSuffixIn) > 0 {
		for _, s := range m.PathSuffixIn {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if m.Exclusive {
		n += 2
	}
	if m.Prefetch {
		n += 2
	}
	l = len(m.ServiceSlug)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *FieldViewOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewForm {
		n += 4
	}
	if m.InputBoxSize != 0 {
		n += 3 + sovViewOptions(uint64(m.InputBoxSize))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 3 + l + sovViewOptions(uint64(l))
	}
	if m.CommonChoices != nil {
		l = m.CommonChoices.Size()
		n += 3 + l + sovViewOptions(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 3 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 3 + l + sovViewOptions(uint64(l))
	}
	if m.Map != nil {
		l = m.Map.Size()
		n += 3 + l + sovViewOptions(uint64(l))
	}
	if m.Repeated != nil {
		l = m.Repeated.Size()
		n += 3 + l + sovViewOptions(uint64(l))
	}
	l = len(m.InNamespaceTypes)
	if l > 0 {
		n += 3 + l + sovViewOptions(uint64(l))
	}
	l = len(m.InputBoxFormat)
	if l > 0 {
		n += 3 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *MapOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Style != 0 {
		n += 1 + sovViewOptions(uint64(m.Style))
	}
	if m.Keys != nil {
		l = m.Keys.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.Values != nil {
		l = m.Values.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *RepeatedOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Style != 0 {
		n += 1 + sovViewOptions(uint64(m.Style))
	}
	if m.OrderedList {
		n += 2
	}
	if m.DisableCreateOnTable {
		n += 2
	}
	l = len(m.CustomEmptyTableText)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *Tile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Help)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.InheritDescription {
		n += 2
	}
	if m.Anonymous {
		n += 2
	}
	return n
}

func (m *Tiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TileList) > 0 {
		for _, e := range m.TileList {
			l = e.Size()
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *ConstraintLength) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.LengthChoice != nil {
		n += m.LengthChoice.Size()
	}
	return n
}

func (m *ConstraintLength_Equals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovViewOptions(uint64(m.Equals))
	return n
}
func (m *ConstraintLength_NotEquals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovViewOptions(uint64(m.NotEquals))
	return n
}
func (m *DisplayValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.IsEnum {
		n += 2
	}
	return n
}

func (m *DisplayExistsNotExists) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.ExistsValue)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.NoExistsValue)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *DisplayOneofItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.ValueChoice != nil {
		n += m.ValueChoice.Size()
	}
	if m.LengthOf != nil {
		l = m.LengthOf.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *DisplayOneofItem_FieldValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldValue != nil {
		l = m.FieldValue.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *DisplayOneofItem_FieldLength) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldLength != nil {
		l = m.FieldLength.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *DisplayOneofItem_FieldElements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldElements != nil {
		l = m.FieldElements.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *DisplayOneofItem_FieldMapElements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldMapElements != nil {
		l = m.FieldMapElements.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *DisplayOneofItem_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	n += 1 + l + sovViewOptions(uint64(l))
	return n
}
func (m *DisplayOneofItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *DisplayOneof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneofList != nil {
		l = m.OneofList.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *DisplayOneValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PathList) > 0 {
		for _, s := range m.PathList {
			l = len(s)
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func (m *DisplayLength) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.Placeholder {
		n += 2
	}
	return n
}

func (m *DisplayElements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovViewOptions(uint64(m.Limit))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.SubPath)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.IsEnum {
		n += 2
	}
	return n
}

func (m *DisplayMapElements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovViewOptions(uint64(m.Limit))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.KeyIsEnum {
		n += 2
	}
	if m.ValueIsEnum {
		n += 2
	}
	return n
}

func (m *DisplayKVItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LengthOf != nil {
		l = m.LengthOf.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.ValueChoice != nil {
		n += m.ValueChoice.Size()
	}
	return n
}

func (m *DisplayKVItem_FieldLength) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldLength != nil {
		l = m.FieldLength.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *DisplayKVItem_FieldElements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldElements != nil {
		l = m.FieldElements.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *DisplayKVItem_FieldValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldValue != nil {
		l = m.FieldValue.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *DisplayKVItem_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	n += 1 + l + sovViewOptions(uint64(l))
	return n
}
func (m *DisplayKVItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	return n
}

func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.Optional {
		n += 2
	}
	if m.FieldChoice != nil {
		n += m.FieldChoice.Size()
	}
	if m.ShowCopyButton {
		n += 2
	}
	return n
}

func (m *Column_FieldValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldValue != nil {
		l = m.FieldValue.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *Column_FieldExistsNotExists) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldExistsNotExists != nil {
		l = m.FieldExistsNotExists.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *Column_FieldOneof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldOneof != nil {
		l = m.FieldOneof.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *Column_FieldOneValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldOneValue != nil {
		l = m.FieldOneValue.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *Column_FieldLength) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldLength != nil {
		l = m.FieldLength.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *Column_FieldElements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldElements != nil {
		l = m.FieldElements.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *Column_FieldMapElements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldMapElements != nil {
		l = m.FieldMapElements.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *Column_FieldKvPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldKvPairs != nil {
		l = m.FieldKvPairs.Size()
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}
func (m *Columns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ColumnList) > 0 {
		for _, e := range m.ColumnList {
			l = e.Size()
			n += 1 + l + sovViewOptions(uint64(l))
		}
	}
	if m.NotRequired {
		n += 2
	}
	return n
}

func (m *DateRangeOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinDays != 0 {
		n += 1 + sovViewOptions(uint64(m.MinDays))
	}
	if m.MaxDays != 0 {
		n += 1 + sovViewOptions(uint64(m.MaxDays))
	}
	return n
}

func (m *HintWithAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActionLabel)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	if m.ActionType != 0 {
		n += 1 + sovViewOptions(uint64(m.ActionType))
	}
	return n
}

func (m *HintWithLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LinkText)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	l = len(m.LinkUrl)
	if l > 0 {
		n += 1 + l + sovViewOptions(uint64(l))
	}
	return n
}

func sovViewOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozViewOptions(x uint64) (n int) {
	return sovViewOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Choices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Choices{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChoiceItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChoiceItem{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChoiceItemList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChoiceItems := "[]*ChoiceItem{"
	for _, f := range this.ChoiceItems {
		repeatedStringForChoiceItems += strings.Replace(f.String(), "ChoiceItem", "ChoiceItem", 1) + ","
	}
	repeatedStringForChoiceItems += "}"
	s := strings.Join([]string{`&ChoiceItemList{`,
		`ChoiceItems:` + repeatedStringForChoiceItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *LabelKeyClassList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LabelKeyClassList{`,
		`KeyClasses:` + fmt.Sprintf("%v", this.KeyClasses) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LabelSelectorOperatorList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LabelSelectorOperatorList{`,
		`Operators:` + fmt.Sprintf("%v", this.Operators) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StoredObjectURL) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StoredObjectURL{`,
		`ObjectType:` + fmt.Sprintf("%v", this.ObjectType) + `,`,
		`DisableCreate:` + fmt.Sprintf("%v", this.DisableCreate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HiddenConditions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HiddenConditions{`,
		`RootObjectIn:` + fmt.Sprintf("%v", this.RootObjectIn) + `,`,
		`AncestorMessageIn:` + fmt.Sprintf("%v", this.AncestorMessageIn) + `,`,
		`PathSuffixIn:` + fmt.Sprintf("%v", this.PathSuffixIn) + `,`,
		`InvertMatch:` + fmt.Sprintf("%v", this.InvertMatch) + `,`,
		`EnvironmentIn:` + fmt.Sprintf("%v", this.EnvironmentIn) + `,`,
		`WorkspacesIn:` + fmt.Sprintf("%v", this.WorkspacesIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuggestedValues) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuggestedValues{`,
		`ExpectedCount:` + fmt.Sprintf("%v", this.ExpectedCount) + `,`,
		`RootObjectIn:` + fmt.Sprintf("%v", this.RootObjectIn) + `,`,
		`AncestorMessageIn:` + fmt.Sprintf("%v", this.AncestorMessageIn) + `,`,
		`PathSuffixIn:` + fmt.Sprintf("%v", this.PathSuffixIn) + `,`,
		`Exclusive:` + fmt.Sprintf("%v", this.Exclusive) + `,`,
		`Prefetch:` + fmt.Sprintf("%v", this.Prefetch) + `,`,
		`ServiceSlug:` + fmt.Sprintf("%v", this.ServiceSlug) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldViewOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldViewOptions{`,
		`NewForm:` + fmt.Sprintf("%v", this.NewForm) + `,`,
		`InputBoxSize:` + fmt.Sprintf("%v", this.InputBoxSize) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`CommonChoices:` + strings.Replace(this.CommonChoices.String(), "Choices", "Choices", 1) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Map:` + strings.Replace(this.Map.String(), "MapOptions", "MapOptions", 1) + `,`,
		`Repeated:` + strings.Replace(this.Repeated.String(), "RepeatedOptions", "RepeatedOptions", 1) + `,`,
		`InNamespaceTypes:` + fmt.Sprintf("%v", this.InNamespaceTypes) + `,`,
		`InputBoxFormat:` + fmt.Sprintf("%v", this.InputBoxFormat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MapOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MapOptions{`,
		`Style:` + fmt.Sprintf("%v", this.Style) + `,`,
		`Keys:` + strings.Replace(this.Keys.String(), "FieldViewOptions", "FieldViewOptions", 1) + `,`,
		`Values:` + strings.Replace(this.Values.String(), "FieldViewOptions", "FieldViewOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepeatedOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RepeatedOptions{`,
		`Style:` + fmt.Sprintf("%v", this.Style) + `,`,
		`OrderedList:` + fmt.Sprintf("%v", this.OrderedList) + `,`,
		`DisableCreateOnTable:` + fmt.Sprintf("%v", this.DisableCreateOnTable) + `,`,
		`CustomEmptyTableText:` + fmt.Sprintf("%v", this.CustomEmptyTableText) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tile{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`Help:` + fmt.Sprintf("%v", this.Help) + `,`,
		`InheritDescription:` + fmt.Sprintf("%v", this.InheritDescription) + `,`,
		`Anonymous:` + fmt.Sprintf("%v", this.Anonymous) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tiles) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTileList := "[]*Tile{"
	for _, f := range this.TileList {
		repeatedStringForTileList += strings.Replace(f.String(), "Tile", "Tile", 1) + ","
	}
	repeatedStringForTileList += "}"
	s := strings.Join([]string{`&Tiles{`,
		`TileList:` + repeatedStringForTileList + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConstraintLength) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConstraintLength{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`LengthChoice:` + fmt.Sprintf("%v", this.LengthChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConstraintLength_Equals) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConstraintLength_Equals{`,
		`Equals:` + fmt.Sprintf("%v", this.Equals) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConstraintLength_NotEquals) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConstraintLength_NotEquals{`,
		`NotEquals:` + fmt.Sprintf("%v", this.NotEquals) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayValue{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`IsEnum:` + fmt.Sprintf("%v", this.IsEnum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayExistsNotExists) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayExistsNotExists{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`ExistsValue:` + fmt.Sprintf("%v", this.ExistsValue) + `,`,
		`NoExistsValue:` + fmt.Sprintf("%v", this.NoExistsValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneofItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayOneofItem{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`ValueChoice:` + fmt.Sprintf("%v", this.ValueChoice) + `,`,
		`LengthOf:` + strings.Replace(this.LengthOf.String(), "ConstraintLength", "ConstraintLength", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneofItem_FieldValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayOneofItem_FieldValue{`,
		`FieldValue:` + strings.Replace(fmt.Sprintf("%v", this.FieldValue), "DisplayValue", "DisplayValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneofItem_FieldLength) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayOneofItem_FieldLength{`,
		`FieldLength:` + strings.Replace(fmt.Sprintf("%v", this.FieldLength), "DisplayLength", "DisplayLength", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneofItem_FieldElements) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayOneofItem_FieldElements{`,
		`FieldElements:` + strings.Replace(fmt.Sprintf("%v", this.FieldElements), "DisplayElements", "DisplayElements", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneofItem_FieldMapElements) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayOneofItem_FieldMapElements{`,
		`FieldMapElements:` + strings.Replace(fmt.Sprintf("%v", this.FieldMapElements), "DisplayMapElements", "DisplayMapElements", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneofItem_Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayOneofItem_Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneofItemList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*DisplayOneofItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "DisplayOneofItem", "DisplayOneofItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&DisplayOneofItemList{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayOneof{`,
		`OneofList:` + strings.Replace(this.OneofList.String(), "DisplayOneofItemList", "DisplayOneofItemList", 1) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayOneValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayOneValue{`,
		`PathList:` + fmt.Sprintf("%v", this.PathList) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayLength) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayLength{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Suffix:` + fmt.Sprintf("%v", this.Suffix) + `,`,
		`Placeholder:` + fmt.Sprintf("%v", this.Placeholder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayElements) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayElements{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`SubPath:` + fmt.Sprintf("%v", this.SubPath) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`IsEnum:` + fmt.Sprintf("%v", this.IsEnum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayMapElements) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayMapElements{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`KeyIsEnum:` + fmt.Sprintf("%v", this.KeyIsEnum) + `,`,
		`ValueIsEnum:` + fmt.Sprintf("%v", this.ValueIsEnum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayKVItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayKVItem{`,
		`LengthOf:` + strings.Replace(this.LengthOf.String(), "ConstraintLength", "ConstraintLength", 1) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`ValueChoice:` + fmt.Sprintf("%v", this.ValueChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayKVItem_FieldLength) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayKVItem_FieldLength{`,
		`FieldLength:` + strings.Replace(fmt.Sprintf("%v", this.FieldLength), "DisplayLength", "DisplayLength", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayKVItem_FieldElements) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayKVItem_FieldElements{`,
		`FieldElements:` + strings.Replace(fmt.Sprintf("%v", this.FieldElements), "DisplayElements", "DisplayElements", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayKVItem_FieldValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayKVItem_FieldValue{`,
		`FieldValue:` + strings.Replace(fmt.Sprintf("%v", this.FieldValue), "DisplayValue", "DisplayValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayKVItem_Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisplayKVItem_Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisplayKVItemList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*DisplayKVItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "DisplayKVItem", "DisplayKVItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&DisplayKVItemList{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Optional:` + fmt.Sprintf("%v", this.Optional) + `,`,
		`FieldChoice:` + fmt.Sprintf("%v", this.FieldChoice) + `,`,
		`ShowCopyButton:` + fmt.Sprintf("%v", this.ShowCopyButton) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_FieldValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_FieldValue{`,
		`FieldValue:` + strings.Replace(fmt.Sprintf("%v", this.FieldValue), "DisplayValue", "DisplayValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_FieldExistsNotExists) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_FieldExistsNotExists{`,
		`FieldExistsNotExists:` + strings.Replace(fmt.Sprintf("%v", this.FieldExistsNotExists), "DisplayExistsNotExists", "DisplayExistsNotExists", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_FieldOneof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_FieldOneof{`,
		`FieldOneof:` + strings.Replace(fmt.Sprintf("%v", this.FieldOneof), "DisplayOneof", "DisplayOneof", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_FieldOneValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_FieldOneValue{`,
		`FieldOneValue:` + strings.Replace(fmt.Sprintf("%v", this.FieldOneValue), "DisplayOneValue", "DisplayOneValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_FieldLength) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_FieldLength{`,
		`FieldLength:` + strings.Replace(fmt.Sprintf("%v", this.FieldLength), "DisplayLength", "DisplayLength", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_FieldElements) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_FieldElements{`,
		`FieldElements:` + strings.Replace(fmt.Sprintf("%v", this.FieldElements), "DisplayElements", "DisplayElements", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_FieldMapElements) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_FieldMapElements{`,
		`FieldMapElements:` + strings.Replace(fmt.Sprintf("%v", this.FieldMapElements), "DisplayMapElements", "DisplayMapElements", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_FieldKvPairs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_FieldKvPairs{`,
		`FieldKvPairs:` + strings.Replace(fmt.Sprintf("%v", this.FieldKvPairs), "DisplayKVItemList", "DisplayKVItemList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Columns) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForColumnList := "[]*Column{"
	for _, f := range this.ColumnList {
		repeatedStringForColumnList += strings.Replace(f.String(), "Column", "Column", 1) + ","
	}
	repeatedStringForColumnList += "}"
	s := strings.Join([]string{`&Columns{`,
		`ColumnList:` + repeatedStringForColumnList + `,`,
		`NotRequired:` + fmt.Sprintf("%v", this.NotRequired) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateRangeOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateRangeOptions{`,
		`MinDays:` + fmt.Sprintf("%v", this.MinDays) + `,`,
		`MaxDays:` + fmt.Sprintf("%v", this.MaxDays) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HintWithAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HintWithAction{`,
		`ActionLabel:` + fmt.Sprintf("%v", this.ActionLabel) + `,`,
		`ActionType:` + fmt.Sprintf("%v", this.ActionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HintWithLink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HintWithLink{`,
		`LinkText:` + fmt.Sprintf("%v", this.LinkText) + `,`,
		`LinkUrl:` + fmt.Sprintf("%v", this.LinkUrl) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringViewOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Choices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Choices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Choices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Choice = append(m.Choice, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChoiceItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChoiceItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChoiceItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChoiceItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChoiceItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChoiceItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChoiceItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChoiceItems = append(m.ChoiceItems, &ChoiceItem{})
			if err := m.ChoiceItems[len(m.ChoiceItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelKeyClassList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelKeyClassList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelKeyClassList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v LabelKeyClass
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowViewOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LabelKeyClass(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyClasses = append(m.KeyClasses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowViewOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthViewOptions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthViewOptions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.KeyClasses) == 0 {
					m.KeyClasses = make([]LabelKeyClass, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LabelKeyClass
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowViewOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LabelKeyClass(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyClasses = append(m.KeyClasses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyClasses", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelSelectorOperatorList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelSelectorOperatorList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelSelectorOperatorList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v LabelSelectorOperator
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowViewOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LabelSelectorOperator(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Operators = append(m.Operators, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowViewOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthViewOptions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthViewOptions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Operators) == 0 {
					m.Operators = make([]LabelSelectorOperator, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LabelSelectorOperator
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowViewOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LabelSelectorOperator(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Operators = append(m.Operators, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoredObjectURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredObjectURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredObjectURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableCreate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HiddenConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HiddenConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HiddenConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootObjectIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootObjectIn = append(m.RootObjectIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AncestorMessageIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AncestorMessageIn = append(m.AncestorMessageIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathSuffixIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathSuffixIn = append(m.PathSuffixIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatch = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentIn = append(m.EnvironmentIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspacesIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspacesIn = append(m.WorkspacesIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestedValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestedValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestedValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedCount", wireType)
			}
			m.ExpectedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedCount |= SuggestedValuesCountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootObjectIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootObjectIn = append(m.RootObjectIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AncestorMessageIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AncestorMessageIn = append(m.AncestorMessageIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathSuffixIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathSuffixIn = append(m.PathSuffixIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclusive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exclusive = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefetch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prefetch = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceSlug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceSlug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldViewOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldViewOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldViewOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewForm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewForm = bool(v != 0)
		case 3001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputBoxSize", wireType)
			}
			m.InputBoxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputBoxSize |= InputSizeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChoices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonChoices == nil {
				m.CommonChoices = &Choices{}
			}
			if err := m.CommonChoices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3005:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3009:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &MapOptions{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repeated == nil {
				m.Repeated = &RepeatedOptions{}
			}
			if err := m.Repeated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InNamespaceTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InNamespaceTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3012:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputBoxFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputBoxFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= MapRenderStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = &FieldViewOptions{}
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = &FieldViewOptions{}
			}
			if err := m.Values.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= RepeatedRenderStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderedList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderedList = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCreateOnTable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableCreateOnTable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomEmptyTableText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomEmptyTableText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Help", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Help = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritDescription", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InheritDescription = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anonymous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Anonymous = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TileList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TileList = append(m.TileList, &Tile{})
			if err := m.TileList[len(m.TileList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstraintLength) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintLength: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintLength: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equals", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LengthChoice = &ConstraintLength_Equals{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotEquals", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LengthChoice = &ConstraintLength_NotEquals{v}
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnum = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayExistsNotExists) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayExistsNotExists: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayExistsNotExists: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistsValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExistsValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoExistsValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoExistsValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayOneofItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayOneofItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayOneofItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueChoice = &DisplayOneofItem_FieldValue{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldLength", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayLength{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueChoice = &DisplayOneofItem_FieldLength{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayElements{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueChoice = &DisplayOneofItem_FieldElements{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMapElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayMapElements{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueChoice = &DisplayOneofItem_FieldMapElements{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueChoice = &DisplayOneofItem_Value{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LengthOf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LengthOf == nil {
				m.LengthOf = &ConstraintLength{}
			}
			if err := m.LengthOf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayOneofItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayOneofItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayOneofItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DisplayOneofItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayOneof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayOneof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayOneof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneofList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OneofList == nil {
				m.OneofList = &DisplayOneofItemList{}
			}
			if err := m.OneofList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayOneValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayOneValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayOneValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathList = append(m.PathList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayLength) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayLength: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayLength: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Placeholder = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayElements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayElements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayElements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnum = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayMapElements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayMapElements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayMapElements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIsEnum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyIsEnum = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueIsEnum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValueIsEnum = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayKVItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayKVItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayKVItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LengthOf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LengthOf == nil {
				m.LengthOf = &ConstraintLength{}
			}
			if err := m.LengthOf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldLength", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayLength{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueChoice = &DisplayKVItem_FieldLength{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayElements{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueChoice = &DisplayKVItem_FieldElements{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueChoice = &DisplayKVItem_FieldValue{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueChoice = &DisplayKVItem_Value{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayKVItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayKVItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayKVItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DisplayKVItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Optional = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldChoice = &Column_FieldValue{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldExistsNotExists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayExistsNotExists{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldChoice = &Column_FieldExistsNotExists{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldOneof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayOneof{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldChoice = &Column_FieldOneof{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldOneValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayOneValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldChoice = &Column_FieldOneValue{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldLength", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayLength{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldChoice = &Column_FieldLength{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayElements{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldChoice = &Column_FieldElements{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMapElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayMapElements{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldChoice = &Column_FieldMapElements{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldKvPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisplayKVItemList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldChoice = &Column_FieldKvPairs{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCopyButton", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCopyButton = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Columns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Columns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Columns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnList = append(m.ColumnList, &Column{})
			if err := m.ColumnList[len(m.ColumnList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotRequired = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateRangeOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateRangeOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateRangeOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDays", wireType)
			}
			m.MinDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDays", wireType)
			}
			m.MaxDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HintWithAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HintWithAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HintWithAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= HintActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HintWithLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HintWithLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HintWithLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViewOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViewOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViewOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthViewOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipViewOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowViewOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowViewOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthViewOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupViewOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthViewOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthViewOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowViewOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupViewOptions = fmt.Errorf("proto: unexpected end of group")
)

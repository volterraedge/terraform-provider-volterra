// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/policy/types.proto

package policy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PolicySetType
//
// x-displayName: "Policy Set Type"
// The type a policy set indicates it's purpose.
// The primary use of the type is to determine the relative order of evaluation when there are multiple policy sets in a namespace. For example, a rate limiting
// policy set is evaluated before a network security policy set. The type is also used to enforce constraints on the action in rules that are part of the policy
// set. For example, a rate limiting policy set cannot contain a rule with an ALLOW or DENY action - the only valid actions are NEXT_POLICY and NEXT_POLICY_SET.
//
// - NETWORK_SECURITY Policy Set is used to apply L7 security to API requests
// - RATE_LIMITING Policy Set is used to rate limit API requests
type PolicySetType int32

const (
	// Network Security
	//
	// x-displayName: "Policy Set for Network Security"
	// Policy Set is used to apply L7 security to API requests
	NETWORK_SECURITY PolicySetType = 0
	// Rate Limiting
	//
	// x-displayName: "Policy Set for Rate Limiting"
	// Policy Set is used to rate limit API requests
	RATE_LIMITING PolicySetType = 1
	// Policy Based Routing
	//
	// x-displayName: "Policy Set for Policy Based Routing"
	// Policy Set is used to perform policy based routing
	POLICY_BASED_ROUTING PolicySetType = 2
	// WAF Exclusion
	//
	// x-displayName: "Policy Set for WAF Exclusion"
	// Policy Set is used to exclude WAF detections that result in false positives in the WAF module
	WAF_EXCLUSION PolicySetType = 3
	// Bot Protection
	//
	// x-displayName: "Policy Set for Bot Defense"
	// Policy Set is used to provide Bot Defense for Web or Mobile applications
	SHAPE_BOT_PROTECTION PolicySetType = 4
)

var PolicySetType_name = map[int32]string{
	0: "NETWORK_SECURITY",
	1: "RATE_LIMITING",
	2: "POLICY_BASED_ROUTING",
	3: "WAF_EXCLUSION",
	4: "SHAPE_BOT_PROTECTION",
}

var PolicySetType_value = map[string]int32{
	"NETWORK_SECURITY":     0,
	"RATE_LIMITING":        1,
	"POLICY_BASED_ROUTING": 2,
	"WAF_EXCLUSION":        3,
	"SHAPE_BOT_PROTECTION": 4,
}

func (PolicySetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{0}
}

// PolicySetScope
//
// x-displayName: "Policy Set Scope"
// The scope of a policy set. This could be per namespace or per virtual host.
type PolicySetScope int32

const (
	// per namespace
	//
	// x-displayName: "Policy Set for Namespace"
	// Policy Set is used for the entire namespace.
	POLICY_SET_SCOPE_NAMESPACE PolicySetScope = 0
	// per virtual host
	//
	// x-displayName: "Policy Set for Namespace"
	// Policy Set is used for a specific virtual host.
	POLICY_SET_SCOPE_VIRTUAL_HOST PolicySetScope = 1
)

var PolicySetScope_name = map[int32]string{
	0: "POLICY_SET_SCOPE_NAMESPACE",
	1: "POLICY_SET_SCOPE_VIRTUAL_HOST",
}

var PolicySetScope_value = map[string]int32{
	"POLICY_SET_SCOPE_NAMESPACE":    0,
	"POLICY_SET_SCOPE_VIRTUAL_HOST": 1,
}

func (PolicySetScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{1}
}

// RuleCombiningAlgorithm
//
// x-displayName: "Rule Combining Algorithm"
// The rule combining algorithm for a policy determines how the list of rules in the policy is evaluated.
// If any of the rules is configured with a App Firewall action, the rule combining algorithm must be configured to be FIRST_MATCH.
//
// - FIRST_MATCH Rules are evaluated sequentially till a matching rule is identified
// - ALLOW_OVERRIDES Rules with an ALLOW action are evaluated prior to rules with a DENY action
// - DENY_OVERRIDES Rules with a DENY action are evaluated prior to rules with an ALLOW action
type RuleCombiningAlgorithm int32

const (
	// First Match
	//
	// x-displayName: "First Rule Match"
	// Rules are evaluated sequentially till a matching rule is identified
	FIRST_MATCH RuleCombiningAlgorithm = 0
	// Deny Overrides
	//
	// x-displayName: "Deny Rule Overrides"
	// Rules with a DENY action are evaluated prior to rules with an ALLOW action
	DENY_OVERRIDES RuleCombiningAlgorithm = 1
	// Allow Overrides
	//
	// x-displayName: "Allow Rule Overrides"
	// Rules with an ALLOW action are evaluated prior to rules with a DENY action
	ALLOW_OVERRIDES RuleCombiningAlgorithm = 2
)

var RuleCombiningAlgorithm_name = map[int32]string{
	0: "FIRST_MATCH",
	1: "DENY_OVERRIDES",
	2: "ALLOW_OVERRIDES",
}

var RuleCombiningAlgorithm_value = map[string]int32{
	"FIRST_MATCH":     0,
	"DENY_OVERRIDES":  1,
	"ALLOW_OVERRIDES": 2,
}

func (RuleCombiningAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{2}
}

// Transformer
//
// x-displayName: "Transformer"
// Transformers to be applied on the part of the request before matching.
type Transformer int32

const (
	// transformer none
	//
	// x-displayName: "Transformer None"
	// No transformers enabled
	TRANSFORMER_NONE Transformer = 0
	// lower case
	//
	// x-displayName: "Lower Case"
	// Convert string to lower case
	LOWER_CASE Transformer = 1
	// upper case
	//
	// x-displayName: "Upper Case"
	// Convert string to upper case
	UPPER_CASE Transformer = 2
	// base64 decode
	//
	// x-displayName: "Base64 Decode"
	// Decode string assuming base64 encoding
	BASE64_DECODE Transformer = 3
	// normalize path
	//
	// x-displayName: "Normalize Path"
	// Normalize URL path so that /a/b/../c will be transformed to /a/c
	NORMALIZE_PATH Transformer = 4
	// remove whitespace
	//
	// x-displayName: "Remove Whitespace"
	// Remove whitespaces
	REMOVE_WHITESPACE Transformer = 5
	// URL decode
	//
	// x-displayName: "URL Decode"
	// Decode string assuming URL encoding as per rfc1738
	URL_DECODE Transformer = 6
	// trim left
	//
	// x-displayName: "Trim Left"
	// Remove whitespace from the left side of the input string
	TRIM_LEFT Transformer = 7
	// trim right
	//
	// x-displayName: "Trim Right"
	// Remove whitespace from the right side of the input string
	TRIM_RIGHT Transformer = 8
	// trim
	//
	// x-displayName: "Trim"
	// Remove whitespace from the both sides of the input string
	TRIM Transformer = 9
)

var Transformer_name = map[int32]string{
	0: "TRANSFORMER_NONE",
	1: "LOWER_CASE",
	2: "UPPER_CASE",
	3: "BASE64_DECODE",
	4: "NORMALIZE_PATH",
	5: "REMOVE_WHITESPACE",
	6: "URL_DECODE",
	7: "TRIM_LEFT",
	8: "TRIM_RIGHT",
	9: "TRIM",
}

var Transformer_value = map[string]int32{
	"TRANSFORMER_NONE":  0,
	"LOWER_CASE":        1,
	"UPPER_CASE":        2,
	"BASE64_DECODE":     3,
	"NORMALIZE_PATH":    4,
	"REMOVE_WHITESPACE": 5,
	"URL_DECODE":        6,
	"TRIM_LEFT":         7,
	"TRIM_RIGHT":        8,
	"TRIM":              9,
}

func (Transformer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{3}
}

// URL Category
//
// x-displayName: "URL Category"
// The url categories to use when a policy based url category is configured.
type URLCategory int32

const (
	// UNCATEGORIZED
	//
	// x-displayName: "Uncategorized"
	// Uncategorized
	UNCATEGORIZED URLCategory = 0
	// REAL_ESTATE
	//
	// x-displayName: "Real Estate"
	// Real Estate
	REAL_ESTATE URLCategory = 1
	// COMPUTER_AND_INTERNET_SECURITY
	//
	// x-displayName: "Computer and Internet Security"
	// Computer and Internet Security
	COMPUTER_AND_INTERNET_SECURITY URLCategory = 2
	// FINANCIAL_SERVICES
	//
	// x-displayName: "Financial Services"
	// Financial Services
	FINANCIAL_SERVICES URLCategory = 3
	// BUSINESS_AND_ECONOMY
	//
	// x-displayName: "Business and Economy"
	// Business and Economy
	BUSINESS_AND_ECONOMY URLCategory = 4
	// COMPUTER_AND_INTERNET_INFO
	//
	// x-displayName: "Computer and Internet Info"
	// Computer and Internet Info
	COMPUTER_AND_INTERNET_INFO URLCategory = 5
	// AUCTIONS
	//
	// x-displayName: "Auctions"
	// Auctions
	AUCTIONS URLCategory = 6
	// SHOPPING
	//
	// x-displayName: "Shopping"
	// Shopping
	SHOPPING URLCategory = 7
	// CULT_AND_OCCULT
	//
	// x-displayName: "Cult and Occult"
	// Cult and Occult
	CULT_AND_OCCULT URLCategory = 8
	// TRAVEL
	//
	// x-displayName: "Travel"
	// Travel
	TRAVEL URLCategory = 9
	// ABUSED_DRUGS
	//
	// x-displayName: "Abused Drugs"
	// Abused Drugs
	ABUSED_DRUGS URLCategory = 10
	// ADULT_AND_PORNOGRAPHY
	//
	// x-displayName: "Adult and Pornography"
	// Adult and Pornography
	ADULT_AND_PORNOGRAPHY URLCategory = 11
	// HOME_AND_GARDEN
	//
	// x-displayName: "Home and Garden"
	// Home and Garden
	HOME_AND_GARDEN URLCategory = 12
	// MILITARY
	//
	// x-displayName: "Military"
	// Military
	MILITARY URLCategory = 13
	// SOCIAL_NETWORKING
	//
	// x-displayName: "Social Networking"
	// Social Networking
	SOCIAL_NETWORKING URLCategory = 14
	// DEAD_SITES
	//
	// x-displayName: "Dead Sites"
	// Dead Sites
	DEAD_SITES URLCategory = 15
	// INDIVIDUAL_STOCK_ADVICE_AND_TOOLS
	//
	// x-displayName: "Individual Stock Advice and Tools"
	// Individual Stock Advice and Tools
	INDIVIDUAL_STOCK_ADVICE_AND_TOOLS URLCategory = 16
	// TRAINING_AND_TOOLS
	//
	// x-displayName: "Training and Tools"
	// Training and Tools
	TRAINING_AND_TOOLS URLCategory = 17
	// DATING
	//
	// x-displayName: "Dating"
	// Dating
	DATING URLCategory = 18
	// SEX_EDUCATION
	//
	// x-displayName: "Sex Education"
	// Sex Education
	SEX_EDUCATION URLCategory = 19
	// RELIGION
	//
	// x-displayName: "Religion"
	// Religion
	RELIGION URLCategory = 20
	// ENTERTAINMENT_AND_ARTS
	//
	// x-displayName: "Entertainment and Arts"
	// Entertainment and Arts
	ENTERTAINMENT_AND_ARTS URLCategory = 21
	// PERSONAL_SITES_AND_BLOGS
	//
	// x-displayName: "Personal sites and Blogs"
	// Personal sites and Blogs
	PERSONAL_SITES_AND_BLOGS URLCategory = 22
	// LEGAL
	//
	// x-displayName: "Legal"
	// Legal
	LEGAL URLCategory = 23
	// LOCAL_INFORMATION
	//
	// x-displayName: "Local Information"
	// Local Information
	LOCAL_INFORMATION URLCategory = 24
	// STREAMING_MEDIA
	//
	// x-displayName: "Streaming Media"
	// Streaming Media
	STREAMING_MEDIA URLCategory = 25
	// JOB_SEARCH
	//
	// x-displayName: "Job Search"
	// Job Search
	JOB_SEARCH URLCategory = 26
	// GAMBLING
	//
	// x-displayName: "Gambling"
	// Gambling
	GAMBLING URLCategory = 27
	// TRANSLATION
	//
	// x-displayName: "Translation"
	// Translation
	TRANSLATION URLCategory = 28
	// REFERENCE_AND_RESEARCH
	//
	// x-displayName: "Reference and Research"
	// Reference and Research
	REFERENCE_AND_RESEARCH URLCategory = 29
	// SHAREWARE_AND_FREEWARE
	//
	// x-displayName: "Shareware and Freeware"
	// Shareware and Freeware
	SHAREWARE_AND_FREEWARE URLCategory = 30
	// PEER_TO_PEER
	//
	// x-displayName: "Peer to Peer"
	// Peer to Peer
	PEER_TO_PEER URLCategory = 31
	// MARIJUANA
	//
	// x-displayName: "Marijuana"
	// Marijuana
	MARIJUANA URLCategory = 32
	// HACKING
	//
	// x-displayName: "Hacking"
	// Hacking
	HACKING URLCategory = 33
	// GAMES
	//
	// x-displayName: "Games"
	// Games
	GAMES URLCategory = 34
	// PHILOSOPHY_AND_POLITICAL_ADVOCACY
	//
	// x-displayName: "Philosophy and Political Advocacy"
	// Philosophy and Political Advocacy
	PHILOSOPHY_AND_POLITICAL_ADVOCACY URLCategory = 35
	// WEAPONS
	//
	// x-displayName: "Weapons"
	// Weapons
	WEAPONS URLCategory = 36
	// PAY_TO_SURF
	//
	// x-displayName: "Pay to Surf"
	// Pay to Surf
	PAY_TO_SURF URLCategory = 37
	// HUNTING_AND_FISHING
	//
	// x-displayName: "Hunting and Fishing"
	// Hunting and Fishing
	HUNTING_AND_FISHING URLCategory = 38
	// SOCIETY
	//
	// x-displayName: "Society"
	// Society
	SOCIETY URLCategory = 39
	// EDUCATIONAL_INSTITUTIONS
	//
	// x-displayName: "Educational Institutions"
	// Educational Institutions
	EDUCATIONAL_INSTITUTIONS URLCategory = 40
	// ONLINE_GREETING_CARDS
	//
	// x-displayName: "Online Greeting Cards"
	// Online Greeting Cards
	ONLINE_GREETING_CARDS URLCategory = 41
	// SPORTS
	//
	// x-displayName: "Sports"
	// Sports
	SPORTS URLCategory = 42
	// SWIMSUITS_AND_INTIMATE_APPAREL
	//
	// x-displayName: "Swimsuits and Intimate Apparel"
	// Swimsuits and Intimate Apparel
	SWIMSUITS_AND_INTIMATE_APPAREL URLCategory = 43
	// QUESTIONABLE
	//
	// x-displayName: "Questionable"
	// Questionable
	QUESTIONABLE URLCategory = 44
	// KIDS
	//
	// x-displayName: "Kids"
	// Kids
	KIDS URLCategory = 45
	// HATE_AND_RACISM
	//
	// x-displayName: "Hate and Racism"
	// Hate and Racism
	HATE_AND_RACISM URLCategory = 46
	// PERSONAL_STORAGE
	//
	// x-displayName: "Personal Storage"
	// Personal Storage
	PERSONAL_STORAGE URLCategory = 47
	// VIOLENCE
	//
	// x-displayName: "Violence"
	// Violence
	VIOLENCE URLCategory = 48
	// KEYLOGGERS_AND_MONITORING
	//
	// x-displayName: "Keyloggers and Monitoring"
	// Keyloggers and Monitoring
	KEYLOGGERS_AND_MONITORING URLCategory = 49
	// SEARCH_ENGINES
	//
	// x-displayName: "Search Engines"
	// Search Engines
	SEARCH_ENGINES URLCategory = 50
	// INTERNET_PORTALS
	//
	// x-displayName: "Internet Portals"
	// Internet Portals
	INTERNET_PORTALS URLCategory = 51
	// WEB_ADVERTISEMENTS
	//
	// x-displayName: "Web Advertisements"
	// Web Advertisements
	WEB_ADVERTISEMENTS URLCategory = 52
	// CHEATING
	//
	// x-displayName: "Cheating"
	// Cheating
	CHEATING URLCategory = 53
	// GROSS
	//
	// x-displayName: "Gross"
	// Gross
	GROSS URLCategory = 54
	// WEB_BASED_EMAIL
	//
	// x-displayName: "Web-based Email"
	// Web-based Email
	WEB_BASED_EMAIL URLCategory = 55
	// MALWARE_SITES
	//
	// x-displayName: "Malware Sites"
	// Malware Sites
	MALWARE_SITES URLCategory = 56
	// PHISHING_AND_OTHER_FRAUDS
	//
	// x-displayName: "Phishing and Other Frauds"
	// Phishing and Other Frauds
	PHISHING_AND_OTHER_FRAUDS URLCategory = 57
	// PROXY_AVOIDANCE_AND_ANONYMIZERS
	//
	// x-displayName: "Proxy Avoidance and Anonymizers"
	// Proxy Avoidance and Anonymizers
	PROXY_AVOIDANCE_AND_ANONYMIZERS URLCategory = 58
	// SPYWARE_AND_ADWARE
	//
	// x-displayName: "Spyware and Adware"
	// Spyware and Adware
	SPYWARE_AND_ADWARE URLCategory = 59
	// MUSIC
	//
	// x-displayName: "Music"
	// Music
	MUSIC URLCategory = 60
	// GOVERNMENT
	//
	// x-displayName: "Government"
	// Government
	GOVERNMENT URLCategory = 61
	// NUDITY
	//
	// x-displayName: "Nudity"
	// Nudity
	NUDITY URLCategory = 62
	// NEWS_AND_MEDIA
	//
	// x-displayName: "News and Media"
	// News and Media
	NEWS_AND_MEDIA URLCategory = 63
	// ILLEGAL
	//
	// x-displayName: "Illegal"
	// Illegal
	ILLEGAL URLCategory = 64
	// CONTENT_DELIVERY_NETWORKS
	//
	// x-displayName: "Content Delivery Networks"
	// Content Delivery Networks
	CONTENT_DELIVERY_NETWORKS URLCategory = 65
	// INTERNET_COMMUNICATIONS
	//
	// x-displayName: "Internet Communications"
	// Internet Communications
	INTERNET_COMMUNICATIONS URLCategory = 66
	// BOT_NETS
	//
	// x-displayName: "Bot Nets"
	// Bot Nets
	BOT_NETS URLCategory = 67
	// ABORTION
	//
	// x-displayName: "Abortion"
	// Abortion
	ABORTION URLCategory = 68
	// HEALTH_AND_MEDICINE
	//
	// x-displayName: "Health and Medicine"
	// Health and Medicine
	HEALTH_AND_MEDICINE URLCategory = 69
	// CONFIRMED_SPAM_SOURCES
	//
	// x-displayName: "Confirmed SPAM Sources"
	// Confirmed SPAM Sources
	CONFIRMED_SPAM_SOURCES URLCategory = 70
	// SPAM_URLS
	//
	// x-displayName: "SPAM URLs"
	// SPAM URLs
	SPAM_URLS URLCategory = 71
	// UNCONFIRMED_SPAM_SOURCES
	//
	// x-displayName: "Unconfirmed SPAM Sources"
	// Unconfirmed SPAM Sources
	UNCONFIRMED_SPAM_SOURCES URLCategory = 72
	// OPEN_HTTP_PROXIES
	//
	// x-displayName: "Open HTTP Proxies"
	// Open HTTP Proxies
	OPEN_HTTP_PROXIES URLCategory = 73
	// DYNAMICALLY_GENERATED_CONTENT
	//
	// x-displayName: "Dynamically Generated Content"
	// Dynamically Generated Content
	DYNAMICALLY_GENERATED_CONTENT URLCategory = 74
	// PARKED_DOMAINS
	//
	// x-displayName: "Parked Domains"
	// Parked Domains
	PARKED_DOMAINS URLCategory = 75
	// ALCOHOL_AND_TOBACCO
	//
	// x-displayName: "Alcohol and Tobacco"
	// Alcohol and Tobacco
	ALCOHOL_AND_TOBACCO URLCategory = 76
	// PRIVATE_IP_ADDRESSES
	//
	// x-displayName: "Private IP Addresses"
	// Private IP Addresses
	PRIVATE_IP_ADDRESSES URLCategory = 77
	// IMAGE_AND_VIDEO_SEARCH
	//
	// x-displayName: "Image and Video Search"
	// Image and Video Search
	IMAGE_AND_VIDEO_SEARCH URLCategory = 78
	// FASHION_AND_BEAUTY
	//
	// x-displayName: "Fashion and Beauty"
	// Fashion and Beauty
	FASHION_AND_BEAUTY URLCategory = 79
	// RECREATION_AND_HOBBIES
	//
	// x-displayName: "Recreation and Hobbies"
	// Recreation and Hobbies
	RECREATION_AND_HOBBIES URLCategory = 80
	// MOTOR_VEHICLES
	//
	// x-displayName: "Motor Vehicles"
	// Motor Vehicles
	MOTOR_VEHICLES URLCategory = 81
	// WEB_HOSTING
	//
	// x-displayName: "Web Hosting"
	// Web Hosting
	WEB_HOSTING URLCategory = 82
)

var URLCategory_name = map[int32]string{
	0:  "UNCATEGORIZED",
	1:  "REAL_ESTATE",
	2:  "COMPUTER_AND_INTERNET_SECURITY",
	3:  "FINANCIAL_SERVICES",
	4:  "BUSINESS_AND_ECONOMY",
	5:  "COMPUTER_AND_INTERNET_INFO",
	6:  "AUCTIONS",
	7:  "SHOPPING",
	8:  "CULT_AND_OCCULT",
	9:  "TRAVEL",
	10: "ABUSED_DRUGS",
	11: "ADULT_AND_PORNOGRAPHY",
	12: "HOME_AND_GARDEN",
	13: "MILITARY",
	14: "SOCIAL_NETWORKING",
	15: "DEAD_SITES",
	16: "INDIVIDUAL_STOCK_ADVICE_AND_TOOLS",
	17: "TRAINING_AND_TOOLS",
	18: "DATING",
	19: "SEX_EDUCATION",
	20: "RELIGION",
	21: "ENTERTAINMENT_AND_ARTS",
	22: "PERSONAL_SITES_AND_BLOGS",
	23: "LEGAL",
	24: "LOCAL_INFORMATION",
	25: "STREAMING_MEDIA",
	26: "JOB_SEARCH",
	27: "GAMBLING",
	28: "TRANSLATION",
	29: "REFERENCE_AND_RESEARCH",
	30: "SHAREWARE_AND_FREEWARE",
	31: "PEER_TO_PEER",
	32: "MARIJUANA",
	33: "HACKING",
	34: "GAMES",
	35: "PHILOSOPHY_AND_POLITICAL_ADVOCACY",
	36: "WEAPONS",
	37: "PAY_TO_SURF",
	38: "HUNTING_AND_FISHING",
	39: "SOCIETY",
	40: "EDUCATIONAL_INSTITUTIONS",
	41: "ONLINE_GREETING_CARDS",
	42: "SPORTS",
	43: "SWIMSUITS_AND_INTIMATE_APPAREL",
	44: "QUESTIONABLE",
	45: "KIDS",
	46: "HATE_AND_RACISM",
	47: "PERSONAL_STORAGE",
	48: "VIOLENCE",
	49: "KEYLOGGERS_AND_MONITORING",
	50: "SEARCH_ENGINES",
	51: "INTERNET_PORTALS",
	52: "WEB_ADVERTISEMENTS",
	53: "CHEATING",
	54: "GROSS",
	55: "WEB_BASED_EMAIL",
	56: "MALWARE_SITES",
	57: "PHISHING_AND_OTHER_FRAUDS",
	58: "PROXY_AVOIDANCE_AND_ANONYMIZERS",
	59: "SPYWARE_AND_ADWARE",
	60: "MUSIC",
	61: "GOVERNMENT",
	62: "NUDITY",
	63: "NEWS_AND_MEDIA",
	64: "ILLEGAL",
	65: "CONTENT_DELIVERY_NETWORKS",
	66: "INTERNET_COMMUNICATIONS",
	67: "BOT_NETS",
	68: "ABORTION",
	69: "HEALTH_AND_MEDICINE",
	70: "CONFIRMED_SPAM_SOURCES",
	71: "SPAM_URLS",
	72: "UNCONFIRMED_SPAM_SOURCES",
	73: "OPEN_HTTP_PROXIES",
	74: "DYNAMICALLY_GENERATED_CONTENT",
	75: "PARKED_DOMAINS",
	76: "ALCOHOL_AND_TOBACCO",
	77: "PRIVATE_IP_ADDRESSES",
	78: "IMAGE_AND_VIDEO_SEARCH",
	79: "FASHION_AND_BEAUTY",
	80: "RECREATION_AND_HOBBIES",
	81: "MOTOR_VEHICLES",
	82: "WEB_HOSTING",
}

var URLCategory_value = map[string]int32{
	"UNCATEGORIZED":                     0,
	"REAL_ESTATE":                       1,
	"COMPUTER_AND_INTERNET_SECURITY":    2,
	"FINANCIAL_SERVICES":                3,
	"BUSINESS_AND_ECONOMY":              4,
	"COMPUTER_AND_INTERNET_INFO":        5,
	"AUCTIONS":                          6,
	"SHOPPING":                          7,
	"CULT_AND_OCCULT":                   8,
	"TRAVEL":                            9,
	"ABUSED_DRUGS":                      10,
	"ADULT_AND_PORNOGRAPHY":             11,
	"HOME_AND_GARDEN":                   12,
	"MILITARY":                          13,
	"SOCIAL_NETWORKING":                 14,
	"DEAD_SITES":                        15,
	"INDIVIDUAL_STOCK_ADVICE_AND_TOOLS": 16,
	"TRAINING_AND_TOOLS":                17,
	"DATING":                            18,
	"SEX_EDUCATION":                     19,
	"RELIGION":                          20,
	"ENTERTAINMENT_AND_ARTS":            21,
	"PERSONAL_SITES_AND_BLOGS":          22,
	"LEGAL":                             23,
	"LOCAL_INFORMATION":                 24,
	"STREAMING_MEDIA":                   25,
	"JOB_SEARCH":                        26,
	"GAMBLING":                          27,
	"TRANSLATION":                       28,
	"REFERENCE_AND_RESEARCH":            29,
	"SHAREWARE_AND_FREEWARE":            30,
	"PEER_TO_PEER":                      31,
	"MARIJUANA":                         32,
	"HACKING":                           33,
	"GAMES":                             34,
	"PHILOSOPHY_AND_POLITICAL_ADVOCACY": 35,
	"WEAPONS":                           36,
	"PAY_TO_SURF":                       37,
	"HUNTING_AND_FISHING":               38,
	"SOCIETY":                           39,
	"EDUCATIONAL_INSTITUTIONS":          40,
	"ONLINE_GREETING_CARDS":             41,
	"SPORTS":                            42,
	"SWIMSUITS_AND_INTIMATE_APPAREL":    43,
	"QUESTIONABLE":                      44,
	"KIDS":                              45,
	"HATE_AND_RACISM":                   46,
	"PERSONAL_STORAGE":                  47,
	"VIOLENCE":                          48,
	"KEYLOGGERS_AND_MONITORING":         49,
	"SEARCH_ENGINES":                    50,
	"INTERNET_PORTALS":                  51,
	"WEB_ADVERTISEMENTS":                52,
	"CHEATING":                          53,
	"GROSS":                             54,
	"WEB_BASED_EMAIL":                   55,
	"MALWARE_SITES":                     56,
	"PHISHING_AND_OTHER_FRAUDS":         57,
	"PROXY_AVOIDANCE_AND_ANONYMIZERS":   58,
	"SPYWARE_AND_ADWARE":                59,
	"MUSIC":                             60,
	"GOVERNMENT":                        61,
	"NUDITY":                            62,
	"NEWS_AND_MEDIA":                    63,
	"ILLEGAL":                           64,
	"CONTENT_DELIVERY_NETWORKS":         65,
	"INTERNET_COMMUNICATIONS":           66,
	"BOT_NETS":                          67,
	"ABORTION":                          68,
	"HEALTH_AND_MEDICINE":               69,
	"CONFIRMED_SPAM_SOURCES":            70,
	"SPAM_URLS":                         71,
	"UNCONFIRMED_SPAM_SOURCES":          72,
	"OPEN_HTTP_PROXIES":                 73,
	"DYNAMICALLY_GENERATED_CONTENT":     74,
	"PARKED_DOMAINS":                    75,
	"ALCOHOL_AND_TOBACCO":               76,
	"PRIVATE_IP_ADDRESSES":              77,
	"IMAGE_AND_VIDEO_SEARCH":            78,
	"FASHION_AND_BEAUTY":                79,
	"RECREATION_AND_HOBBIES":            80,
	"MOTOR_VEHICLES":                    81,
	"WEB_HOSTING":                       82,
}

func (URLCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{4}
}

// IP Threat Category
//
// x-displayName: "IP Threat Category"
// The IP threat categories to use when a policy based IP threat category is configured.
type IPThreatCategory int32

const (
	// SPAM_SOURCES
	//
	// x-displayName: "Spam Sources"
	SPAM_SOURCES IPThreatCategory = 0
	// WINDOWS_EXPLOITS
	//
	// x-displayName: "Windows Exploits"
	WINDOWS_EXPLOITS IPThreatCategory = 1
	// WEB_ATTACKS
	//
	// x-displayName: "Web Attacks"
	WEB_ATTACKS IPThreatCategory = 2
	// BOTNETS
	//
	// x-displayName: "Botnets"
	BOTNETS IPThreatCategory = 3
	// SCANNERS
	//
	// x-displayName: "Scanners"
	SCANNERS IPThreatCategory = 4
	// REPUTATION
	//
	// x-displayName: "Reputation"
	REPUTATION IPThreatCategory = 5
	// PHISHING
	//
	// x-displayName: "Phishing"
	PHISHING IPThreatCategory = 6
	// PROXY
	//
	// x-displayName: "Anonymous Proxies"
	PROXY IPThreatCategory = 7
	// MOBILE_THREATS
	//
	// x-displayName: "Mobile Threats"
	MOBILE_THREATS IPThreatCategory = 8
	// TOR_PROXY
	//
	// x-displayName: "Tor Proxy"
	TOR_PROXY IPThreatCategory = 9
	// DENIAL_OF_SERVICE
	//
	// x-displayName: "Denial of service"
	DENIAL_OF_SERVICE IPThreatCategory = 10
	// NETWORK
	//
	// x-displayName: "Network Attacks"
	NETWORK IPThreatCategory = 11
)

var IPThreatCategory_name = map[int32]string{
	0:  "SPAM_SOURCES",
	1:  "WINDOWS_EXPLOITS",
	2:  "WEB_ATTACKS",
	3:  "BOTNETS",
	4:  "SCANNERS",
	5:  "REPUTATION",
	6:  "PHISHING",
	7:  "PROXY",
	8:  "MOBILE_THREATS",
	9:  "TOR_PROXY",
	10: "DENIAL_OF_SERVICE",
	11: "NETWORK",
}

var IPThreatCategory_value = map[string]int32{
	"SPAM_SOURCES":      0,
	"WINDOWS_EXPLOITS":  1,
	"WEB_ATTACKS":       2,
	"BOTNETS":           3,
	"SCANNERS":          4,
	"REPUTATION":        5,
	"PHISHING":          6,
	"PROXY":             7,
	"MOBILE_THREATS":    8,
	"TOR_PROXY":         9,
	"DENIAL_OF_SERVICE": 10,
	"NETWORK":           11,
}

func (IPThreatCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{5}
}

// Detection Context
//
// x-displayName: "WAF Exclusion Context Options"
// The available contexts for Exclusion rules.
type DetectionContext int32

const (
	// CONTEXT_ANY
	//
	// x-displayName: "Any"
	// Detection will be excluded for all contexts.
	CONTEXT_ANY DetectionContext = 0
	// CONTEXT_BODY
	//
	// x-displayName: "Body"
	// Detection will be excluded for the request body.
	CONTEXT_BODY DetectionContext = 1
	// CONTEXT_REQUEST
	//
	// x-displayName: "Request"
	// Detection will be excluded for the request.
	CONTEXT_REQUEST DetectionContext = 2
	// CONTEXT_RESPONSE
	//
	// x-displayName: "Response"
	CONTEXT_RESPONSE DetectionContext = 3
	// CONTEXT_PARAMETER
	//
	// x-displayName: "Parameter"
	// Detection will be excluded for the parameters. The parameter name is required in the Context name field. If the field is left empty, the detection will be excluded for all parameters.
	CONTEXT_PARAMETER DetectionContext = 4
	// CONTEXT_HEADER
	//
	// x-displayName: "Header"
	// Detection will be excluded for the headers. The header name is required in the Context name field. If the field is left empty, the detection will be excluded for all headers.
	CONTEXT_HEADER DetectionContext = 5
	// CONTEXT_COOKIE
	//
	// x-displayName: "Cookie"
	// Detection will be excluded for the cookies. The cookie name is required in the Context name field. If the field is left empty, the detection will be excluded for all cookies.
	CONTEXT_COOKIE DetectionContext = 6
	// CONTEXT_URL
	//
	// x-displayName: "URL"
	// Detection will be excluded for the request URL.
	CONTEXT_URL DetectionContext = 7
	// CONTEXT_URI
	//
	// x-displayName: "URI"
	CONTEXT_URI DetectionContext = 8
)

var DetectionContext_name = map[int32]string{
	0: "CONTEXT_ANY",
	1: "CONTEXT_BODY",
	2: "CONTEXT_REQUEST",
	3: "CONTEXT_RESPONSE",
	4: "CONTEXT_PARAMETER",
	5: "CONTEXT_HEADER",
	6: "CONTEXT_COOKIE",
	7: "CONTEXT_URL",
	8: "CONTEXT_URI",
}

var DetectionContext_value = map[string]int32{
	"CONTEXT_ANY":       0,
	"CONTEXT_BODY":      1,
	"CONTEXT_REQUEST":   2,
	"CONTEXT_RESPONSE":  3,
	"CONTEXT_PARAMETER": 4,
	"CONTEXT_HEADER":    5,
	"CONTEXT_COOKIE":    6,
	"CONTEXT_URL":       7,
	"CONTEXT_URI":       8,
}

func (DetectionContext) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{6}
}

// TLS known fingerprint class
//
// x-displayName: "TLS known fingerprint class"
// Specifies known TLS fingerprint classes
type KnownTlsFingerprintClass int32

const (
	// TLS_FINGERPRINT_NONE
	//
	// x-displayName: "TLS Fingerprint None"
	// No TLS fingerprint
	TLS_FINGERPRINT_NONE KnownTlsFingerprintClass = 0
	// ANY_MALICIOUS_FINGERPRINT
	//
	// x-displayName: "Any Known Malicious Fingerprint"
	// TLS fingerprints known to be associated with malicious clients
	ANY_MALICIOUS_FINGERPRINT KnownTlsFingerprintClass = 1
	// ADWARE
	//
	// x-displayName: "ADWARE"
	// TLS fingerprints known to be associated with adware
	ADWARE KnownTlsFingerprintClass = 2
	// ADWIND
	//
	// x-displayName: "ADWIND"
	// TLS fingerprints known to be associated with adwind
	ADWIND KnownTlsFingerprintClass = 3
	// DRIDEX
	//
	// x-displayName: "DRIDEX"
	// TLS fingerprints known to be associated with dridex
	DRIDEX KnownTlsFingerprintClass = 4
	// GOOTKIT
	//
	// x-displayName: "GOOTKIT"
	// TLS fingerprints known to be associated with gootkit
	GOOTKIT KnownTlsFingerprintClass = 5
	// GOZI
	//
	// x-displayName: "GOZI"
	// TLS fingerprints known to be associated with gozi
	GOZI KnownTlsFingerprintClass = 6
	// JBIFROST
	//
	// x-displayName: "JBIFROST"
	// TLS fingerprints known to be associated with jbifrost
	JBIFROST KnownTlsFingerprintClass = 7
	// QUAKBOT
	//
	// x-displayName: "QUAKBOT"
	// TLS fingerprints known to be associated with quakbot
	QUAKBOT KnownTlsFingerprintClass = 8
	// RANSOMWARE
	//
	// x-displayName: "RANSOMWARE"
	// TLS fingerprints known to be associated with ransomware
	RANSOMWARE KnownTlsFingerprintClass = 9
	// TROLDESH
	//
	// x-displayName: "TROLDESH"
	// TLS fingerprints known to be associated with troldesh
	TROLDESH KnownTlsFingerprintClass = 10
	// TOFSEE
	//
	// x-displayName: "TOFSEE"
	// TLS fingerprints known to be associated with tofsee
	TOFSEE KnownTlsFingerprintClass = 11
	// TORRENTLOCKER
	//
	// x-displayName: "TORRENTLOCKER"
	// TLS fingerprints known to be associated with torrentlocker
	TORRENTLOCKER KnownTlsFingerprintClass = 12
	// TRICKBOT
	//
	// x-displayName: "TRICKBOT"
	// TLS fingerprints known to be associated with trickbot
	TRICKBOT KnownTlsFingerprintClass = 13
)

var KnownTlsFingerprintClass_name = map[int32]string{
	0:  "TLS_FINGERPRINT_NONE",
	1:  "ANY_MALICIOUS_FINGERPRINT",
	2:  "ADWARE",
	3:  "ADWIND",
	4:  "DRIDEX",
	5:  "GOOTKIT",
	6:  "GOZI",
	7:  "JBIFROST",
	8:  "QUAKBOT",
	9:  "RANSOMWARE",
	10: "TROLDESH",
	11: "TOFSEE",
	12: "TORRENTLOCKER",
	13: "TRICKBOT",
}

var KnownTlsFingerprintClass_value = map[string]int32{
	"TLS_FINGERPRINT_NONE":      0,
	"ANY_MALICIOUS_FINGERPRINT": 1,
	"ADWARE":                    2,
	"ADWIND":                    3,
	"DRIDEX":                    4,
	"GOOTKIT":                   5,
	"GOZI":                      6,
	"JBIFROST":                  7,
	"QUAKBOT":                   8,
	"RANSOMWARE":                9,
	"TROLDESH":                  10,
	"TOFSEE":                    11,
	"TORRENTLOCKER":             12,
	"TRICKBOT":                  13,
}

func (KnownTlsFingerprintClass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{7}
}

// CountryCode
//
// x-displayName: "Country Code"
// ISO 3166 Aplpha-2 country codes
type CountryCode int32

const (
	// x-displayName: "None"
	COUNTRY_NONE CountryCode = 0
	// x-displayName: "Andorra"
	COUNTRY_AD CountryCode = 1
	// x-displayName: "United Arab Emirates"
	COUNTRY_AE CountryCode = 2
	// x-displayName: "Afghanistan"
	COUNTRY_AF CountryCode = 3
	// x-displayName: "Antigua and Barbuda"
	COUNTRY_AG CountryCode = 4
	// x-displayName: "Anguilla"
	COUNTRY_AI CountryCode = 5
	// x-displayName: "Albania"
	COUNTRY_AL CountryCode = 6
	// x-displayName: "Armenia"
	COUNTRY_AM CountryCode = 7
	// x-displayName: "Netherlands Antilles"
	COUNTRY_AN CountryCode = 8
	// x-displayName: "Angola"
	COUNTRY_AO CountryCode = 9
	// x-displayName: "Antarctica"
	COUNTRY_AQ CountryCode = 10
	// x-displayName: "Argentina"
	COUNTRY_AR CountryCode = 11
	// x-displayName: "American Samoa"
	COUNTRY_AS CountryCode = 12
	// x-displayName: "Austria"
	COUNTRY_AT CountryCode = 13
	// x-displayName: "Australia"
	COUNTRY_AU CountryCode = 14
	// x-displayName: "Aruba"
	COUNTRY_AW CountryCode = 15
	// x-displayName: "Aland Islands"
	COUNTRY_AX CountryCode = 16
	// x-displayName: "Azerbaijan"
	COUNTRY_AZ CountryCode = 17
	// x-displayName: "Bosnia and Herzegovina"
	COUNTRY_BA CountryCode = 18
	// x-displayName: "Barbados"
	COUNTRY_BB CountryCode = 19
	// x-displayName: "Bangladesh"
	COUNTRY_BD CountryCode = 20
	// x-displayName: "Belgium"
	COUNTRY_BE CountryCode = 21
	// x-displayName: "Burkina Faso"
	COUNTRY_BF CountryCode = 22
	// x-displayName: "Bulgaria"
	COUNTRY_BG CountryCode = 23
	// x-displayName: "Bahrain"
	COUNTRY_BH CountryCode = 24
	// x-displayName: "Burundi"
	COUNTRY_BI CountryCode = 25
	// x-displayName: "Benin"
	COUNTRY_BJ CountryCode = 26
	// x-displayName: "Saint Barthelemy"
	COUNTRY_BL CountryCode = 27
	// x-displayName: "Bermuda"
	COUNTRY_BM CountryCode = 28
	// x-displayName: "Brunei Darussalam"
	COUNTRY_BN CountryCode = 29
	// x-displayName: "Bolivia"
	COUNTRY_BO CountryCode = 30
	// x-displayName: "Saint Eustatius and Saba Bonaire"
	COUNTRY_BQ CountryCode = 31
	// x-displayName: "Brazil"
	COUNTRY_BR CountryCode = 32
	// x-displayName: "Bahamas"
	COUNTRY_BS CountryCode = 33
	// x-displayName: "Bhutan"
	COUNTRY_BT CountryCode = 34
	// x-displayName: "Bouvet Island"
	COUNTRY_BV CountryCode = 35
	// x-displayName: "Botswana"
	COUNTRY_BW CountryCode = 36
	// x-displayName: "Belarus"
	COUNTRY_BY CountryCode = 37
	// x-displayName: "Belize"
	COUNTRY_BZ CountryCode = 38
	// x-displayName: "Canada"
	COUNTRY_CA CountryCode = 39
	// x-displayName: "Cocos (Keeling) Islands"
	COUNTRY_CC CountryCode = 40
	// x-displayName: "The Democratic Republic of Congo"
	COUNTRY_CD CountryCode = 41
	// x-displayName: "Central African Republic"
	COUNTRY_CF CountryCode = 42
	// x-displayName: "Congo"
	COUNTRY_CG CountryCode = 43
	// x-displayName: "Switzerland"
	COUNTRY_CH CountryCode = 44
	// x-displayName: "Cote d'Ivoire"
	COUNTRY_CI CountryCode = 45
	// x-displayName: "Cook Islands"
	COUNTRY_CK CountryCode = 46
	// x-displayName: "Chile"
	COUNTRY_CL CountryCode = 47
	// x-displayName: "Cameroon"
	COUNTRY_CM CountryCode = 48
	// x-displayName: "China"
	COUNTRY_CN CountryCode = 49
	// x-displayName: "Colombia"
	COUNTRY_CO CountryCode = 50
	// x-displayName: "Costa Rica"
	COUNTRY_CR CountryCode = 51
	// x-displayName: "Serbia and Montenegro"
	COUNTRY_CS CountryCode = 52
	// x-displayName: "Cuba"
	COUNTRY_CU CountryCode = 53
	// x-displayName: "Cape Verde"
	COUNTRY_CV CountryCode = 54
	// x-displayName: "Curacao"
	COUNTRY_CW CountryCode = 55
	// x-displayName: "Christmas Island"
	COUNTRY_CX CountryCode = 56
	// x-displayName: "Cyprus"
	COUNTRY_CY CountryCode = 57
	// x-displayName: "Czechia"
	COUNTRY_CZ CountryCode = 58
	// x-displayName: "Germany"
	COUNTRY_DE CountryCode = 59
	// x-displayName: "Djibouti"
	COUNTRY_DJ CountryCode = 60
	// x-displayName: "Denmark"
	COUNTRY_DK CountryCode = 61
	// x-displayName: "Dominica"
	COUNTRY_DM CountryCode = 62
	// x-displayName: "Dominican Republic"
	COUNTRY_DO CountryCode = 63
	// x-displayName: "Algeria"
	COUNTRY_DZ CountryCode = 64
	// x-displayName: "Ecuador"
	COUNTRY_EC CountryCode = 65
	// x-displayName: "Estonia"
	COUNTRY_EE CountryCode = 66
	// x-displayName: "Egypt"
	COUNTRY_EG CountryCode = 67
	// x-displayName: "Western Sahara"
	COUNTRY_EH CountryCode = 68
	// x-displayName: "Eritrea"
	COUNTRY_ER CountryCode = 69
	// x-displayName: "Spain"
	COUNTRY_ES CountryCode = 70
	// x-displayName: "Ethiopia"
	COUNTRY_ET CountryCode = 71
	// x-displayName: "Finland"
	COUNTRY_FI CountryCode = 72
	// x-displayName: "Fiji"
	COUNTRY_FJ CountryCode = 73
	// x-displayName: "Falkland Islands (Malvinas)"
	COUNTRY_FK CountryCode = 74
	// x-displayName: "Federated States of Micronesia"
	COUNTRY_FM CountryCode = 75
	// x-displayName: "Faroe Islands"
	COUNTRY_FO CountryCode = 76
	// x-displayName: "France"
	COUNTRY_FR CountryCode = 77
	// x-displayName: "Gabon"
	COUNTRY_GA CountryCode = 78
	// x-displayName: "United Kingdom"
	COUNTRY_GB CountryCode = 79
	// x-displayName: "Grenada"
	COUNTRY_GD CountryCode = 80
	// x-displayName: "Georgia"
	COUNTRY_GE CountryCode = 81
	// x-displayName: "French Guiana"
	COUNTRY_GF CountryCode = 82
	// x-displayName: "Guernsey"
	COUNTRY_GG CountryCode = 83
	// x-displayName: "Ghana"
	COUNTRY_GH CountryCode = 84
	// x-displayName: "Gibraltar"
	COUNTRY_GI CountryCode = 85
	// x-displayName: "Greenland"
	COUNTRY_GL CountryCode = 86
	// x-displayName: "Gambia"
	COUNTRY_GM CountryCode = 87
	// x-displayName: "Guinea"
	COUNTRY_GN CountryCode = 88
	// x-displayName: "Guadeloupe"
	COUNTRY_GP CountryCode = 89
	// x-displayName: "Equatorial Guinea"
	COUNTRY_GQ CountryCode = 90
	// x-displayName: "Greece"
	COUNTRY_GR CountryCode = 91
	// x-displayName: "South Georgia & The South Sandwich Islands"
	COUNTRY_GS CountryCode = 92
	// x-displayName: "Guatemala"
	COUNTRY_GT CountryCode = 93
	// x-displayName: "Guam"
	COUNTRY_GU CountryCode = 94
	// x-displayName: "Guinea-Bissau"
	COUNTRY_GW CountryCode = 95
	// x-displayName: "Guyana"
	COUNTRY_GY CountryCode = 96
	// x-displayName: "Hong Kong"
	COUNTRY_HK CountryCode = 97
	// x-displayName: "Heard and Mc Donald Islands"
	COUNTRY_HM CountryCode = 98
	// x-displayName: "Honduras"
	COUNTRY_HN CountryCode = 99
	// x-displayName: "Croatia"
	COUNTRY_HR CountryCode = 100
	// x-displayName: "Haiti"
	COUNTRY_HT CountryCode = 101
	// x-displayName: "Hungary"
	COUNTRY_HU CountryCode = 102
	// x-displayName: "Indonesia"
	COUNTRY_ID CountryCode = 103
	// x-displayName: "Ireland"
	COUNTRY_IE CountryCode = 104
	// x-displayName: "Israel"
	COUNTRY_IL CountryCode = 105
	// x-displayName: "Isle of Man"
	COUNTRY_IM CountryCode = 106
	// x-displayName: "India"
	COUNTRY_IN CountryCode = 107
	// x-displayName: "British Indian Ocean Territory"
	COUNTRY_IO CountryCode = 108
	// x-displayName: "Iraq"
	COUNTRY_IQ CountryCode = 109
	// x-displayName: "Islamic Republic of Iran"
	COUNTRY_IR CountryCode = 110
	// x-displayName: "Iceland"
	COUNTRY_IS CountryCode = 111
	// x-displayName: "Italy"
	COUNTRY_IT CountryCode = 112
	// x-displayName: "Jersey"
	COUNTRY_JE CountryCode = 113
	// x-displayName: "Jamaica"
	COUNTRY_JM CountryCode = 114
	// x-displayName: "Jordan"
	COUNTRY_JO CountryCode = 115
	// x-displayName: "Japan"
	COUNTRY_JP CountryCode = 116
	// x-displayName: "Kenya"
	COUNTRY_KE CountryCode = 117
	// x-displayName: "Kyrgyzstan"
	COUNTRY_KG CountryCode = 118
	// x-displayName: "Cambodia"
	COUNTRY_KH CountryCode = 119
	// x-displayName: "Kiribati"
	COUNTRY_KI CountryCode = 120
	// x-displayName: "Comoros"
	COUNTRY_KM CountryCode = 121
	// x-displayName: "Saint Kitts & Nevis"
	COUNTRY_KN CountryCode = 122
	// x-displayName: "Democratic People's Republic of Korea"
	COUNTRY_KP CountryCode = 123
	// x-displayName: "Republic of Korea"
	COUNTRY_KR CountryCode = 124
	// x-displayName: "Kuwait"
	COUNTRY_KW CountryCode = 125
	// x-displayName: "Cayman Islands"
	COUNTRY_KY CountryCode = 126
	// x-displayName: "Kazakstan"
	COUNTRY_KZ CountryCode = 127
	// x-displayName: "People's Democratic Republic Lao"
	COUNTRY_LA CountryCode = 128
	// x-displayName: "Lebanon"
	COUNTRY_LB CountryCode = 129
	// x-displayName: "Saint Lucia"
	COUNTRY_LC CountryCode = 130
	// x-displayName: "Liechtenstein"
	COUNTRY_LI CountryCode = 131
	// x-displayName: "Sri Lanka"
	COUNTRY_LK CountryCode = 132
	// x-displayName: "Liberia"
	COUNTRY_LR CountryCode = 133
	// x-displayName: "Lesotho"
	COUNTRY_LS CountryCode = 134
	// x-displayName: "Lithuania"
	COUNTRY_LT CountryCode = 135
	// x-displayName: "Luxembourg"
	COUNTRY_LU CountryCode = 136
	// x-displayName: "Latvia"
	COUNTRY_LV CountryCode = 137
	// x-displayName: "Libyan Arab Jamahiriya"
	COUNTRY_LY CountryCode = 138
	// x-displayName: "Morocco"
	COUNTRY_MA CountryCode = 139
	// x-displayName: "Monaco"
	COUNTRY_MC CountryCode = 140
	// x-displayName: "Republic of Moldova"
	COUNTRY_MD CountryCode = 141
	// x-displayName: "Montenegro"
	COUNTRY_ME CountryCode = 142
	// x-displayName: "Saint Martin"
	COUNTRY_MF CountryCode = 143
	// x-displayName: "Madagascar"
	COUNTRY_MG CountryCode = 144
	// x-displayName: "Marshall Islands"
	COUNTRY_MH CountryCode = 145
	// x-displayName: "The Former Yugoslav Republic Of Macedonia"
	COUNTRY_MK CountryCode = 146
	// x-displayName: "Mali"
	COUNTRY_ML CountryCode = 147
	// x-displayName: "Myanmar"
	COUNTRY_MM CountryCode = 148
	// x-displayName: "Mongolia"
	COUNTRY_MN CountryCode = 149
	// x-displayName: "Macao"
	COUNTRY_MO CountryCode = 150
	// x-displayName: "Northern Mariana Islands"
	COUNTRY_MP CountryCode = 151
	// x-displayName: "Martinique"
	COUNTRY_MQ CountryCode = 152
	// x-displayName: "Mauritania"
	COUNTRY_MR CountryCode = 153
	// x-displayName: "Montserrat"
	COUNTRY_MS CountryCode = 154
	// x-displayName: "Malta"
	COUNTRY_MT CountryCode = 155
	// x-displayName: "Mauritius"
	COUNTRY_MU CountryCode = 156
	// x-displayName: "Maldives"
	COUNTRY_MV CountryCode = 157
	// x-displayName: "Malawi"
	COUNTRY_MW CountryCode = 158
	// x-displayName: "Mexico"
	COUNTRY_MX CountryCode = 159
	// x-displayName: "Malaysia"
	COUNTRY_MY CountryCode = 160
	// x-displayName: "Mozambique"
	COUNTRY_MZ CountryCode = 161
	// x-displayName: "Namibia"
	COUNTRY_NA CountryCode = 162
	// x-displayName: "New Caledonia"
	COUNTRY_NC CountryCode = 163
	// x-displayName: "Niger"
	COUNTRY_NE CountryCode = 164
	// x-displayName: "Norfolk Island"
	COUNTRY_NF CountryCode = 165
	// x-displayName: "Nigeria"
	COUNTRY_NG CountryCode = 166
	// x-displayName: "Nicaragua"
	COUNTRY_NI CountryCode = 167
	// x-displayName: "Netherlands"
	COUNTRY_NL CountryCode = 168
	// x-displayName: "Norway"
	COUNTRY_NO CountryCode = 169
	// x-displayName: "Nepal"
	COUNTRY_NP CountryCode = 170
	// x-displayName: "Nauru"
	COUNTRY_NR CountryCode = 171
	// x-displayName: "Niue"
	COUNTRY_NU CountryCode = 172
	// x-displayName: "New Zealand"
	COUNTRY_NZ CountryCode = 173
	// x-displayName: "Oman"
	COUNTRY_OM CountryCode = 174
	// x-displayName: "Panama"
	COUNTRY_PA CountryCode = 175
	// x-displayName: "Peru"
	COUNTRY_PE CountryCode = 176
	// x-displayName: "French Polynesia"
	COUNTRY_PF CountryCode = 177
	// x-displayName: "Papua New Guinea"
	COUNTRY_PG CountryCode = 178
	// x-displayName: "Philippines"
	COUNTRY_PH CountryCode = 179
	// x-displayName: "Pakistan"
	COUNTRY_PK CountryCode = 180
	// x-displayName: "Poland"
	COUNTRY_PL CountryCode = 181
	// x-displayName: "Saint Pierre and Miquelon"
	COUNTRY_PM CountryCode = 182
	// x-displayName: "Pitcairn"
	COUNTRY_PN CountryCode = 183
	// x-displayName: "Puerto Rico"
	COUNTRY_PR CountryCode = 184
	// x-displayName: "Palestinian Territory"
	COUNTRY_PS CountryCode = 185
	// x-displayName: "Portugal"
	COUNTRY_PT CountryCode = 186
	// x-displayName: "Palau"
	COUNTRY_PW CountryCode = 187
	// x-displayName: "Paraguay"
	COUNTRY_PY CountryCode = 188
	// x-displayName: "Qatar"
	COUNTRY_QA CountryCode = 189
	// x-displayName: "Reunion"
	COUNTRY_RE CountryCode = 190
	// x-displayName: "Romania"
	COUNTRY_RO CountryCode = 191
	// x-displayName: "Republic of Serbia"
	COUNTRY_RS CountryCode = 192
	// x-displayName: "Russia Federation"
	COUNTRY_RU CountryCode = 193
	// x-displayName: "Rwanda"
	COUNTRY_RW CountryCode = 194
	// x-displayName: "Saudi Arabia"
	COUNTRY_SA CountryCode = 195
	// x-displayName: "Solomon Islands"
	COUNTRY_SB CountryCode = 196
	// x-displayName: "Seychelles"
	COUNTRY_SC CountryCode = 197
	// x-displayName: "Sudan"
	COUNTRY_SD CountryCode = 198
	// x-displayName: "Sweden"
	COUNTRY_SE CountryCode = 199
	// x-displayName: "Singapore"
	COUNTRY_SG CountryCode = 200
	// x-displayName: "Saint Helena"
	COUNTRY_SH CountryCode = 201
	// x-displayName: "Slovenia"
	COUNTRY_SI CountryCode = 202
	// x-displayName: "Svalbard and Jan Mayen"
	COUNTRY_SJ CountryCode = 203
	// x-displayName: "Slovakia"
	COUNTRY_SK CountryCode = 204
	// x-displayName: "Sierra Leone"
	COUNTRY_SL CountryCode = 205
	// x-displayName: "San Marino"
	COUNTRY_SM CountryCode = 206
	// x-displayName: "Senegal"
	COUNTRY_SN CountryCode = 207
	// x-displayName: "Somalia"
	COUNTRY_SO CountryCode = 208
	// x-displayName: "Suriname"
	COUNTRY_SR CountryCode = 209
	// x-displayName: "South Sudan"
	COUNTRY_SS CountryCode = 210
	// x-displayName: "Sao Tome and Principe"
	COUNTRY_ST CountryCode = 211
	// x-displayName: "El Salvador"
	COUNTRY_SV CountryCode = 212
	// x-displayName: "Sint Maarten"
	COUNTRY_SX CountryCode = 213
	// x-displayName: "Syrian Arab Republic"
	COUNTRY_SY CountryCode = 214
	// x-displayName: "Swaziland"
	COUNTRY_SZ CountryCode = 215
	// x-displayName: "Turks and Caicos Islands"
	COUNTRY_TC CountryCode = 216
	// x-displayName: "Chad"
	COUNTRY_TD CountryCode = 217
	// x-displayName: "French Southern Territories"
	COUNTRY_TF CountryCode = 218
	// x-displayName: "Togo"
	COUNTRY_TG CountryCode = 219
	// x-displayName: "Thailand"
	COUNTRY_TH CountryCode = 220
	// x-displayName: "Tajikistan"
	COUNTRY_TJ CountryCode = 221
	// x-displayName: "Tokelau"
	COUNTRY_TK CountryCode = 222
	// x-displayName: "Timor-Leste"
	COUNTRY_TL CountryCode = 223
	// x-displayName: "Turkmenistan"
	COUNTRY_TM CountryCode = 224
	// x-displayName: "Tunisia"
	COUNTRY_TN CountryCode = 225
	// x-displayName: "Tonga"
	COUNTRY_TO CountryCode = 226
	// x-displayName: "Turkey"
	COUNTRY_TR CountryCode = 227
	// x-displayName: "Trinidad and Tobago"
	COUNTRY_TT CountryCode = 228
	// x-displayName: "Tuvalu"
	COUNTRY_TV CountryCode = 229
	// x-displayName: "Taiwan"
	COUNTRY_TW CountryCode = 230
	// x-displayName: "United Republic of Tanzania"
	COUNTRY_TZ CountryCode = 231
	// x-displayName: "Ukraine"
	COUNTRY_UA CountryCode = 232
	// x-displayName: "Uganda"
	COUNTRY_UG CountryCode = 233
	// x-displayName: "United States Minor Outlying Islands"
	COUNTRY_UM CountryCode = 234
	// x-displayName: "United States"
	COUNTRY_US CountryCode = 235
	// x-displayName: "Uruguay"
	COUNTRY_UY CountryCode = 236
	// x-displayName: "Uzbekistan"
	COUNTRY_UZ CountryCode = 237
	// x-displayName: "Holy See (Vatican City State)"
	COUNTRY_VA CountryCode = 238
	// x-displayName: "Saint Vincent and the Grenadines"
	COUNTRY_VC CountryCode = 239
	// x-displayName: "Venezuela"
	COUNTRY_VE CountryCode = 240
	// x-displayName: "British Virgin Islands"
	COUNTRY_VG CountryCode = 241
	// x-displayName: "U.S. Virgin Islands"
	COUNTRY_VI CountryCode = 242
	// x-displayName: "Vietnam"
	COUNTRY_VN CountryCode = 243
	// x-displayName: "Vanuatu"
	COUNTRY_VU CountryCode = 244
	// x-displayName: "Wallis and Futuna"
	COUNTRY_WF CountryCode = 245
	// x-displayName: "Samoa"
	COUNTRY_WS CountryCode = 246
	// x-displayName: "Kosovo"
	COUNTRY_XK CountryCode = 247
	// x-displayName: "Turkish Rep N Cyprus"
	COUNTRY_XT CountryCode = 248
	// x-displayName: "Yemen"
	COUNTRY_YE CountryCode = 249
	// x-displayName: "Mayotte"
	COUNTRY_YT CountryCode = 250
	// x-displayName: "South Africa"
	COUNTRY_ZA CountryCode = 251
	// x-displayName: "Zambia"
	COUNTRY_ZM CountryCode = 252
	// x-displayName: "Zimbabwe"
	COUNTRY_ZW CountryCode = 253
)

var CountryCode_name = map[int32]string{
	0:   "COUNTRY_NONE",
	1:   "COUNTRY_AD",
	2:   "COUNTRY_AE",
	3:   "COUNTRY_AF",
	4:   "COUNTRY_AG",
	5:   "COUNTRY_AI",
	6:   "COUNTRY_AL",
	7:   "COUNTRY_AM",
	8:   "COUNTRY_AN",
	9:   "COUNTRY_AO",
	10:  "COUNTRY_AQ",
	11:  "COUNTRY_AR",
	12:  "COUNTRY_AS",
	13:  "COUNTRY_AT",
	14:  "COUNTRY_AU",
	15:  "COUNTRY_AW",
	16:  "COUNTRY_AX",
	17:  "COUNTRY_AZ",
	18:  "COUNTRY_BA",
	19:  "COUNTRY_BB",
	20:  "COUNTRY_BD",
	21:  "COUNTRY_BE",
	22:  "COUNTRY_BF",
	23:  "COUNTRY_BG",
	24:  "COUNTRY_BH",
	25:  "COUNTRY_BI",
	26:  "COUNTRY_BJ",
	27:  "COUNTRY_BL",
	28:  "COUNTRY_BM",
	29:  "COUNTRY_BN",
	30:  "COUNTRY_BO",
	31:  "COUNTRY_BQ",
	32:  "COUNTRY_BR",
	33:  "COUNTRY_BS",
	34:  "COUNTRY_BT",
	35:  "COUNTRY_BV",
	36:  "COUNTRY_BW",
	37:  "COUNTRY_BY",
	38:  "COUNTRY_BZ",
	39:  "COUNTRY_CA",
	40:  "COUNTRY_CC",
	41:  "COUNTRY_CD",
	42:  "COUNTRY_CF",
	43:  "COUNTRY_CG",
	44:  "COUNTRY_CH",
	45:  "COUNTRY_CI",
	46:  "COUNTRY_CK",
	47:  "COUNTRY_CL",
	48:  "COUNTRY_CM",
	49:  "COUNTRY_CN",
	50:  "COUNTRY_CO",
	51:  "COUNTRY_CR",
	52:  "COUNTRY_CS",
	53:  "COUNTRY_CU",
	54:  "COUNTRY_CV",
	55:  "COUNTRY_CW",
	56:  "COUNTRY_CX",
	57:  "COUNTRY_CY",
	58:  "COUNTRY_CZ",
	59:  "COUNTRY_DE",
	60:  "COUNTRY_DJ",
	61:  "COUNTRY_DK",
	62:  "COUNTRY_DM",
	63:  "COUNTRY_DO",
	64:  "COUNTRY_DZ",
	65:  "COUNTRY_EC",
	66:  "COUNTRY_EE",
	67:  "COUNTRY_EG",
	68:  "COUNTRY_EH",
	69:  "COUNTRY_ER",
	70:  "COUNTRY_ES",
	71:  "COUNTRY_ET",
	72:  "COUNTRY_FI",
	73:  "COUNTRY_FJ",
	74:  "COUNTRY_FK",
	75:  "COUNTRY_FM",
	76:  "COUNTRY_FO",
	77:  "COUNTRY_FR",
	78:  "COUNTRY_GA",
	79:  "COUNTRY_GB",
	80:  "COUNTRY_GD",
	81:  "COUNTRY_GE",
	82:  "COUNTRY_GF",
	83:  "COUNTRY_GG",
	84:  "COUNTRY_GH",
	85:  "COUNTRY_GI",
	86:  "COUNTRY_GL",
	87:  "COUNTRY_GM",
	88:  "COUNTRY_GN",
	89:  "COUNTRY_GP",
	90:  "COUNTRY_GQ",
	91:  "COUNTRY_GR",
	92:  "COUNTRY_GS",
	93:  "COUNTRY_GT",
	94:  "COUNTRY_GU",
	95:  "COUNTRY_GW",
	96:  "COUNTRY_GY",
	97:  "COUNTRY_HK",
	98:  "COUNTRY_HM",
	99:  "COUNTRY_HN",
	100: "COUNTRY_HR",
	101: "COUNTRY_HT",
	102: "COUNTRY_HU",
	103: "COUNTRY_ID",
	104: "COUNTRY_IE",
	105: "COUNTRY_IL",
	106: "COUNTRY_IM",
	107: "COUNTRY_IN",
	108: "COUNTRY_IO",
	109: "COUNTRY_IQ",
	110: "COUNTRY_IR",
	111: "COUNTRY_IS",
	112: "COUNTRY_IT",
	113: "COUNTRY_JE",
	114: "COUNTRY_JM",
	115: "COUNTRY_JO",
	116: "COUNTRY_JP",
	117: "COUNTRY_KE",
	118: "COUNTRY_KG",
	119: "COUNTRY_KH",
	120: "COUNTRY_KI",
	121: "COUNTRY_KM",
	122: "COUNTRY_KN",
	123: "COUNTRY_KP",
	124: "COUNTRY_KR",
	125: "COUNTRY_KW",
	126: "COUNTRY_KY",
	127: "COUNTRY_KZ",
	128: "COUNTRY_LA",
	129: "COUNTRY_LB",
	130: "COUNTRY_LC",
	131: "COUNTRY_LI",
	132: "COUNTRY_LK",
	133: "COUNTRY_LR",
	134: "COUNTRY_LS",
	135: "COUNTRY_LT",
	136: "COUNTRY_LU",
	137: "COUNTRY_LV",
	138: "COUNTRY_LY",
	139: "COUNTRY_MA",
	140: "COUNTRY_MC",
	141: "COUNTRY_MD",
	142: "COUNTRY_ME",
	143: "COUNTRY_MF",
	144: "COUNTRY_MG",
	145: "COUNTRY_MH",
	146: "COUNTRY_MK",
	147: "COUNTRY_ML",
	148: "COUNTRY_MM",
	149: "COUNTRY_MN",
	150: "COUNTRY_MO",
	151: "COUNTRY_MP",
	152: "COUNTRY_MQ",
	153: "COUNTRY_MR",
	154: "COUNTRY_MS",
	155: "COUNTRY_MT",
	156: "COUNTRY_MU",
	157: "COUNTRY_MV",
	158: "COUNTRY_MW",
	159: "COUNTRY_MX",
	160: "COUNTRY_MY",
	161: "COUNTRY_MZ",
	162: "COUNTRY_NA",
	163: "COUNTRY_NC",
	164: "COUNTRY_NE",
	165: "COUNTRY_NF",
	166: "COUNTRY_NG",
	167: "COUNTRY_NI",
	168: "COUNTRY_NL",
	169: "COUNTRY_NO",
	170: "COUNTRY_NP",
	171: "COUNTRY_NR",
	172: "COUNTRY_NU",
	173: "COUNTRY_NZ",
	174: "COUNTRY_OM",
	175: "COUNTRY_PA",
	176: "COUNTRY_PE",
	177: "COUNTRY_PF",
	178: "COUNTRY_PG",
	179: "COUNTRY_PH",
	180: "COUNTRY_PK",
	181: "COUNTRY_PL",
	182: "COUNTRY_PM",
	183: "COUNTRY_PN",
	184: "COUNTRY_PR",
	185: "COUNTRY_PS",
	186: "COUNTRY_PT",
	187: "COUNTRY_PW",
	188: "COUNTRY_PY",
	189: "COUNTRY_QA",
	190: "COUNTRY_RE",
	191: "COUNTRY_RO",
	192: "COUNTRY_RS",
	193: "COUNTRY_RU",
	194: "COUNTRY_RW",
	195: "COUNTRY_SA",
	196: "COUNTRY_SB",
	197: "COUNTRY_SC",
	198: "COUNTRY_SD",
	199: "COUNTRY_SE",
	200: "COUNTRY_SG",
	201: "COUNTRY_SH",
	202: "COUNTRY_SI",
	203: "COUNTRY_SJ",
	204: "COUNTRY_SK",
	205: "COUNTRY_SL",
	206: "COUNTRY_SM",
	207: "COUNTRY_SN",
	208: "COUNTRY_SO",
	209: "COUNTRY_SR",
	210: "COUNTRY_SS",
	211: "COUNTRY_ST",
	212: "COUNTRY_SV",
	213: "COUNTRY_SX",
	214: "COUNTRY_SY",
	215: "COUNTRY_SZ",
	216: "COUNTRY_TC",
	217: "COUNTRY_TD",
	218: "COUNTRY_TF",
	219: "COUNTRY_TG",
	220: "COUNTRY_TH",
	221: "COUNTRY_TJ",
	222: "COUNTRY_TK",
	223: "COUNTRY_TL",
	224: "COUNTRY_TM",
	225: "COUNTRY_TN",
	226: "COUNTRY_TO",
	227: "COUNTRY_TR",
	228: "COUNTRY_TT",
	229: "COUNTRY_TV",
	230: "COUNTRY_TW",
	231: "COUNTRY_TZ",
	232: "COUNTRY_UA",
	233: "COUNTRY_UG",
	234: "COUNTRY_UM",
	235: "COUNTRY_US",
	236: "COUNTRY_UY",
	237: "COUNTRY_UZ",
	238: "COUNTRY_VA",
	239: "COUNTRY_VC",
	240: "COUNTRY_VE",
	241: "COUNTRY_VG",
	242: "COUNTRY_VI",
	243: "COUNTRY_VN",
	244: "COUNTRY_VU",
	245: "COUNTRY_WF",
	246: "COUNTRY_WS",
	247: "COUNTRY_XK",
	248: "COUNTRY_XT",
	249: "COUNTRY_YE",
	250: "COUNTRY_YT",
	251: "COUNTRY_ZA",
	252: "COUNTRY_ZM",
	253: "COUNTRY_ZW",
}

var CountryCode_value = map[string]int32{
	"COUNTRY_NONE": 0,
	"COUNTRY_AD":   1,
	"COUNTRY_AE":   2,
	"COUNTRY_AF":   3,
	"COUNTRY_AG":   4,
	"COUNTRY_AI":   5,
	"COUNTRY_AL":   6,
	"COUNTRY_AM":   7,
	"COUNTRY_AN":   8,
	"COUNTRY_AO":   9,
	"COUNTRY_AQ":   10,
	"COUNTRY_AR":   11,
	"COUNTRY_AS":   12,
	"COUNTRY_AT":   13,
	"COUNTRY_AU":   14,
	"COUNTRY_AW":   15,
	"COUNTRY_AX":   16,
	"COUNTRY_AZ":   17,
	"COUNTRY_BA":   18,
	"COUNTRY_BB":   19,
	"COUNTRY_BD":   20,
	"COUNTRY_BE":   21,
	"COUNTRY_BF":   22,
	"COUNTRY_BG":   23,
	"COUNTRY_BH":   24,
	"COUNTRY_BI":   25,
	"COUNTRY_BJ":   26,
	"COUNTRY_BL":   27,
	"COUNTRY_BM":   28,
	"COUNTRY_BN":   29,
	"COUNTRY_BO":   30,
	"COUNTRY_BQ":   31,
	"COUNTRY_BR":   32,
	"COUNTRY_BS":   33,
	"COUNTRY_BT":   34,
	"COUNTRY_BV":   35,
	"COUNTRY_BW":   36,
	"COUNTRY_BY":   37,
	"COUNTRY_BZ":   38,
	"COUNTRY_CA":   39,
	"COUNTRY_CC":   40,
	"COUNTRY_CD":   41,
	"COUNTRY_CF":   42,
	"COUNTRY_CG":   43,
	"COUNTRY_CH":   44,
	"COUNTRY_CI":   45,
	"COUNTRY_CK":   46,
	"COUNTRY_CL":   47,
	"COUNTRY_CM":   48,
	"COUNTRY_CN":   49,
	"COUNTRY_CO":   50,
	"COUNTRY_CR":   51,
	"COUNTRY_CS":   52,
	"COUNTRY_CU":   53,
	"COUNTRY_CV":   54,
	"COUNTRY_CW":   55,
	"COUNTRY_CX":   56,
	"COUNTRY_CY":   57,
	"COUNTRY_CZ":   58,
	"COUNTRY_DE":   59,
	"COUNTRY_DJ":   60,
	"COUNTRY_DK":   61,
	"COUNTRY_DM":   62,
	"COUNTRY_DO":   63,
	"COUNTRY_DZ":   64,
	"COUNTRY_EC":   65,
	"COUNTRY_EE":   66,
	"COUNTRY_EG":   67,
	"COUNTRY_EH":   68,
	"COUNTRY_ER":   69,
	"COUNTRY_ES":   70,
	"COUNTRY_ET":   71,
	"COUNTRY_FI":   72,
	"COUNTRY_FJ":   73,
	"COUNTRY_FK":   74,
	"COUNTRY_FM":   75,
	"COUNTRY_FO":   76,
	"COUNTRY_FR":   77,
	"COUNTRY_GA":   78,
	"COUNTRY_GB":   79,
	"COUNTRY_GD":   80,
	"COUNTRY_GE":   81,
	"COUNTRY_GF":   82,
	"COUNTRY_GG":   83,
	"COUNTRY_GH":   84,
	"COUNTRY_GI":   85,
	"COUNTRY_GL":   86,
	"COUNTRY_GM":   87,
	"COUNTRY_GN":   88,
	"COUNTRY_GP":   89,
	"COUNTRY_GQ":   90,
	"COUNTRY_GR":   91,
	"COUNTRY_GS":   92,
	"COUNTRY_GT":   93,
	"COUNTRY_GU":   94,
	"COUNTRY_GW":   95,
	"COUNTRY_GY":   96,
	"COUNTRY_HK":   97,
	"COUNTRY_HM":   98,
	"COUNTRY_HN":   99,
	"COUNTRY_HR":   100,
	"COUNTRY_HT":   101,
	"COUNTRY_HU":   102,
	"COUNTRY_ID":   103,
	"COUNTRY_IE":   104,
	"COUNTRY_IL":   105,
	"COUNTRY_IM":   106,
	"COUNTRY_IN":   107,
	"COUNTRY_IO":   108,
	"COUNTRY_IQ":   109,
	"COUNTRY_IR":   110,
	"COUNTRY_IS":   111,
	"COUNTRY_IT":   112,
	"COUNTRY_JE":   113,
	"COUNTRY_JM":   114,
	"COUNTRY_JO":   115,
	"COUNTRY_JP":   116,
	"COUNTRY_KE":   117,
	"COUNTRY_KG":   118,
	"COUNTRY_KH":   119,
	"COUNTRY_KI":   120,
	"COUNTRY_KM":   121,
	"COUNTRY_KN":   122,
	"COUNTRY_KP":   123,
	"COUNTRY_KR":   124,
	"COUNTRY_KW":   125,
	"COUNTRY_KY":   126,
	"COUNTRY_KZ":   127,
	"COUNTRY_LA":   128,
	"COUNTRY_LB":   129,
	"COUNTRY_LC":   130,
	"COUNTRY_LI":   131,
	"COUNTRY_LK":   132,
	"COUNTRY_LR":   133,
	"COUNTRY_LS":   134,
	"COUNTRY_LT":   135,
	"COUNTRY_LU":   136,
	"COUNTRY_LV":   137,
	"COUNTRY_LY":   138,
	"COUNTRY_MA":   139,
	"COUNTRY_MC":   140,
	"COUNTRY_MD":   141,
	"COUNTRY_ME":   142,
	"COUNTRY_MF":   143,
	"COUNTRY_MG":   144,
	"COUNTRY_MH":   145,
	"COUNTRY_MK":   146,
	"COUNTRY_ML":   147,
	"COUNTRY_MM":   148,
	"COUNTRY_MN":   149,
	"COUNTRY_MO":   150,
	"COUNTRY_MP":   151,
	"COUNTRY_MQ":   152,
	"COUNTRY_MR":   153,
	"COUNTRY_MS":   154,
	"COUNTRY_MT":   155,
	"COUNTRY_MU":   156,
	"COUNTRY_MV":   157,
	"COUNTRY_MW":   158,
	"COUNTRY_MX":   159,
	"COUNTRY_MY":   160,
	"COUNTRY_MZ":   161,
	"COUNTRY_NA":   162,
	"COUNTRY_NC":   163,
	"COUNTRY_NE":   164,
	"COUNTRY_NF":   165,
	"COUNTRY_NG":   166,
	"COUNTRY_NI":   167,
	"COUNTRY_NL":   168,
	"COUNTRY_NO":   169,
	"COUNTRY_NP":   170,
	"COUNTRY_NR":   171,
	"COUNTRY_NU":   172,
	"COUNTRY_NZ":   173,
	"COUNTRY_OM":   174,
	"COUNTRY_PA":   175,
	"COUNTRY_PE":   176,
	"COUNTRY_PF":   177,
	"COUNTRY_PG":   178,
	"COUNTRY_PH":   179,
	"COUNTRY_PK":   180,
	"COUNTRY_PL":   181,
	"COUNTRY_PM":   182,
	"COUNTRY_PN":   183,
	"COUNTRY_PR":   184,
	"COUNTRY_PS":   185,
	"COUNTRY_PT":   186,
	"COUNTRY_PW":   187,
	"COUNTRY_PY":   188,
	"COUNTRY_QA":   189,
	"COUNTRY_RE":   190,
	"COUNTRY_RO":   191,
	"COUNTRY_RS":   192,
	"COUNTRY_RU":   193,
	"COUNTRY_RW":   194,
	"COUNTRY_SA":   195,
	"COUNTRY_SB":   196,
	"COUNTRY_SC":   197,
	"COUNTRY_SD":   198,
	"COUNTRY_SE":   199,
	"COUNTRY_SG":   200,
	"COUNTRY_SH":   201,
	"COUNTRY_SI":   202,
	"COUNTRY_SJ":   203,
	"COUNTRY_SK":   204,
	"COUNTRY_SL":   205,
	"COUNTRY_SM":   206,
	"COUNTRY_SN":   207,
	"COUNTRY_SO":   208,
	"COUNTRY_SR":   209,
	"COUNTRY_SS":   210,
	"COUNTRY_ST":   211,
	"COUNTRY_SV":   212,
	"COUNTRY_SX":   213,
	"COUNTRY_SY":   214,
	"COUNTRY_SZ":   215,
	"COUNTRY_TC":   216,
	"COUNTRY_TD":   217,
	"COUNTRY_TF":   218,
	"COUNTRY_TG":   219,
	"COUNTRY_TH":   220,
	"COUNTRY_TJ":   221,
	"COUNTRY_TK":   222,
	"COUNTRY_TL":   223,
	"COUNTRY_TM":   224,
	"COUNTRY_TN":   225,
	"COUNTRY_TO":   226,
	"COUNTRY_TR":   227,
	"COUNTRY_TT":   228,
	"COUNTRY_TV":   229,
	"COUNTRY_TW":   230,
	"COUNTRY_TZ":   231,
	"COUNTRY_UA":   232,
	"COUNTRY_UG":   233,
	"COUNTRY_UM":   234,
	"COUNTRY_US":   235,
	"COUNTRY_UY":   236,
	"COUNTRY_UZ":   237,
	"COUNTRY_VA":   238,
	"COUNTRY_VC":   239,
	"COUNTRY_VE":   240,
	"COUNTRY_VG":   241,
	"COUNTRY_VI":   242,
	"COUNTRY_VN":   243,
	"COUNTRY_VU":   244,
	"COUNTRY_WF":   245,
	"COUNTRY_WS":   246,
	"COUNTRY_XK":   247,
	"COUNTRY_XT":   248,
	"COUNTRY_YE":   249,
	"COUNTRY_YT":   250,
	"COUNTRY_ZA":   251,
	"COUNTRY_ZM":   252,
	"COUNTRY_ZW":   253,
}

func (CountryCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{8}
}

// Rule Action
//
// x-displayName: "Rule Action"
// The rule action determines the disposition of the input request API. If a policy matches a rule with an ALLOW action, the processing of the request proceeds
// forward. If it matches a rule with a DENY action, the processing of the request is terminated and an appropriate message/code returned to the originator. If
// it matches a rule with a NEXT_POLICY_SET action, evaluation of the current policy set terminates and evaluation of the next policy set in the chain begins.
type RuleAction int32

const (
	// DENY
	//
	// x-displayName: "Deny"
	// Deny the request.
	DENY RuleAction = 0
	// ALLOW
	//
	// x-displayName: "Allow"
	// Allow the request to proceed.
	ALLOW RuleAction = 1
	// NEXT_POLICY_SET
	//
	// x-displayName: "Next Policy Set"
	// Terminate evaluation of the current policy set and begin evaluating the next policy set in the chain. Note that the evaluation of any remaining policies
	// in the current policy set is skipped.
	NEXT_POLICY_SET RuleAction = 2
	// NEXT_POLICY
	//
	// x-displayName: "Next Policy"
	// Terminate evaluation of the current policy and begin evaluating the next policy in the policy set. Note that the evaluation of any remaining rules in the
	// current policy is skipped.
	NEXT_POLICY RuleAction = 3
	// LAST_POLICY
	//
	// x-displayName: "Last Policy"
	// Terminate evaluation of the current policy and begin evaluating the last policy in the policy set. Note that the evaluation of any remaining rules in the
	// current policy is skipped.
	LAST_POLICY RuleAction = 4
	// GOTO_POLICY
	//
	// x-displayName: "Goto Policy"
	// Terminate evaluation of the current policy and begin evaluating a specific policy in the policy set. The policy is specified using the goto_policy field in
	// the rule and must be after the current policy in the policy set.
	GOTO_POLICY RuleAction = 5
)

var RuleAction_name = map[int32]string{
	0: "DENY",
	1: "ALLOW",
	2: "NEXT_POLICY_SET",
	3: "NEXT_POLICY",
	4: "LAST_POLICY",
	5: "GOTO_POLICY",
}

var RuleAction_value = map[string]int32{
	"DENY":            0,
	"ALLOW":           1,
	"NEXT_POLICY_SET": 2,
	"NEXT_POLICY":     3,
	"LAST_POLICY":     4,
	"GOTO_POLICY":     5,
}

func (RuleAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{9}
}

// Challenge Action
//
// x-displayName: "Challenge Action"
// The challenge options to use when a policy based challenge is configured.
type ChallengeAction int32

const (
	// DEFAULT_CHALLENGE
	//
	// x-displayName: "Default Challenge"
	// Default challenge.
	DEFAULT_CHALLENGE ChallengeAction = 0
	// ENABLE_JAVASCRIPT_CHALLENGE
	//
	// x-displayName: "Enable Javascript Challenge"
	// Enable javascript challenge.
	ENABLE_JAVASCRIPT_CHALLENGE ChallengeAction = 1
	// ENABLE_CAPTCHA_CHALLENGE
	//
	// x-displayName: "Enable Captcha Challenge"
	// Captcha challenge.
	ENABLE_CAPTCHA_CHALLENGE ChallengeAction = 2
	// DISABLE_CHALLENGE
	//
	// x-displayName: "Disable Challenge"
	// Disable challenge
	DISABLE_CHALLENGE ChallengeAction = 3
	// TEMPORARY_BLOCKING
	//
	// x-displayName: "Block Temporarily"
	// Block the user temporarily.
	TEMPORARY_BLOCKING ChallengeAction = 4
)

var ChallengeAction_name = map[int32]string{
	0: "DEFAULT_CHALLENGE",
	1: "ENABLE_JAVASCRIPT_CHALLENGE",
	2: "ENABLE_CAPTCHA_CHALLENGE",
	3: "DISABLE_CHALLENGE",
	4: "TEMPORARY_BLOCKING",
}

var ChallengeAction_value = map[string]int32{
	"DEFAULT_CHALLENGE":           0,
	"ENABLE_JAVASCRIPT_CHALLENGE": 1,
	"ENABLE_CAPTCHA_CHALLENGE":    2,
	"DISABLE_CHALLENGE":           3,
	"TEMPORARY_BLOCKING":          4,
}

func (ChallengeAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{10}
}

// AppTrafficType
//
// x-displayName: "App Traffic type"
// Application traffic type
type AppTrafficType int32

const (
	// WebTrafficType
	//
	// x-displayName: "Web Traffic"
	// Web application traffic type.
	WEB AppTrafficType = 0
	// MobileTrafficType
	//
	// x-displayName: "Mobile Traffic"
	// Mobile application traffic type.
	MOBILE AppTrafficType = 1
)

var AppTrafficType_name = map[int32]string{
	0: "WEB",
	1: "MOBILE",
}

var AppTrafficType_value = map[string]int32{
	"WEB":    0,
	"MOBILE": 1,
}

func (AppTrafficType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{11}
}

// HTMLPosition
//
// x-displayName: "HTML Position"
// Position of the HTML tag to insert in HTML document
type HTMLPosition int32

const (
	// x-displayName: "Beginning of HTML tag"
	// Beginning of HTML tag.
	BEGINNING HTMLPosition = 0
	// x-displayName: "End of HTML tag"
	// End of HTML tag.
	END HTMLPosition = 1
	// x-displayName: "Before HTML tag"
	// Before HTML tag.
	BEFORE HTMLPosition = 2
	// x-displayName: "After HTML tag"
	// After HTML tag.
	AFTER HTMLPosition = 3
)

var HTMLPosition_name = map[int32]string{
	0: "BEGINNING",
	1: "END",
	2: "BEFORE",
	3: "AFTER",
}

var HTMLPosition_value = map[string]int32{
	"BEGINNING": 0,
	"END":       1,
	"BEFORE":    2,
	"AFTER":     3,
}

func (HTMLPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{12}
}

// OpenAPI Validation Action
//
// x-displayName: "OpenAPI Validation Action"
// OpenAPI Validation Action Type
type OasValidationActionType int32

const (
	// OAS_NONE
	//
	// x-displayName: "No Operation"
	// Allow the request/response (don't validate OpenAPI specification)
	OAS_NONE OasValidationActionType = 0
	// OAS_REPORT_VIOLATION
	//
	// x-displayName: "Report Violation"
	// If OpenAPI violation occurs, allow the request/response and report it (API security event)
	OAS_REPORT_VIOLATION OasValidationActionType = 1
	// OAS_BLOCK_VIOLATION
	//
	// x-displayName: "Block Violation"
	// If OpenAPI violation occurs, block the request/response and report it (API security event)
	OAS_BLOCK_VIOLATION OasValidationActionType = 2
	// OAS_BLOCK
	//
	// x-displayName: "Block"
	// block the request/response and report it (API security event)
	OAS_BLOCK OasValidationActionType = 3
	// OAS_REPORT
	//
	// x-displayName: "Report"
	// allow the request/response and report it (API security event)
	OAS_REPORT OasValidationActionType = 4
)

var OasValidationActionType_name = map[int32]string{
	0: "OAS_NONE",
	1: "OAS_REPORT_VIOLATION",
	2: "OAS_BLOCK_VIOLATION",
	3: "OAS_BLOCK",
	4: "OAS_REPORT",
}

var OasValidationActionType_value = map[string]int32{
	"OAS_NONE":             0,
	"OAS_REPORT_VIOLATION": 1,
	"OAS_BLOCK_VIOLATION":  2,
	"OAS_BLOCK":            3,
	"OAS_REPORT":           4,
}

func (OasValidationActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{13}
}

// App Firewall Violation Context
//
// x-displayName: "App Firewall Violation Context"
// App Firewall violation context changes to be applied for this request
type AppFirewallViolationContext struct {
	// ViolationType
	//
	// x-displayName: "Violation Type"
	// x-example: "VIOL_MANDATORY_HEADER"
	// x-required
	ExcludeViolation app_firewall.AppFirewallViolationType `protobuf:"varint,1,opt,name=exclude_violation,json=excludeViolation,proto3,enum=ves.io.schema.app_firewall.AppFirewallViolationType" json:"exclude_violation,omitempty"`
	//Context
	//
	// x-displayName: "Context"
	// x-required
	Context DetectionContext `protobuf:"varint,2,opt,name=context,proto3,enum=ves.io.schema.policy.DetectionContext" json:"context,omitempty"`
	// Context Name
	//
	// x-displayName: "Context Name"
	// x-example: "example: user-agent for Header"
	// Relevant only for contexts: Header, Cookie and Parameter.
	// Name of the Context that the WAF Exclusion Rules will check.
	// Wildcard matching can be used by prefixing or suffixing the context name
	// with an wildcard asterisk (*).
	ContextName string `protobuf:"bytes,3,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
}

func (m *AppFirewallViolationContext) Reset()      { *m = AppFirewallViolationContext{} }
func (*AppFirewallViolationContext) ProtoMessage() {}
func (*AppFirewallViolationContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{0}
}
func (m *AppFirewallViolationContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFirewallViolationContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFirewallViolationContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFirewallViolationContext.Merge(m, src)
}
func (m *AppFirewallViolationContext) XXX_Size() int {
	return m.Size()
}
func (m *AppFirewallViolationContext) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFirewallViolationContext.DiscardUnknown(m)
}

var xxx_messageInfo_AppFirewallViolationContext proto.InternalMessageInfo

func (m *AppFirewallViolationContext) GetExcludeViolation() app_firewall.AppFirewallViolationType {
	if m != nil {
		return m.ExcludeViolation
	}
	return app_firewall.VIOL_NONE
}

func (m *AppFirewallViolationContext) GetContext() DetectionContext {
	if m != nil {
		return m.Context
	}
	return CONTEXT_ANY
}

func (m *AppFirewallViolationContext) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

// App Firewall Signature Context
//
// x-displayName: "App Firewall Signature Context"
// App Firewall signature context changes to be applied for this request
type AppFirewallSignatureContext struct {
	// SignatureID
	//
	// x-displayName: "SignatureID"
	// x-example: "10000001"
	// x-required
	// The allowed values for signature id are 0 and in the range of 200000001-299999999.
	// 0 implies that all signatures will be excluded for the specified context.
	SignatureId uint32 `protobuf:"varint,1,opt,name=signature_id,json=signatureId,proto3" json:"signature_id,omitempty"`
	//Context
	//
	// x-displayName: "Context"
	// x-required
	Context DetectionContext `protobuf:"varint,2,opt,name=context,proto3,enum=ves.io.schema.policy.DetectionContext" json:"context,omitempty"`
	// Context Name
	//
	// x-displayName: "Context Name"
	// x-example: "example: user-agent for Header"
	// Relevant only for contexts: Header, Cookie and Parameter.
	// Name of the Context that the WAF Exclusion Rules will check.
	// Wildcard matching can be used by prefixing or suffixing the context name
	// with an wildcard asterisk (*).
	ContextName string `protobuf:"bytes,3,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
}

func (m *AppFirewallSignatureContext) Reset()      { *m = AppFirewallSignatureContext{} }
func (*AppFirewallSignatureContext) ProtoMessage() {}
func (*AppFirewallSignatureContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{1}
}
func (m *AppFirewallSignatureContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFirewallSignatureContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFirewallSignatureContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFirewallSignatureContext.Merge(m, src)
}
func (m *AppFirewallSignatureContext) XXX_Size() int {
	return m.Size()
}
func (m *AppFirewallSignatureContext) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFirewallSignatureContext.DiscardUnknown(m)
}

var xxx_messageInfo_AppFirewallSignatureContext proto.InternalMessageInfo

func (m *AppFirewallSignatureContext) GetSignatureId() uint32 {
	if m != nil {
		return m.SignatureId
	}
	return 0
}

func (m *AppFirewallSignatureContext) GetContext() DetectionContext {
	if m != nil {
		return m.Context
	}
	return CONTEXT_ANY
}

func (m *AppFirewallSignatureContext) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

// App Firewall Attack Type Context
//
// x-displayName: "App Firewall Attack Type Context"
// App Firewall Attack Type context changes to be applied for this request
type AppFirewallAttackTypeContext struct {
	// AttackType
	//
	// x-displayName: "Attack Type"
	// x-example: "ATTACK_TYPE_SQL_INJECTION"
	// x-required
	ExcludeAttackType app_firewall.AttackType `protobuf:"varint,1,opt,name=exclude_attack_type,json=excludeAttackType,proto3,enum=ves.io.schema.app_firewall.AttackType" json:"exclude_attack_type,omitempty"`
	//Context
	//
	// x-displayName: "Context"
	// x-required
	Context DetectionContext `protobuf:"varint,2,opt,name=context,proto3,enum=ves.io.schema.policy.DetectionContext" json:"context,omitempty"`
	// Context Name
	//
	// x-displayName: "Context Name"
	// x-example: "example: user-agent for Header"
	// Relevant only for contexts: Header, Cookie and Parameter.
	// Name of the Context that the WAF Exclusion Rules will check.
	// Wildcard matching can be used by prefixing or suffixing the context name
	// with an wildcard asterisk (*).
	ContextName string `protobuf:"bytes,3,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
}

func (m *AppFirewallAttackTypeContext) Reset()      { *m = AppFirewallAttackTypeContext{} }
func (*AppFirewallAttackTypeContext) ProtoMessage() {}
func (*AppFirewallAttackTypeContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{2}
}
func (m *AppFirewallAttackTypeContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFirewallAttackTypeContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFirewallAttackTypeContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFirewallAttackTypeContext.Merge(m, src)
}
func (m *AppFirewallAttackTypeContext) XXX_Size() int {
	return m.Size()
}
func (m *AppFirewallAttackTypeContext) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFirewallAttackTypeContext.DiscardUnknown(m)
}

var xxx_messageInfo_AppFirewallAttackTypeContext proto.InternalMessageInfo

func (m *AppFirewallAttackTypeContext) GetExcludeAttackType() app_firewall.AttackType {
	if m != nil {
		return m.ExcludeAttackType
	}
	return app_firewall.ATTACK_TYPE_NONE
}

func (m *AppFirewallAttackTypeContext) GetContext() DetectionContext {
	if m != nil {
		return m.Context
	}
	return CONTEXT_ANY
}

func (m *AppFirewallAttackTypeContext) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

// Bot Name Context
//
// x-displayName: "Bot Name"
// Specifies bot to be excluded by its name.
type BotNameContext struct {
	// BotName
	//
	// x-displayName: "Bot Name"
	// x-required
	// x-example: "Hydra"
	BotName string `protobuf:"bytes,1,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
}

func (m *BotNameContext) Reset()      { *m = BotNameContext{} }
func (*BotNameContext) ProtoMessage() {}
func (*BotNameContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{3}
}
func (m *BotNameContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotNameContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BotNameContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotNameContext.Merge(m, src)
}
func (m *BotNameContext) XXX_Size() int {
	return m.Size()
}
func (m *BotNameContext) XXX_DiscardUnknown() {
	xxx_messageInfo_BotNameContext.DiscardUnknown(m)
}

var xxx_messageInfo_BotNameContext proto.InternalMessageInfo

func (m *BotNameContext) GetBotName() string {
	if m != nil {
		return m.BotName
	}
	return ""
}

// App Firewall Detection Control
//
// x-displayName: "App Firewall Detection Control"
// Define the list of Signature IDs, Violations, Attack Types and Bot Names that should be excluded from triggering on the defined match criteria.
type AppFirewallDetectionControl struct {
	// Exclude Signature Contexts
	//
	// x-displayName: "Signature IDs"
	// Signature IDs to be excluded for the defined match criteria
	ExcludeSignatureContexts []*AppFirewallSignatureContext `protobuf:"bytes,1,rep,name=exclude_signature_contexts,json=excludeSignatureContexts,proto3" json:"exclude_signature_contexts,omitempty"`
	// Exclude Violation Contexts
	//
	// x-displayName: "Violations"
	// Violations to be excluded for the defined match criteria
	ExcludeViolationContexts []*AppFirewallViolationContext `protobuf:"bytes,2,rep,name=exclude_violation_contexts,json=excludeViolationContexts,proto3" json:"exclude_violation_contexts,omitempty"`
	// Exclude Attack Types Contexts
	//
	// x-displayName: "Attack Types"
	// Attack Types to be excluded for the defined match criteria
	ExcludeAttackTypeContexts []*AppFirewallAttackTypeContext `protobuf:"bytes,3,rep,name=exclude_attack_type_contexts,json=excludeAttackTypeContexts,proto3" json:"exclude_attack_type_contexts,omitempty"`
	// Exclude Bot Names Contexts
	//
	// x-displayName: "Bot Names"
	// Bot Names to be excluded for the defined match criteria
	ExcludeBotNameContexts []*BotNameContext `protobuf:"bytes,4,rep,name=exclude_bot_name_contexts,json=excludeBotNameContexts,proto3" json:"exclude_bot_name_contexts,omitempty"`
}

func (m *AppFirewallDetectionControl) Reset()      { *m = AppFirewallDetectionControl{} }
func (*AppFirewallDetectionControl) ProtoMessage() {}
func (*AppFirewallDetectionControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{4}
}
func (m *AppFirewallDetectionControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFirewallDetectionControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFirewallDetectionControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFirewallDetectionControl.Merge(m, src)
}
func (m *AppFirewallDetectionControl) XXX_Size() int {
	return m.Size()
}
func (m *AppFirewallDetectionControl) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFirewallDetectionControl.DiscardUnknown(m)
}

var xxx_messageInfo_AppFirewallDetectionControl proto.InternalMessageInfo

func (m *AppFirewallDetectionControl) GetExcludeSignatureContexts() []*AppFirewallSignatureContext {
	if m != nil {
		return m.ExcludeSignatureContexts
	}
	return nil
}

func (m *AppFirewallDetectionControl) GetExcludeViolationContexts() []*AppFirewallViolationContext {
	if m != nil {
		return m.ExcludeViolationContexts
	}
	return nil
}

func (m *AppFirewallDetectionControl) GetExcludeAttackTypeContexts() []*AppFirewallAttackTypeContext {
	if m != nil {
		return m.ExcludeAttackTypeContexts
	}
	return nil
}

func (m *AppFirewallDetectionControl) GetExcludeBotNameContexts() []*BotNameContext {
	if m != nil {
		return m.ExcludeBotNameContexts
	}
	return nil
}

// Data Guard Control
//
// x-displayName: "Data Guard Control"
// Data Guard changes to be applied for this request
type DataGuardControl struct {
	// Set BD Policy name
	//
	// x-displayName: "Policy Name"
	// x-example: "value"
	// Sets the BD Policy to use
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (m *DataGuardControl) Reset()      { *m = DataGuardControl{} }
func (*DataGuardControl) ProtoMessage() {}
func (*DataGuardControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{5}
}
func (m *DataGuardControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataGuardControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DataGuardControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataGuardControl.Merge(m, src)
}
func (m *DataGuardControl) XXX_Size() int {
	return m.Size()
}
func (m *DataGuardControl) XXX_DiscardUnknown() {
	xxx_messageInfo_DataGuardControl.DiscardUnknown(m)
}

var xxx_messageInfo_DataGuardControl proto.InternalMessageInfo

func (m *DataGuardControl) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

// Bot Action
//
// x-displayName: "Bot Action"
// Modify Bot protection behavior for a matching request. The modification could be to entirely skip Bot processing.
type BotAction struct {
	// Select Bot Action Type
	//
	// x-displayName: "Select Bot Action Type"
	// x-required
	//
	// Types that are valid to be assigned to ActionType:
	//	*BotAction_None
	//	*BotAction_BotSkipProcessing
	ActionType isBotAction_ActionType `protobuf_oneof:"action_type"`
}

func (m *BotAction) Reset()      { *m = BotAction{} }
func (*BotAction) ProtoMessage() {}
func (*BotAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{6}
}
func (m *BotAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BotAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotAction.Merge(m, src)
}
func (m *BotAction) XXX_Size() int {
	return m.Size()
}
func (m *BotAction) XXX_DiscardUnknown() {
	xxx_messageInfo_BotAction.DiscardUnknown(m)
}

var xxx_messageInfo_BotAction proto.InternalMessageInfo

type isBotAction_ActionType interface {
	isBotAction_ActionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BotAction_None struct {
	None *schema.Empty `protobuf:"bytes,2,opt,name=none,proto3,oneof" json:"none,omitempty"`
}
type BotAction_BotSkipProcessing struct {
	BotSkipProcessing *schema.Empty `protobuf:"bytes,3,opt,name=bot_skip_processing,json=botSkipProcessing,proto3,oneof" json:"bot_skip_processing,omitempty"`
}

func (*BotAction_None) isBotAction_ActionType()              {}
func (*BotAction_BotSkipProcessing) isBotAction_ActionType() {}

func (m *BotAction) GetActionType() isBotAction_ActionType {
	if m != nil {
		return m.ActionType
	}
	return nil
}

func (m *BotAction) GetNone() *schema.Empty {
	if x, ok := m.GetActionType().(*BotAction_None); ok {
		return x.None
	}
	return nil
}

func (m *BotAction) GetBotSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionType().(*BotAction_BotSkipProcessing); ok {
		return x.BotSkipProcessing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BotAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BotAction_None)(nil),
		(*BotAction_BotSkipProcessing)(nil),
	}
}

// Select Modification Action
//
// x-displayName: "Select Modification Action"
// Modify behavior for a matching request. The modification could be to entirely skip processing.
type ModifyAction struct {
	// Select Action Type
	//
	// x-displayName: "Select Action Type"
	// x-required
	// Select whether to modify the action for the matching request
	//
	// Types that are valid to be assigned to ActionType:
	//	*ModifyAction_Default
	//	*ModifyAction_SkipProcessing
	ActionType isModifyAction_ActionType `protobuf_oneof:"action_type"`
}

func (m *ModifyAction) Reset()      { *m = ModifyAction{} }
func (*ModifyAction) ProtoMessage() {}
func (*ModifyAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{7}
}
func (m *ModifyAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModifyAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyAction.Merge(m, src)
}
func (m *ModifyAction) XXX_Size() int {
	return m.Size()
}
func (m *ModifyAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyAction.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyAction proto.InternalMessageInfo

type isModifyAction_ActionType interface {
	isModifyAction_ActionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ModifyAction_Default struct {
	Default *schema.Empty `protobuf:"bytes,2,opt,name=default,proto3,oneof" json:"default,omitempty"`
}
type ModifyAction_SkipProcessing struct {
	SkipProcessing *schema.Empty `protobuf:"bytes,3,opt,name=skip_processing,json=skipProcessing,proto3,oneof" json:"skip_processing,omitempty"`
}

func (*ModifyAction_Default) isModifyAction_ActionType()        {}
func (*ModifyAction_SkipProcessing) isModifyAction_ActionType() {}

func (m *ModifyAction) GetActionType() isModifyAction_ActionType {
	if m != nil {
		return m.ActionType
	}
	return nil
}

func (m *ModifyAction) GetDefault() *schema.Empty {
	if x, ok := m.GetActionType().(*ModifyAction_Default); ok {
		return x.Default
	}
	return nil
}

func (m *ModifyAction) GetSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionType().(*ModifyAction_SkipProcessing); ok {
		return x.SkipProcessing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ModifyAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ModifyAction_Default)(nil),
		(*ModifyAction_SkipProcessing)(nil),
	}
}

// App Firewall Action
//
// x-displayName: "App Firewall Action"
// Modify App Firewall behavior for a matching request. The modification could either be to entirely skip firewall processing or to customize the firewall rules
// to be applied as defined by App Firewall Rule Control settings.
type WafAction struct {
	// Select WAF Action Type
	//
	// x-displayName: "Select App Firewall Action Type"
	// x-required
	// Select Application Firewall action, skip WAF processing or skip rules
	//
	// Types that are valid to be assigned to ActionType:
	//	*WafAction_None
	//	*WafAction_WafSkipProcessing
	//	*WafAction_WafInMonitoringMode
	//	*WafAction_AppFirewallDetectionControl
	//	*WafAction_DataGuardControl
	//	*WafAction_JwtValidation
	//	*WafAction_JwtClaimsValidation
	ActionType isWafAction_ActionType `protobuf_oneof:"action_type"`
}

func (m *WafAction) Reset()      { *m = WafAction{} }
func (*WafAction) ProtoMessage() {}
func (*WafAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{8}
}
func (m *WafAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WafAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WafAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WafAction.Merge(m, src)
}
func (m *WafAction) XXX_Size() int {
	return m.Size()
}
func (m *WafAction) XXX_DiscardUnknown() {
	xxx_messageInfo_WafAction.DiscardUnknown(m)
}

var xxx_messageInfo_WafAction proto.InternalMessageInfo

type isWafAction_ActionType interface {
	isWafAction_ActionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WafAction_None struct {
	None *schema.Empty `protobuf:"bytes,3,opt,name=none,proto3,oneof" json:"none,omitempty"`
}
type WafAction_WafSkipProcessing struct {
	WafSkipProcessing *schema.Empty `protobuf:"bytes,1,opt,name=waf_skip_processing,json=wafSkipProcessing,proto3,oneof" json:"waf_skip_processing,omitempty"`
}
type WafAction_WafInMonitoringMode struct {
	WafInMonitoringMode *schema.Empty `protobuf:"bytes,6,opt,name=waf_in_monitoring_mode,json=wafInMonitoringMode,proto3,oneof" json:"waf_in_monitoring_mode,omitempty"`
}
type WafAction_AppFirewallDetectionControl struct {
	AppFirewallDetectionControl *AppFirewallDetectionControl `protobuf:"bytes,7,opt,name=app_firewall_detection_control,json=appFirewallDetectionControl,proto3,oneof" json:"app_firewall_detection_control,omitempty"`
}
type WafAction_DataGuardControl struct {
	DataGuardControl *DataGuardControl `protobuf:"bytes,8,opt,name=data_guard_control,json=dataGuardControl,proto3,oneof" json:"data_guard_control,omitempty"`
}
type WafAction_JwtValidation struct {
	JwtValidation *schema.Empty `protobuf:"bytes,9,opt,name=jwt_validation,json=jwtValidation,proto3,oneof" json:"jwt_validation,omitempty"`
}
type WafAction_JwtClaimsValidation struct {
	JwtClaimsValidation *schema.Empty `protobuf:"bytes,10,opt,name=jwt_claims_validation,json=jwtClaimsValidation,proto3,oneof" json:"jwt_claims_validation,omitempty"`
}

func (*WafAction_None) isWafAction_ActionType()                        {}
func (*WafAction_WafSkipProcessing) isWafAction_ActionType()           {}
func (*WafAction_WafInMonitoringMode) isWafAction_ActionType()         {}
func (*WafAction_AppFirewallDetectionControl) isWafAction_ActionType() {}
func (*WafAction_DataGuardControl) isWafAction_ActionType()            {}
func (*WafAction_JwtValidation) isWafAction_ActionType()               {}
func (*WafAction_JwtClaimsValidation) isWafAction_ActionType()         {}

func (m *WafAction) GetActionType() isWafAction_ActionType {
	if m != nil {
		return m.ActionType
	}
	return nil
}

func (m *WafAction) GetNone() *schema.Empty {
	if x, ok := m.GetActionType().(*WafAction_None); ok {
		return x.None
	}
	return nil
}

func (m *WafAction) GetWafSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionType().(*WafAction_WafSkipProcessing); ok {
		return x.WafSkipProcessing
	}
	return nil
}

func (m *WafAction) GetWafInMonitoringMode() *schema.Empty {
	if x, ok := m.GetActionType().(*WafAction_WafInMonitoringMode); ok {
		return x.WafInMonitoringMode
	}
	return nil
}

func (m *WafAction) GetAppFirewallDetectionControl() *AppFirewallDetectionControl {
	if x, ok := m.GetActionType().(*WafAction_AppFirewallDetectionControl); ok {
		return x.AppFirewallDetectionControl
	}
	return nil
}

func (m *WafAction) GetDataGuardControl() *DataGuardControl {
	if x, ok := m.GetActionType().(*WafAction_DataGuardControl); ok {
		return x.DataGuardControl
	}
	return nil
}

func (m *WafAction) GetJwtValidation() *schema.Empty {
	if x, ok := m.GetActionType().(*WafAction_JwtValidation); ok {
		return x.JwtValidation
	}
	return nil
}

func (m *WafAction) GetJwtClaimsValidation() *schema.Empty {
	if x, ok := m.GetActionType().(*WafAction_JwtClaimsValidation); ok {
		return x.JwtClaimsValidation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WafAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WafAction_None)(nil),
		(*WafAction_WafSkipProcessing)(nil),
		(*WafAction_WafInMonitoringMode)(nil),
		(*WafAction_AppFirewallDetectionControl)(nil),
		(*WafAction_DataGuardControl)(nil),
		(*WafAction_JwtValidation)(nil),
		(*WafAction_JwtClaimsValidation)(nil),
	}
}

// ContentRewriteAction
//
// x-displayName: "Content Rewrite Action"
// Rewrite HTML response action to insert HTML content such as Javascript <script> tags into the HTML document
type ContentRewriteAction struct {
	// Insert Content
	//
	// x-displayName: "HTML Content to insert"
	// x-example: "value"
	// HTML content to insert.
	InsertContent string `protobuf:"bytes,1,opt,name=insert_content,json=insertContent,proto3" json:"insert_content,omitempty"`
	// Element selector
	//
	// x-displayName: "Element selector to rewrite"
	// x-example: "value"
	// x-required
	// Element selector to insert into.
	ElementSelector string `protobuf:"bytes,2,opt,name=element_selector,json=elementSelector,proto3" json:"element_selector,omitempty"`
	// Position
	//
	// x-displayName: "HTML position"
	// Position of HTML content to be inserted within HTML tag.
	Position HTMLPosition `protobuf:"varint,3,opt,name=position,proto3,enum=ves.io.schema.policy.HTMLPosition" json:"position,omitempty"`
	// Inserted types
	//
	// x-displayName: "Inserted types"
	// Inserted types of security configuration like Bot Defense, Client Side Defense.
	InsertedTypes map[string]bool `protobuf:"bytes,4,rep,name=inserted_types,json=insertedTypes,proto3" json:"inserted_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ContentRewriteAction) Reset()      { *m = ContentRewriteAction{} }
func (*ContentRewriteAction) ProtoMessage() {}
func (*ContentRewriteAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{9}
}
func (m *ContentRewriteAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentRewriteAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContentRewriteAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentRewriteAction.Merge(m, src)
}
func (m *ContentRewriteAction) XXX_Size() int {
	return m.Size()
}
func (m *ContentRewriteAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentRewriteAction.DiscardUnknown(m)
}

var xxx_messageInfo_ContentRewriteAction proto.InternalMessageInfo

func (m *ContentRewriteAction) GetInsertContent() string {
	if m != nil {
		return m.InsertContent
	}
	return ""
}

func (m *ContentRewriteAction) GetElementSelector() string {
	if m != nil {
		return m.ElementSelector
	}
	return ""
}

func (m *ContentRewriteAction) GetPosition() HTMLPosition {
	if m != nil {
		return m.Position
	}
	return BEGINNING
}

func (m *ContentRewriteAction) GetInsertedTypes() map[string]bool {
	if m != nil {
		return m.InsertedTypes
	}
	return nil
}

// ShapeProtectedEndpointAction
//
// x-displayName: "Protected Endpoint Action"
// Protected Endpoint Action
type ShapeProtectedEndpointAction struct {
	// Application traffic type
	//
	// x-displayName: "Traffic type"
	// x-required
	// Traffic type
	AppTrafficType AppTrafficType `protobuf:"varint,1,opt,name=app_traffic_type,json=appTrafficType,proto3,enum=ves.io.schema.policy.AppTrafficType" json:"app_traffic_type,omitempty"`
	// Mitigation
	//
	// x-displayName: "Mitigation"
	// x-required
	// Mitigation action for protected endpoint
	Mitigation *ShapeBotMitigationAction `protobuf:"bytes,2,opt,name=mitigation,proto3" json:"mitigation,omitempty"`
	// Web scraping
	//
	// x-displayName: "Web scraping"
	// x-required
	// Web scraping protection enabled for protected endpoint
	WebScraping bool `protobuf:"varint,3,opt,name=web_scraping,json=webScraping,proto3" json:"web_scraping,omitempty"`
	// Flow label
	//
	// x-displayName: "Flow Label"
	// x-example: "Flight.CheckIn"
	// x-required
	// Flow label
	FlowLabel string `protobuf:"bytes,4,opt,name=flow_label,json=flowLabel,proto3" json:"flow_label,omitempty"`
	// Transaction Result
	//
	// x-displayName: "Transaction Result"
	// Success/failure Criteria for transaction result
	TransactionResult *schema.BotDefenseTransactionResultType `protobuf:"bytes,5,opt,name=transaction_result,json=transactionResult,proto3" json:"transaction_result,omitempty"`
	// GoodBot
	//
	// x-displayName: "Good bot"
	// x-required
	// Good bot
	AllowGoodbot bool `protobuf:"varint,7,opt,name=allow_goodbot,json=allowGoodbot,proto3" json:"allow_goodbot,omitempty"`
}

func (m *ShapeProtectedEndpointAction) Reset()      { *m = ShapeProtectedEndpointAction{} }
func (*ShapeProtectedEndpointAction) ProtoMessage() {}
func (*ShapeProtectedEndpointAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{10}
}
func (m *ShapeProtectedEndpointAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeProtectedEndpointAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeProtectedEndpointAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeProtectedEndpointAction.Merge(m, src)
}
func (m *ShapeProtectedEndpointAction) XXX_Size() int {
	return m.Size()
}
func (m *ShapeProtectedEndpointAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeProtectedEndpointAction.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeProtectedEndpointAction proto.InternalMessageInfo

func (m *ShapeProtectedEndpointAction) GetAppTrafficType() AppTrafficType {
	if m != nil {
		return m.AppTrafficType
	}
	return WEB
}

func (m *ShapeProtectedEndpointAction) GetMitigation() *ShapeBotMitigationAction {
	if m != nil {
		return m.Mitigation
	}
	return nil
}

func (m *ShapeProtectedEndpointAction) GetWebScraping() bool {
	if m != nil {
		return m.WebScraping
	}
	return false
}

func (m *ShapeProtectedEndpointAction) GetFlowLabel() string {
	if m != nil {
		return m.FlowLabel
	}
	return ""
}

func (m *ShapeProtectedEndpointAction) GetTransactionResult() *schema.BotDefenseTransactionResultType {
	if m != nil {
		return m.TransactionResult
	}
	return nil
}

func (m *ShapeProtectedEndpointAction) GetAllowGoodbot() bool {
	if m != nil {
		return m.AllowGoodbot
	}
	return false
}

// ShapeBotMitigationAction
//
// x-displayName: "Bot Mitigation Action"
// Modify Bot Defense behavior for a matching request.
type ShapeBotMitigationAction struct {
	// action_type
	//
	// x-displayName: "Select Bot Mitigation action"
	// Mitigation action.
	//
	// Types that are valid to be assigned to ActionType:
	//	*ShapeBotMitigationAction_None
	//	*ShapeBotMitigationAction_Block
	//	*ShapeBotMitigationAction_Redirect
	//	*ShapeBotMitigationAction_Flag
	ActionType isShapeBotMitigationAction_ActionType `protobuf_oneof:"action_type"`
}

func (m *ShapeBotMitigationAction) Reset()      { *m = ShapeBotMitigationAction{} }
func (*ShapeBotMitigationAction) ProtoMessage() {}
func (*ShapeBotMitigationAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{11}
}
func (m *ShapeBotMitigationAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotMitigationAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotMitigationAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotMitigationAction.Merge(m, src)
}
func (m *ShapeBotMitigationAction) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotMitigationAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotMitigationAction.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotMitigationAction proto.InternalMessageInfo

type isShapeBotMitigationAction_ActionType interface {
	isShapeBotMitigationAction_ActionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeBotMitigationAction_None struct {
	None *schema.Empty `protobuf:"bytes,2,opt,name=none,proto3,oneof" json:"none,omitempty"`
}
type ShapeBotMitigationAction_Block struct {
	Block *ShapeBotBlockMitigationActionType `protobuf:"bytes,3,opt,name=block,proto3,oneof" json:"block,omitempty"`
}
type ShapeBotMitigationAction_Redirect struct {
	Redirect *ShapeBotRedirectMitigationActionType `protobuf:"bytes,4,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
}
type ShapeBotMitigationAction_Flag struct {
	Flag *ShapeBotFlagMitigationActionChoiceType `protobuf:"bytes,5,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
}

func (*ShapeBotMitigationAction_None) isShapeBotMitigationAction_ActionType()     {}
func (*ShapeBotMitigationAction_Block) isShapeBotMitigationAction_ActionType()    {}
func (*ShapeBotMitigationAction_Redirect) isShapeBotMitigationAction_ActionType() {}
func (*ShapeBotMitigationAction_Flag) isShapeBotMitigationAction_ActionType()     {}

func (m *ShapeBotMitigationAction) GetActionType() isShapeBotMitigationAction_ActionType {
	if m != nil {
		return m.ActionType
	}
	return nil
}

func (m *ShapeBotMitigationAction) GetNone() *schema.Empty {
	if x, ok := m.GetActionType().(*ShapeBotMitigationAction_None); ok {
		return x.None
	}
	return nil
}

func (m *ShapeBotMitigationAction) GetBlock() *ShapeBotBlockMitigationActionType {
	if x, ok := m.GetActionType().(*ShapeBotMitigationAction_Block); ok {
		return x.Block
	}
	return nil
}

func (m *ShapeBotMitigationAction) GetRedirect() *ShapeBotRedirectMitigationActionType {
	if x, ok := m.GetActionType().(*ShapeBotMitigationAction_Redirect); ok {
		return x.Redirect
	}
	return nil
}

func (m *ShapeBotMitigationAction) GetFlag() *ShapeBotFlagMitigationActionChoiceType {
	if x, ok := m.GetActionType().(*ShapeBotMitigationAction_Flag); ok {
		return x.Flag
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeBotMitigationAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeBotMitigationAction_None)(nil),
		(*ShapeBotMitigationAction_Block)(nil),
		(*ShapeBotMitigationAction_Redirect)(nil),
		(*ShapeBotMitigationAction_Flag)(nil),
	}
}

// ShapeBotFlagMitigationActionChoiceType
//
// x-displayName: "Select Flag Bot Mitigation Action"
// Flag mitigation action.
type ShapeBotFlagMitigationActionChoiceType struct {
	// send_headers_choice
	//
	// x-displayName: "Include Mitigation Headers"
	// Flag mitigation headers.
	//
	// Types that are valid to be assigned to SendHeadersChoice:
	//	*ShapeBotFlagMitigationActionChoiceType_NoHeaders
	//	*ShapeBotFlagMitigationActionChoiceType_AppendHeaders
	SendHeadersChoice isShapeBotFlagMitigationActionChoiceType_SendHeadersChoice `protobuf_oneof:"send_headers_choice"`
}

func (m *ShapeBotFlagMitigationActionChoiceType) Reset() {
	*m = ShapeBotFlagMitigationActionChoiceType{}
}
func (*ShapeBotFlagMitigationActionChoiceType) ProtoMessage() {}
func (*ShapeBotFlagMitigationActionChoiceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{12}
}
func (m *ShapeBotFlagMitigationActionChoiceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotFlagMitigationActionChoiceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotFlagMitigationActionChoiceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotFlagMitigationActionChoiceType.Merge(m, src)
}
func (m *ShapeBotFlagMitigationActionChoiceType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotFlagMitigationActionChoiceType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotFlagMitigationActionChoiceType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotFlagMitigationActionChoiceType proto.InternalMessageInfo

type isShapeBotFlagMitigationActionChoiceType_SendHeadersChoice interface {
	isShapeBotFlagMitigationActionChoiceType_SendHeadersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeBotFlagMitigationActionChoiceType_NoHeaders struct {
	NoHeaders *schema.Empty `protobuf:"bytes,2,opt,name=no_headers,json=noHeaders,proto3,oneof" json:"no_headers,omitempty"`
}
type ShapeBotFlagMitigationActionChoiceType_AppendHeaders struct {
	AppendHeaders *ShapeBotFlagMitigationActionType `protobuf:"bytes,3,opt,name=append_headers,json=appendHeaders,proto3,oneof" json:"append_headers,omitempty"`
}

func (*ShapeBotFlagMitigationActionChoiceType_NoHeaders) isShapeBotFlagMitigationActionChoiceType_SendHeadersChoice() {
}
func (*ShapeBotFlagMitigationActionChoiceType_AppendHeaders) isShapeBotFlagMitigationActionChoiceType_SendHeadersChoice() {
}

func (m *ShapeBotFlagMitigationActionChoiceType) GetSendHeadersChoice() isShapeBotFlagMitigationActionChoiceType_SendHeadersChoice {
	if m != nil {
		return m.SendHeadersChoice
	}
	return nil
}

func (m *ShapeBotFlagMitigationActionChoiceType) GetNoHeaders() *schema.Empty {
	if x, ok := m.GetSendHeadersChoice().(*ShapeBotFlagMitigationActionChoiceType_NoHeaders); ok {
		return x.NoHeaders
	}
	return nil
}

func (m *ShapeBotFlagMitigationActionChoiceType) GetAppendHeaders() *ShapeBotFlagMitigationActionType {
	if x, ok := m.GetSendHeadersChoice().(*ShapeBotFlagMitigationActionChoiceType_AppendHeaders); ok {
		return x.AppendHeaders
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeBotFlagMitigationActionChoiceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeBotFlagMitigationActionChoiceType_NoHeaders)(nil),
		(*ShapeBotFlagMitigationActionChoiceType_AppendHeaders)(nil),
	}
}

// ShapeBotFlagMitigationActionType
//
// x-displayName: "Append Flag Mitigation Headers"
// Append flag mitigation headers to forwarded request.
type ShapeBotFlagMitigationActionType struct {
	// inference_header_name
	//
	// x-displayName: "Inference Header Name"
	// x-example: "Bot-Inference"
	// x-required
	// A case-insensitive HTTP header name.
	InferenceHeaderName string `protobuf:"bytes,1,opt,name=inference_header_name,json=inferenceHeaderName,proto3" json:"inference_header_name,omitempty"`
	// auto_type_header_name
	//
	// x-displayName: "Automation Type Header Name"
	// x-example: "Bot-Automation-Type"
	// x-required
	// A case-insensitive HTTP header name.
	AutoTypeHeaderName string `protobuf:"bytes,2,opt,name=auto_type_header_name,json=autoTypeHeaderName,proto3" json:"auto_type_header_name,omitempty"`
}

func (m *ShapeBotFlagMitigationActionType) Reset()      { *m = ShapeBotFlagMitigationActionType{} }
func (*ShapeBotFlagMitigationActionType) ProtoMessage() {}
func (*ShapeBotFlagMitigationActionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{13}
}
func (m *ShapeBotFlagMitigationActionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotFlagMitigationActionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotFlagMitigationActionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotFlagMitigationActionType.Merge(m, src)
}
func (m *ShapeBotFlagMitigationActionType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotFlagMitigationActionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotFlagMitigationActionType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotFlagMitigationActionType proto.InternalMessageInfo

func (m *ShapeBotFlagMitigationActionType) GetInferenceHeaderName() string {
	if m != nil {
		return m.InferenceHeaderName
	}
	return ""
}

func (m *ShapeBotFlagMitigationActionType) GetAutoTypeHeaderName() string {
	if m != nil {
		return m.AutoTypeHeaderName
	}
	return ""
}

// ShapeBotBlockMitigationActionType
//
// x-displayName: "Block bot mitigation"
// Block request and respond with custom content.
type ShapeBotBlockMitigationActionType struct {
	// Status
	//
	// x-displayName: "Status"
	// HTTP Status code to respond with
	Status schema.HttpStatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.HttpStatusCode" json:"status,omitempty"`
	// body
	//
	// x-displayName: "Body"
	// x-example: "string://LzxwPiBZb3VyIHJlcXVlc3Qgd2FzIGJsb2NrZWQgPC9wPg=="
	// Custom body message is of type uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Your request was blocked"
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Your request was blocked </p>". Base64 encoded string for this html is "LzxwPiBZb3VyIHJlcXVlc3Qgd2FzIGJsb2NrZWQgPC9wPg=="
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// body_hash
	//
	// x-displayName: "Body Hash"
	// x-example: "92959a96fd69146c5fe7cbde6e5720f2"
	// Represents the corresponding MD5 Hash for the body message.
	BodyHash string `protobuf:"bytes,3,opt,name=body_hash,json=bodyHash,proto3" json:"body_hash,omitempty"`
}

func (m *ShapeBotBlockMitigationActionType) Reset()      { *m = ShapeBotBlockMitigationActionType{} }
func (*ShapeBotBlockMitigationActionType) ProtoMessage() {}
func (*ShapeBotBlockMitigationActionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{14}
}
func (m *ShapeBotBlockMitigationActionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotBlockMitigationActionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotBlockMitigationActionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotBlockMitigationActionType.Merge(m, src)
}
func (m *ShapeBotBlockMitigationActionType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotBlockMitigationActionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotBlockMitigationActionType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotBlockMitigationActionType proto.InternalMessageInfo

func (m *ShapeBotBlockMitigationActionType) GetStatus() schema.HttpStatusCode {
	if m != nil {
		return m.Status
	}
	return schema.EmptyStatusCode
}

func (m *ShapeBotBlockMitigationActionType) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ShapeBotBlockMitigationActionType) GetBodyHash() string {
	if m != nil {
		return m.BodyHash
	}
	return ""
}

// ShapeBotRedirectMitigationTypeAction
//
// x-displayName: "Redirect bot mitigation"
// Redirect request to a custom URI.
type ShapeBotRedirectMitigationActionType struct {
	// URI
	//
	// x-displayName: "URI"
	// x-example: "Enter URI"
	// x-required
	// URI location for redirect may be relative or absolute.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *ShapeBotRedirectMitigationActionType) Reset()      { *m = ShapeBotRedirectMitigationActionType{} }
func (*ShapeBotRedirectMitigationActionType) ProtoMessage() {}
func (*ShapeBotRedirectMitigationActionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{15}
}
func (m *ShapeBotRedirectMitigationActionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotRedirectMitigationActionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotRedirectMitigationActionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotRedirectMitigationActionType.Merge(m, src)
}
func (m *ShapeBotRedirectMitigationActionType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotRedirectMitigationActionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotRedirectMitigationActionType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotRedirectMitigationActionType proto.InternalMessageInfo

func (m *ShapeBotRedirectMitigationActionType) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// IP Prefix Match List
//
// x-displayName: "IP Prefix Match List"
// List of IP Prefix strings to match against.
type PrefixMatchList struct {
	// ip prefixes
	//
	// x-displayName: "IPv4 Prefix List"
	// x-example: "192.168.20.0/24"
	// List of IPv4 prefix strings.
	IpPrefixes []string `protobuf:"bytes,1,rep,name=ip_prefixes,json=ipPrefixes,proto3" json:"ip_prefixes,omitempty"`
	// ipv6 prefixes
	//
	// x-displayName: "IPv6 Prefix List"
	// x-example: "fd48:fa09:d9d4::/48"
	// List of IPv6 prefix strings.
	Ipv6Prefixes []string `protobuf:"bytes,3,rep,name=ipv6_prefixes,json=ipv6Prefixes,proto3" json:"ipv6_prefixes,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert Match Result"
	// Invert the match result.
	InvertMatch bool `protobuf:"varint,2,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
}

func (m *PrefixMatchList) Reset()      { *m = PrefixMatchList{} }
func (*PrefixMatchList) ProtoMessage() {}
func (*PrefixMatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{16}
}
func (m *PrefixMatchList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixMatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrefixMatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixMatchList.Merge(m, src)
}
func (m *PrefixMatchList) XXX_Size() int {
	return m.Size()
}
func (m *PrefixMatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixMatchList.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixMatchList proto.InternalMessageInfo

func (m *PrefixMatchList) GetIpPrefixes() []string {
	if m != nil {
		return m.IpPrefixes
	}
	return nil
}

func (m *PrefixMatchList) GetIpv6Prefixes() []string {
	if m != nil {
		return m.Ipv6Prefixes
	}
	return nil
}

func (m *PrefixMatchList) GetInvertMatch() bool {
	if m != nil {
		return m.InvertMatch
	}
	return false
}

// Asn Match List
//
// x-displayName: "ASN Match List"
// An unordered set of RFC 6793 defined 4-byte AS numbers that can be used to create allow or deny lists for use in network policy or service policy. It can be used to create the allow list only for DNS Load Balancer.
type AsnMatchList struct {
	// as numbers
	//
	// x-displayName: "AS Numbers"
	// x-example: "[713, 7932, 847325, 4683, 15269, 1000001]"
	// x-required
	// An unordered set of RFC 6793 defined 4-byte AS numbers that can be used to create allow or deny lists for use in network policy or service policy. It can be used to create the allow list only for DNS Load Balancer.
	AsNumbers []uint32 `protobuf:"varint,1,rep,packed,name=as_numbers,json=asNumbers,proto3" json:"as_numbers,omitempty"`
}

func (m *AsnMatchList) Reset()      { *m = AsnMatchList{} }
func (*AsnMatchList) ProtoMessage() {}
func (*AsnMatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{17}
}
func (m *AsnMatchList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AsnMatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AsnMatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsnMatchList.Merge(m, src)
}
func (m *AsnMatchList) XXX_Size() int {
	return m.Size()
}
func (m *AsnMatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_AsnMatchList.DiscardUnknown(m)
}

var xxx_messageInfo_AsnMatchList proto.InternalMessageInfo

func (m *AsnMatchList) GetAsNumbers() []uint32 {
	if m != nil {
		return m.AsNumbers
	}
	return nil
}

// SimpleWafExclusionRule
//
// x-displayName: "WAF Exclusion Rule"
// Simple WAF exclusion rule specifies a simple set of match conditions to be matched to skip a list of WAF detections
type SimpleWafExclusionRule struct {
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "mybloggingwebsite.org"
	// x-required
	// Domain to be matched
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*SimpleWafExclusionRule_AnyDomain
	//	*SimpleWafExclusionRule_ExactValue
	//	*SimpleWafExclusionRule_SuffixValue
	DomainChoice isSimpleWafExclusionRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-example: "/abc"
	// x-required
	// Path to be matched
	//
	// Types that are valid to be assigned to PathChoice:
	//	*SimpleWafExclusionRule_AnyPath
	//	*SimpleWafExclusionRule_PathPrefix
	//	*SimpleWafExclusionRule_PathRegex
	PathChoice isSimpleWafExclusionRule_PathChoice `protobuf_oneof:"path_choice"`
	// Methods
	//
	// x-displayName: "Methods"
	// x-example: "GET"
	// methods to be matched
	Methods []schema.HttpMethod `protobuf:"varint,7,rep,packed,name=methods,proto3,enum=ves.io.schema.HttpMethod" json:"methods,omitempty"`
	// expiration timestamp
	//
	// x-displayName: "Expiration Timestamp"
	// x-example: "2019-12-31:44:34.171543432Z"
	// The expiration_timestamp is the RFC 3339 format timestamp at which the containing rule is considered to be logically expired. The rule continues to exist in
	// the configuration but is not applied anymore.
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,9,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// WAF Exclusion Rule Action
	//
	// x-displayName: "Action"
	// WAF Exclusion Rule action to be enforced if the input request matches the rule.
	//
	// Types that are valid to be assigned to WafAdvancedConfiguration:
	//	*SimpleWafExclusionRule_AppFirewallDetectionControl
	//	*SimpleWafExclusionRule_WafSkipProcessing
	WafAdvancedConfiguration isSimpleWafExclusionRule_WafAdvancedConfiguration `protobuf_oneof:"waf_advanced_configuration"`
}

func (m *SimpleWafExclusionRule) Reset()      { *m = SimpleWafExclusionRule{} }
func (*SimpleWafExclusionRule) ProtoMessage() {}
func (*SimpleWafExclusionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{18}
}
func (m *SimpleWafExclusionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleWafExclusionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SimpleWafExclusionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleWafExclusionRule.Merge(m, src)
}
func (m *SimpleWafExclusionRule) XXX_Size() int {
	return m.Size()
}
func (m *SimpleWafExclusionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleWafExclusionRule.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleWafExclusionRule proto.InternalMessageInfo

type isSimpleWafExclusionRule_DomainChoice interface {
	isSimpleWafExclusionRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSimpleWafExclusionRule_PathChoice interface {
	isSimpleWafExclusionRule_PathChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSimpleWafExclusionRule_WafAdvancedConfiguration interface {
	isSimpleWafExclusionRule_WafAdvancedConfiguration()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleWafExclusionRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,4,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type SimpleWafExclusionRule_ExactValue struct {
	ExactValue string `protobuf:"bytes,12,opt,name=exact_value,json=exactValue,proto3,oneof" json:"exact_value,omitempty"`
}
type SimpleWafExclusionRule_SuffixValue struct {
	SuffixValue string `protobuf:"bytes,13,opt,name=suffix_value,json=suffixValue,proto3,oneof" json:"suffix_value,omitempty"`
}
type SimpleWafExclusionRule_AnyPath struct {
	AnyPath *schema.Empty `protobuf:"bytes,17,opt,name=any_path,json=anyPath,proto3,oneof" json:"any_path,omitempty"`
}
type SimpleWafExclusionRule_PathPrefix struct {
	PathPrefix string `protobuf:"bytes,18,opt,name=path_prefix,json=pathPrefix,proto3,oneof" json:"path_prefix,omitempty"`
}
type SimpleWafExclusionRule_PathRegex struct {
	PathRegex string `protobuf:"bytes,6,opt,name=path_regex,json=pathRegex,proto3,oneof" json:"path_regex,omitempty"`
}
type SimpleWafExclusionRule_AppFirewallDetectionControl struct {
	AppFirewallDetectionControl *AppFirewallDetectionControl `protobuf:"bytes,11,opt,name=app_firewall_detection_control,json=appFirewallDetectionControl,proto3,oneof" json:"app_firewall_detection_control,omitempty"`
}
type SimpleWafExclusionRule_WafSkipProcessing struct {
	WafSkipProcessing *schema.Empty `protobuf:"bytes,15,opt,name=waf_skip_processing,json=wafSkipProcessing,proto3,oneof" json:"waf_skip_processing,omitempty"`
}

func (*SimpleWafExclusionRule_AnyDomain) isSimpleWafExclusionRule_DomainChoice()   {}
func (*SimpleWafExclusionRule_ExactValue) isSimpleWafExclusionRule_DomainChoice()  {}
func (*SimpleWafExclusionRule_SuffixValue) isSimpleWafExclusionRule_DomainChoice() {}
func (*SimpleWafExclusionRule_AnyPath) isSimpleWafExclusionRule_PathChoice()       {}
func (*SimpleWafExclusionRule_PathPrefix) isSimpleWafExclusionRule_PathChoice()    {}
func (*SimpleWafExclusionRule_PathRegex) isSimpleWafExclusionRule_PathChoice()     {}
func (*SimpleWafExclusionRule_AppFirewallDetectionControl) isSimpleWafExclusionRule_WafAdvancedConfiguration() {
}
func (*SimpleWafExclusionRule_WafSkipProcessing) isSimpleWafExclusionRule_WafAdvancedConfiguration() {
}

func (m *SimpleWafExclusionRule) GetDomainChoice() isSimpleWafExclusionRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *SimpleWafExclusionRule) GetPathChoice() isSimpleWafExclusionRule_PathChoice {
	if m != nil {
		return m.PathChoice
	}
	return nil
}
func (m *SimpleWafExclusionRule) GetWafAdvancedConfiguration() isSimpleWafExclusionRule_WafAdvancedConfiguration {
	if m != nil {
		return m.WafAdvancedConfiguration
	}
	return nil
}

func (m *SimpleWafExclusionRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*SimpleWafExclusionRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *SimpleWafExclusionRule) GetExactValue() string {
	if x, ok := m.GetDomainChoice().(*SimpleWafExclusionRule_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *SimpleWafExclusionRule) GetSuffixValue() string {
	if x, ok := m.GetDomainChoice().(*SimpleWafExclusionRule_SuffixValue); ok {
		return x.SuffixValue
	}
	return ""
}

func (m *SimpleWafExclusionRule) GetAnyPath() *schema.Empty {
	if x, ok := m.GetPathChoice().(*SimpleWafExclusionRule_AnyPath); ok {
		return x.AnyPath
	}
	return nil
}

func (m *SimpleWafExclusionRule) GetPathPrefix() string {
	if x, ok := m.GetPathChoice().(*SimpleWafExclusionRule_PathPrefix); ok {
		return x.PathPrefix
	}
	return ""
}

func (m *SimpleWafExclusionRule) GetPathRegex() string {
	if x, ok := m.GetPathChoice().(*SimpleWafExclusionRule_PathRegex); ok {
		return x.PathRegex
	}
	return ""
}

func (m *SimpleWafExclusionRule) GetMethods() []schema.HttpMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *SimpleWafExclusionRule) GetExpirationTimestamp() *types.Timestamp {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return nil
}

func (m *SimpleWafExclusionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SimpleWafExclusionRule) GetAppFirewallDetectionControl() *AppFirewallDetectionControl {
	if x, ok := m.GetWafAdvancedConfiguration().(*SimpleWafExclusionRule_AppFirewallDetectionControl); ok {
		return x.AppFirewallDetectionControl
	}
	return nil
}

func (m *SimpleWafExclusionRule) GetWafSkipProcessing() *schema.Empty {
	if x, ok := m.GetWafAdvancedConfiguration().(*SimpleWafExclusionRule_WafSkipProcessing); ok {
		return x.WafSkipProcessing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleWafExclusionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleWafExclusionRule_AnyDomain)(nil),
		(*SimpleWafExclusionRule_ExactValue)(nil),
		(*SimpleWafExclusionRule_SuffixValue)(nil),
		(*SimpleWafExclusionRule_AnyPath)(nil),
		(*SimpleWafExclusionRule_PathPrefix)(nil),
		(*SimpleWafExclusionRule_PathRegex)(nil),
		(*SimpleWafExclusionRule_AppFirewallDetectionControl)(nil),
		(*SimpleWafExclusionRule_WafSkipProcessing)(nil),
	}
}

// OriginServerSubsetRule
//
// x-displayName: "Origin Server Subset Rule"
// "Origin Server Subset rule specifies a simple set of match conditions to be matched to select a list of origin server key/val pairs
type OriginServerSubsetRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// RE Name list
	//
	// x-displayName: "RE Names"
	// x-example: "ves-io-re01"
	// List of RE names for match
	ReNameList []string `protobuf:"bytes,3,rep,name=re_name_list,json=reNameList,proto3" json:"re_name_list,omitempty"`
	// country codes
	//
	// x-displayName: "Country Codes List"
	// x-example: "IN, DE"
	// List of Country Codes
	CountryCodes []CountryCode `protobuf:"varint,4,rep,packed,name=country_codes,json=countryCodes,proto3,enum=ves.io.schema.policy.CountryCode" json:"country_codes,omitempty"`
	// Client Selector choice
	//
	// x-displayName: "Client Selector Match"
	// x-required
	// Match based Label Selector Expressions
	//
	// Types that are valid to be assigned to SelectorChoice:
	//	*OriginServerSubsetRule_None
	//	*OriginServerSubsetRule_ClientSelector
	SelectorChoice isOriginServerSubsetRule_SelectorChoice `protobuf_oneof:"selector_choice"`
	// ip choice
	//
	// x-displayName: "Source IPv4 Match"
	// x-required
	// Match source IPv4 address of the request
	//
	// Types that are valid to be assigned to IpChoice:
	//	*OriginServerSubsetRule_AnyIp
	//	*OriginServerSubsetRule_IpPrefixList
	//	*OriginServerSubsetRule_IpMatcher
	IpChoice isOriginServerSubsetRule_IpChoice `protobuf_oneof:"ip_choice"`
	// asn choice
	//
	// x-displayName: "Source ASN Match"
	// x-required
	// Match the 4-byte origin Autonomous System Number for the source IPv4 address of the request. The origin ASN for the request is obtained by performing
	// a lookup for the source IPv4 Address in a GeoIP DB.
	//
	// Types that are valid to be assigned to AsnChoice:
	//	*OriginServerSubsetRule_AnyAsn
	//	*OriginServerSubsetRule_AsnList
	//	*OriginServerSubsetRule_AsnMatcher
	AsnChoice isOriginServerSubsetRule_AsnChoice `protobuf_oneof:"asn_choice"`
	// request body matcher
	//
	// x-displayName: "Request Body Matcher"
	// Predicate for matching the request body string. The criteria for matching the request body is described in MatcherType.
	// The actual request body value is extracted from the request API as a string.
	BodyMatcher *MatcherType `protobuf:"bytes,10,opt,name=body_matcher,json=bodyMatcher,proto3" json:"body_matcher,omitempty"`
	// Origin Server Labels Action
	//
	// x-displayName: "Action"
	// x-required
	// x-example: "value"
	// Add labels to select one or more origin servers.
	// Note: The pre-requisite settings to be configured in the origin pool are:
	// 1. Add labels to origin servers
	// 2. Enable subset load balancing in the Origin Server Subsets section and configure keys in origin server subsets classes
	OriginServerSubsetsAction map[string]string `protobuf:"bytes,9,rep,name=origin_server_subsets_action,json=originServerSubsetsAction,proto3" json:"origin_server_subsets_action,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OriginServerSubsetRule) Reset()      { *m = OriginServerSubsetRule{} }
func (*OriginServerSubsetRule) ProtoMessage() {}
func (*OriginServerSubsetRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{19}
}
func (m *OriginServerSubsetRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginServerSubsetRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginServerSubsetRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginServerSubsetRule.Merge(m, src)
}
func (m *OriginServerSubsetRule) XXX_Size() int {
	return m.Size()
}
func (m *OriginServerSubsetRule) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginServerSubsetRule.DiscardUnknown(m)
}

var xxx_messageInfo_OriginServerSubsetRule proto.InternalMessageInfo

type isOriginServerSubsetRule_SelectorChoice interface {
	isOriginServerSubsetRule_SelectorChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOriginServerSubsetRule_IpChoice interface {
	isOriginServerSubsetRule_IpChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOriginServerSubsetRule_AsnChoice interface {
	isOriginServerSubsetRule_AsnChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginServerSubsetRule_None struct {
	None *schema.Empty `protobuf:"bytes,26,opt,name=none,proto3,oneof" json:"none,omitempty"`
}
type OriginServerSubsetRule_ClientSelector struct {
	ClientSelector *schema.LabelSelectorType `protobuf:"bytes,5,opt,name=client_selector,json=clientSelector,proto3,oneof" json:"client_selector,omitempty"`
}
type OriginServerSubsetRule_AnyIp struct {
	AnyIp *schema.Empty `protobuf:"bytes,31,opt,name=any_ip,json=anyIp,proto3,oneof" json:"any_ip,omitempty"`
}
type OriginServerSubsetRule_IpPrefixList struct {
	IpPrefixList *PrefixMatchList `protobuf:"bytes,32,opt,name=ip_prefix_list,json=ipPrefixList,proto3,oneof" json:"ip_prefix_list,omitempty"`
}
type OriginServerSubsetRule_IpMatcher struct {
	IpMatcher *IpMatcherType `protobuf:"bytes,12,opt,name=ip_matcher,json=ipMatcher,proto3,oneof" json:"ip_matcher,omitempty"`
}
type OriginServerSubsetRule_AnyAsn struct {
	AnyAsn *schema.Empty `protobuf:"bytes,34,opt,name=any_asn,json=anyAsn,proto3,oneof" json:"any_asn,omitempty"`
}
type OriginServerSubsetRule_AsnList struct {
	AsnList *AsnMatchList `protobuf:"bytes,35,opt,name=asn_list,json=asnList,proto3,oneof" json:"asn_list,omitempty"`
}
type OriginServerSubsetRule_AsnMatcher struct {
	AsnMatcher *AsnMatcherType `protobuf:"bytes,13,opt,name=asn_matcher,json=asnMatcher,proto3,oneof" json:"asn_matcher,omitempty"`
}

func (*OriginServerSubsetRule_None) isOriginServerSubsetRule_SelectorChoice()           {}
func (*OriginServerSubsetRule_ClientSelector) isOriginServerSubsetRule_SelectorChoice() {}
func (*OriginServerSubsetRule_AnyIp) isOriginServerSubsetRule_IpChoice()                {}
func (*OriginServerSubsetRule_IpPrefixList) isOriginServerSubsetRule_IpChoice()         {}
func (*OriginServerSubsetRule_IpMatcher) isOriginServerSubsetRule_IpChoice()            {}
func (*OriginServerSubsetRule_AnyAsn) isOriginServerSubsetRule_AsnChoice()              {}
func (*OriginServerSubsetRule_AsnList) isOriginServerSubsetRule_AsnChoice()             {}
func (*OriginServerSubsetRule_AsnMatcher) isOriginServerSubsetRule_AsnChoice()          {}

func (m *OriginServerSubsetRule) GetSelectorChoice() isOriginServerSubsetRule_SelectorChoice {
	if m != nil {
		return m.SelectorChoice
	}
	return nil
}
func (m *OriginServerSubsetRule) GetIpChoice() isOriginServerSubsetRule_IpChoice {
	if m != nil {
		return m.IpChoice
	}
	return nil
}
func (m *OriginServerSubsetRule) GetAsnChoice() isOriginServerSubsetRule_AsnChoice {
	if m != nil {
		return m.AsnChoice
	}
	return nil
}

func (m *OriginServerSubsetRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OriginServerSubsetRule) GetReNameList() []string {
	if m != nil {
		return m.ReNameList
	}
	return nil
}

func (m *OriginServerSubsetRule) GetCountryCodes() []CountryCode {
	if m != nil {
		return m.CountryCodes
	}
	return nil
}

func (m *OriginServerSubsetRule) GetNone() *schema.Empty {
	if x, ok := m.GetSelectorChoice().(*OriginServerSubsetRule_None); ok {
		return x.None
	}
	return nil
}

func (m *OriginServerSubsetRule) GetClientSelector() *schema.LabelSelectorType {
	if x, ok := m.GetSelectorChoice().(*OriginServerSubsetRule_ClientSelector); ok {
		return x.ClientSelector
	}
	return nil
}

func (m *OriginServerSubsetRule) GetAnyIp() *schema.Empty {
	if x, ok := m.GetIpChoice().(*OriginServerSubsetRule_AnyIp); ok {
		return x.AnyIp
	}
	return nil
}

func (m *OriginServerSubsetRule) GetIpPrefixList() *PrefixMatchList {
	if x, ok := m.GetIpChoice().(*OriginServerSubsetRule_IpPrefixList); ok {
		return x.IpPrefixList
	}
	return nil
}

func (m *OriginServerSubsetRule) GetIpMatcher() *IpMatcherType {
	if x, ok := m.GetIpChoice().(*OriginServerSubsetRule_IpMatcher); ok {
		return x.IpMatcher
	}
	return nil
}

func (m *OriginServerSubsetRule) GetAnyAsn() *schema.Empty {
	if x, ok := m.GetAsnChoice().(*OriginServerSubsetRule_AnyAsn); ok {
		return x.AnyAsn
	}
	return nil
}

func (m *OriginServerSubsetRule) GetAsnList() *AsnMatchList {
	if x, ok := m.GetAsnChoice().(*OriginServerSubsetRule_AsnList); ok {
		return x.AsnList
	}
	return nil
}

func (m *OriginServerSubsetRule) GetAsnMatcher() *AsnMatcherType {
	if x, ok := m.GetAsnChoice().(*OriginServerSubsetRule_AsnMatcher); ok {
		return x.AsnMatcher
	}
	return nil
}

func (m *OriginServerSubsetRule) GetBodyMatcher() *MatcherType {
	if m != nil {
		return m.BodyMatcher
	}
	return nil
}

func (m *OriginServerSubsetRule) GetOriginServerSubsetsAction() map[string]string {
	if m != nil {
		return m.OriginServerSubsetsAction
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OriginServerSubsetRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OriginServerSubsetRule_None)(nil),
		(*OriginServerSubsetRule_ClientSelector)(nil),
		(*OriginServerSubsetRule_AnyIp)(nil),
		(*OriginServerSubsetRule_IpPrefixList)(nil),
		(*OriginServerSubsetRule_IpMatcher)(nil),
		(*OriginServerSubsetRule_AnyAsn)(nil),
		(*OriginServerSubsetRule_AsnList)(nil),
		(*OriginServerSubsetRule_AsnMatcher)(nil),
	}
}

// SimpleDataGuardRule
//
// x-displayName: "Data Guard Rule Specification (Data Leakage Protection)"
// Simple Data Guard rule specifies a simple set of match conditions to enable data guard protection
type SimpleDataGuardRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// action choice
	//
	// x-displayName: "Action"
	// x-required
	// Specify the action to be taken for the domain and path match condition.
	//
	// Types that are valid to be assigned to ActionChoice:
	//	*SimpleDataGuardRule_ApplyDataGuard
	//	*SimpleDataGuardRule_SkipDataGuard
	ActionChoice isSimpleDataGuardRule_ActionChoice `protobuf_oneof:"action_choice"`
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "mybloggingwebsite.org"
	// x-required
	// Domain to be matched
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*SimpleDataGuardRule_AnyDomain
	//	*SimpleDataGuardRule_ExactValue
	//	*SimpleDataGuardRule_SuffixValue
	DomainChoice isSimpleDataGuardRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// URI path matcher.
	Path *schema.PathMatcherType `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *SimpleDataGuardRule) Reset()      { *m = SimpleDataGuardRule{} }
func (*SimpleDataGuardRule) ProtoMessage() {}
func (*SimpleDataGuardRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{20}
}
func (m *SimpleDataGuardRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleDataGuardRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SimpleDataGuardRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleDataGuardRule.Merge(m, src)
}
func (m *SimpleDataGuardRule) XXX_Size() int {
	return m.Size()
}
func (m *SimpleDataGuardRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleDataGuardRule.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleDataGuardRule proto.InternalMessageInfo

type isSimpleDataGuardRule_ActionChoice interface {
	isSimpleDataGuardRule_ActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSimpleDataGuardRule_DomainChoice interface {
	isSimpleDataGuardRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleDataGuardRule_ApplyDataGuard struct {
	ApplyDataGuard *schema.Empty `protobuf:"bytes,15,opt,name=apply_data_guard,json=applyDataGuard,proto3,oneof" json:"apply_data_guard,omitempty"`
}
type SimpleDataGuardRule_SkipDataGuard struct {
	SkipDataGuard *schema.Empty `protobuf:"bytes,16,opt,name=skip_data_guard,json=skipDataGuard,proto3,oneof" json:"skip_data_guard,omitempty"`
}
type SimpleDataGuardRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,4,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type SimpleDataGuardRule_ExactValue struct {
	ExactValue string `protobuf:"bytes,12,opt,name=exact_value,json=exactValue,proto3,oneof" json:"exact_value,omitempty"`
}
type SimpleDataGuardRule_SuffixValue struct {
	SuffixValue string `protobuf:"bytes,13,opt,name=suffix_value,json=suffixValue,proto3,oneof" json:"suffix_value,omitempty"`
}

func (*SimpleDataGuardRule_ApplyDataGuard) isSimpleDataGuardRule_ActionChoice() {}
func (*SimpleDataGuardRule_SkipDataGuard) isSimpleDataGuardRule_ActionChoice()  {}
func (*SimpleDataGuardRule_AnyDomain) isSimpleDataGuardRule_DomainChoice()      {}
func (*SimpleDataGuardRule_ExactValue) isSimpleDataGuardRule_DomainChoice()     {}
func (*SimpleDataGuardRule_SuffixValue) isSimpleDataGuardRule_DomainChoice()    {}

func (m *SimpleDataGuardRule) GetActionChoice() isSimpleDataGuardRule_ActionChoice {
	if m != nil {
		return m.ActionChoice
	}
	return nil
}
func (m *SimpleDataGuardRule) GetDomainChoice() isSimpleDataGuardRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}

func (m *SimpleDataGuardRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SimpleDataGuardRule) GetApplyDataGuard() *schema.Empty {
	if x, ok := m.GetActionChoice().(*SimpleDataGuardRule_ApplyDataGuard); ok {
		return x.ApplyDataGuard
	}
	return nil
}

func (m *SimpleDataGuardRule) GetSkipDataGuard() *schema.Empty {
	if x, ok := m.GetActionChoice().(*SimpleDataGuardRule_SkipDataGuard); ok {
		return x.SkipDataGuard
	}
	return nil
}

func (m *SimpleDataGuardRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*SimpleDataGuardRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *SimpleDataGuardRule) GetExactValue() string {
	if x, ok := m.GetDomainChoice().(*SimpleDataGuardRule_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *SimpleDataGuardRule) GetSuffixValue() string {
	if x, ok := m.GetDomainChoice().(*SimpleDataGuardRule_SuffixValue); ok {
		return x.SuffixValue
	}
	return ""
}

func (m *SimpleDataGuardRule) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleDataGuardRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleDataGuardRule_ApplyDataGuard)(nil),
		(*SimpleDataGuardRule_SkipDataGuard)(nil),
		(*SimpleDataGuardRule_AnyDomain)(nil),
		(*SimpleDataGuardRule_ExactValue)(nil),
		(*SimpleDataGuardRule_SuffixValue)(nil),
	}
}

// GraphQL Rule
//
// x-displayName: "GraphQL"
// This section defines various configuration options for GraphQL inspection.
type GraphQLRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "mybloggingwebsite.org"
	// x-required
	// Domain to be matched
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*GraphQLRule_AnyDomain
	//	*GraphQLRule_ExactValue
	//	*GraphQLRule_SuffixValue
	DomainChoice isGraphQLRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-example: "/graphql"
	// x-required
	// Specifies the exact path to GraphQL endpoint. Default value is /graphql.
	ExactPath string `protobuf:"bytes,6,opt,name=exact_path,json=exactPath,proto3" json:"exact_path,omitempty"`
	// GraphQL Settings
	//
	// x-displayName: "GraphQL Settings"
	// GraphQL configuration.
	GraphqlSettings *GraphQLSettingsType `protobuf:"bytes,7,opt,name=graphql_settings,json=graphqlSettings,proto3" json:"graphql_settings,omitempty"`
	// Http Method
	//
	// x-displayName: "HTTP Method"
	// x-required
	// Specifies the HTTP method used to access the GraphQL endpoint. Default value is GET.
	//
	// Types that are valid to be assigned to MethodChoice:
	//	*GraphQLRule_MethodGet
	//	*GraphQLRule_MethodPost
	MethodChoice isGraphQLRule_MethodChoice `protobuf_oneof:"method_choice"`
}

func (m *GraphQLRule) Reset()      { *m = GraphQLRule{} }
func (*GraphQLRule) ProtoMessage() {}
func (*GraphQLRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{21}
}
func (m *GraphQLRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphQLRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GraphQLRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphQLRule.Merge(m, src)
}
func (m *GraphQLRule) XXX_Size() int {
	return m.Size()
}
func (m *GraphQLRule) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphQLRule.DiscardUnknown(m)
}

var xxx_messageInfo_GraphQLRule proto.InternalMessageInfo

type isGraphQLRule_DomainChoice interface {
	isGraphQLRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGraphQLRule_MethodChoice interface {
	isGraphQLRule_MethodChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GraphQLRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,3,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type GraphQLRule_ExactValue struct {
	ExactValue string `protobuf:"bytes,4,opt,name=exact_value,json=exactValue,proto3,oneof" json:"exact_value,omitempty"`
}
type GraphQLRule_SuffixValue struct {
	SuffixValue string `protobuf:"bytes,5,opt,name=suffix_value,json=suffixValue,proto3,oneof" json:"suffix_value,omitempty"`
}
type GraphQLRule_MethodGet struct {
	MethodGet *schema.Empty `protobuf:"bytes,9,opt,name=method_get,json=methodGet,proto3,oneof" json:"method_get,omitempty"`
}
type GraphQLRule_MethodPost struct {
	MethodPost *schema.Empty `protobuf:"bytes,10,opt,name=method_post,json=methodPost,proto3,oneof" json:"method_post,omitempty"`
}

func (*GraphQLRule_AnyDomain) isGraphQLRule_DomainChoice()   {}
func (*GraphQLRule_ExactValue) isGraphQLRule_DomainChoice()  {}
func (*GraphQLRule_SuffixValue) isGraphQLRule_DomainChoice() {}
func (*GraphQLRule_MethodGet) isGraphQLRule_MethodChoice()   {}
func (*GraphQLRule_MethodPost) isGraphQLRule_MethodChoice()  {}

func (m *GraphQLRule) GetDomainChoice() isGraphQLRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *GraphQLRule) GetMethodChoice() isGraphQLRule_MethodChoice {
	if m != nil {
		return m.MethodChoice
	}
	return nil
}

func (m *GraphQLRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GraphQLRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*GraphQLRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *GraphQLRule) GetExactValue() string {
	if x, ok := m.GetDomainChoice().(*GraphQLRule_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *GraphQLRule) GetSuffixValue() string {
	if x, ok := m.GetDomainChoice().(*GraphQLRule_SuffixValue); ok {
		return x.SuffixValue
	}
	return ""
}

func (m *GraphQLRule) GetExactPath() string {
	if m != nil {
		return m.ExactPath
	}
	return ""
}

func (m *GraphQLRule) GetGraphqlSettings() *GraphQLSettingsType {
	if m != nil {
		return m.GraphqlSettings
	}
	return nil
}

func (m *GraphQLRule) GetMethodGet() *schema.Empty {
	if x, ok := m.GetMethodChoice().(*GraphQLRule_MethodGet); ok {
		return x.MethodGet
	}
	return nil
}

func (m *GraphQLRule) GetMethodPost() *schema.Empty {
	if x, ok := m.GetMethodChoice().(*GraphQLRule_MethodPost); ok {
		return x.MethodPost
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GraphQLRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GraphQLRule_AnyDomain)(nil),
		(*GraphQLRule_ExactValue)(nil),
		(*GraphQLRule_SuffixValue)(nil),
		(*GraphQLRule_MethodGet)(nil),
		(*GraphQLRule_MethodPost)(nil),
	}
}

// GraphQL Settings
//
// x-displayName: "GraphQL Settings"
// GraphQL configuration.
type GraphQLSettingsType struct {
	// Set BD Policy name
	//
	// x-displayName: "Policy Name"
	// x-example: "graphql"
	// Sets the BD Policy to use
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// Max Total Length
	//
	// x-displayName: "Maximum Total Length"
	// x-example: "5000"
	// x-required
	// Specify maximum length in bytes for the GraphQL query.
	MaxTotalLength uint32 `protobuf:"varint,2,opt,name=max_total_length,json=maxTotalLength,proto3" json:"max_total_length,omitempty"`
	// Max Value Length
	//
	// x-displayName: "Maximum Value Length"
	// x-example: "1024"
	// x-required
	// Specify maximum value length in bytes for the GraphQL query.
	MaxValueLength uint32 `protobuf:"varint,3,opt,name=max_value_length,json=maxValueLength,proto3" json:"max_value_length,omitempty"`
	// Max Depth
	//
	// x-displayName: "Maximum Structure Depth"
	// x-example: "10"
	// x-required
	// Specify maximum depth for the GraphQL query.
	MaxDepth uint32 `protobuf:"varint,4,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	// Max Batched Queries
	//
	// x-displayName: "Maximum Batched Queries"
	// x-example: "10"
	// x-required
	// Specify maximum number of queries in a single batched request.
	MaxBatchedQueries uint32 `protobuf:"varint,5,opt,name=max_batched_queries,json=maxBatchedQueries,proto3" json:"max_batched_queries,omitempty"`
	// Introspection Queries
	//
	// x-displayName: "Introspection Queries"
	// x-required
	// Introspection is the ability to query which resources are available in the current API schema.
	// Enable access to the introspection endpoint.
	//
	// Types that are valid to be assigned to AllowIntrospectionQueriesChoice:
	//	*GraphQLSettingsType_DisableIntrospection
	//	*GraphQLSettingsType_EnableIntrospection
	AllowIntrospectionQueriesChoice isGraphQLSettingsType_AllowIntrospectionQueriesChoice `protobuf_oneof:"allow_introspection_queries_choice"`
}

func (m *GraphQLSettingsType) Reset()      { *m = GraphQLSettingsType{} }
func (*GraphQLSettingsType) ProtoMessage() {}
func (*GraphQLSettingsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{22}
}
func (m *GraphQLSettingsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphQLSettingsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GraphQLSettingsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphQLSettingsType.Merge(m, src)
}
func (m *GraphQLSettingsType) XXX_Size() int {
	return m.Size()
}
func (m *GraphQLSettingsType) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphQLSettingsType.DiscardUnknown(m)
}

var xxx_messageInfo_GraphQLSettingsType proto.InternalMessageInfo

type isGraphQLSettingsType_AllowIntrospectionQueriesChoice interface {
	isGraphQLSettingsType_AllowIntrospectionQueriesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GraphQLSettingsType_DisableIntrospection struct {
	DisableIntrospection *schema.Empty `protobuf:"bytes,7,opt,name=disable_introspection,json=disableIntrospection,proto3,oneof" json:"disable_introspection,omitempty"`
}
type GraphQLSettingsType_EnableIntrospection struct {
	EnableIntrospection *schema.Empty `protobuf:"bytes,8,opt,name=enable_introspection,json=enableIntrospection,proto3,oneof" json:"enable_introspection,omitempty"`
}

func (*GraphQLSettingsType_DisableIntrospection) isGraphQLSettingsType_AllowIntrospectionQueriesChoice() {
}
func (*GraphQLSettingsType_EnableIntrospection) isGraphQLSettingsType_AllowIntrospectionQueriesChoice() {
}

func (m *GraphQLSettingsType) GetAllowIntrospectionQueriesChoice() isGraphQLSettingsType_AllowIntrospectionQueriesChoice {
	if m != nil {
		return m.AllowIntrospectionQueriesChoice
	}
	return nil
}

func (m *GraphQLSettingsType) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *GraphQLSettingsType) GetMaxTotalLength() uint32 {
	if m != nil {
		return m.MaxTotalLength
	}
	return 0
}

func (m *GraphQLSettingsType) GetMaxValueLength() uint32 {
	if m != nil {
		return m.MaxValueLength
	}
	return 0
}

func (m *GraphQLSettingsType) GetMaxDepth() uint32 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

func (m *GraphQLSettingsType) GetMaxBatchedQueries() uint32 {
	if m != nil {
		return m.MaxBatchedQueries
	}
	return 0
}

func (m *GraphQLSettingsType) GetDisableIntrospection() *schema.Empty {
	if x, ok := m.GetAllowIntrospectionQueriesChoice().(*GraphQLSettingsType_DisableIntrospection); ok {
		return x.DisableIntrospection
	}
	return nil
}

func (m *GraphQLSettingsType) GetEnableIntrospection() *schema.Empty {
	if x, ok := m.GetAllowIntrospectionQueriesChoice().(*GraphQLSettingsType_EnableIntrospection); ok {
		return x.EnableIntrospection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GraphQLSettingsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GraphQLSettingsType_DisableIntrospection)(nil),
		(*GraphQLSettingsType_EnableIntrospection)(nil),
	}
}

// OpenAPI Validation Action
//
// x-displayName: "OpenAPI Validation Action"
// OpenAPI Validation configuration
type OpenApiValidationAction struct {
	// Request Properties Selection
	//
	// x-displayName: "Request Properties Selection"
	// List of properties of the request to validate according to the OpenAPI specification file (a.k.a. swagger)
	RequestPropertiesSelection []schema.OpenApiValidationProperties `protobuf:"varint,1,rep,packed,name=request_properties_selection,json=requestPropertiesSelection,proto3,enum=ves.io.schema.OpenApiValidationProperties" json:"request_properties_selection,omitempty"`
	// OpenApi Request Validation Action
	//
	// x-displayName: "OpenAPI Request Validation Action"
	// x-required
	// The action to perform if OpenAPI request validation fails (or if set by fall through rule)
	OasValidationAction OasValidationActionType `protobuf:"varint,2,opt,name=oas_validation_action,json=oasValidationAction,proto3,enum=ves.io.schema.policy.OasValidationActionType" json:"oas_validation_action,omitempty"`
	// Response Properties Selection
	//
	// x-displayName: "Response Properties Selection"
	// List of properties of the response to validate according to the OpenAPI specification file (a.k.a. swagger)
	ResponsePropertiesSelection []schema.OpenApiValidationProperties `protobuf:"varint,3,rep,packed,name=response_properties_selection,json=responsePropertiesSelection,proto3,enum=ves.io.schema.OpenApiValidationProperties" json:"response_properties_selection,omitempty"`
	// OpenApi Response Validation Action
	//
	// x-displayName: "OpenAPI Response Validation Action"
	// x-required
	// The action to perform if OpenAPI response validation fails
	OasResponseValidationAction OasValidationActionType `protobuf:"varint,4,opt,name=oas_response_validation_action,json=oasResponseValidationAction,proto3,enum=ves.io.schema.policy.OasValidationActionType" json:"oas_response_validation_action,omitempty"`
}

func (m *OpenApiValidationAction) Reset()      { *m = OpenApiValidationAction{} }
func (*OpenApiValidationAction) ProtoMessage() {}
func (*OpenApiValidationAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{23}
}
func (m *OpenApiValidationAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiValidationAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiValidationAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiValidationAction.Merge(m, src)
}
func (m *OpenApiValidationAction) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiValidationAction) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiValidationAction.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiValidationAction proto.InternalMessageInfo

func (m *OpenApiValidationAction) GetRequestPropertiesSelection() []schema.OpenApiValidationProperties {
	if m != nil {
		return m.RequestPropertiesSelection
	}
	return nil
}

func (m *OpenApiValidationAction) GetOasValidationAction() OasValidationActionType {
	if m != nil {
		return m.OasValidationAction
	}
	return OAS_NONE
}

func (m *OpenApiValidationAction) GetResponsePropertiesSelection() []schema.OpenApiValidationProperties {
	if m != nil {
		return m.ResponsePropertiesSelection
	}
	return nil
}

func (m *OpenApiValidationAction) GetOasResponseValidationAction() OasValidationActionType {
	if m != nil {
		return m.OasResponseValidationAction
	}
	return OAS_NONE
}

// Masking Configuration
//
// x-displayName: "Masking Configuration"
// Masking configuration comprise a list of masking fields values and an action - mask or report.
type MaskingConfig struct {
	// Fields
	//
	// x-displayName: "Fields Values"
	// x-example: "[user.password, credit_card]"
	// A list of JSONPath fields values to match the request/response payload against.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Action choise
	//
	// x-displayName: "Action"
	// x-required
	// Action to be applied on a list of fields.
	//
	// Types that are valid to be assigned to ActionChoice:
	//	*MaskingConfig_Mask
	//	*MaskingConfig_Report
	ActionChoice isMaskingConfig_ActionChoice `protobuf_oneof:"action_choice"`
}

func (m *MaskingConfig) Reset()      { *m = MaskingConfig{} }
func (*MaskingConfig) ProtoMessage() {}
func (*MaskingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{24}
}
func (m *MaskingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaskingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaskingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaskingConfig.Merge(m, src)
}
func (m *MaskingConfig) XXX_Size() int {
	return m.Size()
}
func (m *MaskingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MaskingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MaskingConfig proto.InternalMessageInfo

type isMaskingConfig_ActionChoice interface {
	isMaskingConfig_ActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaskingConfig_Mask struct {
	Mask *schema.Empty `protobuf:"bytes,3,opt,name=mask,proto3,oneof" json:"mask,omitempty"`
}
type MaskingConfig_Report struct {
	Report *schema.Empty `protobuf:"bytes,4,opt,name=report,proto3,oneof" json:"report,omitempty"`
}

func (*MaskingConfig_Mask) isMaskingConfig_ActionChoice()   {}
func (*MaskingConfig_Report) isMaskingConfig_ActionChoice() {}

func (m *MaskingConfig) GetActionChoice() isMaskingConfig_ActionChoice {
	if m != nil {
		return m.ActionChoice
	}
	return nil
}

func (m *MaskingConfig) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *MaskingConfig) GetMask() *schema.Empty {
	if x, ok := m.GetActionChoice().(*MaskingConfig_Mask); ok {
		return x.Mask
	}
	return nil
}

func (m *MaskingConfig) GetReport() *schema.Empty {
	if x, ok := m.GetActionChoice().(*MaskingConfig_Report); ok {
		return x.Report
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MaskingConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MaskingConfig_Mask)(nil),
		(*MaskingConfig_Report)(nil),
	}
}

// Deny Information
//
// x-displayName: "Deny Information"
// Detailed information including HTTP response code and error message to be sent when the policy or policy set action is DENY.
type DenyInformation struct {
	// response_code
	//
	// x-displayName: "HTTP Response Code"
	// x-example: 400
	// The HTTP status code to use in the response. The default code is Forbidden (403).
	ResponseCode uint32 `protobuf:"varint,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// error_message
	//
	// x-displayName: "Error Message"
	// x-example: "Denied because the URL path contains an unknown object type"
	// An error message associated with a DENY action in a policy or policy set, that is meaningful to the end user. Note that this error message is included
	// in the body but does not constitute the entire body.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// event_type
	//
	// x-displayName: "Event Type"
	// Event Type
	//
	// Types that are valid to be assigned to EventType:
	//	*DenyInformation_UndefinedSecEvent
	//	*DenyInformation_ApiSecEvent
	EventType isDenyInformation_EventType `protobuf_oneof:"event_type"`
}

func (m *DenyInformation) Reset()      { *m = DenyInformation{} }
func (*DenyInformation) ProtoMessage() {}
func (*DenyInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{25}
}
func (m *DenyInformation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenyInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DenyInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyInformation.Merge(m, src)
}
func (m *DenyInformation) XXX_Size() int {
	return m.Size()
}
func (m *DenyInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyInformation.DiscardUnknown(m)
}

var xxx_messageInfo_DenyInformation proto.InternalMessageInfo

type isDenyInformation_EventType interface {
	isDenyInformation_EventType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DenyInformation_UndefinedSecEvent struct {
	UndefinedSecEvent *schema.Empty `protobuf:"bytes,4,opt,name=undefined_sec_event,json=undefinedSecEvent,proto3,oneof" json:"undefined_sec_event,omitempty"`
}
type DenyInformation_ApiSecEvent struct {
	ApiSecEvent *schema.Empty `protobuf:"bytes,5,opt,name=api_sec_event,json=apiSecEvent,proto3,oneof" json:"api_sec_event,omitempty"`
}

func (*DenyInformation_UndefinedSecEvent) isDenyInformation_EventType() {}
func (*DenyInformation_ApiSecEvent) isDenyInformation_EventType()       {}

func (m *DenyInformation) GetEventType() isDenyInformation_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (m *DenyInformation) GetResponseCode() uint32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *DenyInformation) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DenyInformation) GetUndefinedSecEvent() *schema.Empty {
	if x, ok := m.GetEventType().(*DenyInformation_UndefinedSecEvent); ok {
		return x.UndefinedSecEvent
	}
	return nil
}

func (m *DenyInformation) GetApiSecEvent() *schema.Empty {
	if x, ok := m.GetEventType().(*DenyInformation_ApiSecEvent); ok {
		return x.ApiSecEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DenyInformation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DenyInformation_UndefinedSecEvent)(nil),
		(*DenyInformation_ApiSecEvent)(nil),
	}
}

// TlsFingerprintMatcherType
//
// x-displayName: "TLS Fingerprint Matcher"
// A TLS fingerprint matcher specifies multiple criteria for matching a TLS fingerprint. The set of supported positve match criteria includes a list of known
// classes of TLS fingerprints and a list of exact values. The match is considered successful if either of these positive criteria are satisfied and the input
// fingerprint is not one of the excluded values.
type TlsFingerprintMatcherType struct {
	// classes
	//
	// x-displayName: "TLS fingerprint classes"
	// x-example: "['ADWARE', 'TRICKBOT']
	// A list of known classes of TLS fingerprints to match the input TLS JA3 fingerprint against.
	Classes []KnownTlsFingerprintClass `protobuf:"varint,1,rep,packed,name=classes,proto3,enum=ves.io.schema.policy.KnownTlsFingerprintClass" json:"classes,omitempty"`
	// exact values
	//
	// x-displayName: "Exact Values"
	// x-example: "['ed6dfd54b01ebe31b7a65b88abfa7297', '16efcf0e00504ddfedde13bfea997952', 'de364c46b0dfc283b5e38c79ceae3f8f']"
	// A list of exact TLS JA3 fingerprints to match the input TLS JA3 fingerprint against.
	ExactValues []string `protobuf:"bytes,2,rep,name=exact_values,json=exactValues,proto3" json:"exact_values,omitempty"`
	// excluded values
	//
	// x-displayName: "Excluded Values"
	// x-example: "['fb00055a1196aeea8d1bc609885ba953', 'b386946a5a44d1ddcc843bc75336dfce']"
	// A list of TLS JA3 fingerprints to be excluded when matching the input TLS JA3 fingerprint. This can be used to skip known false positives when using one
	// or more known TLS fingerprint classes in the enclosing matcher.
	ExcludedValues []string `protobuf:"bytes,3,rep,name=excluded_values,json=excludedValues,proto3" json:"excluded_values,omitempty"`
}

func (m *TlsFingerprintMatcherType) Reset()      { *m = TlsFingerprintMatcherType{} }
func (*TlsFingerprintMatcherType) ProtoMessage() {}
func (*TlsFingerprintMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{26}
}
func (m *TlsFingerprintMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TlsFingerprintMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TlsFingerprintMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsFingerprintMatcherType.Merge(m, src)
}
func (m *TlsFingerprintMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *TlsFingerprintMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsFingerprintMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_TlsFingerprintMatcherType proto.InternalMessageInfo

func (m *TlsFingerprintMatcherType) GetClasses() []KnownTlsFingerprintClass {
	if m != nil {
		return m.Classes
	}
	return nil
}

func (m *TlsFingerprintMatcherType) GetExactValues() []string {
	if m != nil {
		return m.ExactValues
	}
	return nil
}

func (m *TlsFingerprintMatcherType) GetExcludedValues() []string {
	if m != nil {
		return m.ExcludedValues
	}
	return nil
}

// JA4TlsFingerprintMatcherType
//
// x-displayName: "JA4 TLS Fingerprint Matcher"
// An extended version of JA3 that includes additional fields for more comprehensive fingerprinting of
// SSL/TLS clients and potentially has a different structure and length.
type JA4TlsFingerprintMatcherType struct {
	// exact values
	//
	// x-displayName: "Exact Values"
	// A list of exact JA4 TLS fingerprint to match the input JA4 TLS fingerprint against
	ExactValues []string `protobuf:"bytes,2,rep,name=exact_values,json=exactValues,proto3" json:"exact_values,omitempty"`
}

func (m *JA4TlsFingerprintMatcherType) Reset()      { *m = JA4TlsFingerprintMatcherType{} }
func (*JA4TlsFingerprintMatcherType) ProtoMessage() {}
func (*JA4TlsFingerprintMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{27}
}
func (m *JA4TlsFingerprintMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JA4TlsFingerprintMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JA4TlsFingerprintMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JA4TlsFingerprintMatcherType.Merge(m, src)
}
func (m *JA4TlsFingerprintMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *JA4TlsFingerprintMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_JA4TlsFingerprintMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_JA4TlsFingerprintMatcherType proto.InternalMessageInfo

func (m *JA4TlsFingerprintMatcherType) GetExactValues() []string {
	if m != nil {
		return m.ExactValues
	}
	return nil
}

// PathMatcherType
//
// x-displayName: "Path Matcher"
// A path matcher specifies multiple criteria for matching an HTTP path string. The match is considered successful if any of the criteria are satisfied. The set
// of supported match criteria includes a list of path prefixes, a list of exact path values and a list of regular expressions.
type PathMatcherType struct {
	// prefix values
	//
	// x-displayName: "Prefix Values"
	// x-example: "['/api/web/namespaces/project179/users/', '/api/config/namespaces/', '/api/data/namespaces/']"
	// A list of path prefix values to match the input HTTP path against.
	PrefixValues []string `protobuf:"bytes,1,rep,name=prefix_values,json=prefixValues,proto3" json:"prefix_values,omitempty"`
	// exact values
	//
	// x-displayName: "Exact Values"
	// x-example: "['/api/web/namespaces/project179/users/user1', '/api/config/namespaces/accounting/bgps', '/api/data/namespaces/project443/virtual_host_101']"
	// A list of exact path values to match the input HTTP path against.
	ExactValues []string `protobuf:"bytes,2,rep,name=exact_values,json=exactValues,proto3" json:"exact_values,omitempty"`
	// regex values
	//
	// x-displayName: "Regex Values"
	// x-example: "['^/api/web/namespaces/abc/users/([a-z]([-a-z0-9]*[a-z0-9])?)$', '/api/data/namespaces/proj404/virtual_hosts/([a-z]([-a-z0-9]*[a-z0-9])?)$']"
	// A list of regular expressions to match the input HTTP path against.
	RegexValues []string `protobuf:"bytes,3,rep,name=regex_values,json=regexValues,proto3" json:"regex_values,omitempty"`
	// Suffix values
	//
	// x-displayName: "Suffix Values"
	// x-example: "['.exe', '.shtml', '.wmz']"
	// A list of path suffix values to match the input HTTP path against.
	SuffixValues []string `protobuf:"bytes,5,rep,name=suffix_values,json=suffixValues,proto3" json:"suffix_values,omitempty"`
	// transformers
	//
	// x-displayName: "Transformers"
	// x-example: "[BASE64_DECODE, LOWER_CASE]
	// An ordered list of transformers (starting from index 0) to be applied to the path before matching.
	Transformers []Transformer `protobuf:"varint,4,rep,packed,name=transformers,proto3,enum=ves.io.schema.policy.Transformer" json:"transformers,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert Path Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,6,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *PathMatcherType) Reset()      { *m = PathMatcherType{} }
func (*PathMatcherType) ProtoMessage() {}
func (*PathMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{28}
}
func (m *PathMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PathMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PathMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathMatcherType.Merge(m, src)
}
func (m *PathMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *PathMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_PathMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_PathMatcherType proto.InternalMessageInfo

func (m *PathMatcherType) GetPrefixValues() []string {
	if m != nil {
		return m.PrefixValues
	}
	return nil
}

func (m *PathMatcherType) GetExactValues() []string {
	if m != nil {
		return m.ExactValues
	}
	return nil
}

func (m *PathMatcherType) GetRegexValues() []string {
	if m != nil {
		return m.RegexValues
	}
	return nil
}

func (m *PathMatcherType) GetSuffixValues() []string {
	if m != nil {
		return m.SuffixValues
	}
	return nil
}

func (m *PathMatcherType) GetTransformers() []Transformer {
	if m != nil {
		return m.Transformers
	}
	return nil
}

func (m *PathMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// MatcherType
//
// x-displayName: "Matcher"
// A matcher specifies multiple criteria for matching an input string. The match is considered successful if any of the criteria are satisfied. The set
// of supported match criteria includes a list of exact values and a list of regular expressions.
type MatcherType struct {
	// exact values
	//
	// x-displayName: "Exact Values"
	// x-example: "['new york', 'london', 'sydney', 'tokyo', 'cairo']"
	// A list of exact values to match the input against.
	ExactValues []string `protobuf:"bytes,1,rep,name=exact_values,json=exactValues,proto3" json:"exact_values,omitempty"`
	// regex values
	//
	// x-displayName: "Regex Values"
	// x-example: "['^new .*$', 'san f.*', '.* del .*']"
	// A list of regular expressions to match the input against.
	RegexValues []string `protobuf:"bytes,2,rep,name=regex_values,json=regexValues,proto3" json:"regex_values,omitempty"`
	// transformers
	//
	// x-displayName: "Transformers"
	// x-example: "[BASE64_DECODE, LOWER_CASE]
	// An ordered list of transformers (starting from index 0) to be applied to the path before matching.
	Transformers []Transformer `protobuf:"varint,3,rep,packed,name=transformers,proto3,enum=ves.io.schema.policy.Transformer" json:"transformers,omitempty"`
}

func (m *MatcherType) Reset()      { *m = MatcherType{} }
func (*MatcherType) ProtoMessage() {}
func (*MatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{29}
}
func (m *MatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatcherType.Merge(m, src)
}
func (m *MatcherType) XXX_Size() int {
	return m.Size()
}
func (m *MatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_MatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_MatcherType proto.InternalMessageInfo

func (m *MatcherType) GetExactValues() []string {
	if m != nil {
		return m.ExactValues
	}
	return nil
}

func (m *MatcherType) GetRegexValues() []string {
	if m != nil {
		return m.RegexValues
	}
	return nil
}

func (m *MatcherType) GetTransformers() []Transformer {
	if m != nil {
		return m.Transformers
	}
	return nil
}

// MatcherTypeBasic
//
// x-displayName: "Matcher"
// A matcher specifies multiple criteria for matching an input string. The match is considered successful if any of the criteria are satisfied. The set
// of supported match criteria includes a list of exact values and a list of regular expressions.
type MatcherTypeBasic struct {
	// exact values
	//
	// x-displayName: "Exact Values"
	// x-example: "['new york', 'london', 'sydney', 'tokyo', 'cairo']"
	// A list of exact values to match the input against.
	ExactValues []string `protobuf:"bytes,1,rep,name=exact_values,json=exactValues,proto3" json:"exact_values,omitempty"`
	// regex values
	//
	// x-displayName: "Regex Values"
	// x-example: "['^new .*$', 'san f.*', '.* del .*']"
	// A list of regular expressions to match the input against.
	RegexValues []string `protobuf:"bytes,2,rep,name=regex_values,json=regexValues,proto3" json:"regex_values,omitempty"`
}

func (m *MatcherTypeBasic) Reset()      { *m = MatcherTypeBasic{} }
func (*MatcherTypeBasic) ProtoMessage() {}
func (*MatcherTypeBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{30}
}
func (m *MatcherTypeBasic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatcherTypeBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MatcherTypeBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatcherTypeBasic.Merge(m, src)
}
func (m *MatcherTypeBasic) XXX_Size() int {
	return m.Size()
}
func (m *MatcherTypeBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_MatcherTypeBasic.DiscardUnknown(m)
}

var xxx_messageInfo_MatcherTypeBasic proto.InternalMessageInfo

func (m *MatcherTypeBasic) GetExactValues() []string {
	if m != nil {
		return m.ExactValues
	}
	return nil
}

func (m *MatcherTypeBasic) GetRegexValues() []string {
	if m != nil {
		return m.RegexValues
	}
	return nil
}

// CookieMatcherType
//
// x-displayName: "Cookie Matcher"
// A cookie matcher specifies the name of a single cookie and the criteria to match it. The input has a list of values for each
// cookie in the request.
// A cookie matcher can check for one of the following:
// * Presence or absence of the cookie
// * At least one of the values for the cookie in the request satisfies the MatcherType item
type CookieMatcherType struct {
	// name
	//
	// x-displayName: "Cookie Name"
	// x-example: "Session"
	// x-required
	// A case-sensitive cookie name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// match
	//
	// x-displayName: "Match Options"
	// x-required
	// Select Match Options.
	//
	// Types that are valid to be assigned to Match:
	//	*CookieMatcherType_Presence
	//	*CookieMatcherType_CheckPresent
	//	*CookieMatcherType_CheckNotPresent
	//	*CookieMatcherType_Item
	Match isCookieMatcherType_Match `protobuf_oneof:"match"`
	// invert_matcher
	//
	// x-displayName: "Invert Matcher"
	// Invert Match of the expression defined
	InvertMatcher bool `protobuf:"varint,4,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *CookieMatcherType) Reset()      { *m = CookieMatcherType{} }
func (*CookieMatcherType) ProtoMessage() {}
func (*CookieMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{31}
}
func (m *CookieMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CookieMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CookieMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CookieMatcherType.Merge(m, src)
}
func (m *CookieMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *CookieMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_CookieMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_CookieMatcherType proto.InternalMessageInfo

type isCookieMatcherType_Match interface {
	isCookieMatcherType_Match()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CookieMatcherType_Presence struct {
	Presence bool `protobuf:"varint,2,opt,name=presence,proto3,oneof" json:"presence,omitempty"`
}
type CookieMatcherType_CheckPresent struct {
	CheckPresent *schema.Empty `protobuf:"bytes,7,opt,name=check_present,json=checkPresent,proto3,oneof" json:"check_present,omitempty"`
}
type CookieMatcherType_CheckNotPresent struct {
	CheckNotPresent *schema.Empty `protobuf:"bytes,8,opt,name=check_not_present,json=checkNotPresent,proto3,oneof" json:"check_not_present,omitempty"`
}
type CookieMatcherType_Item struct {
	Item *MatcherType `protobuf:"bytes,3,opt,name=item,proto3,oneof" json:"item,omitempty"`
}

func (*CookieMatcherType_Presence) isCookieMatcherType_Match()        {}
func (*CookieMatcherType_CheckPresent) isCookieMatcherType_Match()    {}
func (*CookieMatcherType_CheckNotPresent) isCookieMatcherType_Match() {}
func (*CookieMatcherType_Item) isCookieMatcherType_Match()            {}

func (m *CookieMatcherType) GetMatch() isCookieMatcherType_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *CookieMatcherType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CookieMatcherType) GetPresence() bool {
	if x, ok := m.GetMatch().(*CookieMatcherType_Presence); ok {
		return x.Presence
	}
	return false
}

func (m *CookieMatcherType) GetCheckPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*CookieMatcherType_CheckPresent); ok {
		return x.CheckPresent
	}
	return nil
}

func (m *CookieMatcherType) GetCheckNotPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*CookieMatcherType_CheckNotPresent); ok {
		return x.CheckNotPresent
	}
	return nil
}

func (m *CookieMatcherType) GetItem() *MatcherType {
	if x, ok := m.GetMatch().(*CookieMatcherType_Item); ok {
		return x.Item
	}
	return nil
}

func (m *CookieMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CookieMatcherType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CookieMatcherType_Presence)(nil),
		(*CookieMatcherType_CheckPresent)(nil),
		(*CookieMatcherType_CheckNotPresent)(nil),
		(*CookieMatcherType_Item)(nil),
	}
}

// ArgMatcherType
//
// x-displayName: "Argument Matcher"
// A argument matcher specifies the name of a single argument in the body and the criteria to match it.
// A argument matcher can check for one of the following:
// * Presence or absence of the argument
// * At least one of the values for the argument in the request satisfies the MatcherType item
type ArgMatcherType struct {
	// name
	//
	// x-displayName: "Argument Name"
	// x-example: "name"
	// x-example: "phones[_]"
	// x-example: "cars.make.toyota.models[1]"
	// x-example: "cars.make.honda.models[_]"
	// x-example: "cars.make[_].models[_]"
	// x-required
	// A case-sensitive JSON path in the HTTP request body.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// match
	//
	// x-displayName: "Match Options"
	// x-required
	// Select Match Options.
	//
	// Types that are valid to be assigned to Match:
	//	*ArgMatcherType_Presence
	//	*ArgMatcherType_CheckPresent
	//	*ArgMatcherType_CheckNotPresent
	//	*ArgMatcherType_Item
	Match isArgMatcherType_Match `protobuf_oneof:"match"`
	// invert_matcher
	//
	// x-displayName: "Invert Matcher"
	// Invert Match of the expression defined
	InvertMatcher bool `protobuf:"varint,4,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *ArgMatcherType) Reset()      { *m = ArgMatcherType{} }
func (*ArgMatcherType) ProtoMessage() {}
func (*ArgMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{32}
}
func (m *ArgMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ArgMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgMatcherType.Merge(m, src)
}
func (m *ArgMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *ArgMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_ArgMatcherType proto.InternalMessageInfo

type isArgMatcherType_Match interface {
	isArgMatcherType_Match()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ArgMatcherType_Presence struct {
	Presence bool `protobuf:"varint,2,opt,name=presence,proto3,oneof" json:"presence,omitempty"`
}
type ArgMatcherType_CheckPresent struct {
	CheckPresent *schema.Empty `protobuf:"bytes,7,opt,name=check_present,json=checkPresent,proto3,oneof" json:"check_present,omitempty"`
}
type ArgMatcherType_CheckNotPresent struct {
	CheckNotPresent *schema.Empty `protobuf:"bytes,8,opt,name=check_not_present,json=checkNotPresent,proto3,oneof" json:"check_not_present,omitempty"`
}
type ArgMatcherType_Item struct {
	Item *MatcherType `protobuf:"bytes,3,opt,name=item,proto3,oneof" json:"item,omitempty"`
}

func (*ArgMatcherType_Presence) isArgMatcherType_Match()        {}
func (*ArgMatcherType_CheckPresent) isArgMatcherType_Match()    {}
func (*ArgMatcherType_CheckNotPresent) isArgMatcherType_Match() {}
func (*ArgMatcherType_Item) isArgMatcherType_Match()            {}

func (m *ArgMatcherType) GetMatch() isArgMatcherType_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *ArgMatcherType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArgMatcherType) GetPresence() bool {
	if x, ok := m.GetMatch().(*ArgMatcherType_Presence); ok {
		return x.Presence
	}
	return false
}

func (m *ArgMatcherType) GetCheckPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*ArgMatcherType_CheckPresent); ok {
		return x.CheckPresent
	}
	return nil
}

func (m *ArgMatcherType) GetCheckNotPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*ArgMatcherType_CheckNotPresent); ok {
		return x.CheckNotPresent
	}
	return nil
}

func (m *ArgMatcherType) GetItem() *MatcherType {
	if x, ok := m.GetMatch().(*ArgMatcherType_Item); ok {
		return x.Item
	}
	return nil
}

func (m *ArgMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ArgMatcherType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ArgMatcherType_Presence)(nil),
		(*ArgMatcherType_CheckPresent)(nil),
		(*ArgMatcherType_CheckNotPresent)(nil),
		(*ArgMatcherType_Item)(nil),
	}
}

// HeaderMatcherType
//
// x-displayName: "Header Matcher"
// A header matcher specifies the name of a single HTTP header and the criteria for the input request to match it. The input has a list of actual values for each
// header name in the original HTTP request.
// A header matcher can check for one of the following:
// * Presence or absence of the header in the input
// * At least one of the values for the header in the input satisfies the MatcherType item
type HeaderMatcherType struct {
	// name
	//
	// x-displayName: "Header Name"
	// x-example: "Accept-Encoding"
	// x-required
	// A case-insensitive HTTP header name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// match
	//
	// x-displayName: "Match Options"
	// x-required
	// Select Match Options.
	//
	// Types that are valid to be assigned to Match:
	//	*HeaderMatcherType_Presence
	//	*HeaderMatcherType_CheckPresent
	//	*HeaderMatcherType_CheckNotPresent
	//	*HeaderMatcherType_Item
	Match isHeaderMatcherType_Match `protobuf_oneof:"match"`
	// invert_matcher
	//
	// x-displayName: "Invert Header Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,4,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *HeaderMatcherType) Reset()      { *m = HeaderMatcherType{} }
func (*HeaderMatcherType) ProtoMessage() {}
func (*HeaderMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{33}
}
func (m *HeaderMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HeaderMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderMatcherType.Merge(m, src)
}
func (m *HeaderMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *HeaderMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderMatcherType proto.InternalMessageInfo

type isHeaderMatcherType_Match interface {
	isHeaderMatcherType_Match()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HeaderMatcherType_Presence struct {
	Presence bool `protobuf:"varint,2,opt,name=presence,proto3,oneof" json:"presence,omitempty"`
}
type HeaderMatcherType_CheckPresent struct {
	CheckPresent *schema.Empty `protobuf:"bytes,7,opt,name=check_present,json=checkPresent,proto3,oneof" json:"check_present,omitempty"`
}
type HeaderMatcherType_CheckNotPresent struct {
	CheckNotPresent *schema.Empty `protobuf:"bytes,8,opt,name=check_not_present,json=checkNotPresent,proto3,oneof" json:"check_not_present,omitempty"`
}
type HeaderMatcherType_Item struct {
	Item *MatcherType `protobuf:"bytes,3,opt,name=item,proto3,oneof" json:"item,omitempty"`
}

func (*HeaderMatcherType_Presence) isHeaderMatcherType_Match()        {}
func (*HeaderMatcherType_CheckPresent) isHeaderMatcherType_Match()    {}
func (*HeaderMatcherType_CheckNotPresent) isHeaderMatcherType_Match() {}
func (*HeaderMatcherType_Item) isHeaderMatcherType_Match()            {}

func (m *HeaderMatcherType) GetMatch() isHeaderMatcherType_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HeaderMatcherType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeaderMatcherType) GetPresence() bool {
	if x, ok := m.GetMatch().(*HeaderMatcherType_Presence); ok {
		return x.Presence
	}
	return false
}

func (m *HeaderMatcherType) GetCheckPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*HeaderMatcherType_CheckPresent); ok {
		return x.CheckPresent
	}
	return nil
}

func (m *HeaderMatcherType) GetCheckNotPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*HeaderMatcherType_CheckNotPresent); ok {
		return x.CheckNotPresent
	}
	return nil
}

func (m *HeaderMatcherType) GetItem() *MatcherType {
	if x, ok := m.GetMatch().(*HeaderMatcherType_Item); ok {
		return x.Item
	}
	return nil
}

func (m *HeaderMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HeaderMatcherType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HeaderMatcherType_Presence)(nil),
		(*HeaderMatcherType_CheckPresent)(nil),
		(*HeaderMatcherType_CheckNotPresent)(nil),
		(*HeaderMatcherType_Item)(nil),
	}
}

// JWTClaimMatcherType
//
// x-displayName: "JWT Claim Matcher"
// A JWT claim matcher specifies the name of a single JWT claim and the criteria for the input request to match it.
// The input has a list of actual values for each JWT claim name in the JWT payload.
// A JWT claim matcher can check for one of the following:
// * Presence or absence of the JWT Claim in the input
// * At least one of the values for the JWT Claim in the input satisfies the MatcherType item
type JWTClaimMatcherType struct {
	// name
	//
	// x-displayName: "JWT Claim Name"
	// x-example: "user_id"
	// x-required
	// JWT claim name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// match
	//
	// x-displayName: "Match Options"
	// x-required
	// Select Match Options.
	//
	// Types that are valid to be assigned to Match:
	//	*JWTClaimMatcherType_CheckPresent
	//	*JWTClaimMatcherType_CheckNotPresent
	//	*JWTClaimMatcherType_Item
	Match isJWTClaimMatcherType_Match `protobuf_oneof:"match"`
	// invert_matcher
	//
	// x-displayName: "Invert Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,6,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *JWTClaimMatcherType) Reset()      { *m = JWTClaimMatcherType{} }
func (*JWTClaimMatcherType) ProtoMessage() {}
func (*JWTClaimMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{34}
}
func (m *JWTClaimMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWTClaimMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JWTClaimMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTClaimMatcherType.Merge(m, src)
}
func (m *JWTClaimMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *JWTClaimMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTClaimMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_JWTClaimMatcherType proto.InternalMessageInfo

type isJWTClaimMatcherType_Match interface {
	isJWTClaimMatcherType_Match()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type JWTClaimMatcherType_CheckPresent struct {
	CheckPresent *schema.Empty `protobuf:"bytes,3,opt,name=check_present,json=checkPresent,proto3,oneof" json:"check_present,omitempty"`
}
type JWTClaimMatcherType_CheckNotPresent struct {
	CheckNotPresent *schema.Empty `protobuf:"bytes,4,opt,name=check_not_present,json=checkNotPresent,proto3,oneof" json:"check_not_present,omitempty"`
}
type JWTClaimMatcherType_Item struct {
	Item *MatcherType `protobuf:"bytes,5,opt,name=item,proto3,oneof" json:"item,omitempty"`
}

func (*JWTClaimMatcherType_CheckPresent) isJWTClaimMatcherType_Match()    {}
func (*JWTClaimMatcherType_CheckNotPresent) isJWTClaimMatcherType_Match() {}
func (*JWTClaimMatcherType_Item) isJWTClaimMatcherType_Match()            {}

func (m *JWTClaimMatcherType) GetMatch() isJWTClaimMatcherType_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *JWTClaimMatcherType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JWTClaimMatcherType) GetCheckPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*JWTClaimMatcherType_CheckPresent); ok {
		return x.CheckPresent
	}
	return nil
}

func (m *JWTClaimMatcherType) GetCheckNotPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*JWTClaimMatcherType_CheckNotPresent); ok {
		return x.CheckNotPresent
	}
	return nil
}

func (m *JWTClaimMatcherType) GetItem() *MatcherType {
	if x, ok := m.GetMatch().(*JWTClaimMatcherType_Item); ok {
		return x.Item
	}
	return nil
}

func (m *JWTClaimMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JWTClaimMatcherType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JWTClaimMatcherType_CheckPresent)(nil),
		(*JWTClaimMatcherType_CheckNotPresent)(nil),
		(*JWTClaimMatcherType_Item)(nil),
	}
}

// HeaderMatcherTypeBasic
//
// x-displayName: "Header Matcher"
// A header matcher specifies the name of a single HTTP header and the criteria for the input request to match it. The input has a list of actual values for each
// header name in the original HTTP request.
// A header matcher can check for one of the following:
// * Presence or absence of the header in the input
// * At least one of the values for the header in the input satisfies the MatcherType item
type HeaderMatcherTypeBasic struct {
	// name
	//
	// x-displayName: "Header Name"
	// x-example: "Accept-Encoding"
	// x-required
	// A case-insensitive HTTP header name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// match
	//
	// x-displayName: "Match Options"
	// x-required
	// Select Match Options.
	//
	// Types that are valid to be assigned to Match:
	//	*HeaderMatcherTypeBasic_CheckPresent
	//	*HeaderMatcherTypeBasic_CheckNotPresent
	//	*HeaderMatcherTypeBasic_Item
	Match isHeaderMatcherTypeBasic_Match `protobuf_oneof:"match"`
}

func (m *HeaderMatcherTypeBasic) Reset()      { *m = HeaderMatcherTypeBasic{} }
func (*HeaderMatcherTypeBasic) ProtoMessage() {}
func (*HeaderMatcherTypeBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{35}
}
func (m *HeaderMatcherTypeBasic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderMatcherTypeBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HeaderMatcherTypeBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderMatcherTypeBasic.Merge(m, src)
}
func (m *HeaderMatcherTypeBasic) XXX_Size() int {
	return m.Size()
}
func (m *HeaderMatcherTypeBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderMatcherTypeBasic.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderMatcherTypeBasic proto.InternalMessageInfo

type isHeaderMatcherTypeBasic_Match interface {
	isHeaderMatcherTypeBasic_Match()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HeaderMatcherTypeBasic_CheckPresent struct {
	CheckPresent *schema.Empty `protobuf:"bytes,7,opt,name=check_present,json=checkPresent,proto3,oneof" json:"check_present,omitempty"`
}
type HeaderMatcherTypeBasic_CheckNotPresent struct {
	CheckNotPresent *schema.Empty `protobuf:"bytes,8,opt,name=check_not_present,json=checkNotPresent,proto3,oneof" json:"check_not_present,omitempty"`
}
type HeaderMatcherTypeBasic_Item struct {
	Item *MatcherType `protobuf:"bytes,3,opt,name=item,proto3,oneof" json:"item,omitempty"`
}

func (*HeaderMatcherTypeBasic_CheckPresent) isHeaderMatcherTypeBasic_Match()    {}
func (*HeaderMatcherTypeBasic_CheckNotPresent) isHeaderMatcherTypeBasic_Match() {}
func (*HeaderMatcherTypeBasic_Item) isHeaderMatcherTypeBasic_Match()            {}

func (m *HeaderMatcherTypeBasic) GetMatch() isHeaderMatcherTypeBasic_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HeaderMatcherTypeBasic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeaderMatcherTypeBasic) GetCheckPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*HeaderMatcherTypeBasic_CheckPresent); ok {
		return x.CheckPresent
	}
	return nil
}

func (m *HeaderMatcherTypeBasic) GetCheckNotPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*HeaderMatcherTypeBasic_CheckNotPresent); ok {
		return x.CheckNotPresent
	}
	return nil
}

func (m *HeaderMatcherTypeBasic) GetItem() *MatcherType {
	if x, ok := m.GetMatch().(*HeaderMatcherTypeBasic_Item); ok {
		return x.Item
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HeaderMatcherTypeBasic) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HeaderMatcherTypeBasic_CheckPresent)(nil),
		(*HeaderMatcherTypeBasic_CheckNotPresent)(nil),
		(*HeaderMatcherTypeBasic_Item)(nil),
	}
}

// QueryParameterMatcherType
//
// x-displayName: "Query Parameter Matcher"
// A query parameter matcher specifies the name of a single query parameter and the criteria for the input request to match it. The input has a list of actual
// values for each query parameter name in the original HTTP request.
// A query parameter matcher can check for one of the following:
// * Presence or absence of the query parameter in the input
// * At least one of the values for the query parameter in the input satisfies the MatcherType item
type QueryParameterMatcherType struct {
	// key
	//
	// x-displayName: "Query Parameter Name"
	// x-example: "sourceid"
	// x-required
	// A case-sensitive HTTP query parameter name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// match
	//
	// x-displayName: "Match Options"
	// x-required
	// Select Match Options.
	//
	// Types that are valid to be assigned to Match:
	//	*QueryParameterMatcherType_Presence
	//	*QueryParameterMatcherType_CheckPresent
	//	*QueryParameterMatcherType_CheckNotPresent
	//	*QueryParameterMatcherType_Item
	Match isQueryParameterMatcherType_Match `protobuf_oneof:"match"`
	// invert_matcher
	//
	// x-displayName: "Invert Query Parameter Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,4,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *QueryParameterMatcherType) Reset()      { *m = QueryParameterMatcherType{} }
func (*QueryParameterMatcherType) ProtoMessage() {}
func (*QueryParameterMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{36}
}
func (m *QueryParameterMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParameterMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *QueryParameterMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParameterMatcherType.Merge(m, src)
}
func (m *QueryParameterMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *QueryParameterMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParameterMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParameterMatcherType proto.InternalMessageInfo

type isQueryParameterMatcherType_Match interface {
	isQueryParameterMatcherType_Match()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryParameterMatcherType_Presence struct {
	Presence bool `protobuf:"varint,2,opt,name=presence,proto3,oneof" json:"presence,omitempty"`
}
type QueryParameterMatcherType_CheckPresent struct {
	CheckPresent *schema.Empty `protobuf:"bytes,7,opt,name=check_present,json=checkPresent,proto3,oneof" json:"check_present,omitempty"`
}
type QueryParameterMatcherType_CheckNotPresent struct {
	CheckNotPresent *schema.Empty `protobuf:"bytes,8,opt,name=check_not_present,json=checkNotPresent,proto3,oneof" json:"check_not_present,omitempty"`
}
type QueryParameterMatcherType_Item struct {
	Item *MatcherType `protobuf:"bytes,3,opt,name=item,proto3,oneof" json:"item,omitempty"`
}

func (*QueryParameterMatcherType_Presence) isQueryParameterMatcherType_Match()        {}
func (*QueryParameterMatcherType_CheckPresent) isQueryParameterMatcherType_Match()    {}
func (*QueryParameterMatcherType_CheckNotPresent) isQueryParameterMatcherType_Match() {}
func (*QueryParameterMatcherType_Item) isQueryParameterMatcherType_Match()            {}

func (m *QueryParameterMatcherType) GetMatch() isQueryParameterMatcherType_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *QueryParameterMatcherType) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *QueryParameterMatcherType) GetPresence() bool {
	if x, ok := m.GetMatch().(*QueryParameterMatcherType_Presence); ok {
		return x.Presence
	}
	return false
}

func (m *QueryParameterMatcherType) GetCheckPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*QueryParameterMatcherType_CheckPresent); ok {
		return x.CheckPresent
	}
	return nil
}

func (m *QueryParameterMatcherType) GetCheckNotPresent() *schema.Empty {
	if x, ok := m.GetMatch().(*QueryParameterMatcherType_CheckNotPresent); ok {
		return x.CheckNotPresent
	}
	return nil
}

func (m *QueryParameterMatcherType) GetItem() *MatcherType {
	if x, ok := m.GetMatch().(*QueryParameterMatcherType_Item); ok {
		return x.Item
	}
	return nil
}

func (m *QueryParameterMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryParameterMatcherType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryParameterMatcherType_Presence)(nil),
		(*QueryParameterMatcherType_CheckPresent)(nil),
		(*QueryParameterMatcherType_CheckNotPresent)(nil),
		(*QueryParameterMatcherType_Item)(nil),
	}
}

// HttpMethodMatcherType
//
// x-displayName: "HTTP Method Matcher"
// A http method matcher specifies a list of methods to match an input HTTP method. The match is considered successful if the input method is a member of the list.
// The result of the match based on the method list is inverted if invert_matcher is true.
type HttpMethodMatcherType struct {
	// methods
	//
	// x-displayName: "Method List"
	// List of methods values to match against.
	// x-example: "['GET', 'POST', 'DELETE']"
	Methods []schema.HttpMethod `protobuf:"varint,1,rep,packed,name=methods,proto3,enum=ves.io.schema.HttpMethod" json:"methods,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert Method Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,2,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *HttpMethodMatcherType) Reset()      { *m = HttpMethodMatcherType{} }
func (*HttpMethodMatcherType) ProtoMessage() {}
func (*HttpMethodMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{37}
}
func (m *HttpMethodMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpMethodMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpMethodMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMethodMatcherType.Merge(m, src)
}
func (m *HttpMethodMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *HttpMethodMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMethodMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMethodMatcherType proto.InternalMessageInfo

func (m *HttpMethodMatcherType) GetMethods() []schema.HttpMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *HttpMethodMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// RoleMatcherType
//
// x-displayName: "Role Matcher"
// A role matcher specifies a single value for matching an input list of roles. The match is considered successful if the specified value is present in the input
// list.
type RoleMatcherType struct {
	// match
	//
	// x-displayName: "Role"
	// x-required
	// x-example: "ves-io-monitor-role"
	// x-example: "ves-io-uam-role"
	// x-example: "custom-role-security-czar'"
	// Value of the expected role.
	Match string `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (m *RoleMatcherType) Reset()      { *m = RoleMatcherType{} }
func (*RoleMatcherType) ProtoMessage() {}
func (*RoleMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{38}
}
func (m *RoleMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RoleMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleMatcherType.Merge(m, src)
}
func (m *RoleMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *RoleMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_RoleMatcherType proto.InternalMessageInfo

func (m *RoleMatcherType) GetMatch() string {
	if m != nil {
		return m.Match
	}
	return ""
}

// StringMatcherType
//
// x-displayName: "String Matcher"
// A matcher specifies a list of values for matching an input string. The match is considered successful if the input value is present in the list. The result of
// the match is inverted if invert_matcher is true.
type StringMatcherType struct {
	// match
	//
	// x-displayName: "Exact Values"
	// x-required
	// x-example: "['new york', 'london', 'sydney', 'tokyo', 'cairo']"
	// A list of exact values to match the input against.
	Match []string `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert String Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,2,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *StringMatcherType) Reset()      { *m = StringMatcherType{} }
func (*StringMatcherType) ProtoMessage() {}
func (*StringMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{39}
}
func (m *StringMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StringMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMatcherType.Merge(m, src)
}
func (m *StringMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *StringMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_StringMatcherType proto.InternalMessageInfo

func (m *StringMatcherType) GetMatch() []string {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *StringMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// ip matcher type
//
// x-displayName: "IP Prefix Matcher"
// Match any ip prefix contained in the list of ip_prefix_sets.
// The result of the match is inverted if invert_matcher is true.
type IpMatcherType struct {
	// prefix_sets
	//
	// x-displayName: "IP Prefix Sets"
	// x-required
	// A list of references to ip_prefix_set objects.
	PrefixSets []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=prefix_sets,json=prefixSets,proto3" json:"prefix_sets,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert IP Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,2,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *IpMatcherType) Reset()      { *m = IpMatcherType{} }
func (*IpMatcherType) ProtoMessage() {}
func (*IpMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{40}
}
func (m *IpMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IpMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpMatcherType.Merge(m, src)
}
func (m *IpMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *IpMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_IpMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_IpMatcherType proto.InternalMessageInfo

func (m *IpMatcherType) GetPrefixSets() []*schema.ObjectRefType {
	if m != nil {
		return m.PrefixSets
	}
	return nil
}

func (m *IpMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// asn matcher type
//
// x-displayName: "ASN Matcher"
// Match any AS number contained in the list of bgp_asn_sets.
type AsnMatcherType struct {
	// asn_sets
	//
	// x-displayName: "BGP ASN Sets"
	// x-required
	// A list of references to bgp_asn_set objects.
	AsnSets []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=asn_sets,json=asnSets,proto3" json:"asn_sets,omitempty"`
}

func (m *AsnMatcherType) Reset()      { *m = AsnMatcherType{} }
func (*AsnMatcherType) ProtoMessage() {}
func (*AsnMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{41}
}
func (m *AsnMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AsnMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AsnMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsnMatcherType.Merge(m, src)
}
func (m *AsnMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *AsnMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_AsnMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_AsnMatcherType proto.InternalMessageInfo

func (m *AsnMatcherType) GetAsnSets() []*schema.ObjectRefType {
	if m != nil {
		return m.AsnSets
	}
	return nil
}

// port matcher type
//
// x-displayName: "Port Matcher"
// A port matcher specifies a list of port ranges as match criteria. The match is considered successful if the input port falls within any of the port ranges.
// The result of the match is inverted if invert_matcher is true.
type PortMatcherType struct {
	// port ranges
	//
	// x-displayName: "Port Ranges"
	// x-required
	// x-example: "8000-8191"
	// A list of strings, each of which is a single port value or a tuple of start and end port values separated by "-". The start and end values are considered
	// to be part of the range.
	Ports []string `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert Port Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,2,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *PortMatcherType) Reset()      { *m = PortMatcherType{} }
func (*PortMatcherType) ProtoMessage() {}
func (*PortMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{42}
}
func (m *PortMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PortMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortMatcherType.Merge(m, src)
}
func (m *PortMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *PortMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_PortMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_PortMatcherType proto.InternalMessageInfo

func (m *PortMatcherType) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *PortMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// url item
//
// x-displayName: "URL Item"
// A URL item specifies exact or regular expression match criteria for the domain and path.
type URLItem struct {
	// domain choice
	//
	// x-displayName: "Domain Match"
	// x-required
	// Select Domain Match.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*URLItem_DomainValue
	//	*URLItem_DomainRegex
	DomainChoice isURLItem_DomainChoice `protobuf_oneof:"domain_choice"`
	// path choice
	//
	// x-displayName: "Path Match"
	// Select Path Match.
	//
	// Types that are valid to be assigned to PathChoice:
	//	*URLItem_PathValue
	//	*URLItem_PathPrefix
	//	*URLItem_PathRegex
	PathChoice isURLItem_PathChoice `protobuf_oneof:"path_choice"`
}

func (m *URLItem) Reset()      { *m = URLItem{} }
func (*URLItem) ProtoMessage() {}
func (*URLItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{43}
}
func (m *URLItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *URLItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLItem.Merge(m, src)
}
func (m *URLItem) XXX_Size() int {
	return m.Size()
}
func (m *URLItem) XXX_DiscardUnknown() {
	xxx_messageInfo_URLItem.DiscardUnknown(m)
}

var xxx_messageInfo_URLItem proto.InternalMessageInfo

type isURLItem_DomainChoice interface {
	isURLItem_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isURLItem_PathChoice interface {
	isURLItem_PathChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type URLItem_DomainValue struct {
	DomainValue string `protobuf:"bytes,2,opt,name=domain_value,json=domainValue,proto3,oneof" json:"domain_value,omitempty"`
}
type URLItem_DomainRegex struct {
	DomainRegex string `protobuf:"bytes,3,opt,name=domain_regex,json=domainRegex,proto3,oneof" json:"domain_regex,omitempty"`
}
type URLItem_PathValue struct {
	PathValue string `protobuf:"bytes,5,opt,name=path_value,json=pathValue,proto3,oneof" json:"path_value,omitempty"`
}
type URLItem_PathPrefix struct {
	PathPrefix string `protobuf:"bytes,7,opt,name=path_prefix,json=pathPrefix,proto3,oneof" json:"path_prefix,omitempty"`
}
type URLItem_PathRegex struct {
	PathRegex string `protobuf:"bytes,6,opt,name=path_regex,json=pathRegex,proto3,oneof" json:"path_regex,omitempty"`
}

func (*URLItem_DomainValue) isURLItem_DomainChoice() {}
func (*URLItem_DomainRegex) isURLItem_DomainChoice() {}
func (*URLItem_PathValue) isURLItem_PathChoice()     {}
func (*URLItem_PathPrefix) isURLItem_PathChoice()    {}
func (*URLItem_PathRegex) isURLItem_PathChoice()     {}

func (m *URLItem) GetDomainChoice() isURLItem_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *URLItem) GetPathChoice() isURLItem_PathChoice {
	if m != nil {
		return m.PathChoice
	}
	return nil
}

func (m *URLItem) GetDomainValue() string {
	if x, ok := m.GetDomainChoice().(*URLItem_DomainValue); ok {
		return x.DomainValue
	}
	return ""
}

func (m *URLItem) GetDomainRegex() string {
	if x, ok := m.GetDomainChoice().(*URLItem_DomainRegex); ok {
		return x.DomainRegex
	}
	return ""
}

func (m *URLItem) GetPathValue() string {
	if x, ok := m.GetPathChoice().(*URLItem_PathValue); ok {
		return x.PathValue
	}
	return ""
}

func (m *URLItem) GetPathPrefix() string {
	if x, ok := m.GetPathChoice().(*URLItem_PathPrefix); ok {
		return x.PathPrefix
	}
	return ""
}

func (m *URLItem) GetPathRegex() string {
	if x, ok := m.GetPathChoice().(*URLItem_PathRegex); ok {
		return x.PathRegex
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*URLItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*URLItem_DomainValue)(nil),
		(*URLItem_DomainRegex)(nil),
		(*URLItem_PathValue)(nil),
		(*URLItem_PathPrefix)(nil),
		(*URLItem_PathRegex)(nil),
	}
}

// url matcher type
//
// x-displayName: "URL Matcher"
// A URL matcher specifies a list of URL items as match criteria. The match is considered successful if the input domain and path match any of the URL items.
// The result of the match is inverted if invert_matcher is true.
type URLMatcherType struct {
	// url items
	//
	// x-displayName: "URL Items"
	// x-required
	// A list of URL items used as match criteria. The match is considered successful if the domain and path match any of the URL items.
	UrlItems []*URLItem `protobuf:"bytes,1,rep,name=url_items,json=urlItems,proto3" json:"url_items,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert URL Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,2,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *URLMatcherType) Reset()      { *m = URLMatcherType{} }
func (*URLMatcherType) ProtoMessage() {}
func (*URLMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{44}
}
func (m *URLMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *URLMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLMatcherType.Merge(m, src)
}
func (m *URLMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *URLMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_URLMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_URLMatcherType proto.InternalMessageInfo

func (m *URLMatcherType) GetUrlItems() []*URLItem {
	if m != nil {
		return m.UrlItems
	}
	return nil
}

func (m *URLMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// l4 dest matcher type
//
// x-displayName: "L4 Destination Matcher"
// A L4 Destination matcher specifies a list of L4 Destinations as match criteria. The match is considered successful if the destination IP and port match any
// of the L4 Destinations.
// The result of the match is inverted if invert_matcher is true.
type L4DestMatcherType struct {
	// prefixes
	//
	// x-displayName: "L4 Destinations"
	// x-required
	// A list of L4 destinations used as match criteria. The match is considered successful if the destination IP and path match any of the L4 destinations.
	L4Dests []*schema.L4DestType `protobuf:"bytes,4,rep,name=l4_dests,json=l4Dests,proto3" json:"l4_dests,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert L4 Destination Matcher"
	// Invert the match result.
	InvertMatcher bool `protobuf:"varint,3,opt,name=invert_matcher,json=invertMatcher,proto3" json:"invert_matcher,omitempty"`
}

func (m *L4DestMatcherType) Reset()      { *m = L4DestMatcherType{} }
func (*L4DestMatcherType) ProtoMessage() {}
func (*L4DestMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{45}
}
func (m *L4DestMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L4DestMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *L4DestMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L4DestMatcherType.Merge(m, src)
}
func (m *L4DestMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *L4DestMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_L4DestMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_L4DestMatcherType proto.InternalMessageInfo

func (m *L4DestMatcherType) GetL4Dests() []*schema.L4DestType {
	if m != nil {
		return m.L4Dests
	}
	return nil
}

func (m *L4DestMatcherType) GetInvertMatcher() bool {
	if m != nil {
		return m.InvertMatcher
	}
	return false
}

// Country Code List
//
// x-displayName: "Country Codes List"
// List of Country Codes to match against.
type CountryCodeList struct {
	// country codes
	//
	// x-displayName: "Country Codes List"
	// x-example: "IN, DE"
	// x-required
	// List of Country Codes
	CountryCodes []CountryCode `protobuf:"varint,1,rep,packed,name=country_codes,json=countryCodes,proto3,enum=ves.io.schema.policy.CountryCode" json:"country_codes,omitempty"`
	// invert_matcher
	//
	// x-displayName: "Invert Match Result"
	// Invert the match result.
	InvertMatch bool `protobuf:"varint,2,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
}

func (m *CountryCodeList) Reset()      { *m = CountryCodeList{} }
func (*CountryCodeList) ProtoMessage() {}
func (*CountryCodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{46}
}
func (m *CountryCodeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountryCodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CountryCodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryCodeList.Merge(m, src)
}
func (m *CountryCodeList) XXX_Size() int {
	return m.Size()
}
func (m *CountryCodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryCodeList.DiscardUnknown(m)
}

var xxx_messageInfo_CountryCodeList proto.InternalMessageInfo

func (m *CountryCodeList) GetCountryCodes() []CountryCode {
	if m != nil {
		return m.CountryCodes
	}
	return nil
}

func (m *CountryCodeList) GetInvertMatch() bool {
	if m != nil {
		return m.InvertMatch
	}
	return false
}

// HttpHeaderName
//
// x-displayName: "Name of the field"
// Specifies the name of the field
type HttpHeaderName struct {
	// name
	//
	// x-displayName: "Header Name"
	// x-example: "X-Token"
	// x-required
	// A case-insensitive field header name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *HttpHeaderName) Reset()      { *m = HttpHeaderName{} }
func (*HttpHeaderName) ProtoMessage() {}
func (*HttpHeaderName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{47}
}
func (m *HttpHeaderName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpHeaderName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpHeaderName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpHeaderName.Merge(m, src)
}
func (m *HttpHeaderName) XXX_Size() int {
	return m.Size()
}
func (m *HttpHeaderName) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpHeaderName.DiscardUnknown(m)
}

var xxx_messageInfo_HttpHeaderName proto.InternalMessageInfo

func (m *HttpHeaderName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// HttpCookieName
//
// x-displayName: "Name of the cookie field"
// Specifies the name of the cookie field
type HttpCookieName struct {
	// name
	//
	// x-displayName: "Cookie Name"
	// x-example: "token"
	// x-required
	// A case-insensitive cookie name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *HttpCookieName) Reset()      { *m = HttpCookieName{} }
func (*HttpCookieName) ProtoMessage() {}
func (*HttpCookieName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{48}
}
func (m *HttpCookieName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpCookieName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpCookieName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpCookieName.Merge(m, src)
}
func (m *HttpCookieName) XXX_Size() int {
	return m.Size()
}
func (m *HttpCookieName) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpCookieName.DiscardUnknown(m)
}

var xxx_messageInfo_HttpCookieName proto.InternalMessageInfo

func (m *HttpCookieName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// HttpQueryParameterName
//
// x-displayName: "Key name of the query parameter"
// Specifies the key name of the query parameter
type HttpQueryParameterName struct {
	// key
	//
	// x-displayName: "Query Parameter Name"
	// x-example: "sourceid"
	// x-required
	// A case-sensitive HTTP query parameter name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *HttpQueryParameterName) Reset()      { *m = HttpQueryParameterName{} }
func (*HttpQueryParameterName) ProtoMessage() {}
func (*HttpQueryParameterName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{49}
}
func (m *HttpQueryParameterName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpQueryParameterName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpQueryParameterName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpQueryParameterName.Merge(m, src)
}
func (m *HttpQueryParameterName) XXX_Size() int {
	return m.Size()
}
func (m *HttpQueryParameterName) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpQueryParameterName.DiscardUnknown(m)
}

var xxx_messageInfo_HttpQueryParameterName proto.InternalMessageInfo

func (m *HttpQueryParameterName) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// JwtTokenAuthOptions
//
// x-displayName: "JWT Token Authentication"
// JWT token Authentication
type JwtTokenAuthOptions struct {
	// secret_key
	//
	// x-displayName: "Secret Key"
	// x-required
	// x-example: "{!<=,d_]b[UFX78T"
	// Secret Key for JWT
	SecretKey *schema.SecretType `protobuf:"bytes,1,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// Token Source
	//
	// x-displayName: "Source for the token"
	// Select the source for the token value
	//
	// Types that are valid to be assigned to TokenSource:
	//	*JwtTokenAuthOptions_Header
	//	*JwtTokenAuthOptions_Cookie
	//	*JwtTokenAuthOptions_QueryParam
	//	*JwtTokenAuthOptions_BearerToken
	TokenSource isJwtTokenAuthOptions_TokenSource `protobuf_oneof:"token_source"`
	// backup_key
	//
	// x-displayName: "Backup Key"
	// x-example: "{!<=,d_]b[UFX78T"
	// Backup JWT Key - If specified is also checked in addition to the primary secret key
	BackupKey *schema.SecretType `protobuf:"bytes,7,opt,name=backup_key,json=backupKey,proto3" json:"backup_key,omitempty"`
}

func (m *JwtTokenAuthOptions) Reset()      { *m = JwtTokenAuthOptions{} }
func (*JwtTokenAuthOptions) ProtoMessage() {}
func (*JwtTokenAuthOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{50}
}
func (m *JwtTokenAuthOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JwtTokenAuthOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JwtTokenAuthOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtTokenAuthOptions.Merge(m, src)
}
func (m *JwtTokenAuthOptions) XXX_Size() int {
	return m.Size()
}
func (m *JwtTokenAuthOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtTokenAuthOptions.DiscardUnknown(m)
}

var xxx_messageInfo_JwtTokenAuthOptions proto.InternalMessageInfo

type isJwtTokenAuthOptions_TokenSource interface {
	isJwtTokenAuthOptions_TokenSource()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type JwtTokenAuthOptions_Header struct {
	Header *HttpHeaderName `protobuf:"bytes,3,opt,name=header,proto3,oneof" json:"header,omitempty"`
}
type JwtTokenAuthOptions_Cookie struct {
	Cookie *HttpCookieName `protobuf:"bytes,4,opt,name=cookie,proto3,oneof" json:"cookie,omitempty"`
}
type JwtTokenAuthOptions_QueryParam struct {
	QueryParam *HttpQueryParameterName `protobuf:"bytes,5,opt,name=query_param,json=queryParam,proto3,oneof" json:"query_param,omitempty"`
}
type JwtTokenAuthOptions_BearerToken struct {
	BearerToken *schema.Empty `protobuf:"bytes,6,opt,name=bearer_token,json=bearerToken,proto3,oneof" json:"bearer_token,omitempty"`
}

func (*JwtTokenAuthOptions_Header) isJwtTokenAuthOptions_TokenSource()      {}
func (*JwtTokenAuthOptions_Cookie) isJwtTokenAuthOptions_TokenSource()      {}
func (*JwtTokenAuthOptions_QueryParam) isJwtTokenAuthOptions_TokenSource()  {}
func (*JwtTokenAuthOptions_BearerToken) isJwtTokenAuthOptions_TokenSource() {}

func (m *JwtTokenAuthOptions) GetTokenSource() isJwtTokenAuthOptions_TokenSource {
	if m != nil {
		return m.TokenSource
	}
	return nil
}

func (m *JwtTokenAuthOptions) GetSecretKey() *schema.SecretType {
	if m != nil {
		return m.SecretKey
	}
	return nil
}

func (m *JwtTokenAuthOptions) GetHeader() *HttpHeaderName {
	if x, ok := m.GetTokenSource().(*JwtTokenAuthOptions_Header); ok {
		return x.Header
	}
	return nil
}

func (m *JwtTokenAuthOptions) GetCookie() *HttpCookieName {
	if x, ok := m.GetTokenSource().(*JwtTokenAuthOptions_Cookie); ok {
		return x.Cookie
	}
	return nil
}

func (m *JwtTokenAuthOptions) GetQueryParam() *HttpQueryParameterName {
	if x, ok := m.GetTokenSource().(*JwtTokenAuthOptions_QueryParam); ok {
		return x.QueryParam
	}
	return nil
}

func (m *JwtTokenAuthOptions) GetBearerToken() *schema.Empty {
	if x, ok := m.GetTokenSource().(*JwtTokenAuthOptions_BearerToken); ok {
		return x.BearerToken
	}
	return nil
}

func (m *JwtTokenAuthOptions) GetBackupKey() *schema.SecretType {
	if m != nil {
		return m.BackupKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JwtTokenAuthOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JwtTokenAuthOptions_Header)(nil),
		(*JwtTokenAuthOptions_Cookie)(nil),
		(*JwtTokenAuthOptions_QueryParam)(nil),
		(*JwtTokenAuthOptions_BearerToken)(nil),
	}
}

// IP Threat Category List Type
//
// x-displayName: "IP Threat Category List Type"
// List of ip threat categories
type IPThreatCategoryListType struct {
	// IP Threat Categories
	//
	// x-displayName: "List of IP Threat Categories to choose"
	// x-required
	// The IP threat categories is obtained from the list and is used to auto-generate equivalent label selection expressions
	IpThreatCategories []IPThreatCategory `protobuf:"varint,1,rep,packed,name=ip_threat_categories,json=ipThreatCategories,proto3,enum=ves.io.schema.policy.IPThreatCategory" json:"ip_threat_categories,omitempty"`
}

func (m *IPThreatCategoryListType) Reset()      { *m = IPThreatCategoryListType{} }
func (*IPThreatCategoryListType) ProtoMessage() {}
func (*IPThreatCategoryListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{51}
}
func (m *IPThreatCategoryListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPThreatCategoryListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IPThreatCategoryListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPThreatCategoryListType.Merge(m, src)
}
func (m *IPThreatCategoryListType) XXX_Size() int {
	return m.Size()
}
func (m *IPThreatCategoryListType) XXX_DiscardUnknown() {
	xxx_messageInfo_IPThreatCategoryListType.DiscardUnknown(m)
}

var xxx_messageInfo_IPThreatCategoryListType proto.InternalMessageInfo

func (m *IPThreatCategoryListType) GetIpThreatCategories() []IPThreatCategory {
	if m != nil {
		return m.IpThreatCategories
	}
	return nil
}

// Client Matcher
//
// x-displayName: "Client Matcher"
// Client conditions for matching a rule
type ClientMatcher struct {
	// client choice
	//
	// x-displayName: "Client Selection"
	// x-required
	// Select clients for which the rule will be applied. The actual names of the client are extracted from its TLS certificate.
	//
	// Types that are valid to be assigned to ClientChoice:
	//	*ClientMatcher_AnyClient
	//	*ClientMatcher_IpThreatCategoryList
	//	*ClientMatcher_ClientSelector
	ClientChoice isClientMatcher_ClientChoice `protobuf_oneof:"client_choice"`
	// ip asn choice
	//
	// x-displayName: "Source IP/Asn Match"
	// x-required
	// Match source IP address/ASN  of the request
	//
	// Types that are valid to be assigned to IpAsnChoice:
	//	*ClientMatcher_AnyIp
	//	*ClientMatcher_IpPrefixList
	//	*ClientMatcher_IpMatcher
	//	*ClientMatcher_AsnList
	//	*ClientMatcher_AsnMatcher
	IpAsnChoice isClientMatcher_IpAsnChoice `protobuf_oneof:"ip_asn_choice"`
	// TLS JA3 fingerprint matcher
	//
	// x-displayName: "TLS Fingerprint Matcher"
	// TLS JA3 fingerprints to be matched.
	// The predicate evaluates to true if the TLS fingerprint matches any of the exact values or classes of known TLS fingerprints.
	TlsFingerprintMatcher *TlsFingerprintMatcherType `protobuf:"bytes,13,opt,name=tls_fingerprint_matcher,json=tlsFingerprintMatcher,proto3" json:"tls_fingerprint_matcher,omitempty"`
}

func (m *ClientMatcher) Reset()      { *m = ClientMatcher{} }
func (*ClientMatcher) ProtoMessage() {}
func (*ClientMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{52}
}
func (m *ClientMatcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMatcher.Merge(m, src)
}
func (m *ClientMatcher) XXX_Size() int {
	return m.Size()
}
func (m *ClientMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMatcher proto.InternalMessageInfo

type isClientMatcher_ClientChoice interface {
	isClientMatcher_ClientChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isClientMatcher_IpAsnChoice interface {
	isClientMatcher_IpAsnChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientMatcher_AnyClient struct {
	AnyClient *schema.Empty `protobuf:"bytes,2,opt,name=any_client,json=anyClient,proto3,oneof" json:"any_client,omitempty"`
}
type ClientMatcher_IpThreatCategoryList struct {
	IpThreatCategoryList *IPThreatCategoryListType `protobuf:"bytes,3,opt,name=ip_threat_category_list,json=ipThreatCategoryList,proto3,oneof" json:"ip_threat_category_list,omitempty"`
}
type ClientMatcher_ClientSelector struct {
	ClientSelector *schema.LabelSelectorType `protobuf:"bytes,4,opt,name=client_selector,json=clientSelector,proto3,oneof" json:"client_selector,omitempty"`
}
type ClientMatcher_AnyIp struct {
	AnyIp *schema.Empty `protobuf:"bytes,8,opt,name=any_ip,json=anyIp,proto3,oneof" json:"any_ip,omitempty"`
}
type ClientMatcher_IpPrefixList struct {
	IpPrefixList *PrefixMatchList `protobuf:"bytes,9,opt,name=ip_prefix_list,json=ipPrefixList,proto3,oneof" json:"ip_prefix_list,omitempty"`
}
type ClientMatcher_IpMatcher struct {
	IpMatcher *IpMatcherType `protobuf:"bytes,10,opt,name=ip_matcher,json=ipMatcher,proto3,oneof" json:"ip_matcher,omitempty"`
}
type ClientMatcher_AsnList struct {
	AsnList *AsnMatchList `protobuf:"bytes,11,opt,name=asn_list,json=asnList,proto3,oneof" json:"asn_list,omitempty"`
}
type ClientMatcher_AsnMatcher struct {
	AsnMatcher *AsnMatcherType `protobuf:"bytes,12,opt,name=asn_matcher,json=asnMatcher,proto3,oneof" json:"asn_matcher,omitempty"`
}

func (*ClientMatcher_AnyClient) isClientMatcher_ClientChoice()            {}
func (*ClientMatcher_IpThreatCategoryList) isClientMatcher_ClientChoice() {}
func (*ClientMatcher_ClientSelector) isClientMatcher_ClientChoice()       {}
func (*ClientMatcher_AnyIp) isClientMatcher_IpAsnChoice()                 {}
func (*ClientMatcher_IpPrefixList) isClientMatcher_IpAsnChoice()          {}
func (*ClientMatcher_IpMatcher) isClientMatcher_IpAsnChoice()             {}
func (*ClientMatcher_AsnList) isClientMatcher_IpAsnChoice()               {}
func (*ClientMatcher_AsnMatcher) isClientMatcher_IpAsnChoice()            {}

func (m *ClientMatcher) GetClientChoice() isClientMatcher_ClientChoice {
	if m != nil {
		return m.ClientChoice
	}
	return nil
}
func (m *ClientMatcher) GetIpAsnChoice() isClientMatcher_IpAsnChoice {
	if m != nil {
		return m.IpAsnChoice
	}
	return nil
}

func (m *ClientMatcher) GetAnyClient() *schema.Empty {
	if x, ok := m.GetClientChoice().(*ClientMatcher_AnyClient); ok {
		return x.AnyClient
	}
	return nil
}

func (m *ClientMatcher) GetIpThreatCategoryList() *IPThreatCategoryListType {
	if x, ok := m.GetClientChoice().(*ClientMatcher_IpThreatCategoryList); ok {
		return x.IpThreatCategoryList
	}
	return nil
}

func (m *ClientMatcher) GetClientSelector() *schema.LabelSelectorType {
	if x, ok := m.GetClientChoice().(*ClientMatcher_ClientSelector); ok {
		return x.ClientSelector
	}
	return nil
}

func (m *ClientMatcher) GetAnyIp() *schema.Empty {
	if x, ok := m.GetIpAsnChoice().(*ClientMatcher_AnyIp); ok {
		return x.AnyIp
	}
	return nil
}

func (m *ClientMatcher) GetIpPrefixList() *PrefixMatchList {
	if x, ok := m.GetIpAsnChoice().(*ClientMatcher_IpPrefixList); ok {
		return x.IpPrefixList
	}
	return nil
}

func (m *ClientMatcher) GetIpMatcher() *IpMatcherType {
	if x, ok := m.GetIpAsnChoice().(*ClientMatcher_IpMatcher); ok {
		return x.IpMatcher
	}
	return nil
}

func (m *ClientMatcher) GetAsnList() *AsnMatchList {
	if x, ok := m.GetIpAsnChoice().(*ClientMatcher_AsnList); ok {
		return x.AsnList
	}
	return nil
}

func (m *ClientMatcher) GetAsnMatcher() *AsnMatcherType {
	if x, ok := m.GetIpAsnChoice().(*ClientMatcher_AsnMatcher); ok {
		return x.AsnMatcher
	}
	return nil
}

func (m *ClientMatcher) GetTlsFingerprintMatcher() *TlsFingerprintMatcherType {
	if m != nil {
		return m.TlsFingerprintMatcher
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClientMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClientMatcher_AnyClient)(nil),
		(*ClientMatcher_IpThreatCategoryList)(nil),
		(*ClientMatcher_ClientSelector)(nil),
		(*ClientMatcher_AnyIp)(nil),
		(*ClientMatcher_IpPrefixList)(nil),
		(*ClientMatcher_IpMatcher)(nil),
		(*ClientMatcher_AsnList)(nil),
		(*ClientMatcher_AsnMatcher)(nil),
	}
}

// Request Matcher
//
// x-displayName: "Request Matcher"
// Request conditions for matching a rule
type RequestMatcher struct {
	// query params
	//
	// x-displayName: "HTTP Query Parameters"
	// A list of predicates for all query parameters that need to be matched. The criteria for matching each query parameter are described in individual instances
	// of QueryParameterMatcherType. The actual query parameter values are extracted from the request API as a list of strings for each query parameter name.
	// Note that all specified query parameter predicates must evaluate to true.
	QueryParams []*QueryParameterMatcherType `protobuf:"bytes,1,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	// headers
	//
	// x-displayName: "HTTP Headers"
	// A list of predicates for various HTTP headers that need to match. The criteria for matching each HTTP header are described in individual HeaderMatcherType
	// instances. The actual HTTP header values are extracted from the request API as a list of strings for each HTTP header type.
	// Note that all specified header predicates must evaluate to true.
	Headers []*HeaderMatcherType `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	// JWT claims
	//
	// x-displayName: "JWT Claims"
	// A list of predicates for various JWT claims that need to match. The criteria for matching each JWT claim are described in individual JWTClaimMatcherType
	// instances. The actual JWT claims values are extracted from the JWT payload as a list of strings.
	// Note that all specified JWT claim predicates must evaluate to true.
	// Note that this feature only works on LBs with JWT Validation feature enabled.
	JwtClaims []*JWTClaimMatcherType `protobuf:"bytes,4,rep,name=jwt_claims,json=jwtClaims,proto3" json:"jwt_claims,omitempty"`
	// cookie matchers
	//
	// x-displayName: "Cookie Matchers"
	// A list of predicates for all cookies that need to be matched. The criteria for matching each cookie is described in individual instances
	// of CookieMatcherType. The actual cookie values are extracted from the request API as a list of strings for each cookie name.
	// Note that all specified cookie matcher predicates must evaluate to true.
	CookieMatchers []*CookieMatcherType `protobuf:"bytes,3,rep,name=cookie_matchers,json=cookieMatchers,proto3" json:"cookie_matchers,omitempty"`
}

func (m *RequestMatcher) Reset()      { *m = RequestMatcher{} }
func (*RequestMatcher) ProtoMessage() {}
func (*RequestMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{53}
}
func (m *RequestMatcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RequestMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMatcher.Merge(m, src)
}
func (m *RequestMatcher) XXX_Size() int {
	return m.Size()
}
func (m *RequestMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMatcher proto.InternalMessageInfo

func (m *RequestMatcher) GetQueryParams() []*QueryParameterMatcherType {
	if m != nil {
		return m.QueryParams
	}
	return nil
}

func (m *RequestMatcher) GetHeaders() []*HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RequestMatcher) GetJwtClaims() []*JWTClaimMatcherType {
	if m != nil {
		return m.JwtClaims
	}
	return nil
}

func (m *RequestMatcher) GetCookieMatchers() []*CookieMatcherType {
	if m != nil {
		return m.CookieMatchers
	}
	return nil
}

// RequestConstraintType
//
// x-displayName: "Request Constraints"
type RequestConstraintType struct {
	// max_cookie_count_choice
	//
	// x-displayName: "Max Number of Cookies"
	// x-required
	// Match on the number of cookies the request contains
	//
	// Types that are valid to be assigned to MaxCookieCountChoice:
	//	*RequestConstraintType_MaxCookieCountNone
	//	*RequestConstraintType_MaxCookieCountExceeds
	MaxCookieCountChoice isRequestConstraintType_MaxCookieCountChoice `protobuf_oneof:"max_cookie_count_choice"`
	// max_cookie_key_size_choice
	//
	// x-displayName: "Max Cookie Name Size"
	// x-required
	// Match on the size of the cookie name. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxCookieKeySizeChoice:
	//	*RequestConstraintType_MaxCookieKeySizeNone
	//	*RequestConstraintType_MaxCookieKeySizeExceeds
	MaxCookieKeySizeChoice isRequestConstraintType_MaxCookieKeySizeChoice `protobuf_oneof:"max_cookie_key_size_choice"`
	// max_cookie_value_size_choice
	//
	// x-displayName: "Max Cookie Value Size"
	// x-required
	// Match on the size of the cookie value. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxCookieValueSizeChoice:
	//	*RequestConstraintType_MaxCookieValueSizeNone
	//	*RequestConstraintType_MaxCookieValueSizeExceeds
	MaxCookieValueSizeChoice isRequestConstraintType_MaxCookieValueSizeChoice `protobuf_oneof:"max_cookie_value_size_choice"`
	// max_header_count_choice
	//
	// x-displayName: "Max Number of Headers"
	// x-required
	// Match on the number of headers the request contains
	//
	// Types that are valid to be assigned to MaxHeaderCountChoice:
	//	*RequestConstraintType_MaxHeaderCountNone
	//	*RequestConstraintType_MaxHeaderCountExceeds
	MaxHeaderCountChoice isRequestConstraintType_MaxHeaderCountChoice `protobuf_oneof:"max_header_count_choice"`
	// max_header_key_size_choice
	//
	// x-displayName: "Max Header Name Size"
	// x-required
	// Match on the size of the header name. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxHeaderKeySizeChoice:
	//	*RequestConstraintType_MaxHeaderKeySizeNone
	//	*RequestConstraintType_MaxHeaderKeySizeExceeds
	MaxHeaderKeySizeChoice isRequestConstraintType_MaxHeaderKeySizeChoice `protobuf_oneof:"max_header_key_size_choice"`
	// max_header_value_size_choice
	//
	// x-displayName: "Max Header Value Size"
	// x-required
	// Match on the size of the header value. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxHeaderValueSizeChoice:
	//	*RequestConstraintType_MaxHeaderValueSizeNone
	//	*RequestConstraintType_MaxHeaderValueSizeExceeds
	MaxHeaderValueSizeChoice isRequestConstraintType_MaxHeaderValueSizeChoice `protobuf_oneof:"max_header_value_size_choice"`
	// max_url_size_choice
	//
	// x-displayName: "Max URL Size"
	// x-required
	// Match on the size of the URL. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxUrlSizeChoice:
	//	*RequestConstraintType_MaxUrlSizeNone
	//	*RequestConstraintType_MaxUrlSizeExceeds
	MaxUrlSizeChoice isRequestConstraintType_MaxUrlSizeChoice `protobuf_oneof:"max_url_size_choice"`
	// max_query_size_choice
	//
	// x-displayName: "Max Query Size in URL"
	// x-required
	// Match on the size of the query string of the URL. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxQuerySizeChoice:
	//	*RequestConstraintType_MaxQuerySizeNone
	//	*RequestConstraintType_MaxQuerySizeExceeds
	MaxQuerySizeChoice isRequestConstraintType_MaxQuerySizeChoice `protobuf_oneof:"max_query_size_choice"`
	// max_request_line_size_choice
	//
	// x-displayName: "Max Request Line Size"
	// x-required
	// Match on the size of the Request Line. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxRequestLineSizeChoice:
	//	*RequestConstraintType_MaxRequestLineSizeNone
	//	*RequestConstraintType_MaxRequestLineSizeExceeds
	MaxRequestLineSizeChoice isRequestConstraintType_MaxRequestLineSizeChoice `protobuf_oneof:"max_request_line_size_choice"`
	// max_request_size_choice
	//
	// x-displayName: "Max Request Size"
	// x-required
	// Match on the size of the Request (Request Line + HTTP Request Headers). It doesn't include the request body. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxRequestSizeChoice:
	//	*RequestConstraintType_MaxRequestSizeNone
	//	*RequestConstraintType_MaxRequestSizeExceeds
	MaxRequestSizeChoice isRequestConstraintType_MaxRequestSizeChoice `protobuf_oneof:"max_request_size_choice"`
	// max_parameter_count_choice
	//
	// x-displayName: "Max Parameter Count Size"
	// x-required
	// Match on the size of the Parameter Count, which will apply to Query Param and POST Request Body Param each. For example, max parameter count of 4, will match on 4 query params and 4 POST request body params. Body of the POST Request will be parsed for parameters when Content-Type is application/x-www-form-urlencoded.
	//
	// Types that are valid to be assigned to MaxParameterCountChoice:
	//	*RequestConstraintType_MaxParameterCountNone
	//	*RequestConstraintType_MaxParameterCountExceeds
	MaxParameterCountChoice isRequestConstraintType_MaxParameterCountChoice `protobuf_oneof:"max_parameter_count_choice"`
	// max_parameter_name_size_choice
	//
	// x-displayName: "Max Parameter Name Size"
	// x-required
	// Match on the size of the Parameter Name, which will apply to Query Param and POST Request Body Param each. Body of the POST Request will be parsed for parameters when Content-Type is application/x-www-form-urlencoded. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxParameterNameSizeChoice:
	//	*RequestConstraintType_MaxParameterNameSizeNone
	//	*RequestConstraintType_MaxParameterNameSizeExceeds
	MaxParameterNameSizeChoice isRequestConstraintType_MaxParameterNameSizeChoice `protobuf_oneof:"max_parameter_name_size_choice"`
	// max_parameter_value_size_choice
	//
	// x-displayName: "Max Parameter Value Size"
	// x-required
	// Match on the size of the Parameter Value, which will apply to Query Param and POST Request Body Param each. Body of the POST Request will be parsed for parameters when Content-Type is application/x-www-form-urlencoded. Should be defined in bytes.
	//
	// Types that are valid to be assigned to MaxParameterValueSizeChoice:
	//	*RequestConstraintType_MaxParameterValueSizeNone
	//	*RequestConstraintType_MaxParameterValueSizeExceeds
	MaxParameterValueSizeChoice isRequestConstraintType_MaxParameterValueSizeChoice `protobuf_oneof:"max_parameter_value_size_choice"`
}

func (m *RequestConstraintType) Reset()      { *m = RequestConstraintType{} }
func (*RequestConstraintType) ProtoMessage() {}
func (*RequestConstraintType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{54}
}
func (m *RequestConstraintType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestConstraintType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RequestConstraintType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestConstraintType.Merge(m, src)
}
func (m *RequestConstraintType) XXX_Size() int {
	return m.Size()
}
func (m *RequestConstraintType) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestConstraintType.DiscardUnknown(m)
}

var xxx_messageInfo_RequestConstraintType proto.InternalMessageInfo

type isRequestConstraintType_MaxCookieCountChoice interface {
	isRequestConstraintType_MaxCookieCountChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxCookieKeySizeChoice interface {
	isRequestConstraintType_MaxCookieKeySizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxCookieValueSizeChoice interface {
	isRequestConstraintType_MaxCookieValueSizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxHeaderCountChoice interface {
	isRequestConstraintType_MaxHeaderCountChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxHeaderKeySizeChoice interface {
	isRequestConstraintType_MaxHeaderKeySizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxHeaderValueSizeChoice interface {
	isRequestConstraintType_MaxHeaderValueSizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxUrlSizeChoice interface {
	isRequestConstraintType_MaxUrlSizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxQuerySizeChoice interface {
	isRequestConstraintType_MaxQuerySizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxRequestLineSizeChoice interface {
	isRequestConstraintType_MaxRequestLineSizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxRequestSizeChoice interface {
	isRequestConstraintType_MaxRequestSizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxParameterCountChoice interface {
	isRequestConstraintType_MaxParameterCountChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxParameterNameSizeChoice interface {
	isRequestConstraintType_MaxParameterNameSizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRequestConstraintType_MaxParameterValueSizeChoice interface {
	isRequestConstraintType_MaxParameterValueSizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestConstraintType_MaxCookieCountNone struct {
	MaxCookieCountNone *schema.Empty `protobuf:"bytes,2,opt,name=max_cookie_count_none,json=maxCookieCountNone,proto3,oneof" json:"max_cookie_count_none,omitempty"`
}
type RequestConstraintType_MaxCookieCountExceeds struct {
	MaxCookieCountExceeds uint32 `protobuf:"varint,3,opt,name=max_cookie_count_exceeds,json=maxCookieCountExceeds,proto3,oneof" json:"max_cookie_count_exceeds,omitempty"`
}
type RequestConstraintType_MaxCookieKeySizeNone struct {
	MaxCookieKeySizeNone *schema.Empty `protobuf:"bytes,5,opt,name=max_cookie_key_size_none,json=maxCookieKeySizeNone,proto3,oneof" json:"max_cookie_key_size_none,omitempty"`
}
type RequestConstraintType_MaxCookieKeySizeExceeds struct {
	MaxCookieKeySizeExceeds uint32 `protobuf:"varint,6,opt,name=max_cookie_key_size_exceeds,json=maxCookieKeySizeExceeds,proto3,oneof" json:"max_cookie_key_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxCookieValueSizeNone struct {
	MaxCookieValueSizeNone *schema.Empty `protobuf:"bytes,8,opt,name=max_cookie_value_size_none,json=maxCookieValueSizeNone,proto3,oneof" json:"max_cookie_value_size_none,omitempty"`
}
type RequestConstraintType_MaxCookieValueSizeExceeds struct {
	MaxCookieValueSizeExceeds uint32 `protobuf:"varint,9,opt,name=max_cookie_value_size_exceeds,json=maxCookieValueSizeExceeds,proto3,oneof" json:"max_cookie_value_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxHeaderCountNone struct {
	MaxHeaderCountNone *schema.Empty `protobuf:"bytes,11,opt,name=max_header_count_none,json=maxHeaderCountNone,proto3,oneof" json:"max_header_count_none,omitempty"`
}
type RequestConstraintType_MaxHeaderCountExceeds struct {
	MaxHeaderCountExceeds uint32 `protobuf:"varint,12,opt,name=max_header_count_exceeds,json=maxHeaderCountExceeds,proto3,oneof" json:"max_header_count_exceeds,omitempty"`
}
type RequestConstraintType_MaxHeaderKeySizeNone struct {
	MaxHeaderKeySizeNone *schema.Empty `protobuf:"bytes,14,opt,name=max_header_key_size_none,json=maxHeaderKeySizeNone,proto3,oneof" json:"max_header_key_size_none,omitempty"`
}
type RequestConstraintType_MaxHeaderKeySizeExceeds struct {
	MaxHeaderKeySizeExceeds uint32 `protobuf:"varint,15,opt,name=max_header_key_size_exceeds,json=maxHeaderKeySizeExceeds,proto3,oneof" json:"max_header_key_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxHeaderValueSizeNone struct {
	MaxHeaderValueSizeNone *schema.Empty `protobuf:"bytes,17,opt,name=max_header_value_size_none,json=maxHeaderValueSizeNone,proto3,oneof" json:"max_header_value_size_none,omitempty"`
}
type RequestConstraintType_MaxHeaderValueSizeExceeds struct {
	MaxHeaderValueSizeExceeds uint32 `protobuf:"varint,18,opt,name=max_header_value_size_exceeds,json=maxHeaderValueSizeExceeds,proto3,oneof" json:"max_header_value_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxUrlSizeNone struct {
	MaxUrlSizeNone *schema.Empty `protobuf:"bytes,20,opt,name=max_url_size_none,json=maxUrlSizeNone,proto3,oneof" json:"max_url_size_none,omitempty"`
}
type RequestConstraintType_MaxUrlSizeExceeds struct {
	MaxUrlSizeExceeds uint32 `protobuf:"varint,21,opt,name=max_url_size_exceeds,json=maxUrlSizeExceeds,proto3,oneof" json:"max_url_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxQuerySizeNone struct {
	MaxQuerySizeNone *schema.Empty `protobuf:"bytes,23,opt,name=max_query_size_none,json=maxQuerySizeNone,proto3,oneof" json:"max_query_size_none,omitempty"`
}
type RequestConstraintType_MaxQuerySizeExceeds struct {
	MaxQuerySizeExceeds uint32 `protobuf:"varint,24,opt,name=max_query_size_exceeds,json=maxQuerySizeExceeds,proto3,oneof" json:"max_query_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxRequestLineSizeNone struct {
	MaxRequestLineSizeNone *schema.Empty `protobuf:"bytes,26,opt,name=max_request_line_size_none,json=maxRequestLineSizeNone,proto3,oneof" json:"max_request_line_size_none,omitempty"`
}
type RequestConstraintType_MaxRequestLineSizeExceeds struct {
	MaxRequestLineSizeExceeds uint32 `protobuf:"varint,27,opt,name=max_request_line_size_exceeds,json=maxRequestLineSizeExceeds,proto3,oneof" json:"max_request_line_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxRequestSizeNone struct {
	MaxRequestSizeNone *schema.Empty `protobuf:"bytes,29,opt,name=max_request_size_none,json=maxRequestSizeNone,proto3,oneof" json:"max_request_size_none,omitempty"`
}
type RequestConstraintType_MaxRequestSizeExceeds struct {
	MaxRequestSizeExceeds uint32 `protobuf:"varint,30,opt,name=max_request_size_exceeds,json=maxRequestSizeExceeds,proto3,oneof" json:"max_request_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxParameterCountNone struct {
	MaxParameterCountNone *schema.Empty `protobuf:"bytes,38,opt,name=max_parameter_count_none,json=maxParameterCountNone,proto3,oneof" json:"max_parameter_count_none,omitempty"`
}
type RequestConstraintType_MaxParameterCountExceeds struct {
	MaxParameterCountExceeds uint32 `protobuf:"varint,39,opt,name=max_parameter_count_exceeds,json=maxParameterCountExceeds,proto3,oneof" json:"max_parameter_count_exceeds,omitempty"`
}
type RequestConstraintType_MaxParameterNameSizeNone struct {
	MaxParameterNameSizeNone *schema.Empty `protobuf:"bytes,41,opt,name=max_parameter_name_size_none,json=maxParameterNameSizeNone,proto3,oneof" json:"max_parameter_name_size_none,omitempty"`
}
type RequestConstraintType_MaxParameterNameSizeExceeds struct {
	MaxParameterNameSizeExceeds uint32 `protobuf:"varint,42,opt,name=max_parameter_name_size_exceeds,json=maxParameterNameSizeExceeds,proto3,oneof" json:"max_parameter_name_size_exceeds,omitempty"`
}
type RequestConstraintType_MaxParameterValueSizeNone struct {
	MaxParameterValueSizeNone *schema.Empty `protobuf:"bytes,44,opt,name=max_parameter_value_size_none,json=maxParameterValueSizeNone,proto3,oneof" json:"max_parameter_value_size_none,omitempty"`
}
type RequestConstraintType_MaxParameterValueSizeExceeds struct {
	MaxParameterValueSizeExceeds uint32 `protobuf:"varint,45,opt,name=max_parameter_value_size_exceeds,json=maxParameterValueSizeExceeds,proto3,oneof" json:"max_parameter_value_size_exceeds,omitempty"`
}

func (*RequestConstraintType_MaxCookieCountNone) isRequestConstraintType_MaxCookieCountChoice()     {}
func (*RequestConstraintType_MaxCookieCountExceeds) isRequestConstraintType_MaxCookieCountChoice()  {}
func (*RequestConstraintType_MaxCookieKeySizeNone) isRequestConstraintType_MaxCookieKeySizeChoice() {}
func (*RequestConstraintType_MaxCookieKeySizeExceeds) isRequestConstraintType_MaxCookieKeySizeChoice() {
}
func (*RequestConstraintType_MaxCookieValueSizeNone) isRequestConstraintType_MaxCookieValueSizeChoice() {
}
func (*RequestConstraintType_MaxCookieValueSizeExceeds) isRequestConstraintType_MaxCookieValueSizeChoice() {
}
func (*RequestConstraintType_MaxHeaderCountNone) isRequestConstraintType_MaxHeaderCountChoice()     {}
func (*RequestConstraintType_MaxHeaderCountExceeds) isRequestConstraintType_MaxHeaderCountChoice()  {}
func (*RequestConstraintType_MaxHeaderKeySizeNone) isRequestConstraintType_MaxHeaderKeySizeChoice() {}
func (*RequestConstraintType_MaxHeaderKeySizeExceeds) isRequestConstraintType_MaxHeaderKeySizeChoice() {
}
func (*RequestConstraintType_MaxHeaderValueSizeNone) isRequestConstraintType_MaxHeaderValueSizeChoice() {
}
func (*RequestConstraintType_MaxHeaderValueSizeExceeds) isRequestConstraintType_MaxHeaderValueSizeChoice() {
}
func (*RequestConstraintType_MaxUrlSizeNone) isRequestConstraintType_MaxUrlSizeChoice()        {}
func (*RequestConstraintType_MaxUrlSizeExceeds) isRequestConstraintType_MaxUrlSizeChoice()     {}
func (*RequestConstraintType_MaxQuerySizeNone) isRequestConstraintType_MaxQuerySizeChoice()    {}
func (*RequestConstraintType_MaxQuerySizeExceeds) isRequestConstraintType_MaxQuerySizeChoice() {}
func (*RequestConstraintType_MaxRequestLineSizeNone) isRequestConstraintType_MaxRequestLineSizeChoice() {
}
func (*RequestConstraintType_MaxRequestLineSizeExceeds) isRequestConstraintType_MaxRequestLineSizeChoice() {
}
func (*RequestConstraintType_MaxRequestSizeNone) isRequestConstraintType_MaxRequestSizeChoice()    {}
func (*RequestConstraintType_MaxRequestSizeExceeds) isRequestConstraintType_MaxRequestSizeChoice() {}
func (*RequestConstraintType_MaxParameterCountNone) isRequestConstraintType_MaxParameterCountChoice() {
}
func (*RequestConstraintType_MaxParameterCountExceeds) isRequestConstraintType_MaxParameterCountChoice() {
}
func (*RequestConstraintType_MaxParameterNameSizeNone) isRequestConstraintType_MaxParameterNameSizeChoice() {
}
func (*RequestConstraintType_MaxParameterNameSizeExceeds) isRequestConstraintType_MaxParameterNameSizeChoice() {
}
func (*RequestConstraintType_MaxParameterValueSizeNone) isRequestConstraintType_MaxParameterValueSizeChoice() {
}
func (*RequestConstraintType_MaxParameterValueSizeExceeds) isRequestConstraintType_MaxParameterValueSizeChoice() {
}

func (m *RequestConstraintType) GetMaxCookieCountChoice() isRequestConstraintType_MaxCookieCountChoice {
	if m != nil {
		return m.MaxCookieCountChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxCookieKeySizeChoice() isRequestConstraintType_MaxCookieKeySizeChoice {
	if m != nil {
		return m.MaxCookieKeySizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxCookieValueSizeChoice() isRequestConstraintType_MaxCookieValueSizeChoice {
	if m != nil {
		return m.MaxCookieValueSizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxHeaderCountChoice() isRequestConstraintType_MaxHeaderCountChoice {
	if m != nil {
		return m.MaxHeaderCountChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxHeaderKeySizeChoice() isRequestConstraintType_MaxHeaderKeySizeChoice {
	if m != nil {
		return m.MaxHeaderKeySizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxHeaderValueSizeChoice() isRequestConstraintType_MaxHeaderValueSizeChoice {
	if m != nil {
		return m.MaxHeaderValueSizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxUrlSizeChoice() isRequestConstraintType_MaxUrlSizeChoice {
	if m != nil {
		return m.MaxUrlSizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxQuerySizeChoice() isRequestConstraintType_MaxQuerySizeChoice {
	if m != nil {
		return m.MaxQuerySizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxRequestLineSizeChoice() isRequestConstraintType_MaxRequestLineSizeChoice {
	if m != nil {
		return m.MaxRequestLineSizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxRequestSizeChoice() isRequestConstraintType_MaxRequestSizeChoice {
	if m != nil {
		return m.MaxRequestSizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxParameterCountChoice() isRequestConstraintType_MaxParameterCountChoice {
	if m != nil {
		return m.MaxParameterCountChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxParameterNameSizeChoice() isRequestConstraintType_MaxParameterNameSizeChoice {
	if m != nil {
		return m.MaxParameterNameSizeChoice
	}
	return nil
}
func (m *RequestConstraintType) GetMaxParameterValueSizeChoice() isRequestConstraintType_MaxParameterValueSizeChoice {
	if m != nil {
		return m.MaxParameterValueSizeChoice
	}
	return nil
}

func (m *RequestConstraintType) GetMaxCookieCountNone() *schema.Empty {
	if x, ok := m.GetMaxCookieCountChoice().(*RequestConstraintType_MaxCookieCountNone); ok {
		return x.MaxCookieCountNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxCookieCountExceeds() uint32 {
	if x, ok := m.GetMaxCookieCountChoice().(*RequestConstraintType_MaxCookieCountExceeds); ok {
		return x.MaxCookieCountExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxCookieKeySizeNone() *schema.Empty {
	if x, ok := m.GetMaxCookieKeySizeChoice().(*RequestConstraintType_MaxCookieKeySizeNone); ok {
		return x.MaxCookieKeySizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxCookieKeySizeExceeds() uint32 {
	if x, ok := m.GetMaxCookieKeySizeChoice().(*RequestConstraintType_MaxCookieKeySizeExceeds); ok {
		return x.MaxCookieKeySizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxCookieValueSizeNone() *schema.Empty {
	if x, ok := m.GetMaxCookieValueSizeChoice().(*RequestConstraintType_MaxCookieValueSizeNone); ok {
		return x.MaxCookieValueSizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxCookieValueSizeExceeds() uint32 {
	if x, ok := m.GetMaxCookieValueSizeChoice().(*RequestConstraintType_MaxCookieValueSizeExceeds); ok {
		return x.MaxCookieValueSizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxHeaderCountNone() *schema.Empty {
	if x, ok := m.GetMaxHeaderCountChoice().(*RequestConstraintType_MaxHeaderCountNone); ok {
		return x.MaxHeaderCountNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxHeaderCountExceeds() uint32 {
	if x, ok := m.GetMaxHeaderCountChoice().(*RequestConstraintType_MaxHeaderCountExceeds); ok {
		return x.MaxHeaderCountExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxHeaderKeySizeNone() *schema.Empty {
	if x, ok := m.GetMaxHeaderKeySizeChoice().(*RequestConstraintType_MaxHeaderKeySizeNone); ok {
		return x.MaxHeaderKeySizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxHeaderKeySizeExceeds() uint32 {
	if x, ok := m.GetMaxHeaderKeySizeChoice().(*RequestConstraintType_MaxHeaderKeySizeExceeds); ok {
		return x.MaxHeaderKeySizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxHeaderValueSizeNone() *schema.Empty {
	if x, ok := m.GetMaxHeaderValueSizeChoice().(*RequestConstraintType_MaxHeaderValueSizeNone); ok {
		return x.MaxHeaderValueSizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxHeaderValueSizeExceeds() uint32 {
	if x, ok := m.GetMaxHeaderValueSizeChoice().(*RequestConstraintType_MaxHeaderValueSizeExceeds); ok {
		return x.MaxHeaderValueSizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxUrlSizeNone() *schema.Empty {
	if x, ok := m.GetMaxUrlSizeChoice().(*RequestConstraintType_MaxUrlSizeNone); ok {
		return x.MaxUrlSizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxUrlSizeExceeds() uint32 {
	if x, ok := m.GetMaxUrlSizeChoice().(*RequestConstraintType_MaxUrlSizeExceeds); ok {
		return x.MaxUrlSizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxQuerySizeNone() *schema.Empty {
	if x, ok := m.GetMaxQuerySizeChoice().(*RequestConstraintType_MaxQuerySizeNone); ok {
		return x.MaxQuerySizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxQuerySizeExceeds() uint32 {
	if x, ok := m.GetMaxQuerySizeChoice().(*RequestConstraintType_MaxQuerySizeExceeds); ok {
		return x.MaxQuerySizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxRequestLineSizeNone() *schema.Empty {
	if x, ok := m.GetMaxRequestLineSizeChoice().(*RequestConstraintType_MaxRequestLineSizeNone); ok {
		return x.MaxRequestLineSizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxRequestLineSizeExceeds() uint32 {
	if x, ok := m.GetMaxRequestLineSizeChoice().(*RequestConstraintType_MaxRequestLineSizeExceeds); ok {
		return x.MaxRequestLineSizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxRequestSizeNone() *schema.Empty {
	if x, ok := m.GetMaxRequestSizeChoice().(*RequestConstraintType_MaxRequestSizeNone); ok {
		return x.MaxRequestSizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxRequestSizeExceeds() uint32 {
	if x, ok := m.GetMaxRequestSizeChoice().(*RequestConstraintType_MaxRequestSizeExceeds); ok {
		return x.MaxRequestSizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxParameterCountNone() *schema.Empty {
	if x, ok := m.GetMaxParameterCountChoice().(*RequestConstraintType_MaxParameterCountNone); ok {
		return x.MaxParameterCountNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxParameterCountExceeds() uint32 {
	if x, ok := m.GetMaxParameterCountChoice().(*RequestConstraintType_MaxParameterCountExceeds); ok {
		return x.MaxParameterCountExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxParameterNameSizeNone() *schema.Empty {
	if x, ok := m.GetMaxParameterNameSizeChoice().(*RequestConstraintType_MaxParameterNameSizeNone); ok {
		return x.MaxParameterNameSizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxParameterNameSizeExceeds() uint32 {
	if x, ok := m.GetMaxParameterNameSizeChoice().(*RequestConstraintType_MaxParameterNameSizeExceeds); ok {
		return x.MaxParameterNameSizeExceeds
	}
	return 0
}

func (m *RequestConstraintType) GetMaxParameterValueSizeNone() *schema.Empty {
	if x, ok := m.GetMaxParameterValueSizeChoice().(*RequestConstraintType_MaxParameterValueSizeNone); ok {
		return x.MaxParameterValueSizeNone
	}
	return nil
}

func (m *RequestConstraintType) GetMaxParameterValueSizeExceeds() uint32 {
	if x, ok := m.GetMaxParameterValueSizeChoice().(*RequestConstraintType_MaxParameterValueSizeExceeds); ok {
		return x.MaxParameterValueSizeExceeds
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestConstraintType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestConstraintType_MaxCookieCountNone)(nil),
		(*RequestConstraintType_MaxCookieCountExceeds)(nil),
		(*RequestConstraintType_MaxCookieKeySizeNone)(nil),
		(*RequestConstraintType_MaxCookieKeySizeExceeds)(nil),
		(*RequestConstraintType_MaxCookieValueSizeNone)(nil),
		(*RequestConstraintType_MaxCookieValueSizeExceeds)(nil),
		(*RequestConstraintType_MaxHeaderCountNone)(nil),
		(*RequestConstraintType_MaxHeaderCountExceeds)(nil),
		(*RequestConstraintType_MaxHeaderKeySizeNone)(nil),
		(*RequestConstraintType_MaxHeaderKeySizeExceeds)(nil),
		(*RequestConstraintType_MaxHeaderValueSizeNone)(nil),
		(*RequestConstraintType_MaxHeaderValueSizeExceeds)(nil),
		(*RequestConstraintType_MaxUrlSizeNone)(nil),
		(*RequestConstraintType_MaxUrlSizeExceeds)(nil),
		(*RequestConstraintType_MaxQuerySizeNone)(nil),
		(*RequestConstraintType_MaxQuerySizeExceeds)(nil),
		(*RequestConstraintType_MaxRequestLineSizeNone)(nil),
		(*RequestConstraintType_MaxRequestLineSizeExceeds)(nil),
		(*RequestConstraintType_MaxRequestSizeNone)(nil),
		(*RequestConstraintType_MaxRequestSizeExceeds)(nil),
		(*RequestConstraintType_MaxParameterCountNone)(nil),
		(*RequestConstraintType_MaxParameterCountExceeds)(nil),
		(*RequestConstraintType_MaxParameterNameSizeNone)(nil),
		(*RequestConstraintType_MaxParameterNameSizeExceeds)(nil),
		(*RequestConstraintType_MaxParameterValueSizeNone)(nil),
		(*RequestConstraintType_MaxParameterValueSizeExceeds)(nil),
	}
}

// Active Enhanced Firewall Policies
//
// x-displayName: "Active Enhanced Network Policies"
// List of Enhanced Firewall Policies
// These policies use session-based rules and provide all options available under firewall policies
type ActiveEnhancedFirewallPoliciesType struct {
	// Enhanced Firewall Policy
	//
	// x-displayName: "Enhanced Firewall Policy"
	// x-required
	// Ordered List of Enhaned Firewall Policies
	EnhancedFirewallPolicies []*views.ObjectRefType `protobuf:"bytes,1,rep,name=enhanced_firewall_policies,json=enhancedFirewallPolicies,proto3" json:"enhanced_firewall_policies,omitempty"`
}

func (m *ActiveEnhancedFirewallPoliciesType) Reset()      { *m = ActiveEnhancedFirewallPoliciesType{} }
func (*ActiveEnhancedFirewallPoliciesType) ProtoMessage() {}
func (*ActiveEnhancedFirewallPoliciesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{55}
}
func (m *ActiveEnhancedFirewallPoliciesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveEnhancedFirewallPoliciesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActiveEnhancedFirewallPoliciesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveEnhancedFirewallPoliciesType.Merge(m, src)
}
func (m *ActiveEnhancedFirewallPoliciesType) XXX_Size() int {
	return m.Size()
}
func (m *ActiveEnhancedFirewallPoliciesType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveEnhancedFirewallPoliciesType.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveEnhancedFirewallPoliciesType proto.InternalMessageInfo

func (m *ActiveEnhancedFirewallPoliciesType) GetEnhancedFirewallPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.EnhancedFirewallPolicies
	}
	return nil
}

// Active Service Policies
//
// x-displayName: "Active Service Policies"
// Active service policies for the proxy
type ActiveServicePoliciesType struct {
	// service_policies
	//
	// x-displayName: "Service Policies"
	// A list of references to service_policy objects.
	ServicePolicies []*views.ObjectRefType `protobuf:"bytes,1,rep,name=service_policies,json=servicePolicies,proto3" json:"service_policies,omitempty"`
}

func (m *ActiveServicePoliciesType) Reset()      { *m = ActiveServicePoliciesType{} }
func (*ActiveServicePoliciesType) ProtoMessage() {}
func (*ActiveServicePoliciesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{56}
}
func (m *ActiveServicePoliciesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveServicePoliciesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActiveServicePoliciesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveServicePoliciesType.Merge(m, src)
}
func (m *ActiveServicePoliciesType) XXX_Size() int {
	return m.Size()
}
func (m *ActiveServicePoliciesType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveServicePoliciesType.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveServicePoliciesType proto.InternalMessageInfo

func (m *ActiveServicePoliciesType) GetServicePolicies() []*views.ObjectRefType {
	if m != nil {
		return m.ServicePolicies
	}
	return nil
}

// Active Forward Proxy Policies
//
// x-displayName: "Active Forward Proxy Policies"
// List of Forward Proxy Policies
type ActiveForwardProxyPoliciesType struct {
	// Forward Proxy Policies
	//
	// x-displayName: "Forward Proxy Policies"
	// x-required
	// List of Forward Proxy Policies
	ForwardProxyPolicies []*views.ObjectRefType `protobuf:"bytes,1,rep,name=forward_proxy_policies,json=forwardProxyPolicies,proto3" json:"forward_proxy_policies,omitempty"`
}

func (m *ActiveForwardProxyPoliciesType) Reset()      { *m = ActiveForwardProxyPoliciesType{} }
func (*ActiveForwardProxyPoliciesType) ProtoMessage() {}
func (*ActiveForwardProxyPoliciesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{57}
}
func (m *ActiveForwardProxyPoliciesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveForwardProxyPoliciesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActiveForwardProxyPoliciesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveForwardProxyPoliciesType.Merge(m, src)
}
func (m *ActiveForwardProxyPoliciesType) XXX_Size() int {
	return m.Size()
}
func (m *ActiveForwardProxyPoliciesType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveForwardProxyPoliciesType.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveForwardProxyPoliciesType proto.InternalMessageInfo

func (m *ActiveForwardProxyPoliciesType) GetForwardProxyPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.ForwardProxyPolicies
	}
	return nil
}

// Security Policies
//
// x-displayName: "Security Policies"
// Security Policies
type SecurityPoliciesType struct {
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Add Forward Proxy policies to control outbound traffic
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*SecurityPoliciesType_NoForwardProxy
	//	*SecurityPoliciesType_ActiveForwardProxyPolicies
	//	*SecurityPoliciesType_ActiveServicePolicies
	ForwardProxyChoice isSecurityPoliciesType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Add embedded network firewall policies to allow granular network access
	//
	// Types that are valid to be assigned to FirewallPolicyChoice:
	//	*SecurityPoliciesType_NoFirewallPolicy
	//	*SecurityPoliciesType_ActiveEnhancedFirewallPolicies
	FirewallPolicyChoice isSecurityPoliciesType_FirewallPolicyChoice `protobuf_oneof:"firewall_policy_choice"`
}

func (m *SecurityPoliciesType) Reset()      { *m = SecurityPoliciesType{} }
func (*SecurityPoliciesType) ProtoMessage() {}
func (*SecurityPoliciesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{58}
}
func (m *SecurityPoliciesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityPoliciesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecurityPoliciesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityPoliciesType.Merge(m, src)
}
func (m *SecurityPoliciesType) XXX_Size() int {
	return m.Size()
}
func (m *SecurityPoliciesType) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityPoliciesType.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityPoliciesType proto.InternalMessageInfo

type isSecurityPoliciesType_ForwardProxyChoice interface {
	isSecurityPoliciesType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSecurityPoliciesType_FirewallPolicyChoice interface {
	isSecurityPoliciesType_FirewallPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SecurityPoliciesType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,2,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type SecurityPoliciesType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *ActiveForwardProxyPoliciesType `protobuf:"bytes,3,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type SecurityPoliciesType_ActiveServicePolicies struct {
	ActiveServicePolicies *ActiveServicePoliciesType `protobuf:"bytes,8,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type SecurityPoliciesType_NoFirewallPolicy struct {
	NoFirewallPolicy *schema.Empty `protobuf:"bytes,5,opt,name=no_firewall_policy,json=noFirewallPolicy,proto3,oneof" json:"no_firewall_policy,omitempty"`
}
type SecurityPoliciesType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,6,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}

func (*SecurityPoliciesType_NoForwardProxy) isSecurityPoliciesType_ForwardProxyChoice()             {}
func (*SecurityPoliciesType_ActiveForwardProxyPolicies) isSecurityPoliciesType_ForwardProxyChoice() {}
func (*SecurityPoliciesType_ActiveServicePolicies) isSecurityPoliciesType_ForwardProxyChoice()      {}
func (*SecurityPoliciesType_NoFirewallPolicy) isSecurityPoliciesType_FirewallPolicyChoice()         {}
func (*SecurityPoliciesType_ActiveEnhancedFirewallPolicies) isSecurityPoliciesType_FirewallPolicyChoice() {
}

func (m *SecurityPoliciesType) GetForwardProxyChoice() isSecurityPoliciesType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *SecurityPoliciesType) GetFirewallPolicyChoice() isSecurityPoliciesType_FirewallPolicyChoice {
	if m != nil {
		return m.FirewallPolicyChoice
	}
	return nil
}

func (m *SecurityPoliciesType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*SecurityPoliciesType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *SecurityPoliciesType) GetActiveForwardProxyPolicies() *ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*SecurityPoliciesType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *SecurityPoliciesType) GetActiveServicePolicies() *ActiveServicePoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*SecurityPoliciesType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *SecurityPoliciesType) GetNoFirewallPolicy() *schema.Empty {
	if x, ok := m.GetFirewallPolicyChoice().(*SecurityPoliciesType_NoFirewallPolicy); ok {
		return x.NoFirewallPolicy
	}
	return nil
}

func (m *SecurityPoliciesType) GetActiveEnhancedFirewallPolicies() *ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetFirewallPolicyChoice().(*SecurityPoliciesType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SecurityPoliciesType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SecurityPoliciesType_NoForwardProxy)(nil),
		(*SecurityPoliciesType_ActiveForwardProxyPolicies)(nil),
		(*SecurityPoliciesType_ActiveServicePolicies)(nil),
		(*SecurityPoliciesType_NoFirewallPolicy)(nil),
		(*SecurityPoliciesType_ActiveEnhancedFirewallPolicies)(nil),
	}
}

// Segment Choice
//
// x-displayName: "Configure Segments"
// Configure source and destination segment for policy
type SegmentPolicyType struct {
	// Source Segments
	//
	// x-displayName: "Source Segments"
	// Select source segment where rule is applied
	// Configure option as Any to ignore segment match
	//
	// Types that are valid to be assigned to SrcSegmentChoice:
	//	*SegmentPolicyType_SrcAny
	//	*SegmentPolicyType_SrcSegments
	SrcSegmentChoice isSegmentPolicyType_SrcSegmentChoice `protobuf_oneof:"src_segment_choice"`
	// Destination Segments
	//
	// x-displayName: "Destination Segments"
	// Select destination segment where rule is applied
	// Configure option as Any to ignore segment match
	//
	// Types that are valid to be assigned to DstSegmentChoice:
	//	*SegmentPolicyType_DstAny
	//	*SegmentPolicyType_IntraSegment
	//	*SegmentPolicyType_DstSegments
	DstSegmentChoice isSegmentPolicyType_DstSegmentChoice `protobuf_oneof:"dst_segment_choice"`
}

func (m *SegmentPolicyType) Reset()      { *m = SegmentPolicyType{} }
func (*SegmentPolicyType) ProtoMessage() {}
func (*SegmentPolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{59}
}
func (m *SegmentPolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentPolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SegmentPolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentPolicyType.Merge(m, src)
}
func (m *SegmentPolicyType) XXX_Size() int {
	return m.Size()
}
func (m *SegmentPolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentPolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentPolicyType proto.InternalMessageInfo

type isSegmentPolicyType_SrcSegmentChoice interface {
	isSegmentPolicyType_SrcSegmentChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSegmentPolicyType_DstSegmentChoice interface {
	isSegmentPolicyType_DstSegmentChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SegmentPolicyType_SrcAny struct {
	SrcAny *schema.Empty `protobuf:"bytes,2,opt,name=src_any,json=srcAny,proto3,oneof" json:"src_any,omitempty"`
}
type SegmentPolicyType_SrcSegments struct {
	SrcSegments *views.SegmentRefList `protobuf:"bytes,3,opt,name=src_segments,json=srcSegments,proto3,oneof" json:"src_segments,omitempty"`
}
type SegmentPolicyType_DstAny struct {
	DstAny *schema.Empty `protobuf:"bytes,5,opt,name=dst_any,json=dstAny,proto3,oneof" json:"dst_any,omitempty"`
}
type SegmentPolicyType_IntraSegment struct {
	IntraSegment *schema.Empty `protobuf:"bytes,6,opt,name=intra_segment,json=intraSegment,proto3,oneof" json:"intra_segment,omitempty"`
}
type SegmentPolicyType_DstSegments struct {
	DstSegments *views.SegmentRefList `protobuf:"bytes,7,opt,name=dst_segments,json=dstSegments,proto3,oneof" json:"dst_segments,omitempty"`
}

func (*SegmentPolicyType_SrcAny) isSegmentPolicyType_SrcSegmentChoice()       {}
func (*SegmentPolicyType_SrcSegments) isSegmentPolicyType_SrcSegmentChoice()  {}
func (*SegmentPolicyType_DstAny) isSegmentPolicyType_DstSegmentChoice()       {}
func (*SegmentPolicyType_IntraSegment) isSegmentPolicyType_DstSegmentChoice() {}
func (*SegmentPolicyType_DstSegments) isSegmentPolicyType_DstSegmentChoice()  {}

func (m *SegmentPolicyType) GetSrcSegmentChoice() isSegmentPolicyType_SrcSegmentChoice {
	if m != nil {
		return m.SrcSegmentChoice
	}
	return nil
}
func (m *SegmentPolicyType) GetDstSegmentChoice() isSegmentPolicyType_DstSegmentChoice {
	if m != nil {
		return m.DstSegmentChoice
	}
	return nil
}

func (m *SegmentPolicyType) GetSrcAny() *schema.Empty {
	if x, ok := m.GetSrcSegmentChoice().(*SegmentPolicyType_SrcAny); ok {
		return x.SrcAny
	}
	return nil
}

func (m *SegmentPolicyType) GetSrcSegments() *views.SegmentRefList {
	if x, ok := m.GetSrcSegmentChoice().(*SegmentPolicyType_SrcSegments); ok {
		return x.SrcSegments
	}
	return nil
}

func (m *SegmentPolicyType) GetDstAny() *schema.Empty {
	if x, ok := m.GetDstSegmentChoice().(*SegmentPolicyType_DstAny); ok {
		return x.DstAny
	}
	return nil
}

func (m *SegmentPolicyType) GetIntraSegment() *schema.Empty {
	if x, ok := m.GetDstSegmentChoice().(*SegmentPolicyType_IntraSegment); ok {
		return x.IntraSegment
	}
	return nil
}

func (m *SegmentPolicyType) GetDstSegments() *views.SegmentRefList {
	if x, ok := m.GetDstSegmentChoice().(*SegmentPolicyType_DstSegments); ok {
		return x.DstSegments
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SegmentPolicyType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SegmentPolicyType_SrcAny)(nil),
		(*SegmentPolicyType_SrcSegments)(nil),
		(*SegmentPolicyType_DstAny)(nil),
		(*SegmentPolicyType_IntraSegment)(nil),
		(*SegmentPolicyType_DstSegments)(nil),
	}
}

// Malware Protection Settings
//
// x-displayName: "Malware Protection Settings"
// Settings for handling malware protection detection.
type MalwareProtectionSettings struct {
	// Action
	//
	// x-displayName: "Action"
	// x-required
	// Action to be taken when malware is detected
	Action *schema.Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *MalwareProtectionSettings) Reset()      { *m = MalwareProtectionSettings{} }
func (*MalwareProtectionSettings) ProtoMessage() {}
func (*MalwareProtectionSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3fbb7e1d0915ae2, []int{60}
}
func (m *MalwareProtectionSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MalwareProtectionSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MalwareProtectionSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MalwareProtectionSettings.Merge(m, src)
}
func (m *MalwareProtectionSettings) XXX_Size() int {
	return m.Size()
}
func (m *MalwareProtectionSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_MalwareProtectionSettings.DiscardUnknown(m)
}

var xxx_messageInfo_MalwareProtectionSettings proto.InternalMessageInfo

func (m *MalwareProtectionSettings) GetAction() *schema.Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.policy.PolicySetType", PolicySetType_name, PolicySetType_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.PolicySetType", PolicySetType_name, PolicySetType_value)
	proto.RegisterEnum("ves.io.schema.policy.PolicySetScope", PolicySetScope_name, PolicySetScope_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.PolicySetScope", PolicySetScope_name, PolicySetScope_value)
	proto.RegisterEnum("ves.io.schema.policy.RuleCombiningAlgorithm", RuleCombiningAlgorithm_name, RuleCombiningAlgorithm_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.RuleCombiningAlgorithm", RuleCombiningAlgorithm_name, RuleCombiningAlgorithm_value)
	proto.RegisterEnum("ves.io.schema.policy.Transformer", Transformer_name, Transformer_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.Transformer", Transformer_name, Transformer_value)
	proto.RegisterEnum("ves.io.schema.policy.URLCategory", URLCategory_name, URLCategory_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.URLCategory", URLCategory_name, URLCategory_value)
	proto.RegisterEnum("ves.io.schema.policy.IPThreatCategory", IPThreatCategory_name, IPThreatCategory_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.IPThreatCategory", IPThreatCategory_name, IPThreatCategory_value)
	proto.RegisterEnum("ves.io.schema.policy.DetectionContext", DetectionContext_name, DetectionContext_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.DetectionContext", DetectionContext_name, DetectionContext_value)
	proto.RegisterEnum("ves.io.schema.policy.KnownTlsFingerprintClass", KnownTlsFingerprintClass_name, KnownTlsFingerprintClass_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.KnownTlsFingerprintClass", KnownTlsFingerprintClass_name, KnownTlsFingerprintClass_value)
	proto.RegisterEnum("ves.io.schema.policy.CountryCode", CountryCode_name, CountryCode_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.CountryCode", CountryCode_name, CountryCode_value)
	proto.RegisterEnum("ves.io.schema.policy.RuleAction", RuleAction_name, RuleAction_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.RuleAction", RuleAction_name, RuleAction_value)
	proto.RegisterEnum("ves.io.schema.policy.ChallengeAction", ChallengeAction_name, ChallengeAction_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.ChallengeAction", ChallengeAction_name, ChallengeAction_value)
	proto.RegisterEnum("ves.io.schema.policy.AppTrafficType", AppTrafficType_name, AppTrafficType_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.AppTrafficType", AppTrafficType_name, AppTrafficType_value)
	proto.RegisterEnum("ves.io.schema.policy.HTMLPosition", HTMLPosition_name, HTMLPosition_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.HTMLPosition", HTMLPosition_name, HTMLPosition_value)
	proto.RegisterEnum("ves.io.schema.policy.OasValidationActionType", OasValidationActionType_name, OasValidationActionType_value)
	golang_proto.RegisterEnum("ves.io.schema.policy.OasValidationActionType", OasValidationActionType_name, OasValidationActionType_value)
	proto.RegisterType((*AppFirewallViolationContext)(nil), "ves.io.schema.policy.AppFirewallViolationContext")
	golang_proto.RegisterType((*AppFirewallViolationContext)(nil), "ves.io.schema.policy.AppFirewallViolationContext")
	proto.RegisterType((*AppFirewallSignatureContext)(nil), "ves.io.schema.policy.AppFirewallSignatureContext")
	golang_proto.RegisterType((*AppFirewallSignatureContext)(nil), "ves.io.schema.policy.AppFirewallSignatureContext")
	proto.RegisterType((*AppFirewallAttackTypeContext)(nil), "ves.io.schema.policy.AppFirewallAttackTypeContext")
	golang_proto.RegisterType((*AppFirewallAttackTypeContext)(nil), "ves.io.schema.policy.AppFirewallAttackTypeContext")
	proto.RegisterType((*BotNameContext)(nil), "ves.io.schema.policy.BotNameContext")
	golang_proto.RegisterType((*BotNameContext)(nil), "ves.io.schema.policy.BotNameContext")
	proto.RegisterType((*AppFirewallDetectionControl)(nil), "ves.io.schema.policy.AppFirewallDetectionControl")
	golang_proto.RegisterType((*AppFirewallDetectionControl)(nil), "ves.io.schema.policy.AppFirewallDetectionControl")
	proto.RegisterType((*DataGuardControl)(nil), "ves.io.schema.policy.DataGuardControl")
	golang_proto.RegisterType((*DataGuardControl)(nil), "ves.io.schema.policy.DataGuardControl")
	proto.RegisterType((*BotAction)(nil), "ves.io.schema.policy.BotAction")
	golang_proto.RegisterType((*BotAction)(nil), "ves.io.schema.policy.BotAction")
	proto.RegisterType((*ModifyAction)(nil), "ves.io.schema.policy.ModifyAction")
	golang_proto.RegisterType((*ModifyAction)(nil), "ves.io.schema.policy.ModifyAction")
	proto.RegisterType((*WafAction)(nil), "ves.io.schema.policy.WafAction")
	golang_proto.RegisterType((*WafAction)(nil), "ves.io.schema.policy.WafAction")
	proto.RegisterType((*ContentRewriteAction)(nil), "ves.io.schema.policy.ContentRewriteAction")
	golang_proto.RegisterType((*ContentRewriteAction)(nil), "ves.io.schema.policy.ContentRewriteAction")
	proto.RegisterMapType((map[string]bool)(nil), "ves.io.schema.policy.ContentRewriteAction.InsertedTypesEntry")
	golang_proto.RegisterMapType((map[string]bool)(nil), "ves.io.schema.policy.ContentRewriteAction.InsertedTypesEntry")
	proto.RegisterType((*ShapeProtectedEndpointAction)(nil), "ves.io.schema.policy.ShapeProtectedEndpointAction")
	golang_proto.RegisterType((*ShapeProtectedEndpointAction)(nil), "ves.io.schema.policy.ShapeProtectedEndpointAction")
	proto.RegisterType((*ShapeBotMitigationAction)(nil), "ves.io.schema.policy.ShapeBotMitigationAction")
	golang_proto.RegisterType((*ShapeBotMitigationAction)(nil), "ves.io.schema.policy.ShapeBotMitigationAction")
	proto.RegisterType((*ShapeBotFlagMitigationActionChoiceType)(nil), "ves.io.schema.policy.ShapeBotFlagMitigationActionChoiceType")
	golang_proto.RegisterType((*ShapeBotFlagMitigationActionChoiceType)(nil), "ves.io.schema.policy.ShapeBotFlagMitigationActionChoiceType")
	proto.RegisterType((*ShapeBotFlagMitigationActionType)(nil), "ves.io.schema.policy.ShapeBotFlagMitigationActionType")
	golang_proto.RegisterType((*ShapeBotFlagMitigationActionType)(nil), "ves.io.schema.policy.ShapeBotFlagMitigationActionType")
	proto.RegisterType((*ShapeBotBlockMitigationActionType)(nil), "ves.io.schema.policy.ShapeBotBlockMitigationActionType")
	golang_proto.RegisterType((*ShapeBotBlockMitigationActionType)(nil), "ves.io.schema.policy.ShapeBotBlockMitigationActionType")
	proto.RegisterType((*ShapeBotRedirectMitigationActionType)(nil), "ves.io.schema.policy.ShapeBotRedirectMitigationActionType")
	golang_proto.RegisterType((*ShapeBotRedirectMitigationActionType)(nil), "ves.io.schema.policy.ShapeBotRedirectMitigationActionType")
	proto.RegisterType((*PrefixMatchList)(nil), "ves.io.schema.policy.PrefixMatchList")
	golang_proto.RegisterType((*PrefixMatchList)(nil), "ves.io.schema.policy.PrefixMatchList")
	proto.RegisterType((*AsnMatchList)(nil), "ves.io.schema.policy.AsnMatchList")
	golang_proto.RegisterType((*AsnMatchList)(nil), "ves.io.schema.policy.AsnMatchList")
	proto.RegisterType((*SimpleWafExclusionRule)(nil), "ves.io.schema.policy.SimpleWafExclusionRule")
	golang_proto.RegisterType((*SimpleWafExclusionRule)(nil), "ves.io.schema.policy.SimpleWafExclusionRule")
	proto.RegisterType((*OriginServerSubsetRule)(nil), "ves.io.schema.policy.OriginServerSubsetRule")
	golang_proto.RegisterType((*OriginServerSubsetRule)(nil), "ves.io.schema.policy.OriginServerSubsetRule")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.policy.OriginServerSubsetRule.OriginServerSubsetsActionEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.policy.OriginServerSubsetRule.OriginServerSubsetsActionEntry")
	proto.RegisterType((*SimpleDataGuardRule)(nil), "ves.io.schema.policy.SimpleDataGuardRule")
	golang_proto.RegisterType((*SimpleDataGuardRule)(nil), "ves.io.schema.policy.SimpleDataGuardRule")
	proto.RegisterType((*GraphQLRule)(nil), "ves.io.schema.policy.GraphQLRule")
	golang_proto.RegisterType((*GraphQLRule)(nil), "ves.io.schema.policy.GraphQLRule")
	proto.RegisterType((*GraphQLSettingsType)(nil), "ves.io.schema.policy.GraphQLSettingsType")
	golang_proto.RegisterType((*GraphQLSettingsType)(nil), "ves.io.schema.policy.GraphQLSettingsType")
	proto.RegisterType((*OpenApiValidationAction)(nil), "ves.io.schema.policy.OpenApiValidationAction")
	golang_proto.RegisterType((*OpenApiValidationAction)(nil), "ves.io.schema.policy.OpenApiValidationAction")
	proto.RegisterType((*MaskingConfig)(nil), "ves.io.schema.policy.MaskingConfig")
	golang_proto.RegisterType((*MaskingConfig)(nil), "ves.io.schema.policy.MaskingConfig")
	proto.RegisterType((*DenyInformation)(nil), "ves.io.schema.policy.DenyInformation")
	golang_proto.RegisterType((*DenyInformation)(nil), "ves.io.schema.policy.DenyInformation")
	proto.RegisterType((*TlsFingerprintMatcherType)(nil), "ves.io.schema.policy.TlsFingerprintMatcherType")
	golang_proto.RegisterType((*TlsFingerprintMatcherType)(nil), "ves.io.schema.policy.TlsFingerprintMatcherType")
	proto.RegisterType((*JA4TlsFingerprintMatcherType)(nil), "ves.io.schema.policy.JA4TlsFingerprintMatcherType")
	golang_proto.RegisterType((*JA4TlsFingerprintMatcherType)(nil), "ves.io.schema.policy.JA4TlsFingerprintMatcherType")
	proto.RegisterType((*PathMatcherType)(nil), "ves.io.schema.policy.PathMatcherType")
	golang_proto.RegisterType((*PathMatcherType)(nil), "ves.io.schema.policy.PathMatcherType")
	proto.RegisterType((*MatcherType)(nil), "ves.io.schema.policy.MatcherType")
	golang_proto.RegisterType((*MatcherType)(nil), "ves.io.schema.policy.MatcherType")
	proto.RegisterType((*MatcherTypeBasic)(nil), "ves.io.schema.policy.MatcherTypeBasic")
	golang_proto.RegisterType((*MatcherTypeBasic)(nil), "ves.io.schema.policy.MatcherTypeBasic")
	proto.RegisterType((*CookieMatcherType)(nil), "ves.io.schema.policy.CookieMatcherType")
	golang_proto.RegisterType((*CookieMatcherType)(nil), "ves.io.schema.policy.CookieMatcherType")
	proto.RegisterType((*ArgMatcherType)(nil), "ves.io.schema.policy.ArgMatcherType")
	golang_proto.RegisterType((*ArgMatcherType)(nil), "ves.io.schema.policy.ArgMatcherType")
	proto.RegisterType((*HeaderMatcherType)(nil), "ves.io.schema.policy.HeaderMatcherType")
	golang_proto.RegisterType((*HeaderMatcherType)(nil), "ves.io.schema.policy.HeaderMatcherType")
	proto.RegisterType((*JWTClaimMatcherType)(nil), "ves.io.schema.policy.JWTClaimMatcherType")
	golang_proto.RegisterType((*JWTClaimMatcherType)(nil), "ves.io.schema.policy.JWTClaimMatcherType")
	proto.RegisterType((*HeaderMatcherTypeBasic)(nil), "ves.io.schema.policy.HeaderMatcherTypeBasic")
	golang_proto.RegisterType((*HeaderMatcherTypeBasic)(nil), "ves.io.schema.policy.HeaderMatcherTypeBasic")
	proto.RegisterType((*QueryParameterMatcherType)(nil), "ves.io.schema.policy.QueryParameterMatcherType")
	golang_proto.RegisterType((*QueryParameterMatcherType)(nil), "ves.io.schema.policy.QueryParameterMatcherType")
	proto.RegisterType((*HttpMethodMatcherType)(nil), "ves.io.schema.policy.HttpMethodMatcherType")
	golang_proto.RegisterType((*HttpMethodMatcherType)(nil), "ves.io.schema.policy.HttpMethodMatcherType")
	proto.RegisterType((*RoleMatcherType)(nil), "ves.io.schema.policy.RoleMatcherType")
	golang_proto.RegisterType((*RoleMatcherType)(nil), "ves.io.schema.policy.RoleMatcherType")
	proto.RegisterType((*StringMatcherType)(nil), "ves.io.schema.policy.StringMatcherType")
	golang_proto.RegisterType((*StringMatcherType)(nil), "ves.io.schema.policy.StringMatcherType")
	proto.RegisterType((*IpMatcherType)(nil), "ves.io.schema.policy.IpMatcherType")
	golang_proto.RegisterType((*IpMatcherType)(nil), "ves.io.schema.policy.IpMatcherType")
	proto.RegisterType((*AsnMatcherType)(nil), "ves.io.schema.policy.AsnMatcherType")
	golang_proto.RegisterType((*AsnMatcherType)(nil), "ves.io.schema.policy.AsnMatcherType")
	proto.RegisterType((*PortMatcherType)(nil), "ves.io.schema.policy.PortMatcherType")
	golang_proto.RegisterType((*PortMatcherType)(nil), "ves.io.schema.policy.PortMatcherType")
	proto.RegisterType((*URLItem)(nil), "ves.io.schema.policy.URLItem")
	golang_proto.RegisterType((*URLItem)(nil), "ves.io.schema.policy.URLItem")
	proto.RegisterType((*URLMatcherType)(nil), "ves.io.schema.policy.URLMatcherType")
	golang_proto.RegisterType((*URLMatcherType)(nil), "ves.io.schema.policy.URLMatcherType")
	proto.RegisterType((*L4DestMatcherType)(nil), "ves.io.schema.policy.L4DestMatcherType")
	golang_proto.RegisterType((*L4DestMatcherType)(nil), "ves.io.schema.policy.L4DestMatcherType")
	proto.RegisterType((*CountryCodeList)(nil), "ves.io.schema.policy.CountryCodeList")
	golang_proto.RegisterType((*CountryCodeList)(nil), "ves.io.schema.policy.CountryCodeList")
	proto.RegisterType((*HttpHeaderName)(nil), "ves.io.schema.policy.HttpHeaderName")
	golang_proto.RegisterType((*HttpHeaderName)(nil), "ves.io.schema.policy.HttpHeaderName")
	proto.RegisterType((*HttpCookieName)(nil), "ves.io.schema.policy.HttpCookieName")
	golang_proto.RegisterType((*HttpCookieName)(nil), "ves.io.schema.policy.HttpCookieName")
	proto.RegisterType((*HttpQueryParameterName)(nil), "ves.io.schema.policy.HttpQueryParameterName")
	golang_proto.RegisterType((*HttpQueryParameterName)(nil), "ves.io.schema.policy.HttpQueryParameterName")
	proto.RegisterType((*JwtTokenAuthOptions)(nil), "ves.io.schema.policy.JwtTokenAuthOptions")
	golang_proto.RegisterType((*JwtTokenAuthOptions)(nil), "ves.io.schema.policy.JwtTokenAuthOptions")
	proto.RegisterType((*IPThreatCategoryListType)(nil), "ves.io.schema.policy.IPThreatCategoryListType")
	golang_proto.RegisterType((*IPThreatCategoryListType)(nil), "ves.io.schema.policy.IPThreatCategoryListType")
	proto.RegisterType((*ClientMatcher)(nil), "ves.io.schema.policy.ClientMatcher")
	golang_proto.RegisterType((*ClientMatcher)(nil), "ves.io.schema.policy.ClientMatcher")
	proto.RegisterType((*RequestMatcher)(nil), "ves.io.schema.policy.RequestMatcher")
	golang_proto.RegisterType((*RequestMatcher)(nil), "ves.io.schema.policy.RequestMatcher")
	proto.RegisterType((*RequestConstraintType)(nil), "ves.io.schema.policy.RequestConstraintType")
	golang_proto.RegisterType((*RequestConstraintType)(nil), "ves.io.schema.policy.RequestConstraintType")
	proto.RegisterType((*ActiveEnhancedFirewallPoliciesType)(nil), "ves.io.schema.policy.ActiveEnhancedFirewallPoliciesType")
	golang_proto.RegisterType((*ActiveEnhancedFirewallPoliciesType)(nil), "ves.io.schema.policy.ActiveEnhancedFirewallPoliciesType")
	proto.RegisterType((*ActiveServicePoliciesType)(nil), "ves.io.schema.policy.ActiveServicePoliciesType")
	golang_proto.RegisterType((*ActiveServicePoliciesType)(nil), "ves.io.schema.policy.ActiveServicePoliciesType")
	proto.RegisterType((*ActiveForwardProxyPoliciesType)(nil), "ves.io.schema.policy.ActiveForwardProxyPoliciesType")
	golang_proto.RegisterType((*ActiveForwardProxyPoliciesType)(nil), "ves.io.schema.policy.ActiveForwardProxyPoliciesType")
	proto.RegisterType((*SecurityPoliciesType)(nil), "ves.io.schema.policy.SecurityPoliciesType")
	golang_proto.RegisterType((*SecurityPoliciesType)(nil), "ves.io.schema.policy.SecurityPoliciesType")
	proto.RegisterType((*SegmentPolicyType)(nil), "ves.io.schema.policy.SegmentPolicyType")
	golang_proto.RegisterType((*SegmentPolicyType)(nil), "ves.io.schema.policy.SegmentPolicyType")
	proto.RegisterType((*MalwareProtectionSettings)(nil), "ves.io.schema.policy.MalwareProtectionSettings")
	golang_proto.RegisterType((*MalwareProtectionSettings)(nil), "ves.io.schema.policy.MalwareProtectionSettings")
}

func init() { proto.RegisterFile("ves.io/schema/policy/types.proto", fileDescriptor_d3fbb7e1d0915ae2) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/policy/types.proto", fileDescriptor_d3fbb7e1d0915ae2)
}

var fileDescriptor_d3fbb7e1d0915ae2 = []byte{
	// 13256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x7d, 0x7c, 0x23, 0x49,
	0x76, 0x18, 0xc6, 0x06, 0x41, 0x12, 0x2c, 0x7e, 0xd5, 0xf4, 0x7c, 0x71, 0x38, 0x33, 0x5c, 0x2c,
	0xf6, 0xe3, 0x66, 0x79, 0x58, 0x4e, 0x7f, 0x7f, 0xcc, 0xe9, 0x76, 0xb7, 0x01, 0x36, 0x09, 0x70,
	0xf0, 0xc1, 0x6d, 0x80, 0x33, 0xc3, 0x91, 0x4e, 0x50, 0x7f, 0x54, 0x93, 0xb8, 0x25, 0x01, 0x1e,
	0x00, 0xee, 0x0c, 0xe5, 0x6c, 0x3c, 0x5a, 0x4b, 0xb2, 0x7c, 0x4e, 0x72, 0xf2, 0x25, 0x76, 0xce,
	0x17, 0x5b, 0x91, 0xe5, 0x2f, 0x69, 0x13, 0x3b, 0xb2, 0x13, 0x3b, 0xb6, 0xb8, 0xb6, 0xc7, 0x4a,
	0xe4, 0x5c, 0xd6, 0x76, 0x32, 0x89, 0xed, 0xf8, 0xbc, 0x71, 0x62, 0xdd, 0x5e, 0x1c, 0x9f, 0x9d,
	0xc4, 0x3a, 0x9f, 0x14, 0x45, 0x76, 0xe2, 0x5f, 0xf2, 0xab, 0xea, 0x6e, 0xb0, 0x0b, 0x04, 0x39,
	0x73, 0xab, 0xb3, 0xf2, 0xd3, 0xcf, 0xfb, 0x17, 0xf1, 0x5e, 0xbd, 0x7a, 0xf5, 0xea, 0xbd, 0x57,
	0xaf, 0x5e, 0x55, 0x75, 0x15, 0x41, 0xfa, 0x6d, 0xd4, 0x5d, 0x6e, 0xb6, 0x6f, 0x76, 0xdd, 0x1d,
	0xb4, 0x67, 0xdf, 0xdc, 0x6f, 0xef, 0x36, 0xdd, 0xc3, 0x9b, 0xbd, 0xc3, 0x7d, 0xd4, 0x5d, 0xde,
	0xef, 0xb4, 0x7b, 0x6d, 0xf6, 0x42, 0x40, 0xb1, 0x1c, 0x50, 0x2c, 0x07, 0x14, 0x0b, 0xaf, 0x6e,
	0x37, 0x7b, 0x3b, 0x07, 0xce, 0xb2, 0xdb, 0xde, 0xbb, 0xb9, 0xdd, 0xde, 0x6e, 0xdf, 0x24, 0xc4,
	0xce, 0x81, 0x4f, 0x20, 0x02, 0x90, 0x5f, 0x01, 0x93, 0x85, 0xe7, 0xb6, 0xdb, 0xed, 0xed, 0x5d,
	0x74, 0x4c, 0xd5, 0x6b, 0xee, 0xa1, 0x6e, 0xcf, 0xde, 0xdb, 0x0f, 0x09, 0x5e, 0xa6, 0xe5, 0xb0,
	0xf7, 0xf7, 0x1b, 0x7e, 0xb3, 0x83, 0x1e, 0xd8, 0xbb, 0xbb, 0x71, 0x69, 0x16, 0x2e, 0xd3, 0x74,
	0x2d, 0xd4, 0x0b, 0x0b, 0xae, 0xd2, 0x05, 0xed, 0xfd, 0x5e, 0xb3, 0xdd, 0x8a, 0x6a, 0x5d, 0xa1,
	0x0b, 0xe3, 0x0c, 0xaf, 0xd1, 0x45, 0x6f, 0xdb, 0xbb, 0x4d, 0xcf, 0xee, 0xa1, 0xb0, 0x74, 0x40,
	0x3d, 0x6f, 0x37, 0xd1, 0x83, 0x06, 0xcd, 0xfa, 0xb9, 0x93, 0x14, 0xdd, 0x78, 0x03, 0x99, 0x7f,
	0xc6, 0x80, 0xab, 0xc6, 0xfe, 0xfe, 0x6a, 0xd8, 0x9b, 0x3b, 0xcd, 0xf6, 0xae, 0x8d, 0x19, 0xe4,
	0xdb, 0xad, 0x1e, 0x7a, 0xd8, 0x63, 0x6d, 0x70, 0x0e, 0x3d, 0x74, 0x77, 0x0f, 0x3c, 0xd4, 0x78,
	0x3b, 0x2a, 0x9b, 0x67, 0xd2, 0xcc, 0x8d, 0x59, 0x41, 0x5a, 0xa6, 0x75, 0x1f, 0xd7, 0xca, 0xf2,
	0x30, 0x9e, 0xf5, 0xc3, 0x7d, 0x64, 0xc1, 0x90, 0x5d, 0x1f, 0xcb, 0xbe, 0x01, 0x26, 0xdc, 0xa0,
	0xb5, 0xf9, 0x04, 0x61, 0xfc, 0xf2, 0xf2, 0x30, 0xa3, 0x2e, 0xaf, 0xa0, 0x1e, 0x72, 0x63, 0xb2,
	0x59, 0x51, 0x35, 0xf6, 0x55, 0x30, 0x1d, 0xfe, 0x6c, 0xb4, 0xec, 0x3d, 0x34, 0x3f, 0x9a, 0x66,
	0x6e, 0x4c, 0xe6, 0xc0, 0x2f, 0xfc, 0xe3, 0xc7, 0xa3, 0x63, 0x9d, 0xd1, 0xf9, 0x47, 0x8c, 0x35,
	0x15, 0x96, 0x57, 0xec, 0x3d, 0x94, 0x79, 0x4c, 0xf7, 0xb9, 0xd6, 0xdc, 0x6e, 0xd9, 0xbd, 0x83,
	0x0e, 0x8a, 0xfa, 0xcc, 0x81, 0xe9, 0x6e, 0x84, 0x6b, 0x34, 0x3d, 0xd2, 0xdd, 0x99, 0xdc, 0x0c,
	0x66, 0x97, 0x5a, 0x1a, 0x9f, 0xff, 0x7f, 0x7f, 0xe9, 0xc7, 0xbf, 0xc4, 0x58, 0x53, 0x7d, 0x92,
	0xa2, 0xf7, 0x5b, 0xdf, 0x85, 0x7f, 0xc4, 0x80, 0x6b, 0xb1, 0x2e, 0x18, 0xbd, 0x9e, 0xed, 0xbe,
	0x85, 0xf5, 0x1b, 0xf5, 0xe1, 0x0e, 0x38, 0x1f, 0xd9, 0xcd, 0x26, 0x85, 0x0d, 0x6c, 0xf5, 0xd0,
	0x72, 0x2f, 0x9f, 0x69, 0xb9, 0x3e, 0x2f, 0x2b, 0x32, 0xfd, 0x31, 0xea, 0xb7, 0xbe, 0xa7, 0x9f,
	0x06, 0xb3, 0xb9, 0x36, 0xf9, 0x19, 0x75, 0xed, 0x0a, 0x48, 0x39, 0xed, 0xb0, 0x32, 0xee, 0xcf,
	0xa4, 0x35, 0xe1, 0x04, 0x14, 0x99, 0x3f, 0x93, 0xa4, 0x2c, 0x4b, 0x09, 0xd1, 0x69, 0xef, 0xb2,
	0x3f, 0xce, 0x80, 0x85, 0x48, 0x2d, 0xc7, 0x26, 0x0e, 0x9b, 0xeb, 0xce, 0x33, 0xe9, 0xd1, 0x1b,
	0x53, 0x02, 0x3f, 0xbc, 0x47, 0x67, 0x78, 0x4c, 0xee, 0x22, 0x96, 0x7e, 0xfc, 0xcb, 0xcc, 0x28,
	0x7c, 0x94, 0x22, 0x1d, 0xf9, 0x32, 0x93, 0x98, 0x67, 0xac, 0xf9, 0xb0, 0xad, 0x41, 0xfa, 0x2e,
	0xfb, 0x63, 0x31, 0x41, 0xfa, 0xe3, 0xea, 0x58, 0x90, 0xc4, 0x33, 0x0a, 0x32, 0x38, 0x5c, 0x73,
	0x17, 0xa2, 0xd6, 0xe1, 0x1b, 0x43, 0xe4, 0x18, 0x24, 0xef, 0xb2, 0xbf, 0x87, 0x01, 0xd7, 0x86,
	0xf8, 0xc9, 0xb1, 0x24, 0xa3, 0x44, 0x12, 0xe1, 0xa9, 0x92, 0x9c, 0xf0, 0xc0, 0x53, 0x44, 0xb9,
	0x72, 0xc2, 0xa5, 0xfa, 0xb2, 0x1c, 0x80, 0xa8, 0xb0, 0x11, 0xd9, 0xf7, 0x58, 0x8e, 0x24, 0x91,
	0xe3, 0xc5, 0xe1, 0x72, 0xd0, 0x0e, 0x72, 0x4a, 0xcb, 0x97, 0x42, 0xe6, 0x34, 0x71, 0x37, 0x23,
	0x02, 0xb8, 0x62, 0xf7, 0xec, 0xb5, 0x03, 0xbb, 0xe3, 0x45, 0x7e, 0xf2, 0x1c, 0x98, 0x0a, 0x58,
	0xc7, 0xbd, 0x0c, 0x04, 0x28, 0xe2, 0x68, 0x7f, 0x9c, 0x01, 0x93, 0xb9, 0x76, 0xcf, 0x20, 0xde,
	0xc5, 0x2e, 0x81, 0x64, 0xab, 0xdd, 0x42, 0x64, 0x44, 0x4c, 0x09, 0x17, 0x06, 0x84, 0x34, 0xf7,
	0xf6, 0x7b, 0x87, 0x85, 0x11, 0x8b, 0xd0, 0xb0, 0xab, 0xe0, 0x3c, 0xee, 0x5d, 0xf7, 0xad, 0xe6,
	0x7e, 0x63, 0xbf, 0xd3, 0x76, 0x51, 0xb7, 0xdb, 0x6c, 0x6d, 0x93, 0x51, 0x70, 0x7a, 0xd5, 0x73,
	0x4e, 0xbb, 0x57, 0x7b, 0xab, 0xb9, 0xbf, 0xd1, 0xaf, 0x90, 0x5b, 0x04, 0x53, 0x36, 0x69, 0x9d,
	0x18, 0x8c, 0x9d, 0x7b, 0x7c, 0xc4, 0x24, 0x9e, 0x1c, 0x31, 0xcc, 0x47, 0x47, 0xcc, 0xa8, 0x90,
	0x15, 0xd7, 0x93, 0x29, 0x06, 0x26, 0x32, 0x7f, 0x92, 0x01, 0xd3, 0xe5, 0xb6, 0xd7, 0xf4, 0x0f,
	0x43, 0x51, 0x39, 0x30, 0xe1, 0x21, 0xdf, 0x3e, 0xd8, 0xed, 0x3d, 0x45, 0xda, 0x88, 0x8c, 0x7d,
	0x1d, 0xcc, 0x7d, 0x77, 0xc2, 0xce, 0x76, 0x3f, 0x8e, 0xa4, 0x3f, 0x39, 0x06, 0x26, 0xef, 0xda,
	0xfe, 0x80, 0x46, 0x47, 0x9f, 0x4d, 0xa3, 0x0f, 0x6c, 0xff, 0x84, 0x46, 0x99, 0xb3, 0x35, 0xfa,
	0xc0, 0xf6, 0x69, 0x8d, 0xb2, 0x75, 0x70, 0x09, 0xf3, 0x69, 0xb6, 0x1a, 0x7b, 0xed, 0x56, 0xb3,
	0xd7, 0xee, 0x34, 0x5b, 0xdb, 0x8d, 0xbd, 0xb6, 0x87, 0xe6, 0xc7, 0x4f, 0x67, 0x95, 0x9b, 0xf8,
	0xfa, 0x3b, 0xcc, 0xb7, 0x8e, 0x18, 0xa6, 0x30, 0x62, 0x61, 0x31, 0x8a, 0xad, 0x72, 0xbf, 0x72,
	0xb9, 0xed, 0x21, 0xf6, 0x47, 0x19, 0xb0, 0x18, 0x8f, 0xaf, 0x0d, 0x2f, 0x0a, 0x4a, 0xc4, 0xb9,
	0x3b, 0xed, 0xdd, 0xf9, 0x09, 0xc2, 0xfe, 0xe9, 0xa3, 0x7d, 0x30, 0x9c, 0x85, 0x41, 0xf3, 0x8b,
	0x4c, 0x22, 0x8d, 0x9b, 0xbf, 0x6a, 0x9f, 0x11, 0xf9, 0x1a, 0x80, 0xf5, 0xec, 0x9e, 0xdd, 0xd8,
	0xc6, 0x6e, 0xde, 0x6f, 0x39, 0x45, 0x5a, 0x3e, 0x2d, 0x84, 0x0f, 0x8c, 0x8a, 0x78, 0x57, 0xa1,
	0x37, 0x38, 0x64, 0x56, 0xc1, 0xec, 0xe7, 0x1f, 0xf4, 0x1a, 0x61, 0x86, 0x82, 0xb3, 0x84, 0xc9,
	0x67, 0xd3, 0xda, 0xcc, 0xe7, 0x1f, 0xf4, 0xee, 0xf4, 0x6b, 0xb1, 0x35, 0x70, 0x11, 0xf3, 0x71,
	0x77, 0xed, 0xe6, 0x5e, 0x37, 0xce, 0x0e, 0x3c, 0xa3, 0x11, 0x3e, 0xff, 0xa0, 0x97, 0x27, 0x95,
	0x8f, 0x99, 0xe6, 0x32, 0xb4, 0x0b, 0x9e, 0x7f, 0x7c, 0xc4, 0x8c, 0x3e, 0x39, 0x62, 0xc6, 0x3e,
	0x3a, 0x62, 0x26, 0xc4, 0xac, 0x92, 0xe5, 0xb3, 0xea, 0x7a, 0x32, 0x35, 0x06, 0xc7, 0xd7, 0x93,
	0xa9, 0x04, 0x1c, 0x5d, 0x4f, 0xa6, 0x92, 0x70, 0x2c, 0xf3, 0xed, 0x04, 0xb8, 0x40, 0xc2, 0x44,
	0xab, 0x67, 0xa1, 0x07, 0x9d, 0x66, 0x0f, 0x85, 0xde, 0xc9, 0x83, 0xd9, 0x66, 0xab, 0x8b, 0x3a,
	0xbd, 0x20, 0x3e, 0xb5, 0x7a, 0x41, 0x84, 0x38, 0x9e, 0xc4, 0x7e, 0xfa, 0x75, 0x6b, 0x26, 0xa0,
	0x08, 0xeb, 0xb3, 0x9f, 0x05, 0x10, 0xed, 0xa2, 0x3d, 0xd4, 0xea, 0x35, 0xba, 0x68, 0x17, 0xb9,
	0xbd, 0x76, 0x87, 0x0c, 0xc0, 0xc9, 0x1c, 0x8b, 0x2b, 0x25, 0x3b, 0x89, 0xf9, 0x37, 0xc2, 0x1f,
	0x90, 0xb1, 0xe6, 0x42, 0xda, 0x5a, 0x48, 0xca, 0xbe, 0x06, 0x52, 0xfb, 0xed, 0x6e, 0x93, 0x28,
	0x62, 0x94, 0xcc, 0xbb, 0x99, 0xe1, 0x46, 0x2b, 0xd4, 0xcb, 0xa5, 0x8d, 0x90, 0xd2, 0xea, 0xd7,
	0x61, 0xbd, 0x48, 0x62, 0xe4, 0x11, 0x15, 0x44, 0x01, 0xf5, 0xb3, 0xc3, 0xb9, 0x0c, 0xeb, 0xf5,
	0x72, 0x31, 0x64, 0x80, 0x83, 0x76, 0xd7, 0x6c, 0xf5, 0x3a, 0x87, 0x51, 0x27, 0x43, 0xdc, 0xc2,
	0x1b, 0x80, 0x3d, 0x49, 0xc4, 0x42, 0x30, 0xfa, 0x16, 0x3a, 0x0c, 0x83, 0x28, 0xfe, 0xc9, 0x5e,
	0x00, 0x63, 0x6f, 0xdb, 0xbb, 0x07, 0x41, 0xc0, 0x4c, 0x59, 0x01, 0x70, 0x2b, 0xa1, 0x31, 0x99,
	0x9f, 0x1d, 0x05, 0xd7, 0x6a, 0x3b, 0xf6, 0x3e, 0xda, 0xe8, 0xb4, 0xb1, 0x07, 0x23, 0xcf, 0x6c,
	0x79, 0xfb, 0xed, 0x66, 0x2b, 0x0a, 0xb5, 0x15, 0x00, 0xf1, 0x68, 0xea, 0x75, 0x6c, 0xdf, 0x6f,
	0xba, 0xf1, 0xa4, 0xe6, 0xc5, 0x53, 0xc7, 0x4f, 0x3d, 0x20, 0x26, 0x29, 0xcd, 0xac, 0x4d, 0xc1,
	0x6c, 0x05, 0x80, 0xbd, 0x66, 0xaf, 0xb9, 0x1d, 0xf8, 0x58, 0x10, 0x12, 0x97, 0x87, 0x73, 0x22,
	0x72, 0xe5, 0xda, 0xbd, 0x72, 0x9f, 0x3e, 0x90, 0xc9, 0x8a, 0x71, 0x60, 0x97, 0xc0, 0xf4, 0x03,
	0xe4, 0x34, 0xba, 0x6e, 0xc7, 0xde, 0x8f, 0x42, 0x65, 0xaa, 0xef, 0x9f, 0xd6, 0xd4, 0x03, 0xe4,
	0xd4, 0xc2, 0x32, 0xf6, 0x15, 0x00, 0xfc, 0xdd, 0xf6, 0x83, 0xc6, 0xae, 0xed, 0xa0, 0xdd, 0xf9,
	0xe4, 0x89, 0x3c, 0x68, 0x12, 0x97, 0x96, 0x70, 0x21, 0xfb, 0x39, 0xc0, 0xf6, 0x3a, 0x76, 0xab,
	0x1b, 0x7a, 0x71, 0x07, 0x75, 0x71, 0x04, 0x1f, 0x1b, 0x2a, 0x6e, 0xae, 0xdd, 0x5b, 0x41, 0x3e,
	0x6a, 0x75, 0x51, 0xfd, 0xb8, 0x8a, 0x45, 0x6a, 0x04, 0x59, 0x5d, 0x6f, 0x10, 0xcd, 0x66, 0xc1,
	0x8c, 0xbd, 0x8b, 0x45, 0xd9, 0x6e, 0xb7, 0x3d, 0xa7, 0xdd, 0x23, 0x21, 0x29, 0x26, 0xf6, 0x34,
	0x29, 0x5d, 0x0b, 0x0a, 0xd7, 0x93, 0xa9, 0x71, 0x38, 0x91, 0xf9, 0xf5, 0x04, 0x98, 0x3f, 0x4d,
	0x25, 0xac, 0xf8, 0xf4, 0x19, 0x31, 0x3e, 0x68, 0x83, 0x40, 0x5e, 0x05, 0x63, 0xce, 0x6e, 0xdb,
	0x7d, 0x2b, 0x8c, 0xfa, 0xea, 0xd9, 0x66, 0xc8, 0x61, 0xd2, 0xc1, 0x86, 0x71, 0x07, 0x0b, 0x23,
	0x56, 0xc0, 0x87, 0xbd, 0x07, 0x52, 0x1d, 0xe4, 0x35, 0x3b, 0xc8, 0xed, 0x11, 0xf5, 0x4e, 0x09,
	0xb7, 0xce, 0xe6, 0x69, 0x85, 0xd4, 0xa7, 0xb0, 0xed, 0x73, 0x63, 0x2d, 0x90, 0xf4, 0x77, 0xed,
	0xed, 0xd0, 0x02, 0xdf, 0x77, 0x36, 0xd7, 0xd5, 0x5d, 0x7b, 0x7b, 0x90, 0x63, 0x7e, 0xa7, 0xdd,
	0x74, 0x51, 0xc8, 0x97, 0xf0, 0xca, 0xa5, 0xe9, 0x20, 0x75, 0xee, 0xf1, 0x11, 0x33, 0x16, 0xce,
	0x93, 0x63, 0x72, 0x56, 0xea, 0xcf, 0x94, 0xff, 0x94, 0x01, 0x2f, 0x3f, 0x1b, 0x6b, 0x56, 0x06,
	0xa0, 0xd5, 0x6e, 0xec, 0x20, 0xdb, 0x43, 0x9d, 0xee, 0x53, 0x26, 0xfc, 0xc9, 0x56, 0xbb, 0x10,
	0x10, 0xb2, 0x0d, 0x80, 0x87, 0x09, 0x6a, 0x79, 0xfd, 0xaa, 0x81, 0x45, 0x94, 0xef, 0xbe, 0x9f,
	0x61, 0x0f, 0x67, 0x02, 0x7e, 0x61, 0x03, 0xb9, 0x97, 0xc1, 0xf9, 0x6e, 0x8c, 0x7d, 0xc3, 0x25,
	0x22, 0x9f, 0x96, 0x1a, 0xfc, 0x43, 0x06, 0xa4, 0x9f, 0xd6, 0x06, 0xfb, 0x39, 0x70, 0xb1, 0xd9,
	0xf2, 0x51, 0x07, 0xb5, 0x5c, 0x14, 0xf2, 0x8d, 0x25, 0x6f, 0xb9, 0x57, 0x3e, 0x3c, 0x62, 0x66,
	0x72, 0xed, 0xde, 0xab, 0xc5, 0x88, 0xe8, 0x37, 0x8e, 0x98, 0x91, 0x70, 0xb0, 0x7d, 0x8d, 0x61,
	0xc2, 0x5f, 0x37, 0x1e, 0x25, 0xac, 0xf3, 0x7d, 0x3e, 0x81, 0xb8, 0x38, 0xe1, 0x63, 0x1d, 0x70,
	0xd1, 0x3e, 0xe8, 0xb5, 0x83, 0xec, 0x38, 0xce, 0x3e, 0x08, 0xe2, 0x37, 0x3f, 0x3c, 0x62, 0xce,
	0x63, 0xf6, 0xc6, 0x41, 0xaf, 0xbd, 0x47, 0x64, 0x7b, 0x15, 0x8b, 0x75, 0x6a, 0x23, 0x2c, 0xe6,
	0x46, 0x94, 0xd3, 0x6f, 0x23, 0xf3, 0xc7, 0x12, 0xe0, 0xf9, 0xa7, 0x7a, 0x37, 0xbb, 0x0e, 0xc6,
	0xbb, 0x3d, 0xbb, 0x77, 0xd0, 0x0d, 0xe3, 0xde, 0xf5, 0x01, 0xa3, 0x14, 0x7a, 0xbd, 0xfd, 0x1a,
	0x21, 0xc8, 0xb7, 0x3d, 0x94, 0x3b, 0xff, 0xe1, 0x11, 0x93, 0xa8, 0xde, 0x26, 0x8b, 0xd7, 0x77,
	0x99, 0x31, 0xc8, 0x64, 0x98, 0x11, 0x2b, 0xe4, 0xc0, 0xfe, 0x08, 0x03, 0x92, 0x4e, 0xdb, 0x3b,
	0x0c, 0x7b, 0xb1, 0xf7, 0xe1, 0x11, 0xb3, 0x56, 0xdf, 0x41, 0xe9, 0x0e, 0xfa, 0xc2, 0x01, 0xea,
	0xf6, 0x90, 0x97, 0xde, 0xb4, 0x4a, 0xe9, 0x07, 0x76, 0x37, 0xdd, 0x41, 0x9f, 0x27, 0xe1, 0x78,
	0x39, 0xbd, 0xb1, 0x8b, 0xec, 0x2e, 0x4a, 0xbb, 0xed, 0x16, 0x0e, 0x1d, 0xe9, 0x07, 0xcd, 0xde,
	0x4e, 0xfa, 0xb0, 0x7d, 0xd0, 0x49, 0xdb, 0xde, 0x5e, 0xb3, 0xd5, 0xec, 0xf6, 0x3a, 0x76, 0xaf,
	0xdd, 0x59, 0xfe, 0x8d, 0x23, 0x26, 0xf9, 0x33, 0xef, 0x33, 0x33, 0x76, 0xd7, 0x6d, 0x36, 0xb3,
	0x69, 0xc7, 0xee, 0x22, 0x45, 0x22, 0x52, 0x74, 0xc6, 0xe7, 0x1f, 0xa5, 0x7f, 0x92, 0x61, 0x2c,
	0xd2, 0x34, 0x7b, 0x13, 0x4c, 0xe2, 0xbf, 0x8d, 0x1d, 0xbb, 0xbb, 0x13, 0x2e, 0x06, 0xd9, 0x30,
	0x32, 0x90, 0x55, 0x55, 0x27, 0x09, 0xd3, 0xf3, 0x69, 0x2b, 0x85, 0x89, 0x0a, 0x76, 0x77, 0x27,
	0xb3, 0x02, 0x5e, 0x7c, 0x96, 0xf1, 0xca, 0x5e, 0x03, 0xa3, 0x07, 0x9d, 0xe6, 0xc0, 0xd4, 0xfc,
	0x68, 0x8c, 0xb1, 0x30, 0x3a, 0xf3, 0xb7, 0x12, 0x60, 0x6e, 0xa3, 0x83, 0xfc, 0xe6, 0xc3, 0xb2,
	0xdd, 0x73, 0x77, 0x4a, 0xcd, 0x6e, 0x8f, 0xbd, 0x07, 0xa6, 0x48, 0x0e, 0x89, 0xb1, 0x28, 0x58,
	0x0e, 0x4e, 0xe6, 0xd4, 0xc8, 0x86, 0xe0, 0xcb, 0xcc, 0x44, 0x66, 0xac, 0x33, 0xfa, 0x1b, 0x81,
	0x60, 0x11, 0xf8, 0xf5, 0x50, 0x4e, 0xb2, 0xfa, 0x63, 0x62, 0x0b, 0x0e, 0x80, 0xb3, 0xcb, 0x80,
	0x15, 0xfb, 0x87, 0x19, 0x30, 0xd3, 0xdc, 0x7f, 0x5b, 0x39, 0x66, 0x3e, 0x4a, 0x98, 0x3f, 0xfc,
	0x27, 0xef, 0xdc, 0xf0, 0xd0, 0x5e, 0x9b, 0xcf, 0xf6, 0x50, 0xb7, 0x97, 0x75, 0x3b, 0xbd, 0x6c,
	0xb7, 0x67, 0x6f, 0x37, 0x5b, 0xdb, 0xd9, 0x6e, 0xdb, 0xef, 0x39, 0x76, 0xeb, 0xad, 0xc6, 0x1e,
	0x72, 0xb3, 0xfb, 0x9d, 0xb6, 0x87, 0xe5, 0xf8, 0xe2, 0x5f, 0x62, 0x58, 0x5f, 0x7e, 0xe8, 0xbe,
	0x8a, 0x99, 0xbd, 0xda, 0xed, 0xd9, 0x2d, 0xcf, 0xee, 0x78, 0x71, 0x71, 0x1e, 0x25, 0x9e, 0x4d,
	0xba, 0x69, 0xcc, 0xa1, 0x2f, 0xdf, 0x2a, 0x98, 0x6e, 0xb6, 0xde, 0xc6, 0x19, 0xcd, 0x1e, 0xd6,
	0x46, 0x30, 0x31, 0xe7, 0x5e, 0x78, 0x7c, 0xc4, 0x30, 0xef, 0xbd, 0xcf, 0x5c, 0x05, 0xe3, 0xbb,
	0x6a, 0xc3, 0x76, 0x77, 0xc1, 0x39, 0xaf, 0xd5, 0x6d, 0xec, 0xb6, 0x6d, 0xaf, 0xe1, 0xd8, 0xbb,
	0x76, 0xcb, 0x45, 0x1d, 0x6b, 0x2a, 0xa8, 0x48, 0xb4, 0x98, 0x79, 0x13, 0x4c, 0x1b, 0xdd, 0xd6,
	0xb1, 0x46, 0x0d, 0x00, 0xec, 0x6e, 0xa3, 0x75, 0xb0, 0xe7, 0xe0, 0x28, 0x82, 0x15, 0x3a, 0x93,
	0xcb, 0xf4, 0x07, 0x05, 0x5e, 0xa2, 0xc1, 0xe8, 0x57, 0x2a, 0x2e, 0xdd, 0xa4, 0xdd, 0xad, 0x04,
	0x95, 0x32, 0xbf, 0x3e, 0x0d, 0x2e, 0xd5, 0x9a, 0x7b, 0xfb, 0xbb, 0xe8, 0xae, 0xed, 0x9b, 0x78,
	0x0d, 0xd7, 0xc5, 0x13, 0xd7, 0xc1, 0x2e, 0x09, 0x6f, 0x76, 0xeb, 0xb0, 0xe1, 0xb5, 0xf7, 0xec,
	0x66, 0x2b, 0x8c, 0xf0, 0xa7, 0x86, 0x37, 0xbb, 0x75, 0xb8, 0x42, 0x08, 0x59, 0x19, 0x4c, 0xa1,
	0x87, 0xb6, 0x4b, 0x92, 0xd5, 0x03, 0x34, 0x3f, 0x1d, 0xf8, 0x5c, 0x24, 0xd5, 0x64, 0x67, 0x02,
	0x32, 0xf3, 0x8f, 0x12, 0x3b, 0x78, 0x62, 0x02, 0x84, 0xf0, 0x0e, 0xa6, 0x63, 0x55, 0x30, 0xdd,
	0x3d, 0xf0, 0xfd, 0xe6, 0xc3, 0xb0, 0xde, 0xcc, 0x19, 0xf5, 0xa6, 0x02, 0xca, 0xa0, 0x22, 0x0f,
	0x52, 0x58, 0xcc, 0x7d, 0xbb, 0xb7, 0x33, 0x7f, 0xee, 0x0c, 0x21, 0x19, 0x6b, 0xc2, 0x6e, 0x1d,
	0x6e, 0xd8, 0xbd, 0x1d, 0x96, 0x03, 0x53, 0x98, 0x3c, 0x74, 0x97, 0x79, 0x96, 0x34, 0x35, 0xd3,
	0x1f, 0x3e, 0x89, 0x6f, 0x25, 0x98, 0x02, 0x63, 0x01, 0x4c, 0x13, 0xd8, 0x90, 0x5d, 0x06, 0x04,
	0x6a, 0x74, 0xd0, 0x36, 0x7a, 0x48, 0x56, 0x2c, 0xc7, 0x15, 0x6e, 0x3c, 0x4a, 0x3c, 0x66, 0x70,
	0x85, 0x49, 0x4c, 0x62, 0x61, 0x0a, 0xf6, 0x1e, 0x98, 0xd8, 0x43, 0xbd, 0x9d, 0xb6, 0xd7, 0x9d,
	0x9f, 0x48, 0x8f, 0xde, 0x98, 0x15, 0xae, 0x0c, 0x89, 0x23, 0x65, 0x42, 0x91, 0x7b, 0xe1, 0xd8,
	0xa3, 0xde, 0x65, 0x12, 0x90, 0x39, 0x69, 0xbc, 0x79, 0xc6, 0x8a, 0xd8, 0xb1, 0x65, 0x70, 0x01,
	0x3d, 0xdc, 0x6f, 0x76, 0x82, 0x3d, 0x8d, 0xfe, 0x56, 0x6a, 0xb8, 0x1e, 0x58, 0x58, 0x0e, 0x36,
	0x5b, 0x97, 0xa3, 0xcd, 0xd6, 0xe5, 0x7a, 0x44, 0x61, 0x9d, 0x3f, 0xae, 0xd7, 0x47, 0xb2, 0xb7,
	0x40, 0x6a, 0x0f, 0xf5, 0x6c, 0xbc, 0xe0, 0x08, 0xd7, 0x00, 0x8b, 0x03, 0x92, 0x96, 0x51, 0xb7,
	0x6b, 0x6f, 0xa3, 0x32, 0xea, 0xd9, 0x24, 0xc1, 0xe9, 0xd3, 0x3f, 0xcb, 0xe2, 0x6b, 0xea, 0x7b,
	0xb1, 0xf8, 0x4a, 0x9c, 0xbd, 0xf8, 0x3a, 0x65, 0x85, 0x3a, 0x77, 0x86, 0x2f, 0x24, 0x86, 0xac,
	0x50, 0x6f, 0xfd, 0xb5, 0xb1, 0xef, 0xbc, 0x36, 0xcb, 0x73, 0x59, 0x31, 0xcb, 0x2b, 0x59, 0x35,
	0xcb, 0x4b, 0x59, 0xfd, 0x83, 0x23, 0xe6, 0xe7, 0xc7, 0xc0, 0x65, 0x90, 0xc4, 0x33, 0xc8, 0xc2,
	0x1c, 0x98, 0x89, 0xfa, 0xbe, 0x8c, 0x67, 0x27, 0x50, 0x06, 0xe3, 0x81, 0xd3, 0x2f, 0xe5, 0x81,
	0x01, 0xce, 0xc5, 0xc7, 0x8b, 0x30, 0x6a, 0xb4, 0x0e, 0xc1, 0x05, 0x6a, 0x2c, 0x08, 0x63, 0x26,
	0x06, 0xc0, 0x25, 0xda, 0xd5, 0x85, 0xf1, 0x1a, 0x81, 0xc0, 0x6d, 0x90, 0xc4, 0xee, 0x49, 0x98,
	0xcd, 0x1d, 0x7b, 0x75, 0xc0, 0xea, 0x32, 0xe5, 0xb3, 0x6c, 0x6a, 0x61, 0x3c, 0x70, 0x4d, 0x70,
	0x31, 0xee, 0x9a, 0xec, 0xc4, 0xc2, 0x18, 0xf1, 0x40, 0x30, 0x0f, 0x26, 0x02, 0xff, 0xea, 0xe6,
	0x66, 0xfa, 0xce, 0x08, 0x47, 0x39, 0x06, 0x7c, 0x3f, 0x00, 0xfd, 0x2d, 0xb3, 0x6e, 0xae, 0x0c,
	0xf4, 0xb3, 0x6d, 0xb8, 0x7c, 0xfa, 0x96, 0x1e, 0x1c, 0xcb, 0x50, 0x7b, 0xb9, 0x1c, 0x03, 0x7e,
	0x08, 0x80, 0xfe, 0x3e, 0x58, 0x37, 0x67, 0x3d, 0x33, 0xf3, 0x93, 0xdb, 0x74, 0x70, 0x2c, 0x73,
	0x72, 0x73, 0x9c, 0x63, 0x80, 0x0f, 0xa6, 0x83, 0xed, 0xad, 0x34, 0x59, 0x05, 0xe5, 0xee, 0x80,
	0xcf, 0x3c, 0x63, 0x1b, 0xc3, 0xb6, 0xe0, 0xe0, 0x58, 0x66, 0xd8, 0x56, 0x2e, 0xc7, 0x80, 0x1a,
	0xd9, 0x83, 0x4a, 0x63, 0xcb, 0x77, 0x73, 0xab, 0x40, 0x7b, 0xc6, 0x46, 0x4e, 0x6c, 0xae, 0xc1,
	0xb1, 0x4c, 0x7f, 0x47, 0x15, 0x68, 0x20, 0x85, 0xbd, 0x2e, 0x7d, 0xd7, 0x58, 0xcd, 0x64, 0x9f,
	0x36, 0x7a, 0x16, 0x40, 0xbe, 0xdd, 0xf2, 0x9b, 0xdb, 0x07, 0x1d, 0xe4, 0x81, 0x57, 0xc0, 0x9c,
	0xd9, 0x1f, 0xbf, 0x69, 0x3c, 0x80, 0x17, 0x2e, 0x0d, 0x0f, 0x05, 0xb9, 0x17, 0xc1, 0x4c, 0xe0,
	0x84, 0x51, 0xe6, 0x87, 0x57, 0xe4, 0xc9, 0x27, 0x47, 0xcc, 0x28, 0x5e, 0x91, 0x4b, 0x59, 0x5e,
	0xc8, 0xf2, 0x22, 0x5e, 0xb5, 0x13, 0xbf, 0x89, 0xd1, 0x9c, 0x7b, 0x72, 0xc4, 0x40, 0x4c, 0xc3,
	0xab, 0x59, 0x5e, 0xcb, 0x2a, 0xb9, 0x9b, 0x60, 0x01, 0x0f, 0x2d, 0xdb, 0x7b, 0x1b, 0xcf, 0x46,
	0x64, 0x67, 0x83, 0xc8, 0x13, 0xac, 0xc6, 0x70, 0x0e, 0x3d, 0xf5, 0xe4, 0x88, 0x99, 0xc5, 0x39,
	0x34, 0xcf, 0x67, 0x79, 0x39, 0x48, 0x29, 0xfb, 0xcb, 0xfc, 0x51, 0x98, 0xec, 0x2f, 0xfc, 0x21,
	0x3c, 0xb7, 0x9e, 0x4c, 0xa5, 0xe0, 0xe4, 0x7a, 0x32, 0x35, 0x0b, 0xe7, 0x32, 0x4f, 0x66, 0xc0,
	0xa5, 0x6a, 0xa7, 0xb9, 0xdd, 0x6c, 0xd5, 0x50, 0xe7, 0x6d, 0xd4, 0xa9, 0x1d, 0x38, 0x5d, 0xd4,
	0x23, 0x13, 0x4f, 0x3c, 0x26, 0x31, 0xdf, 0x65, 0x4c, 0xda, 0x04, 0xd3, 0x1d, 0x14, 0x18, 0x60,
	0xb7, 0xd9, 0xed, 0x85, 0x89, 0x80, 0x48, 0xa6, 0x91, 0xf7, 0x99, 0xd9, 0x14, 0x73, 0x83, 0xe1,
	0x98, 0x5b, 0xe3, 0x41, 0x47, 0xfa, 0x91, 0x36, 0x7d, 0x1c, 0x69, 0xfb, 0xfb, 0x05, 0x16, 0xe8,
	0x20, 0x6c, 0x7c, 0x32, 0xd3, 0xfe, 0x10, 0x98, 0x71, 0xdb, 0x07, 0x78, 0xc1, 0xdd, 0x70, 0xdb,
	0x5e, 0xb8, 0xc0, 0x9f, 0x15, 0x9e, 0x3f, 0x6d, 0x81, 0x4f, 0x48, 0x49, 0x86, 0x38, 0x4f, 0xcd,
	0xc7, 0xf1, 0x2d, 0xd3, 0x69, 0xf7, 0x98, 0xac, 0xdb, 0xdf, 0x93, 0x5b, 0x78, 0x86, 0x3d, 0xb9,
	0xfb, 0x60, 0xce, 0xdd, 0x6d, 0x52, 0xbb, 0x1d, 0xc1, 0x52, 0x29, 0x3d, 0x50, 0x8d, 0x2c, 0x6f,
	0xa3, 0x6d, 0x0e, 0xac, 0xa9, 0xdc, 0xcc, 0xb7, 0x8f, 0x18, 0xe6, 0xab, 0xef, 0x33, 0x63, 0x60,
	0x94, 0x49, 0x24, 0x0b, 0x23, 0xd6, 0x6c, 0xc0, 0xa9, 0xbf, 0x17, 0xf2, 0x2a, 0x18, 0xc7, 0x81,
	0xa7, 0xb9, 0x3f, 0xff, 0xdc, 0x99, 0x93, 0xe9, 0x98, 0xdd, 0x3a, 0x2c, 0xee, 0xb3, 0x65, 0x30,
	0xdb, 0x4f, 0xea, 0x02, 0x8d, 0xa7, 0x49, 0xb5, 0x97, 0x86, 0x6b, 0x66, 0x20, 0x27, 0x2c, 0x90,
	0x4c, 0x29, 0x40, 0x12, 0x3d, 0xaf, 0x00, 0xd0, 0xdc, 0x0f, 0xb2, 0x24, 0xd4, 0x21, 0xb9, 0xc3,
	0x94, 0xf0, 0xc2, 0x70, 0x56, 0xc5, 0xfd, 0x72, 0x40, 0x46, 0xf2, 0x7c, 0xc6, 0x9a, 0x6c, 0x46,
	0x08, 0xf6, 0x26, 0xc0, 0x53, 0x7d, 0xc3, 0xee, 0xb6, 0xe6, 0x33, 0x67, 0xce, 0x02, 0xb8, 0xab,
	0x46, 0xb7, 0xc5, 0xbe, 0x0e, 0x52, 0x76, 0xb7, 0x15, 0xc8, 0xff, 0x02, 0xa9, 0x71, 0xca, 0x06,
	0x50, 0x3c, 0xfd, 0x2a, 0x24, 0xac, 0x09, 0xbb, 0xdb, 0x22, 0x72, 0xaf, 0x81, 0x29, 0xcc, 0x20,
	0x12, 0x7c, 0x86, 0xf0, 0x78, 0xf1, 0x6c, 0x1e, 0xa1, 0xe4, 0x09, 0x0b, 0xd8, 0x7d, 0x0c, 0x5b,
	0x06, 0xd3, 0x24, 0x5f, 0x8f, 0x38, 0x05, 0x73, 0xf2, 0x29, 0x7e, 0x16, 0x63, 0x13, 0xdb, 0x04,
	0xc1, 0xf5, 0x23, 0x76, 0x7f, 0x93, 0x01, 0xd7, 0xda, 0x64, 0x94, 0x35, 0xba, 0x64, 0x98, 0x35,
	0xba, 0x64, 0x9c, 0x75, 0x1b, 0xc1, 0x62, 0x78, 0x7e, 0x92, 0x6c, 0x54, 0xdd, 0x1e, 0xce, 0x7f,
	0xf8, 0xf8, 0x1c, 0x82, 0xee, 0x06, 0x0b, 0x03, 0xb2, 0x23, 0x95, 0x7b, 0xfd, 0xab, 0xef, 0x33,
	0x49, 0x90, 0x18, 0x21, 0x43, 0x69, 0xfa, 0xab, 0xcc, 0x64, 0x66, 0xa2, 0x33, 0x86, 0x93, 0xb7,
	0x20, 0xb3, 0xf9, 0x6a, 0x94, 0xd9, 0xe0, 0xa2, 0xa5, 0xa8, 0xe8, 0xa3, 0x5f, 0xfe, 0xa5, 0xd1,
	0xf1, 0x2f, 0xbe, 0xcf, 0x24, 0x52, 0x23, 0xd6, 0x95, 0xf6, 0x69, 0x0d, 0x2c, 0x94, 0xc0, 0xe2,
	0xd9, 0xad, 0x3f, 0x6d, 0x3f, 0x6c, 0x32, 0xb6, 0x1f, 0x76, 0xeb, 0x2f, 0x8f, 0x7e, 0xe7, 0x35,
	0x96, 0xcf, 0xea, 0x59, 0x29, 0x2b, 0xc8, 0x59, 0x39, 0x2b, 0x72, 0x59, 0x51, 0xcc, 0x8a, 0xbf,
	0x78, 0xc4, 0x14, 0xc0, 0x0c, 0x48, 0x95, 0xa3, 0xa0, 0xc2, 0xf0, 0x60, 0x0a, 0x8c, 0x87, 0x9b,
	0x2f, 0x8c, 0x0e, 0x2e, 0x82, 0x89, 0x3c, 0x19, 0x35, 0x5d, 0x16, 0x90, 0xaa, 0xa4, 0x22, 0x38,
	0x0f, 0x66, 0x2d, 0xb4, 0xdd, 0x6c, 0xb7, 0xec, 0xdd, 0xb4, 0xe9, 0x6d, 0xa3, 0x2e, 0xcb, 0x88,
	0x1f, 0x1c, 0x31, 0x5f, 0x4f, 0x9c, 0x9e, 0x41, 0x5c, 0x03, 0x29, 0xcb, 0x0c, 0xe7, 0x18, 0x48,
	0x87, 0x2e, 0x38, 0x0a, 0x5e, 0x04, 0x33, 0x61, 0x28, 0x49, 0x93, 0x20, 0x91, 0x3b, 0x3f, 0x10,
	0x86, 0xc8, 0x7c, 0x7e, 0x1d, 0x8c, 0x07, 0xd2, 0x40, 0x66, 0xe1, 0xdc, 0x89, 0xc8, 0x00, 0xf6,
	0x41, 0xa2, 0xb8, 0x01, 0x99, 0xa5, 0x1d, 0xe0, 0x83, 0x99, 0x68, 0x70, 0x07, 0x39, 0xc5, 0x12,
	0x58, 0xa0, 0x07, 0xef, 0x72, 0x6c, 0x81, 0x96, 0x99, 0x86, 0xa3, 0x4b, 0xa9, 0x68, 0x0d, 0x03,
	0x5e, 0x01, 0x97, 0x8e, 0x47, 0xe6, 0x72, 0x58, 0x07, 0x2b, 0x3f, 0x33, 0x07, 0x47, 0x97, 0xa6,
	0x02, 0xba, 0x74, 0x0d, 0xf5, 0xba, 0x60, 0x07, 0x8c, 0x1a, 0xb5, 0x0a, 0x64, 0x96, 0x1a, 0xe0,
	0x73, 0x60, 0xb6, 0x3f, 0x16, 0x83, 0x36, 0x5f, 0x02, 0xe7, 0xa3, 0xa1, 0xb6, 0x7c, 0xbc, 0x78,
	0xc9, 0xcc, 0xc2, 0xd1, 0x25, 0x60, 0xd4, 0xd2, 0xe1, 0xba, 0x04, 0xbc, 0x08, 0x2e, 0xc4, 0x06,
	0xd4, 0x32, 0xfe, 0x4d, 0x1a, 0x23, 0x42, 0x19, 0xb5, 0x0a, 0x69, 0x29, 0xf7, 0x02, 0x98, 0x8b,
	0xfa, 0x19, 0xcd, 0x63, 0xf0, 0xf1, 0x11, 0xb3, 0xf0, 0xe4, 0x88, 0xb9, 0xf2, 0xd1, 0x11, 0x93,
	0x14, 0x94, 0xac, 0x9c, 0x7b, 0x1e, 0x4c, 0x36, 0xf7, 0xa3, 0xe2, 0x0b, 0x8f, 0x8f, 0x98, 0xe7,
	0x9e, 0x1c, 0x31, 0x8b, 0x1f, 0x1d, 0x31, 0x29, 0x91, 0xcf, 0x8a, 0x42, 0x96, 0x17, 0x72, 0x02,
	0x5e, 0x48, 0xf5, 0xa7, 0xcb, 0x17, 0x1f, 0x1f, 0x31, 0x99, 0x27, 0x47, 0xcc, 0xf3, 0x84, 0x46,
	0xca, 0x8a, 0x72, 0x96, 0x17, 0xdf, 0x7d, 0x9f, 0x99, 0xee, 0xee, 0xd8, 0x1d, 0xe4, 0x65, 0xd3,
	0x07, 0x5d, 0xd4, 0x59, 0x4f, 0xa6, 0xae, 0xc0, 0x85, 0xf5, 0x64, 0x6a, 0x11, 0x3e, 0xb7, 0x9e,
	0x4c, 0x3d, 0x0f, 0x33, 0x99, 0x2f, 0x8d, 0x83, 0xf3, 0xc1, 0x5a, 0xaa, 0xbf, 0xb9, 0x7f, 0x62,
	0x3e, 0xfb, 0x6e, 0x73, 0xec, 0x37, 0xc8, 0x8e, 0xec, 0xee, 0x61, 0xe3, 0xf8, 0x7c, 0xe1, 0xcc,
	0xcc, 0x76, 0x84, 0xec, 0xc1, 0xee, 0x1e, 0xf6, 0x25, 0x60, 0x5f, 0x0b, 0x4f, 0x98, 0x62, 0x0c,
	0xe0, 0x99, 0x0c, 0x66, 0x30, 0xf9, 0x71, 0xfd, 0x67, 0x5f, 0x06, 0x32, 0x1f, 0x6b, 0x19, 0xc8,
	0x7c, 0xcc, 0x65, 0x20, 0x43, 0x2f, 0x03, 0x05, 0x90, 0x24, 0x4b, 0xc0, 0xf1, 0xa1, 0x0a, 0xc6,
	0x79, 0x75, 0x2c, 0x5a, 0x5a, 0x84, 0xf6, 0xd6, 0x8f, 0x26, 0xbe, 0xf3, 0xda, 0x24, 0xcf, 0xe1,
	0x54, 0x5f, 0xcc, 0x2a, 0x1f, 0x1c, 0x31, 0xbf, 0xca, 0x9c, 0x3e, 0x54, 0x0b, 0xfd, 0x64, 0xff,
	0x35, 0xf0, 0x7d, 0xc3, 0x92, 0xfd, 0x19, 0xaa, 0xc7, 0x60, 0x9e, 0xee, 0x09, 0xce, 0xd8, 0xc3,
	0x3c, 0x7f, 0x2d, 0xcc, 0xf3, 0x5f, 0x07, 0x9f, 0x8d, 0xd2, 0xfa, 0xe5, 0x13, 0x69, 0xfd, 0x14,
	0x98, 0x0c, 0x0a, 0xec, 0xde, 0x4e, 0x94, 0xe3, 0x2f, 0x0f, 0xe4, 0xf8, 0x26, 0x98, 0xc2, 0x0e,
	0x96, 0x0e, 0x22, 0xd3, 0x92, 0x02, 0x24, 0x70, 0xe5, 0xa4, 0xbf, 0x08, 0x63, 0x06, 0xc6, 0x80,
	0xcb, 0x27, 0x1c, 0x41, 0x48, 0xe2, 0x64, 0x34, 0xf7, 0x32, 0x98, 0x09, 0xb7, 0x46, 0xc3, 0x01,
	0x70, 0xf1, 0xf1, 0x11, 0x33, 0xd7, 0x4f, 0xec, 0xe4, 0x2c, 0xaf, 0x7c, 0xfb, 0x88, 0x19, 0x79,
	0xb6, 0xbc, 0x32, 0x48, 0xef, 0x82, 0xe4, 0x2f, 0xf3, 0x2b, 0x29, 0x30, 0xb5, 0xd6, 0xb1, 0xf7,
	0x77, 0xde, 0x2c, 0xfd, 0xa6, 0x33, 0x3b, 0xda, 0x0f, 0x47, 0x3f, 0xe6, 0x76, 0x44, 0xf2, 0x63,
	0x6e, 0x47, 0x8c, 0x3d, 0xeb, 0x76, 0x84, 0x06, 0x02, 0x36, 0x8d, 0xbe, 0x37, 0x4e, 0xe6, 0xae,
	0x7c, 0x78, 0xc4, 0xa4, 0x6e, 0x6e, 0x63, 0x45, 0x7c, 0x61, 0x97, 0xda, 0x66, 0xb0, 0x26, 0x09,
	0x31, 0xd9, 0x95, 0xa8, 0x03, 0x18, 0x92, 0xe0, 0x50, 0xd7, 0x6b, 0xb6, 0xb6, 0xbb, 0xe1, 0xe1,
	0xe5, 0x2b, 0xc3, 0xa7, 0xe7, 0x50, 0xb3, 0xb5, 0x90, 0x98, 0xe8, 0x6b, 0x2e, 0x64, 0x11, 0x21,
	0xb1, 0xda, 0x82, 0xc5, 0x5f, 0x63, 0x1b, 0xf5, 0xce, 0x3a, 0x35, 0xc4, 0xc3, 0x37, 0xa0, 0x5c,
	0x43, 0x3d, 0x56, 0x05, 0x53, 0x61, 0xb5, 0xfd, 0x76, 0xb7, 0x77, 0xd6, 0xf1, 0x20, 0x1e, 0xc0,
	0x01, 0xe9, 0x46, 0xbb, 0xdb, 0xbb, 0xf5, 0x73, 0x49, 0x3c, 0xa6, 0xb2, 0x42, 0x56, 0xc9, 0x6a,
	0x59, 0xf5, 0x83, 0x23, 0xe6, 0x2b, 0xc9, 0xdf, 0x8a, 0x31, 0x75, 0x21, 0x18, 0x53, 0x0b, 0xd3,
	0x71, 0xf5, 0x03, 0x09, 0x8c, 0x07, 0x8b, 0xe0, 0xa5, 0x25, 0x70, 0x03, 0xf3, 0x3f, 0x56, 0x85,
	0x30, 0xba, 0x66, 0xd6, 0xc1, 0x79, 0xaa, 0x9b, 0x42, 0x72, 0xa3, 0x5a, 0xab, 0x83, 0xcf, 0x80,
	0x0b, 0x65, 0xfb, 0x61, 0x73, 0xef, 0x60, 0x2f, 0x5d, 0x6f, 0xf7, 0xec, 0xdd, 0x74, 0x09, 0xb5,
	0xb6, 0x7b, 0x3b, 0x0b, 0x2f, 0x80, 0xe7, 0x07, 0x0d, 0xb4, 0xbc, 0x67, 0x3f, 0x6c, 0xf4, 0x30,
	0x51, 0x63, 0x97, 0x10, 0xc5, 0x2b, 0x13, 0x87, 0x78, 0x5a, 0x65, 0xd2, 0x91, 0xa8, 0xf2, 0xab,
	0x60, 0x26, 0xaa, 0xbc, 0x82, 0xf6, 0x7b, 0x3b, 0x0b, 0xd7, 0xc0, 0xc2, 0xd0, 0x5a, 0x1e, 0x2e,
	0x05, 0x06, 0xb8, 0x1c, 0x91, 0xe7, 0x48, 0x70, 0xf3, 0xd2, 0x6f, 0x1e, 0xa0, 0x4e, 0x13, 0x75,
	0x17, 0x5e, 0x06, 0x2f, 0x0e, 0xad, 0xe8, 0x04, 0x74, 0x8d, 0x2f, 0x04, 0x74, 0xe0, 0x77, 0x80,
	0x2b, 0xc6, 0xee, 0x6e, 0xfb, 0x41, 0xba, 0x88, 0x97, 0x9c, 0xdd, 0xfd, 0x60, 0x05, 0x4a, 0xd8,
	0x1c, 0x2e, 0xfd, 0x20, 0xf8, 0x01, 0x90, 0x05, 0x2f, 0x9f, 0x60, 0xe4, 0x35, 0xbb, 0xb6, 0xb3,
	0x8b, 0x1a, 0xcd, 0x78, 0x1d, 0x21, 0x51, 0x69, 0x83, 0x2c, 0x78, 0xe9, 0x04, 0x35, 0x6a, 0x0d,
	0x21, 0x1e, 0xdd, 0x42, 0xdd, 0x5c, 0x66, 0x30, 0xa0, 0x9c, 0x0b, 0x8f, 0x8e, 0x13, 0x38, 0xf0,
	0x88, 0x59, 0x89, 0xcc, 0xde, 0x33, 0xa1, 0x85, 0x62, 0x13, 0xfc, 0xe4, 0x93, 0x23, 0x26, 0x85,
	0x27, 0x78, 0x3d, 0xcb, 0x73, 0xfd, 0xe5, 0x66, 0x0a, 0x4e, 0x66, 0xbe, 0x94, 0x04, 0xe7, 0x87,
	0x8c, 0x0b, 0xf6, 0xc6, 0x90, 0x6f, 0x4e, 0x8e, 0x73, 0xe6, 0xd8, 0xc7, 0x27, 0xac, 0x01, 0xe0,
	0xa0, 0x51, 0x49, 0xe6, 0x38, 0x93, 0xbb, 0xfc, 0xe1, 0x11, 0x93, 0x94, 0x39, 0x8e, 0xfb, 0x89,
	0xf7, 0x19, 0xb2, 0x3f, 0x35, 0xbe, 0x94, 0x9c, 0x7f, 0xf7, 0x11, 0x63, 0xcd, 0xee, 0xd9, 0x0f,
	0x89, 0xa7, 0x04, 0xb6, 0x66, 0xd7, 0x02, 0x16, 0x71, 0xd3, 0x92, 0x80, 0x35, 0x93, 0xbb, 0xfe,
	0xf5, 0x77, 0x18, 0xcc, 0x85, 0xe7, 0x04, 0x09, 0xb7, 0x1c, 0x71, 0x1a, 0x5b, 0x1a, 0x9d, 0x7f,
	0x94, 0x26, 0x8c, 0x88, 0xd7, 0x84, 0x8c, 0xb2, 0x60, 0xb2, 0x6f, 0x6d, 0x12, 0xba, 0x66, 0x72,
	0x73, 0x1f, 0x1e, 0x31, 0x09, 0x9e, 0x23, 0xcb, 0xd4, 0xa5, 0xc4, 0xfc, 0x05, 0x2b, 0xb5, 0x67,
	0x3f, 0x24, 0xce, 0xc2, 0xbe, 0x0e, 0xce, 0x0f, 0x31, 0x31, 0x09, 0x5d, 0x43, 0xea, 0x9d, 0xdb,
	0xb3, 0x1f, 0x86, 0x5e, 0x13, 0x3a, 0x0d, 0x7b, 0x1b, 0x5c, 0x1c, 0x6a, 0xda, 0x30, 0x0c, 0x9d,
	0x16, 0x6d, 0x2f, 0x84, 0x95, 0x28, 0x17, 0x62, 0x8b, 0xe0, 0xc2, 0x30, 0xcb, 0x87, 0x5f, 0x45,
	0x9c, 0xc6, 0xeb, 0x7c, 0x50, 0x87, 0x62, 0x95, 0x93, 0x41, 0x26, 0x38, 0x40, 0xa5, 0x38, 0x45,
	0x1d, 0x8c, 0x9f, 0x6f, 0x4d, 0x3c, 0x39, 0x62, 0xc6, 0x3f, 0x3a, 0x62, 0x46, 0xd5, 0xac, 0x16,
	0x9e, 0xa4, 0xfe, 0xa9, 0x24, 0xb8, 0x5c, 0xdd, 0x47, 0x2d, 0x63, 0xbf, 0x79, 0xfc, 0xcd, 0x42,
	0x98, 0xcb, 0x7f, 0x91, 0x01, 0xd7, 0xc2, 0xd3, 0x98, 0xc6, 0x7e, 0xa7, 0xbd, 0x8f, 0x3a, 0x3d,
	0xcc, 0x30, 0xc8, 0x29, 0x83, 0x6f, 0x31, 0xf1, 0x32, 0x7f, 0x69, 0x40, 0xd8, 0x13, 0xec, 0x36,
	0xfa, 0x75, 0x73, 0xd7, 0xb0, 0x86, 0x67, 0xbe, 0xcc, 0x80, 0x4c, 0x74, 0x20, 0x34, 0x11, 0x5b,
	0xf3, 0x2f, 0x84, 0xad, 0x1d, 0x57, 0xa8, 0x45, 0x6d, 0xb1, 0x7b, 0xe0, 0x62, 0xdb, 0x8e, 0x7f,
	0x94, 0x11, 0xad, 0xd1, 0x82, 0x4f, 0x01, 0x5f, 0x3d, 0x65, 0x8d, 0x66, 0x77, 0x07, 0xbb, 0x45,
	0xd6, 0x83, 0x81, 0x5b, 0x91, 0x0d, 0x65, 0xeb, 0x7c, 0xfb, 0x24, 0x11, 0xfb, 0x25, 0x06, 0x5c,
	0xef, 0xa0, 0xee, 0x7e, 0xbb, 0xd5, 0x45, 0xc3, 0x3b, 0x3f, 0xfa, 0x5d, 0x77, 0xfe, 0x39, 0xdc,
	0x28, 0xfc, 0x32, 0x33, 0x93, 0x99, 0x7a, 0x97, 0x49, 0x41, 0x66, 0x21, 0x99, 0x48, 0x8e, 0xc5,
	0xfb, 0x7f, 0x35, 0x6a, 0x71, 0x98, 0x02, 0x7e, 0x17, 0x03, 0x16, 0xb1, 0x06, 0xfa, 0x52, 0x9d,
	0x54, 0x45, 0xf2, 0xe3, 0xa8, 0x62, 0x8e, 0x6c, 0xb0, 0xbf, 0xcb, 0x4c, 0x40, 0x66, 0x61, 0x74,
	0x84, 0x49, 0x58, 0x57, 0xdb, 0x76, 0xd7, 0x0a, 0x1b, 0x19, 0xac, 0x91, 0xf9, 0x03, 0x09, 0x1c,
	0x84, 0xbb, 0x6f, 0x35, 0x5b, 0xdb, 0xc1, 0xf6, 0x1b, 0xfb, 0x88, 0x01, 0xe3, 0x7e, 0x13, 0xed,
	0x7a, 0xd1, 0xa1, 0xd5, 0xce, 0xb7, 0x8f, 0xe8, 0x53, 0xaa, 0x6f, 0xd1, 0xe0, 0x8d, 0x47, 0x09,
	0x92, 0x24, 0x7c, 0x99, 0x19, 0xcf, 0x24, 0x3b, 0x89, 0xf4, 0xb0, 0x33, 0xa3, 0xc1, 0x1d, 0xfe,
	0xf0, 0x04, 0xed, 0x5b, 0x4c, 0xb0, 0x14, 0xfe, 0xf2, 0xfb, 0x4c, 0x02, 0x8e, 0x58, 0x61, 0xbb,
	0xec, 0x12, 0x48, 0xee, 0xd9, 0xdd, 0xb7, 0x9e, 0xf6, 0xc5, 0x16, 0xa6, 0x61, 0x97, 0xc1, 0x78,
	0x07, 0xed, 0xb7, 0x3b, 0xbd, 0xa7, 0x9c, 0xd9, 0x84, 0x54, 0xb9, 0xf4, 0x60, 0xfa, 0x37, 0x17,
	0x8b, 0xc2, 0xa3, 0x62, 0x56, 0x0a, 0x02, 0x6c, 0xe6, 0xf7, 0x27, 0xc0, 0xdc, 0x0a, 0x6a, 0x1d,
	0x16, 0x5b, 0x7e, 0xbb, 0x13, 0x9c, 0xc2, 0xb2, 0x37, 0xc1, 0x4c, 0xdf, 0x5a, 0x78, 0x45, 0x1a,
	0x7e, 0xcd, 0xdb, 0x8f, 0x69, 0x7f, 0x37, 0x69, 0x4d, 0x47, 0x04, 0x78, 0x09, 0x8b, 0x2b, 0xa0,
	0x4e, 0xa7, 0xdd, 0x69, 0xec, 0x05, 0x89, 0x5e, 0x78, 0x36, 0x0a, 0xfa, 0x87, 0xb7, 0x49, 0x6b,
	0x9a, 0x10, 0x84, 0x89, 0x20, 0xbb, 0x0a, 0xce, 0x1f, 0xb4, 0x3c, 0xe4, 0x37, 0x5b, 0xc8, 0x6b,
	0x74, 0x91, 0xdb, 0x40, 0x6f, 0xa3, 0xd6, 0xd3, 0xba, 0x76, 0xae, 0x5f, 0xa5, 0x86, 0x5c, 0x13,
	0x57, 0x60, 0x6f, 0x81, 0x19, 0x7b, 0xbf, 0x19, 0xe3, 0x30, 0x76, 0x26, 0x87, 0x29, 0x7b, 0xbf,
	0x19, 0xd5, 0xcd, 0x5d, 0x02, 0x80, 0xd4, 0x09, 0x3e, 0x1d, 0x48, 0x45, 0x59, 0x6f, 0x98, 0xe4,
	0x1e, 0x7d, 0x0a, 0x5c, 0xa9, 0xef, 0x76, 0x57, 0x9b, 0xad, 0x6d, 0xd4, 0xd9, 0xef, 0x34, 0x5b,
	0xbd, 0xd8, 0x4a, 0x83, 0x75, 0xc0, 0x84, 0xbb, 0x6b, 0x77, 0xbb, 0xe1, 0x89, 0xe7, 0xec, 0x69,
	0xdf, 0xbf, 0xdc, 0x6e, 0xb5, 0x1f, 0xb4, 0x68, 0x36, 0x79, 0x5c, 0x8f, 0x6c, 0x20, 0x26, 0x86,
	0x9f, 0x09, 0x85, 0x8c, 0xd9, 0xaf, 0x9c, 0x07, 0xd3, 0xb1, 0x34, 0x29, 0xf8, 0xc2, 0x75, 0x32,
	0xf7, 0x6b, 0xec, 0x47, 0x47, 0xcc, 0xdf, 0x60, 0x41, 0x9a, 0xb7, 0x6d, 0xd5, 0xf1, 0x35, 0x47,
	0x57, 0x91, 0x2c, 0x71, 0xae, 0x2d, 0x23, 0xcf, 0x53, 0x65, 0x5f, 0x75, 0x34, 0x51, 0x93, 0x1c,
	0xdf, 0x06, 0x69, 0xd1, 0xf5, 0x6c, 0x59, 0xf0, 0x6c, 0xc9, 0xf6, 0x10, 0xa7, 0xfb, 0xbc, 0xaf,
	0x6a, 0xbc, 0xed, 0x09, 0x48, 0x13, 0x3c, 0xd7, 0xb7, 0x05, 0x0e, 0xa4, 0x55, 0xcf, 0x93, 0x39,
	0xc4, 0xf3, 0x82, 0xeb, 0x09, 0xa2, 0x2a, 0x4a, 0xb6, 0xc8, 0x73, 0x8e, 0xce, 0xf9, 0x8a, 0x2f,
	0x49, 0xb6, 0xea, 0x7a, 0x20, 0xcd, 0x3b, 0x48, 0x44, 0x2e, 0x72, 0x90, 0x6c, 0xdb, 0xba, 0x27,
	0x2a, 0xb2, 0x84, 0x14, 0xa4, 0x72, 0xa2, 0xa7, 0xf1, 0xbe, 0xa2, 0x0b, 0x1a, 0x48, 0xbb, 0xb2,
	0x20, 0xca, 0x9e, 0x68, 0x6b, 0x8e, 0xae, 0x8b, 0x92, 0xa3, 0xfa, 0x8e, 0xe3, 0x09, 0x9c, 0xe4,
	0xc9, 0x9c, 0xe3, 0x72, 0xb2, 0xe6, 0x81, 0x34, 0x52, 0x04, 0x5b, 0xf6, 0x25, 0x4f, 0x16, 0x35,
	0xd7, 0xf1, 0x79, 0x45, 0x77, 0x05, 0xdb, 0x57, 0x79, 0x07, 0xb9, 0x82, 0xa8, 0xeb, 0x8e, 0x04,
	0xd2, 0x9e, 0xa0, 0x8b, 0xb2, 0x2b, 0x6b, 0x3e, 0x52, 0x54, 0x45, 0x95, 0x24, 0x1f, 0xb9, 0xae,
	0xa6, 0xf0, 0x12, 0x42, 0xb2, 0x28, 0x2b, 0xae, 0x0a, 0xd2, 0x1e, 0x72, 0x7d, 0x47, 0xd2, 0x6c,
	0x59, 0x54, 0x35, 0x1d, 0x39, 0x88, 0xd3, 0x78, 0x47, 0xd3, 0x6c, 0xdb, 0x71, 0x64, 0x0d, 0x21,
	0x51, 0x02, 0x69, 0x99, 0x77, 0x15, 0xc9, 0x55, 0x55, 0xa4, 0x70, 0xbe, 0xa8, 0x6b, 0x1c, 0x42,
	0xb6, 0xce, 0x69, 0x8a, 0xee, 0x28, 0x9a, 0x2b, 0x6b, 0x36, 0x96, 0xd4, 0xd1, 0x35, 0x5b, 0x90,
	0x10, 0x92, 0x1c, 0x9d, 0x17, 0x25, 0x49, 0xd2, 0x7c, 0xdf, 0x91, 0x55, 0x5e, 0xf2, 0x3d, 0x4d,
	0xe5, 0x6c, 0x17, 0xa4, 0x45, 0xc9, 0xe7, 0x25, 0x5b, 0xd1, 0x6d, 0x4f, 0xe5, 0x38, 0xdd, 0xb5,
	0x65, 0x4d, 0x11, 0x45, 0x55, 0x17, 0x78, 0xcd, 0xf6, 0x79, 0xd5, 0x17, 0x41, 0xda, 0x53, 0x15,
	0x84, 0x14, 0xc9, 0x77, 0x54, 0x41, 0x15, 0x55, 0x51, 0x74, 0x1d, 0x24, 0xc9, 0xb2, 0xed, 0x6a,
	0xbc, 0x2b, 0xe8, 0x02, 0x52, 0x40, 0x5a, 0xf3, 0x15, 0x57, 0xe7, 0x35, 0xcf, 0x75, 0x64, 0x4d,
	0x46, 0x8e, 0x83, 0x6c, 0x4e, 0x46, 0x82, 0xeb, 0xea, 0x92, 0x2c, 0x72, 0x48, 0xc4, 0x3a, 0xf5,
	0x38, 0x5d, 0x46, 0x8a, 0x26, 0x69, 0xba, 0x27, 0xba, 0xb2, 0x28, 0x0b, 0xba, 0xea, 0x7a, 0x9a,
	0xe7, 0xfb, 0x0e, 0xa7, 0xb8, 0x8e, 0x0e, 0xd2, 0xbe, 0x20, 0x38, 0x9e, 0x27, 0xab, 0x48, 0xc4,
	0x06, 0x44, 0x9a, 0xe2, 0x7a, 0xb6, 0xc4, 0x79, 0xb6, 0xe0, 0x69, 0x12, 0xd2, 0x44, 0x07, 0xa4,
	0x7d, 0x47, 0xd6, 0x34, 0x91, 0xf7, 0x35, 0x5d, 0xe0, 0x75, 0x4e, 0xc1, 0x2a, 0x93, 0x24, 0x24,
	0xc8, 0x8e, 0xab, 0x89, 0x9c, 0x23, 0xc9, 0x20, 0xcd, 0xb9, 0x2e, 0x8f, 0x34, 0x49, 0x56, 0x34,
	0x24, 0xa9, 0xbc, 0x6d, 0xf3, 0x9e, 0x22, 0xd8, 0x9e, 0xc4, 0xcb, 0x9a, 0xed, 0x21, 0xc5, 0x91,
	0x41, 0x5a, 0xe0, 0x74, 0x01, 0xf1, 0xbe, 0xef, 0x3b, 0x92, 0xec, 0xa9, 0x48, 0xb2, 0x79, 0xdd,
	0x96, 0x55, 0x5f, 0x77, 0x5c, 0x19, 0x09, 0x9c, 0x68, 0x83, 0xb4, 0xc7, 0x6b, 0xb6, 0xe4, 0xd9,
	0x9a, 0x64, 0xfb, 0xb2, 0x8e, 0x78, 0x9e, 0xd3, 0x34, 0x45, 0xb0, 0x45, 0xdd, 0xb1, 0x91, 0xea,
	0xea, 0x9e, 0x04, 0xd2, 0xb6, 0xc2, 0x0b, 0xba, 0xee, 0xeb, 0x8e, 0xcc, 0xf1, 0xb6, 0xe7, 0xfa,
	0x8a, 0xc6, 0x39, 0xba, 0xa0, 0xca, 0x9e, 0xaa, 0x7b, 0x92, 0xed, 0x2a, 0x20, 0xed, 0x88, 0x9a,
	0xa2, 0x4b, 0x8a, 0x2d, 0xdb, 0x92, 0xe4, 0xf1, 0x9e, 0xe7, 0xba, 0x9a, 0x24, 0x3a, 0xae, 0x2a,
	0x8b, 0xa2, 0xe2, 0xf9, 0x2e, 0x02, 0x69, 0x4d, 0xd2, 0x35, 0x1f, 0x49, 0x82, 0xa2, 0xa9, 0x8a,
	0xe4, 0x39, 0xbe, 0x2e, 0x28, 0xb6, 0xa8, 0x09, 0x9a, 0x88, 0x74, 0x4f, 0xf4, 0x34, 0x1f, 0x4b,
	0xea, 0x79, 0xbc, 0xe6, 0x78, 0x9e, 0x28, 0x70, 0x3a, 0xb2, 0x55, 0x5e, 0xd3, 0x35, 0x9d, 0x13,
	0x39, 0x5b, 0xf1, 0x75, 0x51, 0x54, 0x24, 0x90, 0xd6, 0x74, 0x9d, 0xb7, 0x45, 0x4d, 0x45, 0x12,
	0xe6, 0xcf, 0xab, 0x12, 0xe7, 0x0b, 0xb2, 0xa7, 0xf8, 0x32, 0x2f, 0xea, 0xbe, 0x2e, 0x78, 0x20,
	0x2d, 0x7a, 0x9a, 0xee, 0x72, 0x9e, 0xef, 0xf0, 0xbe, 0x2d, 0x49, 0x3a, 0xcf, 0x3b, 0x9a, 0x6f,
	0xab, 0xb2, 0x20, 0x22, 0x5f, 0xf3, 0x90, 0xe7, 0x80, 0x34, 0x12, 0x45, 0xce, 0x71, 0x6d, 0x5d,
	0x77, 0x35, 0x5b, 0x16, 0x64, 0xc5, 0x46, 0xbc, 0xa0, 0xd8, 0xb2, 0xec, 0x4a, 0xae, 0x2a, 0xc8,
	0xae, 0x0c, 0xd2, 0x9a, 0x88, 0x38, 0xc9, 0x71, 0x65, 0xcd, 0x93, 0x38, 0xc1, 0xd7, 0x15, 0x51,
	0xd4, 0x35, 0xd1, 0x75, 0x7c, 0x41, 0x50, 0x05, 0xc9, 0xe1, 0x04, 0x90, 0x76, 0x34, 0x5f, 0xe3,
	0x15, 0x55, 0x74, 0x39, 0xc4, 0x7b, 0x82, 0xae, 0x73, 0x9a, 0x28, 0x29, 0xbe, 0xe8, 0xd8, 0x8e,
	0xa6, 0x0b, 0x8e, 0xee, 0x80, 0xb4, 0x27, 0xcb, 0xbc, 0x6f, 0xfb, 0xae, 0xe4, 0x4b, 0x9c, 0xcf,
	0x7b, 0xc8, 0x15, 0x1c, 0x47, 0x92, 0x75, 0x8d, 0x73, 0x7c, 0x5b, 0x97, 0x74, 0x01, 0xa4, 0x05,
	0x9d, 0xd3, 0x64, 0x9f, 0x13, 0x7d, 0x0d, 0x69, 0x36, 0x27, 0xfa, 0x9c, 0x23, 0xea, 0xba, 0x2b,
	0xbb, 0xaa, 0xeb, 0x73, 0x0e, 0xe7, 0x68, 0xd8, 0xd7, 0x6d, 0xd5, 0xf6, 0x78, 0x49, 0xe6, 0x74,
	0xdf, 0x53, 0x78, 0xc9, 0x55, 0x1d, 0x47, 0xb4, 0x65, 0xce, 0x95, 0x74, 0x4d, 0x70, 0x34, 0x17,
	0xa4, 0x1d, 0x57, 0x71, 0x45, 0x4d, 0xf1, 0x25, 0x3c, 0x10, 0x74, 0xd5, 0xd1, 0x3d, 0x1d, 0xc9,
	0x82, 0x27, 0xa9, 0x82, 0xa3, 0xaa, 0x82, 0xa7, 0x81, 0xb4, 0xc3, 0x8b, 0x1e, 0xc7, 0x6b, 0x92,
	0x62, 0x7b, 0xaa, 0xcd, 0x4b, 0xb6, 0xca, 0x39, 0x3e, 0x56, 0x29, 0xaf, 0xa8, 0xaa, 0xec, 0xaa,
	0x1a, 0x48, 0x2b, 0xba, 0x86, 0x44, 0x45, 0xe0, 0x75, 0x5f, 0xd4, 0x55, 0x5d, 0x12, 0x38, 0xdf,
	0x16, 0x64, 0x8d, 0x77, 0x04, 0xde, 0xb3, 0x5d, 0x15, 0xb9, 0x20, 0xcd, 0xab, 0xbc, 0x20, 0x68,
	0xaa, 0xc6, 0x71, 0xb6, 0xab, 0xf3, 0x8e, 0x28, 0xb9, 0xb6, 0xe7, 0xc9, 0x9a, 0x26, 0xb9, 0x48,
	0x93, 0x65, 0x05, 0x4b, 0x2a, 0x73, 0x9e, 0x8b, 0x78, 0xcd, 0x43, 0xbc, 0xe3, 0xf0, 0x92, 0x88,
	0x14, 0xdd, 0x53, 0x3c, 0x4f, 0x97, 0x78, 0xd1, 0xd1, 0x44, 0x59, 0xc6, 0x23, 0x8a, 0x97, 0x39,
	0xdb, 0x97, 0x64, 0x5e, 0x72, 0x34, 0x45, 0xf3, 0x90, 0xef, 0x68, 0xb2, 0xe4, 0x39, 0x9c, 0xaf,
	0x08, 0xb6, 0x24, 0xf1, 0x20, 0xed, 0xf9, 0xb2, 0x2b, 0x72, 0x48, 0x51, 0x39, 0xcf, 0xb1, 0xb1,
	0xb3, 0x09, 0x2a, 0x87, 0x3c, 0x51, 0xe1, 0x14, 0xce, 0xf5, 0x39, 0x59, 0x02, 0x69, 0x51, 0x76,
	0x39, 0x5b, 0xe4, 0x5d, 0x49, 0xe3, 0x75, 0x41, 0xf5, 0x39, 0x41, 0xb0, 0x45, 0x47, 0x16, 0x39,
	0x01, 0x0f, 0x4d, 0x4e, 0x23, 0x91, 0xce, 0x75, 0x91, 0xec, 0xa8, 0x8a, 0xab, 0x39, 0xbc, 0x2a,
	0xa9, 0x82, 0xc7, 0x09, 0x92, 0x2a, 0x6b, 0xba, 0xca, 0xd9, 0x12, 0xa7, 0x38, 0x20, 0xad, 0xf3,
	0xbc, 0xa4, 0xea, 0xb6, 0xab, 0xd9, 0x9c, 0xc6, 0x8b, 0xc8, 0xe3, 0x05, 0x89, 0x77, 0x44, 0x45,
	0x53, 0x5c, 0xd7, 0xb3, 0x3d, 0xa4, 0x83, 0x34, 0x27, 0x22, 0x5e, 0x53, 0x6c, 0xd5, 0xd7, 0x44,
	0x41, 0x93, 0x91, 0x2e, 0x8a, 0x12, 0xef, 0x21, 0x49, 0xd5, 0x44, 0x51, 0xe2, 0x38, 0x05, 0x61,
	0x7d, 0xf8, 0x9e, 0xa4, 0xab, 0x82, 0xe0, 0x6b, 0x1e, 0xcf, 0xfb, 0xa2, 0xa7, 0x2a, 0x9e, 0x8b,
	0x34, 0xc9, 0xd7, 0x10, 0xa7, 0xeb, 0xb6, 0x8a, 0xc7, 0x2d, 0xc7, 0x71, 0xb2, 0x6c, 0xf3, 0xbc,
	0xae, 0xd8, 0x08, 0xd9, 0x9a, 0xc7, 0x3b, 0xae, 0xc2, 0xe9, 0x9a, 0x26, 0x3b, 0xb6, 0x2e, 0x8b,
	0x20, 0xcd, 0xe9, 0x9a, 0x2f, 0xcb, 0x48, 0x50, 0x3d, 0xcd, 0x95, 0x1c, 0xce, 0x96, 0x75, 0x8e,
	0xe7, 0x04, 0xd7, 0xf1, 0xb0, 0x85, 0x7d, 0x3c, 0x2a, 0x91, 0xe8, 0x08, 0xb6, 0xc3, 0xfb, 0xba,
	0x2d, 0x2b, 0xbe, 0xe0, 0x3b, 0x92, 0xab, 0x0b, 0x92, 0xe6, 0x0b, 0xbe, 0xc4, 0x2b, 0x22, 0x8f,
	0x23, 0xbf, 0xa4, 0x20, 0x2c, 0x88, 0xed, 0xb8, 0xae, 0xad, 0x21, 0x5b, 0x77, 0x6c, 0x5b, 0x17,
	0x05, 0xcf, 0x56, 0x34, 0xdf, 0x73, 0x64, 0x41, 0x07, 0x69, 0xc9, 0x53, 0x6d, 0x41, 0xf3, 0x14,
	0x5f, 0x10, 0x14, 0x11, 0x79, 0x0a, 0xef, 0x21, 0x4d, 0x73, 0x6d, 0x45, 0x41, 0x0e, 0xc7, 0xf3,
	0x48, 0x04, 0x69, 0x47, 0x70, 0x14, 0xde, 0x73, 0x54, 0x47, 0x97, 0x74, 0xce, 0x56, 0x38, 0x4f,
	0x50, 0x39, 0xd7, 0x75, 0x04, 0xce, 0x91, 0x14, 0x41, 0x13, 0x14, 0x90, 0xd6, 0x05, 0x59, 0xd5,
	0x55, 0x8e, 0xf7, 0x79, 0x49, 0x56, 0x38, 0x19, 0xe9, 0xc8, 0x73, 0x39, 0x87, 0xe3, 0x6d, 0x9d,
	0xe3, 0x5d, 0xc5, 0x93, 0x41, 0x5a, 0x55, 0x74, 0x5e, 0xd0, 0x55, 0x07, 0x57, 0xb3, 0x25, 0x5e,
	0x10, 0x45, 0xdf, 0xe3, 0x6c, 0xce, 0xb1, 0x6d, 0xce, 0x16, 0x15, 0x3c, 0x7b, 0xf0, 0x0a, 0xf2,
	0x5d, 0x9f, 0x43, 0x1c, 0x27, 0x73, 0x92, 0xe7, 0xf9, 0xc8, 0xf3, 0x10, 0x2f, 0x3a, 0x3e, 0xb2,
	0x75, 0x5d, 0xd5, 0x65, 0x01, 0xa4, 0x79, 0x59, 0x12, 0x6d, 0xd5, 0x95, 0x14, 0x45, 0x14, 0x6d,
	0xd7, 0x57, 0x71, 0x50, 0xe3, 0x78, 0xc7, 0x76, 0x5d, 0xc7, 0xe3, 0x88, 0x8f, 0x79, 0x8a, 0xcf,
	0x49, 0x8e, 0x6c, 0xeb, 0x3c, 0xc7, 0xf3, 0xb2, 0x2f, 0x39, 0x32, 0x87, 0x5c, 0xe4, 0x72, 0xba,
	0x27, 0x71, 0x36, 0xef, 0xf9, 0x20, 0xad, 0x8b, 0x98, 0x54, 0xd5, 0x04, 0x4f, 0x91, 0x74, 0x0f,
	0x39, 0x32, 0x8f, 0x03, 0xaa, 0x84, 0x5c, 0x47, 0xe5, 0x25, 0xc7, 0xe1, 0x40, 0x5a, 0x46, 0xb2,
	0x2a, 0xba, 0xba, 0xab, 0xfb, 0x9a, 0x63, 0xab, 0x02, 0x87, 0x7c, 0xdd, 0xe1, 0x35, 0xa4, 0xfb,
	0x2e, 0x12, 0x90, 0xe0, 0xab, 0x20, 0x2d, 0xeb, 0x9c, 0x2d, 0x88, 0x82, 0x87, 0xa7, 0x36, 0x45,
	0xe2, 0x74, 0xdf, 0x76, 0x54, 0x01, 0xa9, 0xb2, 0x60, 0x6b, 0xb6, 0xa0, 0xe0, 0x19, 0x48, 0x93,
	0x74, 0x87, 0x93, 0x1c, 0xcf, 0xf1, 0x78, 0x4f, 0x70, 0x74, 0x4d, 0xf4, 0x15, 0xa4, 0xd9, 0x92,
	0xac, 0x22, 0x4e, 0x11, 0x05, 0x3c, 0x03, 0xe9, 0xae, 0x20, 0x6b, 0x3a, 0xe2, 0x5d, 0x0e, 0xe9,
	0xbe, 0x2c, 0x8a, 0x36, 0x27, 0x08, 0xae, 0x22, 0x70, 0xb2, 0xaf, 0xab, 0xbc, 0x8e, 0x78, 0x90,
	0xd6, 0x15, 0xe4, 0xd8, 0x8a, 0x80, 0xa7, 0x0f, 0xc1, 0x91, 0x54, 0x85, 0x53, 0x79, 0x5d, 0x70,
	0x6c, 0x55, 0xc2, 0x0e, 0x2d, 0x3b, 0x36, 0x48, 0xab, 0xae, 0xc4, 0x73, 0x2e, 0xd2, 0x44, 0x01,
	0x69, 0x92, 0x66, 0x8b, 0xa2, 0xc0, 0x4b, 0xa2, 0xe0, 0xea, 0xb6, 0x26, 0x20, 0x5d, 0x15, 0xf0,
	0xdc, 0xa0, 0xf8, 0x9e, 0x26, 0xda, 0x02, 0xef, 0xeb, 0xbe, 0xe8, 0xca, 0xbe, 0xee, 0xfb, 0xaa,
	0x23, 0xbb, 0x8a, 0xe8, 0x38, 0x2e, 0xaf, 0xea, 0x1e, 0x48, 0x0b, 0x9e, 0xa6, 0xea, 0x92, 0xeb,
	0xa8, 0x8e, 0x8c, 0xe3, 0x81, 0xea, 0x20, 0x24, 0x28, 0xba, 0x8c, 0x54, 0xdd, 0xe5, 0x65, 0x55,
	0xe1, 0x40, 0xda, 0xf7, 0x34, 0xce, 0xb7, 0x75, 0x57, 0xe1, 0x05, 0xce, 0xf5, 0xb0, 0xa3, 0xca,
	0x02, 0x27, 0xf3, 0x9c, 0x2f, 0xba, 0x8a, 0x24, 0xe1, 0xb9, 0x52, 0x56, 0x7d, 0x51, 0x91, 0x04,
	0x47, 0x42, 0xa2, 0x8a, 0x04, 0xcd, 0x97, 0x5d, 0x07, 0x89, 0x9c, 0xc0, 0xb9, 0xba, 0x28, 0xf2,
	0x8e, 0xe4, 0x82, 0xb4, 0xce, 0x29, 0x1c, 0x27, 0x09, 0x41, 0xfc, 0x93, 0x91, 0x2a, 0xcb, 0x0e,
	0x27, 0x89, 0x2e, 0x27, 0xab, 0x82, 0x2c, 0xd9, 0xd8, 0x0b, 0x5d, 0x99, 0xf3, 0x15, 0x9c, 0x39,
	0xf0, 0xaa, 0xa8, 0xa8, 0x8a, 0x23, 0xa9, 0x8e, 0xad, 0x70, 0x9a, 0xec, 0x78, 0x9c, 0xab, 0xb8,
	0x08, 0x81, 0xb4, 0x2b, 0x70, 0xbc, 0xa3, 0x0b, 0xbe, 0xe6, 0x48, 0x9a, 0xe8, 0xdb, 0xa2, 0xa6,
	0x39, 0x88, 0x57, 0x25, 0x4f, 0x51, 0x34, 0xac, 0x41, 0x09, 0xa4, 0x1d, 0x9d, 0x73, 0x3c, 0x07,
	0xe9, 0x0a, 0x6f, 0x2b, 0x92, 0xe6, 0x73, 0x92, 0xa0, 0x7a, 0x8e, 0xc0, 0xdb, 0xb6, 0xad, 0xb8,
	0xae, 0x23, 0xeb, 0x20, 0xad, 0xfb, 0x8a, 0xe0, 0x4a, 0xbe, 0xa0, 0x38, 0x3a, 0xe7, 0x89, 0x9e,
	0x2a, 0xab, 0x0e, 0xb2, 0x15, 0x4e, 0x47, 0x9a, 0xe0, 0x0b, 0xc8, 0xf6, 0xe3, 0x89, 0xfc, 0x57,
	0x98, 0xf4, 0xd0, 0xb4, 0x6c, 0xea, 0x78, 0x1b, 0xb1, 0xcb, 0xfe, 0xd4, 0x79, 0x30, 0x17, 0x7e,
	0x1a, 0xe0, 0x45, 0xd9, 0xd9, 0xe8, 0x27, 0xd9, 0xd9, 0x27, 0xd9, 0xd9, 0x27, 0xd9, 0xd9, 0x27,
	0xd9, 0xd9, 0x27, 0xd9, 0xd9, 0x27, 0xd9, 0xd9, 0x27, 0xd9, 0xd9, 0x27, 0xd9, 0xd9, 0x27, 0xd9,
	0xd9, 0xbf, 0xda, 0xec, 0x2c, 0xf6, 0x79, 0x9f, 0x35, 0x1b, 0x65, 0x63, 0x41, 0x82, 0x96, 0xf1,
	0xc1, 0xb5, 0x75, 0x43, 0x3a, 0x7d, 0xff, 0x6e, 0x75, 0xe8, 0xd6, 0xda, 0x0b, 0x74, 0x53, 0x2f,
	0x3e, 0x35, 0x11, 0xcc, 0xfc, 0x91, 0x24, 0x98, 0x1b, 0xf8, 0x0a, 0x81, 0xf5, 0xc1, 0x4c, 0xf8,
	0x21, 0x4d, 0xc8, 0x3c, 0xd8, 0x5e, 0x36, 0xa8, 0xad, 0xe5, 0xc4, 0xb0, 0xad, 0xe5, 0xa7, 0x6c,
	0x26, 0x5b, 0xd3, 0x01, 0xdf, 0x30, 0x09, 0xf5, 0x86, 0xf6, 0xe1, 0x7b, 0xd0, 0x0c, 0x95, 0xea,
	0x7a, 0x60, 0x9a, 0x7c, 0x9f, 0x40, 0xa7, 0xb9, 0xc6, 0xd3, 0xd9, 0x46, 0xe0, 0xe3, 0xd3, 0x5a,
	0x21, 0x6c, 0xc3, 0x56, 0xee, 0x80, 0x99, 0xf8, 0x11, 0x70, 0x77, 0x7e, 0x8c, 0x34, 0xc3, 0xc7,
	0x37, 0xdc, 0x6f, 0xbc, 0x71, 0x9a, 0xf0, 0xd4, 0xf7, 0x97, 0xb1, 0x63, 0xfb, 0x2e, 0xfb, 0xfd,
	0x60, 0x9a, 0xdc, 0xdc, 0xf3, 0xdb, 0x9d, 0x3d, 0xd4, 0x79, 0xca, 0x07, 0x9e, 0xf5, 0x63, 0xca,
	0xd8, 0x7d, 0xf8, 0xc9, 0x38, 0xf3, 0x38, 0x33, 0xf6, 0x25, 0x30, 0x1b, 0xbf, 0x00, 0x82, 0x3a,
	0xe4, 0xc3, 0x80, 0x94, 0x35, 0x13, 0xbb, 0xdd, 0x81, 0x3a, 0x99, 0xbf, 0x9a, 0x00, 0x53, 0x71,
	0xff, 0xd8, 0x1c, 0xb0, 0x5b, 0xe0, 0x1e, 0xc2, 0x33, 0x1a, 0xea, 0x8d, 0x67, 0x35, 0x54, 0xe2,
	0x5f, 0x89, 0xa1, 0x0e, 0x06, 0x14, 0x3a, 0xfa, 0xac, 0x0a, 0x5d, 0x0e, 0xef, 0xc5, 0xb0, 0x00,
	0xba, 0x5e, 0x8b, 0xdc, 0x87, 0x89, 0xae, 0xc3, 0x3c, 0x5d, 0xd5, 0x99, 0x7f, 0xc0, 0x00, 0x18,
	0xff, 0x2e, 0xd2, 0xee, 0x36, 0xdd, 0xdf, 0xa4, 0x22, 0xe1, 0xff, 0xaf, 0x8a, 0xbc, 0x35, 0xfb,
	0xc1, 0x6b, 0x71, 0xaf, 0xc8, 0x7c, 0x23, 0x09, 0xce, 0xe5, 0xdb, 0xed, 0xb7, 0x9a, 0x28, 0xee,
	0x2b, 0x8b, 0x20, 0x19, 0x3b, 0xd9, 0x06, 0xb1, 0xcb, 0x70, 0x04, 0xcf, 0x66, 0x40, 0x6a, 0xbf,
	0x83, 0xba, 0xa8, 0xe5, 0x86, 0x17, 0x83, 0x73, 0xc9, 0xf0, 0x7a, 0x68, 0x1f, 0xcf, 0xd6, 0xc0,
	0x8c, 0xbb, 0x83, 0xdc, 0xb7, 0x1a, 0x01, 0xa6, 0x77, 0xd6, 0xb9, 0x6f, 0xee, 0xd2, 0x70, 0x13,
	0x15, 0x46, 0xac, 0x69, 0xc2, 0x64, 0x23, 0xe0, 0xc1, 0xde, 0x07, 0xe7, 0x02, 0xa6, 0xad, 0x76,
	0xaf, 0xcf, 0x38, 0xf5, 0xb1, 0x18, 0xcf, 0x11, 0x46, 0x95, 0x76, 0x2f, 0xe2, 0xad, 0x82, 0x64,
	0xb3, 0x87, 0xf6, 0xc2, 0x63, 0xb1, 0xa7, 0x7f, 0x25, 0x5b, 0x18, 0xb1, 0x48, 0x05, 0xf6, 0xb3,
	0x27, 0x06, 0x64, 0x92, 0xe8, 0xe4, 0x94, 0xb6, 0x07, 0x06, 0xea, 0xad, 0x3f, 0xcf, 0x7c, 0xe7,
	0xb5, 0x31, 0x3e, 0xab, 0x64, 0xa5, 0x0f, 0x8e, 0x98, 0x9f, 0x63, 0xc0, 0x6c, 0xf8, 0x81, 0xcb,
	0x78, 0x60, 0x04, 0x70, 0x17, 0x8c, 0xe5, 0xb1, 0xa8, 0x4b, 0x15, 0x50, 0x02, 0xf3, 0x03, 0x5a,
	0x15, 0x26, 0x42, 0xf1, 0x41, 0x7a, 0x88, 0x6a, 0x84, 0xa9, 0x4a, 0xbb, 0x97, 0x8e, 0x28, 0x66,
	0x83, 0x0e, 0x0a, 0xe3, 0x81, 0x2f, 0x80, 0x45, 0x10, 0xdc, 0x21, 0xc9, 0x5d, 0x04, 0xe7, 0x70,
	0xc1, 0x72, 0xdc, 0xad, 0x61, 0x02, 0x97, 0x93, 0x4f, 0xc3, 0xfa, 0xe5, 0x71, 0xff, 0x84, 0x89,
	0xdc, 0x02, 0x18, 0x23, 0x1d, 0xee, 0x7f, 0x69, 0x31, 0x1e, 0x7c, 0x69, 0xd1, 0x3f, 0x2e, 0x0f,
	0xbe, 0xd7, 0xcf, 0xfc, 0x74, 0x12, 0xcc, 0x1a, 0x9d, 0xed, 0xb8, 0x83, 0xdd, 0xa0, 0x1c, 0xec,
	0xc2, 0xf1, 0x79, 0xe5, 0xc7, 0x72, 0xb5, 0xcf, 0x7c, 0x17, 0xae, 0x76, 0xc2, 0xa5, 0x72, 0xdf,
	0xa5, 0x4b, 0x7d, 0x4f, 0x5d, 0xe7, 0xa5, 0xe1, 0xae, 0xf3, 0xaf, 0x9d, 0x8b, 0xfc, 0xd1, 0x24,
	0x38, 0x17, 0x5c, 0xaf, 0x7d, 0xba, 0x97, 0x7c, 0xed, 0x13, 0x2f, 0xf9, 0xd7, 0xd4, 0x4b, 0xde,
	0x4d, 0x82, 0xf3, 0xeb, 0x77, 0xeb, 0xe4, 0xcd, 0x90, 0xb8, 0x9f, 0xdc, 0xa4, 0xfc, 0xe4, 0xea,
	0x2f, 0xbc, 0xcf, 0xcc, 0xa4, 0x18, 0x8e, 0xb9, 0x35, 0xb1, 0xb7, 0x7b, 0xd3, 0xb3, 0x7b, 0xf6,
	0x09, 0x77, 0x39, 0xe1, 0x0a, 0xa3, 0xbf, 0x59, 0x57, 0x48, 0x7e, 0x3c, 0x57, 0x18, 0xfb, 0xcd,
	0xbb, 0xc2, 0xf8, 0x19, 0xae, 0x20, 0x90, 0x0f, 0x91, 0x7f, 0xdb, 0xba, 0xc2, 0x58, 0xf4, 0xf5,
	0x9e, 0x9c, 0x3d, 0xfe, 0x72, 0xe4, 0x3b, 0xa3, 0xe0, 0xd2, 0x89, 0x50, 0x11, 0x64, 0x66, 0xcf,
	0x1e, 0x2f, 0x7e, 0xdb, 0xc6, 0x82, 0x5b, 0x5f, 0x63, 0x3e, 0x78, 0xed, 0x64, 0xa8, 0xfc, 0xce,
	0x6b, 0xa3, 0xfc, 0x6f, 0x3b, 0x5b, 0xbf, 0x10, 0xd9, 0x7a, 0xe1, 0xc4, 0xb0, 0x7f, 0xf7, 0x5f,
	0x30, 0x41, 0x59, 0xf8, 0xdd, 0xdd, 0x4f, 0x25, 0xc1, 0x15, 0xf2, 0x19, 0xe9, 0x86, 0xdd, 0xb1,
	0xf7, 0x50, 0x8f, 0x9e, 0x27, 0xae, 0xc5, 0xae, 0xe9, 0x50, 0xd9, 0x2a, 0xb9, 0xb2, 0xf3, 0xc9,
	0xdc, 0x80, 0x3a, 0xb7, 0xfe, 0x5c, 0x7c, 0x6e, 0xf8, 0x59, 0x06, 0xcc, 0x84, 0x4e, 0x32, 0x46,
	0x54, 0xf7, 0xdb, 0x7f, 0x6a, 0xf8, 0x0a, 0x03, 0x2e, 0x1e, 0x5f, 0x83, 0x8f, 0x3b, 0x47, 0xec,
	0xf6, 0x3c, 0xf3, 0xbd, 0xbd, 0x3d, 0x7f, 0x52, 0xf5, 0x89, 0x61, 0x0b, 0x71, 0x01, 0xcc, 0x59,
	0xed, 0x5d, 0x6a, 0x7d, 0xf5, 0x5c, 0xd8, 0xab, 0xd0, 0x65, 0x27, 0xc3, 0x7b, 0xa2, 0x37, 0x5e,
	0xb7, 0x02, 0x7c, 0xe6, 0x2f, 0x30, 0xe0, 0x5c, 0xad, 0x47, 0x5e, 0x26, 0x8b, 0x55, 0xdb, 0x39,
	0xae, 0x86, 0xd7, 0x86, 0xd6, 0x2f, 0xbc, 0xcf, 0x64, 0x53, 0x4c, 0xe6, 0x5a, 0x77, 0x1f, 0xb9,
	0xcb, 0xf6, 0x7e, 0xb3, 0xb1, 0xdd, 0x69, 0x1f, 0x1c, 0xdf, 0xab, 0x22, 0x7f, 0x07, 0xaf, 0xa8,
	0xf6, 0xb7, 0x35, 0x5e, 0x1f, 0xba, 0xb6, 0x0f, 0xb5, 0x2d, 0x0e, 0xef, 0x5a, 0x6e, 0xfa, 0xbd,
	0xf7, 0x99, 0x54, 0xf4, 0xc4, 0xc4, 0x40, 0x47, 0xc3, 0x2f, 0xd8, 0xfe, 0x34, 0x03, 0x66, 0xa8,
	0xeb, 0x94, 0xec, 0x16, 0x98, 0x8a, 0x5d, 0xf1, 0x0a, 0x9f, 0x6e, 0xbc, 0x36, 0xf8, 0x25, 0xa8,
	0xf3, 0x79, 0xe4, 0xf6, 0x2c, 0xe4, 0x93, 0x70, 0xbe, 0xf0, 0xde, 0x3b, 0x33, 0xc7, 0xb7, 0xc9,
	0xba, 0xa8, 0xd7, 0x17, 0x36, 0x69, 0x81, 0x00, 0x5b, 0x43, 0xbd, 0x2e, 0x9b, 0x3b, 0x45, 0xce,
	0xab, 0xe1, 0xb2, 0xff, 0xfc, 0xb0, 0x67, 0x30, 0x06, 0xec, 0xe3, 0x82, 0x59, 0xfa, 0x16, 0x25,
	0xfb, 0x66, 0x70, 0x83, 0xf3, 0x99, 0xa5, 0x9d, 0x7f, 0xef, 0x9d, 0x29, 0x67, 0x7b, 0xbf, 0x11,
	0x56, 0x8a, 0xc9, 0x3a, 0x61, 0x77, 0x5b, 0x58, 0xd0, 0x4c, 0x17, 0xcc, 0x6d, 0xb4, 0x3b, 0xd4,
	0x66, 0xa0, 0x0e, 0xc6, 0xf6, 0xdb, 0x9d, 0x5e, 0xb4, 0x81, 0x40, 0xed, 0x02, 0xfe, 0xfc, 0x29,
	0x6b, 0xf9, 0xa0, 0xc6, 0xb3, 0x7a, 0xde, 0xaf, 0x24, 0xc0, 0xc4, 0xa6, 0x55, 0x2a, 0xe2, 0x38,
	0xb1, 0x0c, 0xa6, 0xc3, 0xcf, 0xe3, 0x63, 0xf7, 0x17, 0xfb, 0x9e, 0x17, 0x5c, 0x3d, 0x09, 0x08,
	0x82, 0xab, 0x27, 0x37, 0xfb, 0xf4, 0xc1, 0x33, 0x15, 0xf4, 0xdb, 0x9f, 0x8f, 0x99, 0x58, 0x85,
	0xe0, 0x95, 0x0a, 0x39, 0x7c, 0x3a, 0x20, 0x7e, 0xc5, 0xa5, 0xbf, 0xb0, 0x4b, 0x30, 0xfd, 0xc7,
	0xb2, 0x12, 0xd1, 0xe3, 0x16, 0xd1, 0xdd, 0x18, 0xea, 0xf9, 0x8c, 0x89, 0x33, 0xeb, 0xc5, 0x5f,
	0xd1, 0x90, 0x87, 0xbc, 0xa2, 0x71, 0xe1, 0x98, 0x3a, 0x26, 0x68, 0xfc, 0x31, 0x8d, 0x5b, 0xd3,
	0x64, 0xaa, 0xc4, 0x51, 0x30, 0x01, 0x99, 0x5c, 0x7a, 0xf0, 0xd2, 0xc0, 0xe0, 0xbb, 0x46, 0xb9,
	0x34, 0x7d, 0xb3, 0x1d, 0x87, 0xa1, 0xf1, 0x27, 0x47, 0x4c, 0x32, 0x48, 0x4b, 0xd4, 0xac, 0xd2,
	0xbf, 0xa6, 0x9e, 0x84, 0x63, 0x99, 0x3f, 0xc8, 0x80, 0xd9, 0x4d, 0xab, 0x14, 0x37, 0xf3, 0x7d,
	0x30, 0x79, 0xd0, 0xd9, 0x6d, 0xe0, 0xe0, 0x16, 0x79, 0xd3, 0xf5, 0xe1, 0xe1, 0x3d, 0x34, 0x55,
	0x6e, 0xf1, 0xe4, 0xc8, 0xa4, 0x5e, 0x5c, 0x49, 0x1d, 0x74, 0x76, 0x31, 0x61, 0x97, 0xfd, 0xf4,
	0x29, 0xee, 0x9f, 0xc4, 0xee, 0x3f, 0xe8, 0x0d, 0x3f, 0xc3, 0x80, 0x73, 0x25, 0x69, 0x05, 0x75,
	0x29, 0x2f, 0xac, 0x83, 0xd4, 0xae, 0xd4, 0xf0, 0x50, 0xb7, 0xff, 0x72, 0xe7, 0x60, 0x7c, 0x0c,
	0xea, 0x10, 0x47, 0x5f, 0x3c, 0xb9, 0x0b, 0x4e, 0x49, 0x36, 0xb1, 0x4b, 0x68, 0x87, 0x09, 0x36,
	0x7a, 0xaa, 0x60, 0xf1, 0x7b, 0xfe, 0x99, 0xbf, 0xc7, 0x80, 0xb9, 0xd8, 0x8d, 0x77, 0x72, 0x1f,
	0xfa, 0xf3, 0x83, 0xf7, 0xe5, 0x99, 0x67, 0xbd, 0x2f, 0x9f, 0x19, 0x7e, 0x5f, 0x9e, 0x92, 0x99,
	0xbe, 0x39, 0x7f, 0x7f, 0xe8, 0xeb, 0x3a, 0x6a, 0x18, 0x4e, 0x6e, 0x9e, 0xdc, 0xcd, 0xe9, 0xbf,
	0xb7, 0x73, 0xbe, 0x63, 0xf7, 0x50, 0x63, 0xb7, 0xb9, 0xd7, 0xec, 0xa1, 0x4e, 0x23, 0x10, 0x86,
	0x7e, 0x71, 0xe7, 0x16, 0x98, 0xc5, 0x73, 0x4d, 0xec, 0xa9, 0xaa, 0x67, 0x4e, 0x58, 0x33, 0x5c,
	0x50, 0x37, 0xd8, 0xaa, 0x23, 0x75, 0x9f, 0xb2, 0x47, 0x97, 0x51, 0xc0, 0x25, 0x5c, 0x83, 0xce,
	0x9a, 0x48, 0xcd, 0x33, 0xd3, 0xa5, 0xcc, 0x5f, 0x19, 0x05, 0xe7, 0xd7, 0x1f, 0xf4, 0xea, 0xed,
	0xb7, 0x50, 0xcb, 0x38, 0xe8, 0xed, 0x54, 0x83, 0x57, 0xaa, 0x59, 0x0d, 0x80, 0x2e, 0x72, 0x3b,
	0xa8, 0xd7, 0x88, 0x2a, 0x9f, 0x74, 0x95, 0x1a, 0x21, 0x20, 0x77, 0xc7, 0x26, 0x03, 0xe2, 0xdb,
	0xe8, 0x90, 0x7d, 0x0d, 0x8c, 0x07, 0xcf, 0x70, 0x85, 0xd9, 0xcd, 0x29, 0x57, 0xd9, 0x69, 0xdd,
	0x14, 0x46, 0xac, 0xb0, 0x16, 0xae, 0xef, 0x92, 0x7e, 0x87, 0xab, 0xac, 0x33, 0xea, 0x1f, 0xeb,
	0x07, 0xd7, 0x0f, 0x6a, 0xb1, 0x55, 0x30, 0xf5, 0x05, 0xac, 0x85, 0xc6, 0x3e, 0x56, 0x43, 0xb8,
	0xe6, 0xca, 0x9e, 0xce, 0xe4, 0xa4, 0xca, 0x0a, 0x23, 0x16, 0xf8, 0x42, 0x1f, 0xcb, 0xea, 0x60,
	0xda, 0x41, 0x76, 0x07, 0x75, 0x1a, 0x3d, 0xac, 0xa5, 0xb3, 0x1e, 0x1d, 0xc5, 0x51, 0x32, 0xa0,
	0x25, 0x0a, 0xc5, 0x5a, 0x74, 0x6c, 0xf7, 0xad, 0x83, 0x7d, 0xa2, 0xc5, 0x89, 0xa7, 0x6a, 0x31,
	0x20, 0xbe, 0x8d, 0x0e, 0x6f, 0xa5, 0x48, 0x02, 0xa7, 0x66, 0x85, 0xdc, 0x3c, 0x98, 0x26, 0xed,
	0x36, 0xba, 0xed, 0x83, 0x8e, 0x1b, 0x7c, 0x43, 0x4e, 0x3e, 0xb1, 0x0f, 0xc7, 0xd0, 0x17, 0x19,
	0x30, 0x5f, 0xdc, 0xa8, 0xef, 0x74, 0x90, 0xdd, 0xcb, 0xdb, 0x3d, 0xb4, 0xdd, 0xee, 0x1c, 0xe2,
	0x81, 0x44, 0xc6, 0x7b, 0x0b, 0x5c, 0x68, 0xee, 0x37, 0x7a, 0xa4, 0xb0, 0xe1, 0x06, 0xa5, 0xcd,
	0xfe, 0x98, 0x3a, 0xe5, 0x7d, 0xd1, 0x41, 0x6e, 0xb1, 0x73, 0x8a, 0xf8, 0x71, 0x18, 0xdb, 0xdc,
	0xa7, 0xe8, 0x9a, 0xa8, 0x9b, 0xf9, 0xbd, 0xe3, 0x60, 0x26, 0xb8, 0x51, 0x1e, 0x3d, 0x23, 0x10,
	0xde, 0xbd, 0x0c, 0xae, 0x96, 0x3f, 0xed, 0xa5, 0x3b, 0xbb, 0x75, 0x18, 0xd4, 0x66, 0xb7, 0xc1,
	0xe5, 0x13, 0x82, 0x1f, 0x46, 0xef, 0x72, 0x9c, 0xf1, 0x16, 0xe4, 0x69, 0x9a, 0x28, 0x8c, 0x58,
	0x17, 0x06, 0xe4, 0x25, 0x65, 0xec, 0xdd, 0x93, 0x0f, 0x62, 0x24, 0x9f, 0xf1, 0x41, 0x0c, 0xf0,
	0xd5, 0xf7, 0x99, 0x71, 0x90, 0x64, 0x12, 0xa3, 0x67, 0xbf, 0x86, 0x91, 0xfa, 0x78, 0xaf, 0x61,
	0x4c, 0x7e, 0xef, 0x5e, 0xc3, 0x00, 0x1f, 0xf3, 0x35, 0x8c, 0xf8, 0xe3, 0x16, 0x53, 0xcf, 0xfc,
	0xb8, 0x05, 0x73, 0xea, 0xe3, 0x16, 0xd3, 0xdf, 0xc5, 0xe3, 0x16, 0x0c, 0xf5, 0xb8, 0xc5, 0x1e,
	0xb8, 0xdc, 0xdb, 0xed, 0x36, 0xfc, 0xe3, 0x93, 0xd6, 0x81, 0x17, 0x33, 0x6e, 0x9e, 0x72, 0x3a,
	0x74, 0xda, 0xe9, 0x6c, 0x38, 0x39, 0x5d, 0xec, 0x0d, 0x23, 0xc8, 0x5d, 0x01, 0x33, 0xa1, 0x57,
	0x84, 0x99, 0x40, 0x2a, 0xca, 0x14, 0x72, 0xd7, 0x01, 0xce, 0x55, 0x63, 0x77, 0xfe, 0xa7, 0x1f,
	0x1f, 0x31, 0xa9, 0xaf, 0x1d, 0x31, 0xcc, 0x93, 0x23, 0x66, 0xa2, 0x3f, 0xbd, 0x4d, 0xc0, 0x54,
	0xe6, 0x57, 0x13, 0x60, 0xd6, 0x0a, 0x6e, 0x6d, 0x45, 0xfd, 0xf8, 0x41, 0x30, 0x1d, 0x8b, 0x4e,
	0x51, 0x8a, 0x70, 0x8a, 0xf0, 0xa7, 0xae, 0x81, 0xc3, 0x38, 0x4e, 0xf2, 0x45, 0x6b, 0xea, 0x38,
	0x56, 0x75, 0xd9, 0x32, 0x98, 0x38, 0x7e, 0x55, 0x12, 0xb3, 0xfe, 0xd4, 0x29, 0x91, 0xef, 0xc4,
	0x9e, 0x4a, 0x9c, 0x65, 0xc4, 0x83, 0xad, 0x03, 0x70, 0xfc, 0xe8, 0x6f, 0x98, 0x31, 0x9c, 0x72,
	0xa5, 0x78, 0xc8, 0x56, 0x1d, 0xc5, 0x73, 0xb2, 0xff, 0xfe, 0x2f, 0xfb, 0x03, 0x60, 0x2e, 0x08,
	0xd6, 0x91, 0x0d, 0xa3, 0xe7, 0xcc, 0x3f, 0x75, 0xda, 0x24, 0x3f, 0x70, 0x64, 0x45, 0x31, 0x9e,
	0x75, 0xe3, 0xc5, 0xdd, 0xcc, 0x8f, 0xcd, 0x83, 0x8b, 0xa1, 0xd6, 0xf3, 0xed, 0x56, 0xb7, 0xd7,
	0xb1, 0x9b, 0xad, 0x20, 0x1a, 0x16, 0xc1, 0xc5, 0x3d, 0xfb, 0x61, 0x23, 0x6c, 0x9b, 0x64, 0x02,
	0x8d, 0x67, 0x78, 0x1f, 0x9c, 0xdd, 0xb3, 0x1f, 0x06, 0x22, 0x90, 0x6c, 0xa3, 0xd2, 0x6e, 0x21,
	0xb6, 0x0c, 0xe6, 0x4f, 0xb0, 0x42, 0x0f, 0x5d, 0x84, 0xbc, 0x6e, 0x78, 0x5f, 0x93, 0xfd, 0xf0,
	0x88, 0x49, 0x48, 0xe4, 0xd6, 0xe4, 0xc4, 0xd2, 0xd8, 0xfc, 0xa3, 0xd4, 0x0d, 0x9c, 0x44, 0x5f,
	0xa4, 0x79, 0x99, 0x41, 0x15, 0xb6, 0x42, 0xb1, 0x7b, 0x0b, 0x1d, 0x36, 0xba, 0xcd, 0x1f, 0x46,
	0x81, 0x70, 0x63, 0x67, 0x86, 0x8f, 0x0b, 0x7d, 0x86, 0xb7, 0xd1, 0x61, 0xad, 0xf9, 0xc3, 0x88,
	0x88, 0x77, 0x07, 0x5c, 0x1d, 0xc6, 0x2f, 0x92, 0x70, 0x9c, 0x48, 0x78, 0x09, 0x4b, 0xa8, 0x48,
	0xd1, 0x45, 0xd2, 0xbe, 0x94, 0x8c, 0x75, 0x79, 0x90, 0x69, 0x24, 0xa7, 0x05, 0x16, 0x62, 0x7c,
	0x83, 0x5b, 0xaa, 0xc7, 0x92, 0xa6, 0xce, 0x7c, 0x31, 0xe7, 0x52, 0x9f, 0x29, 0x59, 0x0b, 0xf4,
	0x65, 0xfd, 0x1c, 0xb8, 0x3e, 0x9c, 0x67, 0x24, 0xed, 0x24, 0x91, 0xf6, 0xca, 0x87, 0x47, 0x4c,
	0x52, 0xe2, 0x74, 0x25, 0x92, 0x37, 0xb5, 0x34, 0x3e, 0xff, 0xe8, 0x51, 0xe2, 0x06, 0x53, 0x48,
	0x58, 0x57, 0x4e, 0xf2, 0x8e, 0x44, 0x0e, 0x8d, 0x1e, 0x3e, 0x0d, 0x1a, 0x33, 0xfa, 0xd4, 0x19,
	0xd2, 0x8e, 0x12, 0xa3, 0x07, 0x83, 0xe4, 0xd8, 0xe8, 0xa5, 0xc0, 0x4a, 0x14, 0xab, 0x48, 0xc8,
	0x69, 0x22, 0xe4, 0x39, 0xac, 0x52, 0x81, 0x8b, 0x6e, 0xf8, 0xde, 0xb8, 0xc1, 0x14, 0x46, 0x89,
	0xcd, 0x63, 0xac, 0x06, 0x6c, 0x1e, 0x72, 0xa3, 0x6d, 0x3e, 0x7b, 0x86, 0x6c, 0x49, 0x62, 0xf3,
	0x80, 0xe1, 0x10, 0x9b, 0x0f, 0xf2, 0x8b, 0x04, 0x9c, 0x3b, 0xb6, 0xb9, 0x28, 0x9c, 0xb0, 0x79,
	0x92, 0xd8, 0x9c, 0x62, 0x3a, 0x60, 0xf3, 0x90, 0xef, 0xa0, 0xcd, 0xcf, 0x7a, 0x37, 0x71, 0x8c,
	0xd8, 0x3c, 0x60, 0x3a, 0xd4, 0xe6, 0x27, 0x79, 0x46, 0xd2, 0xb2, 0xc7, 0x36, 0xe7, 0x39, 0x41,
	0xa2, 0x6c, 0xfe, 0x6b, 0xa3, 0x37, 0x98, 0xc2, 0x18, 0xb1, 0xf9, 0x00, 0xef, 0x48, 0x64, 0x03,
	0x9c, 0xc3, 0xec, 0xf1, 0x4a, 0xec, 0x58, 0xd2, 0x0b, 0x67, 0x48, 0x3a, 0x4e, 0xee, 0x4f, 0x6f,
	0x76, 0x76, 0xfb, 0x12, 0x96, 0xc0, 0x05, 0x8a, 0x45, 0x24, 0xd8, 0xc5, 0x33, 0x9c, 0xf1, 0x5b,
	0x13, 0x37, 0x98, 0xc2, 0x38, 0xb9, 0x1e, 0x1d, 0xb2, 0x8a, 0x04, 0x32, 0x83, 0xfb, 0xd5, 0x41,
	0xe8, 0x3f, 0x16, 0xe9, 0xf2, 0x19, 0x22, 0x4d, 0x58, 0x70, 0xcf, 0x7e, 0x48, 0xa6, 0x80, 0xbe,
	0x50, 0x1b, 0xe0, 0xd2, 0x00, 0x9b, 0x48, 0xac, 0xf9, 0xd3, 0xc5, 0xfa, 0xe5, 0xbf, 0x8d, 0xf5,
	0x35, 0x61, 0x9d, 0x8f, 0xb3, 0x1b, 0x30, 0x6e, 0x74, 0x93, 0x79, 0xb7, 0xd9, 0x8a, 0x1b, 0xf7,
	0xac, 0x17, 0xc5, 0x52, 0xc4, 0xb8, 0x61, 0xa0, 0x2d, 0x35, 0x5b, 0x27, 0x8c, 0x7b, 0x92, 0x67,
	0x24, 0xec, 0xd5, 0xb3, 0x06, 0x74, 0xf2, 0x06, 0x53, 0x48, 0x11, 0xe3, 0x0e, 0xf0, 0x1e, 0x18,
	0xd0, 0x11, 0xfb, 0x63, 0x69, 0xaf, 0x9f, 0x21, 0xed, 0x24, 0x19, 0xd0, 0x21, 0xc7, 0xbe, 0xa4,
	0x9b, 0xc1, 0x10, 0xa4, 0x58, 0x45, 0x42, 0x2e, 0x12, 0x21, 0x17, 0x3e, 0x3c, 0x62, 0xc6, 0x44,
	0x41, 0x55, 0xb4, 0x93, 0x52, 0x4e, 0x92, 0x91, 0x1d, 0xe3, 0x19, 0x49, 0x58, 0x0d, 0xd8, 0xee,
	0x47, 0x33, 0x77, 0x3c, 0xea, 0xbc, 0x7c, 0x86, 0x90, 0x80, 0x30, 0xec, 0x4f, 0xf8, 0xf1, 0xd9,
	0xe6, 0xea, 0x30, 0x86, 0x91, 0xa8, 0x9f, 0x22, 0xa2, 0x4e, 0x53, 0x03, 0x1a, 0x58, 0xf3, 0x27,
	0x78, 0x45, 0xf2, 0xdd, 0x01, 0xd7, 0x68, 0x76, 0xe4, 0xe5, 0xa8, 0x63, 0x45, 0xbe, 0x72, 0x86,
	0x8c, 0x53, 0x34, 0x5f, 0xbc, 0x5e, 0xea, 0xab, 0xf3, 0x07, 0xc1, 0x73, 0xa7, 0xf1, 0x8d, 0x44,
	0x5d, 0x3a, 0x73, 0xe6, 0x99, 0xb2, 0xae, 0x0e, 0x63, 0x1e, 0xc9, 0x7d, 0x2f, 0x70, 0xac, 0x63,
	0xfe, 0x83, 0xc1, 0x28, 0x7b, 0x86, 0xe0, 0xd3, 0xc4, 0xa7, 0xfa, 0xbc, 0xe9, 0x78, 0x84, 0x40,
	0xfa, 0x54, 0xce, 0x91, 0xe8, 0xaf, 0x12, 0xd1, 0xaf, 0x06, 0x21, 0xe9, 0xf8, 0x25, 0x07, 0xb0,
	0x94, 0x9a, 0x7f, 0xf4, 0x28, 0xf0, 0x88, 0x69, 0xeb, 0xda, 0xd0, 0x36, 0xc2, 0x0e, 0xdc, 0xfa,
	0xdd, 0xcc, 0x2f, 0x1e, 0x31, 0xef, 0x32, 0xe0, 0x2a, 0x60, 0x83, 0xd9, 0x2a, 0x7d, 0x9c, 0xa1,
	0x74, 0xd9, 0x31, 0x3e, 0x2b, 0x65, 0x55, 0xb0, 0x08, 0xd8, 0x20, 0xac, 0x51, 0x85, 0x29, 0x9e,
	0xcb, 0xf2, 0x62, 0x96, 0x57, 0xc0, 0xf3, 0xe0, 0x62, 0xbf, 0x05, 0x9a, 0x44, 0x54, 0xb3, 0x12,
	0x97, 0x95, 0x44, 0x90, 0x06, 0xe7, 0xaa, 0xbd, 0x9d, 0x81, 0xe2, 0x29, 0x41, 0xc8, 0xf2, 0x7a,
	0x56, 0x90, 0xb3, 0x82, 0x96, 0x5b, 0x02, 0x97, 0x4f, 0xe4, 0x2f, 0xa7, 0x6d, 0x8a, 0xbd, 0x4a,
	0x4d, 0xfa, 0xfd, 0x89, 0x25, 0x46, 0x3e, 0x16, 0xee, 0x91, 0x8d, 0xca, 0xe4, 0xe5, 0xc7, 0x6b,
	0xc3, 0xe7, 0xf3, 0x58, 0x85, 0x14, 0xce, 0x95, 0x71, 0x05, 0x2d, 0xab, 0xe7, 0xb2, 0x81, 0x2c,
	0xd4, 0xb4, 0x1a, 0xdb, 0x80, 0x9b, 0x7a, 0x72, 0xc4, 0x80, 0xe8, 0x9d, 0x48, 0x21, 0x77, 0x93,
	0x9a, 0x8e, 0x06, 0xa5, 0xc1, 0x15, 0x66, 0x9f, 0x1c, 0x31, 0x33, 0xa4, 0x82, 0x94, 0xe5, 0xe5,
	0x1c, 0x1f, 0xc8, 0x73, 0x72, 0xae, 0x89, 0x55, 0x89, 0x9e, 0xaf, 0x1c, 0x23, 0xcf, 0x57, 0xe6,
	0x6e, 0x04, 0xe1, 0xba, 0x1f, 0xfc, 0x63, 0x94, 0x17, 0x9e, 0x1c, 0x31, 0xe7, 0x31, 0xa5, 0xc0,
	0x65, 0x05, 0x3e, 0xb7, 0x14, 0x04, 0xa3, 0x58, 0x44, 0x8e, 0xd1, 0x5e, 0x7e, 0x72, 0xc4, 0x5c,
	0x22, 0xb4, 0x62, 0x56, 0x90, 0x22, 0x41, 0x4e, 0xc6, 0xc5, 0x58, 0x95, 0xe8, 0xfd, 0xb1, 0x31,
	0x41, 0xc9, 0x0a, 0x6a, 0xa4, 0x1a, 0x2a, 0x40, 0xc5, 0xa8, 0xaf, 0x3f, 0x39, 0x62, 0xae, 0x11,
	0x6a, 0x3d, 0x2b, 0x72, 0x91, 0x6a, 0x06, 0xc3, 0x44, 0xac, 0xc2, 0xcb, 0x4f, 0x8e, 0x98, 0x97,
	0xc8, 0x99, 0x8a, 0x96, 0x15, 0xf5, 0x9c, 0x08, 0x16, 0x4f, 0x1b, 0xb0, 0xb1, 0x4a, 0xaf, 0x3c,
	0x39, 0x62, 0x6e, 0xe0, 0x4a, 0x12, 0x9f, 0x95, 0x84, 0x9c, 0x34, 0x38, 0xca, 0x87, 0xab, 0x34,
	0xfb, 0xe4, 0x88, 0xf9, 0x34, 0xa9, 0x25, 0x65, 0x25, 0x39, 0xbe, 0x6f, 0x1a, 0xac, 0x8e, 0xd6,
	0x93, 0x29, 0x00, 0xa7, 0xd6, 0x93, 0xa9, 0x19, 0x38, 0xdb, 0x7f, 0xe4, 0xf3, 0x3c, 0xbc, 0xb0,
	0x9e, 0x4c, 0x5d, 0x82, 0x97, 0xfb, 0x6f, 0xa4, 0x5d, 0x83, 0xd7, 0xd7, 0x93, 0xa9, 0xe7, 0x60,
	0x7a, 0x3d, 0x99, 0x4a, 0xc3, 0xe7, 0x83, 0xf7, 0xd2, 0xd6, 0x93, 0xa9, 0x0c, 0x7c, 0x61, 0x3d,
	0x99, 0x7a, 0x01, 0xbe, 0xb8, 0x9e, 0x4c, 0xbd, 0x08, 0x5f, 0x5a, 0x4f, 0xa6, 0x5e, 0x82, 0x2f,
	0xaf, 0x27, 0x53, 0x37, 0xe0, 0x2b, 0xeb, 0xc9, 0xd4, 0xa7, 0x61, 0x36, 0xf3, 0x17, 0x19, 0x90,
	0x31, 0xdc, 0x5e, 0xf3, 0x6d, 0x64, 0xb6, 0x76, 0xc8, 0x23, 0xa4, 0xd1, 0x3b, 0xc0, 0x1b, 0x78,
	0x59, 0xd1, 0x44, 0xc1, 0xf3, 0x2e, 0x5f, 0x66, 0xc0, 0x02, 0x0a, 0x09, 0x8e, 0x5f, 0x54, 0xdd,
	0x0f, 0x49, 0xc2, 0x05, 0xda, 0xe0, 0xb2, 0x97, 0xfc, 0xbf, 0xb6, 0x81, 0x73, 0x01, 0xee, 0xbd,
	0x77, 0xe6, 0x4f, 0x61, 0x74, 0x38, 0xe4, 0xa9, 0xef, 0x14, 0x63, 0xf5, 0xc9, 0x07, 0x05, 0xcb,
	0xfc, 0x3e, 0x06, 0x5c, 0x09, 0x64, 0xaf, 0xa1, 0xce, 0xdb, 0x4d, 0x17, 0x51, 0x22, 0xf7, 0x00,
	0xec, 0x06, 0xe8, 0x8f, 0x23, 0xe7, 0x4b, 0xef, 0xbd, 0x33, 0x4b, 0x55, 0x3f, 0x1c, 0xba, 0xbd,
	0x33, 0xd7, 0xa5, 0x5b, 0xce, 0xfc, 0x1c, 0x03, 0x16, 0x03, 0x99, 0x56, 0xdb, 0x9d, 0x07, 0x76,
	0xc7, 0xdb, 0xe8, 0xb4, 0x1f, 0x1e, 0x52, 0x82, 0xfd, 0x38, 0x03, 0x2e, 0xf9, 0x41, 0x61, 0x63,
	0x1f, 0x97, 0x7e, 0x1c, 0xf9, 0xb2, 0xef, 0xbd, 0x73, 0x61, 0x08, 0x93, 0x53, 0x74, 0x18, 0x91,
	0x52, 0xc2, 0x64, 0xfe, 0xec, 0x18, 0xb8, 0x50, 0x43, 0xee, 0x41, 0xa7, 0xd9, 0xa3, 0x25, 0x7c,
	0x03, 0xc0, 0x56, 0xbb, 0x41, 0xb1, 0x7f, 0xca, 0xea, 0x6f, 0xb6, 0xd5, 0x8e, 0xf7, 0x97, 0x3d,
	0x04, 0xd7, 0x6d, 0xa2, 0x85, 0xc6, 0x29, 0x3d, 0x0d, 0xf6, 0xa7, 0xa4, 0x53, 0x36, 0x39, 0xce,
	0x54, 0x60, 0x61, 0xc4, 0x5a, 0xb0, 0x4f, 0xa5, 0x60, 0xff, 0x04, 0x03, 0x2e, 0x87, 0x6d, 0x9f,
	0xb0, 0x7f, 0xea, 0xac, 0x5d, 0x90, 0x53, 0x5d, 0x29, 0xf7, 0x99, 0xf7, 0xde, 0x67, 0x54, 0x56,
	0xa6, 0x6b, 0x1d, 0xb4, 0x9a, 0x7e, 0x13, 0x79, 0xa1, 0xde, 0x83, 0x73, 0xc6, 0xe5, 0x62, 0xab,
	0x87, 0x3a, 0x2d, 0xd4, 0x23, 0xd5, 0x0f, 0x43, 0x69, 0x2f, 0xda, 0xc3, 0x38, 0xb3, 0x2b, 0x80,
	0xc5, 0x5a, 0xa6, 0xc7, 0xc0, 0x53, 0x16, 0xb2, 0xb0, 0xd5, 0xa6, 0x86, 0xc1, 0x21, 0xfb, 0x63,
	0x0c, 0x78, 0x3e, 0xec, 0xee, 0x19, 0x03, 0x34, 0xd8, 0x8e, 0xd5, 0xce, 0xea, 0xf8, 0x59, 0xe3,
	0xbf, 0xc0, 0x58, 0x8b, 0xf6, 0x99, 0x54, 0xb9, 0x57, 0xc0, 0x80, 0x3f, 0xc6, 0xa2, 0x5c, 0x34,
	0x51, 0x8e, 0x09, 0x59, 0x31, 0xab, 0xe5, 0x5e, 0x01, 0x97, 0x06, 0x7a, 0x7d, 0xda, 0x34, 0x19,
	0xdf, 0x28, 0x0a, 0x8f, 0x93, 0xfe, 0xfa, 0x28, 0x38, 0x57, 0x43, 0xdb, 0x7b, 0xa8, 0x15, 0x53,
	0x32, 0x7b, 0x13, 0x4c, 0x74, 0x3b, 0x6e, 0xc3, 0x6e, 0x3d, 0xcd, 0x51, 0xc7, 0xbb, 0x1d, 0xd7,
	0x68, 0x1d, 0xb2, 0x05, 0x30, 0x8d, 0x2b, 0x74, 0x03, 0x4e, 0x91, 0x3f, 0xbe, 0x30, 0x74, 0xe4,
	0x85, 0xcd, 0x59, 0xc8, 0x27, 0x3b, 0x77, 0x23, 0xd6, 0x54, 0xb7, 0xe3, 0x86, 0xc8, 0x2e, 0x6e,
	0xda, 0xeb, 0xf6, 0x48, 0xd3, 0x67, 0xdb, 0x6e, 0xdc, 0xeb, 0xf6, 0x70, 0xd3, 0x9f, 0x01, 0x33,
	0xcd, 0x56, 0xaf, 0x63, 0x47, 0x8d, 0x9f, 0xb9, 0x57, 0xce, 0x58, 0xd3, 0x84, 0x38, 0x6c, 0x0e,
	0xcb, 0x8d, 0x5b, 0xeb, 0xcb, 0x3d, 0xf1, 0xec, 0x72, 0x33, 0xd6, 0x94, 0xd7, 0xed, 0x45, 0x72,
	0xe7, 0x5e, 0x02, 0x6c, 0x4c, 0x03, 0xa7, 0xe6, 0x35, 0x1b, 0x80, 0x8d, 0x35, 0x18, 0x91, 0xdd,
	0x8a, 0x19, 0x6a, 0x4c, 0xce, 0x2a, 0x59, 0xf5, 0x8b, 0xef, 0x33, 0x2f, 0x81, 0xf3, 0x74, 0xc8,
	0x6c, 0x74, 0x0e, 0x76, 0x11, 0x18, 0x88, 0xa3, 0xd4, 0xe1, 0xe0, 0x3a, 0xb8, 0x52, 0xb6, 0x77,
	0x1f, 0xd8, 0x9d, 0xe8, 0x5f, 0x26, 0x35, 0xdb, 0xad, 0xfe, 0xd3, 0x7a, 0xaf, 0x82, 0x71, 0xdb,
	0xed, 0xff, 0xcb, 0xce, 0x29, 0xe1, 0xe2, 0x40, 0x2f, 0xc3, 0x7f, 0x60, 0x14, 0x12, 0x2d, 0xfd,
	0x4e, 0x30, 0x13, 0x78, 0x44, 0x2d, 0x38, 0x29, 0x60, 0x2f, 0x00, 0x58, 0x31, 0xeb, 0x77, 0xab,
	0xd6, 0xed, 0x46, 0xcd, 0xcc, 0x6f, 0x5a, 0xc5, 0xfa, 0x16, 0x1c, 0x61, 0xcf, 0x81, 0x19, 0xcb,
	0xa8, 0x9b, 0x8d, 0x52, 0xb1, 0x5c, 0xac, 0x17, 0x2b, 0x6b, 0x90, 0x61, 0xe7, 0xc1, 0x85, 0x8d,
	0x6a, 0xa9, 0x98, 0xdf, 0x6a, 0xe4, 0x8c, 0x9a, 0xb9, 0xd2, 0xb0, 0xaa, 0x9b, 0xa4, 0x24, 0x81,
	0x89, 0xef, 0x1a, 0xab, 0x0d, 0xf3, 0x5e, 0xbe, 0xb4, 0x59, 0x2b, 0x56, 0x2b, 0x70, 0x14, 0x13,
	0xd7, 0x0a, 0xc6, 0x86, 0xd9, 0xc8, 0x55, 0xeb, 0x8d, 0x0d, 0xab, 0x5a, 0x37, 0xf3, 0x75, 0x5c,
	0x92, 0x5c, 0xaa, 0x81, 0xd9, 0xbe, 0x00, 0x35, 0xb7, 0x4d, 0x3e, 0x1a, 0x5f, 0x08, 0x19, 0xd7,
	0xcc, 0x7a, 0xa3, 0x96, 0xaf, 0x6e, 0x98, 0x8d, 0x8a, 0x51, 0x36, 0x6b, 0x1b, 0x46, 0xde, 0x84,
	0x23, 0xec, 0xf3, 0xe0, 0xfa, 0x89, 0xf2, 0x3b, 0x45, 0xab, 0xbe, 0x69, 0x94, 0x1a, 0x85, 0x6a,
	0xad, 0x0e, 0x99, 0xa5, 0x7b, 0xe0, 0x92, 0x75, 0xb0, 0x8b, 0xf2, 0xed, 0x3d, 0xa7, 0xd9, 0x6a,
	0xb6, 0xb6, 0x8d, 0xdd, 0xed, 0x76, 0xa7, 0xd9, 0xdb, 0xd9, 0x63, 0xe7, 0xc0, 0xd4, 0x6a, 0xd1,
	0xaa, 0xd5, 0x1b, 0x65, 0xa3, 0x9e, 0x2f, 0xc0, 0x11, 0x96, 0x05, 0xb3, 0x2b, 0x66, 0x65, 0xab,
	0x51, 0xbd, 0x63, 0x5a, 0x56, 0x71, 0xc5, 0xac, 0x41, 0x86, 0x3d, 0x0f, 0xe6, 0x8c, 0x52, 0xa9,
	0x7a, 0x37, 0x86, 0x4c, 0x2c, 0x24, 0x1f, 0x1f, 0x31, 0x23, 0x4b, 0x8f, 0x19, 0x30, 0x15, 0xbb,
	0x17, 0xc0, 0x2e, 0x00, 0x58, 0xb7, 0x8c, 0x4a, 0x6d, 0xb5, 0x6a, 0x95, 0x4d, 0xab, 0x51, 0xa9,
	0x56, 0x4c, 0x38, 0x42, 0x68, 0x19, 0x76, 0x16, 0x80, 0x52, 0xf5, 0xae, 0x69, 0x35, 0xf2, 0x46,
	0xcd, 0x84, 0x04, 0xde, 0xdc, 0xd8, 0x88, 0x60, 0xa2, 0x27, 0xac, 0x3a, 0x45, 0x6a, 0xac, 0x98,
	0xf9, 0xea, 0x8a, 0x09, 0x47, 0xb1, 0x34, 0x95, 0xaa, 0x55, 0x36, 0x4a, 0xc5, 0xfb, 0x66, 0x63,
	0xc3, 0xa8, 0x17, 0x60, 0x92, 0xbd, 0x08, 0xce, 0x59, 0x66, 0xb9, 0x7a, 0xc7, 0x6c, 0xdc, 0x2d,
	0x14, 0xeb, 0xa1, 0x1a, 0xc6, 0x08, 0x37, 0xab, 0x14, 0x55, 0x1d, 0x67, 0x67, 0xc0, 0x64, 0xdd,
	0x2a, 0x96, 0x1b, 0x25, 0x73, 0xb5, 0x0e, 0x27, 0x70, 0x31, 0x01, 0xad, 0xe2, 0x5a, 0xa1, 0x0e,
	0x53, 0x6c, 0x0a, 0x24, 0x31, 0x0c, 0x27, 0x97, 0xfe, 0xe5, 0x0c, 0x98, 0xda, 0xb4, 0x4a, 0xd1,
	0x59, 0x05, 0x16, 0x63, 0xb3, 0x92, 0x37, 0xea, 0xe6, 0x5a, 0xd5, 0x2a, 0xde, 0x37, 0x57, 0xe0,
	0x08, 0xd6, 0x92, 0x65, 0x1a, 0xa5, 0x86, 0x59, 0xab, 0x1b, 0x75, 0x2c, 0x7a, 0x06, 0x2c, 0xe6,
	0xab, 0xe5, 0x8d, 0xcd, 0xba, 0x69, 0x35, 0x8c, 0xca, 0x4a, 0xa3, 0x58, 0xa9, 0x9b, 0x56, 0x05,
	0xab, 0x3f, 0xf2, 0x91, 0x04, 0x7b, 0x09, 0xb0, 0xab, 0xc5, 0x8a, 0x51, 0xc9, 0x17, 0x8d, 0x52,
	0xa3, 0x66, 0x5a, 0x77, 0x8a, 0x79, 0xb3, 0x16, 0xd8, 0x3e, 0xb7, 0x59, 0x2b, 0x56, 0xcc, 0x5a,
	0x8d, 0xd4, 0x35, 0xf3, 0xd5, 0x4a, 0xb5, 0xbc, 0x05, 0x93, 0xd8, 0xd2, 0xc3, 0xb9, 0x16, 0x2b,
	0xab, 0x55, 0x38, 0xc6, 0x4e, 0x83, 0x94, 0xb1, 0x49, 0x1c, 0xa5, 0x06, 0xc7, 0x31, 0x54, 0x2b,
	0x54, 0x37, 0x36, 0xb0, 0x93, 0x4d, 0x60, 0x1b, 0xe5, 0x37, 0x4b, 0x75, 0x52, 0xaf, 0x9a, 0xc7,
	0x3f, 0x61, 0x8a, 0x05, 0x60, 0xbc, 0x6e, 0x19, 0x77, 0xcc, 0x12, 0x9c, 0x64, 0x21, 0x98, 0x36,
	0x72, 0x9b, 0xd8, 0x33, 0x57, 0xac, 0xcd, 0xb5, 0x1a, 0x04, 0xec, 0x15, 0x70, 0xd1, 0x58, 0x89,
	0xea, 0x6c, 0x54, 0xad, 0x4a, 0x75, 0xcd, 0x32, 0x36, 0x0a, 0x5b, 0x70, 0x0a, 0x73, 0x2b, 0x54,
	0xcb, 0x26, 0x29, 0x59, 0x33, 0xac, 0x15, 0xb3, 0x02, 0xa7, 0x71, 0x83, 0xe5, 0x62, 0xa9, 0x58,
	0x37, 0xac, 0x2d, 0x38, 0x83, 0xcd, 0x50, 0xab, 0x92, 0xbe, 0x85, 0xe3, 0x03, 0xcb, 0x31, 0x8b,
	0xf5, 0xbc, 0x62, 0x1a, 0x2b, 0x8d, 0x1a, 0x36, 0x0d, 0x9c, 0x63, 0x5f, 0x02, 0xcf, 0x17, 0x2b,
	0x2b, 0xc5, 0x3b, 0xc5, 0x15, 0xec, 0x8f, 0xb5, 0x7a, 0x35, 0x7f, 0xbb, 0x61, 0xac, 0x60, 0x5d,
	0x10, 0xe6, 0xf5, 0x6a, 0xb5, 0x54, 0x83, 0x10, 0x2b, 0xab, 0x6e, 0x19, 0xc5, 0x4a, 0xb1, 0xb2,
	0x16, 0xc3, 0x9f, 0xc3, 0x3d, 0x58, 0x31, 0xc8, 0x38, 0x62, 0xb1, 0x61, 0x6a, 0xe6, 0xbd, 0x86,
	0xb9, 0xb2, 0x99, 0x37, 0xc8, 0x68, 0x39, 0x8f, 0x45, 0xb2, 0xcc, 0x52, 0x71, 0x0d, 0x43, 0x17,
	0xd8, 0x05, 0x70, 0xc9, 0xc4, 0x2a, 0xab, 0x1b, 0xc5, 0x4a, 0xd9, 0xac, 0x04, 0x1d, 0x33, 0xac,
	0x7a, 0x0d, 0x5e, 0x64, 0xaf, 0x81, 0xf9, 0x0d, 0xd3, 0xaa, 0x55, 0x2b, 0x58, 0x0a, 0x2c, 0x1b,
	0x29, 0xcc, 0x95, 0xaa, 0x6b, 0x35, 0x78, 0x89, 0x9d, 0x04, 0x63, 0x25, 0x73, 0xcd, 0x28, 0xc1,
	0xcb, 0xb8, 0x5f, 0xa5, 0x6a, 0xde, 0x28, 0x11, 0xa5, 0x5b, 0xe5, 0xa0, 0xa5, 0x79, 0xac, 0x91,
	0x5a, 0xdd, 0x32, 0x8d, 0x32, 0x96, 0xb0, 0x6c, 0xae, 0x14, 0x0d, 0x78, 0x05, 0x77, 0x76, 0xbd,
	0x9a, 0x6b, 0xd4, 0x4c, 0xc3, 0xca, 0x17, 0xe0, 0x02, 0x16, 0x67, 0xcd, 0x28, 0xe7, 0x4a, 0x58,
	0xde, 0xab, 0xd8, 0x6b, 0xc8, 0x58, 0x28, 0x05, 0x3c, 0xae, 0x61, 0xf9, 0x2c, 0x73, 0xd5, 0xb4,
	0xcc, 0x4a, 0xd8, 0x7b, 0xcb, 0x0c, 0xab, 0x5e, 0xc7, 0x65, 0xb5, 0x82, 0x61, 0x99, 0x77, 0x0d,
	0x2b, 0x28, 0x5b, 0xb5, 0x4c, 0x02, 0xc0, 0x45, 0x6c, 0xba, 0x0d, 0xd3, 0xb4, 0x1a, 0xf5, 0x6a,
	0x03, 0xff, 0x85, 0xcf, 0x61, 0xe7, 0x2e, 0x1b, 0x56, 0x71, 0x7d, 0xd3, 0xa8, 0x18, 0x30, 0xcd,
	0x4e, 0x81, 0x89, 0x82, 0x91, 0x27, 0x16, 0x78, 0x1e, 0xf7, 0x65, 0x0d, 0x87, 0x07, 0x98, 0xc1,
	0xca, 0xdf, 0x28, 0x14, 0x4b, 0xd5, 0x5a, 0x75, 0xa3, 0xb0, 0x15, 0x9a, 0xb9, 0x54, 0xac, 0x17,
	0x71, 0xf7, 0x8c, 0x95, 0x3b, 0xd5, 0xbc, 0x91, 0xdf, 0x82, 0x2f, 0xe0, 0xea, 0x77, 0x4d, 0x63,
	0x03, 0xbb, 0xd5, 0x8b, 0x58, 0xea, 0x0d, 0x63, 0x0b, 0xb7, 0x55, 0xdb, 0xb4, 0x56, 0xe1, 0x4b,
	0xec, 0x65, 0x70, 0xbe, 0xb0, 0x59, 0xa9, 0x47, 0x96, 0x59, 0x2d, 0xd6, 0x0a, 0xb8, 0xa1, 0x97,
	0x71, 0x35, 0xec, 0x01, 0x66, 0x7d, 0x0b, 0x7e, 0x0a, 0xeb, 0xb7, 0x6f, 0x18, 0xa2, 0xbc, 0x5a,
	0xbd, 0x58, 0xdf, 0x0c, 0x7c, 0xf5, 0x06, 0x76, 0xb5, 0x6a, 0xa5, 0x54, 0xac, 0x98, 0x8d, 0x35,
	0xcb, 0x34, 0x09, 0xaf, 0xbc, 0x61, 0xad, 0xd4, 0xe0, 0x2b, 0xd8, 0xc2, 0xb5, 0x8d, 0x2a, 0x36,
	0xd2, 0x12, 0x1e, 0x56, 0xb5, 0xbb, 0xc5, 0x72, 0x6d, 0xb3, 0x58, 0xaf, 0x45, 0x23, 0xa0, 0x58,
	0xc6, 0x81, 0xd6, 0xd8, 0xd8, 0x30, 0x2c, 0xb3, 0x04, 0x3f, 0x8d, 0x95, 0xf1, 0xe6, 0xa6, 0x59,
	0x23, 0xed, 0xe4, 0x4a, 0x26, 0xcc, 0xe2, 0xa1, 0x7c, 0xbb, 0xb8, 0x52, 0x83, 0xaf, 0x12, 0xb7,
	0x25, 0xd4, 0x58, 0xb7, 0x46, 0xbe, 0x58, 0x2b, 0xc3, 0x65, 0x1c, 0xc1, 0x8f, 0x2d, 0x5f, 0xaf,
	0x5a, 0xc6, 0x9a, 0x09, 0x6f, 0x62, 0x53, 0xdd, 0x29, 0x56, 0x4b, 0xd8, 0x14, 0x90, 0x63, 0xaf,
	0x83, 0x2b, 0xb7, 0xcd, 0xad, 0x52, 0x75, 0x6d, 0xcd, 0xb4, 0x82, 0x96, 0xcb, 0xd5, 0x4a, 0xb1,
	0x5e, 0xb5, 0x70, 0x4f, 0x79, 0x1c, 0x86, 0x02, 0x43, 0x35, 0xcc, 0xca, 0x1a, 0x1e, 0xb9, 0x50,
	0xc0, 0x6c, 0xfb, 0xe3, 0x13, 0xcb, 0x6f, 0x94, 0x6a, 0x50, 0xc4, 0x7e, 0x7c, 0xd7, 0xcc, 0x61,
	0xe5, 0x9a, 0x56, 0xbd, 0x58, 0x33, 0xb1, 0x1b, 0xd6, 0xa0, 0x84, 0x9b, 0xcb, 0x17, 0xcc, 0xc0,
	0x93, 0x65, 0x62, 0x22, 0xab, 0x5a, 0xab, 0x41, 0x05, 0x8b, 0x8c, 0x2b, 0x04, 0x73, 0x86, 0x59,
	0x36, 0x8a, 0x25, 0xa8, 0x62, 0x4f, 0x2f, 0x1b, 0x25, 0xe2, 0x0a, 0xc1, 0x38, 0xd2, 0xb0, 0x84,
	0x1b, 0x85, 0x40, 0xf5, 0xc1, 0x18, 0xaf, 0x17, 0x4c, 0xab, 0xb1, 0x6a, 0x19, 0x9b, 0x2b, 0x35,
	0xa8, 0xb3, 0x2f, 0x80, 0xe7, 0x36, 0xac, 0xea, 0xbd, 0xad, 0x86, 0x71, 0xa7, 0x5a, 0x5c, 0x31,
	0x22, 0x07, 0x33, 0x2a, 0xd5, 0xca, 0x56, 0xb9, 0x78, 0xdf, 0xb4, 0x6a, 0xf0, 0x16, 0x16, 0xae,
	0xb6, 0xb1, 0xd5, 0xf7, 0x30, 0x63, 0x85, 0xf8, 0xd7, 0x67, 0xb0, 0x38, 0xe5, 0xcd, 0x5a, 0x31,
	0x0f, 0xbf, 0x0f, 0x7b, 0xf4, 0x1a, 0x8e, 0xf2, 0x64, 0xfc, 0xc0, 0xcf, 0x62, 0xeb, 0x54, 0x36,
	0x57, 0x70, 0x40, 0x7b, 0x8d, 0x04, 0x63, 0xf3, 0x6e, 0xa8, 0x1e, 0x32, 0x02, 0x5e, 0xc7, 0x3e,
	0x50, 0x2c, 0x05, 0x43, 0xe7, 0x0d, 0x2c, 0x63, 0xbe, 0x5a, 0xa9, 0xe3, 0x91, 0xb7, 0x62, 0x96,
	0x8a, 0x77, 0x4c, 0x6b, 0x2b, 0x0a, 0x0e, 0x35, 0x68, 0xb0, 0x57, 0xc1, 0xe5, 0xbe, 0xc6, 0xf2,
	0xd5, 0x72, 0x79, 0xb3, 0x52, 0x0c, 0xfc, 0xa5, 0x06, 0x73, 0x58, 0x41, 0x78, 0x2e, 0xac, 0x98,
	0xf5, 0x1a, 0xcc, 0x93, 0x48, 0x97, 0xab, 0x5a, 0x64, 0xdc, 0xac, 0x10, 0x0f, 0x34, 0x8d, 0x52,
	0xbd, 0xd0, 0x6f, 0x3a, 0x5f, 0xac, 0x98, 0xd0, 0xc4, 0x83, 0x26, 0x5f, 0xad, 0xac, 0x16, 0xad,
	0xb2, 0xb9, 0xd2, 0xa8, 0x6d, 0x18, 0xe5, 0x46, 0xad, 0xba, 0x69, 0xe1, 0x30, 0xbb, 0x8a, 0x87,
	0x08, 0xc1, 0x6c, 0x5a, 0xa5, 0x1a, 0x5c, 0xc3, 0xfe, 0xb9, 0x59, 0x39, 0x85, 0xb8, 0x80, 0x07,
	0x7d, 0x75, 0xc3, 0xac, 0x34, 0x0a, 0xf5, 0xfa, 0x06, 0x9e, 0x8f, 0xef, 0x15, 0xcd, 0x1a, 0x2c,
	0xe2, 0xa9, 0x75, 0x65, 0xab, 0x62, 0x94, 0xf1, 0x80, 0x29, 0x6d, 0x35, 0xd6, 0xcc, 0x8a, 0x89,
	0xa7, 0xfd, 0x95, 0x46, 0xd8, 0x4d, 0xb8, 0x8e, 0x95, 0xb2, 0x61, 0x58, 0xb7, 0x71, 0x58, 0xad,
	0x96, 0x8d, 0x62, 0xa5, 0x06, 0x6f, 0x63, 0x79, 0x8d, 0x52, 0xbe, 0x5a, 0xa8, 0x96, 0xc2, 0x58,
	0x96, 0x33, 0xf2, 0xf9, 0x2a, 0x2c, 0x91, 0x1c, 0xc1, 0x2a, 0xde, 0xc1, 0x2e, 0x5a, 0xdc, 0x68,
	0x18, 0x2b, 0x2b, 0x96, 0x59, 0xab, 0x99, 0x35, 0x58, 0xc6, 0x3d, 0x29, 0x96, 0x8d, 0xb5, 0xc0,
	0x30, 0x77, 0x8a, 0x2b, 0x66, 0x35, 0x8a, 0x2a, 0x15, 0x32, 0x91, 0x18, 0xb5, 0x42, 0xb1, 0x5a,
	0x09, 0x62, 0x96, 0x69, 0x6c, 0xd6, 0xb7, 0x60, 0x35, 0x08, 0x27, 0x79, 0xcb, 0x24, 0x3a, 0x24,
	0x45, 0x85, 0x6a, 0x2e, 0x87, 0x25, 0xdf, 0xc0, 0x62, 0x95, 0xab, 0xf5, 0xaa, 0xd5, 0xb8, 0x63,
	0x16, 0x8a, 0xf9, 0x92, 0x59, 0x83, 0x6f, 0xe2, 0x91, 0x8d, 0x5d, 0x0d, 0xe7, 0x04, 0xd8, 0x0d,
	0xad, 0x70, 0x0a, 0xff, 0xfb, 0x0c, 0x80, 0x83, 0x87, 0xf9, 0x78, 0x94, 0x51, 0x2a, 0x1a, 0xc1,
	0xfe, 0x7e, 0xb7, 0x58, 0x59, 0xa9, 0xde, 0xad, 0x35, 0xcc, 0x7b, 0x1b, 0xa5, 0x6a, 0xb1, 0x8e,
	0x53, 0x83, 0x90, 0xa7, 0x51, 0xaf, 0x1b, 0xf9, 0xdb, 0x35, 0x98, 0xc0, 0x0e, 0x91, 0xab, 0xd6,
	0x89, 0x19, 0x47, 0xc9, 0x14, 0x95, 0x37, 0x2a, 0x15, 0xec, 0x7e, 0x49, 0xec, 0x5b, 0x96, 0xb9,
	0xb1, 0x59, 0x0f, 0xc2, 0x21, 0x99, 0xce, 0x22, 0x97, 0x86, 0xe3, 0xd8, 0x09, 0x89, 0x07, 0xc3,
	0x89, 0x40, 0xf8, 0x5c, 0xb1, 0x64, 0x36, 0xea, 0x05, 0xdc, 0xbd, 0x1a, 0x4c, 0x91, 0xe9, 0xbc,
	0x6a, 0x35, 0x02, 0x92, 0x49, 0x6c, 0xb0, 0x15, 0xb3, 0x82, 0x67, 0x9f, 0xea, 0x6a, 0x34, 0xb9,
	0x42, 0x80, 0x5b, 0x0f, 0x1d, 0x0e, 0x4e, 0x85, 0xdd, 0xfb, 0x3b, 0x0c, 0x80, 0x83, 0xff, 0x8a,
	0x1b, 0x8b, 0x4d, 0x4c, 0x78, 0x0f, 0xcf, 0x11, 0x38, 0xa1, 0x83, 0x60, 0x3a, 0x42, 0xe4, 0xaa,
	0x2b, 0x5b, 0x41, 0xd2, 0x13, 0x61, 0x2c, 0x93, 0x44, 0x1c, 0x98, 0x60, 0xaf, 0x00, 0x78, 0x8c,
	0xac, 0xe1, 0x88, 0x69, 0xc2, 0xd1, 0x85, 0xd1, 0x47, 0xef, 0x30, 0x58, 0xa2, 0xa8, 0x68, 0xc3,
	0xb0, 0x8c, 0xb2, 0x59, 0x37, 0x2d, 0x98, 0xc4, 0x7d, 0x89, 0xd0, 0x05, 0xd3, 0x58, 0x31, 0x2d,
	0x38, 0x16, 0xc7, 0xe5, 0xab, 0xd5, 0xdb, 0x45, 0x9c, 0xae, 0xc4, 0x24, 0xda, 0xb4, 0x4a, 0x70,
	0x82, 0xbd, 0x10, 0x47, 0x14, 0x61, 0x8a, 0xb4, 0xb2, 0x90, 0xc2, 0x7d, 0xfa, 0xd6, 0x11, 0xc3,
	0x2c, 0xfd, 0x73, 0x06, 0xcc, 0x9f, 0xf6, 0x1e, 0x21, 0x7b, 0x1d, 0x5c, 0xa8, 0x97, 0x6a, 0x8d,
	0xd5, 0x62, 0x65, 0xcd, 0xb4, 0x36, 0xac, 0x62, 0xa5, 0x1e, 0xa5, 0x62, 0x44, 0xd6, 0xeb, 0xe0,
	0x8a, 0x51, 0xd9, 0x6a, 0xe0, 0xbc, 0x2a, 0x5f, 0xac, 0x6e, 0x52, 0x84, 0x90, 0xc1, 0x83, 0x3e,
	0x8c, 0x0d, 0x89, 0xf0, 0x77, 0xb1, 0xb2, 0x02, 0x47, 0xc9, 0x64, 0x8c, 0xd3, 0xbf, 0x7b, 0x30,
	0x89, 0x35, 0xbd, 0x56, 0xad, 0xd6, 0x6f, 0x17, 0xeb, 0x70, 0x0c, 0x47, 0xe0, 0xb5, 0xea, 0xfd,
	0x62, 0x90, 0x94, 0xac, 0xe7, 0x8a, 0xab, 0x16, 0xce, 0x3b, 0x27, 0x30, 0xd1, 0x9b, 0x9b, 0xc6,
	0xed, 0x5c, 0x15, 0x27, 0x23, 0xd8, 0xfc, 0x46, 0xa5, 0x56, 0x2d, 0x13, 0xce, 0x93, 0x98, 0xb4,
	0x6e, 0x55, 0x4b, 0x2b, 0x66, 0xad, 0x00, 0x01, 0x49, 0x55, 0xaa, 0xab, 0x35, 0xd3, 0x84, 0x53,
	0x38, 0xfc, 0xd5, 0xab, 0x96, 0x65, 0x56, 0xea, 0xa5, 0x6a, 0xfe, 0xb6, 0x69, 0x05, 0xb9, 0x47,
	0xdd, 0x2a, 0xe6, 0x09, 0xab, 0x99, 0xa5, 0xaf, 0x3c, 0x0f, 0xa6, 0x62, 0xdf, 0xa3, 0xb1, 0x9f,
	0xc1, 0xd6, 0xdb, 0xac, 0xd4, 0x71, 0xbc, 0x09, 0xba, 0xf9, 0xca, 0x07, 0x47, 0xcc, 0x4b, 0x43,
	0xbe, 0x2a, 0x3b, 0xb7, 0xd3, 0xeb, 0xed, 0x53, 0x28, 0x2c, 0x57, 0x54, 0xd9, 0x58, 0x09, 0xd2,
	0xd2, 0x3e, 0x8c, 0x35, 0x10, 0x87, 0x57, 0xe1, 0x28, 0x05, 0xaf, 0x05, 0x6e, 0xdd, 0x87, 0x8b,
	0x41, 0x22, 0xda, 0x87, 0x4b, 0x70, 0x9c, 0x82, 0xcb, 0x41, 0x26, 0xda, 0x87, 0x2b, 0x81, 0x5e,
	0xfa, 0x70, 0x15, 0x4e, 0x52, 0xf0, 0x9b, 0x10, 0x50, 0xb0, 0x05, 0xa7, 0x28, 0xb8, 0x06, 0xa7,
	0x29, 0xb8, 0x0e, 0x67, 0x28, 0x78, 0x33, 0xc8, 0xc8, 0xfa, 0xf0, 0x5d, 0x38, 0x47, 0xc1, 0xf7,
	0x20, 0xa4, 0xe0, 0xfb, 0xf0, 0x5c, 0x1c, 0xce, 0x19, 0x90, 0xa5, 0xe0, 0x1c, 0x3c, 0x4f, 0xc1,
	0x2b, 0xf0, 0x02, 0x05, 0x9b, 0xf0, 0x22, 0x05, 0xaf, 0xc2, 0x4b, 0x14, 0xbc, 0x06, 0x2f, 0x53,
	0x70, 0x01, 0xce, 0x53, 0x70, 0x31, 0x48, 0xaa, 0xfa, 0xf0, 0x3a, 0x5c, 0xa0, 0xe0, 0x12, 0xbc,
	0x4a, 0xc1, 0x65, 0x78, 0x8d, 0x82, 0x2b, 0xf0, 0x3a, 0x05, 0x57, 0xe1, 0x22, 0x05, 0xbf, 0x09,
	0x9f, 0xa3, 0x60, 0x0b, 0xa6, 0x29, 0xb8, 0x06, 0x9f, 0xa7, 0xe0, 0x3a, 0xcc, 0x50, 0xf0, 0x1d,
	0xf8, 0x02, 0x05, 0xdf, 0x85, 0x2f, 0x52, 0xf0, 0x16, 0x7c, 0x89, 0x82, 0xef, 0xc3, 0x97, 0xe3,
	0x70, 0xde, 0x80, 0x9f, 0xa2, 0xe0, 0x3c, 0xbc, 0x41, 0xc1, 0x2b, 0xf0, 0x15, 0x0a, 0x5e, 0x85,
	0x4b, 0x14, 0xbc, 0x06, 0x3f, 0x4d, 0xc1, 0x05, 0x98, 0xa5, 0xe0, 0x22, 0x7c, 0x95, 0x82, 0x6f,
	0xc3, 0x65, 0x0a, 0x2e, 0xc1, 0x9b, 0x14, 0x5c, 0x86, 0x1c, 0x05, 0x57, 0x20, 0x4f, 0xc1, 0x55,
	0x28, 0x50, 0xb0, 0x05, 0x45, 0x0a, 0xc6, 0xa9, 0x4d, 0x1c, 0xde, 0x84, 0x32, 0x05, 0xdf, 0x81,
	0x0a, 0x05, 0xdf, 0x85, 0x2a, 0x05, 0xdf, 0x83, 0x1a, 0x05, 0x6f, 0x41, 0x9d, 0x82, 0xef, 0xc3,
	0x5b, 0x71, 0x78, 0x05, 0x67, 0x2b, 0x71, 0x78, 0x3d, 0x48, 0x59, 0xfa, 0xf0, 0x6d, 0xf8, 0x59,
	0x0a, 0x2e, 0xc3, 0xd7, 0x28, 0xb8, 0x0a, 0x5f, 0xa7, 0xe0, 0xfb, 0xf0, 0x8d, 0x38, 0x6c, 0xe6,
	0xa1, 0x41, 0xc1, 0x26, 0xcc, 0x51, 0xf0, 0x1a, 0xcc, 0x53, 0x70, 0x01, 0xae, 0x50, 0xb0, 0x05,
	0x4d, 0x0a, 0xc6, 0x89, 0x48, 0x1c, 0xae, 0xc3, 0xb5, 0x38, 0xbc, 0x5a, 0x84, 0x05, 0x0a, 0x5e,
	0x87, 0x45, 0x0a, 0xbe, 0x0d, 0xd7, 0x29, 0xb8, 0x0c, 0x6f, 0x53, 0x30, 0x4e, 0x2a, 0xe2, 0xb0,
	0x05, 0xcb, 0x71, 0x78, 0xcd, 0x80, 0x15, 0x0a, 0xce, 0xc1, 0x2a, 0x05, 0xaf, 0xc0, 0x0d, 0x0a,
	0x36, 0xe1, 0x9b, 0x14, 0xbc, 0x0a, 0x2d, 0x0a, 0x5e, 0x83, 0x35, 0x0a, 0x2e, 0xc0, 0x3a, 0x05,
	0x17, 0xe1, 0x26, 0x05, 0x97, 0xe0, 0x1d, 0x0a, 0x2e, 0xc3, 0xbb, 0x14, 0x5c, 0x81, 0xf7, 0x28,
	0x78, 0x03, 0x6e, 0x51, 0xf0, 0x9b, 0xf0, 0x3e, 0x05, 0x5b, 0xf0, 0xfb, 0x29, 0xb8, 0x06, 0x7f,
	0x80, 0x82, 0xeb, 0xf0, 0x73, 0x14, 0xbc, 0x09, 0x7f, 0x90, 0x82, 0xef, 0xc2, 0x06, 0x05, 0x6f,
	0xc1, 0x1f, 0x8a, 0xc3, 0x85, 0xdb, 0xd0, 0xa6, 0xe0, 0x32, 0x74, 0x28, 0xb8, 0x02, 0x5d, 0x0a,
	0xb6, 0xa0, 0x47, 0xc1, 0x75, 0x88, 0x28, 0x78, 0x13, 0xfa, 0x71, 0xb8, 0xb8, 0x02, 0xb7, 0x29,
	0xd8, 0x84, 0x3b, 0x14, 0x5c, 0x82, 0x4d, 0x0a, 0x2e, 0xc3, 0xcf, 0x53, 0x70, 0x05, 0xbe, 0x45,
	0xc1, 0x55, 0xb8, 0x4b, 0xc1, 0x6f, 0xc2, 0x3d, 0x0a, 0xb6, 0x60, 0x8b, 0x82, 0x6b, 0xb0, 0x4d,
	0xc1, 0x75, 0xb8, 0x1f, 0x87, 0xd7, 0x4d, 0xf8, 0x05, 0x0a, 0x2e, 0x43, 0x6a, 0x7e, 0x5c, 0xaf,
	0xc2, 0x2e, 0x05, 0x6f, 0xc0, 0x5e, 0x1c, 0xbe, 0x6d, 0xc2, 0x03, 0x0a, 0x5e, 0x83, 0x6f, 0x53,
	0x70, 0x01, 0x3e, 0xa0, 0xe0, 0x22, 0x7c, 0x48, 0xc1, 0x65, 0x78, 0x48, 0xc1, 0x15, 0xf8, 0xc3,
	0x14, 0xbc, 0x01, 0x7f, 0x07, 0x05, 0x5b, 0xf0, 0xdf, 0xa0, 0xe0, 0xbb, 0xf0, 0x1d, 0x0a, 0xde,
	0x82, 0xff, 0x26, 0x05, 0xdf, 0x87, 0xbf, 0x93, 0x9d, 0x3b, 0x86, 0x4b, 0x06, 0x7c, 0xc4, 0x50,
	0x88, 0x1c, 0xfc, 0x11, 0x1a, 0x91, 0x87, 0xef, 0xd2, 0x88, 0x22, 0xfc, 0x5d, 0x34, 0xe2, 0x36,
	0xfc, 0x51, 0x1a, 0x61, 0xc1, 0x1f, 0xa3, 0x11, 0x35, 0xf8, 0xe3, 0x34, 0xa2, 0x0e, 0x7f, 0x37,
	0x8d, 0xd8, 0x84, 0x3f, 0x41, 0x23, 0xee, 0xc0, 0xdf, 0x43, 0x23, 0xb6, 0xe0, 0x17, 0x29, 0x44,
	0xd9, 0x80, 0xbf, 0x97, 0x46, 0xe4, 0xe1, 0xbf, 0x45, 0x23, 0x56, 0xe0, 0xbf, 0x4d, 0x23, 0x4c,
	0xf8, 0xef, 0xd0, 0x88, 0x55, 0xf8, 0x25, 0x1a, 0xb1, 0x06, 0x7f, 0x92, 0x46, 0x14, 0xe0, 0xef,
	0xa3, 0x11, 0xb7, 0xe1, 0x97, 0x69, 0x44, 0x09, 0xfe, 0xbb, 0x34, 0xa2, 0x0c, 0xff, 0x3d, 0x1a,
	0x51, 0x81, 0xbf, 0x9f, 0x46, 0x54, 0xe1, 0x1f, 0xa0, 0x11, 0x1b, 0xf0, 0xdf, 0xa7, 0x11, 0x6f,
	0xc2, 0xaf, 0xd0, 0x08, 0x0b, 0xfe, 0x41, 0x1a, 0x51, 0x83, 0x5f, 0xa5, 0x11, 0x75, 0xf8, 0x1f,
	0xd0, 0x88, 0x4d, 0xf8, 0x87, 0x68, 0xc4, 0x1d, 0xf8, 0x87, 0x69, 0xc4, 0x5d, 0xf8, 0x53, 0x34,
	0xe2, 0x1e, 0xfc, 0x0f, 0x69, 0xc4, 0x16, 0xfc, 0x69, 0x1a, 0x71, 0x1f, 0xfe, 0x11, 0x0a, 0x51,
	0x31, 0xe0, 0xcf, 0xd0, 0x88, 0x3c, 0xfc, 0xa3, 0x34, 0xc2, 0x84, 0x7f, 0x8c, 0x46, 0xac, 0xc2,
	0x3f, 0x4e, 0x23, 0xd6, 0xe0, 0x9f, 0xa0, 0x11, 0x45, 0xf8, 0x27, 0x69, 0x44, 0x09, 0xfe, 0x2c,
	0x8d, 0xa8, 0xc2, 0x9f, 0xa3, 0x11, 0x1b, 0xf0, 0x3d, 0x1a, 0x61, 0xc1, 0xff, 0x88, 0x46, 0x6c,
	0xc2, 0xff, 0x98, 0x46, 0xdc, 0x87, 0x7f, 0x8a, 0x42, 0x54, 0xcb, 0xf0, 0x4f, 0x53, 0x88, 0x0d,
	0x03, 0xfe, 0x27, 0x34, 0xc2, 0x84, 0x3f, 0x4f, 0x23, 0x56, 0xe1, 0x9f, 0xa1, 0x11, 0x6b, 0xf0,
	0xcf, 0xd2, 0x88, 0x02, 0xfc, 0x4f, 0x69, 0xc4, 0x6d, 0xf8, 0x9f, 0xd1, 0x88, 0x12, 0xfc, 0x73,
	0x34, 0xa2, 0x0c, 0xff, 0x3c, 0x8d, 0xa8, 0xc0, 0xff, 0x9c, 0x46, 0x58, 0xf0, 0x2f, 0xd0, 0x88,
	0x1a, 0xfc, 0x8b, 0x34, 0xa2, 0x0e, 0x7f, 0x81, 0x46, 0xdc, 0x85, 0x47, 0x34, 0x62, 0x0b, 0xbe,
	0x4f, 0x21, 0xde, 0x34, 0xe0, 0x5f, 0xa2, 0x10, 0x96, 0x09, 0xff, 0x32, 0x8d, 0xa8, 0xc2, 0xbf,
	0x42, 0x23, 0x6a, 0xf0, 0x31, 0x8d, 0xd8, 0x84, 0x7f, 0x95, 0x46, 0xdc, 0x85, 0xbf, 0x48, 0x21,
	0x6a, 0x06, 0xfc, 0x2f, 0x68, 0x44, 0x0e, 0xfe, 0x97, 0x34, 0x22, 0x0f, 0x7f, 0x89, 0x46, 0xac,
	0xc0, 0xbf, 0x46, 0x23, 0x4c, 0xf8, 0x5f, 0xd1, 0x88, 0x35, 0xf8, 0x35, 0x1a, 0x51, 0x80, 0xff,
	0x35, 0x8d, 0x28, 0xc2, 0x0f, 0x68, 0xc4, 0x3a, 0xfc, 0xeb, 0x34, 0xe2, 0x36, 0xfc, 0x1b, 0x34,
	0xa2, 0x04, 0xff, 0x26, 0x8d, 0x28, 0xc3, 0xff, 0x86, 0x46, 0x54, 0xe0, 0x7f, 0x4b, 0x23, 0xaa,
	0xf0, 0x09, 0x8d, 0xb0, 0xe0, 0x7f, 0x47, 0x23, 0x6a, 0xf0, 0xbf, 0xa7, 0x11, 0x75, 0xf8, 0xb7,
	0x68, 0xc4, 0x1d, 0xf8, 0xb7, 0x69, 0xc4, 0x3d, 0xf8, 0x77, 0x68, 0xc4, 0x16, 0xfc, 0x1f, 0x68,
	0xc4, 0x7d, 0xf8, 0x77, 0x29, 0x44, 0x3d, 0x0f, 0xbf, 0x4e, 0x23, 0x56, 0xe0, 0xdf, 0xa3, 0x11,
	0xab, 0xf0, 0x43, 0x1a, 0xb1, 0x06, 0xff, 0x47, 0x1a, 0x51, 0x80, 0x7f, 0x9f, 0x46, 0xac, 0xc3,
	0xff, 0x89, 0x46, 0xdc, 0x86, 0xff, 0x33, 0x8d, 0x28, 0xc1, 0x7f, 0x40, 0x23, 0xca, 0xf0, 0x97,
	0x69, 0x44, 0x05, 0x7e, 0x83, 0x46, 0x54, 0xe1, 0x47, 0x34, 0xc2, 0x82, 0xdf, 0xa4, 0x11, 0x75,
	0xf8, 0xbf, 0xd0, 0x88, 0x3b, 0xf0, 0x1f, 0xd2, 0x88, 0xbb, 0xf0, 0x7f, 0xa5, 0x11, 0xf7, 0xe1,
	0x3f, 0xa2, 0x10, 0x9b, 0x06, 0xfc, 0x16, 0x8d, 0x58, 0x83, 0xff, 0x98, 0x46, 0x94, 0xe1, 0x3f,
	0xa1, 0x11, 0x35, 0xf8, 0xbf, 0xd1, 0x88, 0x2d, 0xf8, 0xbf, 0xd3, 0x88, 0xfb, 0xf0, 0xff, 0xa0,
	0x10, 0x77, 0x0c, 0xf8, 0x4f, 0x69, 0x44, 0x1e, 0xfe, 0x0a, 0x8d, 0x30, 0xe1, 0xb7, 0x69, 0xc4,
	0x1a, 0xfc, 0x67, 0x34, 0xa2, 0x08, 0xbf, 0x43, 0x23, 0x2a, 0xf0, 0x57, 0x69, 0xc4, 0x26, 0xfc,
	0x35, 0x0a, 0x71, 0x77, 0x15, 0xfe, 0x9f, 0x34, 0xa2, 0x06, 0x7f, 0x9d, 0x42, 0xdc, 0xbb, 0x0d,
	0xff, 0x2f, 0x1a, 0x51, 0x87, 0xbf, 0x41, 0x21, 0xb6, 0x4c, 0xf8, 0xcf, 0x69, 0x44, 0x1d, 0xfe,
	0x0b, 0x0a, 0x71, 0xdf, 0x80, 0xff, 0x37, 0x8d, 0x28, 0xc3, 0xff, 0x87, 0x46, 0xdc, 0x85, 0xff,
	0x92, 0x59, 0xfa, 0x11, 0x06, 0x00, 0xeb, 0x60, 0x17, 0x85, 0xff, 0xc0, 0x25, 0x05, 0x92, 0x2b,
	0x26, 0xd9, 0x61, 0x9a, 0x04, 0x63, 0xe4, 0x10, 0x0d, 0x32, 0xec, 0x15, 0x30, 0x57, 0x21, 0xfb,
	0x44, 0xfd, 0x63, 0xbb, 0xf0, 0x3c, 0x8d, 0xec, 0xa7, 0xc5, 0x8a, 0xe0, 0x28, 0x7b, 0x11, 0x4c,
	0x95, 0x8c, 0x5a, 0x1f, 0x91, 0x0c, 0xe9, 0x2e, 0x82, 0xa9, 0xb5, 0x6a, 0xbd, 0x1a, 0xa1, 0xc7,
	0x02, 0x74, 0xb8, 0xe5, 0xf5, 0x87, 0x18, 0x30, 0x97, 0xdf, 0xb1, 0x77, 0x77, 0x51, 0x6b, 0x3b,
	0x12, 0x84, 0x6c, 0x98, 0xad, 0x1a, 0x9b, 0xa5, 0x7a, 0x23, 0x5f, 0x30, 0x4a, 0x25, 0xb3, 0xb2,
	0x66, 0xc2, 0x11, 0xf6, 0x39, 0x70, 0xd5, 0x24, 0xfb, 0xe8, 0x8d, 0x75, 0xe3, 0x8e, 0x51, 0xcb,
	0x5b, 0xc5, 0x8d, 0x38, 0x01, 0x43, 0xf6, 0xf5, 0x03, 0x82, 0xbc, 0xb1, 0x51, 0xcf, 0x17, 0x8c,
	0x58, 0x69, 0x82, 0x70, 0x2d, 0xd6, 0x82, 0xe2, 0x3e, 0x7a, 0x94, 0x9c, 0xe6, 0x98, 0xe5, 0x8d,
	0xaa, 0x65, 0x90, 0x45, 0x7b, 0x35, 0x38, 0x9a, 0x48, 0x86, 0xe2, 0xbd, 0x04, 0x66, 0x8d, 0xfd,
	0xfd, 0x7a, 0xc7, 0xf6, 0xfd, 0xa6, 0x4b, 0x0e, 0x59, 0x27, 0xc0, 0xe8, 0x5d, 0x33, 0x07, 0x47,
	0x58, 0x00, 0xc6, 0x83, 0x9d, 0x3f, 0xc8, 0x2c, 0x7d, 0x16, 0x4c, 0x17, 0xea, 0xe5, 0xd2, 0x46,
	0xbb, 0xdb, 0x24, 0x3d, 0x98, 0x01, 0x93, 0x39, 0x73, 0xad, 0x58, 0xa9, 0x60, 0x5e, 0x23, 0xb8,
	0x8e, 0x59, 0x59, 0x09, 0x76, 0xab, 0x72, 0xe6, 0x6a, 0x95, 0xec, 0x56, 0x61, 0x25, 0xaf, 0xd6,
	0x4d, 0x0b, 0x8e, 0x2e, 0x1d, 0x82, 0xcb, 0xa7, 0xfc, 0xaf, 0x19, 0x76, 0x1a, 0xa4, 0xaa, 0x46,
	0x2d, 0xdc, 0x2a, 0x62, 0xe7, 0xc1, 0x05, 0x0c, 0x59, 0xe6, 0x46, 0xd5, 0xaa, 0x37, 0xee, 0x14,
	0xab, 0xe1, 0x79, 0x0d, 0xc3, 0x5e, 0x06, 0xe7, 0x71, 0x09, 0xe9, 0x40, 0xac, 0x20, 0x81, 0x45,
	0xe9, 0x17, 0x04, 0x3b, 0x42, 0xc7, 0x1c, 0x60, 0x32, 0xf7, 0x13, 0xcc, 0x93, 0x6f, 0x2c, 0x8e,
	0x7c, 0xfd, 0x1b, 0x8b, 0x23, 0xdf, 0xfe, 0xc6, 0x22, 0xf3, 0xe8, 0xa3, 0x45, 0xe6, 0x67, 0x3f,
	0x5a, 0x64, 0xbe, 0xf6, 0xd1, 0x22, 0xf3, 0xe4, 0xa3, 0x45, 0xe6, 0xeb, 0x1f, 0x2d, 0x32, 0xbf,
	0xfc, 0xd1, 0x22, 0xf3, 0xad, 0x8f, 0x16, 0x47, 0xbe, 0xfd, 0xd1, 0x22, 0xf3, 0x93, 0xdf, 0x5c,
	0x1c, 0x79, 0xfc, 0xcd, 0x45, 0xe6, 0xc9, 0x37, 0x17, 0x47, 0xbe, 0xfe, 0xcd, 0xc5, 0x91, 0xfb,
	0xeb, 0xdb, 0xed, 0xfd, 0xb7, 0xb6, 0x97, 0xdf, 0x6e, 0xef, 0xf6, 0x50, 0xa7, 0x63, 0x2f, 0x1f,
	0x74, 0x6f, 0x92, 0x1f, 0x7e, 0xbb, 0xb3, 0xf7, 0xea, 0x7e, 0xa7, 0xfd, 0x76, 0xd3, 0x43, 0x9d,
	0x57, 0xa3, 0xe2, 0x9b, 0xfb, 0xce, 0x76, 0xfb, 0x26, 0x7a, 0xd8, 0x0b, 0x0e, 0xb4, 0x6f, 0x86,
	0x7f, 0x82, 0x73, 0x72, 0x67, 0x9c, 0xfc, 0x8f, 0x79, 0xf1, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x99, 0xe7, 0x79, 0x67, 0x47, 0x94, 0x00, 0x00,
}

func (x PolicySetType) String() string {
	s, ok := PolicySetType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PolicySetScope) String() string {
	s, ok := PolicySetScope_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RuleCombiningAlgorithm) String() string {
	s, ok := RuleCombiningAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Transformer) String() string {
	s, ok := Transformer_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x URLCategory) String() string {
	s, ok := URLCategory_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IPThreatCategory) String() string {
	s, ok := IPThreatCategory_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DetectionContext) String() string {
	s, ok := DetectionContext_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x KnownTlsFingerprintClass) String() string {
	s, ok := KnownTlsFingerprintClass_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CountryCode) String() string {
	s, ok := CountryCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RuleAction) String() string {
	s, ok := RuleAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ChallengeAction) String() string {
	s, ok := ChallengeAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AppTrafficType) String() string {
	s, ok := AppTrafficType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HTMLPosition) String() string {
	s, ok := HTMLPosition_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OasValidationActionType) String() string {
	s, ok := OasValidationActionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AppFirewallViolationContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppFirewallViolationContext)
	if !ok {
		that2, ok := that.(AppFirewallViolationContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExcludeViolation != that1.ExcludeViolation {
		return false
	}
	if this.Context != that1.Context {
		return false
	}
	if this.ContextName != that1.ContextName {
		return false
	}
	return true
}
func (this *AppFirewallSignatureContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppFirewallSignatureContext)
	if !ok {
		that2, ok := that.(AppFirewallSignatureContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignatureId != that1.SignatureId {
		return false
	}
	if this.Context != that1.Context {
		return false
	}
	if this.ContextName != that1.ContextName {
		return false
	}
	return true
}
func (this *AppFirewallAttackTypeContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppFirewallAttackTypeContext)
	if !ok {
		that2, ok := that.(AppFirewallAttackTypeContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExcludeAttackType != that1.ExcludeAttackType {
		return false
	}
	if this.Context != that1.Context {
		return false
	}
	if this.ContextName != that1.ContextName {
		return false
	}
	return true
}
func (this *BotNameContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotNameContext)
	if !ok {
		that2, ok := that.(BotNameContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BotName != that1.BotName {
		return false
	}
	return true
}
func (this *AppFirewallDetectionControl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppFirewallDetectionControl)
	if !ok {
		that2, ok := that.(AppFirewallDetectionControl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExcludeSignatureContexts) != len(that1.ExcludeSignatureContexts) {
		return false
	}
	for i := range this.ExcludeSignatureContexts {
		if !this.ExcludeSignatureContexts[i].Equal(that1.ExcludeSignatureContexts[i]) {
			return false
		}
	}
	if len(this.ExcludeViolationContexts) != len(that1.ExcludeViolationContexts) {
		return false
	}
	for i := range this.ExcludeViolationContexts {
		if !this.ExcludeViolationContexts[i].Equal(that1.ExcludeViolationContexts[i]) {
			return false
		}
	}
	if len(this.ExcludeAttackTypeContexts) != len(that1.ExcludeAttackTypeContexts) {
		return false
	}
	for i := range this.ExcludeAttackTypeContexts {
		if !this.ExcludeAttackTypeContexts[i].Equal(that1.ExcludeAttackTypeContexts[i]) {
			return false
		}
	}
	if len(this.ExcludeBotNameContexts) != len(that1.ExcludeBotNameContexts) {
		return false
	}
	for i := range this.ExcludeBotNameContexts {
		if !this.ExcludeBotNameContexts[i].Equal(that1.ExcludeBotNameContexts[i]) {
			return false
		}
	}
	return true
}
func (this *DataGuardControl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataGuardControl)
	if !ok {
		that2, ok := that.(DataGuardControl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicyName != that1.PolicyName {
		return false
	}
	return true
}
func (this *BotAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotAction)
	if !ok {
		that2, ok := that.(BotAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ActionType == nil {
		if this.ActionType != nil {
			return false
		}
	} else if this.ActionType == nil {
		return false
	} else if !this.ActionType.Equal(that1.ActionType) {
		return false
	}
	return true
}
func (this *BotAction_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotAction_None)
	if !ok {
		that2, ok := that.(BotAction_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *BotAction_BotSkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotAction_BotSkipProcessing)
	if !ok {
		that2, ok := that.(BotAction_BotSkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotSkipProcessing.Equal(that1.BotSkipProcessing) {
		return false
	}
	return true
}
func (this *ModifyAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModifyAction)
	if !ok {
		that2, ok := that.(ModifyAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ActionType == nil {
		if this.ActionType != nil {
			return false
		}
	} else if this.ActionType == nil {
		return false
	} else if !this.ActionType.Equal(that1.ActionType) {
		return false
	}
	return true
}
func (this *ModifyAction_Default) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModifyAction_Default)
	if !ok {
		that2, ok := that.(ModifyAction_Default)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *ModifyAction_SkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModifyAction_SkipProcessing)
	if !ok {
		that2, ok := that.(ModifyAction_SkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkipProcessing.Equal(that1.SkipProcessing) {
		return false
	}
	return true
}
func (this *WafAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafAction)
	if !ok {
		that2, ok := that.(WafAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ActionType == nil {
		if this.ActionType != nil {
			return false
		}
	} else if this.ActionType == nil {
		return false
	} else if !this.ActionType.Equal(that1.ActionType) {
		return false
	}
	return true
}
func (this *WafAction_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafAction_None)
	if !ok {
		that2, ok := that.(WafAction_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *WafAction_WafSkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafAction_WafSkipProcessing)
	if !ok {
		that2, ok := that.(WafAction_WafSkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafSkipProcessing.Equal(that1.WafSkipProcessing) {
		return false
	}
	return true
}
func (this *WafAction_WafInMonitoringMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafAction_WafInMonitoringMode)
	if !ok {
		that2, ok := that.(WafAction_WafInMonitoringMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafInMonitoringMode.Equal(that1.WafInMonitoringMode) {
		return false
	}
	return true
}
func (this *WafAction_AppFirewallDetectionControl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafAction_AppFirewallDetectionControl)
	if !ok {
		that2, ok := that.(WafAction_AppFirewallDetectionControl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewallDetectionControl.Equal(that1.AppFirewallDetectionControl) {
		return false
	}
	return true
}
func (this *WafAction_DataGuardControl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafAction_DataGuardControl)
	if !ok {
		that2, ok := that.(WafAction_DataGuardControl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataGuardControl.Equal(that1.DataGuardControl) {
		return false
	}
	return true
}
func (this *WafAction_JwtValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafAction_JwtValidation)
	if !ok {
		that2, ok := that.(WafAction_JwtValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	return true
}
func (this *WafAction_JwtClaimsValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WafAction_JwtClaimsValidation)
	if !ok {
		that2, ok := that.(WafAction_JwtClaimsValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JwtClaimsValidation.Equal(that1.JwtClaimsValidation) {
		return false
	}
	return true
}
func (this *ContentRewriteAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContentRewriteAction)
	if !ok {
		that2, ok := that.(ContentRewriteAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InsertContent != that1.InsertContent {
		return false
	}
	if this.ElementSelector != that1.ElementSelector {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if len(this.InsertedTypes) != len(that1.InsertedTypes) {
		return false
	}
	for i := range this.InsertedTypes {
		if this.InsertedTypes[i] != that1.InsertedTypes[i] {
			return false
		}
	}
	return true
}
func (this *ShapeProtectedEndpointAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeProtectedEndpointAction)
	if !ok {
		that2, ok := that.(ShapeProtectedEndpointAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppTrafficType != that1.AppTrafficType {
		return false
	}
	if !this.Mitigation.Equal(that1.Mitigation) {
		return false
	}
	if this.WebScraping != that1.WebScraping {
		return false
	}
	if this.FlowLabel != that1.FlowLabel {
		return false
	}
	if !this.TransactionResult.Equal(that1.TransactionResult) {
		return false
	}
	if this.AllowGoodbot != that1.AllowGoodbot {
		return false
	}
	return true
}
func (this *ShapeBotMitigationAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotMitigationAction)
	if !ok {
		that2, ok := that.(ShapeBotMitigationAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ActionType == nil {
		if this.ActionType != nil {
			return false
		}
	} else if this.ActionType == nil {
		return false
	} else if !this.ActionType.Equal(that1.ActionType) {
		return false
	}
	return true
}
func (this *ShapeBotMitigationAction_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotMitigationAction_None)
	if !ok {
		that2, ok := that.(ShapeBotMitigationAction_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *ShapeBotMitigationAction_Block) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotMitigationAction_Block)
	if !ok {
		that2, ok := that.(ShapeBotMitigationAction_Block)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Block.Equal(that1.Block) {
		return false
	}
	return true
}
func (this *ShapeBotMitigationAction_Redirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotMitigationAction_Redirect)
	if !ok {
		that2, ok := that.(ShapeBotMitigationAction_Redirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Redirect.Equal(that1.Redirect) {
		return false
	}
	return true
}
func (this *ShapeBotMitigationAction_Flag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotMitigationAction_Flag)
	if !ok {
		that2, ok := that.(ShapeBotMitigationAction_Flag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Flag.Equal(that1.Flag) {
		return false
	}
	return true
}
func (this *ShapeBotFlagMitigationActionChoiceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotFlagMitigationActionChoiceType)
	if !ok {
		that2, ok := that.(ShapeBotFlagMitigationActionChoiceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SendHeadersChoice == nil {
		if this.SendHeadersChoice != nil {
			return false
		}
	} else if this.SendHeadersChoice == nil {
		return false
	} else if !this.SendHeadersChoice.Equal(that1.SendHeadersChoice) {
		return false
	}
	return true
}
func (this *ShapeBotFlagMitigationActionChoiceType_NoHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotFlagMitigationActionChoiceType_NoHeaders)
	if !ok {
		that2, ok := that.(ShapeBotFlagMitigationActionChoiceType_NoHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoHeaders.Equal(that1.NoHeaders) {
		return false
	}
	return true
}
func (this *ShapeBotFlagMitigationActionChoiceType_AppendHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotFlagMitigationActionChoiceType_AppendHeaders)
	if !ok {
		that2, ok := that.(ShapeBotFlagMitigationActionChoiceType_AppendHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppendHeaders.Equal(that1.AppendHeaders) {
		return false
	}
	return true
}
func (this *ShapeBotFlagMitigationActionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotFlagMitigationActionType)
	if !ok {
		that2, ok := that.(ShapeBotFlagMitigationActionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InferenceHeaderName != that1.InferenceHeaderName {
		return false
	}
	if this.AutoTypeHeaderName != that1.AutoTypeHeaderName {
		return false
	}
	return true
}
func (this *ShapeBotBlockMitigationActionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotBlockMitigationActionType)
	if !ok {
		that2, ok := that.(ShapeBotBlockMitigationActionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.BodyHash != that1.BodyHash {
		return false
	}
	return true
}
func (this *ShapeBotRedirectMitigationActionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotRedirectMitigationActionType)
	if !ok {
		that2, ok := that.(ShapeBotRedirectMitigationActionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	return true
}
func (this *PrefixMatchList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrefixMatchList)
	if !ok {
		that2, ok := that.(PrefixMatchList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IpPrefixes) != len(that1.IpPrefixes) {
		return false
	}
	for i := range this.IpPrefixes {
		if this.IpPrefixes[i] != that1.IpPrefixes[i] {
			return false
		}
	}
	if len(this.Ipv6Prefixes) != len(that1.Ipv6Prefixes) {
		return false
	}
	for i := range this.Ipv6Prefixes {
		if this.Ipv6Prefixes[i] != that1.Ipv6Prefixes[i] {
			return false
		}
	}
	if this.InvertMatch != that1.InvertMatch {
		return false
	}
	return true
}
func (this *AsnMatchList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AsnMatchList)
	if !ok {
		that2, ok := that.(AsnMatchList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AsNumbers) != len(that1.AsNumbers) {
		return false
	}
	for i := range this.AsNumbers {
		if this.AsNumbers[i] != that1.AsNumbers[i] {
			return false
		}
	}
	return true
}
func (this *SimpleWafExclusionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if that1.PathChoice == nil {
		if this.PathChoice != nil {
			return false
		}
	} else if this.PathChoice == nil {
		return false
	} else if !this.PathChoice.Equal(that1.PathChoice) {
		return false
	}
	if len(this.Methods) != len(that1.Methods) {
		return false
	}
	for i := range this.Methods {
		if this.Methods[i] != that1.Methods[i] {
			return false
		}
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.WafAdvancedConfiguration == nil {
		if this.WafAdvancedConfiguration != nil {
			return false
		}
	} else if this.WafAdvancedConfiguration == nil {
		return false
	} else if !this.WafAdvancedConfiguration.Equal(that1.WafAdvancedConfiguration) {
		return false
	}
	return true
}
func (this *SimpleWafExclusionRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule_AnyDomain)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *SimpleWafExclusionRule_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule_ExactValue)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *SimpleWafExclusionRule_SuffixValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule_SuffixValue)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule_SuffixValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SuffixValue != that1.SuffixValue {
		return false
	}
	return true
}
func (this *SimpleWafExclusionRule_AnyPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule_AnyPath)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule_AnyPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyPath.Equal(that1.AnyPath) {
		return false
	}
	return true
}
func (this *SimpleWafExclusionRule_PathPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule_PathPrefix)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule_PathPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathPrefix != that1.PathPrefix {
		return false
	}
	return true
}
func (this *SimpleWafExclusionRule_PathRegex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule_PathRegex)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule_PathRegex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathRegex != that1.PathRegex {
		return false
	}
	return true
}
func (this *SimpleWafExclusionRule_AppFirewallDetectionControl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule_AppFirewallDetectionControl)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule_AppFirewallDetectionControl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewallDetectionControl.Equal(that1.AppFirewallDetectionControl) {
		return false
	}
	return true
}
func (this *SimpleWafExclusionRule_WafSkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleWafExclusionRule_WafSkipProcessing)
	if !ok {
		that2, ok := that.(SimpleWafExclusionRule_WafSkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafSkipProcessing.Equal(that1.WafSkipProcessing) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.ReNameList) != len(that1.ReNameList) {
		return false
	}
	for i := range this.ReNameList {
		if this.ReNameList[i] != that1.ReNameList[i] {
			return false
		}
	}
	if len(this.CountryCodes) != len(that1.CountryCodes) {
		return false
	}
	for i := range this.CountryCodes {
		if this.CountryCodes[i] != that1.CountryCodes[i] {
			return false
		}
	}
	if that1.SelectorChoice == nil {
		if this.SelectorChoice != nil {
			return false
		}
	} else if this.SelectorChoice == nil {
		return false
	} else if !this.SelectorChoice.Equal(that1.SelectorChoice) {
		return false
	}
	if that1.IpChoice == nil {
		if this.IpChoice != nil {
			return false
		}
	} else if this.IpChoice == nil {
		return false
	} else if !this.IpChoice.Equal(that1.IpChoice) {
		return false
	}
	if that1.AsnChoice == nil {
		if this.AsnChoice != nil {
			return false
		}
	} else if this.AsnChoice == nil {
		return false
	} else if !this.AsnChoice.Equal(that1.AsnChoice) {
		return false
	}
	if !this.BodyMatcher.Equal(that1.BodyMatcher) {
		return false
	}
	if len(this.OriginServerSubsetsAction) != len(that1.OriginServerSubsetsAction) {
		return false
	}
	for i := range this.OriginServerSubsetsAction {
		if this.OriginServerSubsetsAction[i] != that1.OriginServerSubsetsAction[i] {
			return false
		}
	}
	return true
}
func (this *OriginServerSubsetRule_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule_None)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRule_ClientSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule_ClientSelector)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule_ClientSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSelector.Equal(that1.ClientSelector) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRule_AnyIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule_AnyIp)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule_AnyIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyIp.Equal(that1.AnyIp) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRule_IpPrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule_IpPrefixList)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule_IpPrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixList.Equal(that1.IpPrefixList) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRule_IpMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule_IpMatcher)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule_IpMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpMatcher.Equal(that1.IpMatcher) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRule_AnyAsn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule_AnyAsn)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule_AnyAsn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyAsn.Equal(that1.AnyAsn) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRule_AsnList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule_AsnList)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule_AsnList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsnList.Equal(that1.AsnList) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRule_AsnMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRule_AsnMatcher)
	if !ok {
		that2, ok := that.(OriginServerSubsetRule_AsnMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsnMatcher.Equal(that1.AsnMatcher) {
		return false
	}
	return true
}
func (this *SimpleDataGuardRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleDataGuardRule)
	if !ok {
		that2, ok := that.(SimpleDataGuardRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.ActionChoice == nil {
		if this.ActionChoice != nil {
			return false
		}
	} else if this.ActionChoice == nil {
		return false
	} else if !this.ActionChoice.Equal(that1.ActionChoice) {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	return true
}
func (this *SimpleDataGuardRule_ApplyDataGuard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleDataGuardRule_ApplyDataGuard)
	if !ok {
		that2, ok := that.(SimpleDataGuardRule_ApplyDataGuard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplyDataGuard.Equal(that1.ApplyDataGuard) {
		return false
	}
	return true
}
func (this *SimpleDataGuardRule_SkipDataGuard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleDataGuardRule_SkipDataGuard)
	if !ok {
		that2, ok := that.(SimpleDataGuardRule_SkipDataGuard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkipDataGuard.Equal(that1.SkipDataGuard) {
		return false
	}
	return true
}
func (this *SimpleDataGuardRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleDataGuardRule_AnyDomain)
	if !ok {
		that2, ok := that.(SimpleDataGuardRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *SimpleDataGuardRule_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleDataGuardRule_ExactValue)
	if !ok {
		that2, ok := that.(SimpleDataGuardRule_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *SimpleDataGuardRule_SuffixValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleDataGuardRule_SuffixValue)
	if !ok {
		that2, ok := that.(SimpleDataGuardRule_SuffixValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SuffixValue != that1.SuffixValue {
		return false
	}
	return true
}
func (this *GraphQLRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLRule)
	if !ok {
		that2, ok := that.(GraphQLRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if this.ExactPath != that1.ExactPath {
		return false
	}
	if !this.GraphqlSettings.Equal(that1.GraphqlSettings) {
		return false
	}
	if that1.MethodChoice == nil {
		if this.MethodChoice != nil {
			return false
		}
	} else if this.MethodChoice == nil {
		return false
	} else if !this.MethodChoice.Equal(that1.MethodChoice) {
		return false
	}
	return true
}
func (this *GraphQLRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLRule_AnyDomain)
	if !ok {
		that2, ok := that.(GraphQLRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *GraphQLRule_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLRule_ExactValue)
	if !ok {
		that2, ok := that.(GraphQLRule_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *GraphQLRule_SuffixValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLRule_SuffixValue)
	if !ok {
		that2, ok := that.(GraphQLRule_SuffixValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SuffixValue != that1.SuffixValue {
		return false
	}
	return true
}
func (this *GraphQLRule_MethodGet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLRule_MethodGet)
	if !ok {
		that2, ok := that.(GraphQLRule_MethodGet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MethodGet.Equal(that1.MethodGet) {
		return false
	}
	return true
}
func (this *GraphQLRule_MethodPost) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLRule_MethodPost)
	if !ok {
		that2, ok := that.(GraphQLRule_MethodPost)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MethodPost.Equal(that1.MethodPost) {
		return false
	}
	return true
}
func (this *GraphQLSettingsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLSettingsType)
	if !ok {
		that2, ok := that.(GraphQLSettingsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicyName != that1.PolicyName {
		return false
	}
	if this.MaxTotalLength != that1.MaxTotalLength {
		return false
	}
	if this.MaxValueLength != that1.MaxValueLength {
		return false
	}
	if this.MaxDepth != that1.MaxDepth {
		return false
	}
	if this.MaxBatchedQueries != that1.MaxBatchedQueries {
		return false
	}
	if that1.AllowIntrospectionQueriesChoice == nil {
		if this.AllowIntrospectionQueriesChoice != nil {
			return false
		}
	} else if this.AllowIntrospectionQueriesChoice == nil {
		return false
	} else if !this.AllowIntrospectionQueriesChoice.Equal(that1.AllowIntrospectionQueriesChoice) {
		return false
	}
	return true
}
func (this *GraphQLSettingsType_DisableIntrospection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLSettingsType_DisableIntrospection)
	if !ok {
		that2, ok := that.(GraphQLSettingsType_DisableIntrospection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIntrospection.Equal(that1.DisableIntrospection) {
		return false
	}
	return true
}
func (this *GraphQLSettingsType_EnableIntrospection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphQLSettingsType_EnableIntrospection)
	if !ok {
		that2, ok := that.(GraphQLSettingsType_EnableIntrospection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIntrospection.Equal(that1.EnableIntrospection) {
		return false
	}
	return true
}
func (this *OpenApiValidationAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationAction)
	if !ok {
		that2, ok := that.(OpenApiValidationAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestPropertiesSelection) != len(that1.RequestPropertiesSelection) {
		return false
	}
	for i := range this.RequestPropertiesSelection {
		if this.RequestPropertiesSelection[i] != that1.RequestPropertiesSelection[i] {
			return false
		}
	}
	if this.OasValidationAction != that1.OasValidationAction {
		return false
	}
	if len(this.ResponsePropertiesSelection) != len(that1.ResponsePropertiesSelection) {
		return false
	}
	for i := range this.ResponsePropertiesSelection {
		if this.ResponsePropertiesSelection[i] != that1.ResponsePropertiesSelection[i] {
			return false
		}
	}
	if this.OasResponseValidationAction != that1.OasResponseValidationAction {
		return false
	}
	return true
}
func (this *MaskingConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaskingConfig)
	if !ok {
		that2, ok := that.(MaskingConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if this.Fields[i] != that1.Fields[i] {
			return false
		}
	}
	if that1.ActionChoice == nil {
		if this.ActionChoice != nil {
			return false
		}
	} else if this.ActionChoice == nil {
		return false
	} else if !this.ActionChoice.Equal(that1.ActionChoice) {
		return false
	}
	return true
}
func (this *MaskingConfig_Mask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaskingConfig_Mask)
	if !ok {
		that2, ok := that.(MaskingConfig_Mask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mask.Equal(that1.Mask) {
		return false
	}
	return true
}
func (this *MaskingConfig_Report) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaskingConfig_Report)
	if !ok {
		that2, ok := that.(MaskingConfig_Report)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Report.Equal(that1.Report) {
		return false
	}
	return true
}
func (this *DenyInformation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DenyInformation)
	if !ok {
		that2, ok := that.(DenyInformation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResponseCode != that1.ResponseCode {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	if that1.EventType == nil {
		if this.EventType != nil {
			return false
		}
	} else if this.EventType == nil {
		return false
	} else if !this.EventType.Equal(that1.EventType) {
		return false
	}
	return true
}
func (this *DenyInformation_UndefinedSecEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DenyInformation_UndefinedSecEvent)
	if !ok {
		that2, ok := that.(DenyInformation_UndefinedSecEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UndefinedSecEvent.Equal(that1.UndefinedSecEvent) {
		return false
	}
	return true
}
func (this *DenyInformation_ApiSecEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DenyInformation_ApiSecEvent)
	if !ok {
		that2, ok := that.(DenyInformation_ApiSecEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSecEvent.Equal(that1.ApiSecEvent) {
		return false
	}
	return true
}
func (this *TlsFingerprintMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsFingerprintMatcherType)
	if !ok {
		that2, ok := that.(TlsFingerprintMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Classes) != len(that1.Classes) {
		return false
	}
	for i := range this.Classes {
		if this.Classes[i] != that1.Classes[i] {
			return false
		}
	}
	if len(this.ExactValues) != len(that1.ExactValues) {
		return false
	}
	for i := range this.ExactValues {
		if this.ExactValues[i] != that1.ExactValues[i] {
			return false
		}
	}
	if len(this.ExcludedValues) != len(that1.ExcludedValues) {
		return false
	}
	for i := range this.ExcludedValues {
		if this.ExcludedValues[i] != that1.ExcludedValues[i] {
			return false
		}
	}
	return true
}
func (this *JA4TlsFingerprintMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JA4TlsFingerprintMatcherType)
	if !ok {
		that2, ok := that.(JA4TlsFingerprintMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExactValues) != len(that1.ExactValues) {
		return false
	}
	for i := range this.ExactValues {
		if this.ExactValues[i] != that1.ExactValues[i] {
			return false
		}
	}
	return true
}
func (this *PathMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathMatcherType)
	if !ok {
		that2, ok := that.(PathMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PrefixValues) != len(that1.PrefixValues) {
		return false
	}
	for i := range this.PrefixValues {
		if this.PrefixValues[i] != that1.PrefixValues[i] {
			return false
		}
	}
	if len(this.ExactValues) != len(that1.ExactValues) {
		return false
	}
	for i := range this.ExactValues {
		if this.ExactValues[i] != that1.ExactValues[i] {
			return false
		}
	}
	if len(this.RegexValues) != len(that1.RegexValues) {
		return false
	}
	for i := range this.RegexValues {
		if this.RegexValues[i] != that1.RegexValues[i] {
			return false
		}
	}
	if len(this.SuffixValues) != len(that1.SuffixValues) {
		return false
	}
	for i := range this.SuffixValues {
		if this.SuffixValues[i] != that1.SuffixValues[i] {
			return false
		}
	}
	if len(this.Transformers) != len(that1.Transformers) {
		return false
	}
	for i := range this.Transformers {
		if this.Transformers[i] != that1.Transformers[i] {
			return false
		}
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *MatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatcherType)
	if !ok {
		that2, ok := that.(MatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExactValues) != len(that1.ExactValues) {
		return false
	}
	for i := range this.ExactValues {
		if this.ExactValues[i] != that1.ExactValues[i] {
			return false
		}
	}
	if len(this.RegexValues) != len(that1.RegexValues) {
		return false
	}
	for i := range this.RegexValues {
		if this.RegexValues[i] != that1.RegexValues[i] {
			return false
		}
	}
	if len(this.Transformers) != len(that1.Transformers) {
		return false
	}
	for i := range this.Transformers {
		if this.Transformers[i] != that1.Transformers[i] {
			return false
		}
	}
	return true
}
func (this *MatcherTypeBasic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatcherTypeBasic)
	if !ok {
		that2, ok := that.(MatcherTypeBasic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExactValues) != len(that1.ExactValues) {
		return false
	}
	for i := range this.ExactValues {
		if this.ExactValues[i] != that1.ExactValues[i] {
			return false
		}
	}
	if len(this.RegexValues) != len(that1.RegexValues) {
		return false
	}
	for i := range this.RegexValues {
		if this.RegexValues[i] != that1.RegexValues[i] {
			return false
		}
	}
	return true
}
func (this *CookieMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CookieMatcherType)
	if !ok {
		that2, ok := that.(CookieMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Match == nil {
		if this.Match != nil {
			return false
		}
	} else if this.Match == nil {
		return false
	} else if !this.Match.Equal(that1.Match) {
		return false
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *CookieMatcherType_Presence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CookieMatcherType_Presence)
	if !ok {
		that2, ok := that.(CookieMatcherType_Presence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Presence != that1.Presence {
		return false
	}
	return true
}
func (this *CookieMatcherType_CheckPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CookieMatcherType_CheckPresent)
	if !ok {
		that2, ok := that.(CookieMatcherType_CheckPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckPresent.Equal(that1.CheckPresent) {
		return false
	}
	return true
}
func (this *CookieMatcherType_CheckNotPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CookieMatcherType_CheckNotPresent)
	if !ok {
		that2, ok := that.(CookieMatcherType_CheckNotPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckNotPresent.Equal(that1.CheckNotPresent) {
		return false
	}
	return true
}
func (this *CookieMatcherType_Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CookieMatcherType_Item)
	if !ok {
		that2, ok := that.(CookieMatcherType_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *ArgMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArgMatcherType)
	if !ok {
		that2, ok := that.(ArgMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Match == nil {
		if this.Match != nil {
			return false
		}
	} else if this.Match == nil {
		return false
	} else if !this.Match.Equal(that1.Match) {
		return false
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *ArgMatcherType_Presence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArgMatcherType_Presence)
	if !ok {
		that2, ok := that.(ArgMatcherType_Presence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Presence != that1.Presence {
		return false
	}
	return true
}
func (this *ArgMatcherType_CheckPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArgMatcherType_CheckPresent)
	if !ok {
		that2, ok := that.(ArgMatcherType_CheckPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckPresent.Equal(that1.CheckPresent) {
		return false
	}
	return true
}
func (this *ArgMatcherType_CheckNotPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArgMatcherType_CheckNotPresent)
	if !ok {
		that2, ok := that.(ArgMatcherType_CheckNotPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckNotPresent.Equal(that1.CheckNotPresent) {
		return false
	}
	return true
}
func (this *ArgMatcherType_Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArgMatcherType_Item)
	if !ok {
		that2, ok := that.(ArgMatcherType_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *HeaderMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherType)
	if !ok {
		that2, ok := that.(HeaderMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Match == nil {
		if this.Match != nil {
			return false
		}
	} else if this.Match == nil {
		return false
	} else if !this.Match.Equal(that1.Match) {
		return false
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *HeaderMatcherType_Presence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherType_Presence)
	if !ok {
		that2, ok := that.(HeaderMatcherType_Presence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Presence != that1.Presence {
		return false
	}
	return true
}
func (this *HeaderMatcherType_CheckPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherType_CheckPresent)
	if !ok {
		that2, ok := that.(HeaderMatcherType_CheckPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckPresent.Equal(that1.CheckPresent) {
		return false
	}
	return true
}
func (this *HeaderMatcherType_CheckNotPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherType_CheckNotPresent)
	if !ok {
		that2, ok := that.(HeaderMatcherType_CheckNotPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckNotPresent.Equal(that1.CheckNotPresent) {
		return false
	}
	return true
}
func (this *HeaderMatcherType_Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherType_Item)
	if !ok {
		that2, ok := that.(HeaderMatcherType_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *JWTClaimMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWTClaimMatcherType)
	if !ok {
		that2, ok := that.(JWTClaimMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Match == nil {
		if this.Match != nil {
			return false
		}
	} else if this.Match == nil {
		return false
	} else if !this.Match.Equal(that1.Match) {
		return false
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *JWTClaimMatcherType_CheckPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWTClaimMatcherType_CheckPresent)
	if !ok {
		that2, ok := that.(JWTClaimMatcherType_CheckPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckPresent.Equal(that1.CheckPresent) {
		return false
	}
	return true
}
func (this *JWTClaimMatcherType_CheckNotPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWTClaimMatcherType_CheckNotPresent)
	if !ok {
		that2, ok := that.(JWTClaimMatcherType_CheckNotPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckNotPresent.Equal(that1.CheckNotPresent) {
		return false
	}
	return true
}
func (this *JWTClaimMatcherType_Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWTClaimMatcherType_Item)
	if !ok {
		that2, ok := that.(JWTClaimMatcherType_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *HeaderMatcherTypeBasic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherTypeBasic)
	if !ok {
		that2, ok := that.(HeaderMatcherTypeBasic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Match == nil {
		if this.Match != nil {
			return false
		}
	} else if this.Match == nil {
		return false
	} else if !this.Match.Equal(that1.Match) {
		return false
	}
	return true
}
func (this *HeaderMatcherTypeBasic_CheckPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherTypeBasic_CheckPresent)
	if !ok {
		that2, ok := that.(HeaderMatcherTypeBasic_CheckPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckPresent.Equal(that1.CheckPresent) {
		return false
	}
	return true
}
func (this *HeaderMatcherTypeBasic_CheckNotPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherTypeBasic_CheckNotPresent)
	if !ok {
		that2, ok := that.(HeaderMatcherTypeBasic_CheckNotPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckNotPresent.Equal(that1.CheckNotPresent) {
		return false
	}
	return true
}
func (this *HeaderMatcherTypeBasic_Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcherTypeBasic_Item)
	if !ok {
		that2, ok := that.(HeaderMatcherTypeBasic_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *QueryParameterMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParameterMatcherType)
	if !ok {
		that2, ok := that.(QueryParameterMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if that1.Match == nil {
		if this.Match != nil {
			return false
		}
	} else if this.Match == nil {
		return false
	} else if !this.Match.Equal(that1.Match) {
		return false
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *QueryParameterMatcherType_Presence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParameterMatcherType_Presence)
	if !ok {
		that2, ok := that.(QueryParameterMatcherType_Presence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Presence != that1.Presence {
		return false
	}
	return true
}
func (this *QueryParameterMatcherType_CheckPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParameterMatcherType_CheckPresent)
	if !ok {
		that2, ok := that.(QueryParameterMatcherType_CheckPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckPresent.Equal(that1.CheckPresent) {
		return false
	}
	return true
}
func (this *QueryParameterMatcherType_CheckNotPresent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParameterMatcherType_CheckNotPresent)
	if !ok {
		that2, ok := that.(QueryParameterMatcherType_CheckNotPresent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckNotPresent.Equal(that1.CheckNotPresent) {
		return false
	}
	return true
}
func (this *QueryParameterMatcherType_Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParameterMatcherType_Item)
	if !ok {
		that2, ok := that.(QueryParameterMatcherType_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *HttpMethodMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpMethodMatcherType)
	if !ok {
		that2, ok := that.(HttpMethodMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Methods) != len(that1.Methods) {
		return false
	}
	for i := range this.Methods {
		if this.Methods[i] != that1.Methods[i] {
			return false
		}
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *RoleMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleMatcherType)
	if !ok {
		that2, ok := that.(RoleMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Match != that1.Match {
		return false
	}
	return true
}
func (this *StringMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatcherType)
	if !ok {
		that2, ok := that.(StringMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Match) != len(that1.Match) {
		return false
	}
	for i := range this.Match {
		if this.Match[i] != that1.Match[i] {
			return false
		}
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *IpMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IpMatcherType)
	if !ok {
		that2, ok := that.(IpMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PrefixSets) != len(that1.PrefixSets) {
		return false
	}
	for i := range this.PrefixSets {
		if !this.PrefixSets[i].Equal(that1.PrefixSets[i]) {
			return false
		}
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *AsnMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AsnMatcherType)
	if !ok {
		that2, ok := that.(AsnMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AsnSets) != len(that1.AsnSets) {
		return false
	}
	for i := range this.AsnSets {
		if !this.AsnSets[i].Equal(that1.AsnSets[i]) {
			return false
		}
	}
	return true
}
func (this *PortMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortMatcherType)
	if !ok {
		that2, ok := that.(PortMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if this.Ports[i] != that1.Ports[i] {
			return false
		}
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *URLItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLItem)
	if !ok {
		that2, ok := that.(URLItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if that1.PathChoice == nil {
		if this.PathChoice != nil {
			return false
		}
	} else if this.PathChoice == nil {
		return false
	} else if !this.PathChoice.Equal(that1.PathChoice) {
		return false
	}
	return true
}
func (this *URLItem_DomainValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLItem_DomainValue)
	if !ok {
		that2, ok := that.(URLItem_DomainValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainValue != that1.DomainValue {
		return false
	}
	return true
}
func (this *URLItem_DomainRegex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLItem_DomainRegex)
	if !ok {
		that2, ok := that.(URLItem_DomainRegex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainRegex != that1.DomainRegex {
		return false
	}
	return true
}
func (this *URLItem_PathValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLItem_PathValue)
	if !ok {
		that2, ok := that.(URLItem_PathValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathValue != that1.PathValue {
		return false
	}
	return true
}
func (this *URLItem_PathPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLItem_PathPrefix)
	if !ok {
		that2, ok := that.(URLItem_PathPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathPrefix != that1.PathPrefix {
		return false
	}
	return true
}
func (this *URLItem_PathRegex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLItem_PathRegex)
	if !ok {
		that2, ok := that.(URLItem_PathRegex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathRegex != that1.PathRegex {
		return false
	}
	return true
}
func (this *URLMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLMatcherType)
	if !ok {
		that2, ok := that.(URLMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UrlItems) != len(that1.UrlItems) {
		return false
	}
	for i := range this.UrlItems {
		if !this.UrlItems[i].Equal(that1.UrlItems[i]) {
			return false
		}
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *L4DestMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*L4DestMatcherType)
	if !ok {
		that2, ok := that.(L4DestMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.L4Dests) != len(that1.L4Dests) {
		return false
	}
	for i := range this.L4Dests {
		if !this.L4Dests[i].Equal(that1.L4Dests[i]) {
			return false
		}
	}
	if this.InvertMatcher != that1.InvertMatcher {
		return false
	}
	return true
}
func (this *CountryCodeList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountryCodeList)
	if !ok {
		that2, ok := that.(CountryCodeList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CountryCodes) != len(that1.CountryCodes) {
		return false
	}
	for i := range this.CountryCodes {
		if this.CountryCodes[i] != that1.CountryCodes[i] {
			return false
		}
	}
	if this.InvertMatch != that1.InvertMatch {
		return false
	}
	return true
}
func (this *HttpHeaderName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHeaderName)
	if !ok {
		that2, ok := that.(HttpHeaderName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *HttpCookieName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpCookieName)
	if !ok {
		that2, ok := that.(HttpCookieName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *HttpQueryParameterName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpQueryParameterName)
	if !ok {
		that2, ok := that.(HttpQueryParameterName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *JwtTokenAuthOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JwtTokenAuthOptions)
	if !ok {
		that2, ok := that.(JwtTokenAuthOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SecretKey.Equal(that1.SecretKey) {
		return false
	}
	if that1.TokenSource == nil {
		if this.TokenSource != nil {
			return false
		}
	} else if this.TokenSource == nil {
		return false
	} else if !this.TokenSource.Equal(that1.TokenSource) {
		return false
	}
	if !this.BackupKey.Equal(that1.BackupKey) {
		return false
	}
	return true
}
func (this *JwtTokenAuthOptions_Header) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JwtTokenAuthOptions_Header)
	if !ok {
		that2, ok := that.(JwtTokenAuthOptions_Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *JwtTokenAuthOptions_Cookie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JwtTokenAuthOptions_Cookie)
	if !ok {
		that2, ok := that.(JwtTokenAuthOptions_Cookie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cookie.Equal(that1.Cookie) {
		return false
	}
	return true
}
func (this *JwtTokenAuthOptions_QueryParam) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JwtTokenAuthOptions_QueryParam)
	if !ok {
		that2, ok := that.(JwtTokenAuthOptions_QueryParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryParam.Equal(that1.QueryParam) {
		return false
	}
	return true
}
func (this *JwtTokenAuthOptions_BearerToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JwtTokenAuthOptions_BearerToken)
	if !ok {
		that2, ok := that.(JwtTokenAuthOptions_BearerToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BearerToken.Equal(that1.BearerToken) {
		return false
	}
	return true
}
func (this *IPThreatCategoryListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPThreatCategoryListType)
	if !ok {
		that2, ok := that.(IPThreatCategoryListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IpThreatCategories) != len(that1.IpThreatCategories) {
		return false
	}
	for i := range this.IpThreatCategories {
		if this.IpThreatCategories[i] != that1.IpThreatCategories[i] {
			return false
		}
	}
	return true
}
func (this *ClientMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher)
	if !ok {
		that2, ok := that.(ClientMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ClientChoice == nil {
		if this.ClientChoice != nil {
			return false
		}
	} else if this.ClientChoice == nil {
		return false
	} else if !this.ClientChoice.Equal(that1.ClientChoice) {
		return false
	}
	if that1.IpAsnChoice == nil {
		if this.IpAsnChoice != nil {
			return false
		}
	} else if this.IpAsnChoice == nil {
		return false
	} else if !this.IpAsnChoice.Equal(that1.IpAsnChoice) {
		return false
	}
	if !this.TlsFingerprintMatcher.Equal(that1.TlsFingerprintMatcher) {
		return false
	}
	return true
}
func (this *ClientMatcher_AnyClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher_AnyClient)
	if !ok {
		that2, ok := that.(ClientMatcher_AnyClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyClient.Equal(that1.AnyClient) {
		return false
	}
	return true
}
func (this *ClientMatcher_IpThreatCategoryList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher_IpThreatCategoryList)
	if !ok {
		that2, ok := that.(ClientMatcher_IpThreatCategoryList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpThreatCategoryList.Equal(that1.IpThreatCategoryList) {
		return false
	}
	return true
}
func (this *ClientMatcher_ClientSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher_ClientSelector)
	if !ok {
		that2, ok := that.(ClientMatcher_ClientSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSelector.Equal(that1.ClientSelector) {
		return false
	}
	return true
}
func (this *ClientMatcher_AnyIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher_AnyIp)
	if !ok {
		that2, ok := that.(ClientMatcher_AnyIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyIp.Equal(that1.AnyIp) {
		return false
	}
	return true
}
func (this *ClientMatcher_IpPrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher_IpPrefixList)
	if !ok {
		that2, ok := that.(ClientMatcher_IpPrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixList.Equal(that1.IpPrefixList) {
		return false
	}
	return true
}
func (this *ClientMatcher_IpMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher_IpMatcher)
	if !ok {
		that2, ok := that.(ClientMatcher_IpMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpMatcher.Equal(that1.IpMatcher) {
		return false
	}
	return true
}
func (this *ClientMatcher_AsnList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher_AsnList)
	if !ok {
		that2, ok := that.(ClientMatcher_AsnList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsnList.Equal(that1.AsnList) {
		return false
	}
	return true
}
func (this *ClientMatcher_AsnMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMatcher_AsnMatcher)
	if !ok {
		that2, ok := that.(ClientMatcher_AsnMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsnMatcher.Equal(that1.AsnMatcher) {
		return false
	}
	return true
}
func (this *RequestMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMatcher)
	if !ok {
		that2, ok := that.(RequestMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.QueryParams) != len(that1.QueryParams) {
		return false
	}
	for i := range this.QueryParams {
		if !this.QueryParams[i].Equal(that1.QueryParams[i]) {
			return false
		}
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if len(this.JwtClaims) != len(that1.JwtClaims) {
		return false
	}
	for i := range this.JwtClaims {
		if !this.JwtClaims[i].Equal(that1.JwtClaims[i]) {
			return false
		}
	}
	if len(this.CookieMatchers) != len(that1.CookieMatchers) {
		return false
	}
	for i := range this.CookieMatchers {
		if !this.CookieMatchers[i].Equal(that1.CookieMatchers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestConstraintType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType)
	if !ok {
		that2, ok := that.(RequestConstraintType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MaxCookieCountChoice == nil {
		if this.MaxCookieCountChoice != nil {
			return false
		}
	} else if this.MaxCookieCountChoice == nil {
		return false
	} else if !this.MaxCookieCountChoice.Equal(that1.MaxCookieCountChoice) {
		return false
	}
	if that1.MaxCookieKeySizeChoice == nil {
		if this.MaxCookieKeySizeChoice != nil {
			return false
		}
	} else if this.MaxCookieKeySizeChoice == nil {
		return false
	} else if !this.MaxCookieKeySizeChoice.Equal(that1.MaxCookieKeySizeChoice) {
		return false
	}
	if that1.MaxCookieValueSizeChoice == nil {
		if this.MaxCookieValueSizeChoice != nil {
			return false
		}
	} else if this.MaxCookieValueSizeChoice == nil {
		return false
	} else if !this.MaxCookieValueSizeChoice.Equal(that1.MaxCookieValueSizeChoice) {
		return false
	}
	if that1.MaxHeaderCountChoice == nil {
		if this.MaxHeaderCountChoice != nil {
			return false
		}
	} else if this.MaxHeaderCountChoice == nil {
		return false
	} else if !this.MaxHeaderCountChoice.Equal(that1.MaxHeaderCountChoice) {
		return false
	}
	if that1.MaxHeaderKeySizeChoice == nil {
		if this.MaxHeaderKeySizeChoice != nil {
			return false
		}
	} else if this.MaxHeaderKeySizeChoice == nil {
		return false
	} else if !this.MaxHeaderKeySizeChoice.Equal(that1.MaxHeaderKeySizeChoice) {
		return false
	}
	if that1.MaxHeaderValueSizeChoice == nil {
		if this.MaxHeaderValueSizeChoice != nil {
			return false
		}
	} else if this.MaxHeaderValueSizeChoice == nil {
		return false
	} else if !this.MaxHeaderValueSizeChoice.Equal(that1.MaxHeaderValueSizeChoice) {
		return false
	}
	if that1.MaxUrlSizeChoice == nil {
		if this.MaxUrlSizeChoice != nil {
			return false
		}
	} else if this.MaxUrlSizeChoice == nil {
		return false
	} else if !this.MaxUrlSizeChoice.Equal(that1.MaxUrlSizeChoice) {
		return false
	}
	if that1.MaxQuerySizeChoice == nil {
		if this.MaxQuerySizeChoice != nil {
			return false
		}
	} else if this.MaxQuerySizeChoice == nil {
		return false
	} else if !this.MaxQuerySizeChoice.Equal(that1.MaxQuerySizeChoice) {
		return false
	}
	if that1.MaxRequestLineSizeChoice == nil {
		if this.MaxRequestLineSizeChoice != nil {
			return false
		}
	} else if this.MaxRequestLineSizeChoice == nil {
		return false
	} else if !this.MaxRequestLineSizeChoice.Equal(that1.MaxRequestLineSizeChoice) {
		return false
	}
	if that1.MaxRequestSizeChoice == nil {
		if this.MaxRequestSizeChoice != nil {
			return false
		}
	} else if this.MaxRequestSizeChoice == nil {
		return false
	} else if !this.MaxRequestSizeChoice.Equal(that1.MaxRequestSizeChoice) {
		return false
	}
	if that1.MaxParameterCountChoice == nil {
		if this.MaxParameterCountChoice != nil {
			return false
		}
	} else if this.MaxParameterCountChoice == nil {
		return false
	} else if !this.MaxParameterCountChoice.Equal(that1.MaxParameterCountChoice) {
		return false
	}
	if that1.MaxParameterNameSizeChoice == nil {
		if this.MaxParameterNameSizeChoice != nil {
			return false
		}
	} else if this.MaxParameterNameSizeChoice == nil {
		return false
	} else if !this.MaxParameterNameSizeChoice.Equal(that1.MaxParameterNameSizeChoice) {
		return false
	}
	if that1.MaxParameterValueSizeChoice == nil {
		if this.MaxParameterValueSizeChoice != nil {
			return false
		}
	} else if this.MaxParameterValueSizeChoice == nil {
		return false
	} else if !this.MaxParameterValueSizeChoice.Equal(that1.MaxParameterValueSizeChoice) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxCookieCountNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxCookieCountNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxCookieCountNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxCookieCountNone.Equal(that1.MaxCookieCountNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxCookieCountExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxCookieCountExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxCookieCountExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxCookieCountExceeds != that1.MaxCookieCountExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxCookieKeySizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxCookieKeySizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxCookieKeySizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxCookieKeySizeNone.Equal(that1.MaxCookieKeySizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxCookieKeySizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxCookieKeySizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxCookieKeySizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxCookieKeySizeExceeds != that1.MaxCookieKeySizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxCookieValueSizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxCookieValueSizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxCookieValueSizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxCookieValueSizeNone.Equal(that1.MaxCookieValueSizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxCookieValueSizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxCookieValueSizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxCookieValueSizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxCookieValueSizeExceeds != that1.MaxCookieValueSizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxHeaderCountNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxHeaderCountNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxHeaderCountNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxHeaderCountNone.Equal(that1.MaxHeaderCountNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxHeaderCountExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxHeaderCountExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxHeaderCountExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxHeaderCountExceeds != that1.MaxHeaderCountExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxHeaderKeySizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxHeaderKeySizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxHeaderKeySizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxHeaderKeySizeNone.Equal(that1.MaxHeaderKeySizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxHeaderKeySizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxHeaderKeySizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxHeaderKeySizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxHeaderKeySizeExceeds != that1.MaxHeaderKeySizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxHeaderValueSizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxHeaderValueSizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxHeaderValueSizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxHeaderValueSizeNone.Equal(that1.MaxHeaderValueSizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxHeaderValueSizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxHeaderValueSizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxHeaderValueSizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxHeaderValueSizeExceeds != that1.MaxHeaderValueSizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxUrlSizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxUrlSizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxUrlSizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxUrlSizeNone.Equal(that1.MaxUrlSizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxUrlSizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxUrlSizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxUrlSizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxUrlSizeExceeds != that1.MaxUrlSizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxQuerySizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxQuerySizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxQuerySizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxQuerySizeNone.Equal(that1.MaxQuerySizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxQuerySizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxQuerySizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxQuerySizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxQuerySizeExceeds != that1.MaxQuerySizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxRequestLineSizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxRequestLineSizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxRequestLineSizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxRequestLineSizeNone.Equal(that1.MaxRequestLineSizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxRequestLineSizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxRequestLineSizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxRequestLineSizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRequestLineSizeExceeds != that1.MaxRequestLineSizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxRequestSizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxRequestSizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxRequestSizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxRequestSizeNone.Equal(that1.MaxRequestSizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxRequestSizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxRequestSizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxRequestSizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRequestSizeExceeds != that1.MaxRequestSizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxParameterCountNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxParameterCountNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxParameterCountNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxParameterCountNone.Equal(that1.MaxParameterCountNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxParameterCountExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxParameterCountExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxParameterCountExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxParameterCountExceeds != that1.MaxParameterCountExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxParameterNameSizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxParameterNameSizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxParameterNameSizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxParameterNameSizeNone.Equal(that1.MaxParameterNameSizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxParameterNameSizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxParameterNameSizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxParameterNameSizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxParameterNameSizeExceeds != that1.MaxParameterNameSizeExceeds {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxParameterValueSizeNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxParameterValueSizeNone)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxParameterValueSizeNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxParameterValueSizeNone.Equal(that1.MaxParameterValueSizeNone) {
		return false
	}
	return true
}
func (this *RequestConstraintType_MaxParameterValueSizeExceeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestConstraintType_MaxParameterValueSizeExceeds)
	if !ok {
		that2, ok := that.(RequestConstraintType_MaxParameterValueSizeExceeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxParameterValueSizeExceeds != that1.MaxParameterValueSizeExceeds {
		return false
	}
	return true
}
func (this *ActiveEnhancedFirewallPoliciesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActiveEnhancedFirewallPoliciesType)
	if !ok {
		that2, ok := that.(ActiveEnhancedFirewallPoliciesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EnhancedFirewallPolicies) != len(that1.EnhancedFirewallPolicies) {
		return false
	}
	for i := range this.EnhancedFirewallPolicies {
		if !this.EnhancedFirewallPolicies[i].Equal(that1.EnhancedFirewallPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *ActiveServicePoliciesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActiveServicePoliciesType)
	if !ok {
		that2, ok := that.(ActiveServicePoliciesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ServicePolicies) != len(that1.ServicePolicies) {
		return false
	}
	for i := range this.ServicePolicies {
		if !this.ServicePolicies[i].Equal(that1.ServicePolicies[i]) {
			return false
		}
	}
	return true
}
func (this *ActiveForwardProxyPoliciesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActiveForwardProxyPoliciesType)
	if !ok {
		that2, ok := that.(ActiveForwardProxyPoliciesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ForwardProxyPolicies) != len(that1.ForwardProxyPolicies) {
		return false
	}
	for i := range this.ForwardProxyPolicies {
		if !this.ForwardProxyPolicies[i].Equal(that1.ForwardProxyPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityPoliciesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityPoliciesType)
	if !ok {
		that2, ok := that.(SecurityPoliciesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.FirewallPolicyChoice == nil {
		if this.FirewallPolicyChoice != nil {
			return false
		}
	} else if this.FirewallPolicyChoice == nil {
		return false
	} else if !this.FirewallPolicyChoice.Equal(that1.FirewallPolicyChoice) {
		return false
	}
	return true
}
func (this *SecurityPoliciesType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityPoliciesType_NoForwardProxy)
	if !ok {
		that2, ok := that.(SecurityPoliciesType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *SecurityPoliciesType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityPoliciesType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(SecurityPoliciesType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *SecurityPoliciesType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityPoliciesType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(SecurityPoliciesType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *SecurityPoliciesType_NoFirewallPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityPoliciesType_NoFirewallPolicy)
	if !ok {
		that2, ok := that.(SecurityPoliciesType_NoFirewallPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoFirewallPolicy.Equal(that1.NoFirewallPolicy) {
		return false
	}
	return true
}
func (this *SecurityPoliciesType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityPoliciesType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(SecurityPoliciesType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *SegmentPolicyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentPolicyType)
	if !ok {
		that2, ok := that.(SegmentPolicyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SrcSegmentChoice == nil {
		if this.SrcSegmentChoice != nil {
			return false
		}
	} else if this.SrcSegmentChoice == nil {
		return false
	} else if !this.SrcSegmentChoice.Equal(that1.SrcSegmentChoice) {
		return false
	}
	if that1.DstSegmentChoice == nil {
		if this.DstSegmentChoice != nil {
			return false
		}
	} else if this.DstSegmentChoice == nil {
		return false
	} else if !this.DstSegmentChoice.Equal(that1.DstSegmentChoice) {
		return false
	}
	return true
}
func (this *SegmentPolicyType_SrcAny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentPolicyType_SrcAny)
	if !ok {
		that2, ok := that.(SegmentPolicyType_SrcAny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SrcAny.Equal(that1.SrcAny) {
		return false
	}
	return true
}
func (this *SegmentPolicyType_SrcSegments) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentPolicyType_SrcSegments)
	if !ok {
		that2, ok := that.(SegmentPolicyType_SrcSegments)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SrcSegments.Equal(that1.SrcSegments) {
		return false
	}
	return true
}
func (this *SegmentPolicyType_DstAny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentPolicyType_DstAny)
	if !ok {
		that2, ok := that.(SegmentPolicyType_DstAny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstAny.Equal(that1.DstAny) {
		return false
	}
	return true
}
func (this *SegmentPolicyType_IntraSegment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentPolicyType_IntraSegment)
	if !ok {
		that2, ok := that.(SegmentPolicyType_IntraSegment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IntraSegment.Equal(that1.IntraSegment) {
		return false
	}
	return true
}
func (this *SegmentPolicyType_DstSegments) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentPolicyType_DstSegments)
	if !ok {
		that2, ok := that.(SegmentPolicyType_DstSegments)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstSegments.Equal(that1.DstSegments) {
		return false
	}
	return true
}
func (this *MalwareProtectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MalwareProtectionSettings)
	if !ok {
		that2, ok := that.(MalwareProtectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	return true
}
func (this *AppFirewallViolationContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&policy.AppFirewallViolationContext{")
	s = append(s, "ExcludeViolation: "+fmt.Sprintf("%#v", this.ExcludeViolation)+",\n")
	s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	s = append(s, "ContextName: "+fmt.Sprintf("%#v", this.ContextName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppFirewallSignatureContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&policy.AppFirewallSignatureContext{")
	s = append(s, "SignatureId: "+fmt.Sprintf("%#v", this.SignatureId)+",\n")
	s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	s = append(s, "ContextName: "+fmt.Sprintf("%#v", this.ContextName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppFirewallAttackTypeContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&policy.AppFirewallAttackTypeContext{")
	s = append(s, "ExcludeAttackType: "+fmt.Sprintf("%#v", this.ExcludeAttackType)+",\n")
	s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	s = append(s, "ContextName: "+fmt.Sprintf("%#v", this.ContextName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotNameContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.BotNameContext{")
	s = append(s, "BotName: "+fmt.Sprintf("%#v", this.BotName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppFirewallDetectionControl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policy.AppFirewallDetectionControl{")
	if this.ExcludeSignatureContexts != nil {
		s = append(s, "ExcludeSignatureContexts: "+fmt.Sprintf("%#v", this.ExcludeSignatureContexts)+",\n")
	}
	if this.ExcludeViolationContexts != nil {
		s = append(s, "ExcludeViolationContexts: "+fmt.Sprintf("%#v", this.ExcludeViolationContexts)+",\n")
	}
	if this.ExcludeAttackTypeContexts != nil {
		s = append(s, "ExcludeAttackTypeContexts: "+fmt.Sprintf("%#v", this.ExcludeAttackTypeContexts)+",\n")
	}
	if this.ExcludeBotNameContexts != nil {
		s = append(s, "ExcludeBotNameContexts: "+fmt.Sprintf("%#v", this.ExcludeBotNameContexts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataGuardControl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.DataGuardControl{")
	s = append(s, "PolicyName: "+fmt.Sprintf("%#v", this.PolicyName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.BotAction{")
	if this.ActionType != nil {
		s = append(s, "ActionType: "+fmt.Sprintf("%#v", this.ActionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotAction_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.BotAction_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *BotAction_BotSkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.BotAction_BotSkipProcessing{` +
		`BotSkipProcessing:` + fmt.Sprintf("%#v", this.BotSkipProcessing) + `}`}, ", ")
	return s
}
func (this *ModifyAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.ModifyAction{")
	if this.ActionType != nil {
		s = append(s, "ActionType: "+fmt.Sprintf("%#v", this.ActionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModifyAction_Default) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ModifyAction_Default{` +
		`Default:` + fmt.Sprintf("%#v", this.Default) + `}`}, ", ")
	return s
}
func (this *ModifyAction_SkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ModifyAction_SkipProcessing{` +
		`SkipProcessing:` + fmt.Sprintf("%#v", this.SkipProcessing) + `}`}, ", ")
	return s
}
func (this *WafAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&policy.WafAction{")
	if this.ActionType != nil {
		s = append(s, "ActionType: "+fmt.Sprintf("%#v", this.ActionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WafAction_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.WafAction_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *WafAction_WafSkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.WafAction_WafSkipProcessing{` +
		`WafSkipProcessing:` + fmt.Sprintf("%#v", this.WafSkipProcessing) + `}`}, ", ")
	return s
}
func (this *WafAction_WafInMonitoringMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.WafAction_WafInMonitoringMode{` +
		`WafInMonitoringMode:` + fmt.Sprintf("%#v", this.WafInMonitoringMode) + `}`}, ", ")
	return s
}
func (this *WafAction_AppFirewallDetectionControl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.WafAction_AppFirewallDetectionControl{` +
		`AppFirewallDetectionControl:` + fmt.Sprintf("%#v", this.AppFirewallDetectionControl) + `}`}, ", ")
	return s
}
func (this *WafAction_DataGuardControl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.WafAction_DataGuardControl{` +
		`DataGuardControl:` + fmt.Sprintf("%#v", this.DataGuardControl) + `}`}, ", ")
	return s
}
func (this *WafAction_JwtValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.WafAction_JwtValidation{` +
		`JwtValidation:` + fmt.Sprintf("%#v", this.JwtValidation) + `}`}, ", ")
	return s
}
func (this *WafAction_JwtClaimsValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.WafAction_JwtClaimsValidation{` +
		`JwtClaimsValidation:` + fmt.Sprintf("%#v", this.JwtClaimsValidation) + `}`}, ", ")
	return s
}
func (this *ContentRewriteAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policy.ContentRewriteAction{")
	s = append(s, "InsertContent: "+fmt.Sprintf("%#v", this.InsertContent)+",\n")
	s = append(s, "ElementSelector: "+fmt.Sprintf("%#v", this.ElementSelector)+",\n")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	keysForInsertedTypes := make([]string, 0, len(this.InsertedTypes))
	for k, _ := range this.InsertedTypes {
		keysForInsertedTypes = append(keysForInsertedTypes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInsertedTypes)
	mapStringForInsertedTypes := "map[string]bool{"
	for _, k := range keysForInsertedTypes {
		mapStringForInsertedTypes += fmt.Sprintf("%#v: %#v,", k, this.InsertedTypes[k])
	}
	mapStringForInsertedTypes += "}"
	if this.InsertedTypes != nil {
		s = append(s, "InsertedTypes: "+mapStringForInsertedTypes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeProtectedEndpointAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&policy.ShapeProtectedEndpointAction{")
	s = append(s, "AppTrafficType: "+fmt.Sprintf("%#v", this.AppTrafficType)+",\n")
	if this.Mitigation != nil {
		s = append(s, "Mitigation: "+fmt.Sprintf("%#v", this.Mitigation)+",\n")
	}
	s = append(s, "WebScraping: "+fmt.Sprintf("%#v", this.WebScraping)+",\n")
	s = append(s, "FlowLabel: "+fmt.Sprintf("%#v", this.FlowLabel)+",\n")
	if this.TransactionResult != nil {
		s = append(s, "TransactionResult: "+fmt.Sprintf("%#v", this.TransactionResult)+",\n")
	}
	s = append(s, "AllowGoodbot: "+fmt.Sprintf("%#v", this.AllowGoodbot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotMitigationAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policy.ShapeBotMitigationAction{")
	if this.ActionType != nil {
		s = append(s, "ActionType: "+fmt.Sprintf("%#v", this.ActionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotMitigationAction_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ShapeBotMitigationAction_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *ShapeBotMitigationAction_Block) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ShapeBotMitigationAction_Block{` +
		`Block:` + fmt.Sprintf("%#v", this.Block) + `}`}, ", ")
	return s
}
func (this *ShapeBotMitigationAction_Redirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ShapeBotMitigationAction_Redirect{` +
		`Redirect:` + fmt.Sprintf("%#v", this.Redirect) + `}`}, ", ")
	return s
}
func (this *ShapeBotMitigationAction_Flag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ShapeBotMitigationAction_Flag{` +
		`Flag:` + fmt.Sprintf("%#v", this.Flag) + `}`}, ", ")
	return s
}
func (this *ShapeBotFlagMitigationActionChoiceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.ShapeBotFlagMitigationActionChoiceType{")
	if this.SendHeadersChoice != nil {
		s = append(s, "SendHeadersChoice: "+fmt.Sprintf("%#v", this.SendHeadersChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotFlagMitigationActionChoiceType_NoHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ShapeBotFlagMitigationActionChoiceType_NoHeaders{` +
		`NoHeaders:` + fmt.Sprintf("%#v", this.NoHeaders) + `}`}, ", ")
	return s
}
func (this *ShapeBotFlagMitigationActionChoiceType_AppendHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ShapeBotFlagMitigationActionChoiceType_AppendHeaders{` +
		`AppendHeaders:` + fmt.Sprintf("%#v", this.AppendHeaders) + `}`}, ", ")
	return s
}
func (this *ShapeBotFlagMitigationActionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.ShapeBotFlagMitigationActionType{")
	s = append(s, "InferenceHeaderName: "+fmt.Sprintf("%#v", this.InferenceHeaderName)+",\n")
	s = append(s, "AutoTypeHeaderName: "+fmt.Sprintf("%#v", this.AutoTypeHeaderName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotBlockMitigationActionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&policy.ShapeBotBlockMitigationActionType{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "BodyHash: "+fmt.Sprintf("%#v", this.BodyHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotRedirectMitigationActionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.ShapeBotRedirectMitigationActionType{")
	s = append(s, "Uri: "+fmt.Sprintf("%#v", this.Uri)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrefixMatchList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&policy.PrefixMatchList{")
	s = append(s, "IpPrefixes: "+fmt.Sprintf("%#v", this.IpPrefixes)+",\n")
	s = append(s, "Ipv6Prefixes: "+fmt.Sprintf("%#v", this.Ipv6Prefixes)+",\n")
	s = append(s, "InvertMatch: "+fmt.Sprintf("%#v", this.InvertMatch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AsnMatchList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.AsnMatchList{")
	s = append(s, "AsNumbers: "+fmt.Sprintf("%#v", this.AsNumbers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleWafExclusionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&policy.SimpleWafExclusionRule{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	if this.PathChoice != nil {
		s = append(s, "PathChoice: "+fmt.Sprintf("%#v", this.PathChoice)+",\n")
	}
	s = append(s, "Methods: "+fmt.Sprintf("%#v", this.Methods)+",\n")
	if this.ExpirationTimestamp != nil {
		s = append(s, "ExpirationTimestamp: "+fmt.Sprintf("%#v", this.ExpirationTimestamp)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.WafAdvancedConfiguration != nil {
		s = append(s, "WafAdvancedConfiguration: "+fmt.Sprintf("%#v", this.WafAdvancedConfiguration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleWafExclusionRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleWafExclusionRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *SimpleWafExclusionRule_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleWafExclusionRule_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *SimpleWafExclusionRule_SuffixValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleWafExclusionRule_SuffixValue{` +
		`SuffixValue:` + fmt.Sprintf("%#v", this.SuffixValue) + `}`}, ", ")
	return s
}
func (this *SimpleWafExclusionRule_AnyPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleWafExclusionRule_AnyPath{` +
		`AnyPath:` + fmt.Sprintf("%#v", this.AnyPath) + `}`}, ", ")
	return s
}
func (this *SimpleWafExclusionRule_PathPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleWafExclusionRule_PathPrefix{` +
		`PathPrefix:` + fmt.Sprintf("%#v", this.PathPrefix) + `}`}, ", ")
	return s
}
func (this *SimpleWafExclusionRule_PathRegex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleWafExclusionRule_PathRegex{` +
		`PathRegex:` + fmt.Sprintf("%#v", this.PathRegex) + `}`}, ", ")
	return s
}
func (this *SimpleWafExclusionRule_AppFirewallDetectionControl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleWafExclusionRule_AppFirewallDetectionControl{` +
		`AppFirewallDetectionControl:` + fmt.Sprintf("%#v", this.AppFirewallDetectionControl) + `}`}, ", ")
	return s
}
func (this *SimpleWafExclusionRule_WafSkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleWafExclusionRule_WafSkipProcessing{` +
		`WafSkipProcessing:` + fmt.Sprintf("%#v", this.WafSkipProcessing) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&policy.OriginServerSubsetRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "ReNameList: "+fmt.Sprintf("%#v", this.ReNameList)+",\n")
	s = append(s, "CountryCodes: "+fmt.Sprintf("%#v", this.CountryCodes)+",\n")
	if this.SelectorChoice != nil {
		s = append(s, "SelectorChoice: "+fmt.Sprintf("%#v", this.SelectorChoice)+",\n")
	}
	if this.IpChoice != nil {
		s = append(s, "IpChoice: "+fmt.Sprintf("%#v", this.IpChoice)+",\n")
	}
	if this.AsnChoice != nil {
		s = append(s, "AsnChoice: "+fmt.Sprintf("%#v", this.AsnChoice)+",\n")
	}
	if this.BodyMatcher != nil {
		s = append(s, "BodyMatcher: "+fmt.Sprintf("%#v", this.BodyMatcher)+",\n")
	}
	keysForOriginServerSubsetsAction := make([]string, 0, len(this.OriginServerSubsetsAction))
	for k, _ := range this.OriginServerSubsetsAction {
		keysForOriginServerSubsetsAction = append(keysForOriginServerSubsetsAction, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOriginServerSubsetsAction)
	mapStringForOriginServerSubsetsAction := "map[string]string{"
	for _, k := range keysForOriginServerSubsetsAction {
		mapStringForOriginServerSubsetsAction += fmt.Sprintf("%#v: %#v,", k, this.OriginServerSubsetsAction[k])
	}
	mapStringForOriginServerSubsetsAction += "}"
	if this.OriginServerSubsetsAction != nil {
		s = append(s, "OriginServerSubsetsAction: "+mapStringForOriginServerSubsetsAction+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerSubsetRule_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.OriginServerSubsetRule_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRule_ClientSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.OriginServerSubsetRule_ClientSelector{` +
		`ClientSelector:` + fmt.Sprintf("%#v", this.ClientSelector) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRule_AnyIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.OriginServerSubsetRule_AnyIp{` +
		`AnyIp:` + fmt.Sprintf("%#v", this.AnyIp) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRule_IpPrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.OriginServerSubsetRule_IpPrefixList{` +
		`IpPrefixList:` + fmt.Sprintf("%#v", this.IpPrefixList) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRule_IpMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.OriginServerSubsetRule_IpMatcher{` +
		`IpMatcher:` + fmt.Sprintf("%#v", this.IpMatcher) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRule_AnyAsn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.OriginServerSubsetRule_AnyAsn{` +
		`AnyAsn:` + fmt.Sprintf("%#v", this.AnyAsn) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRule_AsnList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.OriginServerSubsetRule_AsnList{` +
		`AsnList:` + fmt.Sprintf("%#v", this.AsnList) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRule_AsnMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.OriginServerSubsetRule_AsnMatcher{` +
		`AsnMatcher:` + fmt.Sprintf("%#v", this.AsnMatcher) + `}`}, ", ")
	return s
}
func (this *SimpleDataGuardRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&policy.SimpleDataGuardRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ActionChoice != nil {
		s = append(s, "ActionChoice: "+fmt.Sprintf("%#v", this.ActionChoice)+",\n")
	}
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleDataGuardRule_ApplyDataGuard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleDataGuardRule_ApplyDataGuard{` +
		`ApplyDataGuard:` + fmt.Sprintf("%#v", this.ApplyDataGuard) + `}`}, ", ")
	return s
}
func (this *SimpleDataGuardRule_SkipDataGuard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleDataGuardRule_SkipDataGuard{` +
		`SkipDataGuard:` + fmt.Sprintf("%#v", this.SkipDataGuard) + `}`}, ", ")
	return s
}
func (this *SimpleDataGuardRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleDataGuardRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *SimpleDataGuardRule_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleDataGuardRule_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *SimpleDataGuardRule_SuffixValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SimpleDataGuardRule_SuffixValue{` +
		`SuffixValue:` + fmt.Sprintf("%#v", this.SuffixValue) + `}`}, ", ")
	return s
}
func (this *GraphQLRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&policy.GraphQLRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	s = append(s, "ExactPath: "+fmt.Sprintf("%#v", this.ExactPath)+",\n")
	if this.GraphqlSettings != nil {
		s = append(s, "GraphqlSettings: "+fmt.Sprintf("%#v", this.GraphqlSettings)+",\n")
	}
	if this.MethodChoice != nil {
		s = append(s, "MethodChoice: "+fmt.Sprintf("%#v", this.MethodChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphQLRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.GraphQLRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *GraphQLRule_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.GraphQLRule_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *GraphQLRule_SuffixValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.GraphQLRule_SuffixValue{` +
		`SuffixValue:` + fmt.Sprintf("%#v", this.SuffixValue) + `}`}, ", ")
	return s
}
func (this *GraphQLRule_MethodGet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.GraphQLRule_MethodGet{` +
		`MethodGet:` + fmt.Sprintf("%#v", this.MethodGet) + `}`}, ", ")
	return s
}
func (this *GraphQLRule_MethodPost) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.GraphQLRule_MethodPost{` +
		`MethodPost:` + fmt.Sprintf("%#v", this.MethodPost) + `}`}, ", ")
	return s
}
func (this *GraphQLSettingsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&policy.GraphQLSettingsType{")
	s = append(s, "PolicyName: "+fmt.Sprintf("%#v", this.PolicyName)+",\n")
	s = append(s, "MaxTotalLength: "+fmt.Sprintf("%#v", this.MaxTotalLength)+",\n")
	s = append(s, "MaxValueLength: "+fmt.Sprintf("%#v", this.MaxValueLength)+",\n")
	s = append(s, "MaxDepth: "+fmt.Sprintf("%#v", this.MaxDepth)+",\n")
	s = append(s, "MaxBatchedQueries: "+fmt.Sprintf("%#v", this.MaxBatchedQueries)+",\n")
	if this.AllowIntrospectionQueriesChoice != nil {
		s = append(s, "AllowIntrospectionQueriesChoice: "+fmt.Sprintf("%#v", this.AllowIntrospectionQueriesChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphQLSettingsType_DisableIntrospection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.GraphQLSettingsType_DisableIntrospection{` +
		`DisableIntrospection:` + fmt.Sprintf("%#v", this.DisableIntrospection) + `}`}, ", ")
	return s
}
func (this *GraphQLSettingsType_EnableIntrospection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.GraphQLSettingsType_EnableIntrospection{` +
		`EnableIntrospection:` + fmt.Sprintf("%#v", this.EnableIntrospection) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policy.OpenApiValidationAction{")
	s = append(s, "RequestPropertiesSelection: "+fmt.Sprintf("%#v", this.RequestPropertiesSelection)+",\n")
	s = append(s, "OasValidationAction: "+fmt.Sprintf("%#v", this.OasValidationAction)+",\n")
	s = append(s, "ResponsePropertiesSelection: "+fmt.Sprintf("%#v", this.ResponsePropertiesSelection)+",\n")
	s = append(s, "OasResponseValidationAction: "+fmt.Sprintf("%#v", this.OasResponseValidationAction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaskingConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&policy.MaskingConfig{")
	s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	if this.ActionChoice != nil {
		s = append(s, "ActionChoice: "+fmt.Sprintf("%#v", this.ActionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaskingConfig_Mask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.MaskingConfig_Mask{` +
		`Mask:` + fmt.Sprintf("%#v", this.Mask) + `}`}, ", ")
	return s
}
func (this *MaskingConfig_Report) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.MaskingConfig_Report{` +
		`Report:` + fmt.Sprintf("%#v", this.Report) + `}`}, ", ")
	return s
}
func (this *DenyInformation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policy.DenyInformation{")
	s = append(s, "ResponseCode: "+fmt.Sprintf("%#v", this.ResponseCode)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	if this.EventType != nil {
		s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DenyInformation_UndefinedSecEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.DenyInformation_UndefinedSecEvent{` +
		`UndefinedSecEvent:` + fmt.Sprintf("%#v", this.UndefinedSecEvent) + `}`}, ", ")
	return s
}
func (this *DenyInformation_ApiSecEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.DenyInformation_ApiSecEvent{` +
		`ApiSecEvent:` + fmt.Sprintf("%#v", this.ApiSecEvent) + `}`}, ", ")
	return s
}
func (this *TlsFingerprintMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&policy.TlsFingerprintMatcherType{")
	s = append(s, "Classes: "+fmt.Sprintf("%#v", this.Classes)+",\n")
	s = append(s, "ExactValues: "+fmt.Sprintf("%#v", this.ExactValues)+",\n")
	s = append(s, "ExcludedValues: "+fmt.Sprintf("%#v", this.ExcludedValues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JA4TlsFingerprintMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.JA4TlsFingerprintMatcherType{")
	s = append(s, "ExactValues: "+fmt.Sprintf("%#v", this.ExactValues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PathMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&policy.PathMatcherType{")
	s = append(s, "PrefixValues: "+fmt.Sprintf("%#v", this.PrefixValues)+",\n")
	s = append(s, "ExactValues: "+fmt.Sprintf("%#v", this.ExactValues)+",\n")
	s = append(s, "RegexValues: "+fmt.Sprintf("%#v", this.RegexValues)+",\n")
	s = append(s, "SuffixValues: "+fmt.Sprintf("%#v", this.SuffixValues)+",\n")
	s = append(s, "Transformers: "+fmt.Sprintf("%#v", this.Transformers)+",\n")
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&policy.MatcherType{")
	s = append(s, "ExactValues: "+fmt.Sprintf("%#v", this.ExactValues)+",\n")
	s = append(s, "RegexValues: "+fmt.Sprintf("%#v", this.RegexValues)+",\n")
	s = append(s, "Transformers: "+fmt.Sprintf("%#v", this.Transformers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatcherTypeBasic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.MatcherTypeBasic{")
	s = append(s, "ExactValues: "+fmt.Sprintf("%#v", this.ExactValues)+",\n")
	s = append(s, "RegexValues: "+fmt.Sprintf("%#v", this.RegexValues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CookieMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&policy.CookieMatcherType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CookieMatcherType_Presence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.CookieMatcherType_Presence{` +
		`Presence:` + fmt.Sprintf("%#v", this.Presence) + `}`}, ", ")
	return s
}
func (this *CookieMatcherType_CheckPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.CookieMatcherType_CheckPresent{` +
		`CheckPresent:` + fmt.Sprintf("%#v", this.CheckPresent) + `}`}, ", ")
	return s
}
func (this *CookieMatcherType_CheckNotPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.CookieMatcherType_CheckNotPresent{` +
		`CheckNotPresent:` + fmt.Sprintf("%#v", this.CheckNotPresent) + `}`}, ", ")
	return s
}
func (this *CookieMatcherType_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.CookieMatcherType_Item{` +
		`Item:` + fmt.Sprintf("%#v", this.Item) + `}`}, ", ")
	return s
}
func (this *ArgMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&policy.ArgMatcherType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ArgMatcherType_Presence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ArgMatcherType_Presence{` +
		`Presence:` + fmt.Sprintf("%#v", this.Presence) + `}`}, ", ")
	return s
}
func (this *ArgMatcherType_CheckPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ArgMatcherType_CheckPresent{` +
		`CheckPresent:` + fmt.Sprintf("%#v", this.CheckPresent) + `}`}, ", ")
	return s
}
func (this *ArgMatcherType_CheckNotPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ArgMatcherType_CheckNotPresent{` +
		`CheckNotPresent:` + fmt.Sprintf("%#v", this.CheckNotPresent) + `}`}, ", ")
	return s
}
func (this *ArgMatcherType_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ArgMatcherType_Item{` +
		`Item:` + fmt.Sprintf("%#v", this.Item) + `}`}, ", ")
	return s
}
func (this *HeaderMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&policy.HeaderMatcherType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeaderMatcherType_Presence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.HeaderMatcherType_Presence{` +
		`Presence:` + fmt.Sprintf("%#v", this.Presence) + `}`}, ", ")
	return s
}
func (this *HeaderMatcherType_CheckPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.HeaderMatcherType_CheckPresent{` +
		`CheckPresent:` + fmt.Sprintf("%#v", this.CheckPresent) + `}`}, ", ")
	return s
}
func (this *HeaderMatcherType_CheckNotPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.HeaderMatcherType_CheckNotPresent{` +
		`CheckNotPresent:` + fmt.Sprintf("%#v", this.CheckNotPresent) + `}`}, ", ")
	return s
}
func (this *HeaderMatcherType_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.HeaderMatcherType_Item{` +
		`Item:` + fmt.Sprintf("%#v", this.Item) + `}`}, ", ")
	return s
}
func (this *JWTClaimMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&policy.JWTClaimMatcherType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JWTClaimMatcherType_CheckPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.JWTClaimMatcherType_CheckPresent{` +
		`CheckPresent:` + fmt.Sprintf("%#v", this.CheckPresent) + `}`}, ", ")
	return s
}
func (this *JWTClaimMatcherType_CheckNotPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.JWTClaimMatcherType_CheckNotPresent{` +
		`CheckNotPresent:` + fmt.Sprintf("%#v", this.CheckNotPresent) + `}`}, ", ")
	return s
}
func (this *JWTClaimMatcherType_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.JWTClaimMatcherType_Item{` +
		`Item:` + fmt.Sprintf("%#v", this.Item) + `}`}, ", ")
	return s
}
func (this *HeaderMatcherTypeBasic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policy.HeaderMatcherTypeBasic{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeaderMatcherTypeBasic_CheckPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.HeaderMatcherTypeBasic_CheckPresent{` +
		`CheckPresent:` + fmt.Sprintf("%#v", this.CheckPresent) + `}`}, ", ")
	return s
}
func (this *HeaderMatcherTypeBasic_CheckNotPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.HeaderMatcherTypeBasic_CheckNotPresent{` +
		`CheckNotPresent:` + fmt.Sprintf("%#v", this.CheckNotPresent) + `}`}, ", ")
	return s
}
func (this *HeaderMatcherTypeBasic_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.HeaderMatcherTypeBasic_Item{` +
		`Item:` + fmt.Sprintf("%#v", this.Item) + `}`}, ", ")
	return s
}
func (this *QueryParameterMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&policy.QueryParameterMatcherType{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryParameterMatcherType_Presence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.QueryParameterMatcherType_Presence{` +
		`Presence:` + fmt.Sprintf("%#v", this.Presence) + `}`}, ", ")
	return s
}
func (this *QueryParameterMatcherType_CheckPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.QueryParameterMatcherType_CheckPresent{` +
		`CheckPresent:` + fmt.Sprintf("%#v", this.CheckPresent) + `}`}, ", ")
	return s
}
func (this *QueryParameterMatcherType_CheckNotPresent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.QueryParameterMatcherType_CheckNotPresent{` +
		`CheckNotPresent:` + fmt.Sprintf("%#v", this.CheckNotPresent) + `}`}, ", ")
	return s
}
func (this *QueryParameterMatcherType_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.QueryParameterMatcherType_Item{` +
		`Item:` + fmt.Sprintf("%#v", this.Item) + `}`}, ", ")
	return s
}
func (this *HttpMethodMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.HttpMethodMatcherType{")
	s = append(s, "Methods: "+fmt.Sprintf("%#v", this.Methods)+",\n")
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoleMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.RoleMatcherType{")
	s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.StringMatcherType{")
	s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IpMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.IpMatcherType{")
	if this.PrefixSets != nil {
		s = append(s, "PrefixSets: "+fmt.Sprintf("%#v", this.PrefixSets)+",\n")
	}
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AsnMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.AsnMatcherType{")
	if this.AsnSets != nil {
		s = append(s, "AsnSets: "+fmt.Sprintf("%#v", this.AsnSets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.PortMatcherType{")
	s = append(s, "Ports: "+fmt.Sprintf("%#v", this.Ports)+",\n")
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&policy.URLItem{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	if this.PathChoice != nil {
		s = append(s, "PathChoice: "+fmt.Sprintf("%#v", this.PathChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLItem_DomainValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.URLItem_DomainValue{` +
		`DomainValue:` + fmt.Sprintf("%#v", this.DomainValue) + `}`}, ", ")
	return s
}
func (this *URLItem_DomainRegex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.URLItem_DomainRegex{` +
		`DomainRegex:` + fmt.Sprintf("%#v", this.DomainRegex) + `}`}, ", ")
	return s
}
func (this *URLItem_PathValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.URLItem_PathValue{` +
		`PathValue:` + fmt.Sprintf("%#v", this.PathValue) + `}`}, ", ")
	return s
}
func (this *URLItem_PathPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.URLItem_PathPrefix{` +
		`PathPrefix:` + fmt.Sprintf("%#v", this.PathPrefix) + `}`}, ", ")
	return s
}
func (this *URLItem_PathRegex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.URLItem_PathRegex{` +
		`PathRegex:` + fmt.Sprintf("%#v", this.PathRegex) + `}`}, ", ")
	return s
}
func (this *URLMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.URLMatcherType{")
	if this.UrlItems != nil {
		s = append(s, "UrlItems: "+fmt.Sprintf("%#v", this.UrlItems)+",\n")
	}
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *L4DestMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.L4DestMatcherType{")
	if this.L4Dests != nil {
		s = append(s, "L4Dests: "+fmt.Sprintf("%#v", this.L4Dests)+",\n")
	}
	s = append(s, "InvertMatcher: "+fmt.Sprintf("%#v", this.InvertMatcher)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountryCodeList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&policy.CountryCodeList{")
	s = append(s, "CountryCodes: "+fmt.Sprintf("%#v", this.CountryCodes)+",\n")
	s = append(s, "InvertMatch: "+fmt.Sprintf("%#v", this.InvertMatch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpHeaderName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.HttpHeaderName{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpCookieName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.HttpCookieName{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpQueryParameterName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.HttpQueryParameterName{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JwtTokenAuthOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&policy.JwtTokenAuthOptions{")
	if this.SecretKey != nil {
		s = append(s, "SecretKey: "+fmt.Sprintf("%#v", this.SecretKey)+",\n")
	}
	if this.TokenSource != nil {
		s = append(s, "TokenSource: "+fmt.Sprintf("%#v", this.TokenSource)+",\n")
	}
	if this.BackupKey != nil {
		s = append(s, "BackupKey: "+fmt.Sprintf("%#v", this.BackupKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JwtTokenAuthOptions_Header) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.JwtTokenAuthOptions_Header{` +
		`Header:` + fmt.Sprintf("%#v", this.Header) + `}`}, ", ")
	return s
}
func (this *JwtTokenAuthOptions_Cookie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.JwtTokenAuthOptions_Cookie{` +
		`Cookie:` + fmt.Sprintf("%#v", this.Cookie) + `}`}, ", ")
	return s
}
func (this *JwtTokenAuthOptions_QueryParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.JwtTokenAuthOptions_QueryParam{` +
		`QueryParam:` + fmt.Sprintf("%#v", this.QueryParam) + `}`}, ", ")
	return s
}
func (this *JwtTokenAuthOptions_BearerToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.JwtTokenAuthOptions_BearerToken{` +
		`BearerToken:` + fmt.Sprintf("%#v", this.BearerToken) + `}`}, ", ")
	return s
}
func (this *IPThreatCategoryListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.IPThreatCategoryListType{")
	s = append(s, "IpThreatCategories: "+fmt.Sprintf("%#v", this.IpThreatCategories)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&policy.ClientMatcher{")
	if this.ClientChoice != nil {
		s = append(s, "ClientChoice: "+fmt.Sprintf("%#v", this.ClientChoice)+",\n")
	}
	if this.IpAsnChoice != nil {
		s = append(s, "IpAsnChoice: "+fmt.Sprintf("%#v", this.IpAsnChoice)+",\n")
	}
	if this.TlsFingerprintMatcher != nil {
		s = append(s, "TlsFingerprintMatcher: "+fmt.Sprintf("%#v", this.TlsFingerprintMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientMatcher_AnyClient) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ClientMatcher_AnyClient{` +
		`AnyClient:` + fmt.Sprintf("%#v", this.AnyClient) + `}`}, ", ")
	return s
}
func (this *ClientMatcher_IpThreatCategoryList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ClientMatcher_IpThreatCategoryList{` +
		`IpThreatCategoryList:` + fmt.Sprintf("%#v", this.IpThreatCategoryList) + `}`}, ", ")
	return s
}
func (this *ClientMatcher_ClientSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ClientMatcher_ClientSelector{` +
		`ClientSelector:` + fmt.Sprintf("%#v", this.ClientSelector) + `}`}, ", ")
	return s
}
func (this *ClientMatcher_AnyIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ClientMatcher_AnyIp{` +
		`AnyIp:` + fmt.Sprintf("%#v", this.AnyIp) + `}`}, ", ")
	return s
}
func (this *ClientMatcher_IpPrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ClientMatcher_IpPrefixList{` +
		`IpPrefixList:` + fmt.Sprintf("%#v", this.IpPrefixList) + `}`}, ", ")
	return s
}
func (this *ClientMatcher_IpMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ClientMatcher_IpMatcher{` +
		`IpMatcher:` + fmt.Sprintf("%#v", this.IpMatcher) + `}`}, ", ")
	return s
}
func (this *ClientMatcher_AsnList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ClientMatcher_AsnList{` +
		`AsnList:` + fmt.Sprintf("%#v", this.AsnList) + `}`}, ", ")
	return s
}
func (this *ClientMatcher_AsnMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.ClientMatcher_AsnMatcher{` +
		`AsnMatcher:` + fmt.Sprintf("%#v", this.AsnMatcher) + `}`}, ", ")
	return s
}
func (this *RequestMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&policy.RequestMatcher{")
	if this.QueryParams != nil {
		s = append(s, "QueryParams: "+fmt.Sprintf("%#v", this.QueryParams)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	if this.JwtClaims != nil {
		s = append(s, "JwtClaims: "+fmt.Sprintf("%#v", this.JwtClaims)+",\n")
	}
	if this.CookieMatchers != nil {
		s = append(s, "CookieMatchers: "+fmt.Sprintf("%#v", this.CookieMatchers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestConstraintType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 30)
	s = append(s, "&policy.RequestConstraintType{")
	if this.MaxCookieCountChoice != nil {
		s = append(s, "MaxCookieCountChoice: "+fmt.Sprintf("%#v", this.MaxCookieCountChoice)+",\n")
	}
	if this.MaxCookieKeySizeChoice != nil {
		s = append(s, "MaxCookieKeySizeChoice: "+fmt.Sprintf("%#v", this.MaxCookieKeySizeChoice)+",\n")
	}
	if this.MaxCookieValueSizeChoice != nil {
		s = append(s, "MaxCookieValueSizeChoice: "+fmt.Sprintf("%#v", this.MaxCookieValueSizeChoice)+",\n")
	}
	if this.MaxHeaderCountChoice != nil {
		s = append(s, "MaxHeaderCountChoice: "+fmt.Sprintf("%#v", this.MaxHeaderCountChoice)+",\n")
	}
	if this.MaxHeaderKeySizeChoice != nil {
		s = append(s, "MaxHeaderKeySizeChoice: "+fmt.Sprintf("%#v", this.MaxHeaderKeySizeChoice)+",\n")
	}
	if this.MaxHeaderValueSizeChoice != nil {
		s = append(s, "MaxHeaderValueSizeChoice: "+fmt.Sprintf("%#v", this.MaxHeaderValueSizeChoice)+",\n")
	}
	if this.MaxUrlSizeChoice != nil {
		s = append(s, "MaxUrlSizeChoice: "+fmt.Sprintf("%#v", this.MaxUrlSizeChoice)+",\n")
	}
	if this.MaxQuerySizeChoice != nil {
		s = append(s, "MaxQuerySizeChoice: "+fmt.Sprintf("%#v", this.MaxQuerySizeChoice)+",\n")
	}
	if this.MaxRequestLineSizeChoice != nil {
		s = append(s, "MaxRequestLineSizeChoice: "+fmt.Sprintf("%#v", this.MaxRequestLineSizeChoice)+",\n")
	}
	if this.MaxRequestSizeChoice != nil {
		s = append(s, "MaxRequestSizeChoice: "+fmt.Sprintf("%#v", this.MaxRequestSizeChoice)+",\n")
	}
	if this.MaxParameterCountChoice != nil {
		s = append(s, "MaxParameterCountChoice: "+fmt.Sprintf("%#v", this.MaxParameterCountChoice)+",\n")
	}
	if this.MaxParameterNameSizeChoice != nil {
		s = append(s, "MaxParameterNameSizeChoice: "+fmt.Sprintf("%#v", this.MaxParameterNameSizeChoice)+",\n")
	}
	if this.MaxParameterValueSizeChoice != nil {
		s = append(s, "MaxParameterValueSizeChoice: "+fmt.Sprintf("%#v", this.MaxParameterValueSizeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestConstraintType_MaxCookieCountNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxCookieCountNone{` +
		`MaxCookieCountNone:` + fmt.Sprintf("%#v", this.MaxCookieCountNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxCookieCountExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxCookieCountExceeds{` +
		`MaxCookieCountExceeds:` + fmt.Sprintf("%#v", this.MaxCookieCountExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxCookieKeySizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxCookieKeySizeNone{` +
		`MaxCookieKeySizeNone:` + fmt.Sprintf("%#v", this.MaxCookieKeySizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxCookieKeySizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxCookieKeySizeExceeds{` +
		`MaxCookieKeySizeExceeds:` + fmt.Sprintf("%#v", this.MaxCookieKeySizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxCookieValueSizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxCookieValueSizeNone{` +
		`MaxCookieValueSizeNone:` + fmt.Sprintf("%#v", this.MaxCookieValueSizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxCookieValueSizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxCookieValueSizeExceeds{` +
		`MaxCookieValueSizeExceeds:` + fmt.Sprintf("%#v", this.MaxCookieValueSizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxHeaderCountNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxHeaderCountNone{` +
		`MaxHeaderCountNone:` + fmt.Sprintf("%#v", this.MaxHeaderCountNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxHeaderCountExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxHeaderCountExceeds{` +
		`MaxHeaderCountExceeds:` + fmt.Sprintf("%#v", this.MaxHeaderCountExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxHeaderKeySizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxHeaderKeySizeNone{` +
		`MaxHeaderKeySizeNone:` + fmt.Sprintf("%#v", this.MaxHeaderKeySizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxHeaderKeySizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxHeaderKeySizeExceeds{` +
		`MaxHeaderKeySizeExceeds:` + fmt.Sprintf("%#v", this.MaxHeaderKeySizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxHeaderValueSizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxHeaderValueSizeNone{` +
		`MaxHeaderValueSizeNone:` + fmt.Sprintf("%#v", this.MaxHeaderValueSizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxHeaderValueSizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxHeaderValueSizeExceeds{` +
		`MaxHeaderValueSizeExceeds:` + fmt.Sprintf("%#v", this.MaxHeaderValueSizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxUrlSizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxUrlSizeNone{` +
		`MaxUrlSizeNone:` + fmt.Sprintf("%#v", this.MaxUrlSizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxUrlSizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxUrlSizeExceeds{` +
		`MaxUrlSizeExceeds:` + fmt.Sprintf("%#v", this.MaxUrlSizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxQuerySizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxQuerySizeNone{` +
		`MaxQuerySizeNone:` + fmt.Sprintf("%#v", this.MaxQuerySizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxQuerySizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxQuerySizeExceeds{` +
		`MaxQuerySizeExceeds:` + fmt.Sprintf("%#v", this.MaxQuerySizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxRequestLineSizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxRequestLineSizeNone{` +
		`MaxRequestLineSizeNone:` + fmt.Sprintf("%#v", this.MaxRequestLineSizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxRequestLineSizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxRequestLineSizeExceeds{` +
		`MaxRequestLineSizeExceeds:` + fmt.Sprintf("%#v", this.MaxRequestLineSizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxRequestSizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxRequestSizeNone{` +
		`MaxRequestSizeNone:` + fmt.Sprintf("%#v", this.MaxRequestSizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxRequestSizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxRequestSizeExceeds{` +
		`MaxRequestSizeExceeds:` + fmt.Sprintf("%#v", this.MaxRequestSizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxParameterCountNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxParameterCountNone{` +
		`MaxParameterCountNone:` + fmt.Sprintf("%#v", this.MaxParameterCountNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxParameterCountExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxParameterCountExceeds{` +
		`MaxParameterCountExceeds:` + fmt.Sprintf("%#v", this.MaxParameterCountExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxParameterNameSizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxParameterNameSizeNone{` +
		`MaxParameterNameSizeNone:` + fmt.Sprintf("%#v", this.MaxParameterNameSizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxParameterNameSizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxParameterNameSizeExceeds{` +
		`MaxParameterNameSizeExceeds:` + fmt.Sprintf("%#v", this.MaxParameterNameSizeExceeds) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxParameterValueSizeNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxParameterValueSizeNone{` +
		`MaxParameterValueSizeNone:` + fmt.Sprintf("%#v", this.MaxParameterValueSizeNone) + `}`}, ", ")
	return s
}
func (this *RequestConstraintType_MaxParameterValueSizeExceeds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.RequestConstraintType_MaxParameterValueSizeExceeds{` +
		`MaxParameterValueSizeExceeds:` + fmt.Sprintf("%#v", this.MaxParameterValueSizeExceeds) + `}`}, ", ")
	return s
}
func (this *ActiveEnhancedFirewallPoliciesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.ActiveEnhancedFirewallPoliciesType{")
	if this.EnhancedFirewallPolicies != nil {
		s = append(s, "EnhancedFirewallPolicies: "+fmt.Sprintf("%#v", this.EnhancedFirewallPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActiveServicePoliciesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.ActiveServicePoliciesType{")
	if this.ServicePolicies != nil {
		s = append(s, "ServicePolicies: "+fmt.Sprintf("%#v", this.ServicePolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActiveForwardProxyPoliciesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.ActiveForwardProxyPoliciesType{")
	if this.ForwardProxyPolicies != nil {
		s = append(s, "ForwardProxyPolicies: "+fmt.Sprintf("%#v", this.ForwardProxyPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityPoliciesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&policy.SecurityPoliciesType{")
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.FirewallPolicyChoice != nil {
		s = append(s, "FirewallPolicyChoice: "+fmt.Sprintf("%#v", this.FirewallPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityPoliciesType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SecurityPoliciesType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *SecurityPoliciesType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SecurityPoliciesType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *SecurityPoliciesType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SecurityPoliciesType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *SecurityPoliciesType_NoFirewallPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SecurityPoliciesType_NoFirewallPolicy{` +
		`NoFirewallPolicy:` + fmt.Sprintf("%#v", this.NoFirewallPolicy) + `}`}, ", ")
	return s
}
func (this *SecurityPoliciesType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SecurityPoliciesType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *SegmentPolicyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&policy.SegmentPolicyType{")
	if this.SrcSegmentChoice != nil {
		s = append(s, "SrcSegmentChoice: "+fmt.Sprintf("%#v", this.SrcSegmentChoice)+",\n")
	}
	if this.DstSegmentChoice != nil {
		s = append(s, "DstSegmentChoice: "+fmt.Sprintf("%#v", this.DstSegmentChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentPolicyType_SrcAny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SegmentPolicyType_SrcAny{` +
		`SrcAny:` + fmt.Sprintf("%#v", this.SrcAny) + `}`}, ", ")
	return s
}
func (this *SegmentPolicyType_SrcSegments) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SegmentPolicyType_SrcSegments{` +
		`SrcSegments:` + fmt.Sprintf("%#v", this.SrcSegments) + `}`}, ", ")
	return s
}
func (this *SegmentPolicyType_DstAny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SegmentPolicyType_DstAny{` +
		`DstAny:` + fmt.Sprintf("%#v", this.DstAny) + `}`}, ", ")
	return s
}
func (this *SegmentPolicyType_IntraSegment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SegmentPolicyType_IntraSegment{` +
		`IntraSegment:` + fmt.Sprintf("%#v", this.IntraSegment) + `}`}, ", ")
	return s
}
func (this *SegmentPolicyType_DstSegments) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&policy.SegmentPolicyType_DstSegments{` +
		`DstSegments:` + fmt.Sprintf("%#v", this.DstSegments) + `}`}, ", ")
	return s
}
func (this *MalwareProtectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&policy.MalwareProtectionSettings{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AppFirewallViolationContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFirewallViolationContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFirewallViolationContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextName) > 0 {
		i -= len(m.ContextName)
		copy(dAtA[i:], m.ContextName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContextName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Context != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Context))
		i--
		dAtA[i] = 0x10
	}
	if m.ExcludeViolation != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExcludeViolation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppFirewallSignatureContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFirewallSignatureContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFirewallSignatureContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextName) > 0 {
		i -= len(m.ContextName)
		copy(dAtA[i:], m.ContextName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContextName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Context != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Context))
		i--
		dAtA[i] = 0x10
	}
	if m.SignatureId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SignatureId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppFirewallAttackTypeContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFirewallAttackTypeContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFirewallAttackTypeContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContextName) > 0 {
		i -= len(m.ContextName)
		copy(dAtA[i:], m.ContextName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContextName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Context != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Context))
		i--
		dAtA[i] = 0x10
	}
	if m.ExcludeAttackType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExcludeAttackType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BotNameContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotNameContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotNameContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BotName) > 0 {
		i -= len(m.BotName)
		copy(dAtA[i:], m.BotName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BotName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppFirewallDetectionControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFirewallDetectionControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFirewallDetectionControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeBotNameContexts) > 0 {
		for iNdEx := len(m.ExcludeBotNameContexts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeBotNameContexts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ExcludeAttackTypeContexts) > 0 {
		for iNdEx := len(m.ExcludeAttackTypeContexts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeAttackTypeContexts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ExcludeViolationContexts) > 0 {
		for iNdEx := len(m.ExcludeViolationContexts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeViolationContexts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ExcludeSignatureContexts) > 0 {
		for iNdEx := len(m.ExcludeSignatureContexts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeSignatureContexts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataGuardControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataGuardControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataGuardControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyName) > 0 {
		i -= len(m.PolicyName)
		copy(dAtA[i:], m.PolicyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PolicyName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BotAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionType != nil {
		{
			size := m.ActionType.Size()
			i -= size
			if _, err := m.ActionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BotAction_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotAction_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BotAction_BotSkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotAction_BotSkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotSkipProcessing != nil {
		{
			size, err := m.BotSkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ModifyAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionType != nil {
		{
			size := m.ActionType.Size()
			i -= size
			if _, err := m.ActionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModifyAction_Default) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyAction_Default) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Default != nil {
		{
			size, err := m.Default.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ModifyAction_SkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyAction_SkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkipProcessing != nil {
		{
			size, err := m.SkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WafAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WafAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionType != nil {
		{
			size := m.ActionType.Size()
			i -= size
			if _, err := m.ActionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WafAction_WafSkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafAction_WafSkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafSkipProcessing != nil {
		{
			size, err := m.WafSkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WafAction_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafAction_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WafAction_WafInMonitoringMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafAction_WafInMonitoringMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafInMonitoringMode != nil {
		{
			size, err := m.WafInMonitoringMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WafAction_AppFirewallDetectionControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafAction_AppFirewallDetectionControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewallDetectionControl != nil {
		{
			size, err := m.AppFirewallDetectionControl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *WafAction_DataGuardControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafAction_DataGuardControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataGuardControl != nil {
		{
			size, err := m.DataGuardControl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *WafAction_JwtValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafAction_JwtValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *WafAction_JwtClaimsValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WafAction_JwtClaimsValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JwtClaimsValidation != nil {
		{
			size, err := m.JwtClaimsValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ContentRewriteAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentRewriteAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentRewriteAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InsertedTypes) > 0 {
		keysForInsertedTypes := make([]string, 0, len(m.InsertedTypes))
		for k := range m.InsertedTypes {
			keysForInsertedTypes = append(keysForInsertedTypes, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForInsertedTypes)
		for iNdEx := len(keysForInsertedTypes) - 1; iNdEx >= 0; iNdEx-- {
			v := m.InsertedTypes[string(keysForInsertedTypes[iNdEx])]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(keysForInsertedTypes[iNdEx])
			copy(dAtA[i:], keysForInsertedTypes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForInsertedTypes[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Position != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ElementSelector) > 0 {
		i -= len(m.ElementSelector)
		copy(dAtA[i:], m.ElementSelector)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ElementSelector)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InsertContent) > 0 {
		i -= len(m.InsertContent)
		copy(dAtA[i:], m.InsertContent)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InsertContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShapeProtectedEndpointAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeProtectedEndpointAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeProtectedEndpointAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowGoodbot {
		i--
		if m.AllowGoodbot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.TransactionResult != nil {
		{
			size, err := m.TransactionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FlowLabel) > 0 {
		i -= len(m.FlowLabel)
		copy(dAtA[i:], m.FlowLabel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FlowLabel)))
		i--
		dAtA[i] = 0x22
	}
	if m.WebScraping {
		i--
		if m.WebScraping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Mitigation != nil {
		{
			size, err := m.Mitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppTrafficType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AppTrafficType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotMitigationAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotMitigationAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotMitigationAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionType != nil {
		{
			size := m.ActionType.Size()
			i -= size
			if _, err := m.ActionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotMitigationAction_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotMitigationAction_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotMitigationAction_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotMitigationAction_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotMitigationAction_Redirect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotMitigationAction_Redirect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Redirect != nil {
		{
			size, err := m.Redirect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotMitigationAction_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotMitigationAction_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotFlagMitigationActionChoiceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotFlagMitigationActionChoiceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotFlagMitigationActionChoiceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SendHeadersChoice != nil {
		{
			size := m.SendHeadersChoice.Size()
			i -= size
			if _, err := m.SendHeadersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotFlagMitigationActionChoiceType_NoHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotFlagMitigationActionChoiceType_NoHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoHeaders != nil {
		{
			size, err := m.NoHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotFlagMitigationActionChoiceType_AppendHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotFlagMitigationActionChoiceType_AppendHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppendHeaders != nil {
		{
			size, err := m.AppendHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotFlagMitigationActionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotFlagMitigationActionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotFlagMitigationActionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AutoTypeHeaderName) > 0 {
		i -= len(m.AutoTypeHeaderName)
		copy(dAtA[i:], m.AutoTypeHeaderName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AutoTypeHeaderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InferenceHeaderName) > 0 {
		i -= len(m.InferenceHeaderName)
		copy(dAtA[i:], m.InferenceHeaderName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InferenceHeaderName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotBlockMitigationActionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotBlockMitigationActionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotBlockMitigationActionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BodyHash) > 0 {
		i -= len(m.BodyHash)
		copy(dAtA[i:], m.BodyHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BodyHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotRedirectMitigationActionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotRedirectMitigationActionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotRedirectMitigationActionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrefixMatchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixMatchList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixMatchList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv6Prefixes) > 0 {
		for iNdEx := len(m.Ipv6Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ipv6Prefixes[iNdEx])
			copy(dAtA[i:], m.Ipv6Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6Prefixes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.InvertMatch {
		i--
		if m.InvertMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.IpPrefixes) > 0 {
		for iNdEx := len(m.IpPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IpPrefixes[iNdEx])
			copy(dAtA[i:], m.IpPrefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.IpPrefixes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AsnMatchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AsnMatchList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AsnMatchList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsNumbers) > 0 {
		dAtA21 := make([]byte, len(m.AsNumbers)*10)
		var j20 int
		for _, num := range m.AsNumbers {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintTypes(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimpleWafExclusionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleWafExclusionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PathChoice != nil {
		{
			size := m.PathChoice.Size()
			i -= size
			if _, err := m.PathChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafAdvancedConfiguration != nil {
		{
			size := m.WafAdvancedConfiguration.Size()
			i -= size
			if _, err := m.WafAdvancedConfiguration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Methods) > 0 {
		dAtA25 := make([]byte, len(m.Methods)*10)
		var j24 int
		for _, num := range m.Methods {
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintTypes(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *SimpleWafExclusionRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SimpleWafExclusionRule_PathRegex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule_PathRegex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PathRegex)
	copy(dAtA[i:], m.PathRegex)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathRegex)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *SimpleWafExclusionRule_AppFirewallDetectionControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule_AppFirewallDetectionControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewallDetectionControl != nil {
		{
			size, err := m.AppFirewallDetectionControl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleWafExclusionRule_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule_ExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactValue)
	copy(dAtA[i:], m.ExactValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValue)))
	i--
	dAtA[i] = 0x62
	return len(dAtA) - i, nil
}
func (m *SimpleWafExclusionRule_SuffixValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule_SuffixValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SuffixValue)
	copy(dAtA[i:], m.SuffixValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SuffixValue)))
	i--
	dAtA[i] = 0x6a
	return len(dAtA) - i, nil
}
func (m *SimpleWafExclusionRule_WafSkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule_WafSkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafSkipProcessing != nil {
		{
			size, err := m.WafSkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleWafExclusionRule_AnyPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule_AnyPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyPath != nil {
		{
			size, err := m.AnyPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleWafExclusionRule_PathPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleWafExclusionRule_PathPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PathPrefix)
	copy(dAtA[i:], m.PathPrefix)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathPrefix)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerSubsetRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AsnChoice != nil {
		{
			size := m.AsnChoice.Size()
			i -= size
			if _, err := m.AsnChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpChoice != nil {
		{
			size := m.IpChoice.Size()
			i -= size
			if _, err := m.IpChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SelectorChoice != nil {
		{
			size := m.SelectorChoice.Size()
			i -= size
			if _, err := m.SelectorChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BodyMatcher != nil {
		{
			size, err := m.BodyMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.OriginServerSubsetsAction) > 0 {
		keysForOriginServerSubsetsAction := make([]string, 0, len(m.OriginServerSubsetsAction))
		for k := range m.OriginServerSubsetsAction {
			keysForOriginServerSubsetsAction = append(keysForOriginServerSubsetsAction, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForOriginServerSubsetsAction)
		for iNdEx := len(keysForOriginServerSubsetsAction) - 1; iNdEx >= 0; iNdEx-- {
			v := m.OriginServerSubsetsAction[string(keysForOriginServerSubsetsAction[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForOriginServerSubsetsAction[iNdEx])
			copy(dAtA[i:], keysForOriginServerSubsetsAction[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForOriginServerSubsetsAction[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CountryCodes) > 0 {
		dAtA32 := make([]byte, len(m.CountryCodes)*10)
		var j31 int
		for _, num := range m.CountryCodes {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintTypes(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReNameList) > 0 {
		for iNdEx := len(m.ReNameList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReNameList[iNdEx])
			copy(dAtA[i:], m.ReNameList[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ReNameList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OriginServerSubsetRule_ClientSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule_ClientSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSelector != nil {
		{
			size, err := m.ClientSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRule_IpMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule_IpMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpMatcher != nil {
		{
			size, err := m.IpMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRule_AsnMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule_AsnMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsnMatcher != nil {
		{
			size, err := m.AsnMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRule_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRule_AnyIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule_AnyIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyIp != nil {
		{
			size, err := m.AnyIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRule_IpPrefixList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule_IpPrefixList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixList != nil {
		{
			size, err := m.IpPrefixList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRule_AnyAsn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule_AnyAsn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyAsn != nil {
		{
			size, err := m.AnyAsn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRule_AsnList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRule_AsnList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsnList != nil {
		{
			size, err := m.AsnList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleDataGuardRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleDataGuardRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleDataGuardRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionChoice != nil {
		{
			size := m.ActionChoice.Size()
			i -= size
			if _, err := m.ActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *SimpleDataGuardRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleDataGuardRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SimpleDataGuardRule_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleDataGuardRule_ExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactValue)
	copy(dAtA[i:], m.ExactValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValue)))
	i--
	dAtA[i] = 0x62
	return len(dAtA) - i, nil
}
func (m *SimpleDataGuardRule_SuffixValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleDataGuardRule_SuffixValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SuffixValue)
	copy(dAtA[i:], m.SuffixValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SuffixValue)))
	i--
	dAtA[i] = 0x6a
	return len(dAtA) - i, nil
}
func (m *SimpleDataGuardRule_ApplyDataGuard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleDataGuardRule_ApplyDataGuard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApplyDataGuard != nil {
		{
			size, err := m.ApplyDataGuard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleDataGuardRule_SkipDataGuard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleDataGuardRule_SkipDataGuard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkipDataGuard != nil {
		{
			size, err := m.SkipDataGuard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GraphQLRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphQLRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MethodChoice != nil {
		{
			size := m.MethodChoice.Size()
			i -= size
			if _, err := m.MethodChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.GraphqlSettings != nil {
		{
			size, err := m.GraphqlSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExactPath) > 0 {
		i -= len(m.ExactPath)
		copy(dAtA[i:], m.ExactPath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactPath)))
		i--
		dAtA[i] = 0x32
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GraphQLRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GraphQLRule_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLRule_ExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactValue)
	copy(dAtA[i:], m.ExactValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValue)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *GraphQLRule_SuffixValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLRule_SuffixValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SuffixValue)
	copy(dAtA[i:], m.SuffixValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SuffixValue)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *GraphQLRule_MethodGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLRule_MethodGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MethodGet != nil {
		{
			size, err := m.MethodGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GraphQLRule_MethodPost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLRule_MethodPost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MethodPost != nil {
		{
			size, err := m.MethodPost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GraphQLSettingsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphQLSettingsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLSettingsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowIntrospectionQueriesChoice != nil {
		{
			size := m.AllowIntrospectionQueriesChoice.Size()
			i -= size
			if _, err := m.AllowIntrospectionQueriesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxBatchedQueries != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxBatchedQueries))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxDepth != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxDepth))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxValueLength != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxValueLength))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxTotalLength != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxTotalLength))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PolicyName) > 0 {
		i -= len(m.PolicyName)
		copy(dAtA[i:], m.PolicyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PolicyName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GraphQLSettingsType_DisableIntrospection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLSettingsType_DisableIntrospection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIntrospection != nil {
		{
			size, err := m.DisableIntrospection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GraphQLSettingsType_EnableIntrospection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphQLSettingsType_EnableIntrospection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIntrospection != nil {
		{
			size, err := m.EnableIntrospection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiValidationAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OasResponseValidationAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OasResponseValidationAction))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ResponsePropertiesSelection) > 0 {
		dAtA55 := make([]byte, len(m.ResponsePropertiesSelection)*10)
		var j54 int
		for _, num := range m.ResponsePropertiesSelection {
			for num >= 1<<7 {
				dAtA55[j54] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j54++
			}
			dAtA55[j54] = uint8(num)
			j54++
		}
		i -= j54
		copy(dAtA[i:], dAtA55[:j54])
		i = encodeVarintTypes(dAtA, i, uint64(j54))
		i--
		dAtA[i] = 0x1a
	}
	if m.OasValidationAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OasValidationAction))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestPropertiesSelection) > 0 {
		dAtA57 := make([]byte, len(m.RequestPropertiesSelection)*10)
		var j56 int
		for _, num := range m.RequestPropertiesSelection {
			for num >= 1<<7 {
				dAtA57[j56] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j56++
			}
			dAtA57[j56] = uint8(num)
			j56++
		}
		i -= j56
		copy(dAtA[i:], dAtA57[:j56])
		i = encodeVarintTypes(dAtA, i, uint64(j56))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaskingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaskingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaskingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionChoice != nil {
		{
			size := m.ActionChoice.Size()
			i -= size
			if _, err := m.ActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaskingConfig_Mask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaskingConfig_Mask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Mask != nil {
		{
			size, err := m.Mask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MaskingConfig_Report) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaskingConfig_Report) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DenyInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenyInformation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyInformation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventType != nil {
		{
			size := m.EventType.Size()
			i -= size
			if _, err := m.EventType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResponseCode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ResponseCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DenyInformation_UndefinedSecEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyInformation_UndefinedSecEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UndefinedSecEvent != nil {
		{
			size, err := m.UndefinedSecEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DenyInformation_ApiSecEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenyInformation_ApiSecEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSecEvent != nil {
		{
			size, err := m.ApiSecEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TlsFingerprintMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsFingerprintMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsFingerprintMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludedValues) > 0 {
		for iNdEx := len(m.ExcludedValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludedValues[iNdEx])
			copy(dAtA[i:], m.ExcludedValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExcludedValues[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ExactValues) > 0 {
		for iNdEx := len(m.ExactValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExactValues[iNdEx])
			copy(dAtA[i:], m.ExactValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValues[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Classes) > 0 {
		dAtA63 := make([]byte, len(m.Classes)*10)
		var j62 int
		for _, num := range m.Classes {
			for num >= 1<<7 {
				dAtA63[j62] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j62++
			}
			dAtA63[j62] = uint8(num)
			j62++
		}
		i -= j62
		copy(dAtA[i:], dAtA63[:j62])
		i = encodeVarintTypes(dAtA, i, uint64(j62))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JA4TlsFingerprintMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JA4TlsFingerprintMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JA4TlsFingerprintMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExactValues) > 0 {
		for iNdEx := len(m.ExactValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExactValues[iNdEx])
			copy(dAtA[i:], m.ExactValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValues[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *PathMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PathMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PathMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.SuffixValues) > 0 {
		for iNdEx := len(m.SuffixValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SuffixValues[iNdEx])
			copy(dAtA[i:], m.SuffixValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SuffixValues[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Transformers) > 0 {
		dAtA65 := make([]byte, len(m.Transformers)*10)
		var j64 int
		for _, num := range m.Transformers {
			for num >= 1<<7 {
				dAtA65[j64] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j64++
			}
			dAtA65[j64] = uint8(num)
			j64++
		}
		i -= j64
		copy(dAtA[i:], dAtA65[:j64])
		i = encodeVarintTypes(dAtA, i, uint64(j64))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RegexValues) > 0 {
		for iNdEx := len(m.RegexValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RegexValues[iNdEx])
			copy(dAtA[i:], m.RegexValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexValues[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ExactValues) > 0 {
		for iNdEx := len(m.ExactValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExactValues[iNdEx])
			copy(dAtA[i:], m.ExactValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValues[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PrefixValues) > 0 {
		for iNdEx := len(m.PrefixValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrefixValues[iNdEx])
			copy(dAtA[i:], m.PrefixValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PrefixValues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transformers) > 0 {
		dAtA67 := make([]byte, len(m.Transformers)*10)
		var j66 int
		for _, num := range m.Transformers {
			for num >= 1<<7 {
				dAtA67[j66] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j66++
			}
			dAtA67[j66] = uint8(num)
			j66++
		}
		i -= j66
		copy(dAtA[i:], dAtA67[:j66])
		i = encodeVarintTypes(dAtA, i, uint64(j66))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RegexValues) > 0 {
		for iNdEx := len(m.RegexValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RegexValues[iNdEx])
			copy(dAtA[i:], m.RegexValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexValues[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ExactValues) > 0 {
		for iNdEx := len(m.ExactValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExactValues[iNdEx])
			copy(dAtA[i:], m.ExactValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MatcherTypeBasic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatcherTypeBasic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatcherTypeBasic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegexValues) > 0 {
		for iNdEx := len(m.RegexValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RegexValues[iNdEx])
			copy(dAtA[i:], m.RegexValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexValues[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ExactValues) > 0 {
		for iNdEx := len(m.ExactValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExactValues[iNdEx])
			copy(dAtA[i:], m.ExactValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CookieMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CookieMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CookieMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CookieMatcherType_Presence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CookieMatcherType_Presence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Presence {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *CookieMatcherType_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CookieMatcherType_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CookieMatcherType_CheckPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CookieMatcherType_CheckPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckPresent != nil {
		{
			size, err := m.CheckPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CookieMatcherType_CheckNotPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CookieMatcherType_CheckNotPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckNotPresent != nil {
		{
			size, err := m.CheckNotPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ArgMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArgMatcherType_Presence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgMatcherType_Presence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Presence {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ArgMatcherType_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgMatcherType_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ArgMatcherType_CheckPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgMatcherType_CheckPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckPresent != nil {
		{
			size, err := m.CheckPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ArgMatcherType_CheckNotPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgMatcherType_CheckNotPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckNotPresent != nil {
		{
			size, err := m.CheckNotPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *HeaderMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeaderMatcherType_Presence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherType_Presence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Presence {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *HeaderMatcherType_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherType_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *HeaderMatcherType_CheckPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherType_CheckPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckPresent != nil {
		{
			size, err := m.CheckPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HeaderMatcherType_CheckNotPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherType_CheckNotPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckNotPresent != nil {
		{
			size, err := m.CheckNotPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *JWTClaimMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWTClaimMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTClaimMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JWTClaimMatcherType_CheckPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTClaimMatcherType_CheckPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckPresent != nil {
		{
			size, err := m.CheckPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *JWTClaimMatcherType_CheckNotPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTClaimMatcherType_CheckNotPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckNotPresent != nil {
		{
			size, err := m.CheckNotPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *JWTClaimMatcherType_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTClaimMatcherType_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *HeaderMatcherTypeBasic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderMatcherTypeBasic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherTypeBasic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeaderMatcherTypeBasic_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherTypeBasic_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *HeaderMatcherTypeBasic_CheckPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherTypeBasic_CheckPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckPresent != nil {
		{
			size, err := m.CheckPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HeaderMatcherTypeBasic_CheckNotPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderMatcherTypeBasic_CheckNotPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckNotPresent != nil {
		{
			size, err := m.CheckNotPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *QueryParameterMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParameterMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParameterMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Match != nil {
		{
			size := m.Match.Size()
			i -= size
			if _, err := m.Match.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParameterMatcherType_Presence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParameterMatcherType_Presence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Presence {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *QueryParameterMatcherType_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParameterMatcherType_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *QueryParameterMatcherType_CheckPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParameterMatcherType_CheckPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckPresent != nil {
		{
			size, err := m.CheckPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *QueryParameterMatcherType_CheckNotPresent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParameterMatcherType_CheckNotPresent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckNotPresent != nil {
		{
			size, err := m.CheckNotPresent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *HttpMethodMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpMethodMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpMethodMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Methods) > 0 {
		dAtA87 := make([]byte, len(m.Methods)*10)
		var j86 int
		for _, num := range m.Methods {
			for num >= 1<<7 {
				dAtA87[j86] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j86++
			}
			dAtA87[j86] = uint8(num)
			j86++
		}
		i -= j86
		copy(dAtA[i:], dAtA87[:j86])
		i = encodeVarintTypes(dAtA, i, uint64(j86))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Match) > 0 {
		i -= len(m.Match)
		copy(dAtA[i:], m.Match)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Match)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Match) > 0 {
		for iNdEx := len(m.Match) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Match[iNdEx])
			copy(dAtA[i:], m.Match[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Match[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IpMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PrefixSets) > 0 {
		for iNdEx := len(m.PrefixSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrefixSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AsnMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AsnMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AsnMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsnSets) > 0 {
		for iNdEx := len(m.AsnSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AsnSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PortMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ports[iNdEx])
			copy(dAtA[i:], m.Ports[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Ports[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *URLItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PathChoice != nil {
		{
			size := m.PathChoice.Size()
			i -= size
			if _, err := m.PathChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *URLItem_DomainValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLItem_DomainValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DomainValue)
	copy(dAtA[i:], m.DomainValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *URLItem_DomainRegex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLItem_DomainRegex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DomainRegex)
	copy(dAtA[i:], m.DomainRegex)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainRegex)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *URLItem_PathValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLItem_PathValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PathValue)
	copy(dAtA[i:], m.PathValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathValue)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *URLItem_PathRegex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLItem_PathRegex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PathRegex)
	copy(dAtA[i:], m.PathRegex)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathRegex)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *URLItem_PathPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLItem_PathPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PathPrefix)
	copy(dAtA[i:], m.PathPrefix)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathPrefix)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *URLMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.UrlItems) > 0 {
		for iNdEx := len(m.UrlItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UrlItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *L4DestMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L4DestMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L4DestMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L4Dests) > 0 {
		for iNdEx := len(m.L4Dests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L4Dests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.InvertMatcher {
		i--
		if m.InvertMatcher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *CountryCodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryCodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountryCodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvertMatch {
		i--
		if m.InvertMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.CountryCodes) > 0 {
		dAtA89 := make([]byte, len(m.CountryCodes)*10)
		var j88 int
		for _, num := range m.CountryCodes {
			for num >= 1<<7 {
				dAtA89[j88] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j88++
			}
			dAtA89[j88] = uint8(num)
			j88++
		}
		i -= j88
		copy(dAtA[i:], dAtA89[:j88])
		i = encodeVarintTypes(dAtA, i, uint64(j88))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpHeaderName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpHeaderName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHeaderName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpCookieName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpCookieName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpCookieName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpQueryParameterName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpQueryParameterName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpQueryParameterName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JwtTokenAuthOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JwtTokenAuthOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JwtTokenAuthOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackupKey != nil {
		{
			size, err := m.BackupKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TokenSource != nil {
		{
			size := m.TokenSource.Size()
			i -= size
			if _, err := m.TokenSource.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SecretKey != nil {
		{
			size, err := m.SecretKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JwtTokenAuthOptions_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JwtTokenAuthOptions_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *JwtTokenAuthOptions_Cookie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JwtTokenAuthOptions_Cookie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cookie != nil {
		{
			size, err := m.Cookie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *JwtTokenAuthOptions_QueryParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JwtTokenAuthOptions_QueryParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QueryParam != nil {
		{
			size, err := m.QueryParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *JwtTokenAuthOptions_BearerToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JwtTokenAuthOptions_BearerToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BearerToken != nil {
		{
			size, err := m.BearerToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *IPThreatCategoryListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPThreatCategoryListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPThreatCategoryListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpThreatCategories) > 0 {
		dAtA97 := make([]byte, len(m.IpThreatCategories)*10)
		var j96 int
		for _, num := range m.IpThreatCategories {
			for num >= 1<<7 {
				dAtA97[j96] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j96++
			}
			dAtA97[j96] = uint8(num)
			j96++
		}
		i -= j96
		copy(dAtA[i:], dAtA97[:j96])
		i = encodeVarintTypes(dAtA, i, uint64(j96))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TlsFingerprintMatcher != nil {
		{
			size, err := m.TlsFingerprintMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.IpAsnChoice != nil {
		{
			size := m.IpAsnChoice.Size()
			i -= size
			if _, err := m.IpAsnChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientChoice != nil {
		{
			size := m.ClientChoice.Size()
			i -= size
			if _, err := m.ClientChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientMatcher_AnyClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher_AnyClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyClient != nil {
		{
			size, err := m.AnyClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ClientMatcher_IpThreatCategoryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher_IpThreatCategoryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpThreatCategoryList != nil {
		{
			size, err := m.IpThreatCategoryList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ClientMatcher_ClientSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher_ClientSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSelector != nil {
		{
			size, err := m.ClientSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ClientMatcher_AnyIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher_AnyIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyIp != nil {
		{
			size, err := m.AnyIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ClientMatcher_IpPrefixList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher_IpPrefixList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixList != nil {
		{
			size, err := m.IpPrefixList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ClientMatcher_IpMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher_IpMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpMatcher != nil {
		{
			size, err := m.IpMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ClientMatcher_AsnList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher_AsnList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsnList != nil {
		{
			size, err := m.AsnList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ClientMatcher_AsnMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMatcher_AsnMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsnMatcher != nil {
		{
			size, err := m.AsnMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *RequestMatcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JwtClaims) > 0 {
		for iNdEx := len(m.JwtClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JwtClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CookieMatchers) > 0 {
		for iNdEx := len(m.CookieMatchers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CookieMatchers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.QueryParams) > 0 {
		for iNdEx := len(m.QueryParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueryParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestConstraintType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestConstraintType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxParameterValueSizeChoice != nil {
		{
			size := m.MaxParameterValueSizeChoice.Size()
			i -= size
			if _, err := m.MaxParameterValueSizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxParameterNameSizeChoice != nil {
		{
			size := m.MaxParameterNameSizeChoice.Size()
			i -= size
			if _, err := m.MaxParameterNameSizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxParameterCountChoice != nil {
		{
			size := m.MaxParameterCountChoice.Size()
			i -= size
			if _, err := m.MaxParameterCountChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxRequestSizeChoice != nil {
		{
			size := m.MaxRequestSizeChoice.Size()
			i -= size
			if _, err := m.MaxRequestSizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxRequestLineSizeChoice != nil {
		{
			size := m.MaxRequestLineSizeChoice.Size()
			i -= size
			if _, err := m.MaxRequestLineSizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxQuerySizeChoice != nil {
		{
			size := m.MaxQuerySizeChoice.Size()
			i -= size
			if _, err := m.MaxQuerySizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxUrlSizeChoice != nil {
		{
			size := m.MaxUrlSizeChoice.Size()
			i -= size
			if _, err := m.MaxUrlSizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxHeaderValueSizeChoice != nil {
		{
			size := m.MaxHeaderValueSizeChoice.Size()
			i -= size
			if _, err := m.MaxHeaderValueSizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxHeaderKeySizeChoice != nil {
		{
			size := m.MaxHeaderKeySizeChoice.Size()
			i -= size
			if _, err := m.MaxHeaderKeySizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxHeaderCountChoice != nil {
		{
			size := m.MaxHeaderCountChoice.Size()
			i -= size
			if _, err := m.MaxHeaderCountChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxCookieValueSizeChoice != nil {
		{
			size := m.MaxCookieValueSizeChoice.Size()
			i -= size
			if _, err := m.MaxCookieValueSizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxCookieKeySizeChoice != nil {
		{
			size := m.MaxCookieKeySizeChoice.Size()
			i -= size
			if _, err := m.MaxCookieKeySizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxCookieCountChoice != nil {
		{
			size := m.MaxCookieCountChoice.Size()
			i -= size
			if _, err := m.MaxCookieCountChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestConstraintType_MaxCookieCountNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxCookieCountNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxCookieCountNone != nil {
		{
			size, err := m.MaxCookieCountNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxCookieCountExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxCookieCountExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxCookieCountExceeds))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxCookieKeySizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxCookieKeySizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxCookieKeySizeNone != nil {
		{
			size, err := m.MaxCookieKeySizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxCookieKeySizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxCookieKeySizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxCookieKeySizeExceeds))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxCookieValueSizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxCookieValueSizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxCookieValueSizeNone != nil {
		{
			size, err := m.MaxCookieValueSizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxCookieValueSizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxCookieValueSizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxCookieValueSizeExceeds))
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxHeaderCountNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxHeaderCountNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxHeaderCountNone != nil {
		{
			size, err := m.MaxHeaderCountNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxHeaderCountExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxHeaderCountExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxHeaderCountExceeds))
	i--
	dAtA[i] = 0x60
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxHeaderKeySizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxHeaderKeySizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxHeaderKeySizeNone != nil {
		{
			size, err := m.MaxHeaderKeySizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxHeaderKeySizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxHeaderKeySizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxHeaderKeySizeExceeds))
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxHeaderValueSizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxHeaderValueSizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxHeaderValueSizeNone != nil {
		{
			size, err := m.MaxHeaderValueSizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxHeaderValueSizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxHeaderValueSizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxHeaderValueSizeExceeds))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxUrlSizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxUrlSizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxUrlSizeNone != nil {
		{
			size, err := m.MaxUrlSizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxUrlSizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxUrlSizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxUrlSizeExceeds))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxQuerySizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxQuerySizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxQuerySizeNone != nil {
		{
			size, err := m.MaxQuerySizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxQuerySizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxQuerySizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxQuerySizeExceeds))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc0
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxRequestLineSizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxRequestLineSizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxRequestLineSizeNone != nil {
		{
			size, err := m.MaxRequestLineSizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxRequestLineSizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxRequestLineSizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestLineSizeExceeds))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxRequestSizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxRequestSizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxRequestSizeNone != nil {
		{
			size, err := m.MaxRequestSizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxRequestSizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxRequestSizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestSizeExceeds))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf0
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxParameterCountNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxParameterCountNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxParameterCountNone != nil {
		{
			size, err := m.MaxParameterCountNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxParameterCountExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxParameterCountExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxParameterCountExceeds))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb8
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxParameterNameSizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxParameterNameSizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxParameterNameSizeNone != nil {
		{
			size, err := m.MaxParameterNameSizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxParameterNameSizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxParameterNameSizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxParameterNameSizeExceeds))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd0
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxParameterValueSizeNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxParameterValueSizeNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxParameterValueSizeNone != nil {
		{
			size, err := m.MaxParameterValueSizeNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RequestConstraintType_MaxParameterValueSizeExceeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestConstraintType_MaxParameterValueSizeExceeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.MaxParameterValueSizeExceeds))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe8
	return len(dAtA) - i, nil
}
func (m *ActiveEnhancedFirewallPoliciesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveEnhancedFirewallPoliciesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveEnhancedFirewallPoliciesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnhancedFirewallPolicies) > 0 {
		for iNdEx := len(m.EnhancedFirewallPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnhancedFirewallPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActiveServicePoliciesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveServicePoliciesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveServicePoliciesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for iNdEx := len(m.ServicePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActiveForwardProxyPoliciesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveForwardProxyPoliciesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveForwardProxyPoliciesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwardProxyPolicies) > 0 {
		for iNdEx := len(m.ForwardProxyPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardProxyPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityPoliciesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityPoliciesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityPoliciesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FirewallPolicyChoice != nil {
		{
			size := m.FirewallPolicyChoice.Size()
			i -= size
			if _, err := m.FirewallPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityPoliciesType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityPoliciesType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SecurityPoliciesType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityPoliciesType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityPoliciesType_NoFirewallPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityPoliciesType_NoFirewallPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoFirewallPolicy != nil {
		{
			size, err := m.NoFirewallPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityPoliciesType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityPoliciesType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SecurityPoliciesType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityPoliciesType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SegmentPolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentPolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentPolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DstSegmentChoice != nil {
		{
			size := m.DstSegmentChoice.Size()
			i -= size
			if _, err := m.DstSegmentChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SrcSegmentChoice != nil {
		{
			size := m.SrcSegmentChoice.Size()
			i -= size
			if _, err := m.SrcSegmentChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentPolicyType_SrcAny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentPolicyType_SrcAny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SrcAny != nil {
		{
			size, err := m.SrcAny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SegmentPolicyType_SrcSegments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentPolicyType_SrcSegments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SrcSegments != nil {
		{
			size, err := m.SrcSegments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SegmentPolicyType_DstAny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentPolicyType_DstAny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DstAny != nil {
		{
			size, err := m.DstAny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SegmentPolicyType_IntraSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentPolicyType_IntraSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IntraSegment != nil {
		{
			size, err := m.IntraSegment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SegmentPolicyType_DstSegments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentPolicyType_DstSegments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DstSegments != nil {
		{
			size, err := m.DstSegments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *MalwareProtectionSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MalwareProtectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MalwareProtectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppFirewallViolationContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeViolation != 0 {
		n += 1 + sovTypes(uint64(m.ExcludeViolation))
	}
	if m.Context != 0 {
		n += 1 + sovTypes(uint64(m.Context))
	}
	l = len(m.ContextName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AppFirewallSignatureContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureId != 0 {
		n += 1 + sovTypes(uint64(m.SignatureId))
	}
	if m.Context != 0 {
		n += 1 + sovTypes(uint64(m.Context))
	}
	l = len(m.ContextName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AppFirewallAttackTypeContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeAttackType != 0 {
		n += 1 + sovTypes(uint64(m.ExcludeAttackType))
	}
	if m.Context != 0 {
		n += 1 + sovTypes(uint64(m.Context))
	}
	l = len(m.ContextName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BotNameContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BotName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AppFirewallDetectionControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExcludeSignatureContexts) > 0 {
		for _, e := range m.ExcludeSignatureContexts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExcludeViolationContexts) > 0 {
		for _, e := range m.ExcludeViolationContexts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExcludeAttackTypeContexts) > 0 {
		for _, e := range m.ExcludeAttackTypeContexts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExcludeBotNameContexts) > 0 {
		for _, e := range m.ExcludeBotNameContexts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DataGuardControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BotAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != nil {
		n += m.ActionType.Size()
	}
	return n
}

func (m *BotAction_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BotAction_BotSkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotSkipProcessing != nil {
		l = m.BotSkipProcessing.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ModifyAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != nil {
		n += m.ActionType.Size()
	}
	return n
}

func (m *ModifyAction_Default) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ModifyAction_SkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipProcessing != nil {
		l = m.SkipProcessing.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WafAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != nil {
		n += m.ActionType.Size()
	}
	return n
}

func (m *WafAction_WafSkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafSkipProcessing != nil {
		l = m.WafSkipProcessing.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WafAction_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WafAction_WafInMonitoringMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafInMonitoringMode != nil {
		l = m.WafInMonitoringMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WafAction_AppFirewallDetectionControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewallDetectionControl != nil {
		l = m.AppFirewallDetectionControl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WafAction_DataGuardControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataGuardControl != nil {
		l = m.DataGuardControl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WafAction_JwtValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WafAction_JwtClaimsValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JwtClaimsValidation != nil {
		l = m.JwtClaimsValidation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ContentRewriteAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InsertContent)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ElementSelector)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovTypes(uint64(m.Position))
	}
	if len(m.InsertedTypes) > 0 {
		for k, v := range m.InsertedTypes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ShapeProtectedEndpointAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppTrafficType != 0 {
		n += 1 + sovTypes(uint64(m.AppTrafficType))
	}
	if m.Mitigation != nil {
		l = m.Mitigation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WebScraping {
		n += 2
	}
	l = len(m.FlowLabel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TransactionResult != nil {
		l = m.TransactionResult.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AllowGoodbot {
		n += 2
	}
	return n
}

func (m *ShapeBotMitigationAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != nil {
		n += m.ActionType.Size()
	}
	return n
}

func (m *ShapeBotMitigationAction_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotMitigationAction_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotMitigationAction_Redirect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Redirect != nil {
		l = m.Redirect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotMitigationAction_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotFlagMitigationActionChoiceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendHeadersChoice != nil {
		n += m.SendHeadersChoice.Size()
	}
	return n
}

func (m *ShapeBotFlagMitigationActionChoiceType_NoHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoHeaders != nil {
		l = m.NoHeaders.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotFlagMitigationActionChoiceType_AppendHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppendHeaders != nil {
		l = m.AppendHeaders.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotFlagMitigationActionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InferenceHeaderName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AutoTypeHeaderName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ShapeBotBlockMitigationActionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BodyHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ShapeBotRedirectMitigationActionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PrefixMatchList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IpPrefixes) > 0 {
		for _, s := range m.IpPrefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.InvertMatch {
		n += 2
	}
	if len(m.Ipv6Prefixes) > 0 {
		for _, s := range m.Ipv6Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AsnMatchList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AsNumbers) > 0 {
		l = 0
		for _, e := range m.AsNumbers {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *SimpleWafExclusionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	if m.PathChoice != nil {
		n += m.PathChoice.Size()
	}
	if len(m.Methods) > 0 {
		l = 0
		for _, e := range m.Methods {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafAdvancedConfiguration != nil {
		n += m.WafAdvancedConfiguration.Size()
	}
	return n
}

func (m *SimpleWafExclusionRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleWafExclusionRule_PathRegex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PathRegex)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SimpleWafExclusionRule_AppFirewallDetectionControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewallDetectionControl != nil {
		l = m.AppFirewallDetectionControl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleWafExclusionRule_ExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SimpleWafExclusionRule_SuffixValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SuffixValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SimpleWafExclusionRule_WafSkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafSkipProcessing != nil {
		l = m.WafSkipProcessing.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleWafExclusionRule_AnyPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyPath != nil {
		l = m.AnyPath.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleWafExclusionRule_PathPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PathPrefix)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *OriginServerSubsetRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ReNameList) > 0 {
		for _, s := range m.ReNameList {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CountryCodes) > 0 {
		l = 0
		for _, e := range m.CountryCodes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.SelectorChoice != nil {
		n += m.SelectorChoice.Size()
	}
	if len(m.OriginServerSubsetsAction) > 0 {
		for k, v := range m.OriginServerSubsetsAction {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.BodyMatcher != nil {
		l = m.BodyMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IpChoice != nil {
		n += m.IpChoice.Size()
	}
	if m.AsnChoice != nil {
		n += m.AsnChoice.Size()
	}
	return n
}

func (m *OriginServerSubsetRule_ClientSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSelector != nil {
		l = m.ClientSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerSubsetRule_IpMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpMatcher != nil {
		l = m.IpMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerSubsetRule_AsnMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnMatcher != nil {
		l = m.AsnMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerSubsetRule_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerSubsetRule_AnyIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyIp != nil {
		l = m.AnyIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerSubsetRule_IpPrefixList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixList != nil {
		l = m.IpPrefixList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerSubsetRule_AnyAsn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyAsn != nil {
		l = m.AnyAsn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerSubsetRule_AsnList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnList != nil {
		l = m.AsnList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleDataGuardRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ActionChoice != nil {
		n += m.ActionChoice.Size()
	}
	return n
}

func (m *SimpleDataGuardRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleDataGuardRule_ExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SimpleDataGuardRule_SuffixValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SuffixValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SimpleDataGuardRule_ApplyDataGuard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplyDataGuard != nil {
		l = m.ApplyDataGuard.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleDataGuardRule_SkipDataGuard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipDataGuard != nil {
		l = m.SkipDataGuard.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GraphQLRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	l = len(m.ExactPath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.GraphqlSettings != nil {
		l = m.GraphqlSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MethodChoice != nil {
		n += m.MethodChoice.Size()
	}
	return n
}

func (m *GraphQLRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GraphQLRule_ExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GraphQLRule_SuffixValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SuffixValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GraphQLRule_MethodGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MethodGet != nil {
		l = m.MethodGet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GraphQLRule_MethodPost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MethodPost != nil {
		l = m.MethodPost.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GraphQLSettingsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxTotalLength != 0 {
		n += 1 + sovTypes(uint64(m.MaxTotalLength))
	}
	if m.MaxValueLength != 0 {
		n += 1 + sovTypes(uint64(m.MaxValueLength))
	}
	if m.MaxDepth != 0 {
		n += 1 + sovTypes(uint64(m.MaxDepth))
	}
	if m.MaxBatchedQueries != 0 {
		n += 1 + sovTypes(uint64(m.MaxBatchedQueries))
	}
	if m.AllowIntrospectionQueriesChoice != nil {
		n += m.AllowIntrospectionQueriesChoice.Size()
	}
	return n
}

func (m *GraphQLSettingsType_DisableIntrospection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIntrospection != nil {
		l = m.DisableIntrospection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GraphQLSettingsType_EnableIntrospection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIntrospection != nil {
		l = m.EnableIntrospection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestPropertiesSelection) > 0 {
		l = 0
		for _, e := range m.RequestPropertiesSelection {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.OasValidationAction != 0 {
		n += 1 + sovTypes(uint64(m.OasValidationAction))
	}
	if len(m.ResponsePropertiesSelection) > 0 {
		l = 0
		for _, e := range m.ResponsePropertiesSelection {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.OasResponseValidationAction != 0 {
		n += 1 + sovTypes(uint64(m.OasResponseValidationAction))
	}
	return n
}

func (m *MaskingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ActionChoice != nil {
		n += m.ActionChoice.Size()
	}
	return n
}

func (m *MaskingConfig_Mask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mask != nil {
		l = m.Mask.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaskingConfig_Report) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Report != nil {
		l = m.Report.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DenyInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseCode != 0 {
		n += 1 + sovTypes(uint64(m.ResponseCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EventType != nil {
		n += m.EventType.Size()
	}
	return n
}

func (m *DenyInformation_UndefinedSecEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UndefinedSecEvent != nil {
		l = m.UndefinedSecEvent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DenyInformation_ApiSecEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSecEvent != nil {
		l = m.ApiSecEvent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TlsFingerprintMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Classes) > 0 {
		l = 0
		for _, e := range m.Classes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.ExactValues) > 0 {
		for _, s := range m.ExactValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExcludedValues) > 0 {
		for _, s := range m.ExcludedValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *JA4TlsFingerprintMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExactValues) > 0 {
		for _, s := range m.ExactValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PathMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrefixValues) > 0 {
		for _, s := range m.PrefixValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExactValues) > 0 {
		for _, s := range m.ExactValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RegexValues) > 0 {
		for _, s := range m.RegexValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Transformers) > 0 {
		l = 0
		for _, e := range m.Transformers {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.SuffixValues) > 0 {
		for _, s := range m.SuffixValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *MatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExactValues) > 0 {
		for _, s := range m.ExactValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RegexValues) > 0 {
		for _, s := range m.RegexValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Transformers) > 0 {
		l = 0
		for _, e := range m.Transformers {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *MatcherTypeBasic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExactValues) > 0 {
		for _, s := range m.ExactValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RegexValues) > 0 {
		for _, s := range m.RegexValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CookieMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Match != nil {
		n += m.Match.Size()
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *CookieMatcherType_Presence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *CookieMatcherType_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CookieMatcherType_CheckPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckPresent != nil {
		l = m.CheckPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CookieMatcherType_CheckNotPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckNotPresent != nil {
		l = m.CheckNotPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ArgMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Match != nil {
		n += m.Match.Size()
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *ArgMatcherType_Presence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ArgMatcherType_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ArgMatcherType_CheckPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckPresent != nil {
		l = m.CheckPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ArgMatcherType_CheckNotPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckNotPresent != nil {
		l = m.CheckNotPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HeaderMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Match != nil {
		n += m.Match.Size()
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *HeaderMatcherType_Presence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *HeaderMatcherType_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HeaderMatcherType_CheckPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckPresent != nil {
		l = m.CheckPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HeaderMatcherType_CheckNotPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckNotPresent != nil {
		l = m.CheckNotPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *JWTClaimMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Match != nil {
		n += m.Match.Size()
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *JWTClaimMatcherType_CheckPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckPresent != nil {
		l = m.CheckPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *JWTClaimMatcherType_CheckNotPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckNotPresent != nil {
		l = m.CheckNotPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *JWTClaimMatcherType_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HeaderMatcherTypeBasic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Match != nil {
		n += m.Match.Size()
	}
	return n
}

func (m *HeaderMatcherTypeBasic_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HeaderMatcherTypeBasic_CheckPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckPresent != nil {
		l = m.CheckPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HeaderMatcherTypeBasic_CheckNotPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckNotPresent != nil {
		l = m.CheckNotPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *QueryParameterMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Match != nil {
		n += m.Match.Size()
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *QueryParameterMatcherType_Presence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *QueryParameterMatcherType_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *QueryParameterMatcherType_CheckPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckPresent != nil {
		l = m.CheckPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *QueryParameterMatcherType_CheckNotPresent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckNotPresent != nil {
		l = m.CheckNotPresent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HttpMethodMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Methods) > 0 {
		l = 0
		for _, e := range m.Methods {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *RoleMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Match)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *StringMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Match) > 0 {
		for _, s := range m.Match {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *IpMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrefixSets) > 0 {
		for _, e := range m.PrefixSets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *AsnMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AsnSets) > 0 {
		for _, e := range m.AsnSets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PortMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *URLItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	if m.PathChoice != nil {
		n += m.PathChoice.Size()
	}
	return n
}

func (m *URLItem_DomainValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLItem_DomainRegex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainRegex)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLItem_PathValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PathValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLItem_PathRegex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PathRegex)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLItem_PathPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PathPrefix)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UrlItems) > 0 {
		for _, e := range m.UrlItems {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.InvertMatcher {
		n += 2
	}
	return n
}

func (m *L4DestMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvertMatcher {
		n += 2
	}
	if len(m.L4Dests) > 0 {
		for _, e := range m.L4Dests {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CountryCodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CountryCodes) > 0 {
		l = 0
		for _, e := range m.CountryCodes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.InvertMatch {
		n += 2
	}
	return n
}

func (m *HttpHeaderName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *HttpCookieName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *HttpQueryParameterName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *JwtTokenAuthOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecretKey != nil {
		l = m.SecretKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TokenSource != nil {
		n += m.TokenSource.Size()
	}
	if m.BackupKey != nil {
		l = m.BackupKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *JwtTokenAuthOptions_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *JwtTokenAuthOptions_Cookie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cookie != nil {
		l = m.Cookie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *JwtTokenAuthOptions_QueryParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryParam != nil {
		l = m.QueryParam.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *JwtTokenAuthOptions_BearerToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BearerToken != nil {
		l = m.BearerToken.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IPThreatCategoryListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IpThreatCategories) > 0 {
		l = 0
		for _, e := range m.IpThreatCategories {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *ClientMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientChoice != nil {
		n += m.ClientChoice.Size()
	}
	if m.IpAsnChoice != nil {
		n += m.IpAsnChoice.Size()
	}
	if m.TlsFingerprintMatcher != nil {
		l = m.TlsFingerprintMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ClientMatcher_AnyClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyClient != nil {
		l = m.AnyClient.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientMatcher_IpThreatCategoryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpThreatCategoryList != nil {
		l = m.IpThreatCategoryList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientMatcher_ClientSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSelector != nil {
		l = m.ClientSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientMatcher_AnyIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyIp != nil {
		l = m.AnyIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientMatcher_IpPrefixList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixList != nil {
		l = m.IpPrefixList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientMatcher_IpMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpMatcher != nil {
		l = m.IpMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientMatcher_AsnList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnList != nil {
		l = m.AsnList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientMatcher_AsnMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnMatcher != nil {
		l = m.AsnMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueryParams) > 0 {
		for _, e := range m.QueryParams {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CookieMatchers) > 0 {
		for _, e := range m.CookieMatchers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.JwtClaims) > 0 {
		for _, e := range m.JwtClaims {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RequestConstraintType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxCookieCountChoice != nil {
		n += m.MaxCookieCountChoice.Size()
	}
	if m.MaxCookieKeySizeChoice != nil {
		n += m.MaxCookieKeySizeChoice.Size()
	}
	if m.MaxCookieValueSizeChoice != nil {
		n += m.MaxCookieValueSizeChoice.Size()
	}
	if m.MaxHeaderCountChoice != nil {
		n += m.MaxHeaderCountChoice.Size()
	}
	if m.MaxHeaderKeySizeChoice != nil {
		n += m.MaxHeaderKeySizeChoice.Size()
	}
	if m.MaxHeaderValueSizeChoice != nil {
		n += m.MaxHeaderValueSizeChoice.Size()
	}
	if m.MaxUrlSizeChoice != nil {
		n += m.MaxUrlSizeChoice.Size()
	}
	if m.MaxQuerySizeChoice != nil {
		n += m.MaxQuerySizeChoice.Size()
	}
	if m.MaxRequestLineSizeChoice != nil {
		n += m.MaxRequestLineSizeChoice.Size()
	}
	if m.MaxRequestSizeChoice != nil {
		n += m.MaxRequestSizeChoice.Size()
	}
	if m.MaxParameterCountChoice != nil {
		n += m.MaxParameterCountChoice.Size()
	}
	if m.MaxParameterNameSizeChoice != nil {
		n += m.MaxParameterNameSizeChoice.Size()
	}
	if m.MaxParameterValueSizeChoice != nil {
		n += m.MaxParameterValueSizeChoice.Size()
	}
	return n
}

func (m *RequestConstraintType_MaxCookieCountNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxCookieCountNone != nil {
		l = m.MaxCookieCountNone.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxCookieCountExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.MaxCookieCountExceeds))
	return n
}
func (m *RequestConstraintType_MaxCookieKeySizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxCookieKeySizeNone != nil {
		l = m.MaxCookieKeySizeNone.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxCookieKeySizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.MaxCookieKeySizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxCookieValueSizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxCookieValueSizeNone != nil {
		l = m.MaxCookieValueSizeNone.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxCookieValueSizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.MaxCookieValueSizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxHeaderCountNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxHeaderCountNone != nil {
		l = m.MaxHeaderCountNone.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxHeaderCountExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.MaxHeaderCountExceeds))
	return n
}
func (m *RequestConstraintType_MaxHeaderKeySizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxHeaderKeySizeNone != nil {
		l = m.MaxHeaderKeySizeNone.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxHeaderKeySizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.MaxHeaderKeySizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxHeaderValueSizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxHeaderValueSizeNone != nil {
		l = m.MaxHeaderValueSizeNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxHeaderValueSizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.MaxHeaderValueSizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxUrlSizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxUrlSizeNone != nil {
		l = m.MaxUrlSizeNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxUrlSizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.MaxUrlSizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxQuerySizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxQuerySizeNone != nil {
		l = m.MaxQuerySizeNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxQuerySizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.MaxQuerySizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxRequestLineSizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxRequestLineSizeNone != nil {
		l = m.MaxRequestLineSizeNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxRequestLineSizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.MaxRequestLineSizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxRequestSizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxRequestSizeNone != nil {
		l = m.MaxRequestSizeNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxRequestSizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.MaxRequestSizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxParameterCountNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxParameterCountNone != nil {
		l = m.MaxParameterCountNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxParameterCountExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.MaxParameterCountExceeds))
	return n
}
func (m *RequestConstraintType_MaxParameterNameSizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxParameterNameSizeNone != nil {
		l = m.MaxParameterNameSizeNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxParameterNameSizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.MaxParameterNameSizeExceeds))
	return n
}
func (m *RequestConstraintType_MaxParameterValueSizeNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxParameterValueSizeNone != nil {
		l = m.MaxParameterValueSizeNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RequestConstraintType_MaxParameterValueSizeExceeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.MaxParameterValueSizeExceeds))
	return n
}
func (m *ActiveEnhancedFirewallPoliciesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnhancedFirewallPolicies) > 0 {
		for _, e := range m.EnhancedFirewallPolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ActiveServicePoliciesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for _, e := range m.ServicePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ActiveForwardProxyPoliciesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ForwardProxyPolicies) > 0 {
		for _, e := range m.ForwardProxyPolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SecurityPoliciesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.FirewallPolicyChoice != nil {
		n += m.FirewallPolicyChoice.Size()
	}
	return n
}

func (m *SecurityPoliciesType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityPoliciesType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityPoliciesType_NoFirewallPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoFirewallPolicy != nil {
		l = m.NoFirewallPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityPoliciesType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityPoliciesType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SegmentPolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcSegmentChoice != nil {
		n += m.SrcSegmentChoice.Size()
	}
	if m.DstSegmentChoice != nil {
		n += m.DstSegmentChoice.Size()
	}
	return n
}

func (m *SegmentPolicyType_SrcAny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcAny != nil {
		l = m.SrcAny.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SegmentPolicyType_SrcSegments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcSegments != nil {
		l = m.SrcSegments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SegmentPolicyType_DstAny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstAny != nil {
		l = m.DstAny.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SegmentPolicyType_IntraSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IntraSegment != nil {
		l = m.IntraSegment.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SegmentPolicyType_DstSegments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstSegments != nil {
		l = m.DstSegments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MalwareProtectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppFirewallViolationContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFirewallViolationContext{`,
		`ExcludeViolation:` + fmt.Sprintf("%v", this.ExcludeViolation) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`ContextName:` + fmt.Sprintf("%v", this.ContextName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFirewallSignatureContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFirewallSignatureContext{`,
		`SignatureId:` + fmt.Sprintf("%v", this.SignatureId) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`ContextName:` + fmt.Sprintf("%v", this.ContextName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFirewallAttackTypeContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFirewallAttackTypeContext{`,
		`ExcludeAttackType:` + fmt.Sprintf("%v", this.ExcludeAttackType) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`ContextName:` + fmt.Sprintf("%v", this.ContextName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotNameContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotNameContext{`,
		`BotName:` + fmt.Sprintf("%v", this.BotName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFirewallDetectionControl) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExcludeSignatureContexts := "[]*AppFirewallSignatureContext{"
	for _, f := range this.ExcludeSignatureContexts {
		repeatedStringForExcludeSignatureContexts += strings.Replace(f.String(), "AppFirewallSignatureContext", "AppFirewallSignatureContext", 1) + ","
	}
	repeatedStringForExcludeSignatureContexts += "}"
	repeatedStringForExcludeViolationContexts := "[]*AppFirewallViolationContext{"
	for _, f := range this.ExcludeViolationContexts {
		repeatedStringForExcludeViolationContexts += strings.Replace(f.String(), "AppFirewallViolationContext", "AppFirewallViolationContext", 1) + ","
	}
	repeatedStringForExcludeViolationContexts += "}"
	repeatedStringForExcludeAttackTypeContexts := "[]*AppFirewallAttackTypeContext{"
	for _, f := range this.ExcludeAttackTypeContexts {
		repeatedStringForExcludeAttackTypeContexts += strings.Replace(f.String(), "AppFirewallAttackTypeContext", "AppFirewallAttackTypeContext", 1) + ","
	}
	repeatedStringForExcludeAttackTypeContexts += "}"
	repeatedStringForExcludeBotNameContexts := "[]*BotNameContext{"
	for _, f := range this.ExcludeBotNameContexts {
		repeatedStringForExcludeBotNameContexts += strings.Replace(f.String(), "BotNameContext", "BotNameContext", 1) + ","
	}
	repeatedStringForExcludeBotNameContexts += "}"
	s := strings.Join([]string{`&AppFirewallDetectionControl{`,
		`ExcludeSignatureContexts:` + repeatedStringForExcludeSignatureContexts + `,`,
		`ExcludeViolationContexts:` + repeatedStringForExcludeViolationContexts + `,`,
		`ExcludeAttackTypeContexts:` + repeatedStringForExcludeAttackTypeContexts + `,`,
		`ExcludeBotNameContexts:` + repeatedStringForExcludeBotNameContexts + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataGuardControl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataGuardControl{`,
		`PolicyName:` + fmt.Sprintf("%v", this.PolicyName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotAction{`,
		`ActionType:` + fmt.Sprintf("%v", this.ActionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotAction_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotAction_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotAction_BotSkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotAction_BotSkipProcessing{`,
		`BotSkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.BotSkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModifyAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModifyAction{`,
		`ActionType:` + fmt.Sprintf("%v", this.ActionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModifyAction_Default) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModifyAction_Default{`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModifyAction_SkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModifyAction_SkipProcessing{`,
		`SkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.SkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafAction{`,
		`ActionType:` + fmt.Sprintf("%v", this.ActionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafAction_WafSkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafAction_WafSkipProcessing{`,
		`WafSkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.WafSkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafAction_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafAction_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafAction_WafInMonitoringMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafAction_WafInMonitoringMode{`,
		`WafInMonitoringMode:` + strings.Replace(fmt.Sprintf("%v", this.WafInMonitoringMode), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafAction_AppFirewallDetectionControl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafAction_AppFirewallDetectionControl{`,
		`AppFirewallDetectionControl:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewallDetectionControl), "AppFirewallDetectionControl", "AppFirewallDetectionControl", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafAction_DataGuardControl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafAction_DataGuardControl{`,
		`DataGuardControl:` + strings.Replace(fmt.Sprintf("%v", this.DataGuardControl), "DataGuardControl", "DataGuardControl", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafAction_JwtValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafAction_JwtValidation{`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WafAction_JwtClaimsValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WafAction_JwtClaimsValidation{`,
		`JwtClaimsValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtClaimsValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContentRewriteAction) String() string {
	if this == nil {
		return "nil"
	}
	keysForInsertedTypes := make([]string, 0, len(this.InsertedTypes))
	for k, _ := range this.InsertedTypes {
		keysForInsertedTypes = append(keysForInsertedTypes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInsertedTypes)
	mapStringForInsertedTypes := "map[string]bool{"
	for _, k := range keysForInsertedTypes {
		mapStringForInsertedTypes += fmt.Sprintf("%v: %v,", k, this.InsertedTypes[k])
	}
	mapStringForInsertedTypes += "}"
	s := strings.Join([]string{`&ContentRewriteAction{`,
		`InsertContent:` + fmt.Sprintf("%v", this.InsertContent) + `,`,
		`ElementSelector:` + fmt.Sprintf("%v", this.ElementSelector) + `,`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`InsertedTypes:` + mapStringForInsertedTypes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeProtectedEndpointAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeProtectedEndpointAction{`,
		`AppTrafficType:` + fmt.Sprintf("%v", this.AppTrafficType) + `,`,
		`Mitigation:` + strings.Replace(this.Mitigation.String(), "ShapeBotMitigationAction", "ShapeBotMitigationAction", 1) + `,`,
		`WebScraping:` + fmt.Sprintf("%v", this.WebScraping) + `,`,
		`FlowLabel:` + fmt.Sprintf("%v", this.FlowLabel) + `,`,
		`TransactionResult:` + strings.Replace(fmt.Sprintf("%v", this.TransactionResult), "BotDefenseTransactionResultType", "schema.BotDefenseTransactionResultType", 1) + `,`,
		`AllowGoodbot:` + fmt.Sprintf("%v", this.AllowGoodbot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotMitigationAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotMitigationAction{`,
		`ActionType:` + fmt.Sprintf("%v", this.ActionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotMitigationAction_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotMitigationAction_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotMitigationAction_Block) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotMitigationAction_Block{`,
		`Block:` + strings.Replace(fmt.Sprintf("%v", this.Block), "ShapeBotBlockMitigationActionType", "ShapeBotBlockMitigationActionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotMitigationAction_Redirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotMitigationAction_Redirect{`,
		`Redirect:` + strings.Replace(fmt.Sprintf("%v", this.Redirect), "ShapeBotRedirectMitigationActionType", "ShapeBotRedirectMitigationActionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotMitigationAction_Flag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotMitigationAction_Flag{`,
		`Flag:` + strings.Replace(fmt.Sprintf("%v", this.Flag), "ShapeBotFlagMitigationActionChoiceType", "ShapeBotFlagMitigationActionChoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotFlagMitigationActionChoiceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotFlagMitigationActionChoiceType{`,
		`SendHeadersChoice:` + fmt.Sprintf("%v", this.SendHeadersChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotFlagMitigationActionChoiceType_NoHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotFlagMitigationActionChoiceType_NoHeaders{`,
		`NoHeaders:` + strings.Replace(fmt.Sprintf("%v", this.NoHeaders), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotFlagMitigationActionChoiceType_AppendHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotFlagMitigationActionChoiceType_AppendHeaders{`,
		`AppendHeaders:` + strings.Replace(fmt.Sprintf("%v", this.AppendHeaders), "ShapeBotFlagMitigationActionType", "ShapeBotFlagMitigationActionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotFlagMitigationActionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotFlagMitigationActionType{`,
		`InferenceHeaderName:` + fmt.Sprintf("%v", this.InferenceHeaderName) + `,`,
		`AutoTypeHeaderName:` + fmt.Sprintf("%v", this.AutoTypeHeaderName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotBlockMitigationActionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotBlockMitigationActionType{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`BodyHash:` + fmt.Sprintf("%v", this.BodyHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotRedirectMitigationActionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotRedirectMitigationActionType{`,
		`Uri:` + fmt.Sprintf("%v", this.Uri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrefixMatchList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrefixMatchList{`,
		`IpPrefixes:` + fmt.Sprintf("%v", this.IpPrefixes) + `,`,
		`InvertMatch:` + fmt.Sprintf("%v", this.InvertMatch) + `,`,
		`Ipv6Prefixes:` + fmt.Sprintf("%v", this.Ipv6Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AsnMatchList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AsnMatchList{`,
		`AsNumbers:` + fmt.Sprintf("%v", this.AsNumbers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`PathChoice:` + fmt.Sprintf("%v", this.PathChoice) + `,`,
		`Methods:` + fmt.Sprintf("%v", this.Methods) + `,`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`WafAdvancedConfiguration:` + fmt.Sprintf("%v", this.WafAdvancedConfiguration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule_PathRegex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule_PathRegex{`,
		`PathRegex:` + fmt.Sprintf("%v", this.PathRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule_AppFirewallDetectionControl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule_AppFirewallDetectionControl{`,
		`AppFirewallDetectionControl:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewallDetectionControl), "AppFirewallDetectionControl", "AppFirewallDetectionControl", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule_SuffixValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule_SuffixValue{`,
		`SuffixValue:` + fmt.Sprintf("%v", this.SuffixValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule_WafSkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule_WafSkipProcessing{`,
		`WafSkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.WafSkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule_AnyPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule_AnyPath{`,
		`AnyPath:` + strings.Replace(fmt.Sprintf("%v", this.AnyPath), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleWafExclusionRule_PathPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleWafExclusionRule_PathPrefix{`,
		`PathPrefix:` + fmt.Sprintf("%v", this.PathPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule) String() string {
	if this == nil {
		return "nil"
	}
	keysForOriginServerSubsetsAction := make([]string, 0, len(this.OriginServerSubsetsAction))
	for k, _ := range this.OriginServerSubsetsAction {
		keysForOriginServerSubsetsAction = append(keysForOriginServerSubsetsAction, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOriginServerSubsetsAction)
	mapStringForOriginServerSubsetsAction := "map[string]string{"
	for _, k := range keysForOriginServerSubsetsAction {
		mapStringForOriginServerSubsetsAction += fmt.Sprintf("%v: %v,", k, this.OriginServerSubsetsAction[k])
	}
	mapStringForOriginServerSubsetsAction += "}"
	s := strings.Join([]string{`&OriginServerSubsetRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`ReNameList:` + fmt.Sprintf("%v", this.ReNameList) + `,`,
		`CountryCodes:` + fmt.Sprintf("%v", this.CountryCodes) + `,`,
		`SelectorChoice:` + fmt.Sprintf("%v", this.SelectorChoice) + `,`,
		`OriginServerSubsetsAction:` + mapStringForOriginServerSubsetsAction + `,`,
		`BodyMatcher:` + strings.Replace(this.BodyMatcher.String(), "MatcherType", "MatcherType", 1) + `,`,
		`IpChoice:` + fmt.Sprintf("%v", this.IpChoice) + `,`,
		`AsnChoice:` + fmt.Sprintf("%v", this.AsnChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule_ClientSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerSubsetRule_ClientSelector{`,
		`ClientSelector:` + strings.Replace(fmt.Sprintf("%v", this.ClientSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule_IpMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerSubsetRule_IpMatcher{`,
		`IpMatcher:` + strings.Replace(fmt.Sprintf("%v", this.IpMatcher), "IpMatcherType", "IpMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule_AsnMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerSubsetRule_AsnMatcher{`,
		`AsnMatcher:` + strings.Replace(fmt.Sprintf("%v", this.AsnMatcher), "AsnMatcherType", "AsnMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerSubsetRule_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule_AnyIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerSubsetRule_AnyIp{`,
		`AnyIp:` + strings.Replace(fmt.Sprintf("%v", this.AnyIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule_IpPrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerSubsetRule_IpPrefixList{`,
		`IpPrefixList:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixList), "PrefixMatchList", "PrefixMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule_AnyAsn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerSubsetRule_AnyAsn{`,
		`AnyAsn:` + strings.Replace(fmt.Sprintf("%v", this.AnyAsn), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRule_AsnList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerSubsetRule_AsnList{`,
		`AsnList:` + strings.Replace(fmt.Sprintf("%v", this.AsnList), "AsnMatchList", "AsnMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleDataGuardRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleDataGuardRule{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`ActionChoice:` + fmt.Sprintf("%v", this.ActionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleDataGuardRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleDataGuardRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleDataGuardRule_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleDataGuardRule_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleDataGuardRule_SuffixValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleDataGuardRule_SuffixValue{`,
		`SuffixValue:` + fmt.Sprintf("%v", this.SuffixValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleDataGuardRule_ApplyDataGuard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleDataGuardRule_ApplyDataGuard{`,
		`ApplyDataGuard:` + strings.Replace(fmt.Sprintf("%v", this.ApplyDataGuard), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleDataGuardRule_SkipDataGuard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleDataGuardRule_SkipDataGuard{`,
		`SkipDataGuard:` + strings.Replace(fmt.Sprintf("%v", this.SkipDataGuard), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`ExactPath:` + fmt.Sprintf("%v", this.ExactPath) + `,`,
		`GraphqlSettings:` + strings.Replace(this.GraphqlSettings.String(), "GraphQLSettingsType", "GraphQLSettingsType", 1) + `,`,
		`MethodChoice:` + fmt.Sprintf("%v", this.MethodChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLRule_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLRule_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLRule_SuffixValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLRule_SuffixValue{`,
		`SuffixValue:` + fmt.Sprintf("%v", this.SuffixValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLRule_MethodGet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLRule_MethodGet{`,
		`MethodGet:` + strings.Replace(fmt.Sprintf("%v", this.MethodGet), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLRule_MethodPost) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLRule_MethodPost{`,
		`MethodPost:` + strings.Replace(fmt.Sprintf("%v", this.MethodPost), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLSettingsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLSettingsType{`,
		`PolicyName:` + fmt.Sprintf("%v", this.PolicyName) + `,`,
		`MaxTotalLength:` + fmt.Sprintf("%v", this.MaxTotalLength) + `,`,
		`MaxValueLength:` + fmt.Sprintf("%v", this.MaxValueLength) + `,`,
		`MaxDepth:` + fmt.Sprintf("%v", this.MaxDepth) + `,`,
		`MaxBatchedQueries:` + fmt.Sprintf("%v", this.MaxBatchedQueries) + `,`,
		`AllowIntrospectionQueriesChoice:` + fmt.Sprintf("%v", this.AllowIntrospectionQueriesChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLSettingsType_DisableIntrospection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLSettingsType_DisableIntrospection{`,
		`DisableIntrospection:` + strings.Replace(fmt.Sprintf("%v", this.DisableIntrospection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphQLSettingsType_EnableIntrospection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphQLSettingsType_EnableIntrospection{`,
		`EnableIntrospection:` + strings.Replace(fmt.Sprintf("%v", this.EnableIntrospection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationAction{`,
		`RequestPropertiesSelection:` + fmt.Sprintf("%v", this.RequestPropertiesSelection) + `,`,
		`OasValidationAction:` + fmt.Sprintf("%v", this.OasValidationAction) + `,`,
		`ResponsePropertiesSelection:` + fmt.Sprintf("%v", this.ResponsePropertiesSelection) + `,`,
		`OasResponseValidationAction:` + fmt.Sprintf("%v", this.OasResponseValidationAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaskingConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaskingConfig{`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`ActionChoice:` + fmt.Sprintf("%v", this.ActionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaskingConfig_Mask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaskingConfig_Mask{`,
		`Mask:` + strings.Replace(fmt.Sprintf("%v", this.Mask), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaskingConfig_Report) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaskingConfig_Report{`,
		`Report:` + strings.Replace(fmt.Sprintf("%v", this.Report), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DenyInformation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DenyInformation{`,
		`ResponseCode:` + fmt.Sprintf("%v", this.ResponseCode) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DenyInformation_UndefinedSecEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DenyInformation_UndefinedSecEvent{`,
		`UndefinedSecEvent:` + strings.Replace(fmt.Sprintf("%v", this.UndefinedSecEvent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DenyInformation_ApiSecEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DenyInformation_ApiSecEvent{`,
		`ApiSecEvent:` + strings.Replace(fmt.Sprintf("%v", this.ApiSecEvent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsFingerprintMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TlsFingerprintMatcherType{`,
		`Classes:` + fmt.Sprintf("%v", this.Classes) + `,`,
		`ExactValues:` + fmt.Sprintf("%v", this.ExactValues) + `,`,
		`ExcludedValues:` + fmt.Sprintf("%v", this.ExcludedValues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JA4TlsFingerprintMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JA4TlsFingerprintMatcherType{`,
		`ExactValues:` + fmt.Sprintf("%v", this.ExactValues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PathMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PathMatcherType{`,
		`PrefixValues:` + fmt.Sprintf("%v", this.PrefixValues) + `,`,
		`ExactValues:` + fmt.Sprintf("%v", this.ExactValues) + `,`,
		`RegexValues:` + fmt.Sprintf("%v", this.RegexValues) + `,`,
		`Transformers:` + fmt.Sprintf("%v", this.Transformers) + `,`,
		`SuffixValues:` + fmt.Sprintf("%v", this.SuffixValues) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatcherType{`,
		`ExactValues:` + fmt.Sprintf("%v", this.ExactValues) + `,`,
		`RegexValues:` + fmt.Sprintf("%v", this.RegexValues) + `,`,
		`Transformers:` + fmt.Sprintf("%v", this.Transformers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatcherTypeBasic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatcherTypeBasic{`,
		`ExactValues:` + fmt.Sprintf("%v", this.ExactValues) + `,`,
		`RegexValues:` + fmt.Sprintf("%v", this.RegexValues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CookieMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CookieMatcherType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CookieMatcherType_Presence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CookieMatcherType_Presence{`,
		`Presence:` + fmt.Sprintf("%v", this.Presence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CookieMatcherType_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CookieMatcherType_Item{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "MatcherType", "MatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CookieMatcherType_CheckPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CookieMatcherType_CheckPresent{`,
		`CheckPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CookieMatcherType_CheckNotPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CookieMatcherType_CheckNotPresent{`,
		`CheckNotPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckNotPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArgMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArgMatcherType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArgMatcherType_Presence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArgMatcherType_Presence{`,
		`Presence:` + fmt.Sprintf("%v", this.Presence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArgMatcherType_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArgMatcherType_Item{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "MatcherType", "MatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArgMatcherType_CheckPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArgMatcherType_CheckPresent{`,
		`CheckPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArgMatcherType_CheckNotPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArgMatcherType_CheckNotPresent{`,
		`CheckNotPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckNotPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherType_Presence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherType_Presence{`,
		`Presence:` + fmt.Sprintf("%v", this.Presence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherType_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherType_Item{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "MatcherType", "MatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherType_CheckPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherType_CheckPresent{`,
		`CheckPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherType_CheckNotPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherType_CheckNotPresent{`,
		`CheckNotPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckNotPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTClaimMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWTClaimMatcherType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTClaimMatcherType_CheckPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWTClaimMatcherType_CheckPresent{`,
		`CheckPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTClaimMatcherType_CheckNotPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWTClaimMatcherType_CheckNotPresent{`,
		`CheckNotPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckNotPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTClaimMatcherType_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWTClaimMatcherType_Item{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "MatcherType", "MatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherTypeBasic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherTypeBasic{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherTypeBasic_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherTypeBasic_Item{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "MatcherType", "MatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherTypeBasic_CheckPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherTypeBasic_CheckPresent{`,
		`CheckPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderMatcherTypeBasic_CheckNotPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderMatcherTypeBasic_CheckNotPresent{`,
		`CheckNotPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckNotPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryParameterMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryParameterMatcherType{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryParameterMatcherType_Presence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryParameterMatcherType_Presence{`,
		`Presence:` + fmt.Sprintf("%v", this.Presence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryParameterMatcherType_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryParameterMatcherType_Item{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "MatcherType", "MatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryParameterMatcherType_CheckPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryParameterMatcherType_CheckPresent{`,
		`CheckPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryParameterMatcherType_CheckNotPresent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryParameterMatcherType_CheckNotPresent{`,
		`CheckNotPresent:` + strings.Replace(fmt.Sprintf("%v", this.CheckNotPresent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpMethodMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpMethodMatcherType{`,
		`Methods:` + fmt.Sprintf("%v", this.Methods) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleMatcherType{`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringMatcherType{`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPrefixSets := "[]*ObjectRefType{"
	for _, f := range this.PrefixSets {
		repeatedStringForPrefixSets += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForPrefixSets += "}"
	s := strings.Join([]string{`&IpMatcherType{`,
		`PrefixSets:` + repeatedStringForPrefixSets + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AsnMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAsnSets := "[]*ObjectRefType{"
	for _, f := range this.AsnSets {
		repeatedStringForAsnSets += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAsnSets += "}"
	s := strings.Join([]string{`&AsnMatcherType{`,
		`AsnSets:` + repeatedStringForAsnSets + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortMatcherType{`,
		`Ports:` + fmt.Sprintf("%v", this.Ports) + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLItem{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`PathChoice:` + fmt.Sprintf("%v", this.PathChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLItem_DomainValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLItem_DomainValue{`,
		`DomainValue:` + fmt.Sprintf("%v", this.DomainValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLItem_DomainRegex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLItem_DomainRegex{`,
		`DomainRegex:` + fmt.Sprintf("%v", this.DomainRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLItem_PathValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLItem_PathValue{`,
		`PathValue:` + fmt.Sprintf("%v", this.PathValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLItem_PathRegex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLItem_PathRegex{`,
		`PathRegex:` + fmt.Sprintf("%v", this.PathRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLItem_PathPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLItem_PathPrefix{`,
		`PathPrefix:` + fmt.Sprintf("%v", this.PathPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUrlItems := "[]*URLItem{"
	for _, f := range this.UrlItems {
		repeatedStringForUrlItems += strings.Replace(f.String(), "URLItem", "URLItem", 1) + ","
	}
	repeatedStringForUrlItems += "}"
	s := strings.Join([]string{`&URLMatcherType{`,
		`UrlItems:` + repeatedStringForUrlItems + `,`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`}`,
	}, "")
	return s
}
func (this *L4DestMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForL4Dests := "[]*L4DestType{"
	for _, f := range this.L4Dests {
		repeatedStringForL4Dests += strings.Replace(fmt.Sprintf("%v", f), "L4DestType", "schema.L4DestType", 1) + ","
	}
	repeatedStringForL4Dests += "}"
	s := strings.Join([]string{`&L4DestMatcherType{`,
		`InvertMatcher:` + fmt.Sprintf("%v", this.InvertMatcher) + `,`,
		`L4Dests:` + repeatedStringForL4Dests + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountryCodeList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CountryCodeList{`,
		`CountryCodes:` + fmt.Sprintf("%v", this.CountryCodes) + `,`,
		`InvertMatch:` + fmt.Sprintf("%v", this.InvertMatch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHeaderName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpHeaderName{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpCookieName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpCookieName{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpQueryParameterName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpQueryParameterName{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JwtTokenAuthOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JwtTokenAuthOptions{`,
		`SecretKey:` + strings.Replace(fmt.Sprintf("%v", this.SecretKey), "SecretType", "schema.SecretType", 1) + `,`,
		`TokenSource:` + fmt.Sprintf("%v", this.TokenSource) + `,`,
		`BackupKey:` + strings.Replace(fmt.Sprintf("%v", this.BackupKey), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JwtTokenAuthOptions_Header) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JwtTokenAuthOptions_Header{`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "HttpHeaderName", "HttpHeaderName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JwtTokenAuthOptions_Cookie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JwtTokenAuthOptions_Cookie{`,
		`Cookie:` + strings.Replace(fmt.Sprintf("%v", this.Cookie), "HttpCookieName", "HttpCookieName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JwtTokenAuthOptions_QueryParam) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JwtTokenAuthOptions_QueryParam{`,
		`QueryParam:` + strings.Replace(fmt.Sprintf("%v", this.QueryParam), "HttpQueryParameterName", "HttpQueryParameterName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JwtTokenAuthOptions_BearerToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JwtTokenAuthOptions_BearerToken{`,
		`BearerToken:` + strings.Replace(fmt.Sprintf("%v", this.BearerToken), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPThreatCategoryListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPThreatCategoryListType{`,
		`IpThreatCategories:` + fmt.Sprintf("%v", this.IpThreatCategories) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher{`,
		`ClientChoice:` + fmt.Sprintf("%v", this.ClientChoice) + `,`,
		`IpAsnChoice:` + fmt.Sprintf("%v", this.IpAsnChoice) + `,`,
		`TlsFingerprintMatcher:` + strings.Replace(this.TlsFingerprintMatcher.String(), "TlsFingerprintMatcherType", "TlsFingerprintMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher_AnyClient) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher_AnyClient{`,
		`AnyClient:` + strings.Replace(fmt.Sprintf("%v", this.AnyClient), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher_IpThreatCategoryList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher_IpThreatCategoryList{`,
		`IpThreatCategoryList:` + strings.Replace(fmt.Sprintf("%v", this.IpThreatCategoryList), "IPThreatCategoryListType", "IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher_ClientSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher_ClientSelector{`,
		`ClientSelector:` + strings.Replace(fmt.Sprintf("%v", this.ClientSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher_AnyIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher_AnyIp{`,
		`AnyIp:` + strings.Replace(fmt.Sprintf("%v", this.AnyIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher_IpPrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher_IpPrefixList{`,
		`IpPrefixList:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixList), "PrefixMatchList", "PrefixMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher_IpMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher_IpMatcher{`,
		`IpMatcher:` + strings.Replace(fmt.Sprintf("%v", this.IpMatcher), "IpMatcherType", "IpMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher_AsnList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher_AsnList{`,
		`AsnList:` + strings.Replace(fmt.Sprintf("%v", this.AsnList), "AsnMatchList", "AsnMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMatcher_AsnMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMatcher_AsnMatcher{`,
		`AsnMatcher:` + strings.Replace(fmt.Sprintf("%v", this.AsnMatcher), "AsnMatcherType", "AsnMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMatcher) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueryParams := "[]*QueryParameterMatcherType{"
	for _, f := range this.QueryParams {
		repeatedStringForQueryParams += strings.Replace(f.String(), "QueryParameterMatcherType", "QueryParameterMatcherType", 1) + ","
	}
	repeatedStringForQueryParams += "}"
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(f.String(), "HeaderMatcherType", "HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	repeatedStringForCookieMatchers := "[]*CookieMatcherType{"
	for _, f := range this.CookieMatchers {
		repeatedStringForCookieMatchers += strings.Replace(f.String(), "CookieMatcherType", "CookieMatcherType", 1) + ","
	}
	repeatedStringForCookieMatchers += "}"
	repeatedStringForJwtClaims := "[]*JWTClaimMatcherType{"
	for _, f := range this.JwtClaims {
		repeatedStringForJwtClaims += strings.Replace(f.String(), "JWTClaimMatcherType", "JWTClaimMatcherType", 1) + ","
	}
	repeatedStringForJwtClaims += "}"
	s := strings.Join([]string{`&RequestMatcher{`,
		`QueryParams:` + repeatedStringForQueryParams + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`CookieMatchers:` + repeatedStringForCookieMatchers + `,`,
		`JwtClaims:` + repeatedStringForJwtClaims + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType{`,
		`MaxCookieCountChoice:` + fmt.Sprintf("%v", this.MaxCookieCountChoice) + `,`,
		`MaxCookieKeySizeChoice:` + fmt.Sprintf("%v", this.MaxCookieKeySizeChoice) + `,`,
		`MaxCookieValueSizeChoice:` + fmt.Sprintf("%v", this.MaxCookieValueSizeChoice) + `,`,
		`MaxHeaderCountChoice:` + fmt.Sprintf("%v", this.MaxHeaderCountChoice) + `,`,
		`MaxHeaderKeySizeChoice:` + fmt.Sprintf("%v", this.MaxHeaderKeySizeChoice) + `,`,
		`MaxHeaderValueSizeChoice:` + fmt.Sprintf("%v", this.MaxHeaderValueSizeChoice) + `,`,
		`MaxUrlSizeChoice:` + fmt.Sprintf("%v", this.MaxUrlSizeChoice) + `,`,
		`MaxQuerySizeChoice:` + fmt.Sprintf("%v", this.MaxQuerySizeChoice) + `,`,
		`MaxRequestLineSizeChoice:` + fmt.Sprintf("%v", this.MaxRequestLineSizeChoice) + `,`,
		`MaxRequestSizeChoice:` + fmt.Sprintf("%v", this.MaxRequestSizeChoice) + `,`,
		`MaxParameterCountChoice:` + fmt.Sprintf("%v", this.MaxParameterCountChoice) + `,`,
		`MaxParameterNameSizeChoice:` + fmt.Sprintf("%v", this.MaxParameterNameSizeChoice) + `,`,
		`MaxParameterValueSizeChoice:` + fmt.Sprintf("%v", this.MaxParameterValueSizeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxCookieCountNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxCookieCountNone{`,
		`MaxCookieCountNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxCookieCountNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxCookieCountExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxCookieCountExceeds{`,
		`MaxCookieCountExceeds:` + fmt.Sprintf("%v", this.MaxCookieCountExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxCookieKeySizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxCookieKeySizeNone{`,
		`MaxCookieKeySizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxCookieKeySizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxCookieKeySizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxCookieKeySizeExceeds{`,
		`MaxCookieKeySizeExceeds:` + fmt.Sprintf("%v", this.MaxCookieKeySizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxCookieValueSizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxCookieValueSizeNone{`,
		`MaxCookieValueSizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxCookieValueSizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxCookieValueSizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxCookieValueSizeExceeds{`,
		`MaxCookieValueSizeExceeds:` + fmt.Sprintf("%v", this.MaxCookieValueSizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxHeaderCountNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxHeaderCountNone{`,
		`MaxHeaderCountNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxHeaderCountNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxHeaderCountExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxHeaderCountExceeds{`,
		`MaxHeaderCountExceeds:` + fmt.Sprintf("%v", this.MaxHeaderCountExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxHeaderKeySizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxHeaderKeySizeNone{`,
		`MaxHeaderKeySizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxHeaderKeySizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxHeaderKeySizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxHeaderKeySizeExceeds{`,
		`MaxHeaderKeySizeExceeds:` + fmt.Sprintf("%v", this.MaxHeaderKeySizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxHeaderValueSizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxHeaderValueSizeNone{`,
		`MaxHeaderValueSizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxHeaderValueSizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxHeaderValueSizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxHeaderValueSizeExceeds{`,
		`MaxHeaderValueSizeExceeds:` + fmt.Sprintf("%v", this.MaxHeaderValueSizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxUrlSizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxUrlSizeNone{`,
		`MaxUrlSizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxUrlSizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxUrlSizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxUrlSizeExceeds{`,
		`MaxUrlSizeExceeds:` + fmt.Sprintf("%v", this.MaxUrlSizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxQuerySizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxQuerySizeNone{`,
		`MaxQuerySizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxQuerySizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxQuerySizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxQuerySizeExceeds{`,
		`MaxQuerySizeExceeds:` + fmt.Sprintf("%v", this.MaxQuerySizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxRequestLineSizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxRequestLineSizeNone{`,
		`MaxRequestLineSizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxRequestLineSizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxRequestLineSizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxRequestLineSizeExceeds{`,
		`MaxRequestLineSizeExceeds:` + fmt.Sprintf("%v", this.MaxRequestLineSizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxRequestSizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxRequestSizeNone{`,
		`MaxRequestSizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxRequestSizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxRequestSizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxRequestSizeExceeds{`,
		`MaxRequestSizeExceeds:` + fmt.Sprintf("%v", this.MaxRequestSizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxParameterCountNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxParameterCountNone{`,
		`MaxParameterCountNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxParameterCountNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxParameterCountExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxParameterCountExceeds{`,
		`MaxParameterCountExceeds:` + fmt.Sprintf("%v", this.MaxParameterCountExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxParameterNameSizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxParameterNameSizeNone{`,
		`MaxParameterNameSizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxParameterNameSizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxParameterNameSizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxParameterNameSizeExceeds{`,
		`MaxParameterNameSizeExceeds:` + fmt.Sprintf("%v", this.MaxParameterNameSizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxParameterValueSizeNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxParameterValueSizeNone{`,
		`MaxParameterValueSizeNone:` + strings.Replace(fmt.Sprintf("%v", this.MaxParameterValueSizeNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestConstraintType_MaxParameterValueSizeExceeds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestConstraintType_MaxParameterValueSizeExceeds{`,
		`MaxParameterValueSizeExceeds:` + fmt.Sprintf("%v", this.MaxParameterValueSizeExceeds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActiveEnhancedFirewallPoliciesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEnhancedFirewallPolicies := "[]*ObjectRefType{"
	for _, f := range this.EnhancedFirewallPolicies {
		repeatedStringForEnhancedFirewallPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForEnhancedFirewallPolicies += "}"
	s := strings.Join([]string{`&ActiveEnhancedFirewallPoliciesType{`,
		`EnhancedFirewallPolicies:` + repeatedStringForEnhancedFirewallPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActiveServicePoliciesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServicePolicies := "[]*ObjectRefType{"
	for _, f := range this.ServicePolicies {
		repeatedStringForServicePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForServicePolicies += "}"
	s := strings.Join([]string{`&ActiveServicePoliciesType{`,
		`ServicePolicies:` + repeatedStringForServicePolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActiveForwardProxyPoliciesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForForwardProxyPolicies := "[]*ObjectRefType{"
	for _, f := range this.ForwardProxyPolicies {
		repeatedStringForForwardProxyPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForForwardProxyPolicies += "}"
	s := strings.Join([]string{`&ActiveForwardProxyPoliciesType{`,
		`ForwardProxyPolicies:` + repeatedStringForForwardProxyPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityPoliciesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityPoliciesType{`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`FirewallPolicyChoice:` + fmt.Sprintf("%v", this.FirewallPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityPoliciesType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityPoliciesType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityPoliciesType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityPoliciesType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityPoliciesType_NoFirewallPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityPoliciesType_NoFirewallPolicy{`,
		`NoFirewallPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoFirewallPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityPoliciesType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityPoliciesType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityPoliciesType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityPoliciesType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ActiveServicePoliciesType", "ActiveServicePoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentPolicyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentPolicyType{`,
		`SrcSegmentChoice:` + fmt.Sprintf("%v", this.SrcSegmentChoice) + `,`,
		`DstSegmentChoice:` + fmt.Sprintf("%v", this.DstSegmentChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentPolicyType_SrcAny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentPolicyType_SrcAny{`,
		`SrcAny:` + strings.Replace(fmt.Sprintf("%v", this.SrcAny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentPolicyType_SrcSegments) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentPolicyType_SrcSegments{`,
		`SrcSegments:` + strings.Replace(fmt.Sprintf("%v", this.SrcSegments), "SegmentRefList", "views.SegmentRefList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentPolicyType_DstAny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentPolicyType_DstAny{`,
		`DstAny:` + strings.Replace(fmt.Sprintf("%v", this.DstAny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentPolicyType_IntraSegment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentPolicyType_IntraSegment{`,
		`IntraSegment:` + strings.Replace(fmt.Sprintf("%v", this.IntraSegment), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentPolicyType_DstSegments) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentPolicyType_DstSegments{`,
		`DstSegments:` + strings.Replace(fmt.Sprintf("%v", this.DstSegments), "SegmentRefList", "views.SegmentRefList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MalwareProtectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MalwareProtectionSettings{`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "Action", "schema.Action", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppFirewallViolationContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFirewallViolationContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFirewallViolationContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeViolation", wireType)
			}
			m.ExcludeViolation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExcludeViolation |= app_firewall.AppFirewallViolationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= DetectionContext(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFirewallSignatureContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFirewallSignatureContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFirewallSignatureContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureId", wireType)
			}
			m.SignatureId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignatureId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= DetectionContext(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFirewallAttackTypeContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFirewallAttackTypeContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFirewallAttackTypeContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeAttackType", wireType)
			}
			m.ExcludeAttackType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExcludeAttackType |= app_firewall.AttackType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= DetectionContext(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotNameContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotNameContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotNameContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFirewallDetectionControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFirewallDetectionControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFirewallDetectionControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeSignatureContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeSignatureContexts = append(m.ExcludeSignatureContexts, &AppFirewallSignatureContext{})
			if err := m.ExcludeSignatureContexts[len(m.ExcludeSignatureContexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeViolationContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeViolationContexts = append(m.ExcludeViolationContexts, &AppFirewallViolationContext{})
			if err := m.ExcludeViolationContexts[len(m.ExcludeViolationContexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeAttackTypeContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeAttackTypeContexts = append(m.ExcludeAttackTypeContexts, &AppFirewallAttackTypeContext{})
			if err := m.ExcludeAttackTypeContexts[len(m.ExcludeAttackTypeContexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeBotNameContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeBotNameContexts = append(m.ExcludeBotNameContexts, &BotNameContext{})
			if err := m.ExcludeBotNameContexts[len(m.ExcludeBotNameContexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataGuardControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataGuardControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataGuardControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &BotAction_None{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotSkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &BotAction_BotSkipProcessing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &ModifyAction_Default{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &ModifyAction_SkipProcessing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WafAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WafAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WafAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &WafAction_WafSkipProcessing{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &WafAction_None{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafInMonitoringMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &WafAction_WafInMonitoringMode{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewallDetectionControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppFirewallDetectionControl{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &WafAction_AppFirewallDetectionControl{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataGuardControl{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &WafAction_DataGuardControl{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &WafAction_JwtValidation{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtClaimsValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &WafAction_JwtClaimsValidation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentRewriteAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentRewriteAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentRewriteAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsertContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= HTMLPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertedTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InsertedTypes == nil {
				m.InsertedTypes = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InsertedTypes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeProtectedEndpointAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeProtectedEndpointAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeProtectedEndpointAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTrafficType", wireType)
			}
			m.AppTrafficType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppTrafficType |= AppTrafficType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mitigation == nil {
				m.Mitigation = &ShapeBotMitigationAction{}
			}
			if err := m.Mitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebScraping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WebScraping = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionResult == nil {
				m.TransactionResult = &schema.BotDefenseTransactionResultType{}
			}
			if err := m.TransactionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowGoodbot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowGoodbot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotMitigationAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotMitigationAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotMitigationAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &ShapeBotMitigationAction_None{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotBlockMitigationActionType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &ShapeBotMitigationAction_Block{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redirect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotRedirectMitigationActionType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &ShapeBotMitigationAction_Redirect{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotFlagMitigationActionChoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &ShapeBotMitigationAction_Flag{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotFlagMitigationActionChoiceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotFlagMitigationActionChoiceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotFlagMitigationActionChoiceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SendHeadersChoice = &ShapeBotFlagMitigationActionChoiceType_NoHeaders{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotFlagMitigationActionType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SendHeadersChoice = &ShapeBotFlagMitigationActionChoiceType_AppendHeaders{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotFlagMitigationActionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotFlagMitigationActionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotFlagMitigationActionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceHeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceHeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoTypeHeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoTypeHeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotBlockMitigationActionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotBlockMitigationActionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotBlockMitigationActionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= schema.HttpStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotRedirectMitigationActionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotRedirectMitigationActionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotRedirectMitigationActionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixMatchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixMatchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixMatchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpPrefixes = append(m.IpPrefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatch = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6Prefixes = append(m.Ipv6Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AsnMatchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AsnMatchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AsnMatchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AsNumbers = append(m.AsNumbers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AsNumbers) == 0 {
					m.AsNumbers = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AsNumbers = append(m.AsNumbers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AsNumbers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleWafExclusionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleWafExclusionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleWafExclusionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &SimpleWafExclusionRule_AnyDomain{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &SimpleWafExclusionRule_PathRegex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v schema.HttpMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.HttpMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Methods = append(m.Methods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Methods) == 0 {
					m.Methods = make([]schema.HttpMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.HttpMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.HttpMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Methods = append(m.Methods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTimestamp == nil {
				m.ExpirationTimestamp = &types.Timestamp{}
			}
			if err := m.ExpirationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewallDetectionControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppFirewallDetectionControl{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafAdvancedConfiguration = &SimpleWafExclusionRule_AppFirewallDetectionControl{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &SimpleWafExclusionRule_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuffixValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &SimpleWafExclusionRule_SuffixValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafAdvancedConfiguration = &SimpleWafExclusionRule_WafSkipProcessing{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathChoice = &SimpleWafExclusionRule_AnyPath{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &SimpleWafExclusionRule_PathPrefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerSubsetRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerSubsetRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerSubsetRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReNameList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReNameList = append(m.ReNameList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v CountryCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CountryCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CountryCodes = append(m.CountryCodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.CountryCodes) == 0 {
					m.CountryCodes = make([]CountryCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CountryCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CountryCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CountryCodes = append(m.CountryCodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCodes", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SelectorChoice = &OriginServerSubsetRule_ClientSelector{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServerSubsetsAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginServerSubsetsAction == nil {
				m.OriginServerSubsetsAction = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OriginServerSubsetsAction[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyMatcher == nil {
				m.BodyMatcher = &MatcherType{}
			}
			if err := m.BodyMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpMatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpChoice = &OriginServerSubsetRule_IpMatcher{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsnMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AsnMatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &OriginServerSubsetRule_AsnMatcher{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SelectorChoice = &OriginServerSubsetRule_None{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpChoice = &OriginServerSubsetRule_AnyIp{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrefixMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpChoice = &OriginServerSubsetRule_IpPrefixList{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyAsn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &OriginServerSubsetRule_AnyAsn{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsnList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AsnMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &OriginServerSubsetRule_AsnList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleDataGuardRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleDataGuardRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleDataGuardRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &SimpleDataGuardRule_AnyDomain{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &SimpleDataGuardRule_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuffixValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &SimpleDataGuardRule_SuffixValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyDataGuard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &SimpleDataGuardRule_ApplyDataGuard{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipDataGuard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &SimpleDataGuardRule_SkipDataGuard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphQLRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphQLRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphQLRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &GraphQLRule_AnyDomain{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &GraphQLRule_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuffixValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &GraphQLRule_SuffixValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphqlSettings == nil {
				m.GraphqlSettings = &GraphQLSettingsType{}
			}
			if err := m.GraphqlSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MethodChoice = &GraphQLRule_MethodGet{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodPost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MethodChoice = &GraphQLRule_MethodPost{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphQLSettingsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphQLSettingsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphQLSettingsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTotalLength", wireType)
			}
			m.MaxTotalLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTotalLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValueLength", wireType)
			}
			m.MaxValueLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValueLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepth", wireType)
			}
			m.MaxDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDepth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBatchedQueries", wireType)
			}
			m.MaxBatchedQueries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBatchedQueries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIntrospection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowIntrospectionQueriesChoice = &GraphQLSettingsType_DisableIntrospection{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIntrospection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowIntrospectionQueriesChoice = &GraphQLSettingsType_EnableIntrospection{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiValidationAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiValidationAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiValidationAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.OpenApiValidationProperties
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.OpenApiValidationProperties(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestPropertiesSelection = append(m.RequestPropertiesSelection, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.RequestPropertiesSelection) == 0 {
					m.RequestPropertiesSelection = make([]schema.OpenApiValidationProperties, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.OpenApiValidationProperties
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.OpenApiValidationProperties(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestPropertiesSelection = append(m.RequestPropertiesSelection, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPropertiesSelection", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OasValidationAction", wireType)
			}
			m.OasValidationAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OasValidationAction |= OasValidationActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v schema.OpenApiValidationProperties
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.OpenApiValidationProperties(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResponsePropertiesSelection = append(m.ResponsePropertiesSelection, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ResponsePropertiesSelection) == 0 {
					m.ResponsePropertiesSelection = make([]schema.OpenApiValidationProperties, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.OpenApiValidationProperties
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.OpenApiValidationProperties(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResponsePropertiesSelection = append(m.ResponsePropertiesSelection, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePropertiesSelection", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OasResponseValidationAction", wireType)
			}
			m.OasResponseValidationAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OasResponseValidationAction |= OasValidationActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaskingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaskingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaskingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &MaskingConfig_Mask{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &MaskingConfig_Report{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenyInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenyInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenyInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			m.ResponseCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndefinedSecEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EventType = &DenyInformation_UndefinedSecEvent{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSecEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EventType = &DenyInformation_ApiSecEvent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsFingerprintMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsFingerprintMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsFingerprintMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v KnownTlsFingerprintClass
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= KnownTlsFingerprintClass(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Classes = append(m.Classes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Classes) == 0 {
					m.Classes = make([]KnownTlsFingerprintClass, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v KnownTlsFingerprintClass
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= KnownTlsFingerprintClass(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Classes = append(m.Classes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactValues = append(m.ExactValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludedValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludedValues = append(m.ExcludedValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JA4TlsFingerprintMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JA4TlsFingerprintMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JA4TlsFingerprintMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactValues = append(m.ExactValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PathMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrefixValues = append(m.PrefixValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactValues = append(m.ExactValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegexValues = append(m.RegexValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v Transformer
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Transformer(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Transformers = append(m.Transformers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Transformers) == 0 {
					m.Transformers = make([]Transformer, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Transformer
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Transformer(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Transformers = append(m.Transformers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Transformers", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuffixValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuffixValues = append(m.SuffixValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactValues = append(m.ExactValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegexValues = append(m.RegexValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Transformer
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Transformer(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Transformers = append(m.Transformers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Transformers) == 0 {
					m.Transformers = make([]Transformer, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Transformer
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Transformer(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Transformers = append(m.Transformers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Transformers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatcherTypeBasic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatcherTypeBasic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatcherTypeBasic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactValues = append(m.ExactValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegexValues = append(m.RegexValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CookieMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CookieMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CookieMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Match = &CookieMatcherType_Presence{b}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &CookieMatcherType_Item{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &CookieMatcherType_CheckPresent{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckNotPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &CookieMatcherType_CheckNotPresent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Match = &ArgMatcherType_Presence{b}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &ArgMatcherType_Item{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &ArgMatcherType_CheckPresent{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckNotPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &ArgMatcherType_CheckNotPresent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Match = &HeaderMatcherType_Presence{b}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &HeaderMatcherType_Item{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &HeaderMatcherType_CheckPresent{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckNotPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &HeaderMatcherType_CheckNotPresent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWTClaimMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWTClaimMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWTClaimMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &JWTClaimMatcherType_CheckPresent{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckNotPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &JWTClaimMatcherType_CheckNotPresent{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &JWTClaimMatcherType_Item{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderMatcherTypeBasic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderMatcherTypeBasic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderMatcherTypeBasic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &HeaderMatcherTypeBasic_Item{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &HeaderMatcherTypeBasic_CheckPresent{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckNotPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &HeaderMatcherTypeBasic_CheckNotPresent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParameterMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParameterMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParameterMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Match = &QueryParameterMatcherType_Presence{b}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &QueryParameterMatcherType_Item{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &QueryParameterMatcherType_CheckPresent{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckNotPresent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Match = &QueryParameterMatcherType_CheckNotPresent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpMethodMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpMethodMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpMethodMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.HttpMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.HttpMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Methods = append(m.Methods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Methods) == 0 {
					m.Methods = make([]schema.HttpMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.HttpMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.HttpMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Methods = append(m.Methods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = append(m.Match, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrefixSets = append(m.PrefixSets, &schema.ObjectRefType{})
			if err := m.PrefixSets[len(m.PrefixSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AsnMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AsnMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AsnMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsnSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsnSets = append(m.AsnSets, &schema.ObjectRefType{})
			if err := m.AsnSets[len(m.AsnSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &URLItem_DomainValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &URLItem_DomainRegex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLItem_PathValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLItem_PathRegex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLItem_PathPrefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlItems = append(m.UrlItems, &URLItem{})
			if err := m.UrlItems[len(m.UrlItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L4DestMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L4DestMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L4DestMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatcher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatcher = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L4Dests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L4Dests = append(m.L4Dests, &schema.L4DestType{})
			if err := m.L4Dests[len(m.L4Dests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryCodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryCodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryCodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v CountryCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CountryCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CountryCodes = append(m.CountryCodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.CountryCodes) == 0 {
					m.CountryCodes = make([]CountryCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CountryCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CountryCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CountryCodes = append(m.CountryCodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCodes", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpHeaderName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpHeaderName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpHeaderName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpCookieName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpCookieName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpCookieName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpQueryParameterName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpQueryParameterName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpQueryParameterName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JwtTokenAuthOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JwtTokenAuthOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JwtTokenAuthOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretKey == nil {
				m.SecretKey = &schema.SecretType{}
			}
			if err := m.SecretKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHeaderName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TokenSource = &JwtTokenAuthOptions_Header{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpCookieName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TokenSource = &JwtTokenAuthOptions_Cookie{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpQueryParameterName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TokenSource = &JwtTokenAuthOptions_QueryParam{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TokenSource = &JwtTokenAuthOptions_BearerToken{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupKey == nil {
				m.BackupKey = &schema.SecretType{}
			}
			if err := m.BackupKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPThreatCategoryListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPThreatCategoryListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPThreatCategoryListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v IPThreatCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= IPThreatCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IpThreatCategories = append(m.IpThreatCategories, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.IpThreatCategories) == 0 {
					m.IpThreatCategories = make([]IPThreatCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v IPThreatCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= IPThreatCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IpThreatCategories = append(m.IpThreatCategories, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IpThreatCategories", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &ClientMatcher_AnyClient{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpThreatCategoryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &ClientMatcher_IpThreatCategoryList{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientChoice = &ClientMatcher_ClientSelector{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAsnChoice = &ClientMatcher_AnyIp{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrefixMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAsnChoice = &ClientMatcher_IpPrefixList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpMatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAsnChoice = &ClientMatcher_IpMatcher{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsnList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AsnMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAsnChoice = &ClientMatcher_AsnList{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsnMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AsnMatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAsnChoice = &ClientMatcher_AsnMatcher{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsFingerprintMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsFingerprintMatcher == nil {
				m.TlsFingerprintMatcher = &TlsFingerprintMatcherType{}
			}
			if err := m.TlsFingerprintMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMatcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMatcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMatcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryParams = append(m.QueryParams, &QueryParameterMatcherType{})
			if err := m.QueryParams[len(m.QueryParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieMatchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookieMatchers = append(m.CookieMatchers, &CookieMatcherType{})
			if err := m.CookieMatchers[len(m.CookieMatchers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtClaims = append(m.JwtClaims, &JWTClaimMatcherType{})
			if err := m.JwtClaims[len(m.JwtClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestConstraintType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestConstraintType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestConstraintType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCookieCountNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxCookieCountChoice = &RequestConstraintType_MaxCookieCountNone{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCookieCountExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxCookieCountChoice = &RequestConstraintType_MaxCookieCountExceeds{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCookieKeySizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxCookieKeySizeChoice = &RequestConstraintType_MaxCookieKeySizeNone{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCookieKeySizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxCookieKeySizeChoice = &RequestConstraintType_MaxCookieKeySizeExceeds{v}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCookieValueSizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxCookieValueSizeChoice = &RequestConstraintType_MaxCookieValueSizeNone{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCookieValueSizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxCookieValueSizeChoice = &RequestConstraintType_MaxCookieValueSizeExceeds{v}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeaderCountNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxHeaderCountChoice = &RequestConstraintType_MaxHeaderCountNone{v}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeaderCountExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxHeaderCountChoice = &RequestConstraintType_MaxHeaderCountExceeds{v}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeaderKeySizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxHeaderKeySizeChoice = &RequestConstraintType_MaxHeaderKeySizeNone{v}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeaderKeySizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxHeaderKeySizeChoice = &RequestConstraintType_MaxHeaderKeySizeExceeds{v}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeaderValueSizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxHeaderValueSizeChoice = &RequestConstraintType_MaxHeaderValueSizeNone{v}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeaderValueSizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxHeaderValueSizeChoice = &RequestConstraintType_MaxHeaderValueSizeExceeds{v}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUrlSizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxUrlSizeChoice = &RequestConstraintType_MaxUrlSizeNone{v}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUrlSizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxUrlSizeChoice = &RequestConstraintType_MaxUrlSizeExceeds{v}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQuerySizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxQuerySizeChoice = &RequestConstraintType_MaxQuerySizeNone{v}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQuerySizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxQuerySizeChoice = &RequestConstraintType_MaxQuerySizeExceeds{v}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestLineSizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxRequestLineSizeChoice = &RequestConstraintType_MaxRequestLineSizeNone{v}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestLineSizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxRequestLineSizeChoice = &RequestConstraintType_MaxRequestLineSizeExceeds{v}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestSizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxRequestSizeChoice = &RequestConstraintType_MaxRequestSizeNone{v}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestSizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxRequestSizeChoice = &RequestConstraintType_MaxRequestSizeExceeds{v}
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParameterCountNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxParameterCountChoice = &RequestConstraintType_MaxParameterCountNone{v}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParameterCountExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxParameterCountChoice = &RequestConstraintType_MaxParameterCountExceeds{v}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParameterNameSizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxParameterNameSizeChoice = &RequestConstraintType_MaxParameterNameSizeNone{v}
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParameterNameSizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxParameterNameSizeChoice = &RequestConstraintType_MaxParameterNameSizeExceeds{v}
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParameterValueSizeNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxParameterValueSizeChoice = &RequestConstraintType_MaxParameterValueSizeNone{v}
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParameterValueSizeExceeds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxParameterValueSizeChoice = &RequestConstraintType_MaxParameterValueSizeExceeds{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveEnhancedFirewallPoliciesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveEnhancedFirewallPoliciesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveEnhancedFirewallPoliciesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnhancedFirewallPolicies = append(m.EnhancedFirewallPolicies, &views.ObjectRefType{})
			if err := m.EnhancedFirewallPolicies[len(m.EnhancedFirewallPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveServicePoliciesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveServicePoliciesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveServicePoliciesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicies = append(m.ServicePolicies, &views.ObjectRefType{})
			if err := m.ServicePolicies[len(m.ServicePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveForwardProxyPoliciesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveForwardProxyPoliciesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveForwardProxyPoliciesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardProxyPolicies = append(m.ForwardProxyPolicies, &views.ObjectRefType{})
			if err := m.ForwardProxyPolicies[len(m.ForwardProxyPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityPoliciesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityPoliciesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityPoliciesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityPoliciesType_NoForwardProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityPoliciesType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoFirewallPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FirewallPolicyChoice = &SecurityPoliciesType_NoFirewallPolicy{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FirewallPolicyChoice = &SecurityPoliciesType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActiveServicePoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityPoliciesType_ActiveServicePolicies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentPolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentPolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentPolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SrcSegmentChoice = &SegmentPolicyType_SrcAny{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcSegments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SegmentRefList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SrcSegmentChoice = &SegmentPolicyType_SrcSegments{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DstSegmentChoice = &SegmentPolicyType_DstAny{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntraSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DstSegmentChoice = &SegmentPolicyType_IntraSegment{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstSegments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SegmentRefList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DstSegmentChoice = &SegmentPolicyType_DstSegments{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MalwareProtectionSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MalwareProtectionSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MalwareProtectionSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &schema.Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

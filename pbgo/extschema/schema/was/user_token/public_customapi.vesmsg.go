// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package user_token

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetUserTokenRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetUserTokenRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetUserTokenRequest) DeepCopy() *GetUserTokenRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetUserTokenRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetUserTokenRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetUserTokenRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetUserTokenRequestValidator().Validate(ctx, m, opts...)
}

type ValidateGetUserTokenRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetUserTokenRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetUserTokenRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetUserTokenRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetUserTokenRequestValidator = func() *ValidateGetUserTokenRequest {
	v := &ValidateGetUserTokenRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetUserTokenRequestValidator() db.Validator {
	return DefaultGetUserTokenRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *GetUserTokenResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetUserTokenResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetUserTokenResponse) String() string {
	if m == nil {
		return ""
	}
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.string()
}

func (m *GetUserTokenResponse) GoString() string {
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.goString()
}

// Redact squashes sensitive info in m (in-place)
func (m *GetUserTokenResponse) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	m.Token = ""

	return nil
}

func (m *GetUserTokenResponse) DeepCopy() *GetUserTokenResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetUserTokenResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetUserTokenResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetUserTokenResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetUserTokenResponseValidator().Validate(ctx, m, opts...)
}

type ValidateGetUserTokenResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetUserTokenResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetUserTokenResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetUserTokenResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["redirect_url"]; exists {

		vOpts := append(opts, db.WithValidateField("redirect_url"))
		if err := fv(ctx, m.GetRedirectUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["token"]; exists {

		vOpts := append(opts, db.WithValidateField("token"))
		if err := fv(ctx, m.GetToken(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id"]; exists {

		vOpts := append(opts, db.WithValidateField("user_id"))
		if err := fv(ctx, m.GetUserId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetUserTokenResponseValidator = func() *ValidateGetUserTokenResponse {
	v := &ValidateGetUserTokenResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetUserTokenResponseValidator() db.Validator {
	return DefaultGetUserTokenResponseValidator
}

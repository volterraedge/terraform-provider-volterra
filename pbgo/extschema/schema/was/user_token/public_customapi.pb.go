// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/was/user_token/public_customapi.proto

// Web App Scanning Service User Token API
//
// x-displayName: "Web App Scanning Service User Token API"
// Use this API to get one time user token to connect to Web App Scanning Service

package user_token

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetUserTokenRequest
//
// x-displayName: "Web App Scanning Service User Token Request"
// Request body to get one time token to connect Web App Scanning Service
type GetUserTokenRequest struct {
}

func (m *GetUserTokenRequest) Reset()      { *m = GetUserTokenRequest{} }
func (*GetUserTokenRequest) ProtoMessage() {}
func (*GetUserTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab6adaba09ffa44, []int{0}
}
func (m *GetUserTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserTokenRequest.Merge(m, src)
}
func (m *GetUserTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserTokenRequest proto.InternalMessageInfo

// GetUserTokenResponse
//
// x-displayName: "Web App Scanning Service User Token Response"
// Response body of token to connect to the Web App Scanning Service
type GetUserTokenResponse struct {
	// Web App Scanning Service User ID
	//
	// x-displayName: "Web App Scanning Service User ID"
	// x-example: "blah|662ab03aeff9c175ea1310c1"
	// The User ID of Web App Scanning Service
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Web App Scanning Service User Token
	//
	// x-displayName: "Web App Scanning Service User Token"
	// x-example: "blahblah"
	// The token to connect to Web App Scanning Service
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Web App Scanning Service Redirect URL
	//
	// x-displayName: "Web App Scanning Service Redirect URL"
	// x-example: "https://app.heyhack.com/logout"
	// The Web App Scanning Service URL to be redirected by F5 Distributed Cloud Console
	RedirectUrl string `protobuf:"bytes,3,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
}

func (m *GetUserTokenResponse) Reset()      { *m = GetUserTokenResponse{} }
func (*GetUserTokenResponse) ProtoMessage() {}
func (*GetUserTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab6adaba09ffa44, []int{1}
}
func (m *GetUserTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserTokenResponse.Merge(m, src)
}
func (m *GetUserTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserTokenResponse proto.InternalMessageInfo

func (m *GetUserTokenResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetUserTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetUserTokenResponse) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*GetUserTokenRequest)(nil), "ves.io.schema.was.user_token.GetUserTokenRequest")
	golang_proto.RegisterType((*GetUserTokenRequest)(nil), "ves.io.schema.was.user_token.GetUserTokenRequest")
	proto.RegisterType((*GetUserTokenResponse)(nil), "ves.io.schema.was.user_token.GetUserTokenResponse")
	golang_proto.RegisterType((*GetUserTokenResponse)(nil), "ves.io.schema.was.user_token.GetUserTokenResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/was/user_token/public_customapi.proto", fileDescriptor_7ab6adaba09ffa44)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/was/user_token/public_customapi.proto", fileDescriptor_7ab6adaba09ffa44)
}

var fileDescriptor_7ab6adaba09ffa44 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x31, 0x6b, 0x14, 0x41,
	0x18, 0xdd, 0xb9, 0xc3, 0x48, 0xd6, 0x14, 0xb2, 0x2a, 0x9e, 0x67, 0x18, 0xf4, 0x0a, 0x09, 0xc2,
	0xce, 0x60, 0x82, 0x3f, 0xc0, 0x58, 0x48, 0x3a, 0x39, 0x4c, 0x93, 0xe6, 0x98, 0xdd, 0xfd, 0x6e,
	0x33, 0xe4, 0x76, 0xbe, 0x71, 0x66, 0x76, 0x2f, 0x16, 0x82, 0xa4, 0xb6, 0x10, 0xfc, 0x13, 0xfe,
	0x07, 0x9b, 0x74, 0xa6, 0x92, 0x13, 0x9b, 0x94, 0xde, 0x9e, 0x85, 0x60, 0x93, 0x9f, 0x20, 0x37,
	0x7b, 0xc1, 0x9c, 0x04, 0x21, 0xdd, 0xf7, 0xde, 0xdb, 0xb7, 0xf3, 0xbd, 0x8f, 0x17, 0x6e, 0x55,
	0x60, 0x99, 0x44, 0x6e, 0xd3, 0x7d, 0x28, 0x04, 0x1f, 0x0b, 0xcb, 0x4b, 0x0b, 0x66, 0xe0, 0xf0,
	0x00, 0x14, 0xd7, 0x65, 0x32, 0x92, 0xe9, 0x20, 0x2d, 0xad, 0xc3, 0x42, 0x68, 0xc9, 0xb4, 0x41,
	0x87, 0xd1, 0x7a, 0x63, 0x62, 0x8d, 0x89, 0x8d, 0x85, 0x65, 0x7f, 0x4d, 0xdd, 0x38, 0x97, 0x6e,
	0xbf, 0x4c, 0x58, 0x8a, 0x05, 0xcf, 0x31, 0x47, 0xee, 0x4d, 0x49, 0x39, 0xf4, 0xc8, 0x03, 0x3f,
	0x35, 0x3f, 0xeb, 0xae, 0xe7, 0x88, 0xf9, 0x08, 0xb8, 0xd0, 0x92, 0x0b, 0xa5, 0xd0, 0x09, 0x27,
	0x51, 0xd9, 0x85, 0x7a, 0x7f, 0x79, 0x3f, 0xd4, 0x17, 0xc5, 0xde, 0xb2, 0x58, 0x81, 0x05, 0x55,
	0x2d, 0x7f, 0xd3, 0xbb, 0x13, 0xde, 0x7a, 0x01, 0x6e, 0xd7, 0x82, 0x79, 0x35, 0xdf, 0xae, 0x0f,
	0xaf, 0x4b, 0xb0, 0xae, 0x57, 0x84, 0xb7, 0x97, 0x69, 0xab, 0x51, 0x59, 0x88, 0xee, 0x86, 0xd7,
	0x7d, 0x14, 0x99, 0x75, 0xc8, 0x03, 0xb2, 0xb1, 0xda, 0x5f, 0x99, 0xc3, 0x9d, 0x2c, 0xba, 0x17,
	0x5e, 0xf3, 0xf1, 0x3a, 0xad, 0x39, 0xbd, 0xdd, 0x3e, 0x79, 0x4b, 0xfa, 0x0d, 0x13, 0x3d, 0x0c,
	0xd7, 0x0c, 0x64, 0xd2, 0x40, 0xea, 0x06, 0xa5, 0x19, 0x75, 0xda, 0xde, 0x78, 0xe3, 0x9c, 0xdb,
	0x35, 0xa3, 0xcd, 0xdf, 0x24, 0x5c, 0x7d, 0xee, 0xaf, 0xf8, 0xec, 0xe5, 0x4e, 0xf4, 0x8d, 0x84,
	0x6b, 0x17, 0x5f, 0x8f, 0x9e, 0xb0, 0xff, 0x5d, 0x94, 0x5d, 0x12, 0xa0, 0xbb, 0x79, 0x15, 0x4b,
	0x13, 0xae, 0xb7, 0x57, 0x7f, 0xe9, 0x3c, 0x1a, 0x3e, 0x3d, 0x4c, 0xe3, 0x31, 0x24, 0xb1, 0xd0,
	0x3a, 0xb6, 0xa9, 0x50, 0x4a, 0xaa, 0x3c, 0xb6, 0x4e, 0xa8, 0x4c, 0x98, 0x2c, 0x2e, 0x50, 0x49,
	0x87, 0xe6, 0xe8, 0xfb, 0xcf, 0x8f, 0xad, 0xc7, 0xd1, 0xc6, 0xa2, 0x02, 0x5c, 0x89, 0x02, 0xac,
	0x16, 0x29, 0x58, 0x6e, 0xdf, 0x58, 0x07, 0xc5, 0x3f, 0x55, 0xe9, 0x86, 0xc7, 0x9f, 0x49, 0xfb,
	0xe8, 0x6b, 0xa7, 0x75, 0x93, 0x6c, 0xbf, 0x27, 0x93, 0x29, 0x0d, 0x4e, 0xa7, 0x34, 0x38, 0x9b,
	0x52, 0xf2, 0xae, 0xa6, 0xe4, 0x53, 0x4d, 0xc9, 0x49, 0x4d, 0xc9, 0xa4, 0xa6, 0xe4, 0x47, 0x4d,
	0xc9, 0xaf, 0x9a, 0x06, 0x67, 0x35, 0x25, 0x1f, 0x66, 0x34, 0x38, 0x9e, 0x51, 0x32, 0x99, 0xd1,
	0xe0, 0x74, 0x46, 0x83, 0xbd, 0x7e, 0x8e, 0xfa, 0x20, 0x67, 0x15, 0x8e, 0x1c, 0x18, 0x23, 0x58,
	0x69, 0xb9, 0x1f, 0x86, 0x68, 0x8a, 0x58, 0x1b, 0xac, 0x64, 0x06, 0x26, 0x3e, 0x97, 0xb9, 0x4e,
	0x72, 0xe4, 0x70, 0xe8, 0x16, 0x0d, 0xb8, 0xb4, 0xc5, 0xc9, 0x8a, 0x6f, 0xc2, 0xd6, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4d, 0x44, 0x15, 0x8f, 0xec, 0x02, 0x00, 0x00,
}

func (this *GetUserTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserTokenRequest)
	if !ok {
		that2, ok := that.(GetUserTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetUserTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserTokenResponse)
	if !ok {
		that2, ok := that.(GetUserTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.RedirectUrl != that1.RedirectUrl {
		return false
	}
	return true
}
func (this *GetUserTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&user_token.GetUserTokenRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserTokenResponse) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user_token.GetUserTokenResponse{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "RedirectUrl: "+fmt.Sprintf("%#v", this.RedirectUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Get Web App Scanning User Token
	//
	// x-displayName: "Get Web App Scanning Service User Token"
	// Get one time token to connect Web App Scanning Service
	GetUserToken(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) GetUserToken(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenResponse, error) {
	out := new(GetUserTokenResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.was.user_token.CustomAPI/GetUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Get Web App Scanning User Token
	//
	// x-displayName: "Get Web App Scanning Service User Token"
	// Get one time token to connect Web App Scanning Service
	GetUserToken(context.Context, *GetUserTokenRequest) (*GetUserTokenResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) GetUserToken(ctx context.Context, req *GetUserTokenRequest) (*GetUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.was.user_token.CustomAPI/GetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetUserToken(ctx, req.(*GetUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.was.user_token.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserToken",
			Handler:    _CustomAPI_GetUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/was/user_token/public_customapi.proto",
}

func (m *GetUserTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetUserTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedirectUrl) > 0 {
		i -= len(m.RedirectUrl)
		copy(dAtA[i:], m.RedirectUrl)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.RedirectUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetUserTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetUserTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetUserTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserTokenRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetUserTokenResponse) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserTokenResponse{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`RedirectUrl:` + fmt.Sprintf("%v", this.RedirectUrl) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetUserTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

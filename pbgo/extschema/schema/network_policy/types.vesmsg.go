// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package network_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ApplicationsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApplicationsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApplicationsType) DeepCopy() *ApplicationsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApplicationsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApplicationsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApplicationsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApplicationsTypeValidator().Validate(ctx, m, opts...)
}

type ValidateApplicationsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApplicationsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApplicationsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApplicationsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["applications"]; exists {

		vOpts := append(opts, db.WithValidateField("applications"))
		for idx, item := range m.GetApplications() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApplicationsTypeValidator = func() *ValidateApplicationsType {
	v := &ValidateApplicationsType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ApplicationsTypeValidator() db.Validator {
	return DefaultApplicationsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetEndpointDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetEndpointDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetEndpoint() == nil {
		return nil, nil
	}

	drInfos, err := m.GetEndpoint().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetEndpoint().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "endpoint." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "rules." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) EndpointValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for endpoint")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := EndpointChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint"))
		if err := fv(ctx, m.GetEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {

		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpoint := v.EndpointValidationRuleHandler
	rulesEndpoint := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEndpoint(rulesEndpoint)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.endpoint: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint"] = vFn

	v.FldValidators["rules"] = NetworkPolicyRuleChoiceValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *EndpointChoiceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EndpointChoiceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EndpointChoiceType) DeepCopy() *EndpointChoiceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EndpointChoiceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EndpointChoiceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EndpointChoiceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EndpointChoiceTypeValidator().Validate(ctx, m, opts...)
}

func (m *EndpointChoiceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetEndpointChoiceDRefInfo()

}

func (m *EndpointChoiceType) GetEndpointChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetEndpointChoice().(type) {
	case *EndpointChoiceType_PrefixList:

		return nil, nil

	case *EndpointChoiceType_Any:

		return nil, nil

	case *EndpointChoiceType_OutsideEndpoints:

		return nil, nil

	case *EndpointChoiceType_InsideEndpoints:

		return nil, nil

	case *EndpointChoiceType_Interface:

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		dri := db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interface",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *EndpointChoiceType_LabelSelector:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetEndpointChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *EndpointChoiceType) GetEndpointChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetEndpointChoice().(type) {
	case *EndpointChoiceType_PrefixList:

	case *EndpointChoiceType_Any:

	case *EndpointChoiceType_OutsideEndpoints:

	case *EndpointChoiceType_InsideEndpoints:

	case *EndpointChoiceType_Interface:
		refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
		}

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *EndpointChoiceType_LabelSelector:

	}

	return entries, nil
}

type ValidateEndpointChoiceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEndpointChoiceType) EndpointChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for endpoint_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEndpointChoiceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EndpointChoiceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EndpointChoiceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["endpoint_choice"]; exists {
		val := m.GetEndpointChoice()
		vOpts := append(opts,
			db.WithValidateField("endpoint_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEndpointChoice().(type) {
	case *EndpointChoiceType_PrefixList:
		if fv, exists := v.FldValidators["endpoint_choice.prefix_list"]; exists {
			val := m.GetEndpointChoice().(*EndpointChoiceType_PrefixList).PrefixList
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointChoiceType_Any:
		if fv, exists := v.FldValidators["endpoint_choice.any"]; exists {
			val := m.GetEndpointChoice().(*EndpointChoiceType_Any).Any
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("any"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointChoiceType_OutsideEndpoints:
		if fv, exists := v.FldValidators["endpoint_choice.outside_endpoints"]; exists {
			val := m.GetEndpointChoice().(*EndpointChoiceType_OutsideEndpoints).OutsideEndpoints
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("outside_endpoints"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointChoiceType_InsideEndpoints:
		if fv, exists := v.FldValidators["endpoint_choice.inside_endpoints"]; exists {
			val := m.GetEndpointChoice().(*EndpointChoiceType_InsideEndpoints).InsideEndpoints
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("inside_endpoints"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointChoiceType_Interface:
		if fv, exists := v.FldValidators["endpoint_choice.interface"]; exists {
			val := m.GetEndpointChoice().(*EndpointChoiceType_Interface).Interface
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointChoiceType_Namespace:
		if fv, exists := v.FldValidators["endpoint_choice.namespace"]; exists {
			val := m.GetEndpointChoice().(*EndpointChoiceType_Namespace).Namespace
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointChoiceType_LabelSelector:
		if fv, exists := v.FldValidators["endpoint_choice.label_selector"]; exists {
			val := m.GetEndpointChoice().(*EndpointChoiceType_LabelSelector).LabelSelector
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEndpointChoiceTypeValidator = func() *ValidateEndpointChoiceType {
	v := &ValidateEndpointChoiceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpointChoice := v.EndpointChoiceValidationRuleHandler
	rulesEndpointChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEndpointChoice(rulesEndpointChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EndpointChoiceType.endpoint_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint_choice"] = vFn

	v.FldValidators["endpoint_choice.prefix_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["endpoint_choice.interface"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["endpoint_choice.label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func EndpointChoiceTypeValidator() db.Validator {
	return DefaultEndpointChoiceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetEndpointDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetEndpointDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetEndpoint() == nil {
		return nil, nil
	}

	drInfos, err := m.GetEndpoint().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetEndpoint().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "endpoint." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *GetSpecType_Rules:

		drInfos, err := m.GetRules().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rules." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_LegacyRules:

		drInfos, err := m.GetLegacyRules().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyRules().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_rules." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint"))
		if err := fv(ctx, m.GetEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetRuleChoice().(type) {
	case *GetSpecType_Rules:
		if fv, exists := v.FldValidators["rule_choice.rules"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_Rules).Rules
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rules"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LegacyRules:
		if fv, exists := v.FldValidators["rule_choice.legacy_rules"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_LegacyRules).LegacyRules
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("legacy_rules"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["rule_choice.rules"] = NetworkPolicyRuleChoiceValidator().Validate
	v.FldValidators["rule_choice.legacy_rules"] = LegacyNetworkPolicyRuleChoiceValidator().Validate

	v.FldValidators["endpoint"] = EndpointChoiceTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetEgressRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetEgressRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetEndpointDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetEndpointDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardingClassDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardingClassDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIngressRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIngressRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetEgressRulesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetEgressRules()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.egress_rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "egress_rules",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetEgressRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetEgressRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_policy_rule")
	}
	for _, ref := range m.GetEgressRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetEndpoint() == nil {
		return nil, nil
	}

	drInfos, err := m.GetEndpoint().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetEndpoint().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "endpoint." + dri.DRField
	}
	return drInfos, err

}

func (m *GlobalSpecType) GetForwardingClassDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetForwardingClass()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.forwarding_class[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "forwarding_class.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "forwarding_class",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetForwardingClassDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetForwardingClassDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "forwarding_class.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: forwarding_class")
	}
	for _, ref := range m.GetForwardingClass() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetIngressRulesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetIngressRules()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.ingress_rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "ingress_rules",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetIngressRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetIngressRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_policy_rule")
	}
	for _, ref := range m.GetIngressRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_Rules:

		drInfos, err := m.GetRules().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rules." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_LegacyRules:

		drInfos, err := m.GetLegacyRules().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyRules().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_rules." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) IngressRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ingress_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ingress_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ingress_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ingress_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) EgressRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for egress_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for egress_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated egress_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items egress_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ForwardingClassValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for forwarding_class")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for forwarding_class")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated forwarding_class")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items forwarding_class")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["egress_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("egress_rules"))
		if err := fv(ctx, m.GetEgressRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint"))
		if err := fv(ctx, m.GetEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["forwarding_class"]; exists {
		vOpts := append(opts, db.WithValidateField("forwarding_class"))
		if err := fv(ctx, m.GetForwardingClass(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ingress_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ingress_rules"))
		if err := fv(ctx, m.GetIngressRules(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetLocalEndpoint().(type) {
	case *GlobalSpecType_Prefix:
		if fv, exists := v.FldValidators["local_endpoint.prefix"]; exists {
			val := m.GetLocalEndpoint().(*GlobalSpecType_Prefix).Prefix
			vOpts := append(opts,
				db.WithValidateField("local_endpoint"),
				db.WithValidateField("prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PrefixSelector:
		if fv, exists := v.FldValidators["local_endpoint.prefix_selector"]; exists {
			val := m.GetLocalEndpoint().(*GlobalSpecType_PrefixSelector).PrefixSelector
			vOpts := append(opts,
				db.WithValidateField("local_endpoint"),
				db.WithValidateField("prefix_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_Rules:
		if fv, exists := v.FldValidators["rule_choice.rules"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_Rules).Rules
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rules"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LegacyRules:
		if fv, exists := v.FldValidators["rule_choice.legacy_rules"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_LegacyRules).LegacyRules
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("legacy_rules"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIngressRules := v.IngressRulesValidationRuleHandler
	rulesIngressRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhIngressRules(rulesIngressRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ingress_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ingress_rules"] = vFn

	vrhEgressRules := v.EgressRulesValidationRuleHandler
	rulesEgressRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhEgressRules(rulesEgressRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.egress_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["egress_rules"] = vFn

	vrhForwardingClass := v.ForwardingClassValidationRuleHandler
	rulesForwardingClass := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhForwardingClass(rulesForwardingClass)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.forwarding_class: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forwarding_class"] = vFn

	v.FldValidators["local_endpoint.prefix"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["local_endpoint.prefix_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["rule_choice.rules"] = NetworkPolicyRuleChoiceValidator().Validate
	v.FldValidators["rule_choice.legacy_rules"] = LegacyNetworkPolicyRuleChoiceValidator().Validate

	v.FldValidators["endpoint"] = EndpointChoiceTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LegacyNetworkPolicyRuleChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LegacyNetworkPolicyRuleChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LegacyNetworkPolicyRuleChoice) DeepCopy() *LegacyNetworkPolicyRuleChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LegacyNetworkPolicyRuleChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LegacyNetworkPolicyRuleChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LegacyNetworkPolicyRuleChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LegacyNetworkPolicyRuleChoiceValidator().Validate(ctx, m, opts...)
}

func (m *LegacyNetworkPolicyRuleChoice) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetEgressRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetEgressRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIngressRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIngressRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *LegacyNetworkPolicyRuleChoice) GetEgressRulesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetEgressRules()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("LegacyNetworkPolicyRuleChoice.egress_rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "egress_rules",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetEgressRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *LegacyNetworkPolicyRuleChoice) GetEgressRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_policy_rule")
	}
	for _, ref := range m.GetEgressRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *LegacyNetworkPolicyRuleChoice) GetIngressRulesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetIngressRules()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("LegacyNetworkPolicyRuleChoice.ingress_rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "ingress_rules",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetIngressRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *LegacyNetworkPolicyRuleChoice) GetIngressRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_policy_rule")
	}
	for _, ref := range m.GetIngressRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateLegacyNetworkPolicyRuleChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLegacyNetworkPolicyRuleChoice) IngressRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ingress_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ingress_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ingress_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ingress_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLegacyNetworkPolicyRuleChoice) EgressRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for egress_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for egress_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated egress_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items egress_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLegacyNetworkPolicyRuleChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LegacyNetworkPolicyRuleChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LegacyNetworkPolicyRuleChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["egress_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("egress_rules"))
		if err := fv(ctx, m.GetEgressRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ingress_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ingress_rules"))
		if err := fv(ctx, m.GetIngressRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLegacyNetworkPolicyRuleChoiceValidator = func() *ValidateLegacyNetworkPolicyRuleChoice {
	v := &ValidateLegacyNetworkPolicyRuleChoice{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIngressRules := v.IngressRulesValidationRuleHandler
	rulesIngressRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhIngressRules(rulesIngressRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LegacyNetworkPolicyRuleChoice.ingress_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ingress_rules"] = vFn

	vrhEgressRules := v.EgressRulesValidationRuleHandler
	rulesEgressRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhEgressRules(rulesEgressRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LegacyNetworkPolicyRuleChoice.egress_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["egress_rules"] = vFn

	return v
}()

func LegacyNetworkPolicyRuleChoiceValidator() db.Validator {
	return DefaultLegacyNetworkPolicyRuleChoiceValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkPolicyRuleChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkPolicyRuleChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkPolicyRuleChoice) DeepCopy() *NetworkPolicyRuleChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkPolicyRuleChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkPolicyRuleChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkPolicyRuleChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkPolicyRuleChoiceValidator().Validate(ctx, m, opts...)
}

func (m *NetworkPolicyRuleChoice) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetEgressRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetEgressRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIngressRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIngressRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *NetworkPolicyRuleChoice) GetEgressRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetEgressRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetEgressRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEgressRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("egress_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *NetworkPolicyRuleChoice) GetIngressRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIngressRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetIngressRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIngressRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("ingress_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateNetworkPolicyRuleChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkPolicyRuleChoice) IngressRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ingress_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*NetworkPolicyRuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := NetworkPolicyRuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ingress_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*NetworkPolicyRuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*NetworkPolicyRuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ingress_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ingress_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNetworkPolicyRuleChoice) EgressRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for egress_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*NetworkPolicyRuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := NetworkPolicyRuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for egress_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*NetworkPolicyRuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*NetworkPolicyRuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated egress_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items egress_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNetworkPolicyRuleChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkPolicyRuleChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkPolicyRuleChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["egress_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("egress_rules"))
		if err := fv(ctx, m.GetEgressRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ingress_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ingress_rules"))
		if err := fv(ctx, m.GetIngressRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkPolicyRuleChoiceValidator = func() *ValidateNetworkPolicyRuleChoice {
	v := &ValidateNetworkPolicyRuleChoice{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIngressRules := v.IngressRulesValidationRuleHandler
	rulesIngressRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "128",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhIngressRules(rulesIngressRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NetworkPolicyRuleChoice.ingress_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ingress_rules"] = vFn

	vrhEgressRules := v.EgressRulesValidationRuleHandler
	rulesEgressRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "128",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhEgressRules(rulesEgressRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NetworkPolicyRuleChoice.egress_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["egress_rules"] = vFn

	return v
}()

func NetworkPolicyRuleChoiceValidator() db.Validator {
	return DefaultNetworkPolicyRuleChoiceValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkPolicyRuleType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkPolicyRuleType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkPolicyRuleType) DeepCopy() *NetworkPolicyRuleType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkPolicyRuleType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkPolicyRuleType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkPolicyRuleType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkPolicyRuleTypeValidator().Validate(ctx, m, opts...)
}

func (m *NetworkPolicyRuleType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetOtherEndpointDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NetworkPolicyRuleType) GetOtherEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOtherEndpoint() == nil {
		return nil, nil
	}
	switch m.GetOtherEndpoint().(type) {
	case *NetworkPolicyRuleType_IpPrefixSet:

		drInfos, err := m.GetIpPrefixSet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpPrefixSet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ip_prefix_set." + dri.DRField
		}
		return drInfos, err

	case *NetworkPolicyRuleType_Any:

		return nil, nil

	case *NetworkPolicyRuleType_PrefixList:

		return nil, nil

	case *NetworkPolicyRuleType_OutsideEndpoints:

		return nil, nil

	case *NetworkPolicyRuleType_InsideEndpoints:

		return nil, nil

	case *NetworkPolicyRuleType_LabelSelector:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateNetworkPolicyRuleType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkPolicyRuleType) KeysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for keys")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for keys")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated keys")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items keys")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNetworkPolicyRuleType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNetworkPolicyRuleType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkPolicyRuleType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkPolicyRuleType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["adv_action"]; exists {

		vOpts := append(opts, db.WithValidateField("adv_action"))
		if err := fv(ctx, m.GetAdvAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["keys"]; exists {
		vOpts := append(opts, db.WithValidateField("keys"))
		if err := fv(ctx, m.GetKeys(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOtherEndpoint().(type) {
	case *NetworkPolicyRuleType_IpPrefixSet:
		if fv, exists := v.FldValidators["other_endpoint.ip_prefix_set"]; exists {
			val := m.GetOtherEndpoint().(*NetworkPolicyRuleType_IpPrefixSet).IpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("other_endpoint"),
				db.WithValidateField("ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_Any:
		if fv, exists := v.FldValidators["other_endpoint.any"]; exists {
			val := m.GetOtherEndpoint().(*NetworkPolicyRuleType_Any).Any
			vOpts := append(opts,
				db.WithValidateField("other_endpoint"),
				db.WithValidateField("any"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_PrefixList:
		if fv, exists := v.FldValidators["other_endpoint.prefix_list"]; exists {
			val := m.GetOtherEndpoint().(*NetworkPolicyRuleType_PrefixList).PrefixList
			vOpts := append(opts,
				db.WithValidateField("other_endpoint"),
				db.WithValidateField("prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_OutsideEndpoints:
		if fv, exists := v.FldValidators["other_endpoint.outside_endpoints"]; exists {
			val := m.GetOtherEndpoint().(*NetworkPolicyRuleType_OutsideEndpoints).OutsideEndpoints
			vOpts := append(opts,
				db.WithValidateField("other_endpoint"),
				db.WithValidateField("outside_endpoints"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_InsideEndpoints:
		if fv, exists := v.FldValidators["other_endpoint.inside_endpoints"]; exists {
			val := m.GetOtherEndpoint().(*NetworkPolicyRuleType_InsideEndpoints).InsideEndpoints
			vOpts := append(opts,
				db.WithValidateField("other_endpoint"),
				db.WithValidateField("inside_endpoints"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_Namespace:
		if fv, exists := v.FldValidators["other_endpoint.namespace"]; exists {
			val := m.GetOtherEndpoint().(*NetworkPolicyRuleType_Namespace).Namespace
			vOpts := append(opts,
				db.WithValidateField("other_endpoint"),
				db.WithValidateField("namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_LabelSelector:
		if fv, exists := v.FldValidators["other_endpoint.label_selector"]; exists {
			val := m.GetOtherEndpoint().(*NetworkPolicyRuleType_LabelSelector).LabelSelector
			vOpts := append(opts,
				db.WithValidateField("other_endpoint"),
				db.WithValidateField("label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rule_description"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_description"))
		if err := fv(ctx, m.GetRuleDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_name"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_name"))
		if err := fv(ctx, m.GetRuleName(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetTrafficChoice().(type) {
	case *NetworkPolicyRuleType_AllTraffic:
		if fv, exists := v.FldValidators["traffic_choice.all_traffic"]; exists {
			val := m.GetTrafficChoice().(*NetworkPolicyRuleType_AllTraffic).AllTraffic
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("all_traffic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_AllTcpTraffic:
		if fv, exists := v.FldValidators["traffic_choice.all_tcp_traffic"]; exists {
			val := m.GetTrafficChoice().(*NetworkPolicyRuleType_AllTcpTraffic).AllTcpTraffic
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("all_tcp_traffic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_AllUdpTraffic:
		if fv, exists := v.FldValidators["traffic_choice.all_udp_traffic"]; exists {
			val := m.GetTrafficChoice().(*NetworkPolicyRuleType_AllUdpTraffic).AllUdpTraffic
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("all_udp_traffic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_Applications:
		if fv, exists := v.FldValidators["traffic_choice.applications"]; exists {
			val := m.GetTrafficChoice().(*NetworkPolicyRuleType_Applications).Applications
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("applications"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NetworkPolicyRuleType_ProtocolPortRange:
		if fv, exists := v.FldValidators["traffic_choice.protocol_port_range"]; exists {
			val := m.GetTrafficChoice().(*NetworkPolicyRuleType_ProtocolPortRange).ProtocolPortRange
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("protocol_port_range"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkPolicyRuleTypeValidator = func() *ValidateNetworkPolicyRuleType {
	v := &ValidateNetworkPolicyRuleType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhKeys := v.KeysValidationRuleHandler
	rulesKeys := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhKeys(rulesKeys)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NetworkPolicyRuleType.keys: %s", err)
		panic(errMsg)
	}
	v.FldValidators["keys"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NetworkPolicyRuleType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	v.FldValidators["other_endpoint.ip_prefix_set"] = ves_io_schema.IpPrefixSetRefTypeValidator().Validate
	v.FldValidators["other_endpoint.prefix_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["other_endpoint.label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["traffic_choice.protocol_port_range"] = ProtocolPortTypeValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func NetworkPolicyRuleTypeValidator() db.Validator {
	return DefaultNetworkPolicyRuleTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ProtocolPortType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProtocolPortType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProtocolPortType) DeepCopy() *ProtocolPortType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProtocolPortType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProtocolPortType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProtocolPortType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProtocolPortTypeValidator().Validate(ctx, m, opts...)
}

type ValidateProtocolPortType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProtocolPortType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateProtocolPortType) PortRangesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for port_ranges")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for port_ranges")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated port_ranges")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items port_ranges")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateProtocolPortType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProtocolPortType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProtocolPortType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["port_ranges"]; exists {
		vOpts := append(opts, db.WithValidateField("port_ranges"))
		if err := fv(ctx, m.GetPortRanges(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProtocolPortTypeValidator = func() *ValidateProtocolPortType {
	v := &ValidateProtocolPortType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ALL\",\"TCP\",\"UDP\",\"ICMP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProtocolPortType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	vrhPortRanges := v.PortRangesValidationRuleHandler
	rulesPortRanges := map[string]string{
		"ves.io.schema.rules.repeated.items.string.port_range": "true",
		"ves.io.schema.rules.repeated.max_items":               "128",
	}
	vFn, err = vrhPortRanges(rulesPortRanges)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProtocolPortType.port_ranges: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_ranges"] = vFn

	return v
}()

func ProtocolPortTypeValidator() db.Validator {
	return DefaultProtocolPortTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetEndpointDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetEndpointDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetEndpoint() == nil {
		return nil, nil
	}

	drInfos, err := m.GetEndpoint().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetEndpoint().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "endpoint." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_Rules:

		drInfos, err := m.GetRules().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rules." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_LegacyRules:

		drInfos, err := m.GetLegacyRules().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyRules().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_rules." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) EndpointValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for endpoint")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := EndpointChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint"))
		if err := fv(ctx, m.GetEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_Rules:
		if fv, exists := v.FldValidators["rule_choice.rules"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_Rules).Rules
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rules"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LegacyRules:
		if fv, exists := v.FldValidators["rule_choice.legacy_rules"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_LegacyRules).LegacyRules
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("legacy_rules"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpoint := v.EndpointValidationRuleHandler
	rulesEndpoint := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEndpoint(rulesEndpoint)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.endpoint: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint"] = vFn

	v.FldValidators["rule_choice.rules"] = NetworkPolicyRuleChoiceValidator().Validate
	v.FldValidators["rule_choice.legacy_rules"] = LegacyNetworkPolicyRuleChoiceValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Endpoint = f.GetEndpoint()

}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Endpoint = m1.Endpoint

}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *GetSpecType_LegacyRules:
		o.RuleChoice = &GlobalSpecType_LegacyRules{LegacyRules: of.LegacyRules}

	case *GetSpecType_Rules:
		o.RuleChoice = &GlobalSpecType_Rules{Rules: of.Rules}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_LegacyRules:
		r.RuleChoice = &GetSpecType_LegacyRules{LegacyRules: of.LegacyRules}

	case *GlobalSpecType_Rules:
		r.RuleChoice = &GetSpecType_Rules{Rules: of.Rules}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Endpoint = f.GetEndpoint()
	m.GetRuleChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Endpoint = m1.Endpoint
	m1.SetRuleChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *ReplaceSpecType_LegacyRules:
		o.RuleChoice = &GlobalSpecType_LegacyRules{LegacyRules: of.LegacyRules}

	case *ReplaceSpecType_Rules:
		o.RuleChoice = &GlobalSpecType_Rules{Rules: of.Rules}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_LegacyRules:
		r.RuleChoice = &ReplaceSpecType_LegacyRules{LegacyRules: of.LegacyRules}

	case *GlobalSpecType_Rules:
		r.RuleChoice = &ReplaceSpecType_Rules{Rules: of.Rules}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Endpoint = f.GetEndpoint()
	m.GetRuleChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Endpoint = m1.Endpoint
	m1.SetRuleChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package topology

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *DCClusterGroupSummaryInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DCClusterGroupSummaryInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DCClusterGroupSummaryInfo) DeepCopy() *DCClusterGroupSummaryInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DCClusterGroupSummaryInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DCClusterGroupSummaryInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DCClusterGroupSummaryInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DCClusterGroupSummaryInfoValidator().Validate(ctx, m, opts...)
}

type ValidateDCClusterGroupSummaryInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDCClusterGroupSummaryInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DCClusterGroupSummaryInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DCClusterGroupSummaryInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["sites"]; exists {

		vOpts := append(opts, db.WithValidateField("sites"))
		if err := fv(ctx, m.GetSites(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDCClusterGroupSummaryInfoValidator = func() *ValidateDCClusterGroupSummaryInfo {
	v := &ValidateDCClusterGroupSummaryInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DCClusterGroupSummaryInfoValidator() db.Validator {
	return DefaultDCClusterGroupSummaryInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *DCClusterGroupsSummaryRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DCClusterGroupsSummaryRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DCClusterGroupsSummaryRequest) DeepCopy() *DCClusterGroupsSummaryRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DCClusterGroupsSummaryRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DCClusterGroupsSummaryRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DCClusterGroupsSummaryRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DCClusterGroupsSummaryRequestValidator().Validate(ctx, m, opts...)
}

type ValidateDCClusterGroupsSummaryRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDCClusterGroupsSummaryRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DCClusterGroupsSummaryRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DCClusterGroupsSummaryRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDCClusterGroupsSummaryRequestValidator = func() *ValidateDCClusterGroupsSummaryRequest {
	v := &ValidateDCClusterGroupsSummaryRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DCClusterGroupsSummaryRequestValidator() db.Validator {
	return DefaultDCClusterGroupsSummaryRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *DCClusterTopologyRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DCClusterTopologyRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DCClusterTopologyRequest) DeepCopy() *DCClusterTopologyRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DCClusterTopologyRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DCClusterTopologyRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DCClusterTopologyRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DCClusterTopologyRequestValidator().Validate(ctx, m, opts...)
}

type ValidateDCClusterTopologyRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDCClusterTopologyRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DCClusterTopologyRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DCClusterTopologyRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group"]; exists {

		vOpts := append(opts, db.WithValidateField("dc_cluster_group"))
		if err := fv(ctx, m.GetDcClusterGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("metric_selector"))
		if err := fv(ctx, m.GetMetricSelector(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDCClusterTopologyRequestValidator = func() *ValidateDCClusterTopologyRequest {
	v := &ValidateDCClusterTopologyRequest{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["metric_selector"] = MetricSelectorValidator().Validate

	return v
}()

func DCClusterTopologyRequestValidator() db.Validator {
	return DefaultDCClusterTopologyRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *Edge) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Edge) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Edge) DeepCopy() *Edge {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Edge{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Edge) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Edge) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EdgeValidator().Validate(ctx, m, opts...)
}

type ValidateEdge struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEdge) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Edge)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Edge got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["links"]; exists {

		vOpts := append(opts, db.WithValidateField("links"))
		for idx, item := range m.GetLinks() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node_id1"]; exists {

		vOpts := append(opts, db.WithValidateField("node_id1"))
		if err := fv(ctx, m.GetNodeId1(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node_id2"]; exists {

		vOpts := append(opts, db.WithValidateField("node_id2"))
		if err := fv(ctx, m.GetNodeId2(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEdgeValidator = func() *ValidateEdge {
	v := &ValidateEdge{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func EdgeValidator() db.Validator {
	return DefaultEdgeValidator
}

// augmented methods on protoc/std generated struct

func (m *EdgeInfoSummary) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EdgeInfoSummary) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EdgeInfoSummary) DeepCopy() *EdgeInfoSummary {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EdgeInfoSummary{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EdgeInfoSummary) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EdgeInfoSummary) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EdgeInfoSummaryValidator().Validate(ctx, m, opts...)
}

type ValidateEdgeInfoSummary struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEdgeInfoSummary) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EdgeInfoSummary)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EdgeInfoSummary got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["count"]; exists {

		vOpts := append(opts, db.WithValidateField("count"))
		if err := fv(ctx, m.GetCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEdgeInfoSummaryValidator = func() *ValidateEdgeInfoSummary {
	v := &ValidateEdgeInfoSummary{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func EdgeInfoSummaryValidator() db.Validator {
	return DefaultEdgeInfoSummaryValidator
}

// augmented methods on protoc/std generated struct

func (m *LinkInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LinkInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LinkInfo) DeepCopy() *LinkInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LinkInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LinkInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LinkInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LinkInfoValidator().Validate(ctx, m, opts...)
}

type ValidateLinkInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLinkInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LinkInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LinkInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dst_id"]; exists {

		vOpts := append(opts, db.WithValidateField("dst_id"))
		if err := fv(ctx, m.GetDstId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["src_id"]; exists {

		vOpts := append(opts, db.WithValidateField("src_id"))
		if err := fv(ctx, m.GetSrcId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLinkInfoValidator = func() *ValidateLinkInfo {
	v := &ValidateLinkInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func LinkInfoValidator() db.Validator {
	return DefaultLinkInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *LinkInfoSummary) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LinkInfoSummary) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LinkInfoSummary) DeepCopy() *LinkInfoSummary {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LinkInfoSummary{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LinkInfoSummary) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LinkInfoSummary) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LinkInfoSummaryValidator().Validate(ctx, m, opts...)
}

type ValidateLinkInfoSummary struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLinkInfoSummary) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LinkInfoSummary)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LinkInfoSummary got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["count"]; exists {

		vOpts := append(opts, db.WithValidateField("count"))
		if err := fv(ctx, m.GetCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLinkInfoSummaryValidator = func() *ValidateLinkInfoSummary {
	v := &ValidateLinkInfoSummary{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func LinkInfoSummaryValidator() db.Validator {
	return DefaultLinkInfoSummaryValidator
}

// augmented methods on protoc/std generated struct

func (m *LinkTypeData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LinkTypeData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LinkTypeData) DeepCopy() *LinkTypeData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LinkTypeData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LinkTypeData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LinkTypeData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LinkTypeDataValidator().Validate(ctx, m, opts...)
}

type ValidateLinkTypeData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLinkTypeData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LinkTypeData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LinkTypeData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["info"]; exists {

		vOpts := append(opts, db.WithValidateField("info"))
		if err := fv(ctx, m.GetInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric"]; exists {

		vOpts := append(opts, db.WithValidateField("metric"))
		for idx, item := range m.GetMetric() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLinkTypeDataValidator = func() *ValidateLinkTypeData {
	v := &ValidateLinkTypeData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func LinkTypeDataValidator() db.Validator {
	return DefaultLinkTypeDataValidator
}

// augmented methods on protoc/std generated struct

func (m *MetricData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MetricData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MetricData) DeepCopy() *MetricData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MetricData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MetricData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MetricData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MetricDataValidator().Validate(ctx, m, opts...)
}

type ValidateMetricData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMetricData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MetricData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MetricData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["data"]; exists {

		vOpts := append(opts, db.WithValidateField("data"))
		for idx, item := range m.GetData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["unit"]; exists {

		vOpts := append(opts, db.WithValidateField("unit"))
		if err := fv(ctx, m.GetUnit(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMetricDataValidator = func() *ValidateMetricData {
	v := &ValidateMetricData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func MetricDataValidator() db.Validator {
	return DefaultMetricDataValidator
}

// augmented methods on protoc/std generated struct

func (m *MetricSelector) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MetricSelector) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MetricSelector) DeepCopy() *MetricSelector {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MetricSelector{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MetricSelector) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MetricSelector) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MetricSelectorValidator().Validate(ctx, m, opts...)
}

type ValidateMetricSelector struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMetricSelector) StartTimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for start_time")
	}

	return validatorFn, nil
}

func (v *ValidateMetricSelector) EndTimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for end_time")
	}

	return validatorFn, nil
}

func (v *ValidateMetricSelector) NodeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(MetricType)
		return int32(i)
	}
	// MetricType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, MetricType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for node")
	}
	itemsValidatorFn := func(ctx context.Context, elems []MetricType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for node")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]MetricType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []MetricType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated node")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items node")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMetricSelector) EdgeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(MetricType)
		return int32(i)
	}
	// MetricType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, MetricType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for edge")
	}
	itemsValidatorFn := func(ctx context.Context, elems []MetricType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for edge")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]MetricType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []MetricType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated edge")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items edge")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMetricSelector) StepValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for step")
	}

	return validatorFn, nil
}

func (v *ValidateMetricSelector) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MetricSelector)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MetricSelector got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["edge"]; exists {
		vOpts := append(opts, db.WithValidateField("edge"))
		if err := fv(ctx, m.GetEdge(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["end_time"]; exists {

		vOpts := append(opts, db.WithValidateField("end_time"))
		if err := fv(ctx, m.GetEndTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node"]; exists {
		vOpts := append(opts, db.WithValidateField("node"))
		if err := fv(ctx, m.GetNode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["start_time"]; exists {

		vOpts := append(opts, db.WithValidateField("start_time"))
		if err := fv(ctx, m.GetStartTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["step"]; exists {

		vOpts := append(opts, db.WithValidateField("step"))
		if err := fv(ctx, m.GetStep(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMetricSelectorValidator = func() *ValidateMetricSelector {
	v := &ValidateMetricSelector{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStartTime := v.StartTimeValidationRuleHandler
	rulesStartTime := map[string]string{
		"ves.io.schema.rules.string.query_time": "true",
	}
	vFn, err = vrhStartTime(rulesStartTime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MetricSelector.start_time: %s", err)
		panic(errMsg)
	}
	v.FldValidators["start_time"] = vFn

	vrhEndTime := v.EndTimeValidationRuleHandler
	rulesEndTime := map[string]string{
		"ves.io.schema.rules.string.query_time": "true",
	}
	vFn, err = vrhEndTime(rulesEndTime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MetricSelector.end_time: %s", err)
		panic(errMsg)
	}
	v.FldValidators["end_time"] = vFn

	vrhNode := v.NodeValidationRuleHandler
	rulesNode := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhNode(rulesNode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MetricSelector.node: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node"] = vFn

	vrhEdge := v.EdgeValidationRuleHandler
	rulesEdge := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhEdge(rulesEdge)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MetricSelector.edge: %s", err)
		panic(errMsg)
	}
	v.FldValidators["edge"] = vFn

	vrhStep := v.StepValidationRuleHandler
	rulesStep := map[string]string{
		"ves.io.schema.rules.string.query_step": "true",
	}
	vFn, err = vrhStep(rulesStep)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MetricSelector.step: %s", err)
		panic(errMsg)
	}
	v.FldValidators["step"] = vFn

	return v
}()

func MetricSelectorValidator() db.Validator {
	return DefaultMetricSelectorValidator
}

// augmented methods on protoc/std generated struct

func (m *MetricTypeData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MetricTypeData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MetricTypeData) DeepCopy() *MetricTypeData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MetricTypeData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MetricTypeData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MetricTypeData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MetricTypeDataValidator().Validate(ctx, m, opts...)
}

type ValidateMetricTypeData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMetricTypeData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MetricTypeData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MetricTypeData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {

		vOpts := append(opts, db.WithValidateField("values"))
		for idx, item := range m.GetValues() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMetricTypeDataValidator = func() *ValidateMetricTypeData {
	v := &ValidateMetricTypeData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func MetricTypeDataValidator() db.Validator {
	return DefaultMetricTypeDataValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkRouteTableData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkRouteTableData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkRouteTableData) DeepCopy() *NetworkRouteTableData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkRouteTableData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkRouteTableData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkRouteTableData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkRouteTableDataValidator().Validate(ctx, m, opts...)
}

func (m *NetworkRouteTableData) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRouteTableDataDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRouteTableDataDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSubnetDataDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSubnetDataDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *NetworkRouteTableData) GetRouteTableDataDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRouteTableData() == nil {
		return nil, nil
	}

	drInfos, err := m.GetRouteTableData().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetRouteTableData().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "route_table_data." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *NetworkRouteTableData) GetSubnetDataDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSubnetData() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetSubnetData() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSubnetData() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("subnet_data[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateNetworkRouteTableData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkRouteTableData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkRouteTableData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkRouteTableData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_table_data"]; exists {

		vOpts := append(opts, db.WithValidateField("route_table_data"))
		if err := fv(ctx, m.GetRouteTableData(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet_data"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_data"))
		for idx, item := range m.GetSubnetData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkRouteTableDataValidator = func() *ValidateNetworkRouteTableData {
	v := &ValidateNetworkRouteTableData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkRouteTableDataValidator() db.Validator {
	return DefaultNetworkRouteTableDataValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkRouteTableMetaData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkRouteTableMetaData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkRouteTableMetaData) DeepCopy() *NetworkRouteTableMetaData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkRouteTableMetaData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkRouteTableMetaData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkRouteTableMetaData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkRouteTableMetaDataValidator().Validate(ctx, m, opts...)
}

type ValidateNetworkRouteTableMetaData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkRouteTableMetaData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkRouteTableMetaData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkRouteTableMetaData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_table_metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("route_table_metadata"))
		if err := fv(ctx, m.GetRouteTableMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet_metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_metadata"))
		for idx, item := range m.GetSubnetMetadata() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkRouteTableMetaDataValidator = func() *ValidateNetworkRouteTableMetaData {
	v := &ValidateNetworkRouteTableMetaData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkRouteTableMetaDataValidator() db.Validator {
	return DefaultNetworkRouteTableMetaDataValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkRouteTablesRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkRouteTablesRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkRouteTablesRequest) DeepCopy() *NetworkRouteTablesRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkRouteTablesRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkRouteTablesRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkRouteTablesRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkRouteTablesRequestValidator().Validate(ctx, m, opts...)
}

type ValidateNetworkRouteTablesRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkRouteTablesRequest) IdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for id")
	}

	return validatorFn, nil
}

func (v *ValidateNetworkRouteTablesRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkRouteTablesRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkRouteTablesRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["regions"]; exists {

		vOpts := append(opts, db.WithValidateField("regions"))
		for idx, item := range m.GetRegions() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["route_table_ids"]; exists {

		vOpts := append(opts, db.WithValidateField("route_table_ids"))
		for idx, item := range m.GetRouteTableIds() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["subnet_cidrs"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_cidrs"))
		for idx, item := range m.GetSubnetCidrs() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["subnet_ids"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_ids"))
		for idx, item := range m.GetSubnetIds() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkRouteTablesRequestValidator = func() *ValidateNetworkRouteTablesRequest {
	v := &ValidateNetworkRouteTablesRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhId := v.IdValidationRuleHandler
	rulesId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhId(rulesId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NetworkRouteTablesRequest.id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["id"] = vFn

	return v
}()

func NetworkRouteTablesRequestValidator() db.Validator {
	return DefaultNetworkRouteTablesRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkRouteTablesResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkRouteTablesResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkRouteTablesResponse) DeepCopy() *NetworkRouteTablesResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkRouteTablesResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkRouteTablesResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkRouteTablesResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkRouteTablesResponseValidator().Validate(ctx, m, opts...)
}

func (m *NetworkRouteTablesResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRoutesDataDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NetworkRouteTablesResponse) GetRoutesDataDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutesData() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutesData() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutesData() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes_data[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateNetworkRouteTablesResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkRouteTablesResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkRouteTablesResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkRouteTablesResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["routes_data"]; exists {

		vOpts := append(opts, db.WithValidateField("routes_data"))
		for idx, item := range m.GetRoutesData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkRouteTablesResponseValidator = func() *ValidateNetworkRouteTablesResponse {
	v := &ValidateNetworkRouteTablesResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkRouteTablesResponseValidator() db.Validator {
	return DefaultNetworkRouteTablesResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkRoutesData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkRoutesData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkRoutesData) DeepCopy() *NetworkRoutesData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkRoutesData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkRoutesData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkRoutesData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkRoutesDataValidator().Validate(ctx, m, opts...)
}

func (m *NetworkRoutesData) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRouteTablesDataDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NetworkRoutesData) GetRouteTablesDataDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRouteTablesData() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRouteTablesData() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRouteTablesData() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("route_tables_data[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateNetworkRoutesData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkRoutesData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkRoutesData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkRoutesData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_id"]; exists {

		vOpts := append(opts, db.WithValidateField("network_id"))
		if err := fv(ctx, m.GetNetworkId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_tables_data"]; exists {

		vOpts := append(opts, db.WithValidateField("route_tables_data"))
		for idx, item := range m.GetRouteTablesData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkRoutesDataValidator = func() *ValidateNetworkRoutesData {
	v := &ValidateNetworkRoutesData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkRoutesDataValidator() db.Validator {
	return DefaultNetworkRoutesDataValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkRoutesMetaData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkRoutesMetaData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkRoutesMetaData) DeepCopy() *NetworkRoutesMetaData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkRoutesMetaData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkRoutesMetaData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkRoutesMetaData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkRoutesMetaDataValidator().Validate(ctx, m, opts...)
}

type ValidateNetworkRoutesMetaData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkRoutesMetaData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkRoutesMetaData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkRoutesMetaData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_id"]; exists {

		vOpts := append(opts, db.WithValidateField("network_id"))
		if err := fv(ctx, m.GetNetworkId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_tables_metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("route_tables_metadata"))
		for idx, item := range m.GetRouteTablesMetadata() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkRoutesMetaDataValidator = func() *ValidateNetworkRoutesMetaData {
	v := &ValidateNetworkRoutesMetaData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkRoutesMetaDataValidator() db.Validator {
	return DefaultNetworkRoutesMetaDataValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkSummaryInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkSummaryInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkSummaryInfo) DeepCopy() *NetworkSummaryInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkSummaryInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkSummaryInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkSummaryInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkSummaryInfoValidator().Validate(ctx, m, opts...)
}

type ValidateNetworkSummaryInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkSummaryInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkSummaryInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkSummaryInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_tables"]; exists {

		vOpts := append(opts, db.WithValidateField("route_tables"))
		for idx, item := range m.GetRouteTables() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkSummaryInfoValidator = func() *ValidateNetworkSummaryInfo {
	v := &ValidateNetworkSummaryInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkSummaryInfoValidator() db.Validator {
	return DefaultNetworkSummaryInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *Node) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Node) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Node) DeepCopy() *Node {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Node{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Node) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Node) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeValidator().Validate(ctx, m, opts...)
}

func (m *Node) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNodeTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *Node) GetNodeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodeType() == nil {
		return nil, nil
	}
	switch m.GetNodeType().(type) {
	case *Node_Site:

		drInfos, err := m.GetSite().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSite().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site." + dri.DRField
		}
		return drInfos, err

	case *Node_TransitGateway:

		drInfos, err := m.GetTransitGateway().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetTransitGateway().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "transit_gateway." + dri.DRField
		}
		return drInfos, err

	case *Node_Network:

		drInfos, err := m.GetNetwork().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetNetwork().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "network." + dri.DRField
		}
		return drInfos, err

	case *Node_Subnet:

		drInfos, err := m.GetSubnet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSubnet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "subnet." + dri.DRField
		}
		return drInfos, err

	case *Node_Instance:

		drInfos, err := m.GetInstance().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInstance().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "instance." + dri.DRField
		}
		return drInfos, err

	case *Node_SiteMeshGroup:

		drInfos, err := m.GetSiteMeshGroup().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteMeshGroup().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site_mesh_group." + dri.DRField
		}
		return drInfos, err

	case *Node_DcClusterGroup:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateNode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Node)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Node got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetNodeType().(type) {
	case *Node_Site:
		if fv, exists := v.FldValidators["node_type.site"]; exists {
			val := m.GetNodeType().(*Node_Site).Site
			vOpts := append(opts,
				db.WithValidateField("node_type"),
				db.WithValidateField("site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Node_TransitGateway:
		if fv, exists := v.FldValidators["node_type.transit_gateway"]; exists {
			val := m.GetNodeType().(*Node_TransitGateway).TransitGateway
			vOpts := append(opts,
				db.WithValidateField("node_type"),
				db.WithValidateField("transit_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Node_Network:
		if fv, exists := v.FldValidators["node_type.network"]; exists {
			val := m.GetNodeType().(*Node_Network).Network
			vOpts := append(opts,
				db.WithValidateField("node_type"),
				db.WithValidateField("network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Node_Subnet:
		if fv, exists := v.FldValidators["node_type.subnet"]; exists {
			val := m.GetNodeType().(*Node_Subnet).Subnet
			vOpts := append(opts,
				db.WithValidateField("node_type"),
				db.WithValidateField("subnet"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Node_Instance:
		if fv, exists := v.FldValidators["node_type.instance"]; exists {
			val := m.GetNodeType().(*Node_Instance).Instance
			vOpts := append(opts,
				db.WithValidateField("node_type"),
				db.WithValidateField("instance"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Node_SiteMeshGroup:
		if fv, exists := v.FldValidators["node_type.site_mesh_group"]; exists {
			val := m.GetNodeType().(*Node_SiteMeshGroup).SiteMeshGroup
			vOpts := append(opts,
				db.WithValidateField("node_type"),
				db.WithValidateField("site_mesh_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Node_DcClusterGroup:
		if fv, exists := v.FldValidators["node_type.dc_cluster_group"]; exists {
			val := m.GetNodeType().(*Node_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("node_type"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeValidator = func() *ValidateNode {
	v := &ValidateNode{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["node_type.instance"] = NodeTypeInstanceValidator().Validate
	v.FldValidators["node_type.site_mesh_group"] = NodeTypeSiteMeshGroupValidator().Validate

	return v
}()

func NodeValidator() db.Validator {
	return DefaultNodeValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeMetaData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeMetaData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeMetaData) DeepCopy() *NodeMetaData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeMetaData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeMetaData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeMetaData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeMetaDataValidator().Validate(ctx, m, opts...)
}

type ValidateNodeMetaData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeMetaData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeMetaData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeMetaData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_resource_id"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_resource_id"))
		if err := fv(ctx, m.GetCloudResourceId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["level"]; exists {

		vOpts := append(opts, db.WithValidateField("level"))
		if err := fv(ctx, m.GetLevel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["owner_id"]; exists {

		vOpts := append(opts, db.WithValidateField("owner_id"))
		if err := fv(ctx, m.GetOwnerId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["provider_type"]; exists {

		vOpts := append(opts, db.WithValidateField("provider_type"))
		if err := fv(ctx, m.GetProviderType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {

		vOpts := append(opts, db.WithValidateField("tags"))
		for key, value := range m.GetTags() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeMetaDataValidator = func() *ValidateNodeMetaData {
	v := &ValidateNodeMetaData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NodeMetaDataValidator() db.Validator {
	return DefaultNodeMetaDataValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeTypeDCClusterGroup) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeTypeDCClusterGroup) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeTypeDCClusterGroup) DeepCopy() *NodeTypeDCClusterGroup {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeTypeDCClusterGroup{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeTypeDCClusterGroup) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeTypeDCClusterGroup) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeTypeDCClusterGroupValidator().Validate(ctx, m, opts...)
}

type ValidateNodeTypeDCClusterGroup struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeTypeDCClusterGroup) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeTypeDCClusterGroup)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeTypeDCClusterGroup got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["info"]; exists {

		vOpts := append(opts, db.WithValidateField("info"))
		if err := fv(ctx, m.GetInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeTypeDCClusterGroupValidator = func() *ValidateNodeTypeDCClusterGroup {
	v := &ValidateNodeTypeDCClusterGroup{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NodeTypeDCClusterGroupValidator() db.Validator {
	return DefaultNodeTypeDCClusterGroupValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeTypeInstance) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeTypeInstance) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeTypeInstance) DeepCopy() *NodeTypeInstance {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeTypeInstance{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeTypeInstance) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeTypeInstance) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeTypeInstanceValidator().Validate(ctx, m, opts...)
}

func (m *NodeTypeInstance) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInfoDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NodeTypeInstance) GetInfoDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInfo() == nil {
		return nil, nil
	}

	drInfos, err := m.GetInfo().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetInfo().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "info." + dri.DRField
	}
	return drInfos, err

}

type ValidateNodeTypeInstance struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeTypeInstance) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeTypeInstance)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeTypeInstance got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["info"]; exists {

		vOpts := append(opts, db.WithValidateField("info"))
		if err := fv(ctx, m.GetInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric"]; exists {

		vOpts := append(opts, db.WithValidateField("metric"))
		for idx, item := range m.GetMetric() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeTypeInstanceValidator = func() *ValidateNodeTypeInstance {
	v := &ValidateNodeTypeInstance{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["info"] = InstanceTypeValidator().Validate

	return v
}()

func NodeTypeInstanceValidator() db.Validator {
	return DefaultNodeTypeInstanceValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeTypeNetwork) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeTypeNetwork) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeTypeNetwork) DeepCopy() *NodeTypeNetwork {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeTypeNetwork{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeTypeNetwork) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeTypeNetwork) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeTypeNetworkValidator().Validate(ctx, m, opts...)
}

func (m *NodeTypeNetwork) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInfoDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NodeTypeNetwork) GetInfoDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInfo() == nil {
		return nil, nil
	}

	drInfos, err := m.GetInfo().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetInfo().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "info." + dri.DRField
	}
	return drInfos, err

}

type ValidateNodeTypeNetwork struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeTypeNetwork) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeTypeNetwork)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeTypeNetwork got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["info"]; exists {

		vOpts := append(opts, db.WithValidateField("info"))
		if err := fv(ctx, m.GetInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric"]; exists {

		vOpts := append(opts, db.WithValidateField("metric"))
		for idx, item := range m.GetMetric() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeTypeNetworkValidator = func() *ValidateNodeTypeNetwork {
	v := &ValidateNodeTypeNetwork{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NodeTypeNetworkValidator() db.Validator {
	return DefaultNodeTypeNetworkValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeTypeSite) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeTypeSite) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeTypeSite) DeepCopy() *NodeTypeSite {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeTypeSite{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeTypeSite) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeTypeSite) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeTypeSiteValidator().Validate(ctx, m, opts...)
}

func (m *NodeTypeSite) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInfoDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NodeTypeSite) GetInfoDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInfo() == nil {
		return nil, nil
	}

	drInfos, err := m.GetInfo().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetInfo().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "info." + dri.DRField
	}
	return drInfos, err

}

type ValidateNodeTypeSite struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeTypeSite) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeTypeSite)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeTypeSite got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["info"]; exists {

		vOpts := append(opts, db.WithValidateField("info"))
		if err := fv(ctx, m.GetInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric"]; exists {

		vOpts := append(opts, db.WithValidateField("metric"))
		for idx, item := range m.GetMetric() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeTypeSiteValidator = func() *ValidateNodeTypeSite {
	v := &ValidateNodeTypeSite{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NodeTypeSiteValidator() db.Validator {
	return DefaultNodeTypeSiteValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeTypeSiteMeshGroup) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeTypeSiteMeshGroup) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeTypeSiteMeshGroup) DeepCopy() *NodeTypeSiteMeshGroup {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeTypeSiteMeshGroup{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeTypeSiteMeshGroup) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeTypeSiteMeshGroup) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeTypeSiteMeshGroupValidator().Validate(ctx, m, opts...)
}

func (m *NodeTypeSiteMeshGroup) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInfoDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NodeTypeSiteMeshGroup) GetInfoDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInfo() == nil {
		return nil, nil
	}

	drInfos, err := m.GetInfo().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetInfo().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "info." + dri.DRField
	}
	return drInfos, err

}

type ValidateNodeTypeSiteMeshGroup struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeTypeSiteMeshGroup) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeTypeSiteMeshGroup)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeTypeSiteMeshGroup got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["info"]; exists {

		vOpts := append(opts, db.WithValidateField("info"))
		if err := fv(ctx, m.GetInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeTypeSiteMeshGroupValidator = func() *ValidateNodeTypeSiteMeshGroup {
	v := &ValidateNodeTypeSiteMeshGroup{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["info"] = SiteMeshGroupTypeValidator().Validate

	return v
}()

func NodeTypeSiteMeshGroupValidator() db.Validator {
	return DefaultNodeTypeSiteMeshGroupValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeTypeSubnet) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeTypeSubnet) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeTypeSubnet) DeepCopy() *NodeTypeSubnet {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeTypeSubnet{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeTypeSubnet) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeTypeSubnet) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeTypeSubnetValidator().Validate(ctx, m, opts...)
}

func (m *NodeTypeSubnet) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInfoDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NodeTypeSubnet) GetInfoDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInfo() == nil {
		return nil, nil
	}

	drInfos, err := m.GetInfo().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetInfo().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "info." + dri.DRField
	}
	return drInfos, err

}

type ValidateNodeTypeSubnet struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeTypeSubnet) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeTypeSubnet)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeTypeSubnet got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["info"]; exists {

		vOpts := append(opts, db.WithValidateField("info"))
		if err := fv(ctx, m.GetInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric"]; exists {

		vOpts := append(opts, db.WithValidateField("metric"))
		for idx, item := range m.GetMetric() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeTypeSubnetValidator = func() *ValidateNodeTypeSubnet {
	v := &ValidateNodeTypeSubnet{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NodeTypeSubnetValidator() db.Validator {
	return DefaultNodeTypeSubnetValidator
}

// augmented methods on protoc/std generated struct

func (m *NodeTypeTransitGateway) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NodeTypeTransitGateway) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NodeTypeTransitGateway) DeepCopy() *NodeTypeTransitGateway {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NodeTypeTransitGateway{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NodeTypeTransitGateway) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NodeTypeTransitGateway) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NodeTypeTransitGatewayValidator().Validate(ctx, m, opts...)
}

func (m *NodeTypeTransitGateway) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInfoDRefInfo()

}

// GetDRefInfo for the field's type
func (m *NodeTypeTransitGateway) GetInfoDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInfo() == nil {
		return nil, nil
	}

	drInfos, err := m.GetInfo().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetInfo().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "info." + dri.DRField
	}
	return drInfos, err

}

type ValidateNodeTypeTransitGateway struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNodeTypeTransitGateway) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NodeTypeTransitGateway)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NodeTypeTransitGateway got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["info"]; exists {

		vOpts := append(opts, db.WithValidateField("info"))
		if err := fv(ctx, m.GetInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric"]; exists {

		vOpts := append(opts, db.WithValidateField("metric"))
		for idx, item := range m.GetMetric() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNodeTypeTransitGatewayValidator = func() *ValidateNodeTypeTransitGateway {
	v := &ValidateNodeTypeTransitGateway{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NodeTypeTransitGatewayValidator() db.Validator {
	return DefaultNodeTypeTransitGatewayValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTableData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTableData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTableData) DeepCopy() *RouteTableData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTableData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTableData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTableData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTableDataValidator().Validate(ctx, m, opts...)
}

func (m *RouteTableData) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRouteTableDRefInfo()

}

// GetDRefInfo for the field's type
func (m *RouteTableData) GetRouteTableDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRouteTable() == nil {
		return nil, nil
	}

	drInfos, err := m.GetRouteTable().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetRouteTable().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "route_table." + dri.DRField
	}
	return drInfos, err

}

type ValidateRouteTableData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTableData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTableData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTableData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_table"]; exists {

		vOpts := append(opts, db.WithValidateField("route_table"))
		if err := fv(ctx, m.GetRouteTable(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTableDataValidator = func() *ValidateRouteTableData {
	v := &ValidateRouteTableData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RouteTableDataValidator() db.Validator {
	return DefaultRouteTableDataValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTableMetaData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTableMetaData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTableMetaData) DeepCopy() *RouteTableMetaData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTableMetaData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTableMetaData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTableMetaData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTableMetaDataValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTableMetaData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTableMetaData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTableMetaData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTableMetaData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_resource_id"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_resource_id"))
		if err := fv(ctx, m.GetCloudResourceId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {

		vOpts := append(opts, db.WithValidateField("tags"))
		for key, value := range m.GetTags() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTableMetaDataValidator = func() *ValidateRouteTableMetaData {
	v := &ValidateRouteTableMetaData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RouteTableMetaDataValidator() db.Validator {
	return DefaultRouteTableMetaDataValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTableRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTableRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTableRequest) DeepCopy() *RouteTableRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTableRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTableRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTableRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTableRequestValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTableRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTableRequest) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateRouteTableRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTableRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTableRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTableRequestValidator = func() *ValidateRouteTableRequest {
	v := &ValidateRouteTableRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTableRequest.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func RouteTableRequestValidator() db.Validator {
	return DefaultRouteTableRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTableResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTableResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTableResponse) DeepCopy() *RouteTableResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTableResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTableResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTableResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTableResponseValidator().Validate(ctx, m, opts...)
}

func (m *RouteTableResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRouteTableDRefInfo()

}

// GetDRefInfo for the field's type
func (m *RouteTableResponse) GetRouteTableDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRouteTable() == nil {
		return nil, nil
	}

	drInfos, err := m.GetRouteTable().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetRouteTable().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "route_table." + dri.DRField
	}
	return drInfos, err

}

type ValidateRouteTableResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTableResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTableResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTableResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_table"]; exists {

		vOpts := append(opts, db.WithValidateField("route_table"))
		if err := fv(ctx, m.GetRouteTable(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTableResponseValidator = func() *ValidateRouteTableResponse {
	v := &ValidateRouteTableResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RouteTableResponseValidator() db.Validator {
	return DefaultRouteTableResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteMeshGroupSummaryInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteMeshGroupSummaryInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteMeshGroupSummaryInfo) DeepCopy() *SiteMeshGroupSummaryInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteMeshGroupSummaryInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteMeshGroupSummaryInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteMeshGroupSummaryInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteMeshGroupSummaryInfoValidator().Validate(ctx, m, opts...)
}

type ValidateSiteMeshGroupSummaryInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteMeshGroupSummaryInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteMeshGroupSummaryInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteMeshGroupSummaryInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["edge_status_summary"]; exists {

		vOpts := append(opts, db.WithValidateField("edge_status_summary"))
		for idx, item := range m.GetEdgeStatusSummary() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["link_status_summary"]; exists {

		vOpts := append(opts, db.WithValidateField("link_status_summary"))
		for idx, item := range m.GetLinkStatusSummary() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["other_connected_site_mesh_group_sites"]; exists {

		vOpts := append(opts, db.WithValidateField("other_connected_site_mesh_group_sites"))
		if err := fv(ctx, m.GetOtherConnectedSiteMeshGroupSites(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sites"]; exists {

		vOpts := append(opts, db.WithValidateField("sites"))
		if err := fv(ctx, m.GetSites(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteMeshGroupSummaryInfoValidator = func() *ValidateSiteMeshGroupSummaryInfo {
	v := &ValidateSiteMeshGroupSummaryInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SiteMeshGroupSummaryInfoValidator() db.Validator {
	return DefaultSiteMeshGroupSummaryInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteMeshGroupsSummaryRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteMeshGroupsSummaryRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteMeshGroupsSummaryRequest) DeepCopy() *SiteMeshGroupsSummaryRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteMeshGroupsSummaryRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteMeshGroupsSummaryRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteMeshGroupsSummaryRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteMeshGroupsSummaryRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSiteMeshGroupsSummaryRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteMeshGroupsSummaryRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteMeshGroupsSummaryRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteMeshGroupsSummaryRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteMeshGroupsSummaryRequestValidator = func() *ValidateSiteMeshGroupsSummaryRequest {
	v := &ValidateSiteMeshGroupsSummaryRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SiteMeshGroupsSummaryRequestValidator() db.Validator {
	return DefaultSiteMeshGroupsSummaryRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteMeshTopologyRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteMeshTopologyRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteMeshTopologyRequest) DeepCopy() *SiteMeshTopologyRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteMeshTopologyRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteMeshTopologyRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteMeshTopologyRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteMeshTopologyRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSiteMeshTopologyRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteMeshTopologyRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteMeshTopologyRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteMeshTopologyRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metric_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("metric_selector"))
		if err := fv(ctx, m.GetMetricSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group"]; exists {

		vOpts := append(opts, db.WithValidateField("site_mesh_group"))
		if err := fv(ctx, m.GetSiteMeshGroup(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteMeshTopologyRequestValidator = func() *ValidateSiteMeshTopologyRequest {
	v := &ValidateSiteMeshTopologyRequest{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["metric_selector"] = MetricSelectorValidator().Validate

	return v
}()

func SiteMeshTopologyRequestValidator() db.Validator {
	return DefaultSiteMeshTopologyRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteNetworksRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteNetworksRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteNetworksRequest) DeepCopy() *SiteNetworksRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteNetworksRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteNetworksRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteNetworksRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteNetworksRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSiteNetworksRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteNetworksRequest) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateSiteNetworksRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteNetworksRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteNetworksRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteNetworksRequestValidator = func() *ValidateSiteNetworksRequest {
	v := &ValidateSiteNetworksRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SiteNetworksRequest.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func SiteNetworksRequestValidator() db.Validator {
	return DefaultSiteNetworksRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteNetworksResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteNetworksResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteNetworksResponse) DeepCopy() *SiteNetworksResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteNetworksResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteNetworksResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteNetworksResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteNetworksResponseValidator().Validate(ctx, m, opts...)
}

type ValidateSiteNetworksResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteNetworksResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteNetworksResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteNetworksResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["routes_metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("routes_metadata"))
		for idx, item := range m.GetRoutesMetadata() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteNetworksResponseValidator = func() *ValidateSiteNetworksResponse {
	v := &ValidateSiteNetworksResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SiteNetworksResponseValidator() db.Validator {
	return DefaultSiteNetworksResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteSummaryInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteSummaryInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteSummaryInfo) DeepCopy() *SiteSummaryInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteSummaryInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteSummaryInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteSummaryInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteSummaryInfoValidator().Validate(ctx, m, opts...)
}

type ValidateSiteSummaryInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteSummaryInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteSummaryInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteSummaryInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["availability_zone"]; exists {

		vOpts := append(opts, db.WithValidateField("availability_zone"))
		for idx, item := range m.GetAvailabilityZone() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["node_count"]; exists {

		vOpts := append(opts, db.WithValidateField("node_count"))
		if err := fv(ctx, m.GetNodeCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node_info"]; exists {

		vOpts := append(opts, db.WithValidateField("node_info"))
		for idx, item := range m.GetNodeInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteSummaryInfoValidator = func() *ValidateSiteSummaryInfo {
	v := &ValidateSiteSummaryInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SiteSummaryInfoValidator() db.Validator {
	return DefaultSiteSummaryInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteTopologyRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteTopologyRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteTopologyRequest) DeepCopy() *SiteTopologyRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteTopologyRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteTopologyRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteTopologyRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteTopologyRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSiteTopologyRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteTopologyRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteTopologyRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteTopologyRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["group_dc_cluster_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("group_dc_cluster_nodes"))
		if err := fv(ctx, m.GetGroupDcClusterNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group_site_mesh_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("group_site_mesh_nodes"))
		if err := fv(ctx, m.GetGroupSiteMeshNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["level"]; exists {

		vOpts := append(opts, db.WithValidateField("level"))
		if err := fv(ctx, m.GetLevel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("metric_selector"))
		if err := fv(ctx, m.GetMetricSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node_id"]; exists {

		vOpts := append(opts, db.WithValidateField("node_id"))
		if err := fv(ctx, m.GetNodeId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteTopologyRequestValidator = func() *ValidateSiteTopologyRequest {
	v := &ValidateSiteTopologyRequest{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["metric_selector"] = MetricSelectorValidator().Validate

	return v
}()

func SiteTopologyRequestValidator() db.Validator {
	return DefaultSiteTopologyRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SubnetData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SubnetData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SubnetData) DeepCopy() *SubnetData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SubnetData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SubnetData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SubnetData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SubnetDataValidator().Validate(ctx, m, opts...)
}

func (m *SubnetData) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSubnetDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SubnetData) GetSubnetDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSubnet() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSubnet().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSubnet().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "subnet." + dri.DRField
	}
	return drInfos, err

}

type ValidateSubnetData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSubnetData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SubnetData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SubnetData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet"))
		if err := fv(ctx, m.GetSubnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSubnetDataValidator = func() *ValidateSubnetData {
	v := &ValidateSubnetData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SubnetDataValidator() db.Validator {
	return DefaultSubnetDataValidator
}

// augmented methods on protoc/std generated struct

func (m *SubnetMetaData) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SubnetMetaData) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SubnetMetaData) DeepCopy() *SubnetMetaData {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SubnetMetaData{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SubnetMetaData) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SubnetMetaData) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SubnetMetaDataValidator().Validate(ctx, m, opts...)
}

type ValidateSubnetMetaData struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSubnetMetaData) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SubnetMetaData)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SubnetMetaData got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_resource_id"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_resource_id"))
		if err := fv(ctx, m.GetCloudResourceId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSubnetMetaDataValidator = func() *ValidateSubnetMetaData {
	v := &ValidateSubnetMetaData{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SubnetMetaDataValidator() db.Validator {
	return DefaultSubnetMetaDataValidator
}

// augmented methods on protoc/std generated struct

func (m *SubnetSummaryInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SubnetSummaryInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SubnetSummaryInfo) DeepCopy() *SubnetSummaryInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SubnetSummaryInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SubnetSummaryInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SubnetSummaryInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SubnetSummaryInfoValidator().Validate(ctx, m, opts...)
}

type ValidateSubnetSummaryInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSubnetSummaryInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SubnetSummaryInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SubnetSummaryInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_tables"]; exists {

		vOpts := append(opts, db.WithValidateField("route_tables"))
		for idx, item := range m.GetRouteTables() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSubnetSummaryInfoValidator = func() *ValidateSubnetSummaryInfo {
	v := &ValidateSubnetSummaryInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SubnetSummaryInfoValidator() db.Validator {
	return DefaultSubnetSummaryInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *TopologyResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TopologyResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TopologyResponse) DeepCopy() *TopologyResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TopologyResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TopologyResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TopologyResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TopologyResponseValidator().Validate(ctx, m, opts...)
}

func (m *TopologyResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNodesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *TopologyResponse) GetNodesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetNodes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetNodes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("nodes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateTopologyResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTopologyResponse) StepValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for step")
	}

	return validatorFn, nil
}

func (v *ValidateTopologyResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TopologyResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TopologyResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["edges"]; exists {

		vOpts := append(opts, db.WithValidateField("edges"))
		for idx, item := range m.GetEdges() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes"))
		for idx, item := range m.GetNodes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["step"]; exists {

		vOpts := append(opts, db.WithValidateField("step"))
		if err := fv(ctx, m.GetStep(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTopologyResponseValidator = func() *ValidateTopologyResponse {
	v := &ValidateTopologyResponse{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStep := v.StepValidationRuleHandler
	rulesStep := map[string]string{
		"ves.io.schema.rules.string.time_interval": "true",
	}
	vFn, err = vrhStep(rulesStep)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TopologyResponse.step: %s", err)
		panic(errMsg)
	}
	v.FldValidators["step"] = vFn

	v.FldValidators["nodes"] = NodeValidator().Validate

	return v
}()

func TopologyResponseValidator() db.Validator {
	return DefaultTopologyResponseValidator
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/data_privacy/lma_region/types.proto

package lma_region

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LMA Region specification
//
// x-displayName: "Specification"
// Desired state for lma region
type GlobalSpecType struct {
	// Is Default
	//
	// x-displayName: "Is Default"
	// x-example: true
	// Is this the default region
	IsDefault bool `protobuf:"varint,1,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// Kafka params
	//
	// x-displayName: "Kafka params"
	// x-required
	// Kafka Params
	KafkaParams *KafkaParams `protobuf:"bytes,2,opt,name=kafka_params,json=kafkaParams,proto3" json:"kafka_params,omitempty"`
	// Elastic params
	//
	// x-displayName: "Elastic params"
	// x-required
	// Elastic Params
	ElasticParams *ElasticParams `protobuf:"bytes,3,opt,name=elastic_params,json=elasticParams,proto3" json:"elastic_params,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c3f5102a035d7b1, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *GlobalSpecType) GetKafkaParams() *KafkaParams {
	if m != nil {
		return m.KafkaParams
	}
	return nil
}

func (m *GlobalSpecType) GetElasticParams() *ElasticParams {
	if m != nil {
		return m.ElasticParams
	}
	return nil
}

// Get LMA Region
//
// x-displayName: "Get LMA Region"
// Shape of the lma region specification
type GetSpecType struct {
	IsDefault     bool           `protobuf:"varint,1,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	KafkaParams   *KafkaParams   `protobuf:"bytes,2,opt,name=kafka_params,json=kafkaParams,proto3" json:"kafka_params,omitempty"`
	ElasticParams *ElasticParams `protobuf:"bytes,3,opt,name=elastic_params,json=elasticParams,proto3" json:"elastic_params,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c3f5102a035d7b1, []int{1}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *GetSpecType) GetKafkaParams() *KafkaParams {
	if m != nil {
		return m.KafkaParams
	}
	return nil
}

func (m *GetSpecType) GetElasticParams() *ElasticParams {
	if m != nil {
		return m.ElasticParams
	}
	return nil
}

// Kafka Params
//
// x-displayName: "Kafka Params"
// Kafka parameters
type KafkaParams struct {
	// Bootstrap servers
	//
	// x-displayName: "Bootstrap servers"
	// x-required
	// Servers in a Kafka cluster that a client should use to bootstrap its connection to the cluster.
	BootstrapServers []string `protobuf:"bytes,1,rep,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
}

func (m *KafkaParams) Reset()      { *m = KafkaParams{} }
func (*KafkaParams) ProtoMessage() {}
func (*KafkaParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c3f5102a035d7b1, []int{2}
}
func (m *KafkaParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KafkaParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KafkaParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaParams.Merge(m, src)
}
func (m *KafkaParams) XXX_Size() int {
	return m.Size()
}
func (m *KafkaParams) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaParams.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaParams proto.InternalMessageInfo

func (m *KafkaParams) GetBootstrapServers() []string {
	if m != nil {
		return m.BootstrapServers
	}
	return nil
}

type ElasticParams struct {
	// Elastic Search URLs
	//
	// x-displayName: "Elastic Search URLs"
	// x-required
	// Elastic Search URL
	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (m *ElasticParams) Reset()      { *m = ElasticParams{} }
func (*ElasticParams) ProtoMessage() {}
func (*ElasticParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c3f5102a035d7b1, []int{3}
}
func (m *ElasticParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElasticParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElasticParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticParams.Merge(m, src)
}
func (m *ElasticParams) XXX_Size() int {
	return m.Size()
}
func (m *ElasticParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticParams.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticParams proto.InternalMessageInfo

func (m *ElasticParams) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.data_privacy.lma_region.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.data_privacy.lma_region.GlobalSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.data_privacy.lma_region.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.data_privacy.lma_region.GetSpecType")
	proto.RegisterType((*KafkaParams)(nil), "ves.io.schema.data_privacy.lma_region.KafkaParams")
	golang_proto.RegisterType((*KafkaParams)(nil), "ves.io.schema.data_privacy.lma_region.KafkaParams")
	proto.RegisterType((*ElasticParams)(nil), "ves.io.schema.data_privacy.lma_region.ElasticParams")
	golang_proto.RegisterType((*ElasticParams)(nil), "ves.io.schema.data_privacy.lma_region.ElasticParams")
}

func init() {
	proto.RegisterFile("ves.io/schema/data_privacy/lma_region/types.proto", fileDescriptor_8c3f5102a035d7b1)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/data_privacy/lma_region/types.proto", fileDescriptor_8c3f5102a035d7b1)
}

var fileDescriptor_8c3f5102a035d7b1 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x1c, 0xc5, 0x7d, 0x04, 0x10, 0xbd, 0xd0, 0x8a, 0x7a, 0x0a, 0x01, 0xae, 0x51, 0x24, 0xa4, 0x2c,
	0xb9, 0x13, 0x05, 0x09, 0x89, 0x01, 0xa4, 0x0a, 0xe8, 0xc0, 0x82, 0x52, 0x58, 0xe8, 0x60, 0x9d,
	0x9d, 0x8b, 0x7b, 0x8a, 0xdd, 0xff, 0xe9, 0xee, 0x6c, 0xc8, 0xc6, 0x47, 0x60, 0x65, 0x63, 0xe4,
	0x33, 0x30, 0x75, 0x44, 0x4c, 0x19, 0x33, 0x12, 0x7b, 0x81, 0xad, 0x12, 0x5f, 0x00, 0x61, 0xbb,
	0xc4, 0x2e, 0x08, 0x65, 0x66, 0xbb, 0xff, 0xbd, 0xf7, 0x7b, 0xf7, 0x6c, 0x9f, 0x8c, 0xef, 0xa4,
	0xc2, 0x50, 0x09, 0xcc, 0x04, 0x47, 0x22, 0xe6, 0x6c, 0xcc, 0x2d, 0xf7, 0x94, 0x96, 0x29, 0x0f,
	0x66, 0x2c, 0x8a, 0xb9, 0xa7, 0x45, 0x28, 0xe1, 0x98, 0xd9, 0x99, 0x12, 0x86, 0x2a, 0x0d, 0x16,
	0xdc, 0xdb, 0x25, 0x42, 0x4b, 0x84, 0xd6, 0x11, 0xba, 0x42, 0xba, 0xc3, 0x50, 0xda, 0xa3, 0xc4,
	0xa7, 0x01, 0xc4, 0x2c, 0x84, 0x10, 0x58, 0x41, 0xfb, 0xc9, 0xa4, 0x98, 0x8a, 0xa1, 0x58, 0x95,
	0xa9, 0xdd, 0x9d, 0x10, 0x20, 0x8c, 0xc4, 0xca, 0x65, 0x65, 0x2c, 0x8c, 0xe5, 0xb1, 0xaa, 0x0c,
	0x37, 0x9a, 0x4d, 0x41, 0x59, 0x09, 0xc7, 0x55, 0xa7, 0xee, 0xf5, 0xa6, 0x58, 0xab, 0xdb, 0xbd,
	0xd9, 0x94, 0x52, 0x1e, 0xc9, 0x31, 0xb7, 0xa2, 0x52, 0x7b, 0xe7, 0x54, 0x29, 0x5e, 0x7b, 0xcd,
	0xe8, 0x9d, 0x3f, 0x1d, 0xa6, 0x7e, 0x40, 0x3f, 0x47, 0x78, 0x6b, 0x3f, 0x02, 0x9f, 0x47, 0x07,
	0x4a, 0x04, 0x2f, 0x66, 0x4a, 0xb8, 0xb7, 0x30, 0x96, 0xc6, 0x1b, 0x8b, 0x09, 0x4f, 0x22, 0xdb,
	0x41, 0x3d, 0x34, 0xb8, 0x32, 0xda, 0x90, 0xe6, 0x71, 0xb9, 0xe1, 0xbe, 0xc4, 0x57, 0xa7, 0x7c,
	0x32, 0xe5, 0x9e, 0xe2, 0x9a, 0xc7, 0xa6, 0x73, 0xa1, 0x87, 0x06, 0xed, 0xdd, 0x5d, 0xba, 0xd6,
	0x8b, 0xa5, 0xcf, 0x7e, 0xa1, 0xcf, 0x0b, 0x72, 0xd4, 0x9e, 0xae, 0x06, 0xf7, 0x10, 0x6f, 0x89,
	0x88, 0x1b, 0x2b, 0x83, 0xb3, 0xe0, 0x56, 0x11, 0x7c, 0x6f, 0xcd, 0xe0, 0x27, 0x25, 0x5c, 0x45,
	0x6f, 0x8a, 0xfa, 0xd8, 0xff, 0x81, 0x70, 0x7b, 0x5f, 0xd8, 0xff, 0xf8, 0x11, 0x1f, 0x6c, 0x7f,
	0x79, 0x78, 0xee, 0x43, 0xf6, 0x9f, 0xe2, 0x76, 0xad, 0x8b, 0x7b, 0x1f, 0x6f, 0xfb, 0x00, 0xd6,
	0x58, 0xcd, 0x95, 0x67, 0x84, 0x4e, 0x85, 0x36, 0x1d, 0xd4, 0x6b, 0x0d, 0x36, 0xf6, 0xf0, 0xa7,
	0xef, 0x27, 0xad, 0x4b, 0xba, 0xd5, 0xf9, 0xf0, 0x68, 0x74, 0xed, 0xb7, 0xe9, 0xa0, 0xf4, 0xf4,
	0x19, 0xde, 0x6c, 0x1c, 0xed, 0x12, 0x7c, 0x31, 0xd1, 0xd1, 0xdf, 0xe0, 0x62, 0x7f, 0xef, 0x3d,
	0x9a, 0x2f, 0x89, 0xb3, 0x58, 0x12, 0xe7, 0x74, 0x49, 0xd0, 0xdb, 0x8c, 0xa0, 0x8f, 0x19, 0x41,
	0x9f, 0x33, 0x82, 0xe6, 0x19, 0x41, 0x8b, 0x8c, 0xa0, 0xaf, 0x19, 0x41, 0xdf, 0x32, 0xe2, 0x9c,
	0x66, 0x04, 0xbd, 0xcb, 0x89, 0x73, 0x92, 0x13, 0x34, 0xcf, 0x89, 0xb3, 0xc8, 0x89, 0xf3, 0xea,
	0x30, 0x04, 0x35, 0x0d, 0x69, 0x0a, 0x91, 0x15, 0x5a, 0x73, 0x9a, 0x18, 0x56, 0x2c, 0x26, 0xa0,
	0xe3, 0xa1, 0xd2, 0x90, 0xca, 0xb1, 0xd0, 0xc3, 0x33, 0x99, 0x29, 0x3f, 0x04, 0x26, 0xde, 0xd8,
	0xea, 0x8e, 0xff, 0xfb, 0x67, 0xe0, 0x5f, 0x2e, 0xee, 0xfd, 0xdd, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x0a, 0xee, 0x1f, 0x4a, 0x3c, 0x04, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsDefault != that1.IsDefault {
		return false
	}
	if !this.KafkaParams.Equal(that1.KafkaParams) {
		return false
	}
	if !this.ElasticParams.Equal(that1.ElasticParams) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsDefault != that1.IsDefault {
		return false
	}
	if !this.KafkaParams.Equal(that1.KafkaParams) {
		return false
	}
	if !this.ElasticParams.Equal(that1.ElasticParams) {
		return false
	}
	return true
}
func (this *KafkaParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KafkaParams)
	if !ok {
		that2, ok := that.(KafkaParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BootstrapServers) != len(that1.BootstrapServers) {
		return false
	}
	for i := range this.BootstrapServers {
		if this.BootstrapServers[i] != that1.BootstrapServers[i] {
			return false
		}
	}
	return true
}
func (this *ElasticParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ElasticParams)
	if !ok {
		that2, ok := that.(ElasticParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Urls) != len(that1.Urls) {
		return false
	}
	for i := range this.Urls {
		if this.Urls[i] != that1.Urls[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&lma_region.GlobalSpecType{")
	s = append(s, "IsDefault: "+fmt.Sprintf("%#v", this.IsDefault)+",\n")
	if this.KafkaParams != nil {
		s = append(s, "KafkaParams: "+fmt.Sprintf("%#v", this.KafkaParams)+",\n")
	}
	if this.ElasticParams != nil {
		s = append(s, "ElasticParams: "+fmt.Sprintf("%#v", this.ElasticParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&lma_region.GetSpecType{")
	s = append(s, "IsDefault: "+fmt.Sprintf("%#v", this.IsDefault)+",\n")
	if this.KafkaParams != nil {
		s = append(s, "KafkaParams: "+fmt.Sprintf("%#v", this.KafkaParams)+",\n")
	}
	if this.ElasticParams != nil {
		s = append(s, "ElasticParams: "+fmt.Sprintf("%#v", this.ElasticParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KafkaParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&lma_region.KafkaParams{")
	s = append(s, "BootstrapServers: "+fmt.Sprintf("%#v", this.BootstrapServers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ElasticParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&lma_region.ElasticParams{")
	s = append(s, "Urls: "+fmt.Sprintf("%#v", this.Urls)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ElasticParams != nil {
		{
			size, err := m.ElasticParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.KafkaParams != nil {
		{
			size, err := m.KafkaParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ElasticParams != nil {
		{
			size, err := m.ElasticParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.KafkaParams != nil {
		{
			size, err := m.KafkaParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KafkaParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KafkaParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KafkaParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BootstrapServers) > 0 {
		for iNdEx := len(m.BootstrapServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BootstrapServers[iNdEx])
			copy(dAtA[i:], m.BootstrapServers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.BootstrapServers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ElasticParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElasticParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElasticParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDefault {
		n += 2
	}
	if m.KafkaParams != nil {
		l = m.KafkaParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ElasticParams != nil {
		l = m.ElasticParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDefault {
		n += 2
	}
	if m.KafkaParams != nil {
		l = m.KafkaParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ElasticParams != nil {
		l = m.ElasticParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *KafkaParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BootstrapServers) > 0 {
		for _, s := range m.BootstrapServers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ElasticParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`IsDefault:` + fmt.Sprintf("%v", this.IsDefault) + `,`,
		`KafkaParams:` + strings.Replace(this.KafkaParams.String(), "KafkaParams", "KafkaParams", 1) + `,`,
		`ElasticParams:` + strings.Replace(this.ElasticParams.String(), "ElasticParams", "ElasticParams", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`IsDefault:` + fmt.Sprintf("%v", this.IsDefault) + `,`,
		`KafkaParams:` + strings.Replace(this.KafkaParams.String(), "KafkaParams", "KafkaParams", 1) + `,`,
		`ElasticParams:` + strings.Replace(this.ElasticParams.String(), "ElasticParams", "ElasticParams", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KafkaParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KafkaParams{`,
		`BootstrapServers:` + fmt.Sprintf("%v", this.BootstrapServers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElasticParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElasticParams{`,
		`Urls:` + fmt.Sprintf("%v", this.Urls) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KafkaParams == nil {
				m.KafkaParams = &KafkaParams{}
			}
			if err := m.KafkaParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElasticParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElasticParams == nil {
				m.ElasticParams = &ElasticParams{}
			}
			if err := m.ElasticParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KafkaParams == nil {
				m.KafkaParams = &KafkaParams{}
			}
			if err := m.KafkaParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElasticParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElasticParams == nil {
				m.ElasticParams = &ElasticParams{}
			}
			if err := m.ElasticParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KafkaParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KafkaParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KafkaParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootstrapServers = append(m.BootstrapServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElasticParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElasticParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElasticParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

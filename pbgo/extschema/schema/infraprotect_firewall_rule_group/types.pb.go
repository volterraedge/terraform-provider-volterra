// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/infraprotect_firewall_rule_group/types.proto

package infraprotect_firewall_rule_group

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "DDos Transit Firewall Rule Group"
// DDos Transit Firewall Rule Group spec
type GlobalSpecType struct {
	// Firewall Rule Group Name
	//
	// x-displayName: "Firewall Rule Group Name"
	// x-required
	// x-example: "Group Name"
	// Firewall Rule Group Name
	FirewallRuleGroupName string `protobuf:"bytes,1,opt,name=firewall_rule_group_name,json=firewallRuleGroupName,proto3" json:"firewall_rule_group_name,omitempty"`
	// Firewall Rulesets
	//
	// x-displayName: "Firewall Rulesets"
	// x-required
	// Firewall Rulesets
	FirewallRuleset []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=firewall_ruleset,json=firewallRuleset,proto3" json:"firewall_ruleset,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d51cd8b6479b2a, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetFirewallRuleGroupName() string {
	if m != nil {
		return m.FirewallRuleGroupName
	}
	return ""
}

func (m *GlobalSpecType) GetFirewallRuleset() []*schema.ObjectRefType {
	if m != nil {
		return m.FirewallRuleset
	}
	return nil
}

// DDoS transit Firewall Rule Group
//
// x-displayName: "Replace DDoS transit Firewall Rule Group"
// Amends a DDoS transit Firewall Rule Group
type CreateSpecType struct {
	FirewallRuleGroupName string `protobuf:"bytes,1,opt,name=firewall_rule_group_name,json=firewallRuleGroupName,proto3" json:"firewall_rule_group_name,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d51cd8b6479b2a, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetFirewallRuleGroupName() string {
	if m != nil {
		return m.FirewallRuleGroupName
	}
	return ""
}

// DDoS transit Firewall Rule Group
//
// x-displayName: "Replace DDoS transit Firewall Rule Group"
// Amends a DDoS transit Firewall Rule Group
type ReplaceSpecType struct {
	FirewallRuleGroupName string `protobuf:"bytes,1,opt,name=firewall_rule_group_name,json=firewallRuleGroupName,proto3" json:"firewall_rule_group_name,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d51cd8b6479b2a, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetFirewallRuleGroupName() string {
	if m != nil {
		return m.FirewallRuleGroupName
	}
	return ""
}

// Get DDoS transit Firewall Rule Group
//
// x-displayName: "Get Infraprotect Firewall Rule Group"
// Get DDoS transit Firewall Rule Group
type GetSpecType struct {
	FirewallRuleGroupName string                  `protobuf:"bytes,1,opt,name=firewall_rule_group_name,json=firewallRuleGroupName,proto3" json:"firewall_rule_group_name,omitempty"`
	FirewallRuleset       []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=firewall_ruleset,json=firewallRuleset,proto3" json:"firewall_ruleset,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d51cd8b6479b2a, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetFirewallRuleGroupName() string {
	if m != nil {
		return m.FirewallRuleGroupName
	}
	return ""
}

func (m *GetSpecType) GetFirewallRuleset() []*schema.ObjectRefType {
	if m != nil {
		return m.FirewallRuleset
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule_group.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule_group.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule_group.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule_group.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule_group.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule_group.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule_group.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule_group.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/infraprotect_firewall_rule_group/types.proto", fileDescriptor_a0d51cd8b6479b2a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/infraprotect_firewall_rule_group/types.proto", fileDescriptor_a0d51cd8b6479b2a)
}

var fileDescriptor_a0d51cd8b6479b2a = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xde, 0x97, 0xd8, 0x82, 0x5b, 0x68, 0x6b, 0x40, 0x88, 0xb1, 0x0e, 0x21, 0xa7, 0x5e, 0xb2,
	0x0b, 0x7a, 0x10, 0x7a, 0xc8, 0xa1, 0x15, 0x72, 0x11, 0x85, 0x55, 0x2f, 0xa2, 0x2c, 0xb3, 0x9b,
	0xb7, 0xdb, 0xd1, 0xd9, 0xcc, 0x30, 0x3b, 0x9b, 0xda, 0x83, 0xe0, 0xcd, 0xab, 0xf4, 0x27, 0x78,
	0x92, 0xfe, 0x04, 0xf5, 0x90, 0x8b, 0x20, 0x3d, 0x05, 0xbc, 0xe4, 0xd8, 0x4c, 0x2e, 0x7a, 0xeb,
	0x4f, 0x90, 0xdd, 0xa4, 0xd0, 0x8d, 0x15, 0xc5, 0xe0, 0xed, 0x0d, 0xdf, 0x7e, 0xdf, 0xfb, 0xde,
	0xf7, 0xde, 0xda, 0x3b, 0x03, 0x4c, 0x1d, 0x26, 0xdc, 0x34, 0xdc, 0xc7, 0x84, 0xba, 0xac, 0x1f,
	0x29, 0x2a, 0x95, 0xd0, 0x18, 0x6a, 0x3f, 0x62, 0x0a, 0x0f, 0x28, 0xe7, 0xbe, 0xca, 0x38, 0xfa,
	0xb1, 0x12, 0x99, 0x74, 0xf5, 0xa1, 0xc4, 0xd4, 0xc9, 0xbf, 0x10, 0x35, 0x67, 0xc6, 0x75, 0x66,
	0x5c, 0xe7, 0x4f, 0xdc, 0x46, 0x3b, 0x66, 0x7a, 0x3f, 0x0b, 0x9c, 0x50, 0x24, 0x6e, 0x2c, 0x62,
	0xe1, 0x16, 0x32, 0x41, 0x16, 0x15, 0xaf, 0xe2, 0x51, 0x54, 0x33, 0xf9, 0xc6, 0xcd, 0xb2, 0x35,
	0x21, 0x35, 0x13, 0xfd, 0x79, 0xef, 0xc6, 0x8d, 0x32, 0x78, 0xc1, 0x56, 0x63, 0xab, 0x0c, 0x0d,
	0x28, 0x67, 0x3d, 0xaa, 0x71, 0x8e, 0x36, 0x17, 0x50, 0x86, 0x07, 0x7e, 0x49, 0xba, 0xf5, 0x0d,
	0xec, 0xf5, 0x2e, 0x17, 0x01, 0xe5, 0x8f, 0x24, 0x86, 0x8f, 0x0f, 0x25, 0xd6, 0xee, 0xda, 0xf5,
	0x4b, 0x06, 0xf2, 0xfb, 0x34, 0xc1, 0x3a, 0x34, 0x61, 0xfb, 0xaa, 0x77, 0xfd, 0x1c, 0xf7, 0x32,
	0x8e, 0xdd, 0x1c, 0x7d, 0x40, 0x13, 0xac, 0xbd, 0x05, 0x7b, 0xb3, 0xc4, 0x4c, 0x51, 0xd7, 0x2b,
	0xcd, 0xea, 0xf6, 0xda, 0xed, 0xad, 0x85, 0xf8, 0x1e, 0x06, 0x2f, 0x30, 0xd4, 0x1e, 0x46, 0x79,
	0xc7, 0xdd, 0xce, 0xf1, 0xeb, 0x5b, 0xbf, 0x0f, 0x34, 0x45, 0xfd, 0xf1, 0xc7, 0xb0, 0xba, 0x72,
	0x04, 0x95, 0x3a, 0x98, 0xd3, 0x2f, 0xd5, 0x2b, 0xc3, 0x4f, 0x60, 0xe5, 0xc5, 0xea, 0xd1, 0x67,
	0xa8, 0x6c, 0x5a, 0xde, 0xc6, 0x45, 0x3f, 0x29, 0xea, 0xd6, 0x33, 0x7b, 0x7d, 0x4f, 0x21, 0xd5,
	0xb8, 0xf4, 0x50, 0x3b, 0xd7, 0x4e, 0x3a, 0x0b, 0x01, 0xb5, 0x9e, 0xdb, 0x1b, 0x1e, 0x4a, 0x4e,
	0xc3, 0xff, 0x23, 0xff, 0x1e, 0xec, 0xb5, 0x2e, 0xea, 0xe5, 0xf7, 0xd1, 0xfd, 0xb7, 0x75, 0xfc,
	0x12, 0xe7, 0x25, 0x26, 0x77, 0x8f, 0xe1, 0xa4, 0xb3, 0xb2, 0xe7, 0xdd, 0x7f, 0x72, 0x6f, 0x34,
	0x21, 0xd6, 0x78, 0x42, 0xac, 0xb3, 0x09, 0x81, 0x37, 0x86, 0xc0, 0x07, 0x43, 0xe0, 0xab, 0x21,
	0x30, 0x32, 0x04, 0xc6, 0x86, 0xc0, 0xa9, 0x21, 0xf0, 0xdd, 0x10, 0xeb, 0xcc, 0x10, 0x78, 0x37,
	0x25, 0xd6, 0x70, 0x4a, 0x60, 0x34, 0x25, 0xd6, 0x78, 0x4a, 0xac, 0xa7, 0xbd, 0x58, 0xc8, 0x97,
	0xb1, 0x33, 0x10, 0x5c, 0xa3, 0x52, 0xd4, 0xc9, 0x52, 0xb7, 0x28, 0x22, 0xa1, 0x92, 0xb6, 0x54,
	0x62, 0xc0, 0x7a, 0xa8, 0xda, 0xe7, 0xb0, 0x2b, 0x83, 0x58, 0xb8, 0xf8, 0x4a, 0xcf, 0xef, 0xf9,
	0x2f, 0xff, 0xe3, 0x60, 0xb5, 0xb8, 0xf5, 0x3b, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xa6,
	0x8f, 0x43, 0x00, 0x04, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirewallRuleGroupName != that1.FirewallRuleGroupName {
		return false
	}
	if len(this.FirewallRuleset) != len(that1.FirewallRuleset) {
		return false
	}
	for i := range this.FirewallRuleset {
		if !this.FirewallRuleset[i].Equal(that1.FirewallRuleset[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirewallRuleGroupName != that1.FirewallRuleGroupName {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirewallRuleGroupName != that1.FirewallRuleGroupName {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirewallRuleGroupName != that1.FirewallRuleGroupName {
		return false
	}
	if len(this.FirewallRuleset) != len(that1.FirewallRuleset) {
		return false
	}
	for i := range this.FirewallRuleset {
		if !this.FirewallRuleset[i].Equal(that1.FirewallRuleset[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&infraprotect_firewall_rule_group.GlobalSpecType{")
	s = append(s, "FirewallRuleGroupName: "+fmt.Sprintf("%#v", this.FirewallRuleGroupName)+",\n")
	if this.FirewallRuleset != nil {
		s = append(s, "FirewallRuleset: "+fmt.Sprintf("%#v", this.FirewallRuleset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&infraprotect_firewall_rule_group.CreateSpecType{")
	s = append(s, "FirewallRuleGroupName: "+fmt.Sprintf("%#v", this.FirewallRuleGroupName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&infraprotect_firewall_rule_group.ReplaceSpecType{")
	s = append(s, "FirewallRuleGroupName: "+fmt.Sprintf("%#v", this.FirewallRuleGroupName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&infraprotect_firewall_rule_group.GetSpecType{")
	s = append(s, "FirewallRuleGroupName: "+fmt.Sprintf("%#v", this.FirewallRuleGroupName)+",\n")
	if this.FirewallRuleset != nil {
		s = append(s, "FirewallRuleset: "+fmt.Sprintf("%#v", this.FirewallRuleset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FirewallRuleset) > 0 {
		for iNdEx := len(m.FirewallRuleset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirewallRuleset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FirewallRuleGroupName) > 0 {
		i -= len(m.FirewallRuleGroupName)
		copy(dAtA[i:], m.FirewallRuleGroupName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FirewallRuleGroupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FirewallRuleGroupName) > 0 {
		i -= len(m.FirewallRuleGroupName)
		copy(dAtA[i:], m.FirewallRuleGroupName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FirewallRuleGroupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FirewallRuleGroupName) > 0 {
		i -= len(m.FirewallRuleGroupName)
		copy(dAtA[i:], m.FirewallRuleGroupName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FirewallRuleGroupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FirewallRuleset) > 0 {
		for iNdEx := len(m.FirewallRuleset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirewallRuleset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FirewallRuleGroupName) > 0 {
		i -= len(m.FirewallRuleGroupName)
		copy(dAtA[i:], m.FirewallRuleGroupName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FirewallRuleGroupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirewallRuleGroupName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.FirewallRuleset) > 0 {
		for _, e := range m.FirewallRuleset {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirewallRuleGroupName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirewallRuleGroupName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirewallRuleGroupName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.FirewallRuleset) > 0 {
		for _, e := range m.FirewallRuleset {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFirewallRuleset := "[]*ObjectRefType{"
	for _, f := range this.FirewallRuleset {
		repeatedStringForFirewallRuleset += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForFirewallRuleset += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`FirewallRuleGroupName:` + fmt.Sprintf("%v", this.FirewallRuleGroupName) + `,`,
		`FirewallRuleset:` + repeatedStringForFirewallRuleset + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`FirewallRuleGroupName:` + fmt.Sprintf("%v", this.FirewallRuleGroupName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`FirewallRuleGroupName:` + fmt.Sprintf("%v", this.FirewallRuleGroupName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFirewallRuleset := "[]*ObjectRefType{"
	for _, f := range this.FirewallRuleset {
		repeatedStringForFirewallRuleset += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForFirewallRuleset += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`FirewallRuleGroupName:` + fmt.Sprintf("%v", this.FirewallRuleGroupName) + `,`,
		`FirewallRuleset:` + repeatedStringForFirewallRuleset + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRuleGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRuleGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRuleset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRuleset = append(m.FirewallRuleset, &schema.ObjectRefType{})
			if err := m.FirewallRuleset[len(m.FirewallRuleset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRuleGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRuleGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRuleGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRuleGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRuleGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRuleGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRuleset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRuleset = append(m.FirewallRuleset, &schema.ObjectRefType{})
			if err := m.FirewallRuleset[len(m.FirewallRuleset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

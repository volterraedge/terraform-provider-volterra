// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cert_types.proto

package schema

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Certificate Information
//
// x-displayName: "Certificate Information"
// Information about a certificate.
type CertInfoType struct {
	// Common Name
	//
	// x-displayName: "Common Name"
	// Common Name (CN) of this certificate.
	CommonName string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Subject Alternative Names
	//
	// x-displayName: "SANs"
	// Subject Alternative Names of this certificate.
	SubjectAlternativeNames []string `protobuf:"bytes,2,rep,name=subject_alternative_names,json=subjectAlternativeNames,proto3" json:"subject_alternative_names,omitempty"`
	// Organization
	//
	// x-displayName: "Organization"
	// Organization of this certificate.
	Organization string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	// Expiry Timestamp
	//
	// x-displayName: "Expiry Timestamp"
	// Expiry timestamp of this certificate.
	Expiry *types.Timestamp `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// Issuer
	//
	// x-displayName: "Issuer"
	// Issuer of this certificate.
	Issuer string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	//  Public Key Algorithm
	//
	// x-displayName: "Public Key Algorithm"
	// Public Key Algorithm of this certificate.
	PublicKeyAlgorithm string `protobuf:"bytes,6,opt,name=public_key_algorithm,json=publicKeyAlgorithm,proto3" json:"public_key_algorithm,omitempty"`
}

func (m *CertInfoType) Reset()      { *m = CertInfoType{} }
func (*CertInfoType) ProtoMessage() {}
func (*CertInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{0}
}
func (m *CertInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CertInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertInfoType.Merge(m, src)
}
func (m *CertInfoType) XXX_Size() int {
	return m.Size()
}
func (m *CertInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_CertInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_CertInfoType proto.InternalMessageInfo

func (m *CertInfoType) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertInfoType) GetSubjectAlternativeNames() []string {
	if m != nil {
		return m.SubjectAlternativeNames
	}
	return nil
}

func (m *CertInfoType) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CertInfoType) GetExpiry() *types.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *CertInfoType) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CertInfoType) GetPublicKeyAlgorithm() string {
	if m != nil {
		return m.PublicKeyAlgorithm
	}
	return ""
}

// CertificateParamsType
//
// x-displayName: "Certificate Parameters"
// Certificate Parameters for authentication, TLS ciphers, and trust store
type CertificateParamsType struct {
	// certificates
	//
	// x-displayName: "Certificates"
	// x-required
	// Set of certificates
	Certificates []*ObjectRefType `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// validation_params
	//
	// x-displayName: "Root CA Validation parameters"
	// This includes URL for a trust store, whether SAN verification is required
	// and list of Subject Alt Names for verification
	ValidationParams *TlsValidationParamsType `protobuf:"bytes,2,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	// minimum_protocol_version
	//
	// x-displayName: "Minimum TLS Version"
	// Minimum TLS protocol version.
	MinimumProtocolVersion TlsProtocol `protobuf:"varint,3,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"minimum_protocol_version,omitempty"`
	// maximum_protocol_version
	//
	// x-displayName: "Maximum TLS Version"
	// Maximum TLS protocol version.
	MaximumProtocolVersion TlsProtocol `protobuf:"varint,4,opt,name=maximum_protocol_version,json=maximumProtocolVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"maximum_protocol_version,omitempty"`
	// cipher_suites
	//
	// x-displayName: "Cipher Suites"
	// x-example: "TLS_AES_128_GCM_SHA256"
	// The following list specifies the supported cipher suite
	//   TLS_AES_128_GCM_SHA256
	//   TLS_AES_256_GCM_SHA384
	//   TLS_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
	//   TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
	//   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
	//   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
	//   TLS_RSA_WITH_AES_128_CBC_SHA
	//   TLS_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_RSA_WITH_AES_256_CBC_SHA
	//   TLS_RSA_WITH_AES_256_GCM_SHA384
	//
	// If not specified, the default list:
	//   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	// will be used.
	CipherSuites []string `protobuf:"bytes,5,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	// require_client_certificate
	//
	// x-displayName: "Require Client Certificate(enable mTLS)"
	// If true, F5XC will reject connections without a valid client
	// certificate.
	RequireClientCertificate bool `protobuf:"varint,6,opt,name=require_client_certificate,json=requireClientCertificate,proto3" json:"require_client_certificate,omitempty"`
	// Client certificate verification
	//
	// x-displayName: "Client certificate verification"
	// x-required
	// Configuration to indicate whether client certificate verification is required
	//
	// Types that are valid to be assigned to ClientCertificateVerifyChoice:
	//	*CertificateParamsType_NoClientCertificate
	//	*CertificateParamsType_ClientCertificateRequired
	//	*CertificateParamsType_ClientCertificateOptional
	ClientCertificateVerifyChoice isCertificateParamsType_ClientCertificateVerifyChoice `protobuf_oneof:"client_certificate_verify_choice"`
	// Certificate Revocation list
	//
	// x-displayName: "CRL"
	// Reference to CRL object to download the CRL file and validate the client offered certificate.
	// Used to ensure that the client presented certificate is not revoked as per the CRL
	Crl []*ObjectRefType `protobuf:"bytes,7,rep,name=crl,proto3" json:"crl,omitempty"`
	// XFCC Header
	//
	// x-displayName: "XFCC Header"
	// X-Forwarded-Client-Cert header elements to be set in an mTLS enabled connections.
	// If none are defined, the header will not be added.
	XfccHeaderElements []XfccElement `protobuf:"varint,8,rep,packed,name=xfcc_header_elements,json=xfccHeaderElements,proto3,enum=ves.io.schema.XfccElement" json:"xfcc_header_elements,omitempty"`
}

func (m *CertificateParamsType) Reset()      { *m = CertificateParamsType{} }
func (*CertificateParamsType) ProtoMessage() {}
func (*CertificateParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{1}
}
func (m *CertificateParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CertificateParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateParamsType.Merge(m, src)
}
func (m *CertificateParamsType) XXX_Size() int {
	return m.Size()
}
func (m *CertificateParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateParamsType proto.InternalMessageInfo

type isCertificateParamsType_ClientCertificateVerifyChoice interface {
	isCertificateParamsType_ClientCertificateVerifyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CertificateParamsType_NoClientCertificate struct {
	NoClientCertificate *Empty `protobuf:"bytes,10,opt,name=no_client_certificate,json=noClientCertificate,proto3,oneof" json:"no_client_certificate,omitempty"`
}
type CertificateParamsType_ClientCertificateRequired struct {
	ClientCertificateRequired *Empty `protobuf:"bytes,11,opt,name=client_certificate_required,json=clientCertificateRequired,proto3,oneof" json:"client_certificate_required,omitempty"`
}
type CertificateParamsType_ClientCertificateOptional struct {
	ClientCertificateOptional *Empty `protobuf:"bytes,12,opt,name=client_certificate_optional,json=clientCertificateOptional,proto3,oneof" json:"client_certificate_optional,omitempty"`
}

func (*CertificateParamsType_NoClientCertificate) isCertificateParamsType_ClientCertificateVerifyChoice() {
}
func (*CertificateParamsType_ClientCertificateRequired) isCertificateParamsType_ClientCertificateVerifyChoice() {
}
func (*CertificateParamsType_ClientCertificateOptional) isCertificateParamsType_ClientCertificateVerifyChoice() {
}

func (m *CertificateParamsType) GetClientCertificateVerifyChoice() isCertificateParamsType_ClientCertificateVerifyChoice {
	if m != nil {
		return m.ClientCertificateVerifyChoice
	}
	return nil
}

func (m *CertificateParamsType) GetCertificates() []*ObjectRefType {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *CertificateParamsType) GetValidationParams() *TlsValidationParamsType {
	if m != nil {
		return m.ValidationParams
	}
	return nil
}

func (m *CertificateParamsType) GetMinimumProtocolVersion() TlsProtocol {
	if m != nil {
		return m.MinimumProtocolVersion
	}
	return TLS_AUTO
}

func (m *CertificateParamsType) GetMaximumProtocolVersion() TlsProtocol {
	if m != nil {
		return m.MaximumProtocolVersion
	}
	return TLS_AUTO
}

func (m *CertificateParamsType) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *CertificateParamsType) GetRequireClientCertificate() bool {
	if m != nil {
		return m.RequireClientCertificate
	}
	return false
}

func (m *CertificateParamsType) GetNoClientCertificate() *Empty {
	if x, ok := m.GetClientCertificateVerifyChoice().(*CertificateParamsType_NoClientCertificate); ok {
		return x.NoClientCertificate
	}
	return nil
}

func (m *CertificateParamsType) GetClientCertificateRequired() *Empty {
	if x, ok := m.GetClientCertificateVerifyChoice().(*CertificateParamsType_ClientCertificateRequired); ok {
		return x.ClientCertificateRequired
	}
	return nil
}

func (m *CertificateParamsType) GetClientCertificateOptional() *Empty {
	if x, ok := m.GetClientCertificateVerifyChoice().(*CertificateParamsType_ClientCertificateOptional); ok {
		return x.ClientCertificateOptional
	}
	return nil
}

func (m *CertificateParamsType) GetCrl() []*ObjectRefType {
	if m != nil {
		return m.Crl
	}
	return nil
}

func (m *CertificateParamsType) GetXfccHeaderElements() []XfccElement {
	if m != nil {
		return m.XfccHeaderElements
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CertificateParamsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CertificateParamsType_NoClientCertificate)(nil),
		(*CertificateParamsType_ClientCertificateRequired)(nil),
		(*CertificateParamsType_ClientCertificateOptional)(nil),
	}
}

// UpstreamCertificateParamsType
//
// x-displayName: "Upstream Certificate Parameters"
// Certificate Parameters for authentication, TLS ciphers, and trust store
type UpstreamCertificateParamsType struct {
	// certificates
	//
	// x-displayName: "Client Certificate"
	// x-required
	// Client TLS Certificate required for mTLS authentication
	Certificates []*ObjectRefType `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// validation_params
	//
	// x-displayName: "Root CA Validation parameters"
	// This includes URL for a trust store, whether SAN verification is required
	// and list of Subject Alt Names for verification
	ValidationParams *TlsValidationParamsType `protobuf:"bytes,2,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	// minimum_protocol_version
	//
	// x-displayName: "Minimum TLS Version"
	// Minimum TLS protocol version.
	MinimumProtocolVersion TlsProtocol `protobuf:"varint,3,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"minimum_protocol_version,omitempty"`
	// maximum_protocol_version
	//
	// x-displayName: "Maximum TLS Version"
	// Maximum TLS protocol version.
	MaximumProtocolVersion TlsProtocol `protobuf:"varint,4,opt,name=maximum_protocol_version,json=maximumProtocolVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"maximum_protocol_version,omitempty"`
	// cipher_suites
	//
	// x-displayName: "Cipher Suites"
	// x-example: "TLS_AES_128_GCM_SHA256"
	// The following list specifies the supported cipher suite
	//   TLS_AES_128_GCM_SHA256
	//   TLS_AES_256_GCM_SHA384
	//   TLS_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
	//   TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
	//   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
	//   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
	//   TLS_RSA_WITH_AES_128_CBC_SHA
	//   TLS_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_RSA_WITH_AES_256_CBC_SHA
	//   TLS_RSA_WITH_AES_256_GCM_SHA384
	//
	// If not specified, the default list:
	//   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	// will be used.
	CipherSuites []string `protobuf:"bytes,5,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
}

func (m *UpstreamCertificateParamsType) Reset()      { *m = UpstreamCertificateParamsType{} }
func (*UpstreamCertificateParamsType) ProtoMessage() {}
func (*UpstreamCertificateParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{2}
}
func (m *UpstreamCertificateParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamCertificateParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpstreamCertificateParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamCertificateParamsType.Merge(m, src)
}
func (m *UpstreamCertificateParamsType) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamCertificateParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamCertificateParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamCertificateParamsType proto.InternalMessageInfo

func (m *UpstreamCertificateParamsType) GetCertificates() []*ObjectRefType {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *UpstreamCertificateParamsType) GetValidationParams() *TlsValidationParamsType {
	if m != nil {
		return m.ValidationParams
	}
	return nil
}

func (m *UpstreamCertificateParamsType) GetMinimumProtocolVersion() TlsProtocol {
	if m != nil {
		return m.MinimumProtocolVersion
	}
	return TLS_AUTO
}

func (m *UpstreamCertificateParamsType) GetMaximumProtocolVersion() TlsProtocol {
	if m != nil {
		return m.MaximumProtocolVersion
	}
	return TLS_AUTO
}

func (m *UpstreamCertificateParamsType) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

// UpstreamTlsParamsType
//
// x-displayName: "Upstream TLS Parameters"
// TLS configuration for upstream connections
type UpstreamTlsParamsType struct {
	// TLS Parameters
	//
	// x-displayName: "TLS Parameters"
	// x-required
	// Select TLS Certificate object, or specify TLS Certificate Parameters inline (legacy)
	//
	// Types that are valid to be assigned to TlsParamsChoice:
	//	*UpstreamTlsParamsType_CommonParams
	//	*UpstreamTlsParamsType_CertParams
	TlsParamsChoice isUpstreamTlsParamsType_TlsParamsChoice `protobuf_oneof:"tls_params_choice"`
	// sni choice
	//
	// x-displayName: "SNI Selection"
	// x-required
	// SNI to be used while connecting to upstream service.
	//
	// Types that are valid to be assigned to SniChoice:
	//	*UpstreamTlsParamsType_Sni
	//	*UpstreamTlsParamsType_UseHostHeaderAsSni
	//	*UpstreamTlsParamsType_DisableSni
	SniChoice isUpstreamTlsParamsType_SniChoice `protobuf_oneof:"sni_choice"`
	// Max Session Keys
	//
	// x-displayName: "Max Session Keys"
	// x-required
	// Maximum number of session keys (Pre-Shared Keys for TLSv1.3+, Session IDs and Session Tickets
	// for TLSv1.2 and older) to store for the purpose of session resumption.
	//
	// Types that are valid to be assigned to MaxSessionKeysType:
	//	*UpstreamTlsParamsType_DefaultSessionKeyCaching
	//	*UpstreamTlsParamsType_DisableSessionKeyCaching
	//	*UpstreamTlsParamsType_MaxSessionKeys
	MaxSessionKeysType isUpstreamTlsParamsType_MaxSessionKeysType `protobuf_oneof:"max_session_keys_type"`
}

func (m *UpstreamTlsParamsType) Reset()      { *m = UpstreamTlsParamsType{} }
func (*UpstreamTlsParamsType) ProtoMessage() {}
func (*UpstreamTlsParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{3}
}
func (m *UpstreamTlsParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamTlsParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpstreamTlsParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamTlsParamsType.Merge(m, src)
}
func (m *UpstreamTlsParamsType) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamTlsParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamTlsParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamTlsParamsType proto.InternalMessageInfo

type isUpstreamTlsParamsType_TlsParamsChoice interface {
	isUpstreamTlsParamsType_TlsParamsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpstreamTlsParamsType_SniChoice interface {
	isUpstreamTlsParamsType_SniChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUpstreamTlsParamsType_MaxSessionKeysType interface {
	isUpstreamTlsParamsType_MaxSessionKeysType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpstreamTlsParamsType_CommonParams struct {
	CommonParams *TlsParamsType `protobuf:"bytes,1,opt,name=common_params,json=commonParams,proto3,oneof" json:"common_params,omitempty"`
}
type UpstreamTlsParamsType_CertParams struct {
	CertParams *UpstreamCertificateParamsType `protobuf:"bytes,7,opt,name=cert_params,json=certParams,proto3,oneof" json:"cert_params,omitempty"`
}
type UpstreamTlsParamsType_Sni struct {
	Sni string `protobuf:"bytes,2,opt,name=sni,proto3,oneof" json:"sni,omitempty"`
}
type UpstreamTlsParamsType_UseHostHeaderAsSni struct {
	UseHostHeaderAsSni *Empty `protobuf:"bytes,3,opt,name=use_host_header_as_sni,json=useHostHeaderAsSni,proto3,oneof" json:"use_host_header_as_sni,omitempty"`
}
type UpstreamTlsParamsType_DisableSni struct {
	DisableSni *Empty `protobuf:"bytes,4,opt,name=disable_sni,json=disableSni,proto3,oneof" json:"disable_sni,omitempty"`
}
type UpstreamTlsParamsType_DefaultSessionKeyCaching struct {
	DefaultSessionKeyCaching *Empty `protobuf:"bytes,9,opt,name=default_session_key_caching,json=defaultSessionKeyCaching,proto3,oneof" json:"default_session_key_caching,omitempty"`
}
type UpstreamTlsParamsType_DisableSessionKeyCaching struct {
	DisableSessionKeyCaching *Empty `protobuf:"bytes,10,opt,name=disable_session_key_caching,json=disableSessionKeyCaching,proto3,oneof" json:"disable_session_key_caching,omitempty"`
}
type UpstreamTlsParamsType_MaxSessionKeys struct {
	MaxSessionKeys uint32 `protobuf:"varint,11,opt,name=max_session_keys,json=maxSessionKeys,proto3,oneof" json:"max_session_keys,omitempty"`
}

func (*UpstreamTlsParamsType_CommonParams) isUpstreamTlsParamsType_TlsParamsChoice()                {}
func (*UpstreamTlsParamsType_CertParams) isUpstreamTlsParamsType_TlsParamsChoice()                  {}
func (*UpstreamTlsParamsType_Sni) isUpstreamTlsParamsType_SniChoice()                               {}
func (*UpstreamTlsParamsType_UseHostHeaderAsSni) isUpstreamTlsParamsType_SniChoice()                {}
func (*UpstreamTlsParamsType_DisableSni) isUpstreamTlsParamsType_SniChoice()                        {}
func (*UpstreamTlsParamsType_DefaultSessionKeyCaching) isUpstreamTlsParamsType_MaxSessionKeysType() {}
func (*UpstreamTlsParamsType_DisableSessionKeyCaching) isUpstreamTlsParamsType_MaxSessionKeysType() {}
func (*UpstreamTlsParamsType_MaxSessionKeys) isUpstreamTlsParamsType_MaxSessionKeysType()           {}

func (m *UpstreamTlsParamsType) GetTlsParamsChoice() isUpstreamTlsParamsType_TlsParamsChoice {
	if m != nil {
		return m.TlsParamsChoice
	}
	return nil
}
func (m *UpstreamTlsParamsType) GetSniChoice() isUpstreamTlsParamsType_SniChoice {
	if m != nil {
		return m.SniChoice
	}
	return nil
}
func (m *UpstreamTlsParamsType) GetMaxSessionKeysType() isUpstreamTlsParamsType_MaxSessionKeysType {
	if m != nil {
		return m.MaxSessionKeysType
	}
	return nil
}

func (m *UpstreamTlsParamsType) GetCommonParams() *TlsParamsType {
	if x, ok := m.GetTlsParamsChoice().(*UpstreamTlsParamsType_CommonParams); ok {
		return x.CommonParams
	}
	return nil
}

func (m *UpstreamTlsParamsType) GetCertParams() *UpstreamCertificateParamsType {
	if x, ok := m.GetTlsParamsChoice().(*UpstreamTlsParamsType_CertParams); ok {
		return x.CertParams
	}
	return nil
}

func (m *UpstreamTlsParamsType) GetSni() string {
	if x, ok := m.GetSniChoice().(*UpstreamTlsParamsType_Sni); ok {
		return x.Sni
	}
	return ""
}

func (m *UpstreamTlsParamsType) GetUseHostHeaderAsSni() *Empty {
	if x, ok := m.GetSniChoice().(*UpstreamTlsParamsType_UseHostHeaderAsSni); ok {
		return x.UseHostHeaderAsSni
	}
	return nil
}

func (m *UpstreamTlsParamsType) GetDisableSni() *Empty {
	if x, ok := m.GetSniChoice().(*UpstreamTlsParamsType_DisableSni); ok {
		return x.DisableSni
	}
	return nil
}

func (m *UpstreamTlsParamsType) GetDefaultSessionKeyCaching() *Empty {
	if x, ok := m.GetMaxSessionKeysType().(*UpstreamTlsParamsType_DefaultSessionKeyCaching); ok {
		return x.DefaultSessionKeyCaching
	}
	return nil
}

func (m *UpstreamTlsParamsType) GetDisableSessionKeyCaching() *Empty {
	if x, ok := m.GetMaxSessionKeysType().(*UpstreamTlsParamsType_DisableSessionKeyCaching); ok {
		return x.DisableSessionKeyCaching
	}
	return nil
}

func (m *UpstreamTlsParamsType) GetMaxSessionKeys() uint32 {
	if x, ok := m.GetMaxSessionKeysType().(*UpstreamTlsParamsType_MaxSessionKeys); ok {
		return x.MaxSessionKeys
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpstreamTlsParamsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpstreamTlsParamsType_CommonParams)(nil),
		(*UpstreamTlsParamsType_CertParams)(nil),
		(*UpstreamTlsParamsType_Sni)(nil),
		(*UpstreamTlsParamsType_UseHostHeaderAsSni)(nil),
		(*UpstreamTlsParamsType_DisableSni)(nil),
		(*UpstreamTlsParamsType_DefaultSessionKeyCaching)(nil),
		(*UpstreamTlsParamsType_DisableSessionKeyCaching)(nil),
		(*UpstreamTlsParamsType_MaxSessionKeys)(nil),
	}
}

// TlsParamsType
//
// x-displayName: "TLS Parameters"
// Information of different aspects for TLS authentication related to ciphers,
// certificates and trust store
type TlsParamsType struct {
	// minimum_protocol_version
	//
	// x-displayName: "Minimum TLS Version"
	// Minimum TLS protocol version.
	MinimumProtocolVersion TlsProtocol `protobuf:"varint,1,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"minimum_protocol_version,omitempty"`
	// maximum_protocol_version
	//
	// x-displayName: "Maximum TLS Version"
	// Maximum TLS protocol version.
	MaximumProtocolVersion TlsProtocol `protobuf:"varint,2,opt,name=maximum_protocol_version,json=maximumProtocolVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"maximum_protocol_version,omitempty"`
	// cipher_suites
	//
	// x-displayName: "Cipher Suites"
	// x-example: "TLS_AES_128_GCM_SHA256"
	// The following list specifies the supported cipher suite
	//   TLS_AES_128_GCM_SHA256
	//   TLS_AES_256_GCM_SHA384
	//   TLS_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
	//   TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
	//   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
	//   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
	//   TLS_RSA_WITH_AES_128_CBC_SHA
	//   TLS_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_RSA_WITH_AES_256_CBC_SHA
	//   TLS_RSA_WITH_AES_256_GCM_SHA384
	//
	// If not specified, the default list:
	//   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	// will be used.
	CipherSuites []string `protobuf:"bytes,3,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	// tls_certificates
	//
	// x-displayName: "TLS Certificates"
	// Set of TLS certificates
	TlsCertificates []*TlsCertificateType `protobuf:"bytes,4,rep,name=tls_certificates,json=tlsCertificates,proto3" json:"tls_certificates,omitempty"`
	// trusted_ca_url
	//
	// x-displayName: "Root CA Certificate"
	// x-example: "value"
	// The URL or value for Root CA Certificate
	// Certificates in PEM format including the PEM headers.
	TrustedCaUrl string `protobuf:"bytes,5,opt,name=trusted_ca_url,json=trustedCaUrl,proto3" json:"trusted_ca_url,omitempty"` // Deprecated: Do not use.
	// validation_params
	//
	// x-displayName: "Root CA Validation parameters"
	// This includes URL for a trust store, whether SAN verification is required
	// and list of Subject Alt Names for verification
	ValidationParams *TlsValidationParamsType `protobuf:"bytes,7,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
}

func (m *TlsParamsType) Reset()      { *m = TlsParamsType{} }
func (*TlsParamsType) ProtoMessage() {}
func (*TlsParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{4}
}
func (m *TlsParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TlsParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TlsParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsParamsType.Merge(m, src)
}
func (m *TlsParamsType) XXX_Size() int {
	return m.Size()
}
func (m *TlsParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_TlsParamsType proto.InternalMessageInfo

func (m *TlsParamsType) GetMinimumProtocolVersion() TlsProtocol {
	if m != nil {
		return m.MinimumProtocolVersion
	}
	return TLS_AUTO
}

func (m *TlsParamsType) GetMaximumProtocolVersion() TlsProtocol {
	if m != nil {
		return m.MaximumProtocolVersion
	}
	return TLS_AUTO
}

func (m *TlsParamsType) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *TlsParamsType) GetTlsCertificates() []*TlsCertificateType {
	if m != nil {
		return m.TlsCertificates
	}
	return nil
}

// Deprecated: Do not use.
func (m *TlsParamsType) GetTrustedCaUrl() string {
	if m != nil {
		return m.TrustedCaUrl
	}
	return ""
}

func (m *TlsParamsType) GetValidationParams() *TlsValidationParamsType {
	if m != nil {
		return m.ValidationParams
	}
	return nil
}

// DownstreamTlsParamsType
//
// x-displayName: "Downstream TLS Parameters"
// TLS configuration for downstream connections
type DownstreamTlsParamsType struct {
	// common_params
	//
	// x-displayName: "Common Parameters"
	// Common TLS parameters used in both upstream and downstream connections
	CommonParams *TlsParamsType `protobuf:"bytes,1,opt,name=common_params,json=commonParams,proto3" json:"common_params,omitempty"`
	// require_client_certificate
	//
	// x-displayName: "Require Client Certificate(enable mTLS)"
	// If true, F5XC will reject connections without a valid client
	// certificate.
	RequireClientCertificate bool `protobuf:"varint,4,opt,name=require_client_certificate,json=requireClientCertificate,proto3" json:"require_client_certificate,omitempty"`
	// Client certificate verification
	//
	// x-displayName: "Client certificate verification"
	// x-required
	// Configuration to indicate whether client certificate verification is required
	//
	// Types that are valid to be assigned to ClientCertificateVerifyChoice:
	//	*DownstreamTlsParamsType_NoClientCertificate
	//	*DownstreamTlsParamsType_ClientCertificateRequired
	//	*DownstreamTlsParamsType_ClientCertificateOptional
	ClientCertificateVerifyChoice isDownstreamTlsParamsType_ClientCertificateVerifyChoice `protobuf_oneof:"client_certificate_verify_choice"`
	// Certificate Revocation list
	//
	// x-displayName: "CRL"
	// Reference to CRL object to download the CRL file and validate the client offered certificate.
	// Used to ensure that the client presented certificate is not revoked as per the CRL
	Crl []*ObjectRefType `protobuf:"bytes,5,rep,name=crl,proto3" json:"crl,omitempty"`
	// XFCC Header
	//
	// x-displayName: "XFCC Header"
	// X-Forwarded-Client-Cert header elements to be set in an mTLS enabled connections.
	// If none are defined, the header will not be added.
	XfccHeaderElements []XfccElement `protobuf:"varint,6,rep,packed,name=xfcc_header_elements,json=xfccHeaderElements,proto3,enum=ves.io.schema.XfccElement" json:"xfcc_header_elements,omitempty"`
}

func (m *DownstreamTlsParamsType) Reset()      { *m = DownstreamTlsParamsType{} }
func (*DownstreamTlsParamsType) ProtoMessage() {}
func (*DownstreamTlsParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{5}
}
func (m *DownstreamTlsParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamTlsParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownstreamTlsParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamTlsParamsType.Merge(m, src)
}
func (m *DownstreamTlsParamsType) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamTlsParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamTlsParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamTlsParamsType proto.InternalMessageInfo

type isDownstreamTlsParamsType_ClientCertificateVerifyChoice interface {
	isDownstreamTlsParamsType_ClientCertificateVerifyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamTlsParamsType_NoClientCertificate struct {
	NoClientCertificate *Empty `protobuf:"bytes,8,opt,name=no_client_certificate,json=noClientCertificate,proto3,oneof" json:"no_client_certificate,omitempty"`
}
type DownstreamTlsParamsType_ClientCertificateRequired struct {
	ClientCertificateRequired *Empty `protobuf:"bytes,9,opt,name=client_certificate_required,json=clientCertificateRequired,proto3,oneof" json:"client_certificate_required,omitempty"`
}
type DownstreamTlsParamsType_ClientCertificateOptional struct {
	ClientCertificateOptional *Empty `protobuf:"bytes,10,opt,name=client_certificate_optional,json=clientCertificateOptional,proto3,oneof" json:"client_certificate_optional,omitempty"`
}

func (*DownstreamTlsParamsType_NoClientCertificate) isDownstreamTlsParamsType_ClientCertificateVerifyChoice() {
}
func (*DownstreamTlsParamsType_ClientCertificateRequired) isDownstreamTlsParamsType_ClientCertificateVerifyChoice() {
}
func (*DownstreamTlsParamsType_ClientCertificateOptional) isDownstreamTlsParamsType_ClientCertificateVerifyChoice() {
}

func (m *DownstreamTlsParamsType) GetClientCertificateVerifyChoice() isDownstreamTlsParamsType_ClientCertificateVerifyChoice {
	if m != nil {
		return m.ClientCertificateVerifyChoice
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetCommonParams() *TlsParamsType {
	if m != nil {
		return m.CommonParams
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetRequireClientCertificate() bool {
	if m != nil {
		return m.RequireClientCertificate
	}
	return false
}

func (m *DownstreamTlsParamsType) GetNoClientCertificate() *Empty {
	if x, ok := m.GetClientCertificateVerifyChoice().(*DownstreamTlsParamsType_NoClientCertificate); ok {
		return x.NoClientCertificate
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetClientCertificateRequired() *Empty {
	if x, ok := m.GetClientCertificateVerifyChoice().(*DownstreamTlsParamsType_ClientCertificateRequired); ok {
		return x.ClientCertificateRequired
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetClientCertificateOptional() *Empty {
	if x, ok := m.GetClientCertificateVerifyChoice().(*DownstreamTlsParamsType_ClientCertificateOptional); ok {
		return x.ClientCertificateOptional
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetCrl() []*ObjectRefType {
	if m != nil {
		return m.Crl
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetXfccHeaderElements() []XfccElement {
	if m != nil {
		return m.XfccHeaderElements
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamTlsParamsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamTlsParamsType_NoClientCertificate)(nil),
		(*DownstreamTlsParamsType_ClientCertificateRequired)(nil),
		(*DownstreamTlsParamsType_ClientCertificateOptional)(nil),
	}
}

// HostAccessInfoType
//
// x-displayName: "Host Access Information"
// HostAccessInfoType contains the information about how to connect to the remote host.
type HostAccessInfoType struct {
	// scheme
	//
	// x-displayName: "URL Scheme"
	// URL scheme to use for connection
	Scheme URLSchemeType `protobuf:"varint,1,opt,name=scheme,proto3,enum=ves.io.schema.URLSchemeType" json:"scheme,omitempty"`
	// server_endpoint
	//
	// x-displayName: "Server Endpoint and Port"
	// x-required
	// x-example: "webserver:443"
	// endpoint to connect to, in host:port format
	ServerEndpoint string `protobuf:"bytes,2,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// tls_config
	//
	// x-displayName: "TLS Configuration"
	// TLS configuration for the connection
	TlsConfig *UpstreamTlsParamsType `protobuf:"bytes,4,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// Authentication Parameters
	//
	// x-displayName: "Authentication Parameters"
	// Different Methods for Authenticating to the remote host. Currently supported are -
	// * Rest Authentication - This is used if the remote host is REST server
	// * Vault Authentication - This is used if the remote host is a Hashicorp Vault server
	//
	// Types that are valid to be assigned to AuthParams:
	//	*HostAccessInfoType_RestAuthInfo
	//	*HostAccessInfoType_VaultAuthInfo
	AuthParams isHostAccessInfoType_AuthParams `protobuf_oneof:"auth_params"`
}

func (m *HostAccessInfoType) Reset()      { *m = HostAccessInfoType{} }
func (*HostAccessInfoType) ProtoMessage() {}
func (*HostAccessInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{6}
}
func (m *HostAccessInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostAccessInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HostAccessInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostAccessInfoType.Merge(m, src)
}
func (m *HostAccessInfoType) XXX_Size() int {
	return m.Size()
}
func (m *HostAccessInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_HostAccessInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_HostAccessInfoType proto.InternalMessageInfo

type isHostAccessInfoType_AuthParams interface {
	isHostAccessInfoType_AuthParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HostAccessInfoType_RestAuthInfo struct {
	RestAuthInfo *RestAuthInfoType `protobuf:"bytes,5,opt,name=rest_auth_info,json=restAuthInfo,proto3,oneof" json:"rest_auth_info,omitempty"`
}
type HostAccessInfoType_VaultAuthInfo struct {
	VaultAuthInfo *VaultAuthInfoType `protobuf:"bytes,6,opt,name=vault_auth_info,json=vaultAuthInfo,proto3,oneof" json:"vault_auth_info,omitempty"`
}

func (*HostAccessInfoType_RestAuthInfo) isHostAccessInfoType_AuthParams()  {}
func (*HostAccessInfoType_VaultAuthInfo) isHostAccessInfoType_AuthParams() {}

func (m *HostAccessInfoType) GetAuthParams() isHostAccessInfoType_AuthParams {
	if m != nil {
		return m.AuthParams
	}
	return nil
}

func (m *HostAccessInfoType) GetScheme() URLSchemeType {
	if m != nil {
		return m.Scheme
	}
	return HTTP
}

func (m *HostAccessInfoType) GetServerEndpoint() string {
	if m != nil {
		return m.ServerEndpoint
	}
	return ""
}

func (m *HostAccessInfoType) GetTlsConfig() *UpstreamTlsParamsType {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *HostAccessInfoType) GetRestAuthInfo() *RestAuthInfoType {
	if x, ok := m.GetAuthParams().(*HostAccessInfoType_RestAuthInfo); ok {
		return x.RestAuthInfo
	}
	return nil
}

func (m *HostAccessInfoType) GetVaultAuthInfo() *VaultAuthInfoType {
	if x, ok := m.GetAuthParams().(*HostAccessInfoType_VaultAuthInfo); ok {
		return x.VaultAuthInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HostAccessInfoType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HostAccessInfoType_RestAuthInfo)(nil),
		(*HostAccessInfoType_VaultAuthInfo)(nil),
	}
}

// TLSCoalescingOptions
//
// x-displayName: "TLS Coalescing Options"
// TLS connection coalescing configuration (not compatible with mTLS)
type TLSCoalescingOptions struct {
	// TLS Coalescing choice
	//
	// x-displayName: "TLS Coalescing Choice"
	// x-required
	// Coalescing of multiple HTTPS Loadbalancers into single one
	//
	// Types that are valid to be assigned to CoalescingChoice:
	//	*TLSCoalescingOptions_DefaultCoalescing
	//	*TLSCoalescingOptions_StrictCoalescing
	CoalescingChoice isTLSCoalescingOptions_CoalescingChoice `protobuf_oneof:"coalescing_choice"`
}

func (m *TLSCoalescingOptions) Reset()      { *m = TLSCoalescingOptions{} }
func (*TLSCoalescingOptions) ProtoMessage() {}
func (*TLSCoalescingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{7}
}
func (m *TLSCoalescingOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSCoalescingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TLSCoalescingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSCoalescingOptions.Merge(m, src)
}
func (m *TLSCoalescingOptions) XXX_Size() int {
	return m.Size()
}
func (m *TLSCoalescingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSCoalescingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TLSCoalescingOptions proto.InternalMessageInfo

type isTLSCoalescingOptions_CoalescingChoice interface {
	isTLSCoalescingOptions_CoalescingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TLSCoalescingOptions_DefaultCoalescing struct {
	DefaultCoalescing *Empty `protobuf:"bytes,2,opt,name=default_coalescing,json=defaultCoalescing,proto3,oneof" json:"default_coalescing,omitempty"`
}
type TLSCoalescingOptions_StrictCoalescing struct {
	StrictCoalescing *Empty `protobuf:"bytes,3,opt,name=strict_coalescing,json=strictCoalescing,proto3,oneof" json:"strict_coalescing,omitempty"`
}

func (*TLSCoalescingOptions_DefaultCoalescing) isTLSCoalescingOptions_CoalescingChoice() {}
func (*TLSCoalescingOptions_StrictCoalescing) isTLSCoalescingOptions_CoalescingChoice()  {}

func (m *TLSCoalescingOptions) GetCoalescingChoice() isTLSCoalescingOptions_CoalescingChoice {
	if m != nil {
		return m.CoalescingChoice
	}
	return nil
}

func (m *TLSCoalescingOptions) GetDefaultCoalescing() *Empty {
	if x, ok := m.GetCoalescingChoice().(*TLSCoalescingOptions_DefaultCoalescing); ok {
		return x.DefaultCoalescing
	}
	return nil
}

func (m *TLSCoalescingOptions) GetStrictCoalescing() *Empty {
	if x, ok := m.GetCoalescingChoice().(*TLSCoalescingOptions_StrictCoalescing); ok {
		return x.StrictCoalescing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TLSCoalescingOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TLSCoalescingOptions_DefaultCoalescing)(nil),
		(*TLSCoalescingOptions_StrictCoalescing)(nil),
	}
}

func init() {
	proto.RegisterType((*CertInfoType)(nil), "ves.io.schema.CertInfoType")
	golang_proto.RegisterType((*CertInfoType)(nil), "ves.io.schema.CertInfoType")
	proto.RegisterType((*CertificateParamsType)(nil), "ves.io.schema.CertificateParamsType")
	golang_proto.RegisterType((*CertificateParamsType)(nil), "ves.io.schema.CertificateParamsType")
	proto.RegisterType((*UpstreamCertificateParamsType)(nil), "ves.io.schema.UpstreamCertificateParamsType")
	golang_proto.RegisterType((*UpstreamCertificateParamsType)(nil), "ves.io.schema.UpstreamCertificateParamsType")
	proto.RegisterType((*UpstreamTlsParamsType)(nil), "ves.io.schema.UpstreamTlsParamsType")
	golang_proto.RegisterType((*UpstreamTlsParamsType)(nil), "ves.io.schema.UpstreamTlsParamsType")
	proto.RegisterType((*TlsParamsType)(nil), "ves.io.schema.TlsParamsType")
	golang_proto.RegisterType((*TlsParamsType)(nil), "ves.io.schema.TlsParamsType")
	proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.DownstreamTlsParamsType")
	golang_proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.DownstreamTlsParamsType")
	proto.RegisterType((*HostAccessInfoType)(nil), "ves.io.schema.HostAccessInfoType")
	golang_proto.RegisterType((*HostAccessInfoType)(nil), "ves.io.schema.HostAccessInfoType")
	proto.RegisterType((*TLSCoalescingOptions)(nil), "ves.io.schema.TLSCoalescingOptions")
	golang_proto.RegisterType((*TLSCoalescingOptions)(nil), "ves.io.schema.TLSCoalescingOptions")
}

func init() { proto.RegisterFile("ves.io/schema/cert_types.proto", fileDescriptor_f024b829e526b1d4) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/cert_types.proto", fileDescriptor_f024b829e526b1d4)
}

var fileDescriptor_f024b829e526b1d4 = []byte{
	// 1935 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xdd, 0x6f, 0x1b, 0x59,
	0x15, 0xf7, 0xb5, 0xc7, 0x5f, 0x27, 0x1f, 0x75, 0x66, 0xd3, 0x64, 0xea, 0x66, 0x1d, 0x63, 0x75,
	0x21, 0x62, 0x5d, 0x27, 0x71, 0x9b, 0x36, 0x5b, 0xa1, 0x15, 0xb6, 0x37, 0xaa, 0x93, 0x86, 0x4d,
	0x35, 0x4e, 0x0b, 0xcb, 0xcb, 0x68, 0x32, 0xb9, 0xb6, 0x87, 0x9d, 0x0f, 0x33, 0x77, 0xec, 0x4d,
	0x90, 0x8a, 0x0a, 0xe2, 0x0f, 0x58, 0xf5, 0x99, 0x07, 0x1e, 0x51, 0xc5, 0x3b, 0x12, 0xb3, 0x0f,
	0x81, 0x07, 0x54, 0xf1, 0x80, 0xfc, 0x84, 0x2a, 0x84, 0x04, 0x75, 0x25, 0xb4, 0xbc, 0xad, 0xf6,
	0x01, 0x21, 0xf1, 0x82, 0xee, 0x9d, 0x3b, 0xf5, 0x47, 0x1c, 0x6f, 0x61, 0x5b, 0x04, 0x52, 0x5e,
	0x5a, 0xfb, 0x9e, 0xdf, 0xf9, 0x9d, 0x7b, 0xcf, 0x3d, 0x5f, 0xd7, 0x81, 0x4c, 0x07, 0x93, 0x82,
	0x6e, 0xaf, 0x12, 0xad, 0x89, 0x4d, 0x75, 0x55, 0xc3, 0x8e, 0xab, 0xb8, 0xc7, 0x2d, 0x4c, 0x0a,
	0x2d, 0xc7, 0x76, 0x6d, 0x71, 0xc6, 0x97, 0x17, 0x7c, 0x79, 0xfa, 0x6a, 0x43, 0x77, 0x9b, 0xed,
	0x83, 0x82, 0x66, 0x9b, 0xab, 0x0d, 0xbb, 0x61, 0xaf, 0x32, 0xd4, 0x41, 0xbb, 0xce, 0xbe, 0xb1,
	0x2f, 0xec, 0x93, 0xaf, 0x9d, 0x5e, 0x6e, 0xd8, 0x76, 0xc3, 0xc0, 0x7d, 0x94, 0xab, 0x9b, 0x98,
	0xb8, 0xaa, 0xd9, 0xe2, 0x80, 0xcb, 0xc3, 0xe6, 0xed, 0x96, 0xab, 0xdb, 0x16, 0xb7, 0x9d, 0xbe,
	0x34, 0x2c, 0x1c, 0xd8, 0x56, 0x7a, 0x69, 0x58, 0xd4, 0x51, 0x0d, 0xfd, 0x50, 0x75, 0x31, 0x97,
	0x66, 0x47, 0xa4, 0x3a, 0xfe, 0x48, 0x19, 0xa2, 0xce, 0xfd, 0x21, 0x02, 0xd3, 0x15, 0xec, 0xb8,
	0xdb, 0x56, 0xdd, 0xde, 0x3f, 0x6e, 0x61, 0x71, 0x19, 0xa6, 0x34, 0xdb, 0x34, 0x6d, 0x4b, 0xb1,
	0x54, 0x13, 0x4b, 0x28, 0x8b, 0x56, 0x92, 0x32, 0xf8, 0x4b, 0xef, 0xab, 0x26, 0x16, 0x6f, 0xc1,
	0x25, 0xd2, 0x3e, 0xf8, 0x1e, 0xd6, 0x5c, 0x45, 0x35, 0x5c, 0xec, 0x58, 0xaa, 0xab, 0x77, 0x30,
	0x43, 0x13, 0x29, 0x9c, 0x8d, 0xac, 0x24, 0xe5, 0x45, 0x0e, 0x28, 0xf5, 0xe5, 0x54, 0x95, 0x88,
	0x39, 0x98, 0xb6, 0x9d, 0x86, 0x6a, 0xe9, 0x3f, 0x50, 0xe9, 0x26, 0xa4, 0x08, 0x63, 0x1f, 0x5a,
	0x13, 0x8b, 0x10, 0xc3, 0x47, 0x2d, 0xdd, 0x39, 0x96, 0x84, 0x2c, 0x5a, 0x99, 0x2a, 0xa6, 0x0b,
	0xbe, 0xef, 0x0a, 0x81, 0xef, 0x0a, 0xfb, 0x81, 0xef, 0x64, 0x8e, 0x14, 0x17, 0x20, 0xa6, 0x13,
	0xd2, 0xc6, 0x8e, 0x14, 0x65, 0x8c, 0xfc, 0x9b, 0xb8, 0x06, 0xf3, 0xad, 0xf6, 0x81, 0xa1, 0x6b,
	0xca, 0x87, 0xf8, 0x58, 0x51, 0x8d, 0x86, 0xed, 0xe8, 0x6e, 0xd3, 0x94, 0x62, 0x0c, 0x25, 0xfa,
	0xb2, 0x3b, 0xf8, 0xb8, 0x14, 0x48, 0x6e, 0xfd, 0x16, 0xfd, 0xce, 0x43, 0xbf, 0x46, 0xb0, 0x04,
	0x53, 0x15, 0x76, 0xe6, 0x2c, 0xdd, 0x79, 0x7a, 0x66, 0xc8, 0x2b, 0xf0, 0x16, 0x08, 0xb5, 0xd2,
	0xfb, 0xa4, 0xfc, 0xe6, 0x04, 0x5f, 0xa4, 0x22, 0x90, 0x81, 0xe9, 0xbd, 0x81, 0xa3, 0xa5, 0x67,
	0x87, 0x8f, 0x0f, 0x0b, 0x00, 0x5b, 0xf4, 0x00, 0xbe, 0x34, 0x11, 0x1c, 0x1c, 0x44, 0x88, 0x6d,
	0xb3, 0x03, 0xd0, 0x35, 0xff, 0x28, 0x50, 0x80, 0xf9, 0xbb, 0x6c, 0xbb, 0xd9, 0x3b, 0xf8, 0x38,
	0xfb, 0x62, 0xc3, 0xe9, 0x85, 0xf1, 0x47, 0xcc, 0xfd, 0x73, 0x1a, 0x2e, 0xd2, 0x8b, 0xd5, 0xeb,
	0xba, 0xa6, 0xba, 0xf8, 0xae, 0xea, 0xa8, 0x26, 0x61, 0x37, 0x7c, 0x00, 0xd3, 0x5a, 0x5f, 0x40,
	0x24, 0x94, 0x8d, 0xac, 0x4c, 0x15, 0x97, 0x0a, 0x43, 0x01, 0x5e, 0xd8, 0x63, 0xc7, 0x92, 0x71,
	0x9d, 0xea, 0x94, 0xb3, 0x8f, 0x1f, 0x4c, 0x0d, 0x28, 0xfd, 0xea, 0x6f, 0x27, 0x11, 0xc1, 0x09,
	0x4b, 0x59, 0xfe, 0x21, 0x85, 0xe4, 0x21, 0x4e, 0xf1, 0x03, 0x98, 0xe3, 0xa1, 0xa8, 0xdb, 0x96,
	0xd2, 0x62, 0xc6, 0xa5, 0x30, 0xbb, 0xcf, 0xaf, 0x8e, 0x18, 0xda, 0x37, 0xc8, 0xfd, 0x17, 0xd0,
	0xfe, 0x36, 0xcb, 0x42, 0xd7, 0x43, 0x48, 0x4e, 0x75, 0x46, 0x64, 0xe2, 0x3e, 0x48, 0xa6, 0x6e,
	0xe9, 0x66, 0xdb, 0x54, 0x58, 0x44, 0x68, 0xb6, 0xa1, 0x74, 0xb0, 0x43, 0x82, 0x78, 0x9a, 0x2d,
	0xa6, 0x4f, 0x5b, 0xb8, 0xcb, 0x91, 0xf2, 0x02, 0xd7, 0x0d, 0x16, 0xee, 0xfb, 0x9a, 0x8c, 0x55,
	0x3d, 0x1a, 0xcf, 0x2a, 0xbc, 0x04, 0xab, 0xaf, 0x3b, 0xca, 0xfa, 0xd3, 0x28, 0xcc, 0x68, 0x7a,
	0xab, 0x89, 0x1d, 0x85, 0xb4, 0x75, 0xea, 0xec, 0x28, 0x4d, 0x90, 0xf2, 0xdf, 0x05, 0xea, 0xb8,
	0xbf, 0x0a, 0x8f, 0x50, 0x4f, 0xc8, 0xfd, 0x59, 0x70, 0xfe, 0x24, 0xc8, 0x0b, 0xfb, 0xbb, 0x35,
	0xa5, 0xb4, 0x55, 0x53, 0xd6, 0x8b, 0x9b, 0xca, 0xed, 0xca, 0xb7, 0x94, 0x5a, 0xb5, 0x54, 0xdc,
	0xb8, 0xd1, 0x5f, 0x2f, 0x6e, 0xdc, 0x08, 0xd6, 0xaf, 0x6d, 0x5e, 0x97, 0x97, 0xe8, 0x7a, 0xa5,
	0x5a, 0xaa, 0x54, 0x4b, 0xc5, 0x35, 0xe5, 0xee, 0xde, 0xee, 0x07, 0xeb, 0xd7, 0xd6, 0x36, 0x02,
	0xad, 0xaf, 0x51, 0xe9, 0x56, 0xe5, 0xbd, 0xea, 0x16, 0xfd, 0xb7, 0x56, 0x52, 0xbe, 0xbd, 0xbd,
	0x5f, 0x1d, 0x47, 0x7f, 0x36, 0x70, 0xc4, 0xde, 0xd5, 0xb1, 0xc0, 0x33, 0x37, 0xf0, 0x56, 0x1f,
	0x2e, 0x4f, 0x30, 0x7f, 0x16, 0x6c, 0xc4, 0xf8, 0xdb, 0x63, 0x60, 0x67, 0x9a, 0xbe, 0x32, 0xf1,
	0xec, 0x95, 0x72, 0x85, 0x02, 0x27, 0xa0, 0xa8, 0xed, 0x00, 0x95, 0x9b, 0x70, 0x8c, 0x2f, 0xc2,
	0x0c, 0xf2, 0xb0, 0xdb, 0x3a, 0x93, 0x61, 0x79, 0xac, 0x74, 0xc0, 0x4d, 0xa7, 0xd5, 0x07, 0xc9,
	0x97, 0xc7, 0x4a, 0xfb, 0xee, 0xa3, 0xb1, 0x16, 0x7d, 0x84, 0xc2, 0x12, 0xcd, 0x52, 0x16, 0x8d,
	0x35, 0x16, 0x8c, 0xe2, 0x16, 0xa4, 0x1d, 0xfc, 0xfd, 0xb6, 0xee, 0x60, 0x45, 0x33, 0x74, 0x6c,
	0xb9, 0xca, 0x40, 0x12, 0xb3, 0x22, 0x99, 0x28, 0xc7, 0x9f, 0x3e, 0x40, 0x9f, 0xd2, 0x4c, 0x94,
	0x38, 0xb4, 0xc2, 0x90, 0x03, 0xa5, 0x45, 0xdc, 0x81, 0x8b, 0x96, 0x3d, 0x8e, 0x01, 0x58, 0xc2,
	0xcf, 0x8f, 0x24, 0xce, 0x96, 0xd9, 0x72, 0x8f, 0xab, 0x21, 0xf9, 0x0d, 0xcb, 0x3e, 0xcd, 0x75,
	0x1f, 0x2e, 0x9f, 0x26, 0x52, 0xb8, 0xe9, 0x43, 0x69, 0x6a, 0x22, 0xe3, 0x25, 0x6d, 0x94, 0x4f,
	0xe6, 0x8a, 0x67, 0xf0, 0xfa, 0xbd, 0x50, 0x35, 0xa4, 0xe9, 0x7f, 0x93, 0x77, 0x8f, 0x2b, 0x8a,
	0xb7, 0x21, 0xa2, 0x39, 0x86, 0x14, 0x7f, 0x89, 0x1a, 0xba, 0xf8, 0xf8, 0x01, 0xc5, 0x72, 0x7f,
	0x06, 0x97, 0x92, 0x42, 0x32, 0x5d, 0x15, 0x7f, 0x08, 0xf3, 0x47, 0x75, 0x4d, 0x53, 0x9a, 0x58,
	0x3d, 0xc4, 0x8e, 0x82, 0x0d, 0x6c, 0x62, 0xcb, 0x25, 0x52, 0x22, 0x1b, 0x19, 0x53, 0x7c, 0xbe,
	0x53, 0xd7, 0xb4, 0x2d, 0x1f, 0x52, 0x5e, 0x7b, 0xfc, 0x09, 0x4a, 0xc1, 0x74, 0x47, 0x77, 0xdc,
	0xb6, 0x6a, 0x28, 0x4d, 0x9b, 0xb8, 0x59, 0x46, 0x3f, 0xf3, 0x08, 0x41, 0x2e, 0xf1, 0x63, 0x14,
	0x4d, 0xa1, 0x1c, 0x0a, 0x0d, 0x44, 0x81, 0x48, 0x2d, 0x55, 0x99, 0x21, 0x4e, 0x42, 0x6e, 0x4d,
	0x7f, 0xfe, 0x6e, 0x72, 0x3d, 0x5f, 0xcc, 0x5f, 0xcb, 0x5f, 0xcf, 0x6f, 0x94, 0x37, 0x21, 0x3b,
	0xc6, 0x5d, 0x1d, 0xec, 0xe8, 0xf5, 0x63, 0x45, 0x6b, 0xda, 0xba, 0x86, 0xc5, 0xf9, 0x13, 0x0f,
	0x41, 0xd7, 0x43, 0xc9, 0x9e, 0x87, 0x12, 0xeb, 0x6b, 0xf9, 0xf5, 0xf5, 0xfc, 0x7a, 0x71, 0x47,
	0x48, 0x24, 0x53, 0x90, 0xfb, 0x65, 0x02, 0xde, 0xbc, 0xd7, 0x22, 0xae, 0x83, 0x55, 0xf3, 0xb5,
	0x77, 0x21, 0x74, 0xde, 0x85, 0xce, 0xbb, 0xd0, 0x79, 0x17, 0xfa, 0x3f, 0xed, 0x42, 0xc3, 0x95,
	0x27, 0xf7, 0x71, 0x0c, 0x2e, 0x06, 0x95, 0x83, 0x06, 0x77, 0xbf, 0x62, 0x6c, 0xc3, 0x0c, 0x9f,
	0xc1, 0x79, 0x26, 0x23, 0x96, 0xc9, 0x4b, 0x63, 0x32, 0x62, 0x24, 0x7f, 0xab, 0x21, 0x79, 0xda,
	0x57, 0xe5, 0xd9, 0xbb, 0x07, 0xac, 0x8e, 0x04, 0x44, 0x71, 0x46, 0x94, 0x1f, 0x21, 0x9a, 0x58,
	0xbf, 0xaa, 0x21, 0x19, 0x28, 0x05, 0x27, 0x7c, 0x1b, 0x22, 0xc4, 0xd2, 0x59, 0x6d, 0x49, 0x96,
	0x17, 0xff, 0xe1, 0xf9, 0xe5, 0x56, 0x70, 0xc2, 0x4d, 0xbf, 0xd0, 0x3b, 0x11, 0xe9, 0x61, 0xb8,
	0x8a, 0x64, 0x8a, 0x12, 0x77, 0x60, 0xa1, 0x4d, 0x30, 0x2b, 0xd4, 0x41, 0xb9, 0x57, 0x89, 0x42,
	0xf5, 0x23, 0x13, 0xda, 0x10, 0x92, 0xc5, 0x36, 0xc1, 0x55, 0x9b, 0xb8, 0x7e, 0xe5, 0x2e, 0x91,
	0x9a, 0xa5, 0x8b, 0x37, 0x61, 0xea, 0x50, 0x27, 0xea, 0x81, 0x81, 0x19, 0x81, 0x30, 0x91, 0x00,
	0x38, 0x94, 0x2a, 0xde, 0x83, 0xcb, 0x87, 0xb8, 0xae, 0xb6, 0x0d, 0x57, 0x21, 0x98, 0xd0, 0x3a,
	0xc1, 0x1e, 0x10, 0x9a, 0xaa, 0x35, 0x75, 0xab, 0x21, 0x25, 0x27, 0x10, 0x85, 0x65, 0x89, 0xab,
	0xd6, 0x7c, 0xcd, 0x3b, 0xf8, 0xb8, 0xe2, 0xeb, 0x31, 0xda, 0x60, 0x3f, 0x63, 0x68, 0xe1, 0x0b,
	0x68, 0xf9, 0xfe, 0x4e, 0xd1, 0x7e, 0x03, 0x52, 0xa6, 0x7a, 0x34, 0x48, 0x49, 0xd8, 0x2c, 0x30,
	0x53, 0x4e, 0xfd, 0xd1, 0x43, 0xa8, 0x48, 0x9d, 0x1c, 0xfb, 0xba, 0x20, 0x7d, 0x73, 0x25, 0x5c,
	0x0d, 0xcb, 0xb3, 0xa6, 0x7a, 0xd4, 0xe7, 0x20, 0xb7, 0x0a, 0x9f, 0xbf, 0x1b, 0xdd, 0xc8, 0xdf,
	0xc8, 0x6f, 0xfe, 0xc6, 0x43, 0x39, 0xc8, 0xc2, 0x62, 0x70, 0xb5, 0xd9, 0xfd, 0xdd, 0x5a, 0x96,
	0x5d, 0x21, 0x76, 0xb1, 0x43, 0x44, 0x1f, 0x55, 0x5e, 0x81, 0x39, 0xd7, 0x20, 0x3c, 0x3a, 0x82,
	0x76, 0xf7, 0xc6, 0x89, 0x87, 0xe2, 0x5d, 0x0f, 0xc5, 0x7a, 0x1e, 0x8a, 0xdc, 0xcc, 0xaf, 0xff,
	0xec, 0x13, 0x84, 0xca, 0xcb, 0x00, 0xc4, 0xd2, 0x03, 0xc8, 0xdc, 0x89, 0x87, 0xc2, 0x5d, 0x0f,
	0x45, 0x7b, 0x1e, 0x8a, 0xb2, 0x80, 0x2e, 0xaf, 0xc1, 0xc5, 0xd1, 0x8d, 0xb3, 0x9f, 0x15, 0xc4,
	0xc5, 0x13, 0x0f, 0x25, 0x9f, 0x78, 0x08, 0x75, 0x3d, 0x94, 0xe8, 0x79, 0x28, 0xfe, 0x4e, 0x9e,
	0xf5, 0xd0, 0x1d, 0x21, 0x11, 0x4b, 0xc5, 0x77, 0x84, 0x44, 0x34, 0x15, 0xdb, 0x11, 0x12, 0x89,
	0x54, 0x32, 0xf7, 0x24, 0x01, 0x33, 0xc3, 0xa9, 0x30, 0xa9, 0xfb, 0xa0, 0xd7, 0xd2, 0x7d, 0xc2,
	0xaf, 0xb0, 0xfb, 0x44, 0xce, 0xbb, 0xcf, 0x79, 0xf7, 0xf9, 0x5f, 0x79, 0x03, 0xed, 0x42, 0x8a,
	0xe6, 0xfa, 0xd0, 0x2c, 0x2a, 0xb0, 0x59, 0xf4, 0x2b, 0xa7, 0x83, 0x7d, 0xa0, 0x15, 0xd0, 0x3c,
	0x94, 0x2f, 0xb8, 0x43, 0x6b, 0x44, 0x5c, 0x85, 0x59, 0xd7, 0x69, 0x13, 0x17, 0x1f, 0x2a, 0x9a,
	0xaa, 0xb4, 0x1d, 0xc3, 0xff, 0x41, 0xaa, 0x9c, 0xe4, 0x53, 0x3f, 0x35, 0xcf, 0x01, 0x15, 0xf5,
	0x9e, 0x63, 0x8c, 0x1f, 0x51, 0xe3, 0xaf, 0x62, 0x44, 0x65, 0x7d, 0xf5, 0x7a, 0xfe, 0x66, 0x9e,
	0xf5, 0x56, 0xbf, 0xac, 0xe4, 0x7e, 0x11, 0x85, 0xc5, 0xf7, 0xec, 0x8f, 0xac, 0x71, 0xfd, 0xf5,
	0xf6, 0x7f, 0xdc, 0x5f, 0x47, 0xba, 0xeb, 0xe4, 0x67, 0xa5, 0xf0, 0xa5, 0x9f, 0x95, 0x89, 0x57,
	0xfe, 0xac, 0x4c, 0xbe, 0xa6, 0x67, 0x25, 0x7c, 0xc9, 0x67, 0x65, 0xf4, 0xb5, 0x3d, 0x2b, 0x63,
	0xff, 0x9d, 0x67, 0x65, 0xf9, 0xc6, 0x4b, 0x3c, 0x24, 0xc5, 0x13, 0x0f, 0x25, 0xba, 0x1e, 0x8a,
	0xf7, 0x3c, 0x14, 0xdb, 0xcc, 0xd3, 0x46, 0xb8, 0x23, 0x24, 0xe2, 0xa9, 0x44, 0xee, 0x27, 0x11,
	0x10, 0xe9, 0xc4, 0x53, 0xd2, 0x34, 0x4c, 0xc8, 0x8b, 0xdf, 0xa8, 0xaf, 0x43, 0x8c, 0x6d, 0x18,
	0xf3, 0x66, 0x37, 0xea, 0xa0, 0x7b, 0xf2, 0x6e, 0x8d, 0xc9, 0x59, 0x92, 0x72, 0xac, 0xf8, 0x0e,
	0x5c, 0x20, 0xd8, 0xe9, 0x50, 0x2f, 0x58, 0x87, 0x2d, 0x5b, 0xb7, 0x5c, 0x3e, 0xaf, 0xa5, 0x82,
	0x79, 0x2d, 0xee, 0x44, 0x53, 0x48, 0x7a, 0x18, 0x96, 0x67, 0x7d, 0xe0, 0x16, 0xc7, 0x89, 0xdb,
	0x00, 0xac, 0x48, 0xd8, 0x56, 0x5d, 0x6f, 0xf0, 0x21, 0xeb, 0xca, 0x19, 0xe3, 0xe2, 0xb8, 0xfc,
	0x48, 0xd2, 0x3a, 0xc1, 0x94, 0xc5, 0xdb, 0x30, 0xeb, 0x60, 0xe2, 0x2a, 0x6a, 0xdb, 0x6d, 0x2a,
	0xba, 0x55, 0xb7, 0x59, 0x85, 0x98, 0x2a, 0x2e, 0x8f, 0xd0, 0xc9, 0x98, 0xb8, 0xa5, 0xb6, 0xdb,
	0x0c, 0x0e, 0x4d, 0x67, 0x58, 0x67, 0x60, 0x4d, 0xdc, 0x81, 0x0b, 0x1d, 0x36, 0xbe, 0xf5, 0x99,
	0x62, 0x8c, 0x29, 0x3b, 0xc2, 0x74, 0x9f, 0xa2, 0x46, 0xa8, 0x66, 0x3a, 0x83, 0x8b, 0xe5, 0x45,
	0x98, 0x62, 0x2c, 0x7e, 0xe2, 0x8b, 0x89, 0x13, 0x0f, 0x45, 0xe9, 0x85, 0xf0, 0x6b, 0xf8, 0x3d,
	0x82, 0xf9, 0xfd, 0xdd, 0x5a, 0xc5, 0x56, 0x0d, 0x4c, 0x34, 0xdd, 0x6a, 0xf8, 0x71, 0x4a, 0x33,
	0x5d, 0x0c, 0x86, 0x48, 0xed, 0x85, 0x90, 0xbf, 0xb0, 0xcf, 0x8a, 0xfa, 0x39, 0xae, 0xd1, 0x67,
	0x13, 0x2b, 0x30, 0x47, 0x5c, 0x47, 0xd7, 0x86, 0x58, 0x22, 0x13, 0x59, 0x52, 0xbe, 0x42, 0x9f,
	0xa4, 0x7c, 0x05, 0xe6, 0xfa, 0xda, 0x41, 0x68, 0x5d, 0xe0, 0x13, 0x19, 0xa2, 0x43, 0x9b, 0x5f,
	0x06, 0x51, 0x2a, 0x5c, 0xfe, 0x11, 0xea, 0x3e, 0xcb, 0x84, 0x9e, 0x3e, 0xcb, 0x84, 0x3e, 0x7b,
	0x96, 0x41, 0x0f, 0x7b, 0x19, 0xf4, 0xf3, 0x5e, 0x06, 0x3d, 0xe9, 0x65, 0x50, 0xb7, 0x97, 0x41,
	0x4f, 0x7b, 0x19, 0xf4, 0x97, 0x5e, 0x06, 0x7d, 0xda, 0xcb, 0x84, 0x3e, 0xeb, 0x65, 0xd0, 0xc7,
	0xcf, 0x33, 0xa1, 0x93, 0xe7, 0x19, 0xd4, 0x7d, 0x9e, 0x09, 0x3d, 0x7d, 0x9e, 0x09, 0x7d, 0xb7,
	0xd2, 0xb0, 0x5b, 0x1f, 0x36, 0x0a, 0x1d, 0xdb, 0x70, 0xb1, 0xe3, 0xa8, 0x85, 0x36, 0x59, 0x65,
	0x1f, 0xea, 0xb6, 0x63, 0x5e, 0x6d, 0x39, 0x76, 0x47, 0x3f, 0xc4, 0xce, 0xd5, 0x40, 0xbc, 0xda,
	0x3a, 0x68, 0xd8, 0xab, 0xf8, 0xc8, 0xe5, 0x7f, 0x85, 0xf1, 0xff, 0x3b, 0x88, 0xb1, 0x19, 0xeb,
	0xda, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x65, 0xc9, 0x07, 0x79, 0x1a, 0x00, 0x00,
}

func (this *CertInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertInfoType)
	if !ok {
		that2, ok := that.(CertInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommonName != that1.CommonName {
		return false
	}
	if len(this.SubjectAlternativeNames) != len(that1.SubjectAlternativeNames) {
		return false
	}
	for i := range this.SubjectAlternativeNames {
		if this.SubjectAlternativeNames[i] != that1.SubjectAlternativeNames[i] {
			return false
		}
	}
	if this.Organization != that1.Organization {
		return false
	}
	if !this.Expiry.Equal(that1.Expiry) {
		return false
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	if this.PublicKeyAlgorithm != that1.PublicKeyAlgorithm {
		return false
	}
	return true
}
func (this *CertificateParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateParamsType)
	if !ok {
		that2, ok := that.(CertificateParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return false
	}
	for i := range this.Certificates {
		if !this.Certificates[i].Equal(that1.Certificates[i]) {
			return false
		}
	}
	if !this.ValidationParams.Equal(that1.ValidationParams) {
		return false
	}
	if this.MinimumProtocolVersion != that1.MinimumProtocolVersion {
		return false
	}
	if this.MaximumProtocolVersion != that1.MaximumProtocolVersion {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	if this.RequireClientCertificate != that1.RequireClientCertificate {
		return false
	}
	if that1.ClientCertificateVerifyChoice == nil {
		if this.ClientCertificateVerifyChoice != nil {
			return false
		}
	} else if this.ClientCertificateVerifyChoice == nil {
		return false
	} else if !this.ClientCertificateVerifyChoice.Equal(that1.ClientCertificateVerifyChoice) {
		return false
	}
	if len(this.Crl) != len(that1.Crl) {
		return false
	}
	for i := range this.Crl {
		if !this.Crl[i].Equal(that1.Crl[i]) {
			return false
		}
	}
	if len(this.XfccHeaderElements) != len(that1.XfccHeaderElements) {
		return false
	}
	for i := range this.XfccHeaderElements {
		if this.XfccHeaderElements[i] != that1.XfccHeaderElements[i] {
			return false
		}
	}
	return true
}
func (this *CertificateParamsType_NoClientCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateParamsType_NoClientCertificate)
	if !ok {
		that2, ok := that.(CertificateParamsType_NoClientCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoClientCertificate.Equal(that1.NoClientCertificate) {
		return false
	}
	return true
}
func (this *CertificateParamsType_ClientCertificateRequired) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateParamsType_ClientCertificateRequired)
	if !ok {
		that2, ok := that.(CertificateParamsType_ClientCertificateRequired)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientCertificateRequired.Equal(that1.ClientCertificateRequired) {
		return false
	}
	return true
}
func (this *CertificateParamsType_ClientCertificateOptional) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateParamsType_ClientCertificateOptional)
	if !ok {
		that2, ok := that.(CertificateParamsType_ClientCertificateOptional)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientCertificateOptional.Equal(that1.ClientCertificateOptional) {
		return false
	}
	return true
}
func (this *UpstreamCertificateParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamCertificateParamsType)
	if !ok {
		that2, ok := that.(UpstreamCertificateParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return false
	}
	for i := range this.Certificates {
		if !this.Certificates[i].Equal(that1.Certificates[i]) {
			return false
		}
	}
	if !this.ValidationParams.Equal(that1.ValidationParams) {
		return false
	}
	if this.MinimumProtocolVersion != that1.MinimumProtocolVersion {
		return false
	}
	if this.MaximumProtocolVersion != that1.MaximumProtocolVersion {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	return true
}
func (this *UpstreamTlsParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TlsParamsChoice == nil {
		if this.TlsParamsChoice != nil {
			return false
		}
	} else if this.TlsParamsChoice == nil {
		return false
	} else if !this.TlsParamsChoice.Equal(that1.TlsParamsChoice) {
		return false
	}
	if that1.SniChoice == nil {
		if this.SniChoice != nil {
			return false
		}
	} else if this.SniChoice == nil {
		return false
	} else if !this.SniChoice.Equal(that1.SniChoice) {
		return false
	}
	if that1.MaxSessionKeysType == nil {
		if this.MaxSessionKeysType != nil {
			return false
		}
	} else if this.MaxSessionKeysType == nil {
		return false
	} else if !this.MaxSessionKeysType.Equal(that1.MaxSessionKeysType) {
		return false
	}
	return true
}
func (this *UpstreamTlsParamsType_CommonParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType_CommonParams)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType_CommonParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonParams.Equal(that1.CommonParams) {
		return false
	}
	return true
}
func (this *UpstreamTlsParamsType_CertParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType_CertParams)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType_CertParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CertParams.Equal(that1.CertParams) {
		return false
	}
	return true
}
func (this *UpstreamTlsParamsType_Sni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType_Sni)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType_Sni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sni != that1.Sni {
		return false
	}
	return true
}
func (this *UpstreamTlsParamsType_UseHostHeaderAsSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType_UseHostHeaderAsSni)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType_UseHostHeaderAsSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseHostHeaderAsSni.Equal(that1.UseHostHeaderAsSni) {
		return false
	}
	return true
}
func (this *UpstreamTlsParamsType_DisableSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType_DisableSni)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType_DisableSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSni.Equal(that1.DisableSni) {
		return false
	}
	return true
}
func (this *UpstreamTlsParamsType_DefaultSessionKeyCaching) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType_DefaultSessionKeyCaching)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType_DefaultSessionKeyCaching)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSessionKeyCaching.Equal(that1.DefaultSessionKeyCaching) {
		return false
	}
	return true
}
func (this *UpstreamTlsParamsType_DisableSessionKeyCaching) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType_DisableSessionKeyCaching)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType_DisableSessionKeyCaching)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSessionKeyCaching.Equal(that1.DisableSessionKeyCaching) {
		return false
	}
	return true
}
func (this *UpstreamTlsParamsType_MaxSessionKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsParamsType_MaxSessionKeys)
	if !ok {
		that2, ok := that.(UpstreamTlsParamsType_MaxSessionKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxSessionKeys != that1.MaxSessionKeys {
		return false
	}
	return true
}
func (this *TlsParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TlsParamsType)
	if !ok {
		that2, ok := that.(TlsParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumProtocolVersion != that1.MinimumProtocolVersion {
		return false
	}
	if this.MaximumProtocolVersion != that1.MaximumProtocolVersion {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	if len(this.TlsCertificates) != len(that1.TlsCertificates) {
		return false
	}
	for i := range this.TlsCertificates {
		if !this.TlsCertificates[i].Equal(that1.TlsCertificates[i]) {
			return false
		}
	}
	if this.TrustedCaUrl != that1.TrustedCaUrl {
		return false
	}
	if !this.ValidationParams.Equal(that1.ValidationParams) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonParams.Equal(that1.CommonParams) {
		return false
	}
	if this.RequireClientCertificate != that1.RequireClientCertificate {
		return false
	}
	if that1.ClientCertificateVerifyChoice == nil {
		if this.ClientCertificateVerifyChoice != nil {
			return false
		}
	} else if this.ClientCertificateVerifyChoice == nil {
		return false
	} else if !this.ClientCertificateVerifyChoice.Equal(that1.ClientCertificateVerifyChoice) {
		return false
	}
	if len(this.Crl) != len(that1.Crl) {
		return false
	}
	for i := range this.Crl {
		if !this.Crl[i].Equal(that1.Crl[i]) {
			return false
		}
	}
	if len(this.XfccHeaderElements) != len(that1.XfccHeaderElements) {
		return false
	}
	for i := range this.XfccHeaderElements {
		if this.XfccHeaderElements[i] != that1.XfccHeaderElements[i] {
			return false
		}
	}
	return true
}
func (this *DownstreamTlsParamsType_NoClientCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_NoClientCertificate)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_NoClientCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoClientCertificate.Equal(that1.NoClientCertificate) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_ClientCertificateRequired) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_ClientCertificateRequired)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_ClientCertificateRequired)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientCertificateRequired.Equal(that1.ClientCertificateRequired) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_ClientCertificateOptional) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_ClientCertificateOptional)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_ClientCertificateOptional)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientCertificateOptional.Equal(that1.ClientCertificateOptional) {
		return false
	}
	return true
}
func (this *HostAccessInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostAccessInfoType)
	if !ok {
		that2, ok := that.(HostAccessInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Scheme != that1.Scheme {
		return false
	}
	if this.ServerEndpoint != that1.ServerEndpoint {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if that1.AuthParams == nil {
		if this.AuthParams != nil {
			return false
		}
	} else if this.AuthParams == nil {
		return false
	} else if !this.AuthParams.Equal(that1.AuthParams) {
		return false
	}
	return true
}
func (this *HostAccessInfoType_RestAuthInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostAccessInfoType_RestAuthInfo)
	if !ok {
		that2, ok := that.(HostAccessInfoType_RestAuthInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RestAuthInfo.Equal(that1.RestAuthInfo) {
		return false
	}
	return true
}
func (this *HostAccessInfoType_VaultAuthInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostAccessInfoType_VaultAuthInfo)
	if !ok {
		that2, ok := that.(HostAccessInfoType_VaultAuthInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VaultAuthInfo.Equal(that1.VaultAuthInfo) {
		return false
	}
	return true
}
func (this *TLSCoalescingOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSCoalescingOptions)
	if !ok {
		that2, ok := that.(TLSCoalescingOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CoalescingChoice == nil {
		if this.CoalescingChoice != nil {
			return false
		}
	} else if this.CoalescingChoice == nil {
		return false
	} else if !this.CoalescingChoice.Equal(that1.CoalescingChoice) {
		return false
	}
	return true
}
func (this *TLSCoalescingOptions_DefaultCoalescing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSCoalescingOptions_DefaultCoalescing)
	if !ok {
		that2, ok := that.(TLSCoalescingOptions_DefaultCoalescing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultCoalescing.Equal(that1.DefaultCoalescing) {
		return false
	}
	return true
}
func (this *TLSCoalescingOptions_StrictCoalescing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSCoalescingOptions_StrictCoalescing)
	if !ok {
		that2, ok := that.(TLSCoalescingOptions_StrictCoalescing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StrictCoalescing.Equal(that1.StrictCoalescing) {
		return false
	}
	return true
}
func (this *CertInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.CertInfoType{")
	s = append(s, "CommonName: "+fmt.Sprintf("%#v", this.CommonName)+",\n")
	s = append(s, "SubjectAlternativeNames: "+fmt.Sprintf("%#v", this.SubjectAlternativeNames)+",\n")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	if this.Expiry != nil {
		s = append(s, "Expiry: "+fmt.Sprintf("%#v", this.Expiry)+",\n")
	}
	s = append(s, "Issuer: "+fmt.Sprintf("%#v", this.Issuer)+",\n")
	s = append(s, "PublicKeyAlgorithm: "+fmt.Sprintf("%#v", this.PublicKeyAlgorithm)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CertificateParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&schema.CertificateParamsType{")
	if this.Certificates != nil {
		s = append(s, "Certificates: "+fmt.Sprintf("%#v", this.Certificates)+",\n")
	}
	if this.ValidationParams != nil {
		s = append(s, "ValidationParams: "+fmt.Sprintf("%#v", this.ValidationParams)+",\n")
	}
	s = append(s, "MinimumProtocolVersion: "+fmt.Sprintf("%#v", this.MinimumProtocolVersion)+",\n")
	s = append(s, "MaximumProtocolVersion: "+fmt.Sprintf("%#v", this.MaximumProtocolVersion)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "RequireClientCertificate: "+fmt.Sprintf("%#v", this.RequireClientCertificate)+",\n")
	if this.ClientCertificateVerifyChoice != nil {
		s = append(s, "ClientCertificateVerifyChoice: "+fmt.Sprintf("%#v", this.ClientCertificateVerifyChoice)+",\n")
	}
	if this.Crl != nil {
		s = append(s, "Crl: "+fmt.Sprintf("%#v", this.Crl)+",\n")
	}
	s = append(s, "XfccHeaderElements: "+fmt.Sprintf("%#v", this.XfccHeaderElements)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CertificateParamsType_NoClientCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.CertificateParamsType_NoClientCertificate{` +
		`NoClientCertificate:` + fmt.Sprintf("%#v", this.NoClientCertificate) + `}`}, ", ")
	return s
}
func (this *CertificateParamsType_ClientCertificateRequired) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.CertificateParamsType_ClientCertificateRequired{` +
		`ClientCertificateRequired:` + fmt.Sprintf("%#v", this.ClientCertificateRequired) + `}`}, ", ")
	return s
}
func (this *CertificateParamsType_ClientCertificateOptional) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.CertificateParamsType_ClientCertificateOptional{` +
		`ClientCertificateOptional:` + fmt.Sprintf("%#v", this.ClientCertificateOptional) + `}`}, ", ")
	return s
}
func (this *UpstreamCertificateParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schema.UpstreamCertificateParamsType{")
	if this.Certificates != nil {
		s = append(s, "Certificates: "+fmt.Sprintf("%#v", this.Certificates)+",\n")
	}
	if this.ValidationParams != nil {
		s = append(s, "ValidationParams: "+fmt.Sprintf("%#v", this.ValidationParams)+",\n")
	}
	s = append(s, "MinimumProtocolVersion: "+fmt.Sprintf("%#v", this.MinimumProtocolVersion)+",\n")
	s = append(s, "MaximumProtocolVersion: "+fmt.Sprintf("%#v", this.MaximumProtocolVersion)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpstreamTlsParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&schema.UpstreamTlsParamsType{")
	if this.TlsParamsChoice != nil {
		s = append(s, "TlsParamsChoice: "+fmt.Sprintf("%#v", this.TlsParamsChoice)+",\n")
	}
	if this.SniChoice != nil {
		s = append(s, "SniChoice: "+fmt.Sprintf("%#v", this.SniChoice)+",\n")
	}
	if this.MaxSessionKeysType != nil {
		s = append(s, "MaxSessionKeysType: "+fmt.Sprintf("%#v", this.MaxSessionKeysType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpstreamTlsParamsType_CommonParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.UpstreamTlsParamsType_CommonParams{` +
		`CommonParams:` + fmt.Sprintf("%#v", this.CommonParams) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParamsType_CertParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.UpstreamTlsParamsType_CertParams{` +
		`CertParams:` + fmt.Sprintf("%#v", this.CertParams) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParamsType_Sni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.UpstreamTlsParamsType_Sni{` +
		`Sni:` + fmt.Sprintf("%#v", this.Sni) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParamsType_UseHostHeaderAsSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.UpstreamTlsParamsType_UseHostHeaderAsSni{` +
		`UseHostHeaderAsSni:` + fmt.Sprintf("%#v", this.UseHostHeaderAsSni) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParamsType_DisableSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.UpstreamTlsParamsType_DisableSni{` +
		`DisableSni:` + fmt.Sprintf("%#v", this.DisableSni) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParamsType_DefaultSessionKeyCaching) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.UpstreamTlsParamsType_DefaultSessionKeyCaching{` +
		`DefaultSessionKeyCaching:` + fmt.Sprintf("%#v", this.DefaultSessionKeyCaching) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParamsType_DisableSessionKeyCaching) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.UpstreamTlsParamsType_DisableSessionKeyCaching{` +
		`DisableSessionKeyCaching:` + fmt.Sprintf("%#v", this.DisableSessionKeyCaching) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsParamsType_MaxSessionKeys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.UpstreamTlsParamsType_MaxSessionKeys{` +
		`MaxSessionKeys:` + fmt.Sprintf("%#v", this.MaxSessionKeys) + `}`}, ", ")
	return s
}
func (this *TlsParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.TlsParamsType{")
	s = append(s, "MinimumProtocolVersion: "+fmt.Sprintf("%#v", this.MinimumProtocolVersion)+",\n")
	s = append(s, "MaximumProtocolVersion: "+fmt.Sprintf("%#v", this.MaximumProtocolVersion)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	if this.TlsCertificates != nil {
		s = append(s, "TlsCertificates: "+fmt.Sprintf("%#v", this.TlsCertificates)+",\n")
	}
	s = append(s, "TrustedCaUrl: "+fmt.Sprintf("%#v", this.TrustedCaUrl)+",\n")
	if this.ValidationParams != nil {
		s = append(s, "ValidationParams: "+fmt.Sprintf("%#v", this.ValidationParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.DownstreamTlsParamsType{")
	if this.CommonParams != nil {
		s = append(s, "CommonParams: "+fmt.Sprintf("%#v", this.CommonParams)+",\n")
	}
	s = append(s, "RequireClientCertificate: "+fmt.Sprintf("%#v", this.RequireClientCertificate)+",\n")
	if this.ClientCertificateVerifyChoice != nil {
		s = append(s, "ClientCertificateVerifyChoice: "+fmt.Sprintf("%#v", this.ClientCertificateVerifyChoice)+",\n")
	}
	if this.Crl != nil {
		s = append(s, "Crl: "+fmt.Sprintf("%#v", this.Crl)+",\n")
	}
	s = append(s, "XfccHeaderElements: "+fmt.Sprintf("%#v", this.XfccHeaderElements)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsParamsType_NoClientCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DownstreamTlsParamsType_NoClientCertificate{` +
		`NoClientCertificate:` + fmt.Sprintf("%#v", this.NoClientCertificate) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsParamsType_ClientCertificateRequired) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DownstreamTlsParamsType_ClientCertificateRequired{` +
		`ClientCertificateRequired:` + fmt.Sprintf("%#v", this.ClientCertificateRequired) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsParamsType_ClientCertificateOptional) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.DownstreamTlsParamsType_ClientCertificateOptional{` +
		`ClientCertificateOptional:` + fmt.Sprintf("%#v", this.ClientCertificateOptional) + `}`}, ", ")
	return s
}
func (this *HostAccessInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schema.HostAccessInfoType{")
	s = append(s, "Scheme: "+fmt.Sprintf("%#v", this.Scheme)+",\n")
	s = append(s, "ServerEndpoint: "+fmt.Sprintf("%#v", this.ServerEndpoint)+",\n")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.AuthParams != nil {
		s = append(s, "AuthParams: "+fmt.Sprintf("%#v", this.AuthParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostAccessInfoType_RestAuthInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.HostAccessInfoType_RestAuthInfo{` +
		`RestAuthInfo:` + fmt.Sprintf("%#v", this.RestAuthInfo) + `}`}, ", ")
	return s
}
func (this *HostAccessInfoType_VaultAuthInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.HostAccessInfoType_VaultAuthInfo{` +
		`VaultAuthInfo:` + fmt.Sprintf("%#v", this.VaultAuthInfo) + `}`}, ", ")
	return s
}
func (this *TLSCoalescingOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.TLSCoalescingOptions{")
	if this.CoalescingChoice != nil {
		s = append(s, "CoalescingChoice: "+fmt.Sprintf("%#v", this.CoalescingChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSCoalescingOptions_DefaultCoalescing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.TLSCoalescingOptions_DefaultCoalescing{` +
		`DefaultCoalescing:` + fmt.Sprintf("%#v", this.DefaultCoalescing) + `}`}, ", ")
	return s
}
func (this *TLSCoalescingOptions_StrictCoalescing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.TLSCoalescingOptions_StrictCoalescing{` +
		`StrictCoalescing:` + fmt.Sprintf("%#v", this.StrictCoalescing) + `}`}, ", ")
	return s
}
func valueToGoStringCertTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CertInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKeyAlgorithm) > 0 {
		i -= len(m.PublicKeyAlgorithm)
		copy(dAtA[i:], m.PublicKeyAlgorithm)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.PublicKeyAlgorithm)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubjectAlternativeNames) > 0 {
		for iNdEx := len(m.SubjectAlternativeNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectAlternativeNames[iNdEx])
			copy(dAtA[i:], m.SubjectAlternativeNames[iNdEx])
			i = encodeVarintCertTypes(dAtA, i, uint64(len(m.SubjectAlternativeNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertificateParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientCertificateVerifyChoice != nil {
		{
			size := m.ClientCertificateVerifyChoice.Size()
			i -= size
			if _, err := m.ClientCertificateVerifyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.XfccHeaderElements) > 0 {
		dAtA3 := make([]byte, len(m.XfccHeaderElements)*10)
		var j2 int
		for _, num := range m.XfccHeaderElements {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintCertTypes(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Crl) > 0 {
		for iNdEx := len(m.Crl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Crl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCertTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.RequireClientCertificate {
		i--
		if m.RequireClientCertificate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.CipherSuites) > 0 {
		for iNdEx := len(m.CipherSuites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CipherSuites[iNdEx])
			copy(dAtA[i:], m.CipherSuites[iNdEx])
			i = encodeVarintCertTypes(dAtA, i, uint64(len(m.CipherSuites[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MaximumProtocolVersion != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.MaximumProtocolVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.MinimumProtocolVersion != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.MinimumProtocolVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidationParams != nil {
		{
			size, err := m.ValidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCertTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CertificateParamsType_NoClientCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateParamsType_NoClientCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoClientCertificate != nil {
		{
			size, err := m.NoClientCertificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CertificateParamsType_ClientCertificateRequired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateParamsType_ClientCertificateRequired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientCertificateRequired != nil {
		{
			size, err := m.ClientCertificateRequired.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CertificateParamsType_ClientCertificateOptional) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateParamsType_ClientCertificateOptional) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientCertificateOptional != nil {
		{
			size, err := m.ClientCertificateOptional.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamCertificateParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamCertificateParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamCertificateParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CipherSuites) > 0 {
		for iNdEx := len(m.CipherSuites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CipherSuites[iNdEx])
			copy(dAtA[i:], m.CipherSuites[iNdEx])
			i = encodeVarintCertTypes(dAtA, i, uint64(len(m.CipherSuites[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MaximumProtocolVersion != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.MaximumProtocolVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.MinimumProtocolVersion != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.MinimumProtocolVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidationParams != nil {
		{
			size, err := m.ValidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCertTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamTlsParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamTlsParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSessionKeysType != nil {
		{
			size := m.MaxSessionKeysType.Size()
			i -= size
			if _, err := m.MaxSessionKeysType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsParamsChoice != nil {
		{
			size := m.TlsParamsChoice.Size()
			i -= size
			if _, err := m.TlsParamsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SniChoice != nil {
		{
			size := m.SniChoice.Size()
			i -= size
			if _, err := m.SniChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamTlsParamsType_CommonParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType_CommonParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommonParams != nil {
		{
			size, err := m.CommonParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamTlsParamsType_Sni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType_Sni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Sni)
	copy(dAtA[i:], m.Sni)
	i = encodeVarintCertTypes(dAtA, i, uint64(len(m.Sni)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *UpstreamTlsParamsType_UseHostHeaderAsSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType_UseHostHeaderAsSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseHostHeaderAsSni != nil {
		{
			size, err := m.UseHostHeaderAsSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamTlsParamsType_DisableSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType_DisableSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSni != nil {
		{
			size, err := m.DisableSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamTlsParamsType_CertParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType_CertParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CertParams != nil {
		{
			size, err := m.CertParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamTlsParamsType_DefaultSessionKeyCaching) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType_DefaultSessionKeyCaching) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSessionKeyCaching != nil {
		{
			size, err := m.DefaultSessionKeyCaching.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamTlsParamsType_DisableSessionKeyCaching) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType_DisableSessionKeyCaching) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSessionKeyCaching != nil {
		{
			size, err := m.DisableSessionKeyCaching.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamTlsParamsType_MaxSessionKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsParamsType_MaxSessionKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCertTypes(dAtA, i, uint64(m.MaxSessionKeys))
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *TlsParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlsParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidationParams != nil {
		{
			size, err := m.ValidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrustedCaUrl) > 0 {
		i -= len(m.TrustedCaUrl)
		copy(dAtA[i:], m.TrustedCaUrl)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.TrustedCaUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TlsCertificates) > 0 {
		for iNdEx := len(m.TlsCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TlsCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCertTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CipherSuites) > 0 {
		for iNdEx := len(m.CipherSuites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CipherSuites[iNdEx])
			copy(dAtA[i:], m.CipherSuites[iNdEx])
			i = encodeVarintCertTypes(dAtA, i, uint64(len(m.CipherSuites[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MaximumProtocolVersion != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.MaximumProtocolVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.MinimumProtocolVersion != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.MinimumProtocolVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamTlsParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientCertificateVerifyChoice != nil {
		{
			size := m.ClientCertificateVerifyChoice.Size()
			i -= size
			if _, err := m.ClientCertificateVerifyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.XfccHeaderElements) > 0 {
		dAtA17 := make([]byte, len(m.XfccHeaderElements)*10)
		var j16 int
		for _, num := range m.XfccHeaderElements {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintCertTypes(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Crl) > 0 {
		for iNdEx := len(m.Crl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Crl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCertTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RequireClientCertificate {
		i--
		if m.RequireClientCertificate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CommonParams != nil {
		{
			size, err := m.CommonParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamTlsParamsType_NoClientCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType_NoClientCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoClientCertificate != nil {
		{
			size, err := m.NoClientCertificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsParamsType_ClientCertificateRequired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType_ClientCertificateRequired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientCertificateRequired != nil {
		{
			size, err := m.ClientCertificateRequired.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsParamsType_ClientCertificateOptional) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType_ClientCertificateOptional) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientCertificateOptional != nil {
		{
			size, err := m.ClientCertificateOptional.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *HostAccessInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostAccessInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostAccessInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthParams != nil {
		{
			size := m.AuthParams.Size()
			i -= size
			if _, err := m.AuthParams.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerEndpoint) > 0 {
		i -= len(m.ServerEndpoint)
		copy(dAtA[i:], m.ServerEndpoint)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.ServerEndpoint)))
		i--
		dAtA[i] = 0x12
	}
	if m.Scheme != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.Scheme))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HostAccessInfoType_RestAuthInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostAccessInfoType_RestAuthInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RestAuthInfo != nil {
		{
			size, err := m.RestAuthInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *HostAccessInfoType_VaultAuthInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostAccessInfoType_VaultAuthInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VaultAuthInfo != nil {
		{
			size, err := m.VaultAuthInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *TLSCoalescingOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSCoalescingOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSCoalescingOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoalescingChoice != nil {
		{
			size := m.CoalescingChoice.Size()
			i -= size
			if _, err := m.CoalescingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLSCoalescingOptions_DefaultCoalescing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSCoalescingOptions_DefaultCoalescing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultCoalescing != nil {
		{
			size, err := m.DefaultCoalescing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TLSCoalescingOptions_StrictCoalescing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSCoalescingOptions_StrictCoalescing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StrictCoalescing != nil {
		{
			size, err := m.StrictCoalescing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintCertTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovCertTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CertInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if len(m.SubjectAlternativeNames) > 0 {
		for _, s := range m.SubjectAlternativeNames {
			l = len(s)
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	l = len(m.PublicKeyAlgorithm)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}

func (m *CertificateParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	if m.ValidationParams != nil {
		l = m.ValidationParams.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.MinimumProtocolVersion != 0 {
		n += 1 + sovCertTypes(uint64(m.MinimumProtocolVersion))
	}
	if m.MaximumProtocolVersion != 0 {
		n += 1 + sovCertTypes(uint64(m.MaximumProtocolVersion))
	}
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			l = len(s)
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	if m.RequireClientCertificate {
		n += 2
	}
	if len(m.Crl) > 0 {
		for _, e := range m.Crl {
			l = e.Size()
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	if len(m.XfccHeaderElements) > 0 {
		l = 0
		for _, e := range m.XfccHeaderElements {
			l += sovCertTypes(uint64(e))
		}
		n += 1 + sovCertTypes(uint64(l)) + l
	}
	if m.ClientCertificateVerifyChoice != nil {
		n += m.ClientCertificateVerifyChoice.Size()
	}
	return n
}

func (m *CertificateParamsType_NoClientCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoClientCertificate != nil {
		l = m.NoClientCertificate.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *CertificateParamsType_ClientCertificateRequired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCertificateRequired != nil {
		l = m.ClientCertificateRequired.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *CertificateParamsType_ClientCertificateOptional) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCertificateOptional != nil {
		l = m.ClientCertificateOptional.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *UpstreamCertificateParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	if m.ValidationParams != nil {
		l = m.ValidationParams.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.MinimumProtocolVersion != 0 {
		n += 1 + sovCertTypes(uint64(m.MinimumProtocolVersion))
	}
	if m.MaximumProtocolVersion != 0 {
		n += 1 + sovCertTypes(uint64(m.MaximumProtocolVersion))
	}
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			l = len(s)
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	return n
}

func (m *UpstreamTlsParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsParamsChoice != nil {
		n += m.TlsParamsChoice.Size()
	}
	if m.SniChoice != nil {
		n += m.SniChoice.Size()
	}
	if m.MaxSessionKeysType != nil {
		n += m.MaxSessionKeysType.Size()
	}
	return n
}

func (m *UpstreamTlsParamsType_CommonParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonParams != nil {
		l = m.CommonParams.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParamsType_Sni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sni)
	n += 1 + l + sovCertTypes(uint64(l))
	return n
}
func (m *UpstreamTlsParamsType_UseHostHeaderAsSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseHostHeaderAsSni != nil {
		l = m.UseHostHeaderAsSni.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParamsType_DisableSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSni != nil {
		l = m.DisableSni.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParamsType_CertParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CertParams != nil {
		l = m.CertParams.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParamsType_DefaultSessionKeyCaching) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSessionKeyCaching != nil {
		l = m.DefaultSessionKeyCaching.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParamsType_DisableSessionKeyCaching) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSessionKeyCaching != nil {
		l = m.DisableSessionKeyCaching.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsParamsType_MaxSessionKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCertTypes(uint64(m.MaxSessionKeys))
	return n
}
func (m *TlsParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumProtocolVersion != 0 {
		n += 1 + sovCertTypes(uint64(m.MinimumProtocolVersion))
	}
	if m.MaximumProtocolVersion != 0 {
		n += 1 + sovCertTypes(uint64(m.MaximumProtocolVersion))
	}
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			l = len(s)
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	if len(m.TlsCertificates) > 0 {
		for _, e := range m.TlsCertificates {
			l = e.Size()
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	l = len(m.TrustedCaUrl)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.ValidationParams != nil {
		l = m.ValidationParams.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}

func (m *DownstreamTlsParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonParams != nil {
		l = m.CommonParams.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.RequireClientCertificate {
		n += 2
	}
	if len(m.Crl) > 0 {
		for _, e := range m.Crl {
			l = e.Size()
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	if len(m.XfccHeaderElements) > 0 {
		l = 0
		for _, e := range m.XfccHeaderElements {
			l += sovCertTypes(uint64(e))
		}
		n += 1 + sovCertTypes(uint64(l)) + l
	}
	if m.ClientCertificateVerifyChoice != nil {
		n += m.ClientCertificateVerifyChoice.Size()
	}
	return n
}

func (m *DownstreamTlsParamsType_NoClientCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoClientCertificate != nil {
		l = m.NoClientCertificate.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsParamsType_ClientCertificateRequired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCertificateRequired != nil {
		l = m.ClientCertificateRequired.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsParamsType_ClientCertificateOptional) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCertificateOptional != nil {
		l = m.ClientCertificateOptional.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *HostAccessInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scheme != 0 {
		n += 1 + sovCertTypes(uint64(m.Scheme))
	}
	l = len(m.ServerEndpoint)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.AuthParams != nil {
		n += m.AuthParams.Size()
	}
	return n
}

func (m *HostAccessInfoType_RestAuthInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RestAuthInfo != nil {
		l = m.RestAuthInfo.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *HostAccessInfoType_VaultAuthInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultAuthInfo != nil {
		l = m.VaultAuthInfo.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *TLSCoalescingOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoalescingChoice != nil {
		n += m.CoalescingChoice.Size()
	}
	return n
}

func (m *TLSCoalescingOptions_DefaultCoalescing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultCoalescing != nil {
		l = m.DefaultCoalescing.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}
func (m *TLSCoalescingOptions_StrictCoalescing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StrictCoalescing != nil {
		l = m.StrictCoalescing.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}

func sovCertTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCertTypes(x uint64) (n int) {
	return sovCertTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CertInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertInfoType{`,
		`CommonName:` + fmt.Sprintf("%v", this.CommonName) + `,`,
		`SubjectAlternativeNames:` + fmt.Sprintf("%v", this.SubjectAlternativeNames) + `,`,
		`Organization:` + fmt.Sprintf("%v", this.Organization) + `,`,
		`Expiry:` + strings.Replace(fmt.Sprintf("%v", this.Expiry), "Timestamp", "types.Timestamp", 1) + `,`,
		`Issuer:` + fmt.Sprintf("%v", this.Issuer) + `,`,
		`PublicKeyAlgorithm:` + fmt.Sprintf("%v", this.PublicKeyAlgorithm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertificateParamsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCertificates := "[]*ObjectRefType{"
	for _, f := range this.Certificates {
		repeatedStringForCertificates += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForCertificates += "}"
	repeatedStringForCrl := "[]*ObjectRefType{"
	for _, f := range this.Crl {
		repeatedStringForCrl += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForCrl += "}"
	s := strings.Join([]string{`&CertificateParamsType{`,
		`Certificates:` + repeatedStringForCertificates + `,`,
		`ValidationParams:` + strings.Replace(fmt.Sprintf("%v", this.ValidationParams), "TlsValidationParamsType", "TlsValidationParamsType", 1) + `,`,
		`MinimumProtocolVersion:` + fmt.Sprintf("%v", this.MinimumProtocolVersion) + `,`,
		`MaximumProtocolVersion:` + fmt.Sprintf("%v", this.MaximumProtocolVersion) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`RequireClientCertificate:` + fmt.Sprintf("%v", this.RequireClientCertificate) + `,`,
		`Crl:` + repeatedStringForCrl + `,`,
		`XfccHeaderElements:` + fmt.Sprintf("%v", this.XfccHeaderElements) + `,`,
		`ClientCertificateVerifyChoice:` + fmt.Sprintf("%v", this.ClientCertificateVerifyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertificateParamsType_NoClientCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertificateParamsType_NoClientCertificate{`,
		`NoClientCertificate:` + strings.Replace(fmt.Sprintf("%v", this.NoClientCertificate), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertificateParamsType_ClientCertificateRequired) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertificateParamsType_ClientCertificateRequired{`,
		`ClientCertificateRequired:` + strings.Replace(fmt.Sprintf("%v", this.ClientCertificateRequired), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertificateParamsType_ClientCertificateOptional) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertificateParamsType_ClientCertificateOptional{`,
		`ClientCertificateOptional:` + strings.Replace(fmt.Sprintf("%v", this.ClientCertificateOptional), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamCertificateParamsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCertificates := "[]*ObjectRefType{"
	for _, f := range this.Certificates {
		repeatedStringForCertificates += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForCertificates += "}"
	s := strings.Join([]string{`&UpstreamCertificateParamsType{`,
		`Certificates:` + repeatedStringForCertificates + `,`,
		`ValidationParams:` + strings.Replace(fmt.Sprintf("%v", this.ValidationParams), "TlsValidationParamsType", "TlsValidationParamsType", 1) + `,`,
		`MinimumProtocolVersion:` + fmt.Sprintf("%v", this.MinimumProtocolVersion) + `,`,
		`MaximumProtocolVersion:` + fmt.Sprintf("%v", this.MaximumProtocolVersion) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType{`,
		`TlsParamsChoice:` + fmt.Sprintf("%v", this.TlsParamsChoice) + `,`,
		`SniChoice:` + fmt.Sprintf("%v", this.SniChoice) + `,`,
		`MaxSessionKeysType:` + fmt.Sprintf("%v", this.MaxSessionKeysType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType_CommonParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType_CommonParams{`,
		`CommonParams:` + strings.Replace(fmt.Sprintf("%v", this.CommonParams), "TlsParamsType", "TlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType_Sni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType_Sni{`,
		`Sni:` + fmt.Sprintf("%v", this.Sni) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType_UseHostHeaderAsSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType_UseHostHeaderAsSni{`,
		`UseHostHeaderAsSni:` + strings.Replace(fmt.Sprintf("%v", this.UseHostHeaderAsSni), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType_DisableSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType_DisableSni{`,
		`DisableSni:` + strings.Replace(fmt.Sprintf("%v", this.DisableSni), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType_CertParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType_CertParams{`,
		`CertParams:` + strings.Replace(fmt.Sprintf("%v", this.CertParams), "UpstreamCertificateParamsType", "UpstreamCertificateParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType_DefaultSessionKeyCaching) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType_DefaultSessionKeyCaching{`,
		`DefaultSessionKeyCaching:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSessionKeyCaching), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType_DisableSessionKeyCaching) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType_DisableSessionKeyCaching{`,
		`DisableSessionKeyCaching:` + strings.Replace(fmt.Sprintf("%v", this.DisableSessionKeyCaching), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsParamsType_MaxSessionKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsParamsType_MaxSessionKeys{`,
		`MaxSessionKeys:` + fmt.Sprintf("%v", this.MaxSessionKeys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TlsParamsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTlsCertificates := "[]*TlsCertificateType{"
	for _, f := range this.TlsCertificates {
		repeatedStringForTlsCertificates += strings.Replace(fmt.Sprintf("%v", f), "TlsCertificateType", "TlsCertificateType", 1) + ","
	}
	repeatedStringForTlsCertificates += "}"
	s := strings.Join([]string{`&TlsParamsType{`,
		`MinimumProtocolVersion:` + fmt.Sprintf("%v", this.MinimumProtocolVersion) + `,`,
		`MaximumProtocolVersion:` + fmt.Sprintf("%v", this.MaximumProtocolVersion) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`TlsCertificates:` + repeatedStringForTlsCertificates + `,`,
		`TrustedCaUrl:` + fmt.Sprintf("%v", this.TrustedCaUrl) + `,`,
		`ValidationParams:` + strings.Replace(fmt.Sprintf("%v", this.ValidationParams), "TlsValidationParamsType", "TlsValidationParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCrl := "[]*ObjectRefType{"
	for _, f := range this.Crl {
		repeatedStringForCrl += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForCrl += "}"
	s := strings.Join([]string{`&DownstreamTlsParamsType{`,
		`CommonParams:` + strings.Replace(this.CommonParams.String(), "TlsParamsType", "TlsParamsType", 1) + `,`,
		`RequireClientCertificate:` + fmt.Sprintf("%v", this.RequireClientCertificate) + `,`,
		`Crl:` + repeatedStringForCrl + `,`,
		`XfccHeaderElements:` + fmt.Sprintf("%v", this.XfccHeaderElements) + `,`,
		`ClientCertificateVerifyChoice:` + fmt.Sprintf("%v", this.ClientCertificateVerifyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_NoClientCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_NoClientCertificate{`,
		`NoClientCertificate:` + strings.Replace(fmt.Sprintf("%v", this.NoClientCertificate), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_ClientCertificateRequired) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_ClientCertificateRequired{`,
		`ClientCertificateRequired:` + strings.Replace(fmt.Sprintf("%v", this.ClientCertificateRequired), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_ClientCertificateOptional) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_ClientCertificateOptional{`,
		`ClientCertificateOptional:` + strings.Replace(fmt.Sprintf("%v", this.ClientCertificateOptional), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostAccessInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostAccessInfoType{`,
		`Scheme:` + fmt.Sprintf("%v", this.Scheme) + `,`,
		`ServerEndpoint:` + fmt.Sprintf("%v", this.ServerEndpoint) + `,`,
		`TlsConfig:` + strings.Replace(this.TlsConfig.String(), "UpstreamTlsParamsType", "UpstreamTlsParamsType", 1) + `,`,
		`AuthParams:` + fmt.Sprintf("%v", this.AuthParams) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostAccessInfoType_RestAuthInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostAccessInfoType_RestAuthInfo{`,
		`RestAuthInfo:` + strings.Replace(fmt.Sprintf("%v", this.RestAuthInfo), "RestAuthInfoType", "RestAuthInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostAccessInfoType_VaultAuthInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostAccessInfoType_VaultAuthInfo{`,
		`VaultAuthInfo:` + strings.Replace(fmt.Sprintf("%v", this.VaultAuthInfo), "VaultAuthInfoType", "VaultAuthInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSCoalescingOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSCoalescingOptions{`,
		`CoalescingChoice:` + fmt.Sprintf("%v", this.CoalescingChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSCoalescingOptions_DefaultCoalescing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSCoalescingOptions_DefaultCoalescing{`,
		`DefaultCoalescing:` + strings.Replace(fmt.Sprintf("%v", this.DefaultCoalescing), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSCoalescingOptions_StrictCoalescing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSCoalescingOptions_StrictCoalescing{`,
		`StrictCoalescing:` + strings.Replace(fmt.Sprintf("%v", this.StrictCoalescing), "Empty", "Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCertTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CertInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectAlternativeNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectAlternativeNames = append(m.SubjectAlternativeNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &types.Timestamp{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &ObjectRefType{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationParams == nil {
				m.ValidationParams = &TlsValidationParamsType{}
			}
			if err := m.ValidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumProtocolVersion", wireType)
			}
			m.MinimumProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumProtocolVersion |= TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumProtocolVersion", wireType)
			}
			m.MaximumProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumProtocolVersion |= TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuites = append(m.CipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireClientCertificate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireClientCertificate = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crl = append(m.Crl, &ObjectRefType{})
			if err := m.Crl[len(m.Crl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v XfccElement
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCertTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= XfccElement(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.XfccHeaderElements = append(m.XfccHeaderElements, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCertTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCertTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCertTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.XfccHeaderElements) == 0 {
					m.XfccHeaderElements = make([]XfccElement, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v XfccElement
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCertTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= XfccElement(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.XfccHeaderElements = append(m.XfccHeaderElements, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field XfccHeaderElements", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoClientCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientCertificateVerifyChoice = &CertificateParamsType_NoClientCertificate{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertificateRequired", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientCertificateVerifyChoice = &CertificateParamsType_ClientCertificateRequired{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertificateOptional", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientCertificateVerifyChoice = &CertificateParamsType_ClientCertificateOptional{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamCertificateParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamCertificateParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamCertificateParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &ObjectRefType{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationParams == nil {
				m.ValidationParams = &TlsValidationParamsType{}
			}
			if err := m.ValidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumProtocolVersion", wireType)
			}
			m.MinimumProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumProtocolVersion |= TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumProtocolVersion", wireType)
			}
			m.MaximumProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumProtocolVersion |= TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuites = append(m.CipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamTlsParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamTlsParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamTlsParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsParamsChoice = &UpstreamTlsParamsType_CommonParams{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SniChoice = &UpstreamTlsParamsType_Sni{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHostHeaderAsSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniChoice = &UpstreamTlsParamsType_UseHostHeaderAsSni{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniChoice = &UpstreamTlsParamsType_DisableSni{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamCertificateParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsParamsChoice = &UpstreamTlsParamsType_CertParams{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSessionKeyCaching", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxSessionKeysType = &UpstreamTlsParamsType_DefaultSessionKeyCaching{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSessionKeyCaching", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaxSessionKeysType = &UpstreamTlsParamsType_DisableSessionKeyCaching{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSessionKeys", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxSessionKeysType = &UpstreamTlsParamsType_MaxSessionKeys{v}
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumProtocolVersion", wireType)
			}
			m.MinimumProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumProtocolVersion |= TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumProtocolVersion", wireType)
			}
			m.MaximumProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumProtocolVersion |= TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuites = append(m.CipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertificates = append(m.TlsCertificates, &TlsCertificateType{})
			if err := m.TlsCertificates[len(m.TlsCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationParams == nil {
				m.ValidationParams = &TlsValidationParamsType{}
			}
			if err := m.ValidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamTlsParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonParams == nil {
				m.CommonParams = &TlsParamsType{}
			}
			if err := m.CommonParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireClientCertificate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireClientCertificate = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crl = append(m.Crl, &ObjectRefType{})
			if err := m.Crl[len(m.Crl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v XfccElement
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCertTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= XfccElement(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.XfccHeaderElements = append(m.XfccHeaderElements, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCertTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCertTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCertTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.XfccHeaderElements) == 0 {
					m.XfccHeaderElements = make([]XfccElement, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v XfccElement
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCertTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= XfccElement(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.XfccHeaderElements = append(m.XfccHeaderElements, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field XfccHeaderElements", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoClientCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientCertificateVerifyChoice = &DownstreamTlsParamsType_NoClientCertificate{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertificateRequired", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientCertificateVerifyChoice = &DownstreamTlsParamsType_ClientCertificateRequired{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertificateOptional", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientCertificateVerifyChoice = &DownstreamTlsParamsType_ClientCertificateOptional{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostAccessInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostAccessInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostAccessInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			m.Scheme = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scheme |= URLSchemeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &UpstreamTlsParamsType{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestAuthInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RestAuthInfoType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthParams = &HostAccessInfoType_RestAuthInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAuthInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VaultAuthInfoType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthParams = &HostAccessInfoType_VaultAuthInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSCoalescingOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSCoalescingOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSCoalescingOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCoalescing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CoalescingChoice = &TLSCoalescingOptions_DefaultCoalescing{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrictCoalescing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CoalescingChoice = &TLSCoalescingOptions_StrictCoalescing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCertTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCertTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCertTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCertTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCertTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCertTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCertTypes = fmt.Errorf("proto: unexpected end of group")
)

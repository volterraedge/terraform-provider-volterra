// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_load_balancer/public_customapi.proto

// DNS Load Balancer
//
// x-displayName: "DNS Load Balancer"
// Custom APIs used for DNS load balancer Create/Replace

package dns_load_balancer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_zone"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SuggestValuesReq
//
// x-displayName: "Request for SuggestValues"
// Request body of SuggestValues request
type SuggestValuesReq struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "foobar"
	// Namespace in which the suggestions are scoped.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// field_path
	//
	// x-displayName: "Field Path"
	// x-example: "spec.rule_choice.rule_list.rules[2].spec.api_group_matcher.match"
	// JSON path of the field for which the suggested values are being requested.
	FieldPath string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// request_body
	//
	// x-displayName: "Request Body"
	// Body of the Create/Replace/Custom request in whose context the suggested values for the field are being requested.
	RequestBody *types.Any `protobuf:"bytes,3,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	// match_value
	//
	// x-displayName: "Match Value"
	// x-example: "some-substring"
	// A substring that must be present in either the value or description of each SuggestedItem in the response.
	MatchValue string `protobuf:"bytes,4,opt,name=match_value,json=matchValue,proto3" json:"match_value,omitempty"`
}

func (m *SuggestValuesReq) Reset()      { *m = SuggestValuesReq{} }
func (*SuggestValuesReq) ProtoMessage() {}
func (*SuggestValuesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e168a2f9e9350934, []int{0}
}
func (m *SuggestValuesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestValuesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuggestValuesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuggestValuesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestValuesReq.Merge(m, src)
}
func (m *SuggestValuesReq) XXX_Size() int {
	return m.Size()
}
func (m *SuggestValuesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestValuesReq.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestValuesReq proto.InternalMessageInfo

func (m *SuggestValuesReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SuggestValuesReq) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

func (m *SuggestValuesReq) GetRequestBody() *types.Any {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func (m *SuggestValuesReq) GetMatchValue() string {
	if m != nil {
		return m.MatchValue
	}
	return ""
}

// SuggestedItem
//
// x-displayName: "Suggested Item"
// A tuple with a suggested value and it's description.
type SuggestedItem struct {
	// value_choice
	//
	// x-displayName: "Value Choice"
	// Type specific suggested value for the field.
	//
	// Types that are valid to be assigned to ValueChoice:
	//	*SuggestedItem_StrValue
	//	*SuggestedItem_RefValue
	ValueChoice isSuggestedItem_ValueChoice `protobuf_oneof:"value_choice"`
	// description
	//
	// x-displayName: "Description"
	// Optional description for the suggested value.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *SuggestedItem) Reset()      { *m = SuggestedItem{} }
func (*SuggestedItem) ProtoMessage() {}
func (*SuggestedItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e168a2f9e9350934, []int{1}
}
func (m *SuggestedItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestedItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuggestedItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuggestedItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestedItem.Merge(m, src)
}
func (m *SuggestedItem) XXX_Size() int {
	return m.Size()
}
func (m *SuggestedItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestedItem.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestedItem proto.InternalMessageInfo

type isSuggestedItem_ValueChoice interface {
	isSuggestedItem_ValueChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SuggestedItem_StrValue struct {
	StrValue string `protobuf:"bytes,3,opt,name=str_value,json=strValue,proto3,oneof" json:"str_value,omitempty"`
}
type SuggestedItem_RefValue struct {
	RefValue *views.ObjectRefType `protobuf:"bytes,4,opt,name=ref_value,json=refValue,proto3,oneof" json:"ref_value,omitempty"`
}

func (*SuggestedItem_StrValue) isSuggestedItem_ValueChoice() {}
func (*SuggestedItem_RefValue) isSuggestedItem_ValueChoice() {}

func (m *SuggestedItem) GetValueChoice() isSuggestedItem_ValueChoice {
	if m != nil {
		return m.ValueChoice
	}
	return nil
}

func (m *SuggestedItem) GetStrValue() string {
	if x, ok := m.GetValueChoice().(*SuggestedItem_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (m *SuggestedItem) GetRefValue() *views.ObjectRefType {
	if x, ok := m.GetValueChoice().(*SuggestedItem_RefValue); ok {
		return x.RefValue
	}
	return nil
}

func (m *SuggestedItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SuggestedItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SuggestedItem_StrValue)(nil),
		(*SuggestedItem_RefValue)(nil),
	}
}

// SuggestValuesResp
//
// x-displayName: "Response for SuggestValues"
// Response body of SuggestValues request
type SuggestValuesResp struct {
	// item_lists
	//
	// x-displayName: "Suggested Items"
	// List of suggested items.
	Items []*SuggestedItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SuggestValuesResp) Reset()      { *m = SuggestValuesResp{} }
func (*SuggestValuesResp) ProtoMessage() {}
func (*SuggestValuesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e168a2f9e9350934, []int{2}
}
func (m *SuggestValuesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestValuesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuggestValuesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuggestValuesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestValuesResp.Merge(m, src)
}
func (m *SuggestValuesResp) XXX_Size() int {
	return m.Size()
}
func (m *SuggestValuesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestValuesResp.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestValuesResp proto.InternalMessageInfo

func (m *SuggestValuesResp) GetItems() []*SuggestedItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*SuggestValuesReq)(nil), "ves.io.schema.dns_load_balancer.SuggestValuesReq")
	golang_proto.RegisterType((*SuggestValuesReq)(nil), "ves.io.schema.dns_load_balancer.SuggestValuesReq")
	proto.RegisterType((*SuggestedItem)(nil), "ves.io.schema.dns_load_balancer.SuggestedItem")
	golang_proto.RegisterType((*SuggestedItem)(nil), "ves.io.schema.dns_load_balancer.SuggestedItem")
	proto.RegisterType((*SuggestValuesResp)(nil), "ves.io.schema.dns_load_balancer.SuggestValuesResp")
	golang_proto.RegisterType((*SuggestValuesResp)(nil), "ves.io.schema.dns_load_balancer.SuggestValuesResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_load_balancer/public_customapi.proto", fileDescriptor_e168a2f9e9350934)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_load_balancer/public_customapi.proto", fileDescriptor_e168a2f9e9350934)
}

var fileDescriptor_e168a2f9e9350934 = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0xce, 0x24, 0x2d, 0x6a, 0x26, 0x05, 0x15, 0x8b, 0x85, 0x09, 0xc5, 0x8d, 0x82, 0x84, 0xc2,
	0x8f, 0x6d, 0x11, 0x54, 0x90, 0xd8, 0x35, 0xb0, 0xa0, 0x6c, 0xa8, 0xcc, 0x8f, 0x04, 0x1b, 0x6b,
	0x6c, 0x1f, 0x3b, 0x03, 0xb6, 0xc7, 0x9d, 0x19, 0xa7, 0x0d, 0xab, 0xaa, 0x2f, 0x00, 0x12, 0x2f,
	0xc0, 0x12, 0x36, 0xac, 0x11, 0xdd, 0x94, 0x15, 0x5d, 0xa1, 0x0a, 0x36, 0x5d, 0x52, 0xe7, 0x2e,
	0x6e, 0x77, 0x7d, 0x84, 0xab, 0x8c, 0xdd, 0x34, 0x49, 0x6f, 0xd5, 0x7b, 0x77, 0x33, 0xf3, 0xfd,
	0x9c, 0x33, 0x67, 0xce, 0x19, 0xfc, 0xc1, 0x08, 0x84, 0x45, 0x99, 0x2d, 0xfc, 0x21, 0x24, 0xc4,
	0x0e, 0x52, 0xe1, 0xc6, 0x8c, 0x04, 0xae, 0x47, 0x62, 0x92, 0xfa, 0xc0, 0xed, 0x2c, 0xf7, 0x62,
	0xea, 0xbb, 0x7e, 0x2e, 0x24, 0x4b, 0x48, 0x46, 0xad, 0x8c, 0x33, 0xc9, 0xb4, 0xad, 0x52, 0x67,
	0x95, 0x3a, 0xeb, 0x8e, 0xae, 0x6d, 0x46, 0x54, 0x0e, 0x73, 0xcf, 0xf2, 0x59, 0x62, 0x47, 0x2c,
	0x62, 0xb6, 0xd2, 0x79, 0x79, 0xa8, 0x76, 0x6a, 0xa3, 0x56, 0xa5, 0x5f, 0x7b, 0x33, 0x62, 0x2c,
	0x8a, 0xc1, 0x26, 0x19, 0xb5, 0x49, 0x9a, 0x32, 0x49, 0x24, 0x65, 0xa9, 0xa8, 0xd0, 0x57, 0x2b,
	0x74, 0xe6, 0x41, 0xd2, 0xf1, 0x92, 0x70, 0x06, 0x09, 0xc9, 0x73, 0x5f, 0x56, 0xe8, 0x1b, 0x77,
	0xaf, 0xf7, 0x03, 0x4b, 0xc1, 0x66, 0xde, 0x77, 0x30, 0x23, 0x75, 0xef, 0x21, 0xc9, 0x71, 0x06,
	0x37, 0x19, 0xbc, 0xb6, 0xc8, 0x61, 0xd9, 0x42, 0x7a, 0x8b, 0xe0, 0xbc, 0x6e, 0x73, 0x11, 0x1a,
	0x91, 0x98, 0x06, 0x44, 0xc2, 0xd3, 0x23, 0x8f, 0x40, 0x40, 0x3a, 0x5a, 0x32, 0xef, 0x2c, 0x71,
	0x28, 0x1c, 0xb8, 0x8b, 0x8c, 0xad, 0xbb, 0x0c, 0x31, 0x9f, 0x44, 0xf7, 0x2f, 0x84, 0x37, 0xbe,
	0xc8, 0xa3, 0x08, 0x84, 0xfc, 0x9a, 0xc4, 0x39, 0x08, 0x07, 0xf6, 0xb5, 0x4d, 0xdc, 0x4c, 0x49,
	0x02, 0x22, 0x23, 0x3e, 0xe8, 0xa8, 0x83, 0x7a, 0x4d, 0xe7, 0xf6, 0x40, 0x7b, 0x0b, 0xe3, 0x90,
	0x42, 0x1c, 0xb8, 0x19, 0x91, 0x43, 0xbd, 0x3e, 0x85, 0x07, 0xf8, 0xcf, 0xab, 0xd3, 0xc6, 0x2a,
	0x6f, 0xe8, 0x47, 0x6b, 0x4e, 0x53, 0xa1, 0x7b, 0x44, 0x0e, 0xb5, 0x0f, 0xf1, 0x3a, 0x87, 0xfd,
	0x1c, 0x84, 0x74, 0x3d, 0x16, 0x8c, 0xf5, 0x46, 0x07, 0xf5, 0x5a, 0xfd, 0x57, 0xac, 0xf2, 0x61,
	0xac, 0x9b, 0x87, 0xb1, 0x76, 0xd2, 0xb1, 0xd3, 0xaa, 0x98, 0x03, 0x16, 0x8c, 0xb5, 0x77, 0x70,
	0x2b, 0x21, 0xd2, 0x1f, 0xba, 0xa3, 0x69, 0x52, 0xfa, 0xca, 0x52, 0x90, 0xba, 0x83, 0x15, 0xac,
	0x52, 0xee, 0xfe, 0x86, 0xf0, 0x8b, 0xd5, 0x1d, 0x20, 0xd8, 0x95, 0x90, 0x68, 0xaf, 0xe3, 0xa6,
	0x90, 0xbc, 0x12, 0x4f, 0x83, 0x36, 0x3f, 0xad, 0x39, 0x6b, 0x42, 0x72, 0x25, 0xd0, 0x76, 0x70,
	0x93, 0x43, 0x38, 0xe7, 0xdd, 0xea, 0x77, 0xad, 0xc5, 0xae, 0x55, 0x95, 0xb2, 0x3e, 0x57, 0xbd,
	0xe0, 0x40, 0xf8, 0xe5, 0x38, 0x83, 0xa9, 0x05, 0x87, 0xb0, 0xb4, 0xe8, 0xe0, 0x56, 0x00, 0xc2,
	0xe7, 0x54, 0x95, 0xbb, 0xac, 0x82, 0x33, 0x7f, 0x34, 0x78, 0x09, 0xaf, 0xab, 0x00, 0xae, 0x3f,
	0x64, 0xd4, 0x87, 0xcf, 0x56, 0xd6, 0xd0, 0x46, 0xbd, 0xfb, 0x0d, 0x7e, 0x79, 0xa9, 0xdc, 0x22,
	0xd3, 0x3e, 0xc1, 0xab, 0x54, 0x42, 0x22, 0x74, 0xd4, 0x69, 0xf4, 0x5a, 0x7d, 0xcb, 0x7a, 0x60,
	0x82, 0xac, 0x85, 0xdb, 0x3a, 0xa5, 0xb8, 0xff, 0x7b, 0x1d, 0x37, 0x3f, 0x56, 0xb3, 0xb8, 0xb3,
	0xb7, 0xab, 0x5d, 0xdd, 0x16, 0xa5, 0x8c, 0xa4, 0xbd, 0xf7, 0xac, 0xb6, 0xb3, 0x46, 0x68, 0xf7,
	0x9f, 0x57, 0x22, 0xb2, 0xee, 0xfe, 0xd9, 0x1f, 0x75, 0x54, 0xfc, 0xad, 0x4f, 0xbf, 0x0f, 0x93,
	0x32, 0x93, 0xa6, 0x21, 0x27, 0xe5, 0xe4, 0xe5, 0x1c, 0xcc, 0x03, 0x4e, 0x25, 0xbc, 0xdb, 0x09,
	0xb7, 0x0f, 0x7d, 0x33, 0x48, 0x85, 0x29, 0x24, 0x49, 0x03, 0xc2, 0x03, 0x33, 0x61, 0x29, 0x95,
	0x8c, 0x1f, 0xff, 0xf7, 0xe8, 0xe7, 0xba, 0xd9, 0xed, 0x55, 0xbf, 0x8b, 0x3d, 0xeb, 0x3b, 0x61,
	0x8b, 0xb1, 0x90, 0x90, 0xd8, 0xa2, 0x0c, 0x69, 0xaa, 0xea, 0x8a, 0x8f, 0xd0, 0xdb, 0xed, 0xed,
	0xd3, 0x13, 0xd4, 0xf8, 0xf7, 0x04, 0xbd, 0xf9, 0x50, 0xb6, 0xe5, 0x7b, 0x1e, 0xff, 0xa3, 0x37,
	0x7e, 0x41, 0x68, 0xf0, 0x23, 0x3a, 0xbf, 0x34, 0x6a, 0x17, 0x97, 0x46, 0xed, 0xfa, 0xd2, 0x40,
	0x47, 0x85, 0x81, 0x7e, 0x2d, 0x0c, 0x74, 0x56, 0x18, 0xe8, 0xbc, 0x30, 0xd0, 0xff, 0x85, 0x81,
	0x1e, 0x17, 0x46, 0xed, 0xba, 0x30, 0xd0, 0x4f, 0x13, 0xa3, 0x76, 0x3a, 0x31, 0xd0, 0xf9, 0xc4,
	0xa8, 0x5d, 0x4c, 0x8c, 0xda, 0xb7, 0x5f, 0x45, 0x2c, 0xfb, 0x3e, 0xb2, 0x46, 0x2c, 0x96, 0xc0,
	0x39, 0xb1, 0x72, 0x61, 0xab, 0x45, 0xc8, 0x78, 0x62, 0x66, 0x9c, 0x8d, 0x68, 0x00, 0xdc, 0xbc,
	0x81, 0xed, 0xcc, 0x8b, 0x98, 0x0d, 0x87, 0xb2, 0x1a, 0xc3, 0xfb, 0x7e, 0x54, 0xef, 0x05, 0x35,
	0x11, 0xef, 0x3f, 0x09, 0x00, 0x00, 0xff, 0xff, 0x92, 0x1a, 0xd1, 0xcc, 0x7b, 0x05, 0x00, 0x00,
}

func (this *SuggestValuesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestValuesReq)
	if !ok {
		that2, ok := that.(SuggestValuesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.FieldPath != that1.FieldPath {
		return false
	}
	if !this.RequestBody.Equal(that1.RequestBody) {
		return false
	}
	if this.MatchValue != that1.MatchValue {
		return false
	}
	return true
}
func (this *SuggestedItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestedItem)
	if !ok {
		that2, ok := that.(SuggestedItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ValueChoice == nil {
		if this.ValueChoice != nil {
			return false
		}
	} else if this.ValueChoice == nil {
		return false
	} else if !this.ValueChoice.Equal(that1.ValueChoice) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *SuggestedItem_StrValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestedItem_StrValue)
	if !ok {
		that2, ok := that.(SuggestedItem_StrValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StrValue != that1.StrValue {
		return false
	}
	return true
}
func (this *SuggestedItem_RefValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestedItem_RefValue)
	if !ok {
		that2, ok := that.(SuggestedItem_RefValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RefValue.Equal(that1.RefValue) {
		return false
	}
	return true
}
func (this *SuggestValuesResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestValuesResp)
	if !ok {
		that2, ok := that.(SuggestValuesResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *SuggestValuesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dns_load_balancer.SuggestValuesReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "FieldPath: "+fmt.Sprintf("%#v", this.FieldPath)+",\n")
	if this.RequestBody != nil {
		s = append(s, "RequestBody: "+fmt.Sprintf("%#v", this.RequestBody)+",\n")
	}
	s = append(s, "MatchValue: "+fmt.Sprintf("%#v", this.MatchValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuggestedItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_load_balancer.SuggestedItem{")
	if this.ValueChoice != nil {
		s = append(s, "ValueChoice: "+fmt.Sprintf("%#v", this.ValueChoice)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuggestedItem_StrValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_load_balancer.SuggestedItem_StrValue{` +
		`StrValue:` + fmt.Sprintf("%#v", this.StrValue) + `}`}, ", ")
	return s
}
func (this *SuggestedItem_RefValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_load_balancer.SuggestedItem_RefValue{` +
		`RefValue:` + fmt.Sprintf("%#v", this.RefValue) + `}`}, ", ")
	return s
}
func (this *SuggestValuesResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_load_balancer.SuggestValuesResp{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// SuggestValues
	//
	// x-displayName: "Suggest Values"
	// SuggestValues returns suggested values for the specified field in the given Create/Replace/Custom request.
	SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error) {
	out := new(SuggestValuesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_load_balancer.CustomAPI/SuggestValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// SuggestValues
	//
	// x-displayName: "Suggest Values"
	// SuggestValues returns suggested values for the specified field in the given Create/Replace/Custom request.
	SuggestValues(context.Context, *SuggestValuesReq) (*SuggestValuesResp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) SuggestValues(ctx context.Context, req *SuggestValuesReq) (*SuggestValuesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestValues not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_SuggestValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SuggestValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_load_balancer.CustomAPI/SuggestValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SuggestValues(ctx, req.(*SuggestValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.dns_load_balancer.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestValues",
			Handler:    _CustomAPI_SuggestValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/dns_load_balancer/public_customapi.proto",
}

func (m *SuggestValuesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestValuesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestValuesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchValue) > 0 {
		i -= len(m.MatchValue)
		copy(dAtA[i:], m.MatchValue)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.MatchValue)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequestBody != nil {
		{
			size, err := m.RequestBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FieldPath) > 0 {
		i -= len(m.FieldPath)
		copy(dAtA[i:], m.FieldPath)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.FieldPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuggestedItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestedItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestedItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueChoice != nil {
		{
			size := m.ValueChoice.Size()
			i -= size
			if _, err := m.ValueChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SuggestedItem_StrValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestedItem_StrValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StrValue)
	copy(dAtA[i:], m.StrValue)
	i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.StrValue)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *SuggestedItem_RefValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestedItem_RefValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RefValue != nil {
		{
			size, err := m.RefValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SuggestValuesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestValuesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestValuesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SuggestValuesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.FieldPath)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.RequestBody != nil {
		l = m.RequestBody.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.MatchValue)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *SuggestedItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ValueChoice != nil {
		n += m.ValueChoice.Size()
	}
	return n
}

func (m *SuggestedItem_StrValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrValue)
	n += 1 + l + sovPublicCustomapi(uint64(l))
	return n
}
func (m *SuggestedItem_RefValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefValue != nil {
		l = m.RefValue.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *SuggestValuesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SuggestValuesReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuggestValuesReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`FieldPath:` + fmt.Sprintf("%v", this.FieldPath) + `,`,
		`RequestBody:` + strings.Replace(fmt.Sprintf("%v", this.RequestBody), "Any", "types.Any", 1) + `,`,
		`MatchValue:` + fmt.Sprintf("%v", this.MatchValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuggestedItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuggestedItem{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`ValueChoice:` + fmt.Sprintf("%v", this.ValueChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuggestedItem_StrValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuggestedItem_StrValue{`,
		`StrValue:` + fmt.Sprintf("%v", this.StrValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuggestedItem_RefValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuggestedItem_RefValue{`,
		`RefValue:` + strings.Replace(fmt.Sprintf("%v", this.RefValue), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuggestValuesResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*SuggestedItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "SuggestedItem", "SuggestedItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&SuggestValuesResp{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SuggestValuesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestValuesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestValuesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestBody == nil {
				m.RequestBody = &types.Any{}
			}
			if err := m.RequestBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestedItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestedItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestedItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueChoice = &SuggestedItem_StrValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueChoice = &SuggestedItem_RefValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestValuesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestValuesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestValuesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SuggestedItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

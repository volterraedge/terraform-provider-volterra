// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package dns_load_balancer

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomDataAPI GRPC Client satisfying server.CustomClient
type CustomDataAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomDataAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomDataAPIGrpcClient) doRPCDNSLBHealthStatus(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DNSLBHealthStatusRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_load_balancer.DNSLBHealthStatusRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DNSLBHealthStatus(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataAPIGrpcClient) doRPCDNSLBHealthStatusList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DNSLBHealthStatusListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_load_balancer.DNSLBHealthStatusListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DNSLBHealthStatusList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataAPIGrpcClient) doRPCDNSLBPoolHealthStatus(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DNSLBPoolHealthStatusRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DNSLBPoolHealthStatus(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomDataAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomDataAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomDataAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["DNSLBHealthStatus"] = ccl.doRPCDNSLBHealthStatus

	rpcFns["DNSLBHealthStatusList"] = ccl.doRPCDNSLBHealthStatusList

	rpcFns["DNSLBPoolHealthStatus"] = ccl.doRPCDNSLBPoolHealthStatus

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomDataAPI REST Client satisfying server.CustomClient
type CustomDataAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomDataAPIRestClient) doRPCDNSLBHealthStatus(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DNSLBHealthStatusRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_load_balancer.DNSLBHealthStatusRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &DNSLBHealthStatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_load_balancer.DNSLBHealthStatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataAPIRestClient) doRPCDNSLBHealthStatusList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DNSLBHealthStatusListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_load_balancer.DNSLBHealthStatusListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &DNSLBHealthStatusListResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_load_balancer.DNSLBHealthStatusListResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataAPIRestClient) doRPCDNSLBPoolHealthStatus(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DNSLBPoolHealthStatusRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("dns_lb_name", fmt.Sprintf("%v", req.DnsLbName))
		q.Add("dns_lb_pool_name", fmt.Sprintf("%v", req.DnsLbPoolName))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &DNSLBPoolHealthStatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomDataAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomDataAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["DNSLBHealthStatus"] = ccl.doRPCDNSLBHealthStatus

	rpcFns["DNSLBHealthStatusList"] = ccl.doRPCDNSLBHealthStatusList

	rpcFns["DNSLBPoolHealthStatus"] = ccl.doRPCDNSLBPoolHealthStatus

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customDataAPIInprocClient

// INPROC Client (satisfying CustomDataAPIClient interface)
type customDataAPIInprocClient struct {
	CustomDataAPIServer
}

func (c *customDataAPIInprocClient) DNSLBHealthStatus(ctx context.Context, in *DNSLBHealthStatusRequest, opts ...grpc.CallOption) (*DNSLBHealthStatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatus")
	return c.CustomDataAPIServer.DNSLBHealthStatus(ctx, in)
}
func (c *customDataAPIInprocClient) DNSLBHealthStatusList(ctx context.Context, in *DNSLBHealthStatusListRequest, opts ...grpc.CallOption) (*DNSLBHealthStatusListResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatusList")
	return c.CustomDataAPIServer.DNSLBHealthStatusList(ctx, in)
}
func (c *customDataAPIInprocClient) DNSLBPoolHealthStatus(ctx context.Context, in *DNSLBPoolHealthStatusRequest, opts ...grpc.CallOption) (*DNSLBPoolHealthStatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBPoolHealthStatus")
	return c.CustomDataAPIServer.DNSLBPoolHealthStatus(ctx, in)
}

func NewCustomDataAPIInprocClient(svc svcfw.Service) CustomDataAPIClient {
	return &customDataAPIInprocClient{CustomDataAPIServer: NewCustomDataAPIServer(svc)}
}

// RegisterGwCustomDataAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomDataAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomDataAPIHandlerClient(ctx, mux, NewCustomDataAPIInprocClient(s))
}

// Create customDataAPISrv

// SERVER (satisfying CustomDataAPIServer interface)
type customDataAPISrv struct {
	svc svcfw.Service
}

func (s *customDataAPISrv) DNSLBHealthStatus(ctx context.Context, in *DNSLBHealthStatusRequest) (*DNSLBHealthStatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_load_balancer.CustomDataAPI")
	cah, ok := ah.(CustomDataAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataAPIServer", ah)
	}

	var (
		rsp *DNSLBHealthStatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_load_balancer.DNSLBHealthStatusRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataAPI.DNSLBHealthStatus' operation on 'dns_load_balancer'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatus"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DNSLBHealthStatus(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_load_balancer.DNSLBHealthStatusResponse", rsp)...)

	return rsp, nil
}
func (s *customDataAPISrv) DNSLBHealthStatusList(ctx context.Context, in *DNSLBHealthStatusListRequest) (*DNSLBHealthStatusListResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_load_balancer.CustomDataAPI")
	cah, ok := ah.(CustomDataAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataAPIServer", ah)
	}

	var (
		rsp *DNSLBHealthStatusListResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataAPI.DNSLBHealthStatusList' operation on 'dns_load_balancer'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatusList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DNSLBHealthStatusList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListResponse", rsp)...)

	return rsp, nil
}
func (s *customDataAPISrv) DNSLBPoolHealthStatus(ctx context.Context, in *DNSLBPoolHealthStatusRequest) (*DNSLBPoolHealthStatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_load_balancer.CustomDataAPI")
	cah, ok := ah.(CustomDataAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataAPIServer", ah)
	}

	var (
		rsp *DNSLBPoolHealthStatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataAPI.DNSLBPoolHealthStatus' operation on 'dns_load_balancer'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBPoolHealthStatus"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DNSLBPoolHealthStatus(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusResponse", rsp)...)

	return rsp, nil
}

func NewCustomDataAPIServer(svc svcfw.Service) CustomDataAPIServer {
	return &customDataAPISrv{svc: svc}
}

var CustomDataAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "DNS Load Balancer",
        "description": "APIs to get monitoring data for DNS Load Balancer",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/dns_load_balancers/health_status": {
            "get": {
                "summary": "DNS Load Balancer Health Status List",
                "description": "Get Health Status of all DNS Load Balancers in a namespace",
                "operationId": "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatusList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_load_balancerDNSLBHealthStatusListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of DNS LB health status",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_load_balancer-customdataapi-dnslbhealthstatuslist"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatusList"
            },
            "x-displayname": "DNS Load Balancer Custom Data API",
            "x-ves-proto-service": "ves.io.schema.dns_load_balancer.CustomDataAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/dns_load_balancers/{dns_lb_name}/dns_lb_pools/{dns_lb_pool_name}/health_status": {
            "get": {
                "summary": "DNS Load Balancer Pool Health Status",
                "description": "Get DNS Load Balancer Pool Health Status",
                "operationId": "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBPoolHealthStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_load_balancerDNSLBPoolHealthStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"ns1\"\nNamespace in which the DNS Load Balancer Pool is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "dns_lb_name",
                        "description": "DNS Load Balancer Name\n\nx-example: \"dns_lb1\"\nName of the DNS Load Balancer",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "DNS Load Balancer Name"
                    },
                    {
                        "name": "dns_lb_pool_name",
                        "description": "DNS Load Balancer Pool Name\n\nx-example: \"dns_lb_pool1\"\nName of the DNS Load Balancer Pool",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "DNS Load Balancer Pool Name"
                    }
                ],
                "tags": [
                    "CustomDataAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_load_balancer-customdataapi-dnslbpoolhealthstatus"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBPoolHealthStatus"
            },
            "x-displayname": "DNS Load Balancer Custom Data API",
            "x-ves-proto-service": "ves.io.schema.dns_load_balancer.CustomDataAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/dns_load_balancers/{name}/health_status": {
            "get": {
                "summary": "DNS Load Balancer Health Status",
                "description": "Get DNS Load Balancer Health status",
                "operationId": "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/dns_load_balancerDNSLBHealthStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"ns1\"\nNamespace in which the DNS Load Balancer is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Name\n\nx-example: \"dns_lb1\"\nName of the DNS Load Balancer",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    }
                ],
                "tags": [
                    "CustomDataAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-dns_load_balancer-customdataapi-dnslbhealthstatus"
                },
                "x-ves-proto-rpc": "ves.io.schema.dns_load_balancer.CustomDataAPI.DNSLBHealthStatus"
            },
            "x-displayname": "DNS Load Balancer Custom Data API",
            "x-ves-proto-service": "ves.io.schema.dns_load_balancer.CustomDataAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "dns_load_balancerDNSLBHealthStatusListResponse": {
            "type": "object",
            "description": "Response for DNS Load Balancer Health Status List Request",
            "title": "DNSLBHealthStatusListResponse",
            "x-displayname": "DNS Load Balancer Health Status List Response",
            "x-ves-proto-message": "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListResponse",
            "properties": {
                "items": {
                    "type": "array",
                    "description": " Collection of DNS Load Balancer Health status",
                    "title": "Items",
                    "items": {
                        "$ref": "#/definitions/dns_load_balancerDNSLBHealthStatusListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "dns_load_balancerDNSLBHealthStatusListResponseItem": {
            "type": "object",
            "description": "Individual item in a collection of DNS Load Balancer",
            "title": "DNSLBHealthStatusListResponseItem",
            "x-displayname": "DNS Load Balancer Health Status List Item",
            "x-ves-proto-message": "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListResponseItem",
            "properties": {
                "dns_lb_pools_status_summary": {
                    "type": "array",
                    "description": " Summary of DNS Load Balancer Pools by Health Status",
                    "title": "DNS Load Balancer Pools Status Summary",
                    "items": {
                        "$ref": "#/definitions/dns_load_balancerHealthStatusSummary"
                    },
                    "x-displayname": "DNS Load Balancer Pools Status Summary"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the DNS Load Balancer\n\nExample: - \"dns_lb1\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "dns_lb1"
                },
                "status": {
                    "type": "array",
                    "description": " Health Status of DNS Load Balancer",
                    "title": "Status",
                    "items": {
                        "$ref": "#/definitions/schemaMetricValue"
                    },
                    "x-displayname": "Status"
                }
            }
        },
        "dns_load_balancerDNSLBHealthStatusResponse": {
            "type": "object",
            "description": "Response for DNS Load Balancer Health Status Request",
            "title": "DNSLBHealthStatusResponse",
            "x-displayname": "DNS Load Balancer Health Status Response",
            "x-ves-proto-message": "ves.io.schema.dns_load_balancer.DNSLBHealthStatusResponse",
            "properties": {
                "dns_lb_pool_items": {
                    "type": "array",
                    "description": " Collection of DNS Load Balancer Pools",
                    "title": "DNS Load Balancer Pool Items",
                    "items": {
                        "$ref": "#/definitions/dns_load_balancerDNSLBPoolHealthStatusListResponseItem"
                    },
                    "x-displayname": "DNS Load Balancer Pool Items"
                },
                "status": {
                    "type": "array",
                    "description": " Health Status of DNS Load Balancer",
                    "title": "Status",
                    "items": {
                        "$ref": "#/definitions/schemaMetricValue"
                    },
                    "x-displayname": "Status"
                }
            }
        },
        "dns_load_balancerDNSLBPoolHealthStatusListResponseItem": {
            "type": "object",
            "description": "Individual item in a collection of DNS Load Balancer Pool",
            "title": "DNSLBPoolHealthStatusListResponseItem",
            "x-displayname": "DNS Load Balancer Pool Health Status List Item",
            "x-ves-proto-message": "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusListResponseItem",
            "properties": {
                "dns_lb_pool_members_status_summary": {
                    "type": "array",
                    "description": " Summary of DNS Load Balancer Pool Members by Health Status ",
                    "title": "DNS Load Balancer Pool Members Status Summary",
                    "items": {
                        "$ref": "#/definitions/dns_load_balancerHealthStatusSummary"
                    },
                    "x-displayname": "DNS Load Balancer Pool Members Status Summary"
                },
                "health_check_type": {
                    "type": "string",
                    "description": " Health Check Type associated with the DNS Load Balancer Pool\n\nExample: - \"HTTP\"-",
                    "title": "Health Check Type",
                    "x-displayname": "Health Check Type",
                    "x-ves-example": "HTTP"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the DNS Load Balancer Pool\n\nExample: - \"dns_lb_pool1\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "dns_lb_pool1"
                },
                "status": {
                    "type": "array",
                    "description": " Health Status of DNS Load Balancer Pool",
                    "title": "Status",
                    "items": {
                        "$ref": "#/definitions/schemaMetricValue"
                    },
                    "x-displayname": "Status"
                }
            }
        },
        "dns_load_balancerDNSLBPoolHealthStatusResponse": {
            "type": "object",
            "description": "Response for DNS Load Balancer Pool Health Status Request",
            "title": "DNSLBPoolHealthStatusResponse",
            "x-displayname": "DNS Load Balancer Pool Health Status Response",
            "x-ves-proto-message": "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusResponse",
            "properties": {
                "dns_lb_pool_member_items": {
                    "type": "array",
                    "description": " Collection of DNS Load Balancer Pool Members",
                    "title": "DNS Load Balancer Pool Members",
                    "items": {
                        "$ref": "#/definitions/dns_load_balancerDNSLBPoolMemberHealthStatusListResponseItem"
                    },
                    "x-displayname": "DNS Load Balancer Pool Member Items"
                },
                "status": {
                    "type": "array",
                    "description": " Health Status of DNS Load Balancer Pool",
                    "title": "Status",
                    "items": {
                        "$ref": "#/definitions/schemaMetricValue"
                    },
                    "x-displayname": "Status"
                }
            }
        },
        "dns_load_balancerDNSLBPoolMemberHealthStatusListResponseItem": {
            "type": "object",
            "description": "Individual item in a collection of DNS Load Balancer Pool Member",
            "title": "DNSLBPoolMemberHealthStatusListResponseItem",
            "x-displayname": "DNS Load Balancer Pool Member Health Status List Item",
            "x-ves-proto-message": "ves.io.schema.dns_load_balancer.DNSLBPoolMemberHealthStatusListResponseItem",
            "properties": {
                "error_code": {
                    "description": " Error Code of DNS Load Balancer Pool Member health check failure\n\nExample: - \"2\"-",
                    "title": "Error Code",
                    "$ref": "#/definitions/schemadns_load_balancerErrorCode",
                    "x-displayname": "Error Code",
                    "x-ves-example": "2"
                },
                "error_description": {
                    "type": "string",
                    "description": " Error Description of DNS Load Balancer Pool Member health check failure\n\nExample: - \"received string mismatch\"-",
                    "title": "Error Description",
                    "x-displayname": "Error Description",
                    "x-ves-example": "received string mismatch"
                },
                "health_check_type": {
                    "type": "string",
                    "description": " Health Check Type associated with the Pool Member\n\nExample: - \"HTTP\"-",
                    "title": "Health Check Type",
                    "x-displayname": "Health Check Type",
                    "x-ves-example": "HTTP"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the DNS Load Balancer Pool Member\n\nExample: - \"dns_lb_pool_member1\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "dns_lb_pool_member1"
                },
                "status": {
                    "type": "array",
                    "description": " Health Status of DNS Load Balancer Pool Member",
                    "title": "Status",
                    "items": {
                        "$ref": "#/definitions/schemaMetricValue"
                    },
                    "x-displayname": "Status"
                }
            }
        },
        "dns_load_balancerHealthStatus": {
            "type": "string",
            "description": "Enumerates Health Status of DNS LB and associated objects\n\n - HEALTH_STATUS_UNHEALTHY: Unhealthy\n\n - HEALTH_STATUS_DEGRADED: Degraded\n\n - HEALTH_STATUS_HEALTHY: Healthy\n\n - HEALTH_STATUS_DISABLED: Disabled\n",
            "title": "HealthStatus",
            "enum": [
                "HEALTH_STATUS_UNHEALTHY",
                "HEALTH_STATUS_DEGRADED",
                "HEALTH_STATUS_HEALTHY",
                "HEALTH_STATUS_DISABLED"
            ],
            "default": "HEALTH_STATUS_UNHEALTHY",
            "x-displayname": "Health Status",
            "x-ves-proto-enum": "ves.io.schema.dns_load_balancer.HealthStatus"
        },
        "dns_load_balancerHealthStatusSummary": {
            "type": "object",
            "description": "Health Status Summary",
            "title": "HealthStatusSummary",
            "x-displayname": "Health Status Summary",
            "x-ves-proto-message": "ves.io.schema.dns_load_balancer.HealthStatusSummary",
            "properties": {
                "count": {
                    "type": "array",
                    "description": " Number of objects",
                    "title": "Count",
                    "items": {
                        "$ref": "#/definitions/schemaMetricValue"
                    },
                    "x-displayname": "Count"
                },
                "status": {
                    "description": " Health Status",
                    "title": "Status",
                    "$ref": "#/definitions/dns_load_balancerHealthStatus",
                    "x-displayname": "Status"
                }
            }
        },
        "schemaMetricValue": {
            "type": "object",
            "description": "Metric data contains timestamp and the value.",
            "title": "Metric Value",
            "x-displayname": "Metric Value",
            "x-ves-proto-message": "ves.io.schema.MetricValue",
            "properties": {
                "timestamp": {
                    "type": "number",
                    "description": " timestamp\n\nExample: - \"1570007981\"-",
                    "title": "Timestamp",
                    "format": "double",
                    "x-displayname": "Timestamp",
                    "x-ves-example": "1570007981"
                },
                "trend_value": {
                    "description": " trend value for the metric\n\nExample: - \"100.000000\"-",
                    "title": "Trend value",
                    "$ref": "#/definitions/schemaTrendValue",
                    "x-displayname": "Trend Value",
                    "x-ves-example": "100.000000"
                },
                "value": {
                    "type": "string",
                    "description": "\n\nExample: - \"15\"-",
                    "title": "Value",
                    "x-displayname": "Value",
                    "x-ves-example": "15"
                }
            }
        },
        "schemaTrendSentiment": {
            "type": "string",
            "description": "trend sentiment\n\nIndicates trend sentiment is positive\nIndicates trend sentiment is negative.",
            "title": "Trend Sentiment",
            "enum": [
                "TREND_SENTIMENT_NONE",
                "TREND_SENTIMENT_POSITIVE",
                "TREND_SENTIMENT_NEGATIVE"
            ],
            "default": "TREND_SENTIMENT_NONE",
            "x-displayname": "Trend Sentiment",
            "x-ves-proto-enum": "ves.io.schema.TrendSentiment"
        },
        "schemaTrendValue": {
            "type": "object",
            "description": "Trend value contains trend value, trend sentiment and trend calculation description and window size.",
            "title": "Trend Value",
            "x-displayname": "Trend Value",
            "x-ves-proto-message": "ves.io.schema.TrendValue",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " description of the method used to calculate trend.\n\nExample: - \"Trend was calculated by comparing the avg of window size intervals of end-start Time and last window time interval\"-",
                    "title": "Description",
                    "x-displayname": "Description",
                    "x-ves-example": "Trend was calculated by comparing the avg of window size intervals of end-start Time and last window time interval"
                },
                "previous_value": {
                    "type": "string",
                    "description": "\n\nExample: - \"200.00\"-",
                    "title": "Previous Value",
                    "x-displayname": "Previous Value",
                    "x-ves-example": "200.00"
                },
                "sentiment": {
                    "description": "\n\nExample: - \"Positive\"-",
                    "title": "Sentiment",
                    "$ref": "#/definitions/schemaTrendSentiment",
                    "x-displayname": "Sentiment",
                    "x-ves-example": "Positive"
                },
                "value": {
                    "type": "string",
                    "description": "\n\nExample: - \"-15\"-",
                    "title": "Value",
                    "x-displayname": "Value",
                    "x-ves-example": "-15"
                }
            }
        },
        "schemadns_load_balancerErrorCode": {
            "type": "string",
            "description": "All possible error-codes for dns load balancer pool member health check failure\n\n - ERR_NIL: No error\n - ERR_UNDEFINED: Undefined error\n - ERR_RECEIVE_STRING_MISMATCH: Received string mismatch error\n - ERR_INTERNAL: Encountered internal error\n - ERR_MSG_SEND: Message send error\n - ERR_TIMEOUT: Waithing response timeout error\n - ERR_MSG_RECEIVE: Message receive error\n - ERR_MAX_RECEIVE_BYTES: Bytes limit exceeded error\n - ERR_ICMP_PING: ICMP ping failure\n - ERR_CONNECTION_REFUSED: Connection refused error\n - ERR_CONNECTION_ABORTED: Connection aborted error\n - ERR_CONNECTION_RESET: Connection reset error\n - ERR_NET_UN_REACHABLE: Network not reachable\n - ERR_HOST_UN_REACHABLE: Host not reachable\n - ERR_UNKNOWN: Unknown error\n - ERR_TLS_HANDSHAKE_FAILURE: TLS handshake failure\n - ERR_CONNECTION_TIMEDOUT: Connection timeout error",
            "title": "ErrorCode",
            "enum": [
                "ERR_NIL",
                "ERR_UNDEFINED",
                "ERR_RECEIVE_STRING_MISMATCH",
                "ERR_INTERNAL",
                "ERR_MSG_SEND",
                "ERR_TIMEOUT",
                "ERR_MSG_RECEIVE",
                "ERR_MAX_RECEIVE_BYTES",
                "ERR_ICMP_PING",
                "ERR_CONNECTION_REFUSED",
                "ERR_CONNECTION_ABORTED",
                "ERR_CONNECTION_RESET",
                "ERR_NET_UN_REACHABLE",
                "ERR_HOST_UN_REACHABLE",
                "ERR_UNKNOWN",
                "ERR_TLS_HANDSHAKE_FAILURE",
                "ERR_CONNECTION_TIMEDOUT"
            ],
            "default": "ERR_NIL",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.dns_load_balancer.ErrorCode"
        }
    },
    "x-displayname": "DNS Load Balancer",
    "x-ves-proto-file": "ves.io/schema/dns_load_balancer/public_custom_data_api.proto"
}`

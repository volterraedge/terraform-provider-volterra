// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package dns_lb_pool

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AAAAPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AAAAPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AAAAPool) DeepCopy() *AAAAPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AAAAPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AAAAPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AAAAPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AAAAPoolValidator().Validate(ctx, m, opts...)
}

type ValidateAAAAPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAAAAPool) MembersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for members")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AddressMember, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AddressMemberValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for members")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AddressMember)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AddressMember, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated members")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items members")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAAAAPool) MaxAnswersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_answers")
	}

	return validatorFn, nil
}

func (v *ValidateAAAAPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AAAAPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AAAAPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["max_answers"]; exists {

		vOpts := append(opts, db.WithValidateField("max_answers"))
		if err := fv(ctx, m.GetMaxAnswers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["members"]; exists {
		vOpts := append(opts, db.WithValidateField("members"))
		if err := fv(ctx, m.GetMembers(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAAAAPoolValidator = func() *ValidateAAAAPool {
	v := &ValidateAAAAPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMembers := v.MembersValidationRuleHandler
	rulesMembers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhMembers(rulesMembers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AAAAPool.members: %s", err)
		panic(errMsg)
	}
	v.FldValidators["members"] = vFn

	vrhMaxAnswers := v.MaxAnswersValidationRuleHandler
	rulesMaxAnswers := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "32",
	}
	vFn, err = vrhMaxAnswers(rulesMaxAnswers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AAAAPool.max_answers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["max_answers"] = vFn

	return v
}()

func AAAAPoolValidator() db.Validator {
	return DefaultAAAAPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *APool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APool) DeepCopy() *APool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APoolValidator().Validate(ctx, m, opts...)
}

func (m *APool) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetHealthCheckChoiceDRefInfo()

}

func (m *APool) GetHealthCheckChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetHealthCheckChoice().(type) {
	case *APool_DisableHealthCheck:

		return nil, nil

	case *APool_HealthCheck:

		vref := m.GetHealthCheck()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dns_lb_health_check.Object")
		dri := db.DRefInfo{
			RefdType:   "dns_lb_health_check.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "health_check",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetHealthCheckChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *APool) GetHealthCheckChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetHealthCheckChoice().(type) {
	case *APool_DisableHealthCheck:

	case *APool_HealthCheck:
		refdType, err := d.TypeForEntryKind("", "", "dns_lb_health_check.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dns_lb_health_check")
		}

		vref := m.GetHealthCheck()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dns_lb_health_check.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateAPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPool) HealthCheckChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAPool) MembersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for members")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AddressMember, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AddressMemberValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for members")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AddressMember)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AddressMember, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated members")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items members")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPool) MaxAnswersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_answers")
	}

	return validatorFn, nil
}

func (v *ValidateAPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check_choice"]; exists {
		val := m.GetHealthCheckChoice()
		vOpts := append(opts,
			db.WithValidateField("health_check_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheckChoice().(type) {
	case *APool_DisableHealthCheck:
		if fv, exists := v.FldValidators["health_check_choice.disable_health_check"]; exists {
			val := m.GetHealthCheckChoice().(*APool_DisableHealthCheck).DisableHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check_choice"),
				db.WithValidateField("disable_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APool_HealthCheck:
		if fv, exists := v.FldValidators["health_check_choice.health_check"]; exists {
			val := m.GetHealthCheckChoice().(*APool_HealthCheck).HealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check_choice"),
				db.WithValidateField("health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["max_answers"]; exists {

		vOpts := append(opts, db.WithValidateField("max_answers"))
		if err := fv(ctx, m.GetMaxAnswers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["members"]; exists {
		vOpts := append(opts, db.WithValidateField("members"))
		if err := fv(ctx, m.GetMembers(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPoolValidator = func() *ValidateAPool {
	v := &ValidateAPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheckChoice := v.HealthCheckChoiceValidationRuleHandler
	rulesHealthCheckChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheckChoice(rulesHealthCheckChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APool.health_check_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_choice"] = vFn

	vrhMembers := v.MembersValidationRuleHandler
	rulesMembers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhMembers(rulesMembers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APool.members: %s", err)
		panic(errMsg)
	}
	v.FldValidators["members"] = vFn

	vrhMaxAnswers := v.MaxAnswersValidationRuleHandler
	rulesMaxAnswers := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "32",
	}
	vFn, err = vrhMaxAnswers(rulesMaxAnswers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APool.max_answers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["max_answers"] = vFn

	v.FldValidators["health_check_choice.health_check"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func APoolValidator() db.Validator {
	return DefaultAPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *AddressMember) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AddressMember) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AddressMember) DeepCopy() *AddressMember {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AddressMember{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AddressMember) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AddressMember) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AddressMemberValidator().Validate(ctx, m, opts...)
}

type ValidateAddressMember struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAddressMember) IpEndpointValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_endpoint")
	}

	return validatorFn, nil
}

func (v *ValidateAddressMember) RatioValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ratio")
	}

	return validatorFn, nil
}

func (v *ValidateAddressMember) PriorityValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for priority")
	}

	return validatorFn, nil
}

func (v *ValidateAddressMember) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateAddressMember) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AddressMember)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AddressMember got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["disable"]; exists {

		vOpts := append(opts, db.WithValidateField("disable"))
		if err := fv(ctx, m.GetDisable(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_endpoint"))
		if err := fv(ctx, m.GetIpEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ratio"]; exists {

		vOpts := append(opts, db.WithValidateField("ratio"))
		if err := fv(ctx, m.GetRatio(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAddressMemberValidator = func() *ValidateAddressMember {
	v := &ValidateAddressMember{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpEndpoint := v.IpEndpointValidationRuleHandler
	rulesIpEndpoint := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.ip":        "true",
	}
	vFn, err = vrhIpEndpoint(rulesIpEndpoint)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AddressMember.ip_endpoint: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_endpoint"] = vFn

	vrhRatio := v.RatioValidationRuleHandler
	rulesRatio := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "100",
	}
	vFn, err = vrhRatio(rulesRatio)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AddressMember.ratio: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ratio"] = vFn

	vrhPriority := v.PriorityValidationRuleHandler
	rulesPriority := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "255",
	}
	vFn, err = vrhPriority(rulesPriority)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AddressMember.priority: %s", err)
		panic(errMsg)
	}
	v.FldValidators["priority"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AddressMember.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func AddressMemberValidator() db.Validator {
	return DefaultAddressMemberValidator
}

// augmented methods on protoc/std generated struct

func (m *CNAMEMember) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CNAMEMember) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CNAMEMember) DeepCopy() *CNAMEMember {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CNAMEMember{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CNAMEMember) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CNAMEMember) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CNAMEMemberValidator().Validate(ctx, m, opts...)
}

type ValidateCNAMEMember struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCNAMEMember) DomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain")
	}

	return validatorFn, nil
}

func (v *ValidateCNAMEMember) RatioValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ratio")
	}

	return validatorFn, nil
}

func (v *ValidateCNAMEMember) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateCNAMEMember) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CNAMEMember)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CNAMEMember got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["final_translation"]; exists {

		vOpts := append(opts, db.WithValidateField("final_translation"))
		if err := fv(ctx, m.GetFinalTranslation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ratio"]; exists {

		vOpts := append(opts, db.WithValidateField("ratio"))
		if err := fv(ctx, m.GetRatio(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCNAMEMemberValidator = func() *ValidateCNAMEMember {
	v := &ValidateCNAMEMember{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomain := v.DomainValidationRuleHandler
	rulesDomain := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.hostname":  "true",
	}
	vFn, err = vrhDomain(rulesDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CNAMEMember.domain: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain"] = vFn

	vrhRatio := v.RatioValidationRuleHandler
	rulesRatio := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "100",
	}
	vFn, err = vrhRatio(rulesRatio)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CNAMEMember.ratio: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ratio"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CNAMEMember.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func CNAMEMemberValidator() db.Validator {
	return DefaultCNAMEMemberValidator
}

// augmented methods on protoc/std generated struct

func (m *CNAMEPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CNAMEPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CNAMEPool) DeepCopy() *CNAMEPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CNAMEPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CNAMEPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CNAMEPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CNAMEPoolValidator().Validate(ctx, m, opts...)
}

type ValidateCNAMEPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCNAMEPool) MembersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for members")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*CNAMEMember, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CNAMEMemberValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for members")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*CNAMEMember)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*CNAMEMember, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated members")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items members")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCNAMEPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CNAMEPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CNAMEPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["members"]; exists {
		vOpts := append(opts, db.WithValidateField("members"))
		if err := fv(ctx, m.GetMembers(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCNAMEPoolValidator = func() *ValidateCNAMEPool {
	v := &ValidateCNAMEPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMembers := v.MembersValidationRuleHandler
	rulesMembers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhMembers(rulesMembers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CNAMEPool.members: %s", err)
		panic(errMsg)
	}
	v.FldValidators["members"] = vFn

	return v
}()

func CNAMEPoolValidator() db.Validator {
	return DefaultCNAMEPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPoolTypeChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetPoolTypeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPoolTypeChoice() == nil {
		return nil, nil
	}
	switch m.GetPoolTypeChoice().(type) {
	case *CreateSpecType_APool:

		drInfos, err := m.GetAPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "a_pool." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_AaaaPool:

		return nil, nil

	case *CreateSpecType_CnamePool:

		return nil, nil

	case *CreateSpecType_MxPool:

		return nil, nil

	case *CreateSpecType_SrvPool:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) PoolTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pool_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TtlChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TtlChoiceTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ttl, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl")
	}
	return oValidatorFn_Ttl, nil
}

func (v *ValidateCreateSpecType) LoadBalancingModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(LoadBalancingMode)
		return int32(i)
	}
	// LoadBalancingMode_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, LoadBalancingMode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for load_balancing_mode")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["load_balancing_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("load_balancing_mode"))
		if err := fv(ctx, m.GetLoadBalancingMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pool_type_choice"]; exists {
		val := m.GetPoolTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("pool_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPoolTypeChoice().(type) {
	case *CreateSpecType_APool:
		if fv, exists := v.FldValidators["pool_type_choice.a_pool"]; exists {
			val := m.GetPoolTypeChoice().(*CreateSpecType_APool).APool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("a_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AaaaPool:
		if fv, exists := v.FldValidators["pool_type_choice.aaaa_pool"]; exists {
			val := m.GetPoolTypeChoice().(*CreateSpecType_AaaaPool).AaaaPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("aaaa_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CnamePool:
		if fv, exists := v.FldValidators["pool_type_choice.cname_pool"]; exists {
			val := m.GetPoolTypeChoice().(*CreateSpecType_CnamePool).CnamePool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("cname_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_MxPool:
		if fv, exists := v.FldValidators["pool_type_choice.mx_pool"]; exists {
			val := m.GetPoolTypeChoice().(*CreateSpecType_MxPool).MxPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("mx_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SrvPool:
		if fv, exists := v.FldValidators["pool_type_choice.srv_pool"]; exists {
			val := m.GetPoolTypeChoice().(*CreateSpecType_SrvPool).SrvPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("srv_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ttl_choice"]; exists {
		val := m.GetTtlChoice()
		vOpts := append(opts,
			db.WithValidateField("ttl_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTtlChoice().(type) {
	case *CreateSpecType_Ttl:
		if fv, exists := v.FldValidators["ttl_choice.ttl"]; exists {
			val := m.GetTtlChoice().(*CreateSpecType_Ttl).Ttl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_UseRrsetTtl:
		if fv, exists := v.FldValidators["ttl_choice.use_rrset_ttl"]; exists {
			val := m.GetTtlChoice().(*CreateSpecType_UseRrsetTtl).UseRrsetTtl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("use_rrset_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPoolTypeChoice := v.PoolTypeChoiceValidationRuleHandler
	rulesPoolTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPoolTypeChoice(rulesPoolTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.pool_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pool_type_choice"] = vFn

	vrhTtlChoice := v.TtlChoiceValidationRuleHandler
	rulesTtlChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTtlChoice(rulesTtlChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ttl_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ttl_choice"] = vFn

	vrhTtlChoiceTtl := v.TtlChoiceTtlValidationRuleHandler
	rulesTtlChoiceTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFnMap["ttl_choice.ttl"], err = vrhTtlChoiceTtl(rulesTtlChoiceTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.ttl_choice_ttl: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ttl_choice.ttl"] = vFnMap["ttl_choice.ttl"]

	vrhLoadBalancingMode := v.LoadBalancingModeValidationRuleHandler
	rulesLoadBalancingMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLoadBalancingMode(rulesLoadBalancingMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.load_balancing_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["load_balancing_mode"] = vFn

	v.FldValidators["pool_type_choice.a_pool"] = APoolValidator().Validate
	v.FldValidators["pool_type_choice.aaaa_pool"] = AAAAPoolValidator().Validate
	v.FldValidators["pool_type_choice.cname_pool"] = CNAMEPoolValidator().Validate
	v.FldValidators["pool_type_choice.mx_pool"] = MXPoolValidator().Validate
	v.FldValidators["pool_type_choice.srv_pool"] = SRVPoolValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDnsLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDnsLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPoolTypeChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPoolTypeChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetDnsLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetDnsLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.dns_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dns_load_balancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "dns_load_balancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dns_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetDnsLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetDnsLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "dns_load_balancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: dns_load_balancer")
	}
	for i, vref := range m.GetDnsLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.dns_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dns_load_balancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetPoolTypeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPoolTypeChoice() == nil {
		return nil, nil
	}
	switch m.GetPoolTypeChoice().(type) {
	case *GetSpecType_APool:

		drInfos, err := m.GetAPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "a_pool." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_AaaaPool:

		return nil, nil

	case *GetSpecType_CnamePool:

		return nil, nil

	case *GetSpecType_MxPool:

		return nil, nil

	case *GetSpecType_SrvPool:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) PoolTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pool_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) TtlChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) TtlChoiceTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ttl, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl")
	}
	return oValidatorFn_Ttl, nil
}

func (v *ValidateGetSpecType) LoadBalancingModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(LoadBalancingMode)
		return int32(i)
	}
	// LoadBalancingMode_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, LoadBalancingMode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for load_balancing_mode")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_load_balancers"))
		for idx, item := range m.GetDnsLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["load_balancing_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("load_balancing_mode"))
		if err := fv(ctx, m.GetLoadBalancingMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pool_type_choice"]; exists {
		val := m.GetPoolTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("pool_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPoolTypeChoice().(type) {
	case *GetSpecType_APool:
		if fv, exists := v.FldValidators["pool_type_choice.a_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GetSpecType_APool).APool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("a_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AaaaPool:
		if fv, exists := v.FldValidators["pool_type_choice.aaaa_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GetSpecType_AaaaPool).AaaaPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("aaaa_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CnamePool:
		if fv, exists := v.FldValidators["pool_type_choice.cname_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GetSpecType_CnamePool).CnamePool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("cname_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_MxPool:
		if fv, exists := v.FldValidators["pool_type_choice.mx_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GetSpecType_MxPool).MxPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("mx_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SrvPool:
		if fv, exists := v.FldValidators["pool_type_choice.srv_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GetSpecType_SrvPool).SrvPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("srv_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ttl_choice"]; exists {
		val := m.GetTtlChoice()
		vOpts := append(opts,
			db.WithValidateField("ttl_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTtlChoice().(type) {
	case *GetSpecType_Ttl:
		if fv, exists := v.FldValidators["ttl_choice.ttl"]; exists {
			val := m.GetTtlChoice().(*GetSpecType_Ttl).Ttl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UseRrsetTtl:
		if fv, exists := v.FldValidators["ttl_choice.use_rrset_ttl"]; exists {
			val := m.GetTtlChoice().(*GetSpecType_UseRrsetTtl).UseRrsetTtl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("use_rrset_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPoolTypeChoice := v.PoolTypeChoiceValidationRuleHandler
	rulesPoolTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPoolTypeChoice(rulesPoolTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.pool_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pool_type_choice"] = vFn

	vrhTtlChoice := v.TtlChoiceValidationRuleHandler
	rulesTtlChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTtlChoice(rulesTtlChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ttl_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ttl_choice"] = vFn

	vrhTtlChoiceTtl := v.TtlChoiceTtlValidationRuleHandler
	rulesTtlChoiceTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFnMap["ttl_choice.ttl"], err = vrhTtlChoiceTtl(rulesTtlChoiceTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.ttl_choice_ttl: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ttl_choice.ttl"] = vFnMap["ttl_choice.ttl"]

	vrhLoadBalancingMode := v.LoadBalancingModeValidationRuleHandler
	rulesLoadBalancingMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLoadBalancingMode(rulesLoadBalancingMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.load_balancing_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["load_balancing_mode"] = vFn

	v.FldValidators["pool_type_choice.a_pool"] = APoolValidator().Validate
	v.FldValidators["pool_type_choice.aaaa_pool"] = AAAAPoolValidator().Validate
	v.FldValidators["pool_type_choice.cname_pool"] = CNAMEPoolValidator().Validate
	v.FldValidators["pool_type_choice.mx_pool"] = MXPoolValidator().Validate
	v.FldValidators["pool_type_choice.srv_pool"] = SRVPoolValidator().Validate

	v.FldValidators["dns_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDnsLoadBalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDnsLoadBalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPoolTypeChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPoolTypeChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetDnsLoadBalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetDnsLoadBalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.dns_load_balancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dns_load_balancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "dns_load_balancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dns_load_balancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetDnsLoadBalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDnsLoadBalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "dns_load_balancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: dns_load_balancer")
	}
	for i, vref := range m.GetDnsLoadBalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.dns_load_balancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dns_load_balancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetPoolTypeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPoolTypeChoice() == nil {
		return nil, nil
	}
	switch m.GetPoolTypeChoice().(type) {
	case *GlobalSpecType_APool:

		drInfos, err := m.GetAPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "a_pool." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_AaaaPool:

		return nil, nil

	case *GlobalSpecType_CnamePool:

		return nil, nil

	case *GlobalSpecType_MxPool:

		return nil, nil

	case *GlobalSpecType_SrvPool:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) PoolTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pool_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TtlChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TtlChoiceTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ttl, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl")
	}
	return oValidatorFn_Ttl, nil
}

func (v *ValidateGlobalSpecType) LoadBalancingModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(LoadBalancingMode)
		return int32(i)
	}
	// LoadBalancingMode_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, LoadBalancingMode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for load_balancing_mode")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_load_balancers"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_load_balancers"))
		for idx, item := range m.GetDnsLoadBalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["load_balancing_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("load_balancing_mode"))
		if err := fv(ctx, m.GetLoadBalancingMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pool_type_choice"]; exists {
		val := m.GetPoolTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("pool_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPoolTypeChoice().(type) {
	case *GlobalSpecType_APool:
		if fv, exists := v.FldValidators["pool_type_choice.a_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GlobalSpecType_APool).APool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("a_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AaaaPool:
		if fv, exists := v.FldValidators["pool_type_choice.aaaa_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GlobalSpecType_AaaaPool).AaaaPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("aaaa_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CnamePool:
		if fv, exists := v.FldValidators["pool_type_choice.cname_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GlobalSpecType_CnamePool).CnamePool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("cname_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_MxPool:
		if fv, exists := v.FldValidators["pool_type_choice.mx_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GlobalSpecType_MxPool).MxPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("mx_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SrvPool:
		if fv, exists := v.FldValidators["pool_type_choice.srv_pool"]; exists {
			val := m.GetPoolTypeChoice().(*GlobalSpecType_SrvPool).SrvPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("srv_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ttl_choice"]; exists {
		val := m.GetTtlChoice()
		vOpts := append(opts,
			db.WithValidateField("ttl_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTtlChoice().(type) {
	case *GlobalSpecType_Ttl:
		if fv, exists := v.FldValidators["ttl_choice.ttl"]; exists {
			val := m.GetTtlChoice().(*GlobalSpecType_Ttl).Ttl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UseRrsetTtl:
		if fv, exists := v.FldValidators["ttl_choice.use_rrset_ttl"]; exists {
			val := m.GetTtlChoice().(*GlobalSpecType_UseRrsetTtl).UseRrsetTtl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("use_rrset_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPoolTypeChoice := v.PoolTypeChoiceValidationRuleHandler
	rulesPoolTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPoolTypeChoice(rulesPoolTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.pool_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pool_type_choice"] = vFn

	vrhTtlChoice := v.TtlChoiceValidationRuleHandler
	rulesTtlChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTtlChoice(rulesTtlChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ttl_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ttl_choice"] = vFn

	vrhTtlChoiceTtl := v.TtlChoiceTtlValidationRuleHandler
	rulesTtlChoiceTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFnMap["ttl_choice.ttl"], err = vrhTtlChoiceTtl(rulesTtlChoiceTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.ttl_choice_ttl: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ttl_choice.ttl"] = vFnMap["ttl_choice.ttl"]

	vrhLoadBalancingMode := v.LoadBalancingModeValidationRuleHandler
	rulesLoadBalancingMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLoadBalancingMode(rulesLoadBalancingMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.load_balancing_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["load_balancing_mode"] = vFn

	v.FldValidators["pool_type_choice.a_pool"] = APoolValidator().Validate
	v.FldValidators["pool_type_choice.aaaa_pool"] = AAAAPoolValidator().Validate
	v.FldValidators["pool_type_choice.cname_pool"] = CNAMEPoolValidator().Validate
	v.FldValidators["pool_type_choice.mx_pool"] = MXPoolValidator().Validate
	v.FldValidators["pool_type_choice.srv_pool"] = SRVPoolValidator().Validate

	v.FldValidators["dns_load_balancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MXMember) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MXMember) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MXMember) DeepCopy() *MXMember {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MXMember{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MXMember) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MXMember) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MXMemberValidator().Validate(ctx, m, opts...)
}

type ValidateMXMember struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMXMember) DomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain")
	}

	return validatorFn, nil
}

func (v *ValidateMXMember) PriorityValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for priority")
	}

	return validatorFn, nil
}

func (v *ValidateMXMember) RatioValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ratio")
	}

	return validatorFn, nil
}

func (v *ValidateMXMember) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateMXMember) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MXMember)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MXMember got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ratio"]; exists {

		vOpts := append(opts, db.WithValidateField("ratio"))
		if err := fv(ctx, m.GetRatio(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMXMemberValidator = func() *ValidateMXMember {
	v := &ValidateMXMember{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomain := v.DomainValidationRuleHandler
	rulesDomain := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.hostname":  "true",
	}
	vFn, err = vrhDomain(rulesDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MXMember.domain: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain"] = vFn

	vrhPriority := v.PriorityValidationRuleHandler
	rulesPriority := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPriority(rulesPriority)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MXMember.priority: %s", err)
		panic(errMsg)
	}
	v.FldValidators["priority"] = vFn

	vrhRatio := v.RatioValidationRuleHandler
	rulesRatio := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "100",
	}
	vFn, err = vrhRatio(rulesRatio)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MXMember.ratio: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ratio"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MXMember.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func MXMemberValidator() db.Validator {
	return DefaultMXMemberValidator
}

// augmented methods on protoc/std generated struct

func (m *MXPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MXPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MXPool) DeepCopy() *MXPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MXPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MXPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MXPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MXPoolValidator().Validate(ctx, m, opts...)
}

type ValidateMXPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMXPool) MembersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for members")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*MXMember, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := MXMemberValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for members")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*MXMember)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*MXMember, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated members")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items members")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMXPool) MaxAnswersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_answers")
	}

	return validatorFn, nil
}

func (v *ValidateMXPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MXPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MXPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["max_answers"]; exists {

		vOpts := append(opts, db.WithValidateField("max_answers"))
		if err := fv(ctx, m.GetMaxAnswers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["members"]; exists {
		vOpts := append(opts, db.WithValidateField("members"))
		if err := fv(ctx, m.GetMembers(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMXPoolValidator = func() *ValidateMXPool {
	v := &ValidateMXPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMembers := v.MembersValidationRuleHandler
	rulesMembers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhMembers(rulesMembers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MXPool.members: %s", err)
		panic(errMsg)
	}
	v.FldValidators["members"] = vFn

	vrhMaxAnswers := v.MaxAnswersValidationRuleHandler
	rulesMaxAnswers := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "32",
	}
	vFn, err = vrhMaxAnswers(rulesMaxAnswers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MXPool.max_answers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["max_answers"] = vFn

	return v
}()

func MXPoolValidator() db.Validator {
	return DefaultMXPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPoolTypeChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetPoolTypeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPoolTypeChoice() == nil {
		return nil, nil
	}
	switch m.GetPoolTypeChoice().(type) {
	case *ReplaceSpecType_APool:

		drInfos, err := m.GetAPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "a_pool." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_AaaaPool:

		return nil, nil

	case *ReplaceSpecType_CnamePool:

		return nil, nil

	case *ReplaceSpecType_MxPool:

		return nil, nil

	case *ReplaceSpecType_SrvPool:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) PoolTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pool_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TtlChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TtlChoiceTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ttl, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl")
	}
	return oValidatorFn_Ttl, nil
}

func (v *ValidateReplaceSpecType) LoadBalancingModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(LoadBalancingMode)
		return int32(i)
	}
	// LoadBalancingMode_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, LoadBalancingMode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for load_balancing_mode")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["load_balancing_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("load_balancing_mode"))
		if err := fv(ctx, m.GetLoadBalancingMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pool_type_choice"]; exists {
		val := m.GetPoolTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("pool_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPoolTypeChoice().(type) {
	case *ReplaceSpecType_APool:
		if fv, exists := v.FldValidators["pool_type_choice.a_pool"]; exists {
			val := m.GetPoolTypeChoice().(*ReplaceSpecType_APool).APool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("a_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AaaaPool:
		if fv, exists := v.FldValidators["pool_type_choice.aaaa_pool"]; exists {
			val := m.GetPoolTypeChoice().(*ReplaceSpecType_AaaaPool).AaaaPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("aaaa_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CnamePool:
		if fv, exists := v.FldValidators["pool_type_choice.cname_pool"]; exists {
			val := m.GetPoolTypeChoice().(*ReplaceSpecType_CnamePool).CnamePool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("cname_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_MxPool:
		if fv, exists := v.FldValidators["pool_type_choice.mx_pool"]; exists {
			val := m.GetPoolTypeChoice().(*ReplaceSpecType_MxPool).MxPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("mx_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SrvPool:
		if fv, exists := v.FldValidators["pool_type_choice.srv_pool"]; exists {
			val := m.GetPoolTypeChoice().(*ReplaceSpecType_SrvPool).SrvPool
			vOpts := append(opts,
				db.WithValidateField("pool_type_choice"),
				db.WithValidateField("srv_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ttl_choice"]; exists {
		val := m.GetTtlChoice()
		vOpts := append(opts,
			db.WithValidateField("ttl_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTtlChoice().(type) {
	case *ReplaceSpecType_Ttl:
		if fv, exists := v.FldValidators["ttl_choice.ttl"]; exists {
			val := m.GetTtlChoice().(*ReplaceSpecType_Ttl).Ttl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_UseRrsetTtl:
		if fv, exists := v.FldValidators["ttl_choice.use_rrset_ttl"]; exists {
			val := m.GetTtlChoice().(*ReplaceSpecType_UseRrsetTtl).UseRrsetTtl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("use_rrset_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPoolTypeChoice := v.PoolTypeChoiceValidationRuleHandler
	rulesPoolTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPoolTypeChoice(rulesPoolTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.pool_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pool_type_choice"] = vFn

	vrhTtlChoice := v.TtlChoiceValidationRuleHandler
	rulesTtlChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTtlChoice(rulesTtlChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ttl_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ttl_choice"] = vFn

	vrhTtlChoiceTtl := v.TtlChoiceTtlValidationRuleHandler
	rulesTtlChoiceTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFnMap["ttl_choice.ttl"], err = vrhTtlChoiceTtl(rulesTtlChoiceTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.ttl_choice_ttl: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ttl_choice.ttl"] = vFnMap["ttl_choice.ttl"]

	vrhLoadBalancingMode := v.LoadBalancingModeValidationRuleHandler
	rulesLoadBalancingMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLoadBalancingMode(rulesLoadBalancingMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.load_balancing_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["load_balancing_mode"] = vFn

	v.FldValidators["pool_type_choice.a_pool"] = APoolValidator().Validate
	v.FldValidators["pool_type_choice.aaaa_pool"] = AAAAPoolValidator().Validate
	v.FldValidators["pool_type_choice.cname_pool"] = CNAMEPoolValidator().Validate
	v.FldValidators["pool_type_choice.mx_pool"] = MXPoolValidator().Validate
	v.FldValidators["pool_type_choice.srv_pool"] = SRVPoolValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SRVMember) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SRVMember) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SRVMember) DeepCopy() *SRVMember {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SRVMember{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SRVMember) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SRVMember) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SRVMemberValidator().Validate(ctx, m, opts...)
}

type ValidateSRVMember struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSRVMember) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateSRVMember) PriorityValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for priority")
	}

	return validatorFn, nil
}

func (v *ValidateSRVMember) WeightValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for weight")
	}

	return validatorFn, nil
}

func (v *ValidateSRVMember) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateSRVMember) TargetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for target")
	}

	return validatorFn, nil
}

func (v *ValidateSRVMember) RatioValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ratio")
	}

	return validatorFn, nil
}

func (v *ValidateSRVMember) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SRVMember)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SRVMember got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["final_translation"]; exists {

		vOpts := append(opts, db.WithValidateField("final_translation"))
		if err := fv(ctx, m.GetFinalTranslation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ratio"]; exists {

		vOpts := append(opts, db.WithValidateField("ratio"))
		if err := fv(ctx, m.GetRatio(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["target"]; exists {

		vOpts := append(opts, db.WithValidateField("target"))
		if err := fv(ctx, m.GetTarget(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["weight"]; exists {

		vOpts := append(opts, db.WithValidateField("weight"))
		if err := fv(ctx, m.GetWeight(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSRVMemberValidator = func() *ValidateSRVMember {
	v := &ValidateSRVMember{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVMember.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhPriority := v.PriorityValidationRuleHandler
	rulesPriority := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "0",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhPriority(rulesPriority)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVMember.priority: %s", err)
		panic(errMsg)
	}
	v.FldValidators["priority"] = vFn

	vrhWeight := v.WeightValidationRuleHandler
	rulesWeight := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "0",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhWeight(rulesWeight)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVMember.weight: %s", err)
		panic(errMsg)
	}
	v.FldValidators["weight"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "0",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVMember.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhTarget := v.TargetValidationRuleHandler
	rulesTarget := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "^[.]$|^([a-zA-Z0-9]{1}[a-zA-Z0-9_-]{0,62})(\\.[a-zA-Z0-9_]{1}[a-zA-Z0-9_-]{0,62})*?(\\.[a-zA-Z]{1}[a-zA-Z0-9]{0,62})\\.?$",
	}
	vFn, err = vrhTarget(rulesTarget)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVMember.target: %s", err)
		panic(errMsg)
	}
	v.FldValidators["target"] = vFn

	vrhRatio := v.RatioValidationRuleHandler
	rulesRatio := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "100",
	}
	vFn, err = vrhRatio(rulesRatio)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVMember.ratio: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ratio"] = vFn

	return v
}()

func SRVMemberValidator() db.Validator {
	return DefaultSRVMemberValidator
}

// augmented methods on protoc/std generated struct

func (m *SRVPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SRVPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SRVPool) DeepCopy() *SRVPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SRVPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SRVPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SRVPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SRVPoolValidator().Validate(ctx, m, opts...)
}

type ValidateSRVPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSRVPool) MembersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for members")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SRVMember, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SRVMemberValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for members")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SRVMember)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SRVMember, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated members")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items members")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSRVPool) MaxAnswersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_answers")
	}

	return validatorFn, nil
}

func (v *ValidateSRVPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SRVPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SRVPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["max_answers"]; exists {

		vOpts := append(opts, db.WithValidateField("max_answers"))
		if err := fv(ctx, m.GetMaxAnswers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["members"]; exists {
		vOpts := append(opts, db.WithValidateField("members"))
		if err := fv(ctx, m.GetMembers(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSRVPoolValidator = func() *ValidateSRVPool {
	v := &ValidateSRVPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMembers := v.MembersValidationRuleHandler
	rulesMembers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhMembers(rulesMembers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVPool.members: %s", err)
		panic(errMsg)
	}
	v.FldValidators["members"] = vFn

	vrhMaxAnswers := v.MaxAnswersValidationRuleHandler
	rulesMaxAnswers := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "32",
	}
	vFn, err = vrhMaxAnswers(rulesMaxAnswers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVPool.max_answers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["max_answers"] = vFn

	return v
}()

func SRVPoolValidator() db.Validator {
	return DefaultSRVPoolValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetPoolTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PoolTypeChoice.(type) {
	case nil:
		o.PoolTypeChoice = nil

	case *CreateSpecType_APool:
		o.PoolTypeChoice = &GlobalSpecType_APool{APool: of.APool}

	case *CreateSpecType_AaaaPool:
		o.PoolTypeChoice = &GlobalSpecType_AaaaPool{AaaaPool: of.AaaaPool}

	case *CreateSpecType_CnamePool:
		o.PoolTypeChoice = &GlobalSpecType_CnamePool{CnamePool: of.CnamePool}

	case *CreateSpecType_MxPool:
		o.PoolTypeChoice = &GlobalSpecType_MxPool{MxPool: of.MxPool}

	case *CreateSpecType_SrvPool:
		o.PoolTypeChoice = &GlobalSpecType_SrvPool{SrvPool: of.SrvPool}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetPoolTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PoolTypeChoice.(type) {
	case nil:
		r.PoolTypeChoice = nil

	case *GlobalSpecType_APool:
		r.PoolTypeChoice = &CreateSpecType_APool{APool: of.APool}

	case *GlobalSpecType_AaaaPool:
		r.PoolTypeChoice = &CreateSpecType_AaaaPool{AaaaPool: of.AaaaPool}

	case *GlobalSpecType_CnamePool:
		r.PoolTypeChoice = &CreateSpecType_CnamePool{CnamePool: of.CnamePool}

	case *GlobalSpecType_MxPool:
		r.PoolTypeChoice = &CreateSpecType_MxPool{MxPool: of.MxPool}

	case *GlobalSpecType_SrvPool:
		r.PoolTypeChoice = &CreateSpecType_SrvPool{SrvPool: of.SrvPool}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetTtlChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TtlChoice.(type) {
	case nil:
		o.TtlChoice = nil

	case *CreateSpecType_Ttl:
		o.TtlChoice = &GlobalSpecType_Ttl{Ttl: of.Ttl}

	case *CreateSpecType_UseRrsetTtl:
		o.TtlChoice = &GlobalSpecType_UseRrsetTtl{UseRrsetTtl: of.UseRrsetTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetTtlChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TtlChoice.(type) {
	case nil:
		r.TtlChoice = nil

	case *GlobalSpecType_Ttl:
		r.TtlChoice = &CreateSpecType_Ttl{Ttl: of.Ttl}

	case *GlobalSpecType_UseRrsetTtl:
		r.TtlChoice = &CreateSpecType_UseRrsetTtl{UseRrsetTtl: of.UseRrsetTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LoadBalancingMode = f.GetLoadBalancingMode()
	m.GetPoolTypeChoiceFromGlobalSpecType(f)
	m.GetTtlChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LoadBalancingMode = m1.LoadBalancingMode
	m1.SetPoolTypeChoiceToGlobalSpecType(f)
	m1.SetTtlChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetPoolTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PoolTypeChoice.(type) {
	case nil:
		o.PoolTypeChoice = nil

	case *GetSpecType_APool:
		o.PoolTypeChoice = &GlobalSpecType_APool{APool: of.APool}

	case *GetSpecType_AaaaPool:
		o.PoolTypeChoice = &GlobalSpecType_AaaaPool{AaaaPool: of.AaaaPool}

	case *GetSpecType_CnamePool:
		o.PoolTypeChoice = &GlobalSpecType_CnamePool{CnamePool: of.CnamePool}

	case *GetSpecType_MxPool:
		o.PoolTypeChoice = &GlobalSpecType_MxPool{MxPool: of.MxPool}

	case *GetSpecType_SrvPool:
		o.PoolTypeChoice = &GlobalSpecType_SrvPool{SrvPool: of.SrvPool}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetPoolTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PoolTypeChoice.(type) {
	case nil:
		r.PoolTypeChoice = nil

	case *GlobalSpecType_APool:
		r.PoolTypeChoice = &GetSpecType_APool{APool: of.APool}

	case *GlobalSpecType_AaaaPool:
		r.PoolTypeChoice = &GetSpecType_AaaaPool{AaaaPool: of.AaaaPool}

	case *GlobalSpecType_CnamePool:
		r.PoolTypeChoice = &GetSpecType_CnamePool{CnamePool: of.CnamePool}

	case *GlobalSpecType_MxPool:
		r.PoolTypeChoice = &GetSpecType_MxPool{MxPool: of.MxPool}

	case *GlobalSpecType_SrvPool:
		r.PoolTypeChoice = &GetSpecType_SrvPool{SrvPool: of.SrvPool}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetTtlChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TtlChoice.(type) {
	case nil:
		o.TtlChoice = nil

	case *GetSpecType_Ttl:
		o.TtlChoice = &GlobalSpecType_Ttl{Ttl: of.Ttl}

	case *GetSpecType_UseRrsetTtl:
		o.TtlChoice = &GlobalSpecType_UseRrsetTtl{UseRrsetTtl: of.UseRrsetTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetTtlChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TtlChoice.(type) {
	case nil:
		r.TtlChoice = nil

	case *GlobalSpecType_Ttl:
		r.TtlChoice = &GetSpecType_Ttl{Ttl: of.Ttl}

	case *GlobalSpecType_UseRrsetTtl:
		r.TtlChoice = &GetSpecType_UseRrsetTtl{UseRrsetTtl: of.UseRrsetTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.DnsLoadBalancers = f.GetDnsLoadBalancers()
	m.LoadBalancingMode = f.GetLoadBalancingMode()
	m.GetPoolTypeChoiceFromGlobalSpecType(f)
	m.GetTtlChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.DnsLoadBalancers = m1.DnsLoadBalancers
	f.LoadBalancingMode = m1.LoadBalancingMode
	m1.SetPoolTypeChoiceToGlobalSpecType(f)
	m1.SetTtlChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetPoolTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PoolTypeChoice.(type) {
	case nil:
		o.PoolTypeChoice = nil

	case *ReplaceSpecType_APool:
		o.PoolTypeChoice = &GlobalSpecType_APool{APool: of.APool}

	case *ReplaceSpecType_AaaaPool:
		o.PoolTypeChoice = &GlobalSpecType_AaaaPool{AaaaPool: of.AaaaPool}

	case *ReplaceSpecType_CnamePool:
		o.PoolTypeChoice = &GlobalSpecType_CnamePool{CnamePool: of.CnamePool}

	case *ReplaceSpecType_MxPool:
		o.PoolTypeChoice = &GlobalSpecType_MxPool{MxPool: of.MxPool}

	case *ReplaceSpecType_SrvPool:
		o.PoolTypeChoice = &GlobalSpecType_SrvPool{SrvPool: of.SrvPool}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetPoolTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PoolTypeChoice.(type) {
	case nil:
		r.PoolTypeChoice = nil

	case *GlobalSpecType_APool:
		r.PoolTypeChoice = &ReplaceSpecType_APool{APool: of.APool}

	case *GlobalSpecType_AaaaPool:
		r.PoolTypeChoice = &ReplaceSpecType_AaaaPool{AaaaPool: of.AaaaPool}

	case *GlobalSpecType_CnamePool:
		r.PoolTypeChoice = &ReplaceSpecType_CnamePool{CnamePool: of.CnamePool}

	case *GlobalSpecType_MxPool:
		r.PoolTypeChoice = &ReplaceSpecType_MxPool{MxPool: of.MxPool}

	case *GlobalSpecType_SrvPool:
		r.PoolTypeChoice = &ReplaceSpecType_SrvPool{SrvPool: of.SrvPool}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetTtlChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TtlChoice.(type) {
	case nil:
		o.TtlChoice = nil

	case *ReplaceSpecType_Ttl:
		o.TtlChoice = &GlobalSpecType_Ttl{Ttl: of.Ttl}

	case *ReplaceSpecType_UseRrsetTtl:
		o.TtlChoice = &GlobalSpecType_UseRrsetTtl{UseRrsetTtl: of.UseRrsetTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetTtlChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TtlChoice.(type) {
	case nil:
		r.TtlChoice = nil

	case *GlobalSpecType_Ttl:
		r.TtlChoice = &ReplaceSpecType_Ttl{Ttl: of.Ttl}

	case *GlobalSpecType_UseRrsetTtl:
		r.TtlChoice = &ReplaceSpecType_UseRrsetTtl{UseRrsetTtl: of.UseRrsetTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LoadBalancingMode = f.GetLoadBalancingMode()
	m.GetPoolTypeChoiceFromGlobalSpecType(f)
	m.GetTtlChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LoadBalancingMode = m1.LoadBalancingMode
	m1.SetPoolTypeChoiceToGlobalSpecType(f)
	m1.SetTtlChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

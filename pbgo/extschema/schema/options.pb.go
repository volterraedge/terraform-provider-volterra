// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/options.proto

package schema

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ReferenceType
//
// x-displayName: "Reference Type"
// MessageOptions related messages
type ReferenceType int32

const (
	// x-displayName "displayname"
	// This is the reference as defined in schema and stored in db
	FORWARD_REF ReferenceType = 0
	// x-displayName "displayname"
	// This is a runtime maintained mirror side of Forward Reference
	BACK_REF ReferenceType = 1
)

var ReferenceType_name = map[int32]string{
	0: "FORWARD_REF",
	1: "BACK_REF",
}

var ReferenceType_value = map[string]int32{
	"FORWARD_REF": 0,
	"BACK_REF":    1,
}

func (ReferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{0}
}

// KeyType
//
// x-displayName "keytype"
// Type of keys on an Object
type KeyType int32

const (
	// x-displayName "displayname"
	// Primary key is the default
	PRIMARY_KEY KeyType = 0
	// x-displayName "displayname"
	// Non unique secondary index
	SECONDARY_KEY KeyType = 1
	// x-displayName "displayname"
	// Unique secondary index
	SECONDARY_KEY_UNIQUE KeyType = 2
)

var KeyType_name = map[int32]string{
	0: "PRIMARY_KEY",
	1: "SECONDARY_KEY",
	2: "SECONDARY_KEY_UNIQUE",
}

var KeyType_value = map[string]int32{
	"PRIMARY_KEY":          0,
	"SECONDARY_KEY":        1,
	"SECONDARY_KEY_UNIQUE": 2,
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{1}
}

// MetricType
//
// x-displayName "displayname"
// Types of metrics
type MetricType int32

const (
	// x-displayName "displayname"
	// Invalid metric type
	UNSPECIFIED MetricType = 0
	// x-displayName "displayname"
	// Gauge metric type
	GAUGE MetricType = 1
	// x-displayName "displayname"
	// Counter metric type
	COUNTER MetricType = 2
	// x-displayName "displayname"
	// Histogram metric type
	HISTOGRAM MetricType = 3
	// x-displayName "displayname"
	// Summary metric type
	SUMMARY MetricType = 4
)

var MetricType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "GAUGE",
	2: "COUNTER",
	3: "HISTOGRAM",
	4: "SUMMARY",
}

var MetricType_value = map[string]int32{
	"UNSPECIFIED": 0,
	"GAUGE":       1,
	"COUNTER":     2,
	"HISTOGRAM":   3,
	"SUMMARY":     4,
}

func (MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{2}
}

// ServiceType
//
// x-displayName "displayname"
// Type of protobuf service on configuration or operational Object
type ServiceType int32

const (
	// x-displayName "displayname"
	// CUSTOM is DEPRECATED by CUSTOM_PUBLIC
	CUSTOM ServiceType = 0
	// x-displayName "displayname"
	// AUTO_CRUD is external private API for CRUD operations
	AUTO_CRUD ServiceType = 1
	// x-displayName "displayname"
	// AUTO_CRUD_PUBLIC is external public API for CRUD operations
	AUTO_CRUD_PUBLIC ServiceType = 2
	// x-displayName "displayname"
	// CUSTOM_PUBLIC is external public API for custom operations
	CUSTOM_PUBLIC ServiceType = 3
	// x-displayName "displayname"
	// CUSTOM_PRIVATE is external private API for custom operations
	CUSTOM_PRIVATE ServiceType = 4
)

var ServiceType_name = map[int32]string{
	0: "CUSTOM",
	1: "AUTO_CRUD",
	2: "AUTO_CRUD_PUBLIC",
	3: "CUSTOM_PUBLIC",
	4: "CUSTOM_PRIVATE",
}

var ServiceType_value = map[string]int32{
	"CUSTOM":           0,
	"AUTO_CRUD":        1,
	"AUTO_CRUD_PUBLIC": 2,
	"CUSTOM_PUBLIC":    3,
	"CUSTOM_PRIVATE":   4,
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{3}
}

// Via
//
// x-displayName: "Via"
// This message option is used with On to specify the spans of a path
// leading from an object type (say virtual_network) to its dependent
// object types (say interface, route)
type Via struct {
	// type
	//
	// x-displayName: "Type"
	// dependency is on the remote object type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// field_path
	//
	// x-displayName: "Field Path"
	// based on the specified field_path
	FieldPath string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// ref_type
	//
	// x-displayName: "Reference Type"
	// whether the traversal is forward (reference field is defined in this
	// Object's definition) or reverse (reference field is defined in the
	// remote Object's definition)
	RefType ReferenceType `protobuf:"varint,3,opt,name=ref_type,json=refType,proto3,enum=ves.io.schema.ReferenceType" json:"ref_type,omitempty"`
	// gen_field_path
	//
	// x-displayName: "Generate dependencies using field path"
	// generate dependency evaluation code using the specified field_path
	GenFieldPath bool `protobuf:"varint,4,opt,name=gen_field_path,json=genFieldPath,proto3" json:"gen_field_path,omitempty"`
}

func (m *Via) Reset()      { *m = Via{} }
func (*Via) ProtoMessage() {}
func (*Via) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{0}
}
func (m *Via) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Via) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Via) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Via.Merge(m, src)
}
func (m *Via) XXX_Size() int {
	return m.Size()
}
func (m *Via) XXX_DiscardUnknown() {
	xxx_messageInfo_Via.DiscardUnknown(m)
}

var xxx_messageInfo_Via proto.InternalMessageInfo

func (m *Via) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Via) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

func (m *Via) GetRefType() ReferenceType {
	if m != nil {
		return m.RefType
	}
	return FORWARD_REF
}

func (m *Via) GetGenFieldPath() bool {
	if m != nil {
		return m.GenFieldPath
	}
	return false
}

// On
//
// x-displayName: "On"
// This message option is used in Dependencies to indicate which other
// object types an object type is dependent upon for correct functioning.
type On struct {
	// type
	//
	// x-displayName: "Type"
	// This is the dependent object type which when updated we need to
	// react upon
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// via
	//
	// x-displayName: "Via"
	// This is the set of spans to walk to reach the dependent object type
	// specified by type
	Via []*Via `protobuf:"bytes,2,rep,name=via,proto3" json:"via,omitempty"`
}

func (m *On) Reset()      { *m = On{} }
func (*On) ProtoMessage() {}
func (*On) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{1}
}
func (m *On) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *On) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *On) XXX_Merge(src proto.Message) {
	xxx_messageInfo_On.Merge(m, src)
}
func (m *On) XXX_Size() int {
	return m.Size()
}
func (m *On) XXX_DiscardUnknown() {
	xxx_messageInfo_On.DiscardUnknown(m)
}

var xxx_messageInfo_On proto.InternalMessageInfo

func (m *On) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *On) GetVia() []*Via {
	if m != nil {
		return m.Via
	}
	return nil
}

// Dependencies
//
// x-displayName: "Dependencies"
// This message option is used to indicate an object-type is dependent
// (i.e. needs to be re-evaluated) based on updates to another object-type.
// For example a virtual_network object definition may use this option to
// indicate that notification has to be issued when an interface object
// undergoes change. This is specific to the daemon implementation and
// should be used on the 'Object' message definition at the service's repo
// schema directory.
type Dependencies struct {
	// on
	//
	// x-displayName: "On"
	// This encodes the set of dependent object types and paths leading to them
	On []*On `protobuf:"bytes,1,rep,name=on,proto3" json:"on,omitempty"`
	// for
	//
	// x-displayName: "for"
	// The object type for which the dependencies are specified
	For string `protobuf:"bytes,2,opt,name=for,proto3" json:"for,omitempty"`
}

func (m *Dependencies) Reset()      { *m = Dependencies{} }
func (*Dependencies) ProtoMessage() {}
func (*Dependencies) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{2}
}
func (m *Dependencies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dependencies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Dependencies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dependencies.Merge(m, src)
}
func (m *Dependencies) XXX_Size() int {
	return m.Size()
}
func (m *Dependencies) XXX_DiscardUnknown() {
	xxx_messageInfo_Dependencies.DiscardUnknown(m)
}

var xxx_messageInfo_Dependencies proto.InternalMessageInfo

func (m *Dependencies) GetOn() []*On {
	if m != nil {
		return m.On
	}
	return nil
}

func (m *Dependencies) GetFor() string {
	if m != nil {
		return m.For
	}
	return ""
}

// DependenciesSet
//
// x-displayName: "DependenciesSet"
// This message option is used to indicate the dependencies for multiple
// object types
type DependenciesSet struct {
	// dependencies
	//
	// x-displayName: "Dependencies"
	// List of dependencies per object type
	Dependencies []*Dependencies `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (m *DependenciesSet) Reset()      { *m = DependenciesSet{} }
func (*DependenciesSet) ProtoMessage() {}
func (*DependenciesSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{3}
}
func (m *DependenciesSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DependenciesSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DependenciesSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DependenciesSet.Merge(m, src)
}
func (m *DependenciesSet) XXX_Size() int {
	return m.Size()
}
func (m *DependenciesSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DependenciesSet.DiscardUnknown(m)
}

var xxx_messageInfo_DependenciesSet proto.InternalMessageInfo

func (m *DependenciesSet) GetDependencies() []*Dependencies {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

// Key
//
// x-displayName "key"
// Shape of key
type Key struct {
	// Field path
	//
	// x-displayName "Field path"
	// Field Path
	FieldPath string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// Key
	//
	// x-displayName "Key"
	// Key
	Type KeyType `protobuf:"varint,2,opt,name=type,proto3,enum=ves.io.schema.KeyType" json:"type,omitempty"`
}

func (m *Key) Reset()      { *m = Key{} }
func (*Key) ProtoMessage() {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{4}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

func (m *Key) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return PRIMARY_KEY
}

// Keys
//
// x-displayName "keys"
// Shape of keys
type Keys struct {
	// list of Keys
	//
	// x-displayName "Keys"
	// Keys
	Keys []*Key `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *Keys) Reset()      { *m = Keys{} }
func (*Keys) ProtoMessage() {}
func (*Keys) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{5}
}
func (m *Keys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Keys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keys.Merge(m, src)
}
func (m *Keys) XXX_Size() int {
	return m.Size()
}
func (m *Keys) XXX_DiscardUnknown() {
	xxx_messageInfo_Keys.DiscardUnknown(m)
}

var xxx_messageInfo_Keys proto.InternalMessageInfo

func (m *Keys) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Only added so codegeneration does not break
type MetricDef struct {
	// Title
	//
	// x-displayName "displayname"
	// name of the metric
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Human readable description of the metric
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Describes what type of metric this is.
	Type MetricType `protobuf:"varint,3,opt,name=type,proto3,enum=ves.io.schema.MetricType" json:"type,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Label configuration to use
	Labels []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Buckets to use for histogram
	Buckets []float64 `protobuf:"fixed64,5,rep,packed,name=buckets,proto3" json:"buckets,omitempty"`
}

func (m *MetricDef) Reset()      { *m = MetricDef{} }
func (*MetricDef) ProtoMessage() {}
func (*MetricDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{6}
}
func (m *MetricDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MetricDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDef.Merge(m, src)
}
func (m *MetricDef) XXX_Size() int {
	return m.Size()
}
func (m *MetricDef) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDef.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDef proto.InternalMessageInfo

func (m *MetricDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDef) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDef) GetType() MetricType {
	if m != nil {
		return m.Type
	}
	return UNSPECIFIED
}

func (m *MetricDef) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricDef) GetBuckets() []float64 {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// LogField
//
// x-displayName: "LogField"
// LogField options
type LogField struct {
	// Name
	//
	// x-displayName: "Name"
	// Log field name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *LogField) Reset()      { *m = LogField{} }
func (*LogField) ProtoMessage() {}
func (*LogField) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{7}
}
func (m *LogField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LogField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogField.Merge(m, src)
}
func (m *LogField) XXX_Size() int {
	return m.Size()
}
func (m *LogField) XXX_DiscardUnknown() {
	xxx_messageInfo_LogField.DiscardUnknown(m)
}

var xxx_messageInfo_LogField proto.InternalMessageInfo

func (m *LogField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ThreatLevelInfo
//
// x-displayName: "ThreatLevelInfo"
// ThreatLevelInfo options
type ThreatLevelInfo struct {
	// Max Value
	//
	// x-displayName: "Max Value"
	// Threat level max value
	MaxValue float64 `protobuf:"fixed64,1,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// Min Value
	//
	// x-displayName: "Min Value"
	// Threat level min value
	MinValue float64 `protobuf:"fixed64,2,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// Threat level name
	// name can be unknown, low, medium, high
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ThreatLevelInfo) Reset()      { *m = ThreatLevelInfo{} }
func (*ThreatLevelInfo) ProtoMessage() {}
func (*ThreatLevelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{8}
}
func (m *ThreatLevelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreatLevelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ThreatLevelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreatLevelInfo.Merge(m, src)
}
func (m *ThreatLevelInfo) XXX_Size() int {
	return m.Size()
}
func (m *ThreatLevelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreatLevelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ThreatLevelInfo proto.InternalMessageInfo

func (m *ThreatLevelInfo) GetMaxValue() float64 {
	if m != nil {
		return m.MaxValue
	}
	return 0
}

func (m *ThreatLevelInfo) GetMinValue() float64 {
	if m != nil {
		return m.MinValue
	}
	return 0
}

func (m *ThreatLevelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// EnumInfo
//
// x-displayName: "EnumInfo"
// EnumInfo options
type EnumInfo struct {
	// Description
	//
	// x-displayName: "Description"
	// Error description
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *EnumInfo) Reset()      { *m = EnumInfo{} }
func (*EnumInfo) ProtoMessage() {}
func (*EnumInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8562c0a0fb65343f, []int{9}
}
func (m *EnumInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnumInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnumInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnumInfo.Merge(m, src)
}
func (m *EnumInfo) XXX_Size() int {
	return m.Size()
}
func (m *EnumInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EnumInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EnumInfo proto.InternalMessageInfo

func (m *EnumInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

var E_Dependencies = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*Dependencies)(nil),
	Field:         1000,
	Name:          "ves.io.schema.dependencies",
	Tag:           "bytes,1000,opt,name=dependencies",
	Filename:      "ves.io/schema/options.proto",
}

var E_MapsToMsg = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1001,
	Name:          "ves.io.schema.maps_to_msg",
	Tag:           "bytes,1001,opt,name=maps_to_msg",
	Filename:      "ves.io/schema/options.proto",
}

var E_MapsToSvc = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1003,
	Name:          "ves.io.schema.maps_to_svc",
	Tag:           "bytes,1003,opt,name=maps_to_svc",
	Filename:      "ves.io/schema/options.proto",
}

var E_Keys = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*Keys)(nil),
	Field:         1002,
	Name:          "ves.io.schema.keys",
	Tag:           "bytes,1002,opt,name=keys",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsMsgConfidential = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1004,
	Name:          "ves.io.schema.is_msg_confidential",
	Tag:           "varint,1004,opt,name=is_msg_confidential",
	Filename:      "ves.io/schema/options.proto",
}

var E_GetSpecNotCreateSpecSuperset = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1005,
	Name:          "ves.io.schema.get_spec_not_create_spec_superset",
	Tag:           "varint,1005,opt,name=get_spec_not_create_spec_superset",
	Filename:      "ves.io/schema/options.proto",
}

var E_DisplayOrder = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1006,
	Name:          "ves.io.schema.display_order",
	Tag:           "bytes,1006,opt,name=display_order",
	Filename:      "ves.io/schema/options.proto",
}

var E_GeneratePrivateApiMethods = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1007,
	Name:          "ves.io.schema.generate_private_api_methods",
	Tag:           "bytes,1007,opt,name=generate_private_api_methods",
	Filename:      "ves.io/schema/options.proto",
}

var E_InNamespaceTypes = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1008,
	Name:          "ves.io.schema.in_namespace_types",
	Tag:           "bytes,1008,opt,name=in_namespace_types",
	Filename:      "ves.io/schema/options.proto",
}

var E_NoUnsafeDelete = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1009,
	Name:          "ves.io.schema.no_unsafe_delete",
	Tag:           "varint,1009,opt,name=no_unsafe_delete",
	Filename:      "ves.io/schema/options.proto",
}

var E_AllowColonInName = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1010,
	Name:          "ves.io.schema.allow_colon_in_name",
	Tag:           "varint,1010,opt,name=allow_colon_in_name",
	Filename:      "ves.io/schema/options.proto",
}

var E_InDevelopmentCrud = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1011,
	Name:          "ves.io.schema.in_development_crud",
	Tag:           "bytes,1011,opt,name=in_development_crud",
	Filename:      "ves.io/schema/options.proto",
}

var E_DependenciesSet = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*DependenciesSet)(nil),
	Field:         1012,
	Name:          "ves.io.schema.dependencies_set",
	Tag:           "bytes,1012,opt,name=dependencies_set",
	Filename:      "ves.io/schema/options.proto",
}

var E_AllowDisable = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1013,
	Name:          "ves.io.schema.allow_disable",
	Tag:           "varint,1013,opt,name=allow_disable",
	Filename:      "ves.io/schema/options.proto",
}

var E_GeneratePublicCrud = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FileOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1000,
	Name:          "ves.io.schema.generate_public_crud",
	Tag:           "varint,1000,opt,name=generate_public_crud",
	Filename:      "ves.io/schema/options.proto",
}

var E_GeneratePublicApiMethods = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1001,
	Name:          "ves.io.schema.generate_public_api_methods",
	Tag:           "bytes,1001,opt,name=generate_public_api_methods",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsPkey = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2000,
	Name:          "ves.io.schema.is_pkey",
	Tag:           "varint,2000,opt,name=is_pkey",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsSkeyUniq = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2001,
	Name:          "ves.io.schema.is_skey_uniq",
	Tag:           "varint,2001,opt,name=is_skey_uniq",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsSkey = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2002,
	Name:          "ves.io.schema.is_skey",
	Tag:           "varint,2002,opt,name=is_skey",
	Filename:      "ves.io/schema/options.proto",
}

var E_MapsToField = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2003,
	Name:          "ves.io.schema.maps_to_field",
	Tag:           "bytes,2003,opt,name=maps_to_field",
	Filename:      "ves.io/schema/options.proto",
}

var E_Metric = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*MetricDef)(nil),
	Field:         2004,
	Name:          "ves.io.schema.metric",
	Tag:           "bytes,2004,opt,name=metric",
	Filename:      "ves.io/schema/options.proto",
}

var E_RefTo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2005,
	Name:          "ves.io.schema.ref_to",
	Tag:           "bytes,2005,opt,name=ref_to",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsRefSecondary = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2006,
	Name:          "ves.io.schema.is_ref_secondary",
	Tag:           "varint,2006,opt,name=is_ref_secondary",
	Filename:      "ves.io/schema/options.proto",
}

var E_LabelSelectorObjectKind = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2007,
	Name:          "ves.io.schema.label_selector_object_kind",
	Tag:           "bytes,2007,opt,name=label_selector_object_kind",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsObject = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2008,
	Name:          "ves.io.schema.is_object",
	Tag:           "varint,2008,opt,name=is_object",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsFieldConfidential = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2009,
	Name:          "ves.io.schema.is_field_confidential",
	Tag:           "varint,2009,opt,name=is_field_confidential",
	Filename:      "ves.io/schema/options.proto",
}

var E_GenerateSetter = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2010,
	Name:          "ves.io.schema.generate_setter",
	Tag:           "varint,2010,opt,name=generate_setter",
	Filename:      "ves.io/schema/options.proto",
}

var E_Internal = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2011,
	Name:          "ves.io.schema.internal",
	Tag:           "varint,2011,opt,name=internal",
	Filename:      "ves.io/schema/options.proto",
}

var E_Deprecated = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2012,
	Name:          "ves.io.schema.deprecated",
	Tag:           "bytes,2012,opt,name=deprecated",
	Filename:      "ves.io/schema/options.proto",
}

var E_FieldAvailableIn = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2013,
	Name:          "ves.io.schema.field_available_in",
	Tag:           "bytes,2013,opt,name=field_available_in",
	Filename:      "ves.io/schema/options.proto",
}

var E_RedactValue = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2014,
	Name:          "ves.io.schema.redact_value",
	Tag:           "bytes,2014,opt,name=redact_value",
	Filename:      "ves.io/schema/options.proto",
}

var E_ServiceType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*ServiceType)(nil),
	Field:         3000,
	Name:          "ves.io.schema.service_type",
	Tag:           "varint,3000,opt,name=service_type,enum=ves.io.schema.ServiceType",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsSdro = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3001,
	Name:          "ves.io.schema.is_sdro",
	Tag:           "varint,3001,opt,name=is_sdro",
	Filename:      "ves.io/schema/options.proto",
}

var E_ObjectType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3002,
	Name:          "ves.io.schema.object_type",
	Tag:           "bytes,3002,opt,name=object_type",
	Filename:      "ves.io/schema/options.proto",
}

var E_HasStatus = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         3003,
	Name:          "ves.io.schema.has_status",
	Tag:           "varint,3003,opt,name=has_status",
	Filename:      "ves.io/schema/options.proto",
}

var E_ObjectStatusType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3004,
	Name:          "ves.io.schema.object_status_type",
	Tag:           "bytes,3004,opt,name=object_status_type",
	Filename:      "ves.io/schema/options.proto",
}

var E_DeprecatedService = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3006,
	Name:          "ves.io.schema.deprecated_service",
	Tag:           "bytes,3006,opt,name=deprecated_service",
	Filename:      "ves.io/schema/options.proto",
}

var E_InDevelopmentService = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         3007,
	Name:          "ves.io.schema.in_development_service",
	Tag:           "bytes,3007,opt,name=in_development_service",
	Filename:      "ves.io/schema/options.proto",
}

var E_MapsToOneofField = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         4000,
	Name:          "ves.io.schema.maps_to_oneof_field",
	Tag:           "bytes,4000,opt,name=maps_to_oneof_field",
	Filename:      "ves.io/schema/options.proto",
}

var E_OneofFieldsAvailableIn = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         4001,
	Name:          "ves.io.schema.oneof_fields_available_in",
	Tag:           "bytes,4001,opt,name=oneof_fields_available_in",
	Filename:      "ves.io/schema/options.proto",
}

var E_InternalEnum = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         2000,
	Name:          "ves.io.schema.internal_enum",
	Tag:           "varint,2000,opt,name=internal_enum",
	Filename:      "ves.io/schema/options.proto",
}

var E_DeprecatedEnum = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         2001,
	Name:          "ves.io.schema.deprecated_enum",
	Tag:           "bytes,2001,opt,name=deprecated_enum",
	Filename:      "ves.io/schema/options.proto",
}

var E_LogFieldEnum = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*LogField)(nil),
	Field:         2002,
	Name:          "ves.io.schema.log_field_enum",
	Tag:           "bytes,2002,opt,name=log_field_enum",
	Filename:      "ves.io/schema/options.proto",
}

var E_ThreatLevelInfoEnum = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*ThreatLevelInfo)(nil),
	Field:         2003,
	Name:          "ves.io.schema.threat_level_info_enum",
	Tag:           "bytes,2003,opt,name=threat_level_info_enum",
	Filename:      "ves.io/schema/options.proto",
}

var E_InfoEnum = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*EnumInfo)(nil),
	Field:         2004,
	Name:          "ves.io.schema.info_enum",
	Tag:           "bytes,2004,opt,name=info_enum",
	Filename:      "ves.io/schema/options.proto",
}

var E_IsImmutable = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         5001,
	Name:          "ves.io.schema.is_immutable",
	Tag:           "varint,5001,opt,name=is_immutable",
	Filename:      "ves.io/schema/options.proto",
}

var E_DeprecatedMethod = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         5003,
	Name:          "ves.io.schema.deprecated_method",
	Tag:           "bytes,5003,opt,name=deprecated_method",
	Filename:      "ves.io/schema/options.proto",
}

var E_InDevelopmentMethod = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         5004,
	Name:          "ves.io.schema.in_development_method",
	Tag:           "bytes,5004,opt,name=in_development_method",
	Filename:      "ves.io/schema/options.proto",
}

func init() {
	proto.RegisterEnum("ves.io.schema.ReferenceType", ReferenceType_name, ReferenceType_value)
	golang_proto.RegisterEnum("ves.io.schema.ReferenceType", ReferenceType_name, ReferenceType_value)
	proto.RegisterEnum("ves.io.schema.KeyType", KeyType_name, KeyType_value)
	golang_proto.RegisterEnum("ves.io.schema.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("ves.io.schema.MetricType", MetricType_name, MetricType_value)
	golang_proto.RegisterEnum("ves.io.schema.MetricType", MetricType_name, MetricType_value)
	proto.RegisterEnum("ves.io.schema.ServiceType", ServiceType_name, ServiceType_value)
	golang_proto.RegisterEnum("ves.io.schema.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterType((*Via)(nil), "ves.io.schema.Via")
	golang_proto.RegisterType((*Via)(nil), "ves.io.schema.Via")
	proto.RegisterType((*On)(nil), "ves.io.schema.On")
	golang_proto.RegisterType((*On)(nil), "ves.io.schema.On")
	proto.RegisterType((*Dependencies)(nil), "ves.io.schema.Dependencies")
	golang_proto.RegisterType((*Dependencies)(nil), "ves.io.schema.Dependencies")
	proto.RegisterType((*DependenciesSet)(nil), "ves.io.schema.DependenciesSet")
	golang_proto.RegisterType((*DependenciesSet)(nil), "ves.io.schema.DependenciesSet")
	proto.RegisterType((*Key)(nil), "ves.io.schema.Key")
	golang_proto.RegisterType((*Key)(nil), "ves.io.schema.Key")
	proto.RegisterType((*Keys)(nil), "ves.io.schema.Keys")
	golang_proto.RegisterType((*Keys)(nil), "ves.io.schema.Keys")
	proto.RegisterType((*MetricDef)(nil), "ves.io.schema.MetricDef")
	golang_proto.RegisterType((*MetricDef)(nil), "ves.io.schema.MetricDef")
	proto.RegisterType((*LogField)(nil), "ves.io.schema.LogField")
	golang_proto.RegisterType((*LogField)(nil), "ves.io.schema.LogField")
	proto.RegisterType((*ThreatLevelInfo)(nil), "ves.io.schema.ThreatLevelInfo")
	golang_proto.RegisterType((*ThreatLevelInfo)(nil), "ves.io.schema.ThreatLevelInfo")
	proto.RegisterType((*EnumInfo)(nil), "ves.io.schema.EnumInfo")
	golang_proto.RegisterType((*EnumInfo)(nil), "ves.io.schema.EnumInfo")
	proto.RegisterExtension(E_Dependencies)
	proto.RegisterExtension(E_MapsToMsg)
	proto.RegisterExtension(E_MapsToSvc)
	proto.RegisterExtension(E_Keys)
	proto.RegisterExtension(E_IsMsgConfidential)
	proto.RegisterExtension(E_GetSpecNotCreateSpecSuperset)
	proto.RegisterExtension(E_DisplayOrder)
	proto.RegisterExtension(E_GeneratePrivateApiMethods)
	proto.RegisterExtension(E_InNamespaceTypes)
	proto.RegisterExtension(E_NoUnsafeDelete)
	proto.RegisterExtension(E_AllowColonInName)
	proto.RegisterExtension(E_InDevelopmentCrud)
	proto.RegisterExtension(E_DependenciesSet)
	proto.RegisterExtension(E_AllowDisable)
	proto.RegisterExtension(E_GeneratePublicCrud)
	proto.RegisterExtension(E_GeneratePublicApiMethods)
	proto.RegisterExtension(E_IsPkey)
	proto.RegisterExtension(E_IsSkeyUniq)
	proto.RegisterExtension(E_IsSkey)
	proto.RegisterExtension(E_MapsToField)
	proto.RegisterExtension(E_Metric)
	proto.RegisterExtension(E_RefTo)
	proto.RegisterExtension(E_IsRefSecondary)
	proto.RegisterExtension(E_LabelSelectorObjectKind)
	proto.RegisterExtension(E_IsObject)
	proto.RegisterExtension(E_IsFieldConfidential)
	proto.RegisterExtension(E_GenerateSetter)
	proto.RegisterExtension(E_Internal)
	proto.RegisterExtension(E_Deprecated)
	proto.RegisterExtension(E_FieldAvailableIn)
	proto.RegisterExtension(E_RedactValue)
	proto.RegisterExtension(E_ServiceType)
	proto.RegisterExtension(E_IsSdro)
	proto.RegisterExtension(E_ObjectType)
	proto.RegisterExtension(E_HasStatus)
	proto.RegisterExtension(E_ObjectStatusType)
	proto.RegisterExtension(E_DeprecatedService)
	proto.RegisterExtension(E_InDevelopmentService)
	proto.RegisterExtension(E_MapsToOneofField)
	proto.RegisterExtension(E_OneofFieldsAvailableIn)
	proto.RegisterExtension(E_InternalEnum)
	proto.RegisterExtension(E_DeprecatedEnum)
	proto.RegisterExtension(E_LogFieldEnum)
	proto.RegisterExtension(E_ThreatLevelInfoEnum)
	proto.RegisterExtension(E_InfoEnum)
	proto.RegisterExtension(E_IsImmutable)
	proto.RegisterExtension(E_DeprecatedMethod)
	proto.RegisterExtension(E_InDevelopmentMethod)
}

func init() { proto.RegisterFile("ves.io/schema/options.proto", fileDescriptor_8562c0a0fb65343f) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/options.proto", fileDescriptor_8562c0a0fb65343f)
}

var fileDescriptor_8562c0a0fb65343f = []byte{
	// 1938 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0x4b, 0x73, 0xe3, 0x58,
	0x15, 0xc7, 0x2d, 0x3b, 0x9d, 0xc4, 0x27, 0x4e, 0xac, 0x28, 0x3d, 0x89, 0xfb, 0x81, 0x27, 0x9d,
	0x9a, 0x62, 0x52, 0x29, 0xda, 0xa9, 0x1a, 0x8a, 0x9a, 0x42, 0x54, 0xcd, 0x8c, 0x63, 0x3b, 0x19,
	0x93, 0x38, 0xce, 0xc8, 0x71, 0xa0, 0x81, 0xaa, 0x5b, 0x8a, 0x74, 0xad, 0x5c, 0x22, 0xdf, 0xab,
	0xd1, 0x95, 0x3d, 0xed, 0x1d, 0x2c, 0x29, 0x58, 0xb0, 0x63, 0x0b, 0xac, 0xf8, 0x08, 0xbc, 0x0a,
	0x58, 0xb2, 0xec, 0x79, 0x00, 0xcd, 0xb3, 0xe8, 0xf4, 0x66, 0x78, 0x37, 0xaf, 0x3d, 0xa5, 0x7b,
	0xa5, 0xf8, 0x91, 0x30, 0x72, 0xaf, 0xa2, 0xfb, 0xf8, 0xff, 0xee, 0xd1, 0xf1, 0x39, 0xe7, 0x1e,
	0x05, 0xee, 0xf4, 0x31, 0x2f, 0x11, 0xb6, 0xcd, 0xad, 0x33, 0xdc, 0x35, 0xb7, 0x99, 0x17, 0x10,
	0x46, 0x79, 0xc9, 0xf3, 0x59, 0xc0, 0xb4, 0x45, 0xb9, 0x58, 0x92, 0x8b, 0xb7, 0xef, 0x3b, 0x24,
	0x38, 0xeb, 0x9d, 0x96, 0x2c, 0xd6, 0xdd, 0x76, 0x98, 0xc3, 0xb6, 0xc5, 0xae, 0xd3, 0x5e, 0x47,
	0x8c, 0xc4, 0x40, 0x3c, 0x49, 0xf5, 0xed, 0x75, 0x87, 0x31, 0xc7, 0xc5, 0xc3, 0x5d, 0x36, 0xe6,
	0x96, 0x4f, 0xbc, 0x80, 0xf9, 0x72, 0xc7, 0xc6, 0xb7, 0x14, 0xc8, 0x9c, 0x10, 0x53, 0xd3, 0x60,
	0x26, 0x18, 0x78, 0xb8, 0xa0, 0xac, 0x2b, 0x9b, 0x59, 0x43, 0x3c, 0x6b, 0x1f, 0x03, 0xe8, 0x10,
	0xec, 0xda, 0xc8, 0x33, 0x83, 0xb3, 0x42, 0x5a, 0xac, 0x64, 0xc5, 0xcc, 0x91, 0x19, 0x9c, 0x69,
	0xaf, 0xc2, 0xbc, 0x8f, 0x3b, 0x48, 0xc8, 0x32, 0xeb, 0xca, 0xe6, 0xd2, 0x2b, 0x77, 0x4b, 0x63,
	0xd6, 0x96, 0x0c, 0xdc, 0xc1, 0x3e, 0xa6, 0x16, 0x3e, 0x1e, 0x78, 0xd8, 0x98, 0xf3, 0x71, 0x27,
	0x7c, 0xd0, 0x5e, 0x82, 0x25, 0x07, 0x53, 0x34, 0xc2, 0x9e, 0x59, 0x57, 0x36, 0xe7, 0x8d, 0x9c,
	0x83, 0xe9, 0x6e, 0x8c, 0xdf, 0x78, 0x0d, 0xd2, 0x4d, 0x7a, 0xad, 0x5d, 0x2f, 0x41, 0xa6, 0x4f,
	0xcc, 0x42, 0x7a, 0x3d, 0xb3, 0xb9, 0xf0, 0x8a, 0x36, 0x71, 0xe6, 0x09, 0x31, 0x8d, 0x70, 0x79,
	0xa3, 0x02, 0xb9, 0x2a, 0xf6, 0x30, 0xb5, 0x31, 0xb5, 0x08, 0xe6, 0xda, 0x3d, 0x48, 0x33, 0x5a,
	0x50, 0x84, 0x68, 0x79, 0x42, 0xd4, 0xa4, 0x46, 0x9a, 0x51, 0x4d, 0x85, 0x4c, 0x87, 0xf9, 0xd1,
	0x9b, 0x86, 0x8f, 0x1b, 0x06, 0xe4, 0x47, 0x21, 0x2d, 0x1c, 0x68, 0xaf, 0x43, 0xce, 0x1e, 0x99,
	0x8a, 0x88, 0x77, 0x26, 0x88, 0xa3, 0x2a, 0x63, 0x4c, 0xb0, 0x71, 0x04, 0x99, 0x7d, 0x3c, 0x98,
	0xf0, 0xae, 0x32, 0xe9, 0xdd, 0xad, 0xe8, 0xc5, 0xd3, 0xc2, 0xb3, 0xab, 0x13, 0xf8, 0x7d, 0x3c,
	0x10, 0x3e, 0x15, 0x7b, 0x36, 0x4a, 0x30, 0xb3, 0x8f, 0x07, 0x5c, 0xfb, 0x38, 0xcc, 0x9c, 0xe3,
	0x41, 0x6c, 0x92, 0x76, 0x55, 0x63, 0x88, 0xf5, 0x8d, 0xef, 0x2a, 0x90, 0x6d, 0xe0, 0xc0, 0x27,
	0x56, 0x15, 0x77, 0x42, 0x17, 0x53, 0xb3, 0x7b, 0xe9, 0xe2, 0xf0, 0x59, 0x5b, 0x87, 0x85, 0x38,
	0x54, 0x08, 0xa3, 0x91, 0x47, 0x46, 0xa7, 0xb4, 0xfb, 0x91, 0x7d, 0xf2, 0x97, 0xbf, 0x35, 0x71,
	0x96, 0xa4, 0x0f, 0x4d, 0xd4, 0x56, 0x61, 0xd6, 0x35, 0x4f, 0xb1, 0xcb, 0x0b, 0x33, 0xeb, 0x99,
	0xcd, 0xac, 0x11, 0x8d, 0xb4, 0x02, 0xcc, 0x9d, 0xf6, 0xac, 0x73, 0x1c, 0xf0, 0xc2, 0x8d, 0xf5,
	0xcc, 0xa6, 0x62, 0xc4, 0xc3, 0x8d, 0x22, 0xcc, 0x1f, 0x30, 0x47, 0xc4, 0xc3, 0x75, 0x26, 0x6e,
	0x20, 0xc8, 0x1f, 0x9f, 0xf9, 0xd8, 0x0c, 0x0e, 0x70, 0x1f, 0xbb, 0x75, 0xda, 0x61, 0xda, 0x1d,
	0xc8, 0x76, 0xcd, 0x87, 0xa8, 0x6f, 0xba, 0x3d, 0xb9, 0x57, 0x31, 0xe6, 0xbb, 0xe6, 0xc3, 0x93,
	0x70, 0x2c, 0x16, 0x09, 0x8d, 0x16, 0xd3, 0xd1, 0x22, 0xa1, 0x72, 0x31, 0x3e, 0x20, 0x33, 0x72,
	0xc0, 0x27, 0x60, 0xbe, 0x46, 0x7b, 0x5d, 0x41, 0x9e, 0xf0, 0x87, 0x72, 0xc5, 0x1f, 0x5b, 0x25,
	0x58, 0x1c, 0x0b, 0x77, 0x2d, 0x0f, 0x0b, 0xbb, 0x4d, 0xe3, 0x73, 0x65, 0xa3, 0x8a, 0x8c, 0xda,
	0xae, 0x9a, 0xd2, 0x72, 0x30, 0xbf, 0x53, 0xae, 0xec, 0x8b, 0x91, 0xb2, 0xb5, 0x07, 0x73, 0xd1,
	0x8f, 0x18, 0xee, 0x3c, 0x32, 0xea, 0x8d, 0xb2, 0xf1, 0x00, 0xed, 0xd7, 0x1e, 0xa8, 0x29, 0x6d,
	0x19, 0x16, 0x5b, 0xb5, 0x4a, 0xf3, 0xb0, 0x1a, 0x4f, 0x29, 0x5a, 0x01, 0x6e, 0x8e, 0x4d, 0xa1,
	0xf6, 0x61, 0xfd, 0xad, 0x76, 0x4d, 0x4d, 0x6f, 0xbd, 0x05, 0x30, 0xf4, 0x76, 0xc8, 0x6a, 0x1f,
	0xb6, 0x8e, 0x6a, 0x95, 0xfa, 0x6e, 0xbd, 0x56, 0x55, 0x53, 0x5a, 0x16, 0x6e, 0xec, 0x95, 0xdb,
	0x7b, 0x35, 0x55, 0xd1, 0x16, 0x60, 0xae, 0xd2, 0x6c, 0x1f, 0x1e, 0xd7, 0x0c, 0x35, 0xad, 0x2d,
	0x42, 0xf6, 0xcd, 0x7a, 0xeb, 0xb8, 0xb9, 0x67, 0x94, 0x1b, 0x6a, 0x26, 0x5c, 0x6b, 0xb5, 0x1b,
	0xa1, 0x0d, 0xea, 0xcc, 0x16, 0x86, 0x85, 0x16, 0xf6, 0xfb, 0x24, 0x7a, 0x13, 0x80, 0xd9, 0x4a,
	0xbb, 0x75, 0xdc, 0x6c, 0xa8, 0xa9, 0x50, 0x56, 0x6e, 0x1f, 0x37, 0x51, 0xc5, 0x68, 0x57, 0x55,
	0x45, 0xbb, 0x09, 0xea, 0xe5, 0x10, 0x1d, 0xb5, 0x77, 0x0e, 0xea, 0x15, 0x35, 0x1d, 0xda, 0x2f,
	0x05, 0xf1, 0x54, 0x46, 0xd3, 0x60, 0x29, 0x9e, 0x32, 0xea, 0x27, 0xe5, 0xe3, 0x9a, 0x3a, 0xa3,
	0x9b, 0xe3, 0x99, 0xa4, 0xbd, 0x58, 0x92, 0xe5, 0xaa, 0x14, 0x97, 0xab, 0x52, 0x03, 0x73, 0x6e,
	0x3a, 0xb8, 0x29, 0x4b, 0x62, 0xe1, 0xc3, 0xb9, 0x75, 0xe5, 0xb9, 0x72, 0x4d, 0x7f, 0x03, 0x16,
	0xba, 0xa6, 0xc7, 0x51, 0xc0, 0x50, 0x97, 0x3b, 0xc9, 0x27, 0xfc, 0x69, 0x4e, 0xe6, 0x61, 0x28,
	0x3a, 0x66, 0x0d, 0xee, 0x8c, 0x12, 0x78, 0xdf, 0x4a, 0x26, 0xfc, 0x65, 0x8c, 0xd0, 0xea, 0x5b,
	0x7a, 0x5d, 0x66, 0x65, 0xb2, 0xf4, 0xcf, 0xf2, 0xf5, 0x56, 0xae, 0xe6, 0x2d, 0x97, 0x89, 0xab,
	0x1f, 0xc1, 0x0a, 0xe1, 0xe1, 0x9b, 0x20, 0x8b, 0xd1, 0x0e, 0xb1, 0x31, 0x0d, 0x88, 0xe9, 0x26,
	0x93, 0xff, 0x3a, 0x27, 0x0a, 0xec, 0x32, 0xe1, 0x0d, 0xee, 0x54, 0x46, 0xa4, 0x3a, 0x81, 0x7b,
	0x0e, 0x0e, 0x10, 0xf7, 0xb0, 0x85, 0x28, 0x0b, 0x90, 0x15, 0x66, 0x14, 0x96, 0x63, 0xde, 0xf3,
	0xb0, 0xcf, 0x71, 0x90, 0xcc, 0xff, 0x9b, 0xe4, 0xdf, 0x75, 0x70, 0xd0, 0xf2, 0xb0, 0x75, 0xc8,
	0x82, 0x8a, 0xe0, 0x84, 0x83, 0x56, 0x44, 0xd1, 0x6b, 0xb0, 0x68, 0x13, 0xee, 0xb9, 0xe6, 0x00,
	0x31, 0xdf, 0xc6, 0x7e, 0x32, 0xf6, 0xef, 0xd2, 0x97, 0xb9, 0x48, 0xd6, 0x0c, 0x55, 0xba, 0x09,
	0x77, 0x1d, 0x4c, 0xb1, 0x1f, 0x9a, 0xe9, 0xf9, 0xa4, 0x1f, 0xfe, 0x35, 0x3d, 0x82, 0xba, 0x38,
	0x38, 0x63, 0xf6, 0x14, 0x6e, 0xfe, 0x87, 0xa4, 0xde, 0x8a, 0x29, 0x47, 0x12, 0x52, 0xf6, 0x48,
	0x43, 0x22, 0xf4, 0x43, 0xd0, 0x08, 0x45, 0x61, 0x11, 0xe0, 0x9e, 0x69, 0x61, 0x71, 0xc5, 0x4d,
	0x01, 0x7e, 0x26, 0xc1, 0x2a, 0xa1, 0x87, 0xb1, 0x34, 0xcc, 0x1f, 0xae, 0x7f, 0x16, 0x54, 0xca,
	0x50, 0x8f, 0x72, 0xb3, 0x83, 0x91, 0x8d, 0x5d, 0x1c, 0xe0, 0x64, 0xda, 0x3f, 0xa5, 0x4f, 0x97,
	0x28, 0x6b, 0x0b, 0x61, 0x55, 0xe8, 0xf4, 0x26, 0xac, 0x98, 0xae, 0xcb, 0xde, 0x41, 0x16, 0x73,
	0x19, 0x45, 0x91, 0x9d, 0xc9, 0xb8, 0x7f, 0x49, 0x9c, 0x2a, 0xc4, 0x95, 0x50, 0x5b, 0x17, 0x66,
	0x8a, 0x98, 0xa2, 0xc8, 0x0e, 0x8b, 0x28, 0xf3, 0xba, 0x98, 0x86, 0x31, 0xd0, 0xb3, 0x93, 0x81,
	0xff, 0x96, 0x6f, 0xbb, 0x4c, 0x68, 0x75, 0xa8, 0xad, 0xf8, 0x3d, 0x5b, 0x3f, 0x07, 0x75, 0x34,
	0x09, 0xd1, 0x54, 0x21, 0xf4, 0x1f, 0x19, 0xfc, 0xc5, 0x8f, 0xc8, 0xed, 0x16, 0x0e, 0x8c, 0xbc,
	0x3d, 0x3e, 0x11, 0x46, 0x95, 0xf4, 0x87, 0x4d, 0xb8, 0x79, 0xea, 0x4e, 0xe1, 0x89, 0xff, 0x4a,
	0x4f, 0xe4, 0x84, 0xac, 0x2a, 0x55, 0x7a, 0x13, 0x6e, 0x0e, 0xa3, 0xaa, 0x77, 0xea, 0x12, 0x4b,
	0xba, 0xe1, 0xee, 0x15, 0xda, 0x2e, 0x71, 0xc7, 0x0b, 0xd2, 0xbc, 0xa1, 0x5d, 0x86, 0x92, 0x50,
	0x0a, 0x27, 0x7c, 0x09, 0xee, 0x4c, 0x02, 0x47, 0xa3, 0xf4, 0xa3, 0xb9, 0x51, 0x19, 0x2a, 0x8c,
	0x73, 0x47, 0x22, 0xf4, 0x55, 0x98, 0x23, 0x1c, 0x79, 0xe7, 0x61, 0x1f, 0x71, 0x0d, 0x09, 0xbb,
	0x76, 0x8c, 0x7a, 0x94, 0x17, 0x26, 0xce, 0x12, 0x7e, 0x74, 0x8e, 0x07, 0xfa, 0x1b, 0x90, 0x23,
	0x1c, 0xf1, 0x73, 0x3c, 0x40, 0x3d, 0x4a, 0xde, 0x4e, 0x52, 0xbf, 0x2b, 0xd5, 0x40, 0x78, 0xeb,
	0x1c, 0x0f, 0xda, 0x94, 0xbc, 0x1d, 0x1d, 0xcd, 0xa7, 0x38, 0xfa, 0xbd, 0xcb, 0xa3, 0x43, 0xb1,
	0xbe, 0x03, 0x8b, 0x71, 0x25, 0x15, 0x6d, 0x4e, 0x92, 0xfc, 0xfd, 0xbc, 0xbc, 0x65, 0x65, 0x25,
	0x15, 0x4b, 0xfa, 0x11, 0xcc, 0x76, 0xc5, 0x65, 0x97, 0x24, 0xfe, 0x20, 0x2f, 0xc2, 0xa9, 0x70,
	0x6d, 0x5f, 0x52, 0xc5, 0x1d, 0x23, 0xe2, 0xe8, 0x9f, 0x82, 0x59, 0xd1, 0xc5, 0xb2, 0x24, 0xe2,
	0x2f, 0xa4, 0x39, 0x37, 0xc2, 0x2e, 0x96, 0xe9, 0x6f, 0x82, 0x4a, 0x38, 0x0a, 0x95, 0x1c, 0x5b,
	0x8c, 0xda, 0xa6, 0x9f, 0xe8, 0x8e, 0x5f, 0x4a, 0x77, 0x2c, 0x11, 0x6e, 0xe0, 0x4e, 0x2b, 0x56,
	0xe9, 0x5f, 0x84, 0xdb, 0xa2, 0x17, 0x42, 0x1c, 0xbb, 0xd8, 0x0a, 0x98, 0x8f, 0xd8, 0xe9, 0x97,
	0xb1, 0x15, 0xa0, 0x73, 0x42, 0x13, 0x7d, 0xf4, 0x2b, 0x69, 0xd4, 0x9a, 0x20, 0xb4, 0x22, 0x40,
	0x53, 0xe8, 0xf7, 0x09, 0xb5, 0xf5, 0xcf, 0x40, 0x96, 0xf0, 0x08, 0x98, 0xc4, 0x7a, 0x2c, 0xed,
	0x9b, 0x27, 0x5c, 0x02, 0x74, 0x03, 0x5e, 0x20, 0x3c, 0x6a, 0xd3, 0xc7, 0xee, 0x9b, 0x04, 0xd0,
	0xaf, 0x25, 0x68, 0x85, 0x70, 0x31, 0x3d, 0x76, 0xdf, 0xec, 0x41, 0xfe, 0x32, 0x2d, 0x38, 0x0e,
	0x02, 0xec, 0x27, 0xd1, 0x7e, 0x13, 0xb9, 0x2d, 0x96, 0xb5, 0x84, 0x4a, 0xd7, 0x61, 0x9e, 0xd0,
	0x00, 0xfb, 0x34, 0xd9, 0x9e, 0xdf, 0xc6, 0x2f, 0x16, 0xed, 0xd7, 0x5f, 0x03, 0xb0, 0xb1, 0xe7,
	0x63, 0xcb, 0x0c, 0x70, 0xa2, 0x8b, 0x7f, 0x27, 0x5d, 0x3c, 0xa2, 0xd0, 0x0f, 0x40, 0x93, 0x5e,
	0x31, 0xfb, 0x26, 0x71, 0xc3, 0xfa, 0x81, 0x08, 0x4d, 0xe2, 0xfc, 0x5e, 0x72, 0x54, 0xa1, 0x2c,
	0xc7, 0xc2, 0x3a, 0xd5, 0xcb, 0x90, 0xf3, 0xb1, 0x6d, 0x5a, 0x81, 0xec, 0x4d, 0x93, 0x38, 0x7f,
	0x88, 0xd2, 0x42, 0x6a, 0x44, 0xfb, 0xaa, 0x23, 0xc8, 0x71, 0xd9, 0xb0, 0x89, 0xbb, 0xea, 0x9a,
	0x1a, 0x18, 0xf5, 0x73, 0x31, 0xe4, 0xfb, 0x6b, 0xa2, 0x6d, 0xbf, 0x3d, 0x91, 0x1e, 0x23, 0x5d,
	0x9f, 0xb1, 0xc0, 0x87, 0x03, 0xfd, 0xd3, 0x32, 0xe9, 0x6d, 0x9f, 0x25, 0xb3, 0x7f, 0xb0, 0x76,
	0x99, 0xf6, 0xb6, 0xcf, 0xf4, 0x32, 0x2c, 0x44, 0x01, 0x3d, 0x9d, 0x69, 0x3f, 0x5c, 0x93, 0xfe,
	0x96, 0x22, 0x71, 0xfa, 0xeb, 0x00, 0x67, 0x26, 0x47, 0x3c, 0x30, 0x83, 0x1e, 0x4f, 0x26, 0xfc,
	0x48, 0x1a, 0x90, 0x3d, 0x33, 0x79, 0x4b, 0x48, 0xc2, 0x0b, 0x3d, 0xb2, 0x41, 0x32, 0xa6, 0x34,
	0xe5, 0xc7, 0xd2, 0x14, 0x55, 0x6a, 0x25, 0x4b, 0x18, 0xd4, 0x04, 0x6d, 0x18, 0x0e, 0x28, 0x72,
	0x54, 0x32, 0xef, 0x27, 0x92, 0xb7, 0x3c, 0xd4, 0x46, 0x1b, 0xf4, 0x13, 0x58, 0x9d, 0xb8, 0x84,
	0xa7, 0x86, 0xfe, 0x54, 0x42, 0x6f, 0x8e, 0xdd, 0xc3, 0x31, 0xb7, 0x01, 0x2b, 0x71, 0xcd, 0x65,
	0x14, 0xb3, 0xce, 0xff, 0xad, 0xbc, 0xcd, 0x70, 0x35, 0x46, 0x7e, 0xfb, 0x45, 0xf9, 0xde, 0xb2,
	0xf2, 0x8a, 0x25, 0x59, 0x7e, 0x1f, 0xc0, 0xad, 0x11, 0x0c, 0x4f, 0x8a, 0xff, 0x31, 0xe8, 0x77,
	0x24, 0x74, 0x95, 0x5d, 0xe2, 0xf8, 0x68, 0x16, 0xec, 0xc1, 0x62, 0x9c, 0x9f, 0x08, 0xd3, 0x5e,
	0x57, 0xbb, 0x77, 0x05, 0x17, 0x7e, 0x8d, 0x89, 0x78, 0x9f, 0xb8, 0xdb, 0x72, 0xb1, 0x30, 0xdc,
	0xa0, 0xef, 0x43, 0x7e, 0xe4, 0xb7, 0x99, 0x16, 0xf5, 0xae, 0xcc, 0xaa, 0xa5, 0xa1, 0x54, 0xc0,
	0x4c, 0x58, 0x72, 0x99, 0x13, 0xd5, 0xc0, 0x69, 0x59, 0xef, 0xc9, 0xbb, 0x67, 0x6d, 0x22, 0xb9,
	0xe2, 0xaf, 0x59, 0x23, 0xe7, 0x46, 0x4f, 0xe2, 0x88, 0x77, 0x60, 0x35, 0x10, 0xdf, 0xb1, 0xc8,
	0x0d, 0x7f, 0x3f, 0x44, 0x68, 0x87, 0x4d, 0x7d, 0xd4, 0xfb, 0xf9, 0x6b, 0xbb, 0xa6, 0x89, 0x0f,
	0x63, 0x63, 0x25, 0x18, 0x9f, 0x10, 0x07, 0x7f, 0x1e, 0xb2, 0xcf, 0x75, 0xd6, 0x07, 0xd7, 0xbf,
	0x56, 0xfc, 0x8d, 0x1c, 0xd6, 0xd7, 0x88, 0xbc, 0x23, 0x9a, 0x0c, 0xd2, 0xed, 0xf6, 0x02, 0xd1,
	0x92, 0x15, 0xaf, 0x69, 0xc9, 0xc2, 0x3e, 0x26, 0x26, 0x7f, 0xed, 0x65, 0xf1, 0x3b, 0x2e, 0x10,
	0x5e, 0x8f, 0x35, 0xfa, 0x01, 0x8c, 0xa4, 0x49, 0xd4, 0x36, 0x25, 0x82, 0xbe, 0xfe, 0xb2, 0x0c,
	0xdc, 0xa1, 0x52, 0xae, 0xeb, 0x2d, 0x78, 0x61, 0x22, 0xbf, 0xa6, 0x24, 0x7e, 0x43, 0x12, 0x57,
	0xc6, 0xb2, 0x4b, 0x6e, 0xd9, 0xf9, 0xaa, 0xf2, 0xe8, 0x49, 0x31, 0xf5, 0xf8, 0x49, 0x31, 0xf5,
	0xec, 0x49, 0x51, 0xf9, 0xca, 0x45, 0x51, 0xf9, 0xde, 0x45, 0x51, 0xf9, 0xf9, 0x45, 0x51, 0x79,
	0x74, 0x51, 0x54, 0x1e, 0x5f, 0x14, 0x95, 0x3f, 0x5e, 0x14, 0x95, 0x0f, 0x2f, 0x8a, 0xa9, 0x67,
	0x17, 0x45, 0xe5, 0x9b, 0x4f, 0x8b, 0xa9, 0x9f, 0x3d, 0x2d, 0x2a, 0x8f, 0x9e, 0x16, 0x53, 0x8f,
	0x9f, 0x16, 0x53, 0x5f, 0xa8, 0x38, 0xcc, 0x3b, 0x77, 0x4a, 0x7d, 0xe6, 0x06, 0xd8, 0xf7, 0xcd,
	0x52, 0x8f, 0x6f, 0x8b, 0x87, 0x0e, 0xf3, 0xbb, 0xf7, 0x3d, 0x9f, 0xf5, 0x89, 0x8d, 0xfd, 0xfb,
	0xf1, 0xf2, 0xb6, 0x77, 0xea, 0xb0, 0x6d, 0xfc, 0x30, 0x88, 0xfe, 0x4d, 0x28, 0xff, 0x9c, 0xce,
	0x0a, 0xbb, 0x3f, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x78, 0x75, 0x56, 0x45, 0x14,
	0x00, 0x00,
}

func (x ReferenceType) String() string {
	s, ok := ReferenceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x KeyType) String() string {
	s, ok := KeyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MetricType) String() string {
	s, ok := MetricType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ServiceType) String() string {
	s, ok := ServiceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Via) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Via)
	if !ok {
		that2, ok := that.(Via)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.FieldPath != that1.FieldPath {
		return false
	}
	if this.RefType != that1.RefType {
		return false
	}
	if this.GenFieldPath != that1.GenFieldPath {
		return false
	}
	return true
}
func (this *On) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*On)
	if !ok {
		that2, ok := that.(On)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Via) != len(that1.Via) {
		return false
	}
	for i := range this.Via {
		if !this.Via[i].Equal(that1.Via[i]) {
			return false
		}
	}
	return true
}
func (this *Dependencies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dependencies)
	if !ok {
		that2, ok := that.(Dependencies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.On) != len(that1.On) {
		return false
	}
	for i := range this.On {
		if !this.On[i].Equal(that1.On[i]) {
			return false
		}
	}
	if this.For != that1.For {
		return false
	}
	return true
}
func (this *DependenciesSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DependenciesSet)
	if !ok {
		that2, ok := that.(DependenciesSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dependencies) != len(that1.Dependencies) {
		return false
	}
	for i := range this.Dependencies {
		if !this.Dependencies[i].Equal(that1.Dependencies[i]) {
			return false
		}
	}
	return true
}
func (this *Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Key)
	if !ok {
		that2, ok := that.(Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FieldPath != that1.FieldPath {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Keys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Keys)
	if !ok {
		that2, ok := that.(Keys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *MetricDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricDef)
	if !ok {
		that2, ok := that.(MetricDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Buckets) != len(that1.Buckets) {
		return false
	}
	for i := range this.Buckets {
		if this.Buckets[i] != that1.Buckets[i] {
			return false
		}
	}
	return true
}
func (this *LogField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogField)
	if !ok {
		that2, ok := that.(LogField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ThreatLevelInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThreatLevelInfo)
	if !ok {
		that2, ok := that.(ThreatLevelInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxValue != that1.MaxValue {
		return false
	}
	if this.MinValue != that1.MinValue {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *EnumInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnumInfo)
	if !ok {
		that2, ok := that.(EnumInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *Via) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schema.Via{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "FieldPath: "+fmt.Sprintf("%#v", this.FieldPath)+",\n")
	s = append(s, "RefType: "+fmt.Sprintf("%#v", this.RefType)+",\n")
	s = append(s, "GenFieldPath: "+fmt.Sprintf("%#v", this.GenFieldPath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *On) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.On{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Via != nil {
		s = append(s, "Via: "+fmt.Sprintf("%#v", this.Via)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dependencies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.Dependencies{")
	if this.On != nil {
		s = append(s, "On: "+fmt.Sprintf("%#v", this.On)+",\n")
	}
	s = append(s, "For: "+fmt.Sprintf("%#v", this.For)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DependenciesSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.DependenciesSet{")
	if this.Dependencies != nil {
		s = append(s, "Dependencies: "+fmt.Sprintf("%#v", this.Dependencies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Key) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schema.Key{")
	s = append(s, "FieldPath: "+fmt.Sprintf("%#v", this.FieldPath)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Keys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.Keys{")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schema.MetricDef{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "Buckets: "+fmt.Sprintf("%#v", this.Buckets)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.LogField{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreatLevelInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.ThreatLevelInfo{")
	s = append(s, "MaxValue: "+fmt.Sprintf("%#v", this.MaxValue)+",\n")
	s = append(s, "MinValue: "+fmt.Sprintf("%#v", this.MinValue)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnumInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.EnumInfo{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Via) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Via) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Via) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenFieldPath {
		i--
		if m.GenFieldPath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RefType != 0 {
		i = encodeVarintOptions(dAtA, i, uint64(m.RefType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FieldPath) > 0 {
		i -= len(m.FieldPath)
		copy(dAtA[i:], m.FieldPath)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.FieldPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *On) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *On) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *On) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Via) > 0 {
		for iNdEx := len(m.Via) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Via[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dependencies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dependencies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dependencies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.For) > 0 {
		i -= len(m.For)
		copy(dAtA[i:], m.For)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.For)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.On) > 0 {
		for iNdEx := len(m.On) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.On[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DependenciesSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DependenciesSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DependenciesSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dependencies) > 0 {
		for iNdEx := len(m.Dependencies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dependencies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintOptions(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FieldPath) > 0 {
		i -= len(m.FieldPath)
		copy(dAtA[i:], m.FieldPath)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.FieldPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buckets) > 0 {
		for iNdEx := len(m.Buckets) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float64bits(float64(m.Buckets[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
		}
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Buckets)*8))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Labels[iNdEx])
			copy(dAtA[i:], m.Labels[iNdEx])
			i = encodeVarintOptions(dAtA, i, uint64(len(m.Labels[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Type != 0 {
		i = encodeVarintOptions(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreatLevelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreatLevelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreatLevelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MinValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinValue))))
		i--
		dAtA[i] = 0x11
	}
	if m.MaxValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxValue))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *EnumInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnumInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnumInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Via) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.FieldPath)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.RefType != 0 {
		n += 1 + sovOptions(uint64(m.RefType))
	}
	if m.GenFieldPath {
		n += 2
	}
	return n
}

func (m *On) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if len(m.Via) > 0 {
		for _, e := range m.Via {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *Dependencies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.On) > 0 {
		for _, e := range m.On {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	l = len(m.For)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *DependenciesSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dependencies) > 0 {
		for _, e := range m.Dependencies {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldPath)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOptions(uint64(m.Type))
	}
	return n
}

func (m *Keys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *MetricDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOptions(uint64(m.Type))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	if len(m.Buckets) > 0 {
		n += 1 + sovOptions(uint64(len(m.Buckets)*8)) + len(m.Buckets)*8
	}
	return n
}

func (m *LogField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *ThreatLevelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxValue != 0 {
		n += 9
	}
	if m.MinValue != 0 {
		n += 9
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *EnumInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func sovOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptions(x uint64) (n int) {
	return sovOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Via) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Via{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`FieldPath:` + fmt.Sprintf("%v", this.FieldPath) + `,`,
		`RefType:` + fmt.Sprintf("%v", this.RefType) + `,`,
		`GenFieldPath:` + fmt.Sprintf("%v", this.GenFieldPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *On) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVia := "[]*Via{"
	for _, f := range this.Via {
		repeatedStringForVia += strings.Replace(f.String(), "Via", "Via", 1) + ","
	}
	repeatedStringForVia += "}"
	s := strings.Join([]string{`&On{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Via:` + repeatedStringForVia + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dependencies) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOn := "[]*On{"
	for _, f := range this.On {
		repeatedStringForOn += strings.Replace(f.String(), "On", "On", 1) + ","
	}
	repeatedStringForOn += "}"
	s := strings.Join([]string{`&Dependencies{`,
		`On:` + repeatedStringForOn + `,`,
		`For:` + fmt.Sprintf("%v", this.For) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DependenciesSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDependencies := "[]*Dependencies{"
	for _, f := range this.Dependencies {
		repeatedStringForDependencies += strings.Replace(f.String(), "Dependencies", "Dependencies", 1) + ","
	}
	repeatedStringForDependencies += "}"
	s := strings.Join([]string{`&DependenciesSet{`,
		`Dependencies:` + repeatedStringForDependencies + `,`,
		`}`,
	}, "")
	return s
}
func (this *Key) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Key{`,
		`FieldPath:` + fmt.Sprintf("%v", this.FieldPath) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Keys) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKeys := "[]*Key{"
	for _, f := range this.Keys {
		repeatedStringForKeys += strings.Replace(f.String(), "Key", "Key", 1) + ","
	}
	repeatedStringForKeys += "}"
	s := strings.Join([]string{`&Keys{`,
		`Keys:` + repeatedStringForKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricDef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`Buckets:` + fmt.Sprintf("%v", this.Buckets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogField{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreatLevelInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreatLevelInfo{`,
		`MaxValue:` + fmt.Sprintf("%v", this.MaxValue) + `,`,
		`MinValue:` + fmt.Sprintf("%v", this.MinValue) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnumInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnumInfo{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Via) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Via: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Via: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefType", wireType)
			}
			m.RefType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefType |= ReferenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenFieldPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GenFieldPath = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *On) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: On: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: On: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Via", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Via = append(m.Via, &Via{})
			if err := m.Via[len(m.Via)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dependencies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dependencies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dependencies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field On", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.On = append(m.On, &On{})
			if err := m.On[len(m.On)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field For", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.For = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DependenciesSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DependenciesSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DependenciesSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependencies = append(m.Dependencies, &Dependencies{})
			if err := m.Dependencies[len(m.Dependencies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &Key{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MetricType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Buckets = append(m.Buckets, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOptions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOptions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Buckets) == 0 {
					m.Buckets = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Buckets = append(m.Buckets, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreatLevelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreatLevelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreatLevelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxValue = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinValue = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnumInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnumInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnumInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOptions = fmt.Errorf("proto: unexpected end of group")
)

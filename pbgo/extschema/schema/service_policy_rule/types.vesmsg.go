//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package service_policy_rule

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ChallengeRuleSpec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ChallengeRuleSpec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ChallengeRuleSpec) DeepCopy() *ChallengeRuleSpec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ChallengeRuleSpec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ChallengeRuleSpec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ChallengeRuleSpec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ChallengeRuleSpecValidator().Validate(ctx, m, opts...)
}

func (m *ChallengeRuleSpec) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ChallengeRuleSpec) GetAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAsnChoice().(type) {
	case *ChallengeRuleSpec_AnyAsn:

	case *ChallengeRuleSpec_AsnList:

	case *ChallengeRuleSpec_AsnMatcher:
		odrInfos, err = m.GetAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *ChallengeRuleSpec) GetIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetIpChoice().(type) {
	case *ChallengeRuleSpec_AnyIp:

	case *ChallengeRuleSpec_IpPrefixList:

	case *ChallengeRuleSpec_IpMatcher:
		odrInfos, err = m.GetIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateChallengeRuleSpec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateChallengeRuleSpec) ChallengeActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_action")
	}
	return validatorFn, nil
}

func (v *ValidateChallengeRuleSpec) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateChallengeRuleSpec) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRuleSpec) QueryParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.QueryParameterMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.QueryParameterMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for query_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.QueryParameterMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.QueryParameterMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated query_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items query_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRuleSpec) ArgMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.ArgMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.ArgMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for arg_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.ArgMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.ArgMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated arg_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items arg_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRuleSpec) CookieMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.CookieMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.CookieMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cookie_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.CookieMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.CookieMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cookie_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cookie_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRuleSpec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ChallengeRuleSpec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ChallengeRuleSpec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["arg_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("arg_matchers"))
		if err := fv(ctx, m.GetArgMatchers(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetAsnChoice().(type) {
	case *ChallengeRuleSpec_AnyAsn:
		if fv, exists := v.FldValidators["asn_choice.any_asn"]; exists {
			val := m.GetAsnChoice().(*ChallengeRuleSpec_AnyAsn).AnyAsn
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("any_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_AsnList:
		if fv, exists := v.FldValidators["asn_choice.asn_list"]; exists {
			val := m.GetAsnChoice().(*ChallengeRuleSpec_AsnList).AsnList
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_AsnMatcher:
		if fv, exists := v.FldValidators["asn_choice.asn_matcher"]; exists {
			val := m.GetAsnChoice().(*ChallengeRuleSpec_AsnMatcher).AsnMatcher
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["body_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("body_matcher"))
		if err := fv(ctx, m.GetBodyMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_action"]; exists {
		val := m.GetChallengeAction()
		vOpts := append(opts,
			db.WithValidateField("challenge_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeAction().(type) {
	case *ChallengeRuleSpec_DisableChallenge:
		if fv, exists := v.FldValidators["challenge_action.disable_challenge"]; exists {
			val := m.GetChallengeAction().(*ChallengeRuleSpec_DisableChallenge).DisableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_action"),
				db.WithValidateField("disable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_EnableJavascriptChallenge:
		if fv, exists := v.FldValidators["challenge_action.enable_javascript_challenge"]; exists {
			val := m.GetChallengeAction().(*ChallengeRuleSpec_EnableJavascriptChallenge).EnableJavascriptChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_action"),
				db.WithValidateField("enable_javascript_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_EnableCaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_action.enable_captcha_challenge"]; exists {
			val := m.GetChallengeAction().(*ChallengeRuleSpec_EnableCaptchaChallenge).EnableCaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_action"),
				db.WithValidateField("enable_captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientChoice().(type) {
	case *ChallengeRuleSpec_AnyClient:
		if fv, exists := v.FldValidators["client_choice.any_client"]; exists {
			val := m.GetClientChoice().(*ChallengeRuleSpec_AnyClient).AnyClient
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("any_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*ChallengeRuleSpec_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*ChallengeRuleSpec_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*ChallengeRuleSpec_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cookie_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("cookie_matchers"))
		if err := fv(ctx, m.GetCookieMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_matcher"))
		if err := fv(ctx, m.GetDomainMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetIpChoice().(type) {
	case *ChallengeRuleSpec_AnyIp:
		if fv, exists := v.FldValidators["ip_choice.any_ip"]; exists {
			val := m.GetIpChoice().(*ChallengeRuleSpec_AnyIp).AnyIp
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("any_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_IpPrefixList:
		if fv, exists := v.FldValidators["ip_choice.ip_prefix_list"]; exists {
			val := m.GetIpChoice().(*ChallengeRuleSpec_IpPrefixList).IpPrefixList
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ChallengeRuleSpec_IpMatcher:
		if fv, exists := v.FldValidators["ip_choice.ip_matcher"]; exists {
			val := m.GetIpChoice().(*ChallengeRuleSpec_IpMatcher).IpMatcher
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_params"]; exists {
		vOpts := append(opts, db.WithValidateField("query_params"))
		if err := fv(ctx, m.GetQueryParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_fingerprint_matcher"))
		if err := fv(ctx, m.GetTlsFingerprintMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultChallengeRuleSpecValidator = func() *ValidateChallengeRuleSpec {
	v := &ValidateChallengeRuleSpec{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChallengeAction := v.ChallengeActionValidationRuleHandler
	rulesChallengeAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeAction(rulesChallengeAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRuleSpec.challenge_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_action"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ChallengeRuleSpec.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRuleSpec.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	vrhQueryParams := v.QueryParamsValidationRuleHandler
	rulesQueryParams := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhQueryParams(rulesQueryParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRuleSpec.query_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["query_params"] = vFn

	vrhArgMatchers := v.ArgMatchersValidationRuleHandler
	rulesArgMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhArgMatchers(rulesArgMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRuleSpec.arg_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["arg_matchers"] = vFn

	vrhCookieMatchers := v.CookieMatchersValidationRuleHandler
	rulesCookieMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhCookieMatchers(rulesCookieMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRuleSpec.cookie_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_matchers"] = vFn

	v.FldValidators["asn_choice.asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate
	v.FldValidators["asn_choice.asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["ip_choice.ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate
	v.FldValidators["ip_choice.ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate

	v.FldValidators["domain_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["path"] = ves_io_schema_policy.PathMatcherTypeValidator().Validate

	v.FldValidators["http_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["tls_fingerprint_matcher"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator().Validate

	v.FldValidators["body_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	return v
}()

func ChallengeRuleSpecValidator() db.Validator {
	return DefaultChallengeRuleSpecValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGotoPolicyDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimiterDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafActionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAsnChoice().(type) {
	case *CreateSpecType_AsnMatcher:
		odrInfos, err = m.GetAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *CreateSpecType_AnyAsn:

	case *CreateSpecType_AsnList:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDstAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDstAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDstAsnChoice().(type) {
	case *CreateSpecType_AnyDstAsn:

	case *CreateSpecType_DstAsnList:

	case *CreateSpecType_DstAsnMatcher:
		odrInfos, err = m.GetDstAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "dst_asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDstIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDstIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDstIpChoice().(type) {
	case *CreateSpecType_AnyDstIp:

	case *CreateSpecType_DstIpPrefixList:

	case *CreateSpecType_DstIpMatcher:
		odrInfos, err = m.GetDstIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "dst_ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *CreateSpecType) GetGotoPolicyDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetGotoPolicy() {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.goto_policy[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "goto_policy",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetGotoPolicyDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetGotoPolicyDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy")
	}
	for _, ref := range m.GetGotoPolicy() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetIpChoice().(type) {
	case *CreateSpecType_IpMatcher:
		odrInfos, err = m.GetIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *CreateSpecType_AnyIp:

	case *CreateSpecType_IpPrefixList:

	}

	return drInfos, err
}

func (m *CreateSpecType) GetRateLimiterDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetRateLimiter() {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.rate_limiter[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "rate_limiter.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rate_limiter",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetRateLimiterDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetRateLimiterDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "rate_limiter.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: rate_limiter")
	}
	for _, ref := range m.GetRateLimiter() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetWafActionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetWafAction() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetWafAction().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "waf_action." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AsnChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ClientChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateCreateSpecType) IpChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) QueryParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.QueryParameterMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.QueryParameterMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for query_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.QueryParameterMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.QueryParameterMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated query_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items query_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ArgMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.ArgMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.ArgMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for arg_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.ArgMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.ArgMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated arg_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items arg_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CookieMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.CookieMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.CookieMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cookie_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.CookieMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.CookieMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cookie_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cookie_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WafActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for waf_action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_policy.WafActionValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RateLimiterValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rate_limiter")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rate_limiter")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rate_limiter")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SchemeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for scheme")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for scheme")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated scheme")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items scheme")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ChallengeActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.ChallengeAction)
		return int32(i)
	}
	// ves_io_schema_policy.ChallengeAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.ChallengeAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_action")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GotoPolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for goto_policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated goto_policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items goto_policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_group_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_matcher"))
		if err := fv(ctx, m.GetApiGroupMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["arg_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("arg_matchers"))
		if err := fv(ctx, m.GetArgMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["asn_choice"]; exists {
		val := m.GetAsnChoice()
		vOpts := append(opts,
			db.WithValidateField("asn_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAsnChoice().(type) {
	case *CreateSpecType_AsnMatcher:
		if fv, exists := v.FldValidators["asn_choice.asn_matcher"]; exists {
			val := m.GetAsnChoice().(*CreateSpecType_AsnMatcher).AsnMatcher
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AnyAsn:
		if fv, exists := v.FldValidators["asn_choice.any_asn"]; exists {
			val := m.GetAsnChoice().(*CreateSpecType_AnyAsn).AnyAsn
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("any_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AsnList:
		if fv, exists := v.FldValidators["asn_choice.asn_list"]; exists {
			val := m.GetAsnChoice().(*CreateSpecType_AsnList).AsnList
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["body_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("body_matcher"))
		if err := fv(ctx, m.GetBodyMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_action"]; exists {

		vOpts := append(opts, db.WithValidateField("challenge_action"))
		if err := fv(ctx, m.GetChallengeAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_choice"]; exists {
		val := m.GetClientChoice()
		vOpts := append(opts,
			db.WithValidateField("client_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientChoice().(type) {
	case *CreateSpecType_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*CreateSpecType_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*CreateSpecType_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*CreateSpecType_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AnyClient:
		if fv, exists := v.FldValidators["client_choice.any_client"]; exists {
			val := m.GetClientChoice().(*CreateSpecType_AnyClient).AnyClient
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("any_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["client_role"]; exists {

		vOpts := append(opts, db.WithValidateField("client_role"))
		if err := fv(ctx, m.GetClientRole(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["content_rewrite_action"]; exists {

		vOpts := append(opts, db.WithValidateField("content_rewrite_action"))
		if err := fv(ctx, m.GetContentRewriteAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cookie_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("cookie_matchers"))
		if err := fv(ctx, m.GetCookieMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_matcher"))
		if err := fv(ctx, m.GetDomainMatcher(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDstAsnChoice().(type) {
	case *CreateSpecType_AnyDstAsn:
		if fv, exists := v.FldValidators["dst_asn_choice.any_dst_asn"]; exists {
			val := m.GetDstAsnChoice().(*CreateSpecType_AnyDstAsn).AnyDstAsn
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("any_dst_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DstAsnList:
		if fv, exists := v.FldValidators["dst_asn_choice.dst_asn_list"]; exists {
			val := m.GetDstAsnChoice().(*CreateSpecType_DstAsnList).DstAsnList
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("dst_asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DstAsnMatcher:
		if fv, exists := v.FldValidators["dst_asn_choice.dst_asn_matcher"]; exists {
			val := m.GetDstAsnChoice().(*CreateSpecType_DstAsnMatcher).DstAsnMatcher
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("dst_asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetDstIpChoice().(type) {
	case *CreateSpecType_AnyDstIp:
		if fv, exists := v.FldValidators["dst_ip_choice.any_dst_ip"]; exists {
			val := m.GetDstIpChoice().(*CreateSpecType_AnyDstIp).AnyDstIp
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("any_dst_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DstIpPrefixList:
		if fv, exists := v.FldValidators["dst_ip_choice.dst_ip_prefix_list"]; exists {
			val := m.GetDstIpChoice().(*CreateSpecType_DstIpPrefixList).DstIpPrefixList
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("dst_ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DstIpMatcher:
		if fv, exists := v.FldValidators["dst_ip_choice.dst_ip_matcher"]; exists {
			val := m.GetDstIpChoice().(*CreateSpecType_DstIpMatcher).DstIpMatcher
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("dst_ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["goto_policy"]; exists {
		vOpts := append(opts, db.WithValidateField("goto_policy"))
		if err := fv(ctx, m.GetGotoPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_choice"]; exists {
		val := m.GetIpChoice()
		vOpts := append(opts,
			db.WithValidateField("ip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpChoice().(type) {
	case *CreateSpecType_IpMatcher:
		if fv, exists := v.FldValidators["ip_choice.ip_matcher"]; exists {
			val := m.GetIpChoice().(*CreateSpecType_IpMatcher).IpMatcher
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AnyIp:
		if fv, exists := v.FldValidators["ip_choice.any_ip"]; exists {
			val := m.GetIpChoice().(*CreateSpecType_AnyIp).AnyIp
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("any_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IpPrefixList:
		if fv, exists := v.FldValidators["ip_choice.ip_prefix_list"]; exists {
			val := m.GetIpChoice().(*CreateSpecType_IpPrefixList).IpPrefixList
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["l4_dest_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("l4_dest_matcher"))
		if err := fv(ctx, m.GetL4DestMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation_bypass"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation_bypass"))
		if err := fv(ctx, m.GetMaliciousUserMitigationBypass(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_params"]; exists {
		vOpts := append(opts, db.WithValidateField("query_params"))
		if err := fv(ctx, m.GetQueryParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limiter"]; exists {
		vOpts := append(opts, db.WithValidateField("rate_limiter"))
		if err := fv(ctx, m.GetRateLimiter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scheme"]; exists {
		vOpts := append(opts, db.WithValidateField("scheme"))
		if err := fv(ctx, m.GetScheme(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("server_selector"))
		if err := fv(ctx, m.GetServerSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["shape_protected_endpoint_action"]; exists {

		vOpts := append(opts, db.WithValidateField("shape_protected_endpoint_action"))
		if err := fv(ctx, m.GetShapeProtectedEndpointAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_fingerprint_matcher"))
		if err := fv(ctx, m.GetTlsFingerprintMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("url_matcher"))
		if err := fv(ctx, m.GetUrlMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_host_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_host_matcher"))
		if err := fv(ctx, m.GetVirtualHostMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_action"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_action"))
		if err := fv(ctx, m.GetWafAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsnChoice := v.AsnChoiceValidationRuleHandler
	rulesAsnChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAsnChoice(rulesAsnChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.asn_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn_choice"] = vFn

	vrhClientChoice := v.ClientChoiceValidationRuleHandler
	rulesClientChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientChoice(rulesClientChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.client_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_choice"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhIpChoice := v.IpChoiceValidationRuleHandler
	rulesIpChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpChoice(rulesIpChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_choice"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	vrhQueryParams := v.QueryParamsValidationRuleHandler
	rulesQueryParams := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhQueryParams(rulesQueryParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.query_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["query_params"] = vFn

	vrhArgMatchers := v.ArgMatchersValidationRuleHandler
	rulesArgMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhArgMatchers(rulesArgMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.arg_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["arg_matchers"] = vFn

	vrhCookieMatchers := v.CookieMatchersValidationRuleHandler
	rulesCookieMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhCookieMatchers(rulesCookieMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cookie_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_matchers"] = vFn

	vrhWafAction := v.WafActionValidationRuleHandler
	rulesWafAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWafAction(rulesWafAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.waf_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_action"] = vFn

	vrhRateLimiter := v.RateLimiterValidationRuleHandler
	rulesRateLimiter := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "2",
	}
	vFn, err = vrhRateLimiter(rulesRateLimiter)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rate_limiter: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter"] = vFn

	vrhScheme := v.SchemeValidationRuleHandler
	rulesScheme := map[string]string{
		"ves.io.schema.rules.repeated.items.string.in": "[\"ANY\", \"HTTP\", \"HTTPS\", \"TCP\", \"TLS\"]",
		"ves.io.schema.rules.repeated.max_items":       "4",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhScheme(rulesScheme)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.scheme: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scheme"] = vFn

	vrhChallengeAction := v.ChallengeActionValidationRuleHandler
	rulesChallengeAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhChallengeAction(rulesChallengeAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.challenge_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_action"] = vFn

	vrhGotoPolicy := v.GotoPolicyValidationRuleHandler
	rulesGotoPolicy := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhGotoPolicy(rulesGotoPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.goto_policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["goto_policy"] = vFn

	v.FldValidators["asn_choice.asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate
	v.FldValidators["asn_choice.asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["dst_asn_choice.dst_asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate
	v.FldValidators["dst_asn_choice.dst_asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate

	v.FldValidators["dst_ip_choice.dst_ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate
	v.FldValidators["dst_ip_choice.dst_ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate

	v.FldValidators["ip_choice.ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate
	v.FldValidators["ip_choice.ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	v.FldValidators["path"] = ves_io_schema_policy.PathMatcherTypeValidator().Validate

	v.FldValidators["http_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["client_role"] = ves_io_schema_policy.RoleMatcherTypeValidator().Validate

	v.FldValidators["api_group_matcher"] = ves_io_schema_policy.StringMatcherTypeValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["body_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["domain_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["virtual_host_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["tls_fingerprint_matcher"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator().Validate

	v.FldValidators["url_matcher"] = ves_io_schema_policy.URLMatcherTypeValidator().Validate

	v.FldValidators["l4_dest_matcher"] = ves_io_schema_policy.L4DestMatcherTypeValidator().Validate

	v.FldValidators["server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["content_rewrite_action"] = ves_io_schema_policy.ContentRewriteActionValidator().Validate

	v.FldValidators["shape_protected_endpoint_action"] = ves_io_schema_policy.ShapeProtectedEndpointActionValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGotoPolicyDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimiterDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafActionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAsnChoice().(type) {
	case *GetSpecType_AsnMatcher:
		odrInfos, err = m.GetAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GetSpecType_AnyAsn:

	case *GetSpecType_AsnList:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDstAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDstAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDstAsnChoice().(type) {
	case *GetSpecType_AnyDstAsn:

	case *GetSpecType_DstAsnList:

	case *GetSpecType_DstAsnMatcher:
		odrInfos, err = m.GetDstAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "dst_asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDstIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDstIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDstIpChoice().(type) {
	case *GetSpecType_AnyDstIp:

	case *GetSpecType_DstIpPrefixList:

	case *GetSpecType_DstIpMatcher:
		odrInfos, err = m.GetDstIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "dst_ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *GetSpecType) GetGotoPolicyDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetGotoPolicy() {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.goto_policy[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "goto_policy",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetGotoPolicyDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetGotoPolicyDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy")
	}
	for _, ref := range m.GetGotoPolicy() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetIpChoice().(type) {
	case *GetSpecType_IpMatcher:
		odrInfos, err = m.GetIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GetSpecType_AnyIp:

	case *GetSpecType_IpPrefixList:

	}

	return drInfos, err
}

func (m *GetSpecType) GetRateLimiterDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetRateLimiter() {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.rate_limiter[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "rate_limiter.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rate_limiter",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetRateLimiterDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetRateLimiterDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "rate_limiter.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: rate_limiter")
	}
	for _, ref := range m.GetRateLimiter() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetWafActionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetWafAction() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetWafAction().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "waf_action." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AsnChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ClientChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateGetSpecType) IpChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) QueryParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.QueryParameterMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.QueryParameterMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for query_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.QueryParameterMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.QueryParameterMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated query_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items query_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ArgMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.ArgMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.ArgMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for arg_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.ArgMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.ArgMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated arg_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items arg_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CookieMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.CookieMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.CookieMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cookie_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.CookieMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.CookieMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cookie_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cookie_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) WafActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for waf_action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_policy.WafActionValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) RateLimiterValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rate_limiter")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rate_limiter")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rate_limiter")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) SchemeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for scheme")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for scheme")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated scheme")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items scheme")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ChallengeActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.ChallengeAction)
		return int32(i)
	}
	// ves_io_schema_policy.ChallengeAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.ChallengeAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_action")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) GotoPolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for goto_policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated goto_policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items goto_policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_group_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_matcher"))
		if err := fv(ctx, m.GetApiGroupMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["arg_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("arg_matchers"))
		if err := fv(ctx, m.GetArgMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["asn_choice"]; exists {
		val := m.GetAsnChoice()
		vOpts := append(opts,
			db.WithValidateField("asn_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAsnChoice().(type) {
	case *GetSpecType_AsnMatcher:
		if fv, exists := v.FldValidators["asn_choice.asn_matcher"]; exists {
			val := m.GetAsnChoice().(*GetSpecType_AsnMatcher).AsnMatcher
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AnyAsn:
		if fv, exists := v.FldValidators["asn_choice.any_asn"]; exists {
			val := m.GetAsnChoice().(*GetSpecType_AnyAsn).AnyAsn
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("any_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AsnList:
		if fv, exists := v.FldValidators["asn_choice.asn_list"]; exists {
			val := m.GetAsnChoice().(*GetSpecType_AsnList).AsnList
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["body_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("body_matcher"))
		if err := fv(ctx, m.GetBodyMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_action"]; exists {

		vOpts := append(opts, db.WithValidateField("challenge_action"))
		if err := fv(ctx, m.GetChallengeAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_choice"]; exists {
		val := m.GetClientChoice()
		vOpts := append(opts,
			db.WithValidateField("client_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientChoice().(type) {
	case *GetSpecType_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*GetSpecType_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*GetSpecType_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*GetSpecType_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AnyClient:
		if fv, exists := v.FldValidators["client_choice.any_client"]; exists {
			val := m.GetClientChoice().(*GetSpecType_AnyClient).AnyClient
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("any_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["client_role"]; exists {

		vOpts := append(opts, db.WithValidateField("client_role"))
		if err := fv(ctx, m.GetClientRole(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["content_rewrite_action"]; exists {

		vOpts := append(opts, db.WithValidateField("content_rewrite_action"))
		if err := fv(ctx, m.GetContentRewriteAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cookie_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("cookie_matchers"))
		if err := fv(ctx, m.GetCookieMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_matcher"))
		if err := fv(ctx, m.GetDomainMatcher(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDstAsnChoice().(type) {
	case *GetSpecType_AnyDstAsn:
		if fv, exists := v.FldValidators["dst_asn_choice.any_dst_asn"]; exists {
			val := m.GetDstAsnChoice().(*GetSpecType_AnyDstAsn).AnyDstAsn
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("any_dst_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DstAsnList:
		if fv, exists := v.FldValidators["dst_asn_choice.dst_asn_list"]; exists {
			val := m.GetDstAsnChoice().(*GetSpecType_DstAsnList).DstAsnList
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("dst_asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DstAsnMatcher:
		if fv, exists := v.FldValidators["dst_asn_choice.dst_asn_matcher"]; exists {
			val := m.GetDstAsnChoice().(*GetSpecType_DstAsnMatcher).DstAsnMatcher
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("dst_asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetDstIpChoice().(type) {
	case *GetSpecType_AnyDstIp:
		if fv, exists := v.FldValidators["dst_ip_choice.any_dst_ip"]; exists {
			val := m.GetDstIpChoice().(*GetSpecType_AnyDstIp).AnyDstIp
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("any_dst_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DstIpPrefixList:
		if fv, exists := v.FldValidators["dst_ip_choice.dst_ip_prefix_list"]; exists {
			val := m.GetDstIpChoice().(*GetSpecType_DstIpPrefixList).DstIpPrefixList
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("dst_ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DstIpMatcher:
		if fv, exists := v.FldValidators["dst_ip_choice.dst_ip_matcher"]; exists {
			val := m.GetDstIpChoice().(*GetSpecType_DstIpMatcher).DstIpMatcher
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("dst_ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["goto_policy"]; exists {
		vOpts := append(opts, db.WithValidateField("goto_policy"))
		if err := fv(ctx, m.GetGotoPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_choice"]; exists {
		val := m.GetIpChoice()
		vOpts := append(opts,
			db.WithValidateField("ip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpChoice().(type) {
	case *GetSpecType_IpMatcher:
		if fv, exists := v.FldValidators["ip_choice.ip_matcher"]; exists {
			val := m.GetIpChoice().(*GetSpecType_IpMatcher).IpMatcher
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AnyIp:
		if fv, exists := v.FldValidators["ip_choice.any_ip"]; exists {
			val := m.GetIpChoice().(*GetSpecType_AnyIp).AnyIp
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("any_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IpPrefixList:
		if fv, exists := v.FldValidators["ip_choice.ip_prefix_list"]; exists {
			val := m.GetIpChoice().(*GetSpecType_IpPrefixList).IpPrefixList
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["l4_dest_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("l4_dest_matcher"))
		if err := fv(ctx, m.GetL4DestMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation_bypass"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation_bypass"))
		if err := fv(ctx, m.GetMaliciousUserMitigationBypass(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_params"]; exists {
		vOpts := append(opts, db.WithValidateField("query_params"))
		if err := fv(ctx, m.GetQueryParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limiter"]; exists {
		vOpts := append(opts, db.WithValidateField("rate_limiter"))
		if err := fv(ctx, m.GetRateLimiter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scheme"]; exists {
		vOpts := append(opts, db.WithValidateField("scheme"))
		if err := fv(ctx, m.GetScheme(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("server_selector"))
		if err := fv(ctx, m.GetServerSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["shape_protected_endpoint_action"]; exists {

		vOpts := append(opts, db.WithValidateField("shape_protected_endpoint_action"))
		if err := fv(ctx, m.GetShapeProtectedEndpointAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_fingerprint_matcher"))
		if err := fv(ctx, m.GetTlsFingerprintMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("url_matcher"))
		if err := fv(ctx, m.GetUrlMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_host_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_host_matcher"))
		if err := fv(ctx, m.GetVirtualHostMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_action"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_action"))
		if err := fv(ctx, m.GetWafAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsnChoice := v.AsnChoiceValidationRuleHandler
	rulesAsnChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAsnChoice(rulesAsnChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.asn_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn_choice"] = vFn

	vrhClientChoice := v.ClientChoiceValidationRuleHandler
	rulesClientChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientChoice(rulesClientChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.client_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_choice"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhIpChoice := v.IpChoiceValidationRuleHandler
	rulesIpChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpChoice(rulesIpChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_choice"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	vrhQueryParams := v.QueryParamsValidationRuleHandler
	rulesQueryParams := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhQueryParams(rulesQueryParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.query_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["query_params"] = vFn

	vrhArgMatchers := v.ArgMatchersValidationRuleHandler
	rulesArgMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhArgMatchers(rulesArgMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.arg_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["arg_matchers"] = vFn

	vrhCookieMatchers := v.CookieMatchersValidationRuleHandler
	rulesCookieMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhCookieMatchers(rulesCookieMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cookie_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_matchers"] = vFn

	vrhWafAction := v.WafActionValidationRuleHandler
	rulesWafAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWafAction(rulesWafAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.waf_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_action"] = vFn

	vrhRateLimiter := v.RateLimiterValidationRuleHandler
	rulesRateLimiter := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "2",
	}
	vFn, err = vrhRateLimiter(rulesRateLimiter)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rate_limiter: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter"] = vFn

	vrhScheme := v.SchemeValidationRuleHandler
	rulesScheme := map[string]string{
		"ves.io.schema.rules.repeated.items.string.in": "[\"ANY\", \"HTTP\", \"HTTPS\", \"TCP\", \"TLS\"]",
		"ves.io.schema.rules.repeated.max_items":       "4",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhScheme(rulesScheme)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.scheme: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scheme"] = vFn

	vrhChallengeAction := v.ChallengeActionValidationRuleHandler
	rulesChallengeAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhChallengeAction(rulesChallengeAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.challenge_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_action"] = vFn

	vrhGotoPolicy := v.GotoPolicyValidationRuleHandler
	rulesGotoPolicy := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhGotoPolicy(rulesGotoPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.goto_policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["goto_policy"] = vFn

	v.FldValidators["asn_choice.asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate
	v.FldValidators["asn_choice.asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["dst_asn_choice.dst_asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate
	v.FldValidators["dst_asn_choice.dst_asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate

	v.FldValidators["dst_ip_choice.dst_ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate
	v.FldValidators["dst_ip_choice.dst_ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate

	v.FldValidators["ip_choice.ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate
	v.FldValidators["ip_choice.ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	v.FldValidators["path"] = ves_io_schema_policy.PathMatcherTypeValidator().Validate

	v.FldValidators["http_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["client_role"] = ves_io_schema_policy.RoleMatcherTypeValidator().Validate

	v.FldValidators["api_group_matcher"] = ves_io_schema_policy.StringMatcherTypeValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["body_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["domain_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["virtual_host_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["tls_fingerprint_matcher"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator().Validate

	v.FldValidators["url_matcher"] = ves_io_schema_policy.URLMatcherTypeValidator().Validate

	v.FldValidators["l4_dest_matcher"] = ves_io_schema_policy.L4DestMatcherTypeValidator().Validate

	v.FldValidators["server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["content_rewrite_action"] = ves_io_schema_policy.ContentRewriteActionValidator().Validate

	v.FldValidators["shape_protected_endpoint_action"] = ves_io_schema_policy.ShapeProtectedEndpointActionValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardingClassDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGotoPolicyDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimiterDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafActionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAsnChoice().(type) {
	case *GlobalSpecType_AsnMatcher:
		odrInfos, err = m.GetAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GlobalSpecType_AnyAsn:

	case *GlobalSpecType_AsnList:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDstAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDstAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDstAsnChoice().(type) {
	case *GlobalSpecType_AnyDstAsn:

	case *GlobalSpecType_DstAsnList:

	case *GlobalSpecType_DstAsnMatcher:
		odrInfos, err = m.GetDstAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "dst_asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDstIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDstIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDstIpChoice().(type) {
	case *GlobalSpecType_AnyDstIp:

	case *GlobalSpecType_DstIpPrefixList:

	case *GlobalSpecType_DstIpMatcher:
		odrInfos, err = m.GetDstIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "dst_ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *GlobalSpecType) GetForwardingClassDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetForwardingClass() {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.forwarding_class[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "forwarding_class.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "forwarding_class",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetForwardingClassDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetForwardingClassDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "forwarding_class.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: forwarding_class")
	}
	for _, ref := range m.GetForwardingClass() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetGotoPolicyDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetGotoPolicy() {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.goto_policy[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "goto_policy",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetGotoPolicyDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetGotoPolicyDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy")
	}
	for _, ref := range m.GetGotoPolicy() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetIpChoice().(type) {
	case *GlobalSpecType_IpMatcher:
		odrInfos, err = m.GetIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GlobalSpecType_AnyIp:

	case *GlobalSpecType_IpPrefixList:

	}

	return drInfos, err
}

func (m *GlobalSpecType) GetRateLimiterDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetRateLimiter() {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.rate_limiter[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "rate_limiter.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rate_limiter",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetRateLimiterDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetRateLimiterDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "rate_limiter.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: rate_limiter")
	}
	for _, ref := range m.GetRateLimiter() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetWafActionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetWafAction() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetWafAction().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "waf_action." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AsnChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ClientChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateGlobalSpecType) IpChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) QueryParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.QueryParameterMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.QueryParameterMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for query_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.QueryParameterMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.QueryParameterMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated query_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items query_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ArgMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.ArgMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.ArgMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for arg_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.ArgMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.ArgMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated arg_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items arg_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CookieMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.CookieMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.CookieMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cookie_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.CookieMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.CookieMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cookie_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cookie_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WafActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for waf_action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_policy.WafActionValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RateLimiterValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rate_limiter")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rate_limiter")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rate_limiter")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ForwardingClassValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for forwarding_class")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated forwarding_class")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items forwarding_class")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SchemeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for scheme")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for scheme")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated scheme")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items scheme")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ChallengeActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.ChallengeAction)
		return int32(i)
	}
	// ves_io_schema_policy.ChallengeAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.ChallengeAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_action")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GotoPolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for goto_policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated goto_policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items goto_policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_group_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_matcher"))
		if err := fv(ctx, m.GetApiGroupMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["arg_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("arg_matchers"))
		if err := fv(ctx, m.GetArgMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["asn_choice"]; exists {
		val := m.GetAsnChoice()
		vOpts := append(opts,
			db.WithValidateField("asn_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAsnChoice().(type) {
	case *GlobalSpecType_AsnMatcher:
		if fv, exists := v.FldValidators["asn_choice.asn_matcher"]; exists {
			val := m.GetAsnChoice().(*GlobalSpecType_AsnMatcher).AsnMatcher
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AnyAsn:
		if fv, exists := v.FldValidators["asn_choice.any_asn"]; exists {
			val := m.GetAsnChoice().(*GlobalSpecType_AnyAsn).AnyAsn
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("any_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AsnList:
		if fv, exists := v.FldValidators["asn_choice.asn_list"]; exists {
			val := m.GetAsnChoice().(*GlobalSpecType_AsnList).AsnList
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["body_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("body_matcher"))
		if err := fv(ctx, m.GetBodyMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_action"]; exists {

		vOpts := append(opts, db.WithValidateField("challenge_action"))
		if err := fv(ctx, m.GetChallengeAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_choice"]; exists {
		val := m.GetClientChoice()
		vOpts := append(opts,
			db.WithValidateField("client_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientChoice().(type) {
	case *GlobalSpecType_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*GlobalSpecType_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*GlobalSpecType_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*GlobalSpecType_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AnyClient:
		if fv, exists := v.FldValidators["client_choice.any_client"]; exists {
			val := m.GetClientChoice().(*GlobalSpecType_AnyClient).AnyClient
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("any_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["client_role"]; exists {

		vOpts := append(opts, db.WithValidateField("client_role"))
		if err := fv(ctx, m.GetClientRole(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["content_rewrite_action"]; exists {

		vOpts := append(opts, db.WithValidateField("content_rewrite_action"))
		if err := fv(ctx, m.GetContentRewriteAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cookie_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("cookie_matchers"))
		if err := fv(ctx, m.GetCookieMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_matcher"))
		if err := fv(ctx, m.GetDomainMatcher(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDstAsnChoice().(type) {
	case *GlobalSpecType_AnyDstAsn:
		if fv, exists := v.FldValidators["dst_asn_choice.any_dst_asn"]; exists {
			val := m.GetDstAsnChoice().(*GlobalSpecType_AnyDstAsn).AnyDstAsn
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("any_dst_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DstAsnList:
		if fv, exists := v.FldValidators["dst_asn_choice.dst_asn_list"]; exists {
			val := m.GetDstAsnChoice().(*GlobalSpecType_DstAsnList).DstAsnList
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("dst_asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DstAsnMatcher:
		if fv, exists := v.FldValidators["dst_asn_choice.dst_asn_matcher"]; exists {
			val := m.GetDstAsnChoice().(*GlobalSpecType_DstAsnMatcher).DstAsnMatcher
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("dst_asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetDstIpChoice().(type) {
	case *GlobalSpecType_AnyDstIp:
		if fv, exists := v.FldValidators["dst_ip_choice.any_dst_ip"]; exists {
			val := m.GetDstIpChoice().(*GlobalSpecType_AnyDstIp).AnyDstIp
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("any_dst_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DstIpPrefixList:
		if fv, exists := v.FldValidators["dst_ip_choice.dst_ip_prefix_list"]; exists {
			val := m.GetDstIpChoice().(*GlobalSpecType_DstIpPrefixList).DstIpPrefixList
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("dst_ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DstIpMatcher:
		if fv, exists := v.FldValidators["dst_ip_choice.dst_ip_matcher"]; exists {
			val := m.GetDstIpChoice().(*GlobalSpecType_DstIpMatcher).DstIpMatcher
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("dst_ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["forwarding_class"]; exists {
		vOpts := append(opts, db.WithValidateField("forwarding_class"))
		if err := fv(ctx, m.GetForwardingClass(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["goto_policy"]; exists {
		vOpts := append(opts, db.WithValidateField("goto_policy"))
		if err := fv(ctx, m.GetGotoPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_choice"]; exists {
		val := m.GetIpChoice()
		vOpts := append(opts,
			db.WithValidateField("ip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpChoice().(type) {
	case *GlobalSpecType_IpMatcher:
		if fv, exists := v.FldValidators["ip_choice.ip_matcher"]; exists {
			val := m.GetIpChoice().(*GlobalSpecType_IpMatcher).IpMatcher
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AnyIp:
		if fv, exists := v.FldValidators["ip_choice.any_ip"]; exists {
			val := m.GetIpChoice().(*GlobalSpecType_AnyIp).AnyIp
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("any_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IpPrefixList:
		if fv, exists := v.FldValidators["ip_choice.ip_prefix_list"]; exists {
			val := m.GetIpChoice().(*GlobalSpecType_IpPrefixList).IpPrefixList
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["l4_dest_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("l4_dest_matcher"))
		if err := fv(ctx, m.GetL4DestMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation_bypass"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation_bypass"))
		if err := fv(ctx, m.GetMaliciousUserMitigationBypass(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_params"]; exists {
		vOpts := append(opts, db.WithValidateField("query_params"))
		if err := fv(ctx, m.GetQueryParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limiter"]; exists {
		vOpts := append(opts, db.WithValidateField("rate_limiter"))
		if err := fv(ctx, m.GetRateLimiter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scheme"]; exists {
		vOpts := append(opts, db.WithValidateField("scheme"))
		if err := fv(ctx, m.GetScheme(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("server_selector"))
		if err := fv(ctx, m.GetServerSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["shape_protected_endpoint_action"]; exists {

		vOpts := append(opts, db.WithValidateField("shape_protected_endpoint_action"))
		if err := fv(ctx, m.GetShapeProtectedEndpointAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_fingerprint_matcher"))
		if err := fv(ctx, m.GetTlsFingerprintMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("url_matcher"))
		if err := fv(ctx, m.GetUrlMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_host_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_host_matcher"))
		if err := fv(ctx, m.GetVirtualHostMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_action"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_action"))
		if err := fv(ctx, m.GetWafAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsnChoice := v.AsnChoiceValidationRuleHandler
	rulesAsnChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAsnChoice(rulesAsnChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.asn_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn_choice"] = vFn

	vrhClientChoice := v.ClientChoiceValidationRuleHandler
	rulesClientChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientChoice(rulesClientChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.client_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_choice"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhIpChoice := v.IpChoiceValidationRuleHandler
	rulesIpChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpChoice(rulesIpChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_choice"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	vrhQueryParams := v.QueryParamsValidationRuleHandler
	rulesQueryParams := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhQueryParams(rulesQueryParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.query_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["query_params"] = vFn

	vrhArgMatchers := v.ArgMatchersValidationRuleHandler
	rulesArgMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhArgMatchers(rulesArgMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.arg_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["arg_matchers"] = vFn

	vrhCookieMatchers := v.CookieMatchersValidationRuleHandler
	rulesCookieMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhCookieMatchers(rulesCookieMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cookie_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_matchers"] = vFn

	vrhWafAction := v.WafActionValidationRuleHandler
	rulesWafAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWafAction(rulesWafAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.waf_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_action"] = vFn

	vrhRateLimiter := v.RateLimiterValidationRuleHandler
	rulesRateLimiter := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "2",
	}
	vFn, err = vrhRateLimiter(rulesRateLimiter)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rate_limiter: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter"] = vFn

	vrhForwardingClass := v.ForwardingClassValidationRuleHandler
	rulesForwardingClass := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhForwardingClass(rulesForwardingClass)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.forwarding_class: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forwarding_class"] = vFn

	vrhScheme := v.SchemeValidationRuleHandler
	rulesScheme := map[string]string{
		"ves.io.schema.rules.repeated.items.string.in": "[\"ANY\", \"HTTP\", \"HTTPS\", \"TCP\", \"TLS\"]",
		"ves.io.schema.rules.repeated.max_items":       "4",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhScheme(rulesScheme)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.scheme: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scheme"] = vFn

	vrhChallengeAction := v.ChallengeActionValidationRuleHandler
	rulesChallengeAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhChallengeAction(rulesChallengeAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.challenge_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_action"] = vFn

	vrhGotoPolicy := v.GotoPolicyValidationRuleHandler
	rulesGotoPolicy := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhGotoPolicy(rulesGotoPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.goto_policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["goto_policy"] = vFn

	v.FldValidators["asn_choice.asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate
	v.FldValidators["asn_choice.asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["dst_asn_choice.dst_asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate
	v.FldValidators["dst_asn_choice.dst_asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate

	v.FldValidators["dst_ip_choice.dst_ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate
	v.FldValidators["dst_ip_choice.dst_ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate

	v.FldValidators["ip_choice.ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate
	v.FldValidators["ip_choice.ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	v.FldValidators["path"] = ves_io_schema_policy.PathMatcherTypeValidator().Validate

	v.FldValidators["http_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["client_role"] = ves_io_schema_policy.RoleMatcherTypeValidator().Validate

	v.FldValidators["api_group_matcher"] = ves_io_schema_policy.StringMatcherTypeValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["body_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["domain_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["virtual_host_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["tls_fingerprint_matcher"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator().Validate

	v.FldValidators["url_matcher"] = ves_io_schema_policy.URLMatcherTypeValidator().Validate

	v.FldValidators["l4_dest_matcher"] = ves_io_schema_policy.L4DestMatcherTypeValidator().Validate

	v.FldValidators["server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["content_rewrite_action"] = ves_io_schema_policy.ContentRewriteActionValidator().Validate

	v.FldValidators["shape_protected_endpoint_action"] = ves_io_schema_policy.ShapeProtectedEndpointActionValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RateLimiterRuleSpec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RateLimiterRuleSpec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RateLimiterRuleSpec) DeepCopy() *RateLimiterRuleSpec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RateLimiterRuleSpec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RateLimiterRuleSpec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RateLimiterRuleSpec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RateLimiterRuleSpecValidator().Validate(ctx, m, opts...)
}

func (m *RateLimiterRuleSpec) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetActionChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *RateLimiterRuleSpec) GetActionChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetActionChoice().(type) {
	case *RateLimiterRuleSpec_BypassRateLimiter:

	case *RateLimiterRuleSpec_ApplyRateLimiter:

	case *RateLimiterRuleSpec_CustomRateLimiter:

		vref := m.GetCustomRateLimiter()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("rate_limiter.Object")
		odri := db.DRefInfo{
			RefdType:   "rate_limiter.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "custom_rate_limiter",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetActionChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *RateLimiterRuleSpec) GetActionChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetActionChoice().(type) {
	case *RateLimiterRuleSpec_BypassRateLimiter:

	case *RateLimiterRuleSpec_ApplyRateLimiter:

	case *RateLimiterRuleSpec_CustomRateLimiter:
		refdType, err := d.TypeForEntryKind("", "", "rate_limiter.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: rate_limiter")
		}

		vref := m.GetCustomRateLimiter()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "rate_limiter.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateRateLimiterRuleSpec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRateLimiterRuleSpec) ActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRateLimiterRuleSpec) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRateLimiterRuleSpec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RateLimiterRuleSpec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RateLimiterRuleSpec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action_choice"]; exists {
		val := m.GetActionChoice()
		vOpts := append(opts,
			db.WithValidateField("action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetActionChoice().(type) {
	case *RateLimiterRuleSpec_BypassRateLimiter:
		if fv, exists := v.FldValidators["action_choice.bypass_rate_limiter"]; exists {
			val := m.GetActionChoice().(*RateLimiterRuleSpec_BypassRateLimiter).BypassRateLimiter
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("bypass_rate_limiter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RateLimiterRuleSpec_ApplyRateLimiter:
		if fv, exists := v.FldValidators["action_choice.apply_rate_limiter"]; exists {
			val := m.GetActionChoice().(*RateLimiterRuleSpec_ApplyRateLimiter).ApplyRateLimiter
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("apply_rate_limiter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RateLimiterRuleSpec_CustomRateLimiter:
		if fv, exists := v.FldValidators["action_choice.custom_rate_limiter"]; exists {
			val := m.GetActionChoice().(*RateLimiterRuleSpec_CustomRateLimiter).CustomRateLimiter
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("custom_rate_limiter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domain_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_matcher"))
		if err := fv(ctx, m.GetDomainMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRateLimiterRuleSpecValidator = func() *ValidateRateLimiterRuleSpec {
	v := &ValidateRateLimiterRuleSpec{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhActionChoice := v.ActionChoiceValidationRuleHandler
	rulesActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhActionChoice(rulesActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RateLimiterRuleSpec.action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action_choice"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RateLimiterRuleSpec.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	v.FldValidators["action_choice.custom_rate_limiter"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["http_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["path"] = ves_io_schema_policy.PathMatcherTypeValidator().Validate

	v.FldValidators["domain_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	return v
}()

func RateLimiterRuleSpecValidator() db.Validator {
	return DefaultRateLimiterRuleSpecValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstAsnChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGotoPolicyDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimiterDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafActionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAsnChoice().(type) {
	case *ReplaceSpecType_AsnMatcher:
		odrInfos, err = m.GetAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *ReplaceSpecType_AnyAsn:

	case *ReplaceSpecType_AsnList:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDstAsnChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDstAsnChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDstAsnChoice().(type) {
	case *ReplaceSpecType_AnyDstAsn:

	case *ReplaceSpecType_DstAsnList:

	case *ReplaceSpecType_DstAsnMatcher:
		odrInfos, err = m.GetDstAsnMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "dst_asn_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDstIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDstIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDstIpChoice().(type) {
	case *ReplaceSpecType_AnyDstIp:

	case *ReplaceSpecType_DstIpPrefixList:

	case *ReplaceSpecType_DstIpMatcher:
		odrInfos, err = m.GetDstIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "dst_ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *ReplaceSpecType) GetGotoPolicyDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetGotoPolicy() {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.goto_policy[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "goto_policy",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetGotoPolicyDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetGotoPolicyDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy")
	}
	for _, ref := range m.GetGotoPolicy() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetIpChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetIpChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetIpChoice().(type) {
	case *ReplaceSpecType_IpMatcher:
		odrInfos, err = m.GetIpMatcher().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "ip_matcher." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *ReplaceSpecType_AnyIp:

	case *ReplaceSpecType_IpPrefixList:

	}

	return drInfos, err
}

func (m *ReplaceSpecType) GetRateLimiterDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, ref := range m.GetRateLimiter() {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.rate_limiter[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "rate_limiter.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rate_limiter",
			Ref:        ref,
		})
	}

	return drInfos, nil
}

// GetRateLimiterDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetRateLimiterDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "rate_limiter.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: rate_limiter")
	}
	for _, ref := range m.GetRateLimiter() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetWafActionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetWafAction() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetWafAction().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "waf_action." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AsnChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ClientChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateReplaceSpecType) IpChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) QueryParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.QueryParameterMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.QueryParameterMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for query_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.QueryParameterMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.QueryParameterMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated query_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items query_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ArgMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.ArgMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.ArgMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for arg_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.ArgMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.ArgMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated arg_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items arg_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CookieMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.CookieMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.CookieMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cookie_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.CookieMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.CookieMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cookie_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cookie_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WafActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for waf_action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_policy.WafActionValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RateLimiterValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rate_limiter")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rate_limiter")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rate_limiter")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SchemeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for scheme")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for scheme")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated scheme")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items scheme")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ChallengeActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.ChallengeAction)
		return int32(i)
	}
	// ves_io_schema_policy.ChallengeAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.ChallengeAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_action")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GotoPolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for goto_policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated goto_policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items goto_policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_group_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_matcher"))
		if err := fv(ctx, m.GetApiGroupMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["arg_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("arg_matchers"))
		if err := fv(ctx, m.GetArgMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["asn_choice"]; exists {
		val := m.GetAsnChoice()
		vOpts := append(opts,
			db.WithValidateField("asn_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAsnChoice().(type) {
	case *ReplaceSpecType_AsnMatcher:
		if fv, exists := v.FldValidators["asn_choice.asn_matcher"]; exists {
			val := m.GetAsnChoice().(*ReplaceSpecType_AsnMatcher).AsnMatcher
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AnyAsn:
		if fv, exists := v.FldValidators["asn_choice.any_asn"]; exists {
			val := m.GetAsnChoice().(*ReplaceSpecType_AnyAsn).AnyAsn
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("any_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AsnList:
		if fv, exists := v.FldValidators["asn_choice.asn_list"]; exists {
			val := m.GetAsnChoice().(*ReplaceSpecType_AsnList).AsnList
			vOpts := append(opts,
				db.WithValidateField("asn_choice"),
				db.WithValidateField("asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["body_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("body_matcher"))
		if err := fv(ctx, m.GetBodyMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_action"]; exists {

		vOpts := append(opts, db.WithValidateField("challenge_action"))
		if err := fv(ctx, m.GetChallengeAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_choice"]; exists {
		val := m.GetClientChoice()
		vOpts := append(opts,
			db.WithValidateField("client_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientChoice().(type) {
	case *ReplaceSpecType_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*ReplaceSpecType_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*ReplaceSpecType_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*ReplaceSpecType_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AnyClient:
		if fv, exists := v.FldValidators["client_choice.any_client"]; exists {
			val := m.GetClientChoice().(*ReplaceSpecType_AnyClient).AnyClient
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("any_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["client_role"]; exists {

		vOpts := append(opts, db.WithValidateField("client_role"))
		if err := fv(ctx, m.GetClientRole(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["content_rewrite_action"]; exists {

		vOpts := append(opts, db.WithValidateField("content_rewrite_action"))
		if err := fv(ctx, m.GetContentRewriteAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cookie_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("cookie_matchers"))
		if err := fv(ctx, m.GetCookieMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_matcher"))
		if err := fv(ctx, m.GetDomainMatcher(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDstAsnChoice().(type) {
	case *ReplaceSpecType_AnyDstAsn:
		if fv, exists := v.FldValidators["dst_asn_choice.any_dst_asn"]; exists {
			val := m.GetDstAsnChoice().(*ReplaceSpecType_AnyDstAsn).AnyDstAsn
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("any_dst_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DstAsnList:
		if fv, exists := v.FldValidators["dst_asn_choice.dst_asn_list"]; exists {
			val := m.GetDstAsnChoice().(*ReplaceSpecType_DstAsnList).DstAsnList
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("dst_asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DstAsnMatcher:
		if fv, exists := v.FldValidators["dst_asn_choice.dst_asn_matcher"]; exists {
			val := m.GetDstAsnChoice().(*ReplaceSpecType_DstAsnMatcher).DstAsnMatcher
			vOpts := append(opts,
				db.WithValidateField("dst_asn_choice"),
				db.WithValidateField("dst_asn_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetDstIpChoice().(type) {
	case *ReplaceSpecType_AnyDstIp:
		if fv, exists := v.FldValidators["dst_ip_choice.any_dst_ip"]; exists {
			val := m.GetDstIpChoice().(*ReplaceSpecType_AnyDstIp).AnyDstIp
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("any_dst_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DstIpPrefixList:
		if fv, exists := v.FldValidators["dst_ip_choice.dst_ip_prefix_list"]; exists {
			val := m.GetDstIpChoice().(*ReplaceSpecType_DstIpPrefixList).DstIpPrefixList
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("dst_ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DstIpMatcher:
		if fv, exists := v.FldValidators["dst_ip_choice.dst_ip_matcher"]; exists {
			val := m.GetDstIpChoice().(*ReplaceSpecType_DstIpMatcher).DstIpMatcher
			vOpts := append(opts,
				db.WithValidateField("dst_ip_choice"),
				db.WithValidateField("dst_ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["goto_policy"]; exists {
		vOpts := append(opts, db.WithValidateField("goto_policy"))
		if err := fv(ctx, m.GetGotoPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_choice"]; exists {
		val := m.GetIpChoice()
		vOpts := append(opts,
			db.WithValidateField("ip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpChoice().(type) {
	case *ReplaceSpecType_IpMatcher:
		if fv, exists := v.FldValidators["ip_choice.ip_matcher"]; exists {
			val := m.GetIpChoice().(*ReplaceSpecType_IpMatcher).IpMatcher
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AnyIp:
		if fv, exists := v.FldValidators["ip_choice.any_ip"]; exists {
			val := m.GetIpChoice().(*ReplaceSpecType_AnyIp).AnyIp
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("any_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IpPrefixList:
		if fv, exists := v.FldValidators["ip_choice.ip_prefix_list"]; exists {
			val := m.GetIpChoice().(*ReplaceSpecType_IpPrefixList).IpPrefixList
			vOpts := append(opts,
				db.WithValidateField("ip_choice"),
				db.WithValidateField("ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["l4_dest_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("l4_dest_matcher"))
		if err := fv(ctx, m.GetL4DestMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation_bypass"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation_bypass"))
		if err := fv(ctx, m.GetMaliciousUserMitigationBypass(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_params"]; exists {
		vOpts := append(opts, db.WithValidateField("query_params"))
		if err := fv(ctx, m.GetQueryParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limiter"]; exists {
		vOpts := append(opts, db.WithValidateField("rate_limiter"))
		if err := fv(ctx, m.GetRateLimiter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scheme"]; exists {
		vOpts := append(opts, db.WithValidateField("scheme"))
		if err := fv(ctx, m.GetScheme(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("server_selector"))
		if err := fv(ctx, m.GetServerSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["shape_protected_endpoint_action"]; exists {

		vOpts := append(opts, db.WithValidateField("shape_protected_endpoint_action"))
		if err := fv(ctx, m.GetShapeProtectedEndpointAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_fingerprint_matcher"))
		if err := fv(ctx, m.GetTlsFingerprintMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("url_matcher"))
		if err := fv(ctx, m.GetUrlMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_host_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_host_matcher"))
		if err := fv(ctx, m.GetVirtualHostMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_action"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_action"))
		if err := fv(ctx, m.GetWafAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsnChoice := v.AsnChoiceValidationRuleHandler
	rulesAsnChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAsnChoice(rulesAsnChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.asn_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn_choice"] = vFn

	vrhClientChoice := v.ClientChoiceValidationRuleHandler
	rulesClientChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientChoice(rulesClientChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.client_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_choice"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhIpChoice := v.IpChoiceValidationRuleHandler
	rulesIpChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpChoice(rulesIpChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_choice"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	vrhQueryParams := v.QueryParamsValidationRuleHandler
	rulesQueryParams := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhQueryParams(rulesQueryParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.query_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["query_params"] = vFn

	vrhArgMatchers := v.ArgMatchersValidationRuleHandler
	rulesArgMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhArgMatchers(rulesArgMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.arg_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["arg_matchers"] = vFn

	vrhCookieMatchers := v.CookieMatchersValidationRuleHandler
	rulesCookieMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhCookieMatchers(rulesCookieMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cookie_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_matchers"] = vFn

	vrhWafAction := v.WafActionValidationRuleHandler
	rulesWafAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWafAction(rulesWafAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.waf_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_action"] = vFn

	vrhRateLimiter := v.RateLimiterValidationRuleHandler
	rulesRateLimiter := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "2",
	}
	vFn, err = vrhRateLimiter(rulesRateLimiter)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rate_limiter: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter"] = vFn

	vrhScheme := v.SchemeValidationRuleHandler
	rulesScheme := map[string]string{
		"ves.io.schema.rules.repeated.items.string.in": "[\"ANY\", \"HTTP\", \"HTTPS\", \"TCP\", \"TLS\"]",
		"ves.io.schema.rules.repeated.max_items":       "4",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhScheme(rulesScheme)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.scheme: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scheme"] = vFn

	vrhChallengeAction := v.ChallengeActionValidationRuleHandler
	rulesChallengeAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhChallengeAction(rulesChallengeAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.challenge_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_action"] = vFn

	vrhGotoPolicy := v.GotoPolicyValidationRuleHandler
	rulesGotoPolicy := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhGotoPolicy(rulesGotoPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.goto_policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["goto_policy"] = vFn

	v.FldValidators["asn_choice.asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate
	v.FldValidators["asn_choice.asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["dst_asn_choice.dst_asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate
	v.FldValidators["dst_asn_choice.dst_asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate

	v.FldValidators["dst_ip_choice.dst_ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate
	v.FldValidators["dst_ip_choice.dst_ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate

	v.FldValidators["ip_choice.ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate
	v.FldValidators["ip_choice.ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	v.FldValidators["path"] = ves_io_schema_policy.PathMatcherTypeValidator().Validate

	v.FldValidators["http_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["client_role"] = ves_io_schema_policy.RoleMatcherTypeValidator().Validate

	v.FldValidators["api_group_matcher"] = ves_io_schema_policy.StringMatcherTypeValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["body_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["domain_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["virtual_host_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["tls_fingerprint_matcher"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator().Validate

	v.FldValidators["url_matcher"] = ves_io_schema_policy.URLMatcherTypeValidator().Validate

	v.FldValidators["l4_dest_matcher"] = ves_io_schema_policy.L4DestMatcherTypeValidator().Validate

	v.FldValidators["server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["content_rewrite_action"] = ves_io_schema_policy.ContentRewriteActionValidator().Validate

	v.FldValidators["shape_protected_endpoint_action"] = ves_io_schema_policy.ShapeProtectedEndpointActionValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in ChallengeRuleSpec from GlobalSpecType for oneof fields
func (r *ChallengeRuleSpec) SetAsnChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AsnChoice.(type) {
	case nil:
		o.AsnChoice = nil

	case *ChallengeRuleSpec_AnyAsn:
		o.AsnChoice = &GlobalSpecType_AnyAsn{AnyAsn: of.AnyAsn}

	case *ChallengeRuleSpec_AsnList:
		o.AsnChoice = &GlobalSpecType_AsnList{AsnList: of.AsnList}

	case *ChallengeRuleSpec_AsnMatcher:
		o.AsnChoice = &GlobalSpecType_AsnMatcher{AsnMatcher: of.AsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ChallengeRuleSpec) GetAsnChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AsnChoice.(type) {
	case nil:
		r.AsnChoice = nil

	case *GlobalSpecType_AnyAsn:
		r.AsnChoice = &ChallengeRuleSpec_AnyAsn{AnyAsn: of.AnyAsn}

	case *GlobalSpecType_AsnList:
		r.AsnChoice = &ChallengeRuleSpec_AsnList{AsnList: of.AsnList}

	case *GlobalSpecType_AsnMatcher:
		r.AsnChoice = &ChallengeRuleSpec_AsnMatcher{AsnMatcher: of.AsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ChallengeRuleSpec from GlobalSpecType for oneof fields
func (r *ChallengeRuleSpec) SetClientChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientChoice.(type) {
	case nil:
		o.ClientChoice = nil

	case *ChallengeRuleSpec_AnyClient:
		o.ClientChoice = &GlobalSpecType_AnyClient{AnyClient: of.AnyClient}

	case *ChallengeRuleSpec_ClientName:
		o.ClientChoice = &GlobalSpecType_ClientName{ClientName: of.ClientName}

	case *ChallengeRuleSpec_ClientNameMatcher:
		o.ClientChoice = &GlobalSpecType_ClientNameMatcher{ClientNameMatcher: of.ClientNameMatcher}

	case *ChallengeRuleSpec_ClientSelector:
		o.ClientChoice = &GlobalSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ChallengeRuleSpec) GetClientChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientChoice.(type) {
	case nil:
		r.ClientChoice = nil

	case *GlobalSpecType_AnyClient:
		r.ClientChoice = &ChallengeRuleSpec_AnyClient{AnyClient: of.AnyClient}

	case *GlobalSpecType_ClientName:
		r.ClientChoice = &ChallengeRuleSpec_ClientName{ClientName: of.ClientName}

	case *GlobalSpecType_ClientNameMatcher:
		r.ClientChoice = &ChallengeRuleSpec_ClientNameMatcher{ClientNameMatcher: of.ClientNameMatcher}

	case *GlobalSpecType_ClientSelector:
		r.ClientChoice = &ChallengeRuleSpec_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ChallengeRuleSpec from GlobalSpecType for oneof fields
func (r *ChallengeRuleSpec) SetIpChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpChoice.(type) {
	case nil:
		o.IpChoice = nil

	case *ChallengeRuleSpec_AnyIp:
		o.IpChoice = &GlobalSpecType_AnyIp{AnyIp: of.AnyIp}

	case *ChallengeRuleSpec_IpMatcher:
		o.IpChoice = &GlobalSpecType_IpMatcher{IpMatcher: of.IpMatcher}

	case *ChallengeRuleSpec_IpPrefixList:
		o.IpChoice = &GlobalSpecType_IpPrefixList{IpPrefixList: of.IpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ChallengeRuleSpec) GetIpChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpChoice.(type) {
	case nil:
		r.IpChoice = nil

	case *GlobalSpecType_AnyIp:
		r.IpChoice = &ChallengeRuleSpec_AnyIp{AnyIp: of.AnyIp}

	case *GlobalSpecType_IpMatcher:
		r.IpChoice = &ChallengeRuleSpec_IpMatcher{IpMatcher: of.IpMatcher}

	case *GlobalSpecType_IpPrefixList:
		r.IpChoice = &ChallengeRuleSpec_IpPrefixList{IpPrefixList: of.IpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ChallengeRuleSpec) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.ArgMatchers = f.GetArgMatchers()
	m.GetAsnChoiceFromGlobalSpecType(f)
	m.BodyMatcher = f.GetBodyMatcher()

	m.GetClientChoiceFromGlobalSpecType(f)
	m.CookieMatchers = f.GetCookieMatchers()

	if f.GetDomainMatcher() != nil {
		if m.DomainMatcher == nil {
			m.DomainMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		}
		m.DomainMatcher.FromMatcherType(f.GetDomainMatcher())
	} else {
		m.DomainMatcher = nil
	}

	m.ExpirationTimestamp = f.GetExpirationTimestamp()
	m.Headers = f.GetHeaders()
	m.HttpMethod = f.GetHttpMethod()
	m.GetIpChoiceFromGlobalSpecType(f)
	m.Path = f.GetPath()
	m.QueryParams = f.GetQueryParams()
	m.TlsFingerprintMatcher = f.GetTlsFingerprintMatcher()
}

func (m *ChallengeRuleSpec) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.ArgMatchers = m1.ArgMatchers
	m1.SetAsnChoiceToGlobalSpecType(f)
	f.BodyMatcher = m1.BodyMatcher

	m1.SetClientChoiceToGlobalSpecType(f)
	f.CookieMatchers = m1.CookieMatchers

	if m1.DomainMatcher != nil {
		if f.DomainMatcher == nil {
			f.DomainMatcher = &ves_io_schema_policy.MatcherType{}
		}
	} else if f.DomainMatcher != nil {
		f.DomainMatcher = nil
	}

	if m1.DomainMatcher != nil {
		m1.DomainMatcher.ToMatcherType(f.DomainMatcher)
	}

	f.ExpirationTimestamp = m1.ExpirationTimestamp
	f.Headers = m1.Headers
	f.HttpMethod = m1.HttpMethod
	m1.SetIpChoiceToGlobalSpecType(f)
	f.Path = m1.Path
	f.QueryParams = m1.QueryParams
	f.TlsFingerprintMatcher = m1.TlsFingerprintMatcher
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetAsnChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AsnChoice.(type) {
	case nil:
		o.AsnChoice = nil

	case *CreateSpecType_AnyAsn:
		o.AsnChoice = &GlobalSpecType_AnyAsn{AnyAsn: of.AnyAsn}

	case *CreateSpecType_AsnList:
		o.AsnChoice = &GlobalSpecType_AsnList{AsnList: of.AsnList}

	case *CreateSpecType_AsnMatcher:
		o.AsnChoice = &GlobalSpecType_AsnMatcher{AsnMatcher: of.AsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetAsnChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AsnChoice.(type) {
	case nil:
		r.AsnChoice = nil

	case *GlobalSpecType_AnyAsn:
		r.AsnChoice = &CreateSpecType_AnyAsn{AnyAsn: of.AnyAsn}

	case *GlobalSpecType_AsnList:
		r.AsnChoice = &CreateSpecType_AsnList{AsnList: of.AsnList}

	case *GlobalSpecType_AsnMatcher:
		r.AsnChoice = &CreateSpecType_AsnMatcher{AsnMatcher: of.AsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetClientChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientChoice.(type) {
	case nil:
		o.ClientChoice = nil

	case *CreateSpecType_AnyClient:
		o.ClientChoice = &GlobalSpecType_AnyClient{AnyClient: of.AnyClient}

	case *CreateSpecType_ClientName:
		o.ClientChoice = &GlobalSpecType_ClientName{ClientName: of.ClientName}

	case *CreateSpecType_ClientNameMatcher:

		f1 := o.GetClientNameMatcher()
		if f1 == nil {
			f1 = &ves_io_schema_policy.MatcherType{}
		}
		of.ClientNameMatcher.ToMatcherType(f1)
		o.ClientChoice = &GlobalSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *CreateSpecType_ClientSelector:
		o.ClientChoice = &GlobalSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetClientChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientChoice.(type) {
	case nil:
		r.ClientChoice = nil

	case *GlobalSpecType_AnyClient:
		r.ClientChoice = &CreateSpecType_AnyClient{AnyClient: of.AnyClient}

	case *GlobalSpecType_ClientName:
		r.ClientChoice = &CreateSpecType_ClientName{ClientName: of.ClientName}

	case *GlobalSpecType_ClientNameMatcher:

		f1 := &ves_io_schema_policy.MatcherTypeBasic{}
		f1.FromMatcherType(of.ClientNameMatcher)
		r.ClientChoice = &CreateSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *GlobalSpecType_ClientSelector:
		r.ClientChoice = &CreateSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDstAsnChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DstAsnChoice.(type) {
	case nil:
		o.DstAsnChoice = nil

	case *CreateSpecType_AnyDstAsn:
		o.DstAsnChoice = &GlobalSpecType_AnyDstAsn{AnyDstAsn: of.AnyDstAsn}

	case *CreateSpecType_DstAsnList:
		o.DstAsnChoice = &GlobalSpecType_DstAsnList{DstAsnList: of.DstAsnList}

	case *CreateSpecType_DstAsnMatcher:
		o.DstAsnChoice = &GlobalSpecType_DstAsnMatcher{DstAsnMatcher: of.DstAsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDstAsnChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DstAsnChoice.(type) {
	case nil:
		r.DstAsnChoice = nil

	case *GlobalSpecType_AnyDstAsn:
		r.DstAsnChoice = &CreateSpecType_AnyDstAsn{AnyDstAsn: of.AnyDstAsn}

	case *GlobalSpecType_DstAsnList:
		r.DstAsnChoice = &CreateSpecType_DstAsnList{DstAsnList: of.DstAsnList}

	case *GlobalSpecType_DstAsnMatcher:
		r.DstAsnChoice = &CreateSpecType_DstAsnMatcher{DstAsnMatcher: of.DstAsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDstIpChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DstIpChoice.(type) {
	case nil:
		o.DstIpChoice = nil

	case *CreateSpecType_AnyDstIp:
		o.DstIpChoice = &GlobalSpecType_AnyDstIp{AnyDstIp: of.AnyDstIp}

	case *CreateSpecType_DstIpMatcher:
		o.DstIpChoice = &GlobalSpecType_DstIpMatcher{DstIpMatcher: of.DstIpMatcher}

	case *CreateSpecType_DstIpPrefixList:
		o.DstIpChoice = &GlobalSpecType_DstIpPrefixList{DstIpPrefixList: of.DstIpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDstIpChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DstIpChoice.(type) {
	case nil:
		r.DstIpChoice = nil

	case *GlobalSpecType_AnyDstIp:
		r.DstIpChoice = &CreateSpecType_AnyDstIp{AnyDstIp: of.AnyDstIp}

	case *GlobalSpecType_DstIpMatcher:
		r.DstIpChoice = &CreateSpecType_DstIpMatcher{DstIpMatcher: of.DstIpMatcher}

	case *GlobalSpecType_DstIpPrefixList:
		r.DstIpChoice = &CreateSpecType_DstIpPrefixList{DstIpPrefixList: of.DstIpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetIpChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpChoice.(type) {
	case nil:
		o.IpChoice = nil

	case *CreateSpecType_AnyIp:
		o.IpChoice = &GlobalSpecType_AnyIp{AnyIp: of.AnyIp}

	case *CreateSpecType_IpMatcher:
		o.IpChoice = &GlobalSpecType_IpMatcher{IpMatcher: of.IpMatcher}

	case *CreateSpecType_IpPrefixList:
		o.IpChoice = &GlobalSpecType_IpPrefixList{IpPrefixList: of.IpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetIpChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpChoice.(type) {
	case nil:
		r.IpChoice = nil

	case *GlobalSpecType_AnyIp:
		r.IpChoice = &CreateSpecType_AnyIp{AnyIp: of.AnyIp}

	case *GlobalSpecType_IpMatcher:
		r.IpChoice = &CreateSpecType_IpMatcher{IpMatcher: of.IpMatcher}

	case *GlobalSpecType_IpPrefixList:
		r.IpChoice = &CreateSpecType_IpPrefixList{IpPrefixList: of.IpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.ApiGroupMatcher = f.GetApiGroupMatcher()
	m.ArgMatchers = f.GetArgMatchers()
	m.GetAsnChoiceFromGlobalSpecType(f)
	m.BodyMatcher = f.GetBodyMatcher()
	m.ChallengeAction = f.GetChallengeAction()
	m.GetClientChoiceFromGlobalSpecType(f)
	m.ClientRole = f.GetClientRole()
	m.ContentRewriteAction = f.GetContentRewriteAction()
	m.CookieMatchers = f.GetCookieMatchers()

	if f.GetDomainMatcher() != nil {
		if m.DomainMatcher == nil {
			m.DomainMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		}
		m.DomainMatcher.FromMatcherType(f.GetDomainMatcher())
	} else {
		m.DomainMatcher = nil
	}

	m.GetDstAsnChoiceFromGlobalSpecType(f)
	m.GetDstIpChoiceFromGlobalSpecType(f)
	m.ExpirationTimestamp = f.GetExpirationTimestamp()
	m.GotoPolicy = f.GetGotoPolicy()
	m.Headers = f.GetHeaders()
	m.HttpMethod = f.GetHttpMethod()
	m.GetIpChoiceFromGlobalSpecType(f)
	m.L4DestMatcher = f.GetL4DestMatcher()
	m.LabelMatcher = f.GetLabelMatcher()
	m.MaliciousUserMitigationBypass = f.GetMaliciousUserMitigationBypass()
	m.Path = f.GetPath()
	m.PortMatcher = f.GetPortMatcher()
	m.QueryParams = f.GetQueryParams()
	m.RateLimiter = f.GetRateLimiter()
	m.Scheme = f.GetScheme()
	m.ServerSelector = f.GetServerSelector()
	m.ShapeProtectedEndpointAction = f.GetShapeProtectedEndpointAction()
	m.TlsFingerprintMatcher = f.GetTlsFingerprintMatcher()
	m.UrlMatcher = f.GetUrlMatcher()

	if f.GetVirtualHostMatcher() != nil {
		if m.VirtualHostMatcher == nil {
			m.VirtualHostMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		}
		m.VirtualHostMatcher.FromMatcherType(f.GetVirtualHostMatcher())
	} else {
		m.VirtualHostMatcher = nil
	}

	m.WafAction = f.GetWafAction()
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Action = m1.Action
	f.ApiGroupMatcher = m1.ApiGroupMatcher
	f.ArgMatchers = m1.ArgMatchers
	m1.SetAsnChoiceToGlobalSpecType(f)
	f.BodyMatcher = m1.BodyMatcher
	f.ChallengeAction = m1.ChallengeAction
	m1.SetClientChoiceToGlobalSpecType(f)
	f.ClientRole = m1.ClientRole
	f.ContentRewriteAction = m1.ContentRewriteAction
	f.CookieMatchers = m1.CookieMatchers

	if m1.DomainMatcher != nil {
		if f.DomainMatcher == nil {
			f.DomainMatcher = &ves_io_schema_policy.MatcherType{}
		}
	} else if f.DomainMatcher != nil {
		f.DomainMatcher = nil
	}

	if m1.DomainMatcher != nil {
		m1.DomainMatcher.ToMatcherType(f.DomainMatcher)
	}

	m1.SetDstAsnChoiceToGlobalSpecType(f)
	m1.SetDstIpChoiceToGlobalSpecType(f)
	f.ExpirationTimestamp = m1.ExpirationTimestamp
	f.GotoPolicy = m1.GotoPolicy
	f.Headers = m1.Headers
	f.HttpMethod = m1.HttpMethod
	m1.SetIpChoiceToGlobalSpecType(f)
	f.L4DestMatcher = m1.L4DestMatcher
	f.LabelMatcher = m1.LabelMatcher
	f.MaliciousUserMitigationBypass = m1.MaliciousUserMitigationBypass
	f.Path = m1.Path
	f.PortMatcher = m1.PortMatcher
	f.QueryParams = m1.QueryParams
	f.RateLimiter = m1.RateLimiter
	f.Scheme = m1.Scheme
	f.ServerSelector = m1.ServerSelector
	f.ShapeProtectedEndpointAction = m1.ShapeProtectedEndpointAction
	f.TlsFingerprintMatcher = m1.TlsFingerprintMatcher
	f.UrlMatcher = m1.UrlMatcher

	if m1.VirtualHostMatcher != nil {
		if f.VirtualHostMatcher == nil {
			f.VirtualHostMatcher = &ves_io_schema_policy.MatcherType{}
		}
	} else if f.VirtualHostMatcher != nil {
		f.VirtualHostMatcher = nil
	}

	if m1.VirtualHostMatcher != nil {
		m1.VirtualHostMatcher.ToMatcherType(f.VirtualHostMatcher)
	}

	f.WafAction = m1.WafAction
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAsnChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AsnChoice.(type) {
	case nil:
		o.AsnChoice = nil

	case *GetSpecType_AnyAsn:
		o.AsnChoice = &GlobalSpecType_AnyAsn{AnyAsn: of.AnyAsn}

	case *GetSpecType_AsnList:
		o.AsnChoice = &GlobalSpecType_AsnList{AsnList: of.AsnList}

	case *GetSpecType_AsnMatcher:
		o.AsnChoice = &GlobalSpecType_AsnMatcher{AsnMatcher: of.AsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAsnChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AsnChoice.(type) {
	case nil:
		r.AsnChoice = nil

	case *GlobalSpecType_AnyAsn:
		r.AsnChoice = &GetSpecType_AnyAsn{AnyAsn: of.AnyAsn}

	case *GlobalSpecType_AsnList:
		r.AsnChoice = &GetSpecType_AsnList{AsnList: of.AsnList}

	case *GlobalSpecType_AsnMatcher:
		r.AsnChoice = &GetSpecType_AsnMatcher{AsnMatcher: of.AsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetClientChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientChoice.(type) {
	case nil:
		o.ClientChoice = nil

	case *GetSpecType_AnyClient:
		o.ClientChoice = &GlobalSpecType_AnyClient{AnyClient: of.AnyClient}

	case *GetSpecType_ClientName:
		o.ClientChoice = &GlobalSpecType_ClientName{ClientName: of.ClientName}

	case *GetSpecType_ClientNameMatcher:

		f1 := o.GetClientNameMatcher()
		if f1 == nil {
			f1 = &ves_io_schema_policy.MatcherType{}
		}
		of.ClientNameMatcher.ToMatcherType(f1)
		o.ClientChoice = &GlobalSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *GetSpecType_ClientSelector:
		o.ClientChoice = &GlobalSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetClientChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientChoice.(type) {
	case nil:
		r.ClientChoice = nil

	case *GlobalSpecType_AnyClient:
		r.ClientChoice = &GetSpecType_AnyClient{AnyClient: of.AnyClient}

	case *GlobalSpecType_ClientName:
		r.ClientChoice = &GetSpecType_ClientName{ClientName: of.ClientName}

	case *GlobalSpecType_ClientNameMatcher:

		f1 := &ves_io_schema_policy.MatcherTypeBasic{}
		f1.FromMatcherType(of.ClientNameMatcher)
		r.ClientChoice = &GetSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *GlobalSpecType_ClientSelector:
		r.ClientChoice = &GetSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDstAsnChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DstAsnChoice.(type) {
	case nil:
		o.DstAsnChoice = nil

	case *GetSpecType_AnyDstAsn:
		o.DstAsnChoice = &GlobalSpecType_AnyDstAsn{AnyDstAsn: of.AnyDstAsn}

	case *GetSpecType_DstAsnList:
		o.DstAsnChoice = &GlobalSpecType_DstAsnList{DstAsnList: of.DstAsnList}

	case *GetSpecType_DstAsnMatcher:
		o.DstAsnChoice = &GlobalSpecType_DstAsnMatcher{DstAsnMatcher: of.DstAsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDstAsnChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DstAsnChoice.(type) {
	case nil:
		r.DstAsnChoice = nil

	case *GlobalSpecType_AnyDstAsn:
		r.DstAsnChoice = &GetSpecType_AnyDstAsn{AnyDstAsn: of.AnyDstAsn}

	case *GlobalSpecType_DstAsnList:
		r.DstAsnChoice = &GetSpecType_DstAsnList{DstAsnList: of.DstAsnList}

	case *GlobalSpecType_DstAsnMatcher:
		r.DstAsnChoice = &GetSpecType_DstAsnMatcher{DstAsnMatcher: of.DstAsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDstIpChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DstIpChoice.(type) {
	case nil:
		o.DstIpChoice = nil

	case *GetSpecType_AnyDstIp:
		o.DstIpChoice = &GlobalSpecType_AnyDstIp{AnyDstIp: of.AnyDstIp}

	case *GetSpecType_DstIpMatcher:
		o.DstIpChoice = &GlobalSpecType_DstIpMatcher{DstIpMatcher: of.DstIpMatcher}

	case *GetSpecType_DstIpPrefixList:
		o.DstIpChoice = &GlobalSpecType_DstIpPrefixList{DstIpPrefixList: of.DstIpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDstIpChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DstIpChoice.(type) {
	case nil:
		r.DstIpChoice = nil

	case *GlobalSpecType_AnyDstIp:
		r.DstIpChoice = &GetSpecType_AnyDstIp{AnyDstIp: of.AnyDstIp}

	case *GlobalSpecType_DstIpMatcher:
		r.DstIpChoice = &GetSpecType_DstIpMatcher{DstIpMatcher: of.DstIpMatcher}

	case *GlobalSpecType_DstIpPrefixList:
		r.DstIpChoice = &GetSpecType_DstIpPrefixList{DstIpPrefixList: of.DstIpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetIpChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpChoice.(type) {
	case nil:
		o.IpChoice = nil

	case *GetSpecType_AnyIp:
		o.IpChoice = &GlobalSpecType_AnyIp{AnyIp: of.AnyIp}

	case *GetSpecType_IpMatcher:
		o.IpChoice = &GlobalSpecType_IpMatcher{IpMatcher: of.IpMatcher}

	case *GetSpecType_IpPrefixList:
		o.IpChoice = &GlobalSpecType_IpPrefixList{IpPrefixList: of.IpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetIpChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpChoice.(type) {
	case nil:
		r.IpChoice = nil

	case *GlobalSpecType_AnyIp:
		r.IpChoice = &GetSpecType_AnyIp{AnyIp: of.AnyIp}

	case *GlobalSpecType_IpMatcher:
		r.IpChoice = &GetSpecType_IpMatcher{IpMatcher: of.IpMatcher}

	case *GlobalSpecType_IpPrefixList:
		r.IpChoice = &GetSpecType_IpPrefixList{IpPrefixList: of.IpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.ApiGroupMatcher = f.GetApiGroupMatcher()
	m.ArgMatchers = f.GetArgMatchers()
	m.GetAsnChoiceFromGlobalSpecType(f)
	m.BodyMatcher = f.GetBodyMatcher()
	m.ChallengeAction = f.GetChallengeAction()
	m.GetClientChoiceFromGlobalSpecType(f)
	m.ClientRole = f.GetClientRole()
	m.ContentRewriteAction = f.GetContentRewriteAction()
	m.CookieMatchers = f.GetCookieMatchers()

	if f.GetDomainMatcher() != nil {
		if m.DomainMatcher == nil {
			m.DomainMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		}
		m.DomainMatcher.FromMatcherType(f.GetDomainMatcher())
	} else {
		m.DomainMatcher = nil
	}

	m.GetDstAsnChoiceFromGlobalSpecType(f)
	m.GetDstIpChoiceFromGlobalSpecType(f)
	m.ExpirationTimestamp = f.GetExpirationTimestamp()
	m.GotoPolicy = f.GetGotoPolicy()
	m.Headers = f.GetHeaders()
	m.HttpMethod = f.GetHttpMethod()
	m.GetIpChoiceFromGlobalSpecType(f)
	m.L4DestMatcher = f.GetL4DestMatcher()
	m.LabelMatcher = f.GetLabelMatcher()
	m.MaliciousUserMitigationBypass = f.GetMaliciousUserMitigationBypass()
	m.Path = f.GetPath()
	m.PortMatcher = f.GetPortMatcher()
	m.QueryParams = f.GetQueryParams()
	m.RateLimiter = f.GetRateLimiter()
	m.Scheme = f.GetScheme()
	m.ServerSelector = f.GetServerSelector()
	m.ShapeProtectedEndpointAction = f.GetShapeProtectedEndpointAction()
	m.TlsFingerprintMatcher = f.GetTlsFingerprintMatcher()
	m.UrlMatcher = f.GetUrlMatcher()

	if f.GetVirtualHostMatcher() != nil {
		if m.VirtualHostMatcher == nil {
			m.VirtualHostMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		}
		m.VirtualHostMatcher.FromMatcherType(f.GetVirtualHostMatcher())
	} else {
		m.VirtualHostMatcher = nil
	}

	m.WafAction = f.GetWafAction()
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Action = m1.Action
	f.ApiGroupMatcher = m1.ApiGroupMatcher
	f.ArgMatchers = m1.ArgMatchers
	m1.SetAsnChoiceToGlobalSpecType(f)
	f.BodyMatcher = m1.BodyMatcher
	f.ChallengeAction = m1.ChallengeAction
	m1.SetClientChoiceToGlobalSpecType(f)
	f.ClientRole = m1.ClientRole
	f.ContentRewriteAction = m1.ContentRewriteAction
	f.CookieMatchers = m1.CookieMatchers

	if m1.DomainMatcher != nil {
		if f.DomainMatcher == nil {
			f.DomainMatcher = &ves_io_schema_policy.MatcherType{}
		}
	} else if f.DomainMatcher != nil {
		f.DomainMatcher = nil
	}

	if m1.DomainMatcher != nil {
		m1.DomainMatcher.ToMatcherType(f.DomainMatcher)
	}

	m1.SetDstAsnChoiceToGlobalSpecType(f)
	m1.SetDstIpChoiceToGlobalSpecType(f)
	f.ExpirationTimestamp = m1.ExpirationTimestamp
	f.GotoPolicy = m1.GotoPolicy
	f.Headers = m1.Headers
	f.HttpMethod = m1.HttpMethod
	m1.SetIpChoiceToGlobalSpecType(f)
	f.L4DestMatcher = m1.L4DestMatcher
	f.LabelMatcher = m1.LabelMatcher
	f.MaliciousUserMitigationBypass = m1.MaliciousUserMitigationBypass
	f.Path = m1.Path
	f.PortMatcher = m1.PortMatcher
	f.QueryParams = m1.QueryParams
	f.RateLimiter = m1.RateLimiter
	f.Scheme = m1.Scheme
	f.ServerSelector = m1.ServerSelector
	f.ShapeProtectedEndpointAction = m1.ShapeProtectedEndpointAction
	f.TlsFingerprintMatcher = m1.TlsFingerprintMatcher
	f.UrlMatcher = m1.UrlMatcher

	if m1.VirtualHostMatcher != nil {
		if f.VirtualHostMatcher == nil {
			f.VirtualHostMatcher = &ves_io_schema_policy.MatcherType{}
		}
	} else if f.VirtualHostMatcher != nil {
		f.VirtualHostMatcher = nil
	}

	if m1.VirtualHostMatcher != nil {
		m1.VirtualHostMatcher.ToMatcherType(f.VirtualHostMatcher)
	}

	f.WafAction = m1.WafAction
}

func (m *RateLimiterRuleSpec) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}

	if f.GetDomainMatcher() != nil {
		if m.DomainMatcher == nil {
			m.DomainMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		}
		m.DomainMatcher.FromMatcherType(f.GetDomainMatcher())
	} else {
		m.DomainMatcher = nil
	}

	m.Headers = f.GetHeaders()
	m.HttpMethod = f.GetHttpMethod()
	m.Path = f.GetPath()
}

func (m *RateLimiterRuleSpec) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}

	if m1.DomainMatcher != nil {
		if f.DomainMatcher == nil {
			f.DomainMatcher = &ves_io_schema_policy.MatcherType{}
		}
	} else if f.DomainMatcher != nil {
		f.DomainMatcher = nil
	}

	if m1.DomainMatcher != nil {
		m1.DomainMatcher.ToMatcherType(f.DomainMatcher)
	}

	f.Headers = m1.Headers
	f.HttpMethod = m1.HttpMethod
	f.Path = m1.Path
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetAsnChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AsnChoice.(type) {
	case nil:
		o.AsnChoice = nil

	case *ReplaceSpecType_AnyAsn:
		o.AsnChoice = &GlobalSpecType_AnyAsn{AnyAsn: of.AnyAsn}

	case *ReplaceSpecType_AsnList:
		o.AsnChoice = &GlobalSpecType_AsnList{AsnList: of.AsnList}

	case *ReplaceSpecType_AsnMatcher:
		o.AsnChoice = &GlobalSpecType_AsnMatcher{AsnMatcher: of.AsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetAsnChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AsnChoice.(type) {
	case nil:
		r.AsnChoice = nil

	case *GlobalSpecType_AnyAsn:
		r.AsnChoice = &ReplaceSpecType_AnyAsn{AnyAsn: of.AnyAsn}

	case *GlobalSpecType_AsnList:
		r.AsnChoice = &ReplaceSpecType_AsnList{AsnList: of.AsnList}

	case *GlobalSpecType_AsnMatcher:
		r.AsnChoice = &ReplaceSpecType_AsnMatcher{AsnMatcher: of.AsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetClientChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientChoice.(type) {
	case nil:
		o.ClientChoice = nil

	case *ReplaceSpecType_AnyClient:
		o.ClientChoice = &GlobalSpecType_AnyClient{AnyClient: of.AnyClient}

	case *ReplaceSpecType_ClientName:
		o.ClientChoice = &GlobalSpecType_ClientName{ClientName: of.ClientName}

	case *ReplaceSpecType_ClientNameMatcher:

		f1 := o.GetClientNameMatcher()
		if f1 == nil {
			f1 = &ves_io_schema_policy.MatcherType{}
		}
		of.ClientNameMatcher.ToMatcherType(f1)
		o.ClientChoice = &GlobalSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *ReplaceSpecType_ClientSelector:
		o.ClientChoice = &GlobalSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetClientChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientChoice.(type) {
	case nil:
		r.ClientChoice = nil

	case *GlobalSpecType_AnyClient:
		r.ClientChoice = &ReplaceSpecType_AnyClient{AnyClient: of.AnyClient}

	case *GlobalSpecType_ClientName:
		r.ClientChoice = &ReplaceSpecType_ClientName{ClientName: of.ClientName}

	case *GlobalSpecType_ClientNameMatcher:

		f1 := &ves_io_schema_policy.MatcherTypeBasic{}
		f1.FromMatcherType(of.ClientNameMatcher)
		r.ClientChoice = &ReplaceSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *GlobalSpecType_ClientSelector:
		r.ClientChoice = &ReplaceSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDstAsnChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DstAsnChoice.(type) {
	case nil:
		o.DstAsnChoice = nil

	case *ReplaceSpecType_AnyDstAsn:
		o.DstAsnChoice = &GlobalSpecType_AnyDstAsn{AnyDstAsn: of.AnyDstAsn}

	case *ReplaceSpecType_DstAsnList:
		o.DstAsnChoice = &GlobalSpecType_DstAsnList{DstAsnList: of.DstAsnList}

	case *ReplaceSpecType_DstAsnMatcher:
		o.DstAsnChoice = &GlobalSpecType_DstAsnMatcher{DstAsnMatcher: of.DstAsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDstAsnChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DstAsnChoice.(type) {
	case nil:
		r.DstAsnChoice = nil

	case *GlobalSpecType_AnyDstAsn:
		r.DstAsnChoice = &ReplaceSpecType_AnyDstAsn{AnyDstAsn: of.AnyDstAsn}

	case *GlobalSpecType_DstAsnList:
		r.DstAsnChoice = &ReplaceSpecType_DstAsnList{DstAsnList: of.DstAsnList}

	case *GlobalSpecType_DstAsnMatcher:
		r.DstAsnChoice = &ReplaceSpecType_DstAsnMatcher{DstAsnMatcher: of.DstAsnMatcher}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDstIpChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DstIpChoice.(type) {
	case nil:
		o.DstIpChoice = nil

	case *ReplaceSpecType_AnyDstIp:
		o.DstIpChoice = &GlobalSpecType_AnyDstIp{AnyDstIp: of.AnyDstIp}

	case *ReplaceSpecType_DstIpMatcher:
		o.DstIpChoice = &GlobalSpecType_DstIpMatcher{DstIpMatcher: of.DstIpMatcher}

	case *ReplaceSpecType_DstIpPrefixList:
		o.DstIpChoice = &GlobalSpecType_DstIpPrefixList{DstIpPrefixList: of.DstIpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDstIpChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DstIpChoice.(type) {
	case nil:
		r.DstIpChoice = nil

	case *GlobalSpecType_AnyDstIp:
		r.DstIpChoice = &ReplaceSpecType_AnyDstIp{AnyDstIp: of.AnyDstIp}

	case *GlobalSpecType_DstIpMatcher:
		r.DstIpChoice = &ReplaceSpecType_DstIpMatcher{DstIpMatcher: of.DstIpMatcher}

	case *GlobalSpecType_DstIpPrefixList:
		r.DstIpChoice = &ReplaceSpecType_DstIpPrefixList{DstIpPrefixList: of.DstIpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetIpChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpChoice.(type) {
	case nil:
		o.IpChoice = nil

	case *ReplaceSpecType_AnyIp:
		o.IpChoice = &GlobalSpecType_AnyIp{AnyIp: of.AnyIp}

	case *ReplaceSpecType_IpMatcher:
		o.IpChoice = &GlobalSpecType_IpMatcher{IpMatcher: of.IpMatcher}

	case *ReplaceSpecType_IpPrefixList:
		o.IpChoice = &GlobalSpecType_IpPrefixList{IpPrefixList: of.IpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetIpChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpChoice.(type) {
	case nil:
		r.IpChoice = nil

	case *GlobalSpecType_AnyIp:
		r.IpChoice = &ReplaceSpecType_AnyIp{AnyIp: of.AnyIp}

	case *GlobalSpecType_IpMatcher:
		r.IpChoice = &ReplaceSpecType_IpMatcher{IpMatcher: of.IpMatcher}

	case *GlobalSpecType_IpPrefixList:
		r.IpChoice = &ReplaceSpecType_IpPrefixList{IpPrefixList: of.IpPrefixList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.ApiGroupMatcher = f.GetApiGroupMatcher()
	m.ArgMatchers = f.GetArgMatchers()
	m.GetAsnChoiceFromGlobalSpecType(f)
	m.BodyMatcher = f.GetBodyMatcher()
	m.ChallengeAction = f.GetChallengeAction()
	m.GetClientChoiceFromGlobalSpecType(f)
	m.ClientRole = f.GetClientRole()
	m.ContentRewriteAction = f.GetContentRewriteAction()
	m.CookieMatchers = f.GetCookieMatchers()

	if f.GetDomainMatcher() != nil {
		if m.DomainMatcher == nil {
			m.DomainMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		}
		m.DomainMatcher.FromMatcherType(f.GetDomainMatcher())
	} else {
		m.DomainMatcher = nil
	}

	m.GetDstAsnChoiceFromGlobalSpecType(f)
	m.GetDstIpChoiceFromGlobalSpecType(f)
	m.ExpirationTimestamp = f.GetExpirationTimestamp()
	m.GotoPolicy = f.GetGotoPolicy()
	m.Headers = f.GetHeaders()
	m.HttpMethod = f.GetHttpMethod()
	m.GetIpChoiceFromGlobalSpecType(f)
	m.L4DestMatcher = f.GetL4DestMatcher()
	m.LabelMatcher = f.GetLabelMatcher()
	m.MaliciousUserMitigationBypass = f.GetMaliciousUserMitigationBypass()
	m.Path = f.GetPath()
	m.PortMatcher = f.GetPortMatcher()
	m.QueryParams = f.GetQueryParams()
	m.RateLimiter = f.GetRateLimiter()
	m.Scheme = f.GetScheme()
	m.ServerSelector = f.GetServerSelector()
	m.ShapeProtectedEndpointAction = f.GetShapeProtectedEndpointAction()
	m.TlsFingerprintMatcher = f.GetTlsFingerprintMatcher()
	m.UrlMatcher = f.GetUrlMatcher()

	if f.GetVirtualHostMatcher() != nil {
		if m.VirtualHostMatcher == nil {
			m.VirtualHostMatcher = &ves_io_schema_policy.MatcherTypeBasic{}
		}
		m.VirtualHostMatcher.FromMatcherType(f.GetVirtualHostMatcher())
	} else {
		m.VirtualHostMatcher = nil
	}

	m.WafAction = f.GetWafAction()
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.Action = m1.Action
	f.ApiGroupMatcher = m1.ApiGroupMatcher
	f.ArgMatchers = m1.ArgMatchers
	m1.SetAsnChoiceToGlobalSpecType(f)
	f.BodyMatcher = m1.BodyMatcher
	f.ChallengeAction = m1.ChallengeAction
	m1.SetClientChoiceToGlobalSpecType(f)
	f.ClientRole = m1.ClientRole
	f.ContentRewriteAction = m1.ContentRewriteAction
	f.CookieMatchers = m1.CookieMatchers

	if m1.DomainMatcher != nil {
		if f.DomainMatcher == nil {
			f.DomainMatcher = &ves_io_schema_policy.MatcherType{}
		}
	} else if f.DomainMatcher != nil {
		f.DomainMatcher = nil
	}

	if m1.DomainMatcher != nil {
		m1.DomainMatcher.ToMatcherType(f.DomainMatcher)
	}

	m1.SetDstAsnChoiceToGlobalSpecType(f)
	m1.SetDstIpChoiceToGlobalSpecType(f)
	f.ExpirationTimestamp = m1.ExpirationTimestamp
	f.GotoPolicy = m1.GotoPolicy
	f.Headers = m1.Headers
	f.HttpMethod = m1.HttpMethod
	m1.SetIpChoiceToGlobalSpecType(f)
	f.L4DestMatcher = m1.L4DestMatcher
	f.LabelMatcher = m1.LabelMatcher
	f.MaliciousUserMitigationBypass = m1.MaliciousUserMitigationBypass
	f.Path = m1.Path
	f.PortMatcher = m1.PortMatcher
	f.QueryParams = m1.QueryParams
	f.RateLimiter = m1.RateLimiter
	f.Scheme = m1.Scheme
	f.ServerSelector = m1.ServerSelector
	f.ShapeProtectedEndpointAction = m1.ShapeProtectedEndpointAction
	f.TlsFingerprintMatcher = m1.TlsFingerprintMatcher
	f.UrlMatcher = m1.UrlMatcher

	if m1.VirtualHostMatcher != nil {
		if f.VirtualHostMatcher == nil {
			f.VirtualHostMatcher = &ves_io_schema_policy.MatcherType{}
		}
	} else if f.VirtualHostMatcher != nil {
		f.VirtualHostMatcher = nil
	}

	if m1.VirtualHostMatcher != nil {
		m1.VirtualHostMatcher.ToMatcherType(f.VirtualHostMatcher)
	}

	f.WafAction = m1.WafAction
}

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_dns_zone "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_zone"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraDnsZone is implementation of Volterra's DnsZone resources
func resourceVolterraDnsZone() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraDnsZoneCreate,
		Read:   resourceVolterraDnsZoneRead,
		Update: resourceVolterraDnsZoneUpdate,
		Delete: resourceVolterraDnsZoneDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"primary": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"allow_http_lb_managed_records": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_rr_set_group": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"ttl": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"a_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"aaaa_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"afsdb_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hostname": {
																Type:     schema.TypeString,
																Required: true,
															},

															"subtype": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"alias_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"value": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"caa_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"flags": {
																Type:     schema.TypeInt,
																Optional: true,
															},

															"tag": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"value": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"cds_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"sha1_digest": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"sha256_digest": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"sha384_digest": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"ds_key_algorithm": {
																Type:     schema.TypeString,
																Required: true,
															},

															"key_tag": {
																Type:     schema.TypeInt,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"cert_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"algorithm": {
																Type:     schema.TypeString,
																Required: true,
															},

															"cert_key_tag": {
																Type:     schema.TypeInt,
																Required: true,
															},

															"cert_type": {
																Type:     schema.TypeString,
																Required: true,
															},

															"certificate": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"cname_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"value": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"dlv_record": {

										Type:       schema.TypeList,
										MaxItems:   1,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"values": {

													Type:       schema.TypeList,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"sha1_digest": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"sha256_digest": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"sha384_digest": {

																Type:       schema.TypeList,
																MaxItems:   1,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},

															"ds_key_algorithm": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"key_tag": {
																Type:       schema.TypeInt,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},

									"ds_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"sha1_digest": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"sha256_digest": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"sha384_digest": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"digest": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"ds_key_algorithm": {
																Type:     schema.TypeString,
																Required: true,
															},

															"key_tag": {
																Type:     schema.TypeInt,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"eui48_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"eui64_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"value": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"lb_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"value": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"loc_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"altitude": {
																Type:     schema.TypeFloat,
																Required: true,
															},

															"horizontal_precision": {
																Type:     schema.TypeFloat,
																Optional: true,
															},

															"latitude_degree": {
																Type:     schema.TypeInt,
																Required: true,
															},

															"latitude_hemisphere": {
																Type:     schema.TypeString,
																Required: true,
															},

															"latitude_minute": {
																Type:     schema.TypeInt,
																Optional: true,
															},

															"latitude_second": {
																Type:     schema.TypeFloat,
																Optional: true,
															},

															"location_diameter": {
																Type:     schema.TypeFloat,
																Optional: true,
															},

															"longitude_degree": {
																Type:     schema.TypeInt,
																Required: true,
															},

															"longitude_hemisphere": {
																Type:     schema.TypeString,
																Required: true,
															},

															"longitude_minute": {
																Type:     schema.TypeInt,
																Optional: true,
															},

															"longitude_second": {
																Type:     schema.TypeFloat,
																Optional: true,
															},

															"vertical_precision": {
																Type:     schema.TypeFloat,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"mx_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"domain": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"priority": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"naptr_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"flags": {
																Type:     schema.TypeString,
																Required: true,
															},

															"order": {
																Type:     schema.TypeInt,
																Required: true,
															},

															"preference": {
																Type:     schema.TypeInt,
																Required: true,
															},

															"regexp": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"replacement": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"service": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"ns_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"ptr_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"srv_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"port": {
																Type:     schema.TypeInt,
																Optional: true,
															},

															"priority": {
																Type:     schema.TypeInt,
																Optional: true,
															},

															"target": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"weight": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"sshfp_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"algorithm": {
																Type:     schema.TypeString,
																Required: true,
															},

															"fingerprint": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"sha1_fingerprint": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"fingerprint": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"sha256_fingerprint": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"fingerprint": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"fingerprinttype": {
																Type:       schema.TypeString,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},
														},
													},
												},
											},
										},
									},

									"tlsa_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"certificate_association_data": {
																Type:     schema.TypeString,
																Required: true,
															},

															"certificate_usage": {
																Type:     schema.TypeString,
																Required: true,
															},

															"matching_type": {
																Type:     schema.TypeString,
																Required: true,
															},

															"selector": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},
											},
										},
									},

									"txt_record": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"values": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"dnssec_mode": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
									},
								},
							},
						},

						"rr_set_group": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"metadata": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"disable": {
													Type:       schema.TypeBool,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"rr_set": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"ttl": {
													Type:     schema.TypeInt,
													Optional: true,
												},

												"a_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"aaaa_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"afsdb_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"hostname": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"subtype": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"alias_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"value": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"caa_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"flags": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},

																		"tag": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"value": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"cds_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"sha1_digest": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"sha256_digest": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"sha384_digest": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"ds_key_algorithm": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"key_tag": {
																			Type:     schema.TypeInt,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"cert_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"algorithm": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"cert_key_tag": {
																			Type:     schema.TypeInt,
																			Required: true,
																		},

																		"cert_type": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"certificate": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"cname_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"value": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"dlv_record": {

													Type:       schema.TypeList,
													MaxItems:   1,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:       schema.TypeString,
																Optional:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
															},

															"values": {

																Type:       schema.TypeList,
																Required:   true,
																Deprecated: "This field is deprecated and will be removed in future release.",
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"sha1_digest": {

																			Type:       schema.TypeList,
																			MaxItems:   1,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"sha256_digest": {

																			Type:       schema.TypeList,
																			MaxItems:   1,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"sha384_digest": {

																			Type:       schema.TypeList,
																			MaxItems:   1,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:       schema.TypeString,
																						Required:   true,
																						Deprecated: "This field is deprecated and will be removed in future release.",
																					},
																				},
																			},
																		},

																		"ds_key_algorithm": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"key_tag": {
																			Type:       schema.TypeInt,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"ds_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"sha1_digest": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"sha256_digest": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"sha384_digest": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"digest": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"ds_key_algorithm": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"key_tag": {
																			Type:     schema.TypeInt,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"eui48_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"value": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"eui64_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"value": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"lb_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"value": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"loc_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"altitude": {
																			Type:     schema.TypeFloat,
																			Required: true,
																		},

																		"horizontal_precision": {
																			Type:     schema.TypeFloat,
																			Optional: true,
																		},

																		"latitude_degree": {
																			Type:     schema.TypeInt,
																			Required: true,
																		},

																		"latitude_hemisphere": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"latitude_minute": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},

																		"latitude_second": {
																			Type:     schema.TypeFloat,
																			Optional: true,
																		},

																		"location_diameter": {
																			Type:     schema.TypeFloat,
																			Optional: true,
																		},

																		"longitude_degree": {
																			Type:     schema.TypeInt,
																			Required: true,
																		},

																		"longitude_hemisphere": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"longitude_minute": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},

																		"longitude_second": {
																			Type:     schema.TypeFloat,
																			Optional: true,
																		},

																		"vertical_precision": {
																			Type:     schema.TypeFloat,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"mx_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"domain": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"priority": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"naptr_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"flags": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"order": {
																			Type:     schema.TypeInt,
																			Required: true,
																		},

																		"preference": {
																			Type:     schema.TypeInt,
																			Required: true,
																		},

																		"regexp": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"replacement": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"service": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ns_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ptr_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"srv_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"port": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},

																		"priority": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},

																		"target": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"weight": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"sshfp_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"algorithm": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"fingerprint": {
																			Type:       schema.TypeString,
																			Optional:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},

																		"sha1_fingerprint": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fingerprint": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"sha256_fingerprint": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"fingerprint": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},

																		"fingerprinttype": {
																			Type:       schema.TypeString,
																			Required:   true,
																			Deprecated: "This field is deprecated and will be removed in future release.",
																		},
																	},
																},
															},
														},
													},
												},

												"tlsa_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"certificate_association_data": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"certificate_usage": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"matching_type": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"selector": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"txt_record": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"values": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"default_soa_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"soa_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"expire": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"negative_ttl": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"refresh": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"retry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"ttl": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"secondary": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"primary_servers": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"tsig_key_algorithm": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"tsig_key_name": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"tsig_key_value": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info_internal": {

										Type:       schema.TypeList,
										MaxItems:   1,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"store_provider": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"secret_encoding_type": {
										Type:       schema.TypeString,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
									},

									"blindfold_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"vault_secret_info": {

										Type:       schema.TypeList,
										MaxItems:   1,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"key": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"location": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"provider": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"secret_encoding": {
													Type:       schema.TypeString,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},

												"version": {
													Type:       schema.TypeInt,
													Optional:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},

									"wingman_secret_info": {

										Type:       schema.TypeList,
										MaxItems:   1,
										Optional:   true,
										Deprecated: "This field is deprecated and will be removed in future release.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:       schema.TypeString,
													Required:   true,
													Deprecated: "This field is deprecated and will be removed in future release.",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraDnsZoneCreate creates DnsZone resource
func resourceVolterraDnsZoneCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_dns_zone.CreateSpecType{}
	createReq := &ves_io_schema_dns_zone.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//dns_type

	dnsTypeTypeFound := false

	if v, ok := d.GetOk("primary"); ok && !dnsTypeTypeFound {

		dnsTypeTypeFound = true
		dnsTypeInt := &ves_io_schema_dns_zone.CreateSpecType_Primary{}
		dnsTypeInt.Primary = &ves_io_schema_dns_zone.PrimaryDNSCreateSpecType{}
		createSpec.DnsType = dnsTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["allow_http_lb_managed_records"]; ok && !isIntfNil(v) {

					dnsTypeInt.Primary.AllowHttpLbManagedRecords = v.(bool)

				}

				if v, ok := cs["default_rr_set_group"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					defaultRrSetGroup := make([]*ves_io_schema_dns_zone.RRSet, len(sl))
					dnsTypeInt.Primary.DefaultRrSetGroup = defaultRrSetGroup
					for i, set := range sl {
						if set != nil {
							defaultRrSetGroup[i] = &ves_io_schema_dns_zone.RRSet{}
							defaultRrSetGroupMapStrToI := set.(map[string]interface{})

							if w, ok := defaultRrSetGroupMapStrToI["description"]; ok && !isIntfNil(w) {
								defaultRrSetGroup[i].Description = w.(string)
							}

							if w, ok := defaultRrSetGroupMapStrToI["ttl"]; ok && !isIntfNil(w) {
								defaultRrSetGroup[i].Ttl = uint32(w.(int))
							}

							typeRecordSetTypeFound := false

							if v, ok := defaultRrSetGroupMapStrToI["a_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_ARecord{}
								typeRecordSetInt.ARecord = &ves_io_schema_dns_zone.DNSAResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.ARecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.ARecord.Values = ls

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["aaaa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AaaaRecord{}
								typeRecordSetInt.AaaaRecord = &ves_io_schema_dns_zone.DNSAAAAResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.AaaaRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.AaaaRecord.Values = ls

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["afsdb_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AfsdbRecord{}
								typeRecordSetInt.AfsdbRecord = &ves_io_schema_dns_zone.DNSAFSDBRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.AfsdbRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.AFSDBRecordValue, len(sl))
											typeRecordSetInt.AfsdbRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.AFSDBRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["hostname"]; ok && !isIntfNil(w) {
														values[i].Hostname = w.(string)
													}

													if v, ok := valuesMapStrToI["subtype"]; ok && !isIntfNil(v) {

														values[i].Subtype = ves_io_schema_dns_zone.AFSDBRecordSubtype(ves_io_schema_dns_zone.AFSDBRecordSubtype_value[v.(string)])

													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["alias_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AliasRecord{}
								typeRecordSetInt.AliasRecord = &ves_io_schema_dns_zone.DNSAliasResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.AliasRecord.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											typeRecordSetInt.AliasRecord.Value = v.(string)

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["caa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CaaRecord{}
								typeRecordSetInt.CaaRecord = &ves_io_schema_dns_zone.DNSCAAResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CaaRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.CertificationAuthorityAuthorization, len(sl))
											typeRecordSetInt.CaaRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.CertificationAuthorityAuthorization{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["flags"]; ok && !isIntfNil(w) {
														values[i].Flags = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["tag"]; ok && !isIntfNil(w) {
														values[i].Tag = w.(string)
													}

													if w, ok := valuesMapStrToI["value"]; ok && !isIntfNil(w) {
														values[i].Value = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["cds_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CdsRecord{}
								typeRecordSetInt.CdsRecord = &ves_io_schema_dns_zone.DNSCDSRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CdsRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
											typeRecordSetInt.CdsRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													digestChoiceTypeFound := false

													if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
														digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha1Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
														digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha256Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
														digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha384Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

														values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
														values[i].KeyTag = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["cert_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CertRecord{}
								typeRecordSetInt.CertRecord = &ves_io_schema_dns_zone.CERTResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CertRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.CERTRecordValue, len(sl))
											typeRecordSetInt.CertRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.CERTRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if v, ok := valuesMapStrToI["algorithm"]; ok && !isIntfNil(v) {

														values[i].Algorithm = ves_io_schema_dns_zone.CERTAlgorithm(ves_io_schema_dns_zone.CERTAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["cert_key_tag"]; ok && !isIntfNil(w) {
														values[i].CertKeyTag = uint32(w.(int))
													}

													if v, ok := valuesMapStrToI["cert_type"]; ok && !isIntfNil(v) {

														values[i].CertType = ves_io_schema_dns_zone.CERTType(ves_io_schema_dns_zone.CERTType_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["certificate"]; ok && !isIntfNil(w) {
														values[i].Certificate = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["cname_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CnameRecord{}
								typeRecordSetInt.CnameRecord = &ves_io_schema_dns_zone.DNSCNAMEResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CnameRecord.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CnameRecord.Value = v.(string)

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["dlv_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_DlvRecord{}
								typeRecordSetInt.DlvRecord = &ves_io_schema_dns_zone.DLVResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.DlvRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
											typeRecordSetInt.DlvRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													digestChoiceTypeFound := false

													if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
														digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha1Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
														digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha256Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
														digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha384Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

														values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
														values[i].KeyTag = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["ds_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_DsRecord{}
								typeRecordSetInt.DsRecord = &ves_io_schema_dns_zone.DNSDSRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.DsRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
											typeRecordSetInt.DsRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													digestChoiceTypeFound := false

													if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
														digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha1Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
														digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha256Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
														digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha384Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

														values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
														values[i].KeyTag = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["eui48_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_Eui48Record{}
								typeRecordSetInt.Eui48Record = &ves_io_schema_dns_zone.DNSEUI48ResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.Eui48Record.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											typeRecordSetInt.Eui48Record.Value = v.(string)

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["eui64_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_Eui64Record{}
								typeRecordSetInt.Eui64Record = &ves_io_schema_dns_zone.DNSEUI64ResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.Eui64Record.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											typeRecordSetInt.Eui64Record.Value = v.(string)

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["lb_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_LbRecord{}
								typeRecordSetInt.LbRecord = &ves_io_schema_dns_zone.DNSLBResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.LbRecord.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											valueInt := &ves_io_schema_views.ObjectRefType{}
											typeRecordSetInt.LbRecord.Value = valueInt

											for _, set := range sl {
												if set != nil {
													vMapToStrVal := set.(map[string]interface{})
													if val, ok := vMapToStrVal["name"]; ok && !isIntfNil(v) {
														valueInt.Name = val.(string)
													}
													if val, ok := vMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														valueInt.Namespace = val.(string)
													}

													if val, ok := vMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														valueInt.Tenant = val.(string)
													}
												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["loc_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_LocRecord{}
								typeRecordSetInt.LocRecord = &ves_io_schema_dns_zone.DNSLOCResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.LocRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.LOCValue, len(sl))
											typeRecordSetInt.LocRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.LOCValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["altitude"]; ok && !isIntfNil(w) {
														values[i].Altitude = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["horizontal_precision"]; ok && !isIntfNil(w) {
														values[i].HorizontalPrecision = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["latitude_degree"]; ok && !isIntfNil(w) {
														values[i].LatitudeDegree = int32(w.(int))
													}

													if v, ok := valuesMapStrToI["latitude_hemisphere"]; ok && !isIntfNil(v) {

														values[i].LatitudeHemisphere = ves_io_schema_dns_zone.LatitudeHemisphere(ves_io_schema_dns_zone.LatitudeHemisphere_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["latitude_minute"]; ok && !isIntfNil(w) {
														values[i].LatitudeMinute = int32(w.(int))
													}

													if w, ok := valuesMapStrToI["latitude_second"]; ok && !isIntfNil(w) {
														values[i].LatitudeSecond = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["location_diameter"]; ok && !isIntfNil(w) {
														values[i].LocationDiameter = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["longitude_degree"]; ok && !isIntfNil(w) {
														values[i].LongitudeDegree = int32(w.(int))
													}

													if v, ok := valuesMapStrToI["longitude_hemisphere"]; ok && !isIntfNil(v) {

														values[i].LongitudeHemisphere = ves_io_schema_dns_zone.LongitudeHemisphere(ves_io_schema_dns_zone.LongitudeHemisphere_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["longitude_minute"]; ok && !isIntfNil(w) {
														values[i].LongitudeMinute = int32(w.(int))
													}

													if w, ok := valuesMapStrToI["longitude_second"]; ok && !isIntfNil(w) {
														values[i].LongitudeSecond = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["vertical_precision"]; ok && !isIntfNil(w) {
														values[i].VerticalPrecision = float32(w.(float64))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["mx_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_MxRecord{}
								typeRecordSetInt.MxRecord = &ves_io_schema_dns_zone.DNSMXResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.MxRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.MailExchanger, len(sl))
											typeRecordSetInt.MxRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.MailExchanger{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["domain"]; ok && !isIntfNil(w) {
														values[i].Domain = w.(string)
													}

													if w, ok := valuesMapStrToI["priority"]; ok && !isIntfNil(w) {
														values[i].Priority = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["naptr_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_NaptrRecord{}
								typeRecordSetInt.NaptrRecord = &ves_io_schema_dns_zone.DNSNAPTRResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.NaptrRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.NAPTRValue, len(sl))
											typeRecordSetInt.NaptrRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.NAPTRValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["flags"]; ok && !isIntfNil(w) {
														values[i].Flags = w.(string)
													}

													if w, ok := valuesMapStrToI["order"]; ok && !isIntfNil(w) {
														values[i].Order = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["preference"]; ok && !isIntfNil(w) {
														values[i].Preference = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["regexp"]; ok && !isIntfNil(w) {
														values[i].Regexp = w.(string)
													}

													if w, ok := valuesMapStrToI["replacement"]; ok && !isIntfNil(w) {
														values[i].Replacement = w.(string)
													}

													if w, ok := valuesMapStrToI["service"]; ok && !isIntfNil(w) {
														values[i].Service = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["ns_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_NsRecord{}
								typeRecordSetInt.NsRecord = &ves_io_schema_dns_zone.DNSNSResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.NsRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.NsRecord.Values = ls

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["ptr_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_PtrRecord{}
								typeRecordSetInt.PtrRecord = &ves_io_schema_dns_zone.DNSPTRResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.PtrRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.PtrRecord.Values = ls

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["srv_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_SrvRecord{}
								typeRecordSetInt.SrvRecord = &ves_io_schema_dns_zone.DNSSRVResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.SrvRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.SRVService, len(sl))
											typeRecordSetInt.SrvRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.SRVService{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["port"]; ok && !isIntfNil(w) {
														values[i].Port = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["priority"]; ok && !isIntfNil(w) {
														values[i].Priority = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["target"]; ok && !isIntfNil(w) {
														values[i].Target = w.(string)
													}

													if w, ok := valuesMapStrToI["weight"]; ok && !isIntfNil(w) {
														values[i].Weight = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["sshfp_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_SshfpRecord{}
								typeRecordSetInt.SshfpRecord = &ves_io_schema_dns_zone.SSHFPResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.SshfpRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.SSHFPRecordValue, len(sl))
											typeRecordSetInt.SshfpRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.SSHFPRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if v, ok := valuesMapStrToI["algorithm"]; ok && !isIntfNil(v) {

														values[i].Algorithm = ves_io_schema_dns_zone.SSHFPAlgorithm(ves_io_schema_dns_zone.SSHFPAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["fingerprint"]; ok && !isIntfNil(w) {
														values[i].Fingerprint = w.(string)
													}

													fingerprintTypeTypeFound := false

													if v, ok := valuesMapStrToI["sha1_fingerprint"]; ok && !isIntfNil(v) && !fingerprintTypeTypeFound {

														fingerprintTypeTypeFound = true
														fingerprintTypeInt := &ves_io_schema_dns_zone.SSHFPRecordValue_Sha1Fingerprint{}
														fingerprintTypeInt.Sha1Fingerprint = &ves_io_schema_dns_zone.SHA1Fingerprint{}
														values[i].FingerprintType = fingerprintTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["fingerprint"]; ok && !isIntfNil(v) {

																	fingerprintTypeInt.Sha1Fingerprint.Fingerprint = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha256_fingerprint"]; ok && !isIntfNil(v) && !fingerprintTypeTypeFound {

														fingerprintTypeTypeFound = true
														fingerprintTypeInt := &ves_io_schema_dns_zone.SSHFPRecordValue_Sha256Fingerprint{}
														fingerprintTypeInt.Sha256Fingerprint = &ves_io_schema_dns_zone.SHA256Fingerprint{}
														values[i].FingerprintType = fingerprintTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["fingerprint"]; ok && !isIntfNil(v) {

																	fingerprintTypeInt.Sha256Fingerprint.Fingerprint = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["fingerprinttype"]; ok && !isIntfNil(v) {

														values[i].Fingerprinttype = ves_io_schema_dns_zone.SSHFPFingerprintType(ves_io_schema_dns_zone.SSHFPFingerprintType_value[v.(string)])

													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["tlsa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_TlsaRecord{}
								typeRecordSetInt.TlsaRecord = &ves_io_schema_dns_zone.TLSAResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.TlsaRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.TLSARecordValue, len(sl))
											typeRecordSetInt.TlsaRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.TLSARecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["certificate_association_data"]; ok && !isIntfNil(w) {
														values[i].CertificateAssociationData = w.(string)
													}

													if v, ok := valuesMapStrToI["certificate_usage"]; ok && !isIntfNil(v) {

														values[i].CertificateUsage = ves_io_schema_dns_zone.TLSARecordCertificateUsage(ves_io_schema_dns_zone.TLSARecordCertificateUsage_value[v.(string)])

													}

													if v, ok := valuesMapStrToI["matching_type"]; ok && !isIntfNil(v) {

														values[i].MatchingType = ves_io_schema_dns_zone.TLSARecordMatchingType(ves_io_schema_dns_zone.TLSARecordMatchingType_value[v.(string)])

													}

													if v, ok := valuesMapStrToI["selector"]; ok && !isIntfNil(v) {

														values[i].Selector = ves_io_schema_dns_zone.TLSARecordCSelector(ves_io_schema_dns_zone.TLSARecordCSelector_value[v.(string)])

													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["txt_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_TxtRecord{}
								typeRecordSetInt.TxtRecord = &ves_io_schema_dns_zone.DNSTXTResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.TxtRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.TxtRecord.Values = ls

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["dnssec_mode"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					dnssecMode := &ves_io_schema_dns_zone.DNSSECMode{}
					dnsTypeInt.Primary.DnssecMode = dnssecMode
					for _, set := range sl {
						if set != nil {
							dnssecModeMapStrToI := set.(map[string]interface{})

							modeTypeFound := false

							if v, ok := dnssecModeMapStrToI["disable"]; ok && !isIntfNil(v) && !modeTypeFound {

								modeTypeFound = true

								if v.(bool) {
									modeInt := &ves_io_schema_dns_zone.DNSSECMode_Disable{}
									modeInt.Disable = &ves_io_schema.Empty{}
									dnssecMode.Mode = modeInt
								}

							}

							if _, ok := dnssecModeMapStrToI["enable"]; ok && !modeTypeFound {

								modeTypeFound = true
								modeInt := &ves_io_schema_dns_zone.DNSSECMode_Enable{}
								modeInt.Enable = &ves_io_schema_dns_zone.DNSSECModeEnable{}
								dnssecMode.Mode = modeInt

							}

						}
					}

				}

				if v, ok := cs["rr_set_group"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					rrSetGroup := make([]*ves_io_schema_dns_zone.RRSetGroup, len(sl))
					dnsTypeInt.Primary.RrSetGroup = rrSetGroup
					for i, set := range sl {
						if set != nil {
							rrSetGroup[i] = &ves_io_schema_dns_zone.RRSetGroup{}
							rrSetGroupMapStrToI := set.(map[string]interface{})

							if v, ok := rrSetGroupMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								rrSetGroup[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
											metadata.Disable = w.(bool)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := rrSetGroupMapStrToI["rr_set"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rrSet := make([]*ves_io_schema_dns_zone.RRSet, len(sl))
								rrSetGroup[i].RrSet = rrSet
								for i, set := range sl {
									if set != nil {
										rrSet[i] = &ves_io_schema_dns_zone.RRSet{}
										rrSetMapStrToI := set.(map[string]interface{})

										if w, ok := rrSetMapStrToI["description"]; ok && !isIntfNil(w) {
											rrSet[i].Description = w.(string)
										}

										if w, ok := rrSetMapStrToI["ttl"]; ok && !isIntfNil(w) {
											rrSet[i].Ttl = uint32(w.(int))
										}

										typeRecordSetTypeFound := false

										if v, ok := rrSetMapStrToI["a_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_ARecord{}
											typeRecordSetInt.ARecord = &ves_io_schema_dns_zone.DNSAResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.ARecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.ARecord.Values = ls

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["aaaa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AaaaRecord{}
											typeRecordSetInt.AaaaRecord = &ves_io_schema_dns_zone.DNSAAAAResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.AaaaRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.AaaaRecord.Values = ls

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["afsdb_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AfsdbRecord{}
											typeRecordSetInt.AfsdbRecord = &ves_io_schema_dns_zone.DNSAFSDBRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.AfsdbRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.AFSDBRecordValue, len(sl))
														typeRecordSetInt.AfsdbRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.AFSDBRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["hostname"]; ok && !isIntfNil(w) {
																	values[i].Hostname = w.(string)
																}

																if v, ok := valuesMapStrToI["subtype"]; ok && !isIntfNil(v) {

																	values[i].Subtype = ves_io_schema_dns_zone.AFSDBRecordSubtype(ves_io_schema_dns_zone.AFSDBRecordSubtype_value[v.(string)])

																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["alias_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AliasRecord{}
											typeRecordSetInt.AliasRecord = &ves_io_schema_dns_zone.DNSAliasResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.AliasRecord.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														typeRecordSetInt.AliasRecord.Value = v.(string)

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["caa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CaaRecord{}
											typeRecordSetInt.CaaRecord = &ves_io_schema_dns_zone.DNSCAAResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CaaRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.CertificationAuthorityAuthorization, len(sl))
														typeRecordSetInt.CaaRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.CertificationAuthorityAuthorization{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["flags"]; ok && !isIntfNil(w) {
																	values[i].Flags = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["tag"]; ok && !isIntfNil(w) {
																	values[i].Tag = w.(string)
																}

																if w, ok := valuesMapStrToI["value"]; ok && !isIntfNil(w) {
																	values[i].Value = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["cds_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CdsRecord{}
											typeRecordSetInt.CdsRecord = &ves_io_schema_dns_zone.DNSCDSRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CdsRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
														typeRecordSetInt.CdsRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																digestChoiceTypeFound := false

																if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
																	digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha1Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
																	digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha256Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
																	digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha384Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

																	values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
																	values[i].KeyTag = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["cert_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CertRecord{}
											typeRecordSetInt.CertRecord = &ves_io_schema_dns_zone.CERTResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CertRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.CERTRecordValue, len(sl))
														typeRecordSetInt.CertRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.CERTRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if v, ok := valuesMapStrToI["algorithm"]; ok && !isIntfNil(v) {

																	values[i].Algorithm = ves_io_schema_dns_zone.CERTAlgorithm(ves_io_schema_dns_zone.CERTAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["cert_key_tag"]; ok && !isIntfNil(w) {
																	values[i].CertKeyTag = uint32(w.(int))
																}

																if v, ok := valuesMapStrToI["cert_type"]; ok && !isIntfNil(v) {

																	values[i].CertType = ves_io_schema_dns_zone.CERTType(ves_io_schema_dns_zone.CERTType_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["certificate"]; ok && !isIntfNil(w) {
																	values[i].Certificate = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["cname_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CnameRecord{}
											typeRecordSetInt.CnameRecord = &ves_io_schema_dns_zone.DNSCNAMEResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CnameRecord.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CnameRecord.Value = v.(string)

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["dlv_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_DlvRecord{}
											typeRecordSetInt.DlvRecord = &ves_io_schema_dns_zone.DLVResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.DlvRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
														typeRecordSetInt.DlvRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																digestChoiceTypeFound := false

																if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
																	digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha1Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
																	digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha256Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
																	digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha384Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

																	values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
																	values[i].KeyTag = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["ds_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_DsRecord{}
											typeRecordSetInt.DsRecord = &ves_io_schema_dns_zone.DNSDSRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.DsRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
														typeRecordSetInt.DsRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																digestChoiceTypeFound := false

																if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
																	digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha1Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
																	digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha256Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
																	digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha384Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

																	values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
																	values[i].KeyTag = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["eui48_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_Eui48Record{}
											typeRecordSetInt.Eui48Record = &ves_io_schema_dns_zone.DNSEUI48ResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.Eui48Record.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														typeRecordSetInt.Eui48Record.Value = v.(string)

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["eui64_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_Eui64Record{}
											typeRecordSetInt.Eui64Record = &ves_io_schema_dns_zone.DNSEUI64ResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.Eui64Record.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														typeRecordSetInt.Eui64Record.Value = v.(string)

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["lb_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_LbRecord{}
											typeRecordSetInt.LbRecord = &ves_io_schema_dns_zone.DNSLBResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.LbRecord.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														valueInt := &ves_io_schema_views.ObjectRefType{}
														typeRecordSetInt.LbRecord.Value = valueInt

														for _, set := range sl {
															if set != nil {
																vMapToStrVal := set.(map[string]interface{})
																if val, ok := vMapToStrVal["name"]; ok && !isIntfNil(v) {
																	valueInt.Name = val.(string)
																}
																if val, ok := vMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																	valueInt.Namespace = val.(string)
																}

																if val, ok := vMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																	valueInt.Tenant = val.(string)
																}
															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["loc_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_LocRecord{}
											typeRecordSetInt.LocRecord = &ves_io_schema_dns_zone.DNSLOCResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.LocRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.LOCValue, len(sl))
														typeRecordSetInt.LocRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.LOCValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["altitude"]; ok && !isIntfNil(w) {
																	values[i].Altitude = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["horizontal_precision"]; ok && !isIntfNil(w) {
																	values[i].HorizontalPrecision = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["latitude_degree"]; ok && !isIntfNil(w) {
																	values[i].LatitudeDegree = int32(w.(int))
																}

																if v, ok := valuesMapStrToI["latitude_hemisphere"]; ok && !isIntfNil(v) {

																	values[i].LatitudeHemisphere = ves_io_schema_dns_zone.LatitudeHemisphere(ves_io_schema_dns_zone.LatitudeHemisphere_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["latitude_minute"]; ok && !isIntfNil(w) {
																	values[i].LatitudeMinute = int32(w.(int))
																}

																if w, ok := valuesMapStrToI["latitude_second"]; ok && !isIntfNil(w) {
																	values[i].LatitudeSecond = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["location_diameter"]; ok && !isIntfNil(w) {
																	values[i].LocationDiameter = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["longitude_degree"]; ok && !isIntfNil(w) {
																	values[i].LongitudeDegree = int32(w.(int))
																}

																if v, ok := valuesMapStrToI["longitude_hemisphere"]; ok && !isIntfNil(v) {

																	values[i].LongitudeHemisphere = ves_io_schema_dns_zone.LongitudeHemisphere(ves_io_schema_dns_zone.LongitudeHemisphere_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["longitude_minute"]; ok && !isIntfNil(w) {
																	values[i].LongitudeMinute = int32(w.(int))
																}

																if w, ok := valuesMapStrToI["longitude_second"]; ok && !isIntfNil(w) {
																	values[i].LongitudeSecond = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["vertical_precision"]; ok && !isIntfNil(w) {
																	values[i].VerticalPrecision = float32(w.(float64))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["mx_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_MxRecord{}
											typeRecordSetInt.MxRecord = &ves_io_schema_dns_zone.DNSMXResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.MxRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.MailExchanger, len(sl))
														typeRecordSetInt.MxRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.MailExchanger{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["domain"]; ok && !isIntfNil(w) {
																	values[i].Domain = w.(string)
																}

																if w, ok := valuesMapStrToI["priority"]; ok && !isIntfNil(w) {
																	values[i].Priority = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["naptr_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_NaptrRecord{}
											typeRecordSetInt.NaptrRecord = &ves_io_schema_dns_zone.DNSNAPTRResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.NaptrRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.NAPTRValue, len(sl))
														typeRecordSetInt.NaptrRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.NAPTRValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["flags"]; ok && !isIntfNil(w) {
																	values[i].Flags = w.(string)
																}

																if w, ok := valuesMapStrToI["order"]; ok && !isIntfNil(w) {
																	values[i].Order = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["preference"]; ok && !isIntfNil(w) {
																	values[i].Preference = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["regexp"]; ok && !isIntfNil(w) {
																	values[i].Regexp = w.(string)
																}

																if w, ok := valuesMapStrToI["replacement"]; ok && !isIntfNil(w) {
																	values[i].Replacement = w.(string)
																}

																if w, ok := valuesMapStrToI["service"]; ok && !isIntfNil(w) {
																	values[i].Service = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["ns_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_NsRecord{}
											typeRecordSetInt.NsRecord = &ves_io_schema_dns_zone.DNSNSResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.NsRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.NsRecord.Values = ls

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["ptr_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_PtrRecord{}
											typeRecordSetInt.PtrRecord = &ves_io_schema_dns_zone.DNSPTRResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.PtrRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.PtrRecord.Values = ls

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["srv_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_SrvRecord{}
											typeRecordSetInt.SrvRecord = &ves_io_schema_dns_zone.DNSSRVResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.SrvRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.SRVService, len(sl))
														typeRecordSetInt.SrvRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.SRVService{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["port"]; ok && !isIntfNil(w) {
																	values[i].Port = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["priority"]; ok && !isIntfNil(w) {
																	values[i].Priority = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["target"]; ok && !isIntfNil(w) {
																	values[i].Target = w.(string)
																}

																if w, ok := valuesMapStrToI["weight"]; ok && !isIntfNil(w) {
																	values[i].Weight = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["sshfp_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_SshfpRecord{}
											typeRecordSetInt.SshfpRecord = &ves_io_schema_dns_zone.SSHFPResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.SshfpRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.SSHFPRecordValue, len(sl))
														typeRecordSetInt.SshfpRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.SSHFPRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if v, ok := valuesMapStrToI["algorithm"]; ok && !isIntfNil(v) {

																	values[i].Algorithm = ves_io_schema_dns_zone.SSHFPAlgorithm(ves_io_schema_dns_zone.SSHFPAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["fingerprint"]; ok && !isIntfNil(w) {
																	values[i].Fingerprint = w.(string)
																}

																fingerprintTypeTypeFound := false

																if v, ok := valuesMapStrToI["sha1_fingerprint"]; ok && !isIntfNil(v) && !fingerprintTypeTypeFound {

																	fingerprintTypeTypeFound = true
																	fingerprintTypeInt := &ves_io_schema_dns_zone.SSHFPRecordValue_Sha1Fingerprint{}
																	fingerprintTypeInt.Sha1Fingerprint = &ves_io_schema_dns_zone.SHA1Fingerprint{}
																	values[i].FingerprintType = fingerprintTypeInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["fingerprint"]; ok && !isIntfNil(v) {

																				fingerprintTypeInt.Sha1Fingerprint.Fingerprint = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha256_fingerprint"]; ok && !isIntfNil(v) && !fingerprintTypeTypeFound {

																	fingerprintTypeTypeFound = true
																	fingerprintTypeInt := &ves_io_schema_dns_zone.SSHFPRecordValue_Sha256Fingerprint{}
																	fingerprintTypeInt.Sha256Fingerprint = &ves_io_schema_dns_zone.SHA256Fingerprint{}
																	values[i].FingerprintType = fingerprintTypeInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["fingerprint"]; ok && !isIntfNil(v) {

																				fingerprintTypeInt.Sha256Fingerprint.Fingerprint = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["fingerprinttype"]; ok && !isIntfNil(v) {

																	values[i].Fingerprinttype = ves_io_schema_dns_zone.SSHFPFingerprintType(ves_io_schema_dns_zone.SSHFPFingerprintType_value[v.(string)])

																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["tlsa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_TlsaRecord{}
											typeRecordSetInt.TlsaRecord = &ves_io_schema_dns_zone.TLSAResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.TlsaRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.TLSARecordValue, len(sl))
														typeRecordSetInt.TlsaRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.TLSARecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["certificate_association_data"]; ok && !isIntfNil(w) {
																	values[i].CertificateAssociationData = w.(string)
																}

																if v, ok := valuesMapStrToI["certificate_usage"]; ok && !isIntfNil(v) {

																	values[i].CertificateUsage = ves_io_schema_dns_zone.TLSARecordCertificateUsage(ves_io_schema_dns_zone.TLSARecordCertificateUsage_value[v.(string)])

																}

																if v, ok := valuesMapStrToI["matching_type"]; ok && !isIntfNil(v) {

																	values[i].MatchingType = ves_io_schema_dns_zone.TLSARecordMatchingType(ves_io_schema_dns_zone.TLSARecordMatchingType_value[v.(string)])

																}

																if v, ok := valuesMapStrToI["selector"]; ok && !isIntfNil(v) {

																	values[i].Selector = ves_io_schema_dns_zone.TLSARecordCSelector(ves_io_schema_dns_zone.TLSARecordCSelector_value[v.(string)])

																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["txt_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_TxtRecord{}
											typeRecordSetInt.TxtRecord = &ves_io_schema_dns_zone.DNSTXTResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.TxtRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.TxtRecord.Values = ls

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				soaRecordParametersChoiceTypeFound := false

				if v, ok := cs["default_soa_parameters"]; ok && !isIntfNil(v) && !soaRecordParametersChoiceTypeFound {

					soaRecordParametersChoiceTypeFound = true

					if v.(bool) {
						soaRecordParametersChoiceInt := &ves_io_schema_dns_zone.PrimaryDNSCreateSpecType_DefaultSoaParameters{}
						soaRecordParametersChoiceInt.DefaultSoaParameters = &ves_io_schema.Empty{}
						dnsTypeInt.Primary.SoaRecordParametersChoice = soaRecordParametersChoiceInt
					}

				}

				if v, ok := cs["soa_parameters"]; ok && !isIntfNil(v) && !soaRecordParametersChoiceTypeFound {

					soaRecordParametersChoiceTypeFound = true
					soaRecordParametersChoiceInt := &ves_io_schema_dns_zone.PrimaryDNSCreateSpecType_SoaParameters{}
					soaRecordParametersChoiceInt.SoaParameters = &ves_io_schema_dns_zone.SOARecordParameterConfig{}
					dnsTypeInt.Primary.SoaRecordParametersChoice = soaRecordParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["expire"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.Expire = uint32(v.(int))

							}

							if v, ok := cs["negative_ttl"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.NegativeTtl = uint32(v.(int))

							}

							if v, ok := cs["refresh"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.Refresh = uint32(v.(int))

							}

							if v, ok := cs["retry"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.Retry = uint32(v.(int))

							}

							if v, ok := cs["ttl"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.Ttl = uint32(v.(int))

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("secondary"); ok && !dnsTypeTypeFound {

		dnsTypeTypeFound = true
		dnsTypeInt := &ves_io_schema_dns_zone.CreateSpecType_Secondary{}
		dnsTypeInt.Secondary = &ves_io_schema_dns_zone.SecondaryDNSCreateSpecType{}
		createSpec.DnsType = dnsTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["primary_servers"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						ls[i] = v.(string)
					}
					dnsTypeInt.Secondary.PrimaryServers = ls

				}

				if v, ok := cs["tsig_key_algorithm"]; ok && !isIntfNil(v) {

					dnsTypeInt.Secondary.TsigKeyAlgorithm = ves_io_schema_dns_zone.TSIGKeyAlgorithm(ves_io_schema_dns_zone.TSIGKeyAlgorithm_value[v.(string)])

				}

				if v, ok := cs["tsig_key_name"]; ok && !isIntfNil(v) {

					dnsTypeInt.Secondary.TsigKeyName = v.(string)

				}

				if v, ok := cs["tsig_key_value"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tsigKeyValue := &ves_io_schema.SecretType{}
					dnsTypeInt.Secondary.TsigKeyValue = tsigKeyValue
					for _, set := range sl {
						if set != nil {
							tsigKeyValueMapStrToI := set.(map[string]interface{})

							if v, ok := tsigKeyValueMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
								tsigKeyValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
								for _, set := range sl {
									if set != nil {
										blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

										if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
											blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
										}

										if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
											blindfoldSecretInfoInternal.Location = w.(string)
										}

										if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
											blindfoldSecretInfoInternal.StoreProvider = w.(string)
										}

									}
								}

							}

							if v, ok := tsigKeyValueMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

								tsigKeyValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							secretInfoOneofTypeFound := false

							if v, ok := tsigKeyValueMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								tsigKeyValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := tsigKeyValueMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								tsigKeyValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

							if v, ok := tsigKeyValueMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
								secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
								tsigKeyValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["key"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

										}

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

										}

										if v, ok := cs["version"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

										}

									}
								}

							}

							if v, ok := tsigKeyValueMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
								secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
								tsigKeyValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra DnsZone object with struct: %+v", createReq)

	createDnsZoneResp, err := client.CreateObject(context.Background(), ves_io_schema_dns_zone.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating DnsZone: %s", err)
	}
	d.SetId(createDnsZoneResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraDnsZoneRead(d, meta)
}

func resourceVolterraDnsZoneRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_dns_zone.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] DnsZone %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra DnsZone %q: %s", d.Id(), err)
	}
	return setDnsZoneFields(client, d, resp)
}

func setDnsZoneFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraDnsZoneUpdate updates DnsZone resource
func resourceVolterraDnsZoneUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_dns_zone.ReplaceSpecType{}
	updateReq := &ves_io_schema_dns_zone.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	dnsTypeTypeFound := false

	if v, ok := d.GetOk("primary"); ok && !dnsTypeTypeFound {

		dnsTypeTypeFound = true
		dnsTypeInt := &ves_io_schema_dns_zone.ReplaceSpecType_Primary{}
		dnsTypeInt.Primary = &ves_io_schema_dns_zone.PrimaryDNSCreateSpecType{}
		updateSpec.DnsType = dnsTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["allow_http_lb_managed_records"]; ok && !isIntfNil(v) {

					dnsTypeInt.Primary.AllowHttpLbManagedRecords = v.(bool)

				}

				if v, ok := cs["default_rr_set_group"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					defaultRrSetGroup := make([]*ves_io_schema_dns_zone.RRSet, len(sl))
					dnsTypeInt.Primary.DefaultRrSetGroup = defaultRrSetGroup
					for i, set := range sl {
						if set != nil {
							defaultRrSetGroup[i] = &ves_io_schema_dns_zone.RRSet{}
							defaultRrSetGroupMapStrToI := set.(map[string]interface{})

							if w, ok := defaultRrSetGroupMapStrToI["description"]; ok && !isIntfNil(w) {
								defaultRrSetGroup[i].Description = w.(string)
							}

							if w, ok := defaultRrSetGroupMapStrToI["ttl"]; ok && !isIntfNil(w) {
								defaultRrSetGroup[i].Ttl = uint32(w.(int))
							}

							typeRecordSetTypeFound := false

							if v, ok := defaultRrSetGroupMapStrToI["a_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_ARecord{}
								typeRecordSetInt.ARecord = &ves_io_schema_dns_zone.DNSAResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.ARecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.ARecord.Values = ls

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["aaaa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AaaaRecord{}
								typeRecordSetInt.AaaaRecord = &ves_io_schema_dns_zone.DNSAAAAResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.AaaaRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.AaaaRecord.Values = ls

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["afsdb_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AfsdbRecord{}
								typeRecordSetInt.AfsdbRecord = &ves_io_schema_dns_zone.DNSAFSDBRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.AfsdbRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.AFSDBRecordValue, len(sl))
											typeRecordSetInt.AfsdbRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.AFSDBRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["hostname"]; ok && !isIntfNil(w) {
														values[i].Hostname = w.(string)
													}

													if v, ok := valuesMapStrToI["subtype"]; ok && !isIntfNil(v) {

														values[i].Subtype = ves_io_schema_dns_zone.AFSDBRecordSubtype(ves_io_schema_dns_zone.AFSDBRecordSubtype_value[v.(string)])

													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["alias_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AliasRecord{}
								typeRecordSetInt.AliasRecord = &ves_io_schema_dns_zone.DNSAliasResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.AliasRecord.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											typeRecordSetInt.AliasRecord.Value = v.(string)

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["caa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CaaRecord{}
								typeRecordSetInt.CaaRecord = &ves_io_schema_dns_zone.DNSCAAResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CaaRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.CertificationAuthorityAuthorization, len(sl))
											typeRecordSetInt.CaaRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.CertificationAuthorityAuthorization{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["flags"]; ok && !isIntfNil(w) {
														values[i].Flags = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["tag"]; ok && !isIntfNil(w) {
														values[i].Tag = w.(string)
													}

													if w, ok := valuesMapStrToI["value"]; ok && !isIntfNil(w) {
														values[i].Value = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["cds_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CdsRecord{}
								typeRecordSetInt.CdsRecord = &ves_io_schema_dns_zone.DNSCDSRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CdsRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
											typeRecordSetInt.CdsRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													digestChoiceTypeFound := false

													if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
														digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha1Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
														digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha256Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
														digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha384Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

														values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
														values[i].KeyTag = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["cert_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CertRecord{}
								typeRecordSetInt.CertRecord = &ves_io_schema_dns_zone.CERTResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CertRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.CERTRecordValue, len(sl))
											typeRecordSetInt.CertRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.CERTRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if v, ok := valuesMapStrToI["algorithm"]; ok && !isIntfNil(v) {

														values[i].Algorithm = ves_io_schema_dns_zone.CERTAlgorithm(ves_io_schema_dns_zone.CERTAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["cert_key_tag"]; ok && !isIntfNil(w) {
														values[i].CertKeyTag = uint32(w.(int))
													}

													if v, ok := valuesMapStrToI["cert_type"]; ok && !isIntfNil(v) {

														values[i].CertType = ves_io_schema_dns_zone.CERTType(ves_io_schema_dns_zone.CERTType_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["certificate"]; ok && !isIntfNil(w) {
														values[i].Certificate = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["cname_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CnameRecord{}
								typeRecordSetInt.CnameRecord = &ves_io_schema_dns_zone.DNSCNAMEResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CnameRecord.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											typeRecordSetInt.CnameRecord.Value = v.(string)

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["dlv_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_DlvRecord{}
								typeRecordSetInt.DlvRecord = &ves_io_schema_dns_zone.DLVResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.DlvRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
											typeRecordSetInt.DlvRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													digestChoiceTypeFound := false

													if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
														digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha1Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
														digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha256Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
														digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha384Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

														values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
														values[i].KeyTag = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["ds_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_DsRecord{}
								typeRecordSetInt.DsRecord = &ves_io_schema_dns_zone.DNSDSRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.DsRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
											typeRecordSetInt.DsRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													digestChoiceTypeFound := false

													if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
														digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha1Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
														digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha256Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

														digestChoiceTypeFound = true
														digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
														digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
														values[i].DigestChoice = digestChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																	digestChoiceInt.Sha384Digest.Digest = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

														values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
														values[i].KeyTag = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["eui48_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_Eui48Record{}
								typeRecordSetInt.Eui48Record = &ves_io_schema_dns_zone.DNSEUI48ResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.Eui48Record.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											typeRecordSetInt.Eui48Record.Value = v.(string)

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["eui64_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_Eui64Record{}
								typeRecordSetInt.Eui64Record = &ves_io_schema_dns_zone.DNSEUI64ResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.Eui64Record.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											typeRecordSetInt.Eui64Record.Value = v.(string)

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["lb_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_LbRecord{}
								typeRecordSetInt.LbRecord = &ves_io_schema_dns_zone.DNSLBResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.LbRecord.Name = v.(string)

										}

										if v, ok := cs["value"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											valueInt := &ves_io_schema_views.ObjectRefType{}
											typeRecordSetInt.LbRecord.Value = valueInt

											for _, set := range sl {
												if set != nil {
													vMapToStrVal := set.(map[string]interface{})
													if val, ok := vMapToStrVal["name"]; ok && !isIntfNil(v) {
														valueInt.Name = val.(string)
													}
													if val, ok := vMapToStrVal["namespace"]; ok && !isIntfNil(v) {
														valueInt.Namespace = val.(string)
													}

													if val, ok := vMapToStrVal["tenant"]; ok && !isIntfNil(v) {
														valueInt.Tenant = val.(string)
													}
												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["loc_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_LocRecord{}
								typeRecordSetInt.LocRecord = &ves_io_schema_dns_zone.DNSLOCResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.LocRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.LOCValue, len(sl))
											typeRecordSetInt.LocRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.LOCValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["altitude"]; ok && !isIntfNil(w) {
														values[i].Altitude = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["horizontal_precision"]; ok && !isIntfNil(w) {
														values[i].HorizontalPrecision = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["latitude_degree"]; ok && !isIntfNil(w) {
														values[i].LatitudeDegree = int32(w.(int))
													}

													if v, ok := valuesMapStrToI["latitude_hemisphere"]; ok && !isIntfNil(v) {

														values[i].LatitudeHemisphere = ves_io_schema_dns_zone.LatitudeHemisphere(ves_io_schema_dns_zone.LatitudeHemisphere_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["latitude_minute"]; ok && !isIntfNil(w) {
														values[i].LatitudeMinute = int32(w.(int))
													}

													if w, ok := valuesMapStrToI["latitude_second"]; ok && !isIntfNil(w) {
														values[i].LatitudeSecond = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["location_diameter"]; ok && !isIntfNil(w) {
														values[i].LocationDiameter = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["longitude_degree"]; ok && !isIntfNil(w) {
														values[i].LongitudeDegree = int32(w.(int))
													}

													if v, ok := valuesMapStrToI["longitude_hemisphere"]; ok && !isIntfNil(v) {

														values[i].LongitudeHemisphere = ves_io_schema_dns_zone.LongitudeHemisphere(ves_io_schema_dns_zone.LongitudeHemisphere_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["longitude_minute"]; ok && !isIntfNil(w) {
														values[i].LongitudeMinute = int32(w.(int))
													}

													if w, ok := valuesMapStrToI["longitude_second"]; ok && !isIntfNil(w) {
														values[i].LongitudeSecond = float32(w.(float64))
													}

													if w, ok := valuesMapStrToI["vertical_precision"]; ok && !isIntfNil(w) {
														values[i].VerticalPrecision = float32(w.(float64))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["mx_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_MxRecord{}
								typeRecordSetInt.MxRecord = &ves_io_schema_dns_zone.DNSMXResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.MxRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.MailExchanger, len(sl))
											typeRecordSetInt.MxRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.MailExchanger{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["domain"]; ok && !isIntfNil(w) {
														values[i].Domain = w.(string)
													}

													if w, ok := valuesMapStrToI["priority"]; ok && !isIntfNil(w) {
														values[i].Priority = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["naptr_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_NaptrRecord{}
								typeRecordSetInt.NaptrRecord = &ves_io_schema_dns_zone.DNSNAPTRResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.NaptrRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.NAPTRValue, len(sl))
											typeRecordSetInt.NaptrRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.NAPTRValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["flags"]; ok && !isIntfNil(w) {
														values[i].Flags = w.(string)
													}

													if w, ok := valuesMapStrToI["order"]; ok && !isIntfNil(w) {
														values[i].Order = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["preference"]; ok && !isIntfNil(w) {
														values[i].Preference = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["regexp"]; ok && !isIntfNil(w) {
														values[i].Regexp = w.(string)
													}

													if w, ok := valuesMapStrToI["replacement"]; ok && !isIntfNil(w) {
														values[i].Replacement = w.(string)
													}

													if w, ok := valuesMapStrToI["service"]; ok && !isIntfNil(w) {
														values[i].Service = w.(string)
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["ns_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_NsRecord{}
								typeRecordSetInt.NsRecord = &ves_io_schema_dns_zone.DNSNSResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.NsRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.NsRecord.Values = ls

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["ptr_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_PtrRecord{}
								typeRecordSetInt.PtrRecord = &ves_io_schema_dns_zone.DNSPTRResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.PtrRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.PtrRecord.Values = ls

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["srv_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_SrvRecord{}
								typeRecordSetInt.SrvRecord = &ves_io_schema_dns_zone.DNSSRVResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.SrvRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.SRVService, len(sl))
											typeRecordSetInt.SrvRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.SRVService{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["port"]; ok && !isIntfNil(w) {
														values[i].Port = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["priority"]; ok && !isIntfNil(w) {
														values[i].Priority = uint32(w.(int))
													}

													if w, ok := valuesMapStrToI["target"]; ok && !isIntfNil(w) {
														values[i].Target = w.(string)
													}

													if w, ok := valuesMapStrToI["weight"]; ok && !isIntfNil(w) {
														values[i].Weight = uint32(w.(int))
													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["sshfp_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_SshfpRecord{}
								typeRecordSetInt.SshfpRecord = &ves_io_schema_dns_zone.SSHFPResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.SshfpRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.SSHFPRecordValue, len(sl))
											typeRecordSetInt.SshfpRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.SSHFPRecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if v, ok := valuesMapStrToI["algorithm"]; ok && !isIntfNil(v) {

														values[i].Algorithm = ves_io_schema_dns_zone.SSHFPAlgorithm(ves_io_schema_dns_zone.SSHFPAlgorithm_value[v.(string)])

													}

													if w, ok := valuesMapStrToI["fingerprint"]; ok && !isIntfNil(w) {
														values[i].Fingerprint = w.(string)
													}

													fingerprintTypeTypeFound := false

													if v, ok := valuesMapStrToI["sha1_fingerprint"]; ok && !isIntfNil(v) && !fingerprintTypeTypeFound {

														fingerprintTypeTypeFound = true
														fingerprintTypeInt := &ves_io_schema_dns_zone.SSHFPRecordValue_Sha1Fingerprint{}
														fingerprintTypeInt.Sha1Fingerprint = &ves_io_schema_dns_zone.SHA1Fingerprint{}
														values[i].FingerprintType = fingerprintTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["fingerprint"]; ok && !isIntfNil(v) {

																	fingerprintTypeInt.Sha1Fingerprint.Fingerprint = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["sha256_fingerprint"]; ok && !isIntfNil(v) && !fingerprintTypeTypeFound {

														fingerprintTypeTypeFound = true
														fingerprintTypeInt := &ves_io_schema_dns_zone.SSHFPRecordValue_Sha256Fingerprint{}
														fingerprintTypeInt.Sha256Fingerprint = &ves_io_schema_dns_zone.SHA256Fingerprint{}
														values[i].FingerprintType = fingerprintTypeInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["fingerprint"]; ok && !isIntfNil(v) {

																	fingerprintTypeInt.Sha256Fingerprint.Fingerprint = v.(string)

																}

															}
														}

													}

													if v, ok := valuesMapStrToI["fingerprinttype"]; ok && !isIntfNil(v) {

														values[i].Fingerprinttype = ves_io_schema_dns_zone.SSHFPFingerprintType(ves_io_schema_dns_zone.SSHFPFingerprintType_value[v.(string)])

													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["tlsa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_TlsaRecord{}
								typeRecordSetInt.TlsaRecord = &ves_io_schema_dns_zone.TLSAResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.TlsaRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											values := make([]*ves_io_schema_dns_zone.TLSARecordValue, len(sl))
											typeRecordSetInt.TlsaRecord.Values = values
											for i, set := range sl {
												if set != nil {
													values[i] = &ves_io_schema_dns_zone.TLSARecordValue{}
													valuesMapStrToI := set.(map[string]interface{})

													if w, ok := valuesMapStrToI["certificate_association_data"]; ok && !isIntfNil(w) {
														values[i].CertificateAssociationData = w.(string)
													}

													if v, ok := valuesMapStrToI["certificate_usage"]; ok && !isIntfNil(v) {

														values[i].CertificateUsage = ves_io_schema_dns_zone.TLSARecordCertificateUsage(ves_io_schema_dns_zone.TLSARecordCertificateUsage_value[v.(string)])

													}

													if v, ok := valuesMapStrToI["matching_type"]; ok && !isIntfNil(v) {

														values[i].MatchingType = ves_io_schema_dns_zone.TLSARecordMatchingType(ves_io_schema_dns_zone.TLSARecordMatchingType_value[v.(string)])

													}

													if v, ok := valuesMapStrToI["selector"]; ok && !isIntfNil(v) {

														values[i].Selector = ves_io_schema_dns_zone.TLSARecordCSelector(ves_io_schema_dns_zone.TLSARecordCSelector_value[v.(string)])

													}

												}
											}

										}

									}
								}

							}

							if v, ok := defaultRrSetGroupMapStrToI["txt_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

								typeRecordSetTypeFound = true
								typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_TxtRecord{}
								typeRecordSetInt.TxtRecord = &ves_io_schema_dns_zone.DNSTXTResourceRecord{}
								defaultRrSetGroup[i].TypeRecordSet = typeRecordSetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											typeRecordSetInt.TxtRecord.Name = v.(string)

										}

										if v, ok := cs["values"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												ls[i] = v.(string)
											}
											typeRecordSetInt.TxtRecord.Values = ls

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["dnssec_mode"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					dnssecMode := &ves_io_schema_dns_zone.DNSSECMode{}
					dnsTypeInt.Primary.DnssecMode = dnssecMode
					for _, set := range sl {
						if set != nil {
							dnssecModeMapStrToI := set.(map[string]interface{})

							modeTypeFound := false

							if v, ok := dnssecModeMapStrToI["disable"]; ok && !isIntfNil(v) && !modeTypeFound {

								modeTypeFound = true

								if v.(bool) {
									modeInt := &ves_io_schema_dns_zone.DNSSECMode_Disable{}
									modeInt.Disable = &ves_io_schema.Empty{}
									dnssecMode.Mode = modeInt
								}

							}

							if _, ok := dnssecModeMapStrToI["enable"]; ok && !modeTypeFound {

								modeTypeFound = true
								modeInt := &ves_io_schema_dns_zone.DNSSECMode_Enable{}
								modeInt.Enable = &ves_io_schema_dns_zone.DNSSECModeEnable{}
								dnssecMode.Mode = modeInt

							}

						}
					}

				}

				if v, ok := cs["rr_set_group"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					rrSetGroup := make([]*ves_io_schema_dns_zone.RRSetGroup, len(sl))
					dnsTypeInt.Primary.RrSetGroup = rrSetGroup
					for i, set := range sl {
						if set != nil {
							rrSetGroup[i] = &ves_io_schema_dns_zone.RRSetGroup{}
							rrSetGroupMapStrToI := set.(map[string]interface{})

							if v, ok := rrSetGroupMapStrToI["metadata"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								metadata := &ves_io_schema.MessageMetaType{}
								rrSetGroup[i].Metadata = metadata
								for _, set := range sl {
									if set != nil {
										metadataMapStrToI := set.(map[string]interface{})

										if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
											metadata.Description = w.(string)
										}

										if w, ok := metadataMapStrToI["disable"]; ok && !isIntfNil(w) {
											metadata.Disable = w.(bool)
										}

										if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
											metadata.Name = w.(string)
										}

									}
								}

							}

							if v, ok := rrSetGroupMapStrToI["rr_set"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rrSet := make([]*ves_io_schema_dns_zone.RRSet, len(sl))
								rrSetGroup[i].RrSet = rrSet
								for i, set := range sl {
									if set != nil {
										rrSet[i] = &ves_io_schema_dns_zone.RRSet{}
										rrSetMapStrToI := set.(map[string]interface{})

										if w, ok := rrSetMapStrToI["description"]; ok && !isIntfNil(w) {
											rrSet[i].Description = w.(string)
										}

										if w, ok := rrSetMapStrToI["ttl"]; ok && !isIntfNil(w) {
											rrSet[i].Ttl = uint32(w.(int))
										}

										typeRecordSetTypeFound := false

										if v, ok := rrSetMapStrToI["a_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_ARecord{}
											typeRecordSetInt.ARecord = &ves_io_schema_dns_zone.DNSAResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.ARecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.ARecord.Values = ls

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["aaaa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AaaaRecord{}
											typeRecordSetInt.AaaaRecord = &ves_io_schema_dns_zone.DNSAAAAResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.AaaaRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.AaaaRecord.Values = ls

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["afsdb_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AfsdbRecord{}
											typeRecordSetInt.AfsdbRecord = &ves_io_schema_dns_zone.DNSAFSDBRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.AfsdbRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.AFSDBRecordValue, len(sl))
														typeRecordSetInt.AfsdbRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.AFSDBRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["hostname"]; ok && !isIntfNil(w) {
																	values[i].Hostname = w.(string)
																}

																if v, ok := valuesMapStrToI["subtype"]; ok && !isIntfNil(v) {

																	values[i].Subtype = ves_io_schema_dns_zone.AFSDBRecordSubtype(ves_io_schema_dns_zone.AFSDBRecordSubtype_value[v.(string)])

																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["alias_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_AliasRecord{}
											typeRecordSetInt.AliasRecord = &ves_io_schema_dns_zone.DNSAliasResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.AliasRecord.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														typeRecordSetInt.AliasRecord.Value = v.(string)

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["caa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CaaRecord{}
											typeRecordSetInt.CaaRecord = &ves_io_schema_dns_zone.DNSCAAResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CaaRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.CertificationAuthorityAuthorization, len(sl))
														typeRecordSetInt.CaaRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.CertificationAuthorityAuthorization{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["flags"]; ok && !isIntfNil(w) {
																	values[i].Flags = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["tag"]; ok && !isIntfNil(w) {
																	values[i].Tag = w.(string)
																}

																if w, ok := valuesMapStrToI["value"]; ok && !isIntfNil(w) {
																	values[i].Value = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["cds_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CdsRecord{}
											typeRecordSetInt.CdsRecord = &ves_io_schema_dns_zone.DNSCDSRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CdsRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
														typeRecordSetInt.CdsRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																digestChoiceTypeFound := false

																if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
																	digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha1Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
																	digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha256Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
																	digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha384Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

																	values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
																	values[i].KeyTag = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["cert_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CertRecord{}
											typeRecordSetInt.CertRecord = &ves_io_schema_dns_zone.CERTResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CertRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.CERTRecordValue, len(sl))
														typeRecordSetInt.CertRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.CERTRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if v, ok := valuesMapStrToI["algorithm"]; ok && !isIntfNil(v) {

																	values[i].Algorithm = ves_io_schema_dns_zone.CERTAlgorithm(ves_io_schema_dns_zone.CERTAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["cert_key_tag"]; ok && !isIntfNil(w) {
																	values[i].CertKeyTag = uint32(w.(int))
																}

																if v, ok := valuesMapStrToI["cert_type"]; ok && !isIntfNil(v) {

																	values[i].CertType = ves_io_schema_dns_zone.CERTType(ves_io_schema_dns_zone.CERTType_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["certificate"]; ok && !isIntfNil(w) {
																	values[i].Certificate = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["cname_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_CnameRecord{}
											typeRecordSetInt.CnameRecord = &ves_io_schema_dns_zone.DNSCNAMEResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CnameRecord.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														typeRecordSetInt.CnameRecord.Value = v.(string)

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["dlv_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_DlvRecord{}
											typeRecordSetInt.DlvRecord = &ves_io_schema_dns_zone.DLVResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.DlvRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
														typeRecordSetInt.DlvRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																digestChoiceTypeFound := false

																if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
																	digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha1Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
																	digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha256Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
																	digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha384Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

																	values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
																	values[i].KeyTag = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["ds_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_DsRecord{}
											typeRecordSetInt.DsRecord = &ves_io_schema_dns_zone.DNSDSRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.DsRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.DSRecordValue, len(sl))
														typeRecordSetInt.DsRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.DSRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																digestChoiceTypeFound := false

																if v, ok := valuesMapStrToI["sha1_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha1Digest{}
																	digestChoiceInt.Sha1Digest = &ves_io_schema_dns_zone.SHA1Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha1Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha256_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha256Digest{}
																	digestChoiceInt.Sha256Digest = &ves_io_schema_dns_zone.SHA256Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha256Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha384_digest"]; ok && !isIntfNil(v) && !digestChoiceTypeFound {

																	digestChoiceTypeFound = true
																	digestChoiceInt := &ves_io_schema_dns_zone.DSRecordValue_Sha384Digest{}
																	digestChoiceInt.Sha384Digest = &ves_io_schema_dns_zone.SHA384Digest{}
																	values[i].DigestChoice = digestChoiceInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["digest"]; ok && !isIntfNil(v) {

																				digestChoiceInt.Sha384Digest.Digest = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["ds_key_algorithm"]; ok && !isIntfNil(v) {

																	values[i].DsKeyAlgorithm = ves_io_schema_dns_zone.DSKeyAlgorithm(ves_io_schema_dns_zone.DSKeyAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["key_tag"]; ok && !isIntfNil(w) {
																	values[i].KeyTag = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["eui48_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_Eui48Record{}
											typeRecordSetInt.Eui48Record = &ves_io_schema_dns_zone.DNSEUI48ResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.Eui48Record.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														typeRecordSetInt.Eui48Record.Value = v.(string)

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["eui64_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_Eui64Record{}
											typeRecordSetInt.Eui64Record = &ves_io_schema_dns_zone.DNSEUI64ResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.Eui64Record.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														typeRecordSetInt.Eui64Record.Value = v.(string)

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["lb_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_LbRecord{}
											typeRecordSetInt.LbRecord = &ves_io_schema_dns_zone.DNSLBResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.LbRecord.Name = v.(string)

													}

													if v, ok := cs["value"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														valueInt := &ves_io_schema_views.ObjectRefType{}
														typeRecordSetInt.LbRecord.Value = valueInt

														for _, set := range sl {
															if set != nil {
																vMapToStrVal := set.(map[string]interface{})
																if val, ok := vMapToStrVal["name"]; ok && !isIntfNil(v) {
																	valueInt.Name = val.(string)
																}
																if val, ok := vMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																	valueInt.Namespace = val.(string)
																}

																if val, ok := vMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																	valueInt.Tenant = val.(string)
																}
															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["loc_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_LocRecord{}
											typeRecordSetInt.LocRecord = &ves_io_schema_dns_zone.DNSLOCResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.LocRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.LOCValue, len(sl))
														typeRecordSetInt.LocRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.LOCValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["altitude"]; ok && !isIntfNil(w) {
																	values[i].Altitude = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["horizontal_precision"]; ok && !isIntfNil(w) {
																	values[i].HorizontalPrecision = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["latitude_degree"]; ok && !isIntfNil(w) {
																	values[i].LatitudeDegree = int32(w.(int))
																}

																if v, ok := valuesMapStrToI["latitude_hemisphere"]; ok && !isIntfNil(v) {

																	values[i].LatitudeHemisphere = ves_io_schema_dns_zone.LatitudeHemisphere(ves_io_schema_dns_zone.LatitudeHemisphere_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["latitude_minute"]; ok && !isIntfNil(w) {
																	values[i].LatitudeMinute = int32(w.(int))
																}

																if w, ok := valuesMapStrToI["latitude_second"]; ok && !isIntfNil(w) {
																	values[i].LatitudeSecond = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["location_diameter"]; ok && !isIntfNil(w) {
																	values[i].LocationDiameter = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["longitude_degree"]; ok && !isIntfNil(w) {
																	values[i].LongitudeDegree = int32(w.(int))
																}

																if v, ok := valuesMapStrToI["longitude_hemisphere"]; ok && !isIntfNil(v) {

																	values[i].LongitudeHemisphere = ves_io_schema_dns_zone.LongitudeHemisphere(ves_io_schema_dns_zone.LongitudeHemisphere_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["longitude_minute"]; ok && !isIntfNil(w) {
																	values[i].LongitudeMinute = int32(w.(int))
																}

																if w, ok := valuesMapStrToI["longitude_second"]; ok && !isIntfNil(w) {
																	values[i].LongitudeSecond = float32(w.(float64))
																}

																if w, ok := valuesMapStrToI["vertical_precision"]; ok && !isIntfNil(w) {
																	values[i].VerticalPrecision = float32(w.(float64))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["mx_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_MxRecord{}
											typeRecordSetInt.MxRecord = &ves_io_schema_dns_zone.DNSMXResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.MxRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.MailExchanger, len(sl))
														typeRecordSetInt.MxRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.MailExchanger{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["domain"]; ok && !isIntfNil(w) {
																	values[i].Domain = w.(string)
																}

																if w, ok := valuesMapStrToI["priority"]; ok && !isIntfNil(w) {
																	values[i].Priority = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["naptr_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_NaptrRecord{}
											typeRecordSetInt.NaptrRecord = &ves_io_schema_dns_zone.DNSNAPTRResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.NaptrRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.NAPTRValue, len(sl))
														typeRecordSetInt.NaptrRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.NAPTRValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["flags"]; ok && !isIntfNil(w) {
																	values[i].Flags = w.(string)
																}

																if w, ok := valuesMapStrToI["order"]; ok && !isIntfNil(w) {
																	values[i].Order = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["preference"]; ok && !isIntfNil(w) {
																	values[i].Preference = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["regexp"]; ok && !isIntfNil(w) {
																	values[i].Regexp = w.(string)
																}

																if w, ok := valuesMapStrToI["replacement"]; ok && !isIntfNil(w) {
																	values[i].Replacement = w.(string)
																}

																if w, ok := valuesMapStrToI["service"]; ok && !isIntfNil(w) {
																	values[i].Service = w.(string)
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["ns_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_NsRecord{}
											typeRecordSetInt.NsRecord = &ves_io_schema_dns_zone.DNSNSResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.NsRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.NsRecord.Values = ls

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["ptr_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_PtrRecord{}
											typeRecordSetInt.PtrRecord = &ves_io_schema_dns_zone.DNSPTRResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.PtrRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.PtrRecord.Values = ls

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["srv_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_SrvRecord{}
											typeRecordSetInt.SrvRecord = &ves_io_schema_dns_zone.DNSSRVResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.SrvRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.SRVService, len(sl))
														typeRecordSetInt.SrvRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.SRVService{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["port"]; ok && !isIntfNil(w) {
																	values[i].Port = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["priority"]; ok && !isIntfNil(w) {
																	values[i].Priority = uint32(w.(int))
																}

																if w, ok := valuesMapStrToI["target"]; ok && !isIntfNil(w) {
																	values[i].Target = w.(string)
																}

																if w, ok := valuesMapStrToI["weight"]; ok && !isIntfNil(w) {
																	values[i].Weight = uint32(w.(int))
																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["sshfp_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_SshfpRecord{}
											typeRecordSetInt.SshfpRecord = &ves_io_schema_dns_zone.SSHFPResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.SshfpRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.SSHFPRecordValue, len(sl))
														typeRecordSetInt.SshfpRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.SSHFPRecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if v, ok := valuesMapStrToI["algorithm"]; ok && !isIntfNil(v) {

																	values[i].Algorithm = ves_io_schema_dns_zone.SSHFPAlgorithm(ves_io_schema_dns_zone.SSHFPAlgorithm_value[v.(string)])

																}

																if w, ok := valuesMapStrToI["fingerprint"]; ok && !isIntfNil(w) {
																	values[i].Fingerprint = w.(string)
																}

																fingerprintTypeTypeFound := false

																if v, ok := valuesMapStrToI["sha1_fingerprint"]; ok && !isIntfNil(v) && !fingerprintTypeTypeFound {

																	fingerprintTypeTypeFound = true
																	fingerprintTypeInt := &ves_io_schema_dns_zone.SSHFPRecordValue_Sha1Fingerprint{}
																	fingerprintTypeInt.Sha1Fingerprint = &ves_io_schema_dns_zone.SHA1Fingerprint{}
																	values[i].FingerprintType = fingerprintTypeInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["fingerprint"]; ok && !isIntfNil(v) {

																				fingerprintTypeInt.Sha1Fingerprint.Fingerprint = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["sha256_fingerprint"]; ok && !isIntfNil(v) && !fingerprintTypeTypeFound {

																	fingerprintTypeTypeFound = true
																	fingerprintTypeInt := &ves_io_schema_dns_zone.SSHFPRecordValue_Sha256Fingerprint{}
																	fingerprintTypeInt.Sha256Fingerprint = &ves_io_schema_dns_zone.SHA256Fingerprint{}
																	values[i].FingerprintType = fingerprintTypeInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["fingerprint"]; ok && !isIntfNil(v) {

																				fingerprintTypeInt.Sha256Fingerprint.Fingerprint = v.(string)

																			}

																		}
																	}

																}

																if v, ok := valuesMapStrToI["fingerprinttype"]; ok && !isIntfNil(v) {

																	values[i].Fingerprinttype = ves_io_schema_dns_zone.SSHFPFingerprintType(ves_io_schema_dns_zone.SSHFPFingerprintType_value[v.(string)])

																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["tlsa_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_TlsaRecord{}
											typeRecordSetInt.TlsaRecord = &ves_io_schema_dns_zone.TLSAResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.TlsaRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														values := make([]*ves_io_schema_dns_zone.TLSARecordValue, len(sl))
														typeRecordSetInt.TlsaRecord.Values = values
														for i, set := range sl {
															if set != nil {
																values[i] = &ves_io_schema_dns_zone.TLSARecordValue{}
																valuesMapStrToI := set.(map[string]interface{})

																if w, ok := valuesMapStrToI["certificate_association_data"]; ok && !isIntfNil(w) {
																	values[i].CertificateAssociationData = w.(string)
																}

																if v, ok := valuesMapStrToI["certificate_usage"]; ok && !isIntfNil(v) {

																	values[i].CertificateUsage = ves_io_schema_dns_zone.TLSARecordCertificateUsage(ves_io_schema_dns_zone.TLSARecordCertificateUsage_value[v.(string)])

																}

																if v, ok := valuesMapStrToI["matching_type"]; ok && !isIntfNil(v) {

																	values[i].MatchingType = ves_io_schema_dns_zone.TLSARecordMatchingType(ves_io_schema_dns_zone.TLSARecordMatchingType_value[v.(string)])

																}

																if v, ok := valuesMapStrToI["selector"]; ok && !isIntfNil(v) {

																	values[i].Selector = ves_io_schema_dns_zone.TLSARecordCSelector(ves_io_schema_dns_zone.TLSARecordCSelector_value[v.(string)])

																}

															}
														}

													}

												}
											}

										}

										if v, ok := rrSetMapStrToI["txt_record"]; ok && !isIntfNil(v) && !typeRecordSetTypeFound {

											typeRecordSetTypeFound = true
											typeRecordSetInt := &ves_io_schema_dns_zone.RRSet_TxtRecord{}
											typeRecordSetInt.TxtRecord = &ves_io_schema_dns_zone.DNSTXTResourceRecord{}
											rrSet[i].TypeRecordSet = typeRecordSetInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														typeRecordSetInt.TxtRecord.Name = v.(string)

													}

													if v, ok := cs["values"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = v.(string)
														}
														typeRecordSetInt.TxtRecord.Values = ls

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				soaRecordParametersChoiceTypeFound := false

				if v, ok := cs["default_soa_parameters"]; ok && !isIntfNil(v) && !soaRecordParametersChoiceTypeFound {

					soaRecordParametersChoiceTypeFound = true

					if v.(bool) {
						soaRecordParametersChoiceInt := &ves_io_schema_dns_zone.PrimaryDNSCreateSpecType_DefaultSoaParameters{}
						soaRecordParametersChoiceInt.DefaultSoaParameters = &ves_io_schema.Empty{}
						dnsTypeInt.Primary.SoaRecordParametersChoice = soaRecordParametersChoiceInt
					}

				}

				if v, ok := cs["soa_parameters"]; ok && !isIntfNil(v) && !soaRecordParametersChoiceTypeFound {

					soaRecordParametersChoiceTypeFound = true
					soaRecordParametersChoiceInt := &ves_io_schema_dns_zone.PrimaryDNSCreateSpecType_SoaParameters{}
					soaRecordParametersChoiceInt.SoaParameters = &ves_io_schema_dns_zone.SOARecordParameterConfig{}
					dnsTypeInt.Primary.SoaRecordParametersChoice = soaRecordParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["expire"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.Expire = uint32(v.(int))

							}

							if v, ok := cs["negative_ttl"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.NegativeTtl = uint32(v.(int))

							}

							if v, ok := cs["refresh"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.Refresh = uint32(v.(int))

							}

							if v, ok := cs["retry"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.Retry = uint32(v.(int))

							}

							if v, ok := cs["ttl"]; ok && !isIntfNil(v) {

								soaRecordParametersChoiceInt.SoaParameters.Ttl = uint32(v.(int))

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("secondary"); ok && !dnsTypeTypeFound {

		dnsTypeTypeFound = true
		dnsTypeInt := &ves_io_schema_dns_zone.ReplaceSpecType_Secondary{}
		dnsTypeInt.Secondary = &ves_io_schema_dns_zone.SecondaryDNSCreateSpecType{}
		updateSpec.DnsType = dnsTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["primary_servers"]; ok && !isIntfNil(v) {

					ls := make([]string, len(v.([]interface{})))
					for i, v := range v.([]interface{}) {
						ls[i] = v.(string)
					}
					dnsTypeInt.Secondary.PrimaryServers = ls

				}

				if v, ok := cs["tsig_key_algorithm"]; ok && !isIntfNil(v) {

					dnsTypeInt.Secondary.TsigKeyAlgorithm = ves_io_schema_dns_zone.TSIGKeyAlgorithm(ves_io_schema_dns_zone.TSIGKeyAlgorithm_value[v.(string)])

				}

				if v, ok := cs["tsig_key_name"]; ok && !isIntfNil(v) {

					dnsTypeInt.Secondary.TsigKeyName = v.(string)

				}

				if v, ok := cs["tsig_key_value"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tsigKeyValue := &ves_io_schema.SecretType{}
					dnsTypeInt.Secondary.TsigKeyValue = tsigKeyValue
					for _, set := range sl {
						if set != nil {
							tsigKeyValueMapStrToI := set.(map[string]interface{})

							if v, ok := tsigKeyValueMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
								tsigKeyValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
								for _, set := range sl {
									if set != nil {
										blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

										if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
											blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
										}

										if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
											blindfoldSecretInfoInternal.Location = w.(string)
										}

										if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
											blindfoldSecretInfoInternal.StoreProvider = w.(string)
										}

									}
								}

							}

							if v, ok := tsigKeyValueMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

								tsigKeyValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

							}

							secretInfoOneofTypeFound := false

							if v, ok := tsigKeyValueMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								tsigKeyValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := tsigKeyValueMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								tsigKeyValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

							if v, ok := tsigKeyValueMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
								secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
								tsigKeyValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["key"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

										}

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

										}

										if v, ok := cs["version"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

										}

									}
								}

							}

							if v, ok := tsigKeyValueMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
								secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
								tsigKeyValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra DnsZone obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_dns_zone.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating DnsZone: %s", err)
	}

	return resourceVolterraDnsZoneRead(d, meta)
}

func resourceVolterraDnsZoneDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_dns_zone.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] DnsZone %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra DnsZone before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra DnsZone obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_dns_zone.ObjectType, namespace, name)
}

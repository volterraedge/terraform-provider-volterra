//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_authentication "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication"
	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
)

// resourceVolterraVirtualHost is implementation of Volterra's VirtualHost resources
func resourceVolterraVirtualHost() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraVirtualHostCreate,
		Read:   resourceVolterraVirtualHostRead,
		Update: resourceVolterraVirtualHostUpdate,
		Delete: resourceVolterraVirtualHostDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"add_location": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"advertise_policies": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"authentication": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"auth_config": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"cookie_params": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"cookie_refresh_interval": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"auth_hmac": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"prim_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"prim_key_expiry": {
													Type:     schema.TypeString,
													Required: true,
												},

												"sec_key": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"sec_key_expiry": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"kms_key_hmac": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
									},

									"session_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"use_auth_object_config": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"redirect_dynamic": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"redirect_url": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"no_authentication": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"buffer_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"disabled": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"max_request_bytes": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"captcha_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"js_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"js_script_delay": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"no_challenge": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"coalescing_options": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"default_coalescing": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"strict_coalescing": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"compression_params": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"content_length": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"content_type": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"disable_on_etag_header": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"remove_accept_encoding_header": {
							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"connection_idle_timeout": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"cors_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"allow_credentials": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"allow_headers": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"allow_methods": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"allow_origin": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"allow_origin_regex": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"disabled": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"expose_headers": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"maximum_age": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"csrf_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"all_load_balancer_domains": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"custom_domain_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"domains": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"custom_errors": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"default_loadbalancer": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"non_default_loadbalancer": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_default_error_pages": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"disable_dns_resolve": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"domains": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"dynamic_reverse_proxy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"connection_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"resolution_network": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"kind": {
										Type:     schema.TypeString,
										Computed: true,
									},

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"resolution_network_type": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"resolve_endpoint_dynamically": {
							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"http_protocol_options": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"http_protocol_enable_v1_only": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"header_transformation": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"default_header_transformation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"legacy_header_transformation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"preserve_case_header_transformation": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"proper_case_header_transformation": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"http_protocol_enable_v1_v2": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_protocol_enable_v2_only": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"idle_timeout": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"max_request_header_size": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"disable_path_normalize": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_path_normalize": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"proxy": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"rate_limiter_allowed_prefixes": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"request_cookies_to_add": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"overwrite": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"secret_value": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"value": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"request_cookies_to_remove": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"request_headers_to_add": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"append": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"secret_value": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"value": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"request_headers_to_remove": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"response_cookies_to_add": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_domain": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ignore_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_expiry": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ignore_expiry": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_max_age": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"max_age_value": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"overwrite": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_partitioned": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_partitioned": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_path": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ignore_path": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_samesite": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_lax": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_none": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_strict": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_value": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"secret_value": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"value": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"response_cookies_to_remove": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"response_headers_to_add": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"append": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"secret_value": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"blindfold_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"decryption_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"location": {
													Type:     schema.TypeString,
													Required: true,
												},

												"store_provider": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"clear_secret_info": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"provider": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"url": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"value": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"response_headers_to_remove": {

				Type: schema.TypeList,

				Optional: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"retry_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"back_off": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"base_interval": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"max_interval": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"num_retries": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"per_try_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"retriable_status_codes": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeInt,
							},
						},

						"retry_condition": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"routes": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"sensitive_data_policy": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"append_server_name": {

				Type:     schema.TypeString,
				Optional: true,
			},

			"default_header": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"pass_through": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"server_name": {

				Type:     schema.TypeString,
				Optional: true,
			},

			"slow_ddos_mitigation": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"request_headers_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"disable_request_timeout": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"request_timeout": {

							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"user_identification": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"kind": {
							Type:     schema.TypeString,
							Computed: true,
						},

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"waf_type": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"app_firewall": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"app_firewall": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"kind": {
													Type:     schema.TypeString,
													Computed: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"disable_waf": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"inherit_waf": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraVirtualHostCreate creates VirtualHost resource
func resourceVolterraVirtualHostCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_virtual_host.CreateSpecType{}
	createReq := &ves_io_schema_virtual_host.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//add_location
	if v, ok := d.GetOk("add_location"); ok && !isIntfNil(v) {

		createSpec.AddLocation =
			v.(bool)

	}

	//advertise_policies
	if v, ok := d.GetOk("advertise_policies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		advertisePoliciesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.AdvertisePolicies = advertisePoliciesInt
		for i, ps := range sl {

			apMapToStrVal := ps.(map[string]interface{})
			advertisePoliciesInt[i] = &ves_io_schema.ObjectRefType{}

			advertisePoliciesInt[i].Kind = "advertise_policy"

			if v, ok := apMapToStrVal["name"]; ok && !isIntfNil(v) {
				advertisePoliciesInt[i].Name = v.(string)
			}

			if v, ok := apMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				advertisePoliciesInt[i].Namespace = v.(string)
			}

			if v, ok := apMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				advertisePoliciesInt[i].Tenant = v.(string)
			}

			if v, ok := apMapToStrVal["uid"]; ok && !isIntfNil(v) {
				advertisePoliciesInt[i].Uid = v.(string)
			}

		}

	}

	//authentication_choice

	authenticationChoiceTypeFound := false

	if v, ok := d.GetOk("authentication"); ok && !isIntfNil(v) && !authenticationChoiceTypeFound {

		authenticationChoiceTypeFound = true
		authenticationChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_Authentication{}
		authenticationChoiceInt.Authentication = &ves_io_schema_virtual_host.AuthenticationDetails{}
		createSpec.AuthenticationChoice = authenticationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["auth_config"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					authConfigInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					authenticationChoiceInt.Authentication.AuthConfig = authConfigInt
					for i, ps := range sl {

						acMapToStrVal := ps.(map[string]interface{})
						authConfigInt[i] = &ves_io_schema.ObjectRefType{}

						authConfigInt[i].Kind = "authentication"

						if v, ok := acMapToStrVal["name"]; ok && !isIntfNil(v) {
							authConfigInt[i].Name = v.(string)
						}

						if v, ok := acMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							authConfigInt[i].Namespace = v.(string)
						}

						if v, ok := acMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							authConfigInt[i].Tenant = v.(string)
						}

						if v, ok := acMapToStrVal["uid"]; ok && !isIntfNil(v) {
							authConfigInt[i].Uid = v.(string)
						}

					}

				}

				cookieParamsChoiceTypeFound := false

				if v, ok := cs["cookie_params"]; ok && !isIntfNil(v) && !cookieParamsChoiceTypeFound {

					cookieParamsChoiceTypeFound = true
					cookieParamsChoiceInt := &ves_io_schema_virtual_host.AuthenticationDetails_CookieParams{}
					cookieParamsChoiceInt.CookieParams = &ves_io_schema_authentication.CookieParams{}
					authenticationChoiceInt.Authentication.CookieParamsChoice = cookieParamsChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								cookieParamsChoiceInt.CookieParams.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["cookie_refresh_interval"]; ok && !isIntfNil(v) {

								cookieParamsChoiceInt.CookieParams.CookieRefreshInterval = uint32(v.(int))

							}

							secretChoiceTypeFound := false

							if v, ok := cs["auth_hmac"]; ok && !isIntfNil(v) && !secretChoiceTypeFound {

								secretChoiceTypeFound = true
								secretChoiceInt := &ves_io_schema_authentication.CookieParams_AuthHmac{}
								secretChoiceInt.AuthHmac = &ves_io_schema_authentication.HMACKeyPair{}
								cookieParamsChoiceInt.CookieParams.SecretChoice = secretChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["prim_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											primKey := &ves_io_schema.SecretType{}
											secretChoiceInt.AuthHmac.PrimKey = primKey
											for _, set := range sl {
												if set != nil {
													primKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := primKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														primKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := primKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														primKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["prim_key_expiry"]; ok && !isIntfNil(v) {

											ts, err := parseTime(v.(string))
											if err != nil {
												return fmt.Errorf("error creating PrimKeyExpiry, timestamp format is wrong: %s", err)
											}
											secretChoiceInt.AuthHmac.PrimKeyExpiry = ts
										}

										if v, ok := cs["sec_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											secKey := &ves_io_schema.SecretType{}
											secretChoiceInt.AuthHmac.SecKey = secKey
											for _, set := range sl {
												if set != nil {
													secKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := secKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														secKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := secKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														secKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["sec_key_expiry"]; ok && !isIntfNil(v) {

											ts, err := parseTime(v.(string))
											if err != nil {
												return fmt.Errorf("error creating SecKeyExpiry, timestamp format is wrong: %s", err)
											}
											secretChoiceInt.AuthHmac.SecKeyExpiry = ts
										}

									}
								}

							}

							if v, ok := cs["kms_key_hmac"]; ok && !secretChoiceTypeFound {

								secretChoiceTypeFound = true
								secretChoiceInt := &ves_io_schema_authentication.CookieParams_KmsKeyHmac{}
								secretChoiceInt.KmsKeyHmac = &ves_io_schema_authentication.KMSKeyRefType{}
								cookieParamsChoiceInt.CookieParams.SecretChoice = secretChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										_ = set.(map[string]interface{})

									}
								}

							}

							if v, ok := cs["session_expiry"]; ok && !isIntfNil(v) {

								cookieParamsChoiceInt.CookieParams.SessionExpiry = uint32(v.(int))

							}

						}
					}

				}

				if v, ok := cs["use_auth_object_config"]; ok && !isIntfNil(v) && !cookieParamsChoiceTypeFound {

					cookieParamsChoiceTypeFound = true

					if v.(bool) {
						cookieParamsChoiceInt := &ves_io_schema_virtual_host.AuthenticationDetails_UseAuthObjectConfig{}
						cookieParamsChoiceInt.UseAuthObjectConfig = &ves_io_schema.Empty{}
						authenticationChoiceInt.Authentication.CookieParamsChoice = cookieParamsChoiceInt
					}

				}

				redirectUrlChoiceTypeFound := false

				if v, ok := cs["redirect_dynamic"]; ok && !isIntfNil(v) && !redirectUrlChoiceTypeFound {

					redirectUrlChoiceTypeFound = true

					if v.(bool) {
						redirectUrlChoiceInt := &ves_io_schema_virtual_host.AuthenticationDetails_RedirectDynamic{}
						redirectUrlChoiceInt.RedirectDynamic = &ves_io_schema.Empty{}
						authenticationChoiceInt.Authentication.RedirectUrlChoice = redirectUrlChoiceInt
					}

				}

				if v, ok := cs["redirect_url"]; ok && !isIntfNil(v) && !redirectUrlChoiceTypeFound {

					redirectUrlChoiceTypeFound = true
					redirectUrlChoiceInt := &ves_io_schema_virtual_host.AuthenticationDetails_RedirectUrl{}

					authenticationChoiceInt.Authentication.RedirectUrlChoice = redirectUrlChoiceInt

					redirectUrlChoiceInt.RedirectUrl = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("no_authentication"); ok && !authenticationChoiceTypeFound {

		authenticationChoiceTypeFound = true

		if v.(bool) {
			authenticationChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_NoAuthentication{}
			authenticationChoiceInt.NoAuthentication = &ves_io_schema.Empty{}
			createSpec.AuthenticationChoice = authenticationChoiceInt
		}

	}

	//buffer_policy
	if v, ok := d.GetOk("buffer_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		bufferPolicy := &ves_io_schema.BufferConfigType{}
		createSpec.BufferPolicy = bufferPolicy
		for _, set := range sl {
			if set != nil {
				bufferPolicyMapStrToI := set.(map[string]interface{})

				if w, ok := bufferPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
					bufferPolicy.Disabled = w.(bool)
				}

				if w, ok := bufferPolicyMapStrToI["max_request_bytes"]; ok && !isIntfNil(w) {
					bufferPolicy.MaxRequestBytes = uint32(w.(int))
				}

			}
		}

	}

	//challenge_type

	challengeTypeTypeFound := false

	if v, ok := d.GetOk("captcha_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_virtual_host.CreateSpecType_CaptchaChallenge{}
		challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("js_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_virtual_host.CreateSpecType_JsChallenge{}
		challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CustomPage = v.(string)

				}

				if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("no_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true

		if v.(bool) {
			challengeTypeInt := &ves_io_schema_virtual_host.CreateSpecType_NoChallenge{}
			challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
			createSpec.ChallengeType = challengeTypeInt
		}

	}

	//coalescing_options
	if v, ok := d.GetOk("coalescing_options"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		coalescingOptions := &ves_io_schema.TLSCoalescingOptions{}
		createSpec.CoalescingOptions = coalescingOptions
		for _, set := range sl {
			if set != nil {
				coalescingOptionsMapStrToI := set.(map[string]interface{})

				coalescingChoiceTypeFound := false

				if v, ok := coalescingOptionsMapStrToI["default_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

					coalescingChoiceTypeFound = true

					if v.(bool) {
						coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_DefaultCoalescing{}
						coalescingChoiceInt.DefaultCoalescing = &ves_io_schema.Empty{}
						coalescingOptions.CoalescingChoice = coalescingChoiceInt
					}

				}

				if v, ok := coalescingOptionsMapStrToI["strict_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

					coalescingChoiceTypeFound = true

					if v.(bool) {
						coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_StrictCoalescing{}
						coalescingChoiceInt.StrictCoalescing = &ves_io_schema.Empty{}
						coalescingOptions.CoalescingChoice = coalescingChoiceInt
					}

				}

			}
		}

	}

	//compression_params
	if v, ok := d.GetOk("compression_params"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		compressionParams := &ves_io_schema_virtual_host.CompressionType{}
		createSpec.CompressionParams = compressionParams
		for _, set := range sl {
			if set != nil {
				compressionParamsMapStrToI := set.(map[string]interface{})

				if w, ok := compressionParamsMapStrToI["content_length"]; ok && !isIntfNil(w) {
					compressionParams.ContentLength = uint32(w.(int))
				}

				if w, ok := compressionParamsMapStrToI["content_type"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field content_type")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					compressionParams.ContentType = ls
				}

				if w, ok := compressionParamsMapStrToI["disable_on_etag_header"]; ok && !isIntfNil(w) {
					compressionParams.DisableOnEtagHeader = w.(bool)
				}

				if w, ok := compressionParamsMapStrToI["remove_accept_encoding_header"]; ok && !isIntfNil(w) {
					compressionParams.RemoveAcceptEncodingHeader = w.(bool)
				}

			}
		}

	}

	//connection_idle_timeout
	if v, ok := d.GetOk("connection_idle_timeout"); ok && !isIntfNil(v) {

		createSpec.ConnectionIdleTimeout =
			uint32(v.(int))

	}

	//cors_policy
	if v, ok := d.GetOk("cors_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		corsPolicy := &ves_io_schema.CorsPolicy{}
		createSpec.CorsPolicy = corsPolicy
		for _, set := range sl {
			if set != nil {
				corsPolicyMapStrToI := set.(map[string]interface{})

				if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
					corsPolicy.AllowCredentials = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
					corsPolicy.AllowHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
					corsPolicy.AllowMethods = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOrigin = ls
				}

				if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin_regex")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOriginRegex = ls
				}

				if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
					corsPolicy.Disabled = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
					corsPolicy.ExposeHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
					corsPolicy.MaximumAge = int32(w.(int))
				}

			}
		}

	}

	//csrf_policy
	if v, ok := d.GetOk("csrf_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		csrfPolicy := &ves_io_schema.CsrfPolicy{}
		createSpec.CsrfPolicy = csrfPolicy
		for _, set := range sl {
			if set != nil {
				csrfPolicyMapStrToI := set.(map[string]interface{})

				allowedDomainsTypeFound := false

				if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
						allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

				if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
					allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
					csrfPolicy.AllowedDomains = allowedDomainsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["domains"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field domains")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								allowedDomainsInt.CustomDomainList.Domains = ls

							}

						}
					}

				}

				if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
						allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

			}
		}

	}

	//custom_errors

	//default_lb_choice

	defaultLbChoiceTypeFound := false

	if v, ok := d.GetOk("default_loadbalancer"); ok && !defaultLbChoiceTypeFound {

		defaultLbChoiceTypeFound = true

		if v.(bool) {
			defaultLbChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_DefaultLoadbalancer{}
			defaultLbChoiceInt.DefaultLoadbalancer = &ves_io_schema.Empty{}
			createSpec.DefaultLbChoice = defaultLbChoiceInt
		}

	}

	if v, ok := d.GetOk("non_default_loadbalancer"); ok && !defaultLbChoiceTypeFound {

		defaultLbChoiceTypeFound = true

		if v.(bool) {
			defaultLbChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_NonDefaultLoadbalancer{}
			defaultLbChoiceInt.NonDefaultLoadbalancer = &ves_io_schema.Empty{}
			createSpec.DefaultLbChoice = defaultLbChoiceInt
		}

	}

	//disable_default_error_pages
	if v, ok := d.GetOk("disable_default_error_pages"); ok && !isIntfNil(v) {

		createSpec.DisableDefaultErrorPages =
			v.(bool)

	}

	//disable_dns_resolve
	if v, ok := d.GetOk("disable_dns_resolve"); ok && !isIntfNil(v) {

		createSpec.DisableDnsResolve =
			v.(bool)

	}

	//domains
	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field domains")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		createSpec.Domains = ls

	}

	//dynamic_reverse_proxy
	if v, ok := d.GetOk("dynamic_reverse_proxy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		dynamicReverseProxy := &ves_io_schema_virtual_host.DynamicReverseProxyType{}
		createSpec.DynamicReverseProxy = dynamicReverseProxy
		for _, set := range sl {
			if set != nil {
				dynamicReverseProxyMapStrToI := set.(map[string]interface{})

				if w, ok := dynamicReverseProxyMapStrToI["connection_timeout"]; ok && !isIntfNil(w) {
					dynamicReverseProxy.ConnectionTimeout = uint32(w.(int))
				}

				if v, ok := dynamicReverseProxyMapStrToI["resolution_network"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					resolutionNetworkInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					dynamicReverseProxy.ResolutionNetwork = resolutionNetworkInt
					for i, ps := range sl {

						rnMapToStrVal := ps.(map[string]interface{})
						resolutionNetworkInt[i] = &ves_io_schema.ObjectRefType{}

						resolutionNetworkInt[i].Kind = "virtual_network"

						if v, ok := rnMapToStrVal["name"]; ok && !isIntfNil(v) {
							resolutionNetworkInt[i].Name = v.(string)
						}

						if v, ok := rnMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							resolutionNetworkInt[i].Namespace = v.(string)
						}

						if v, ok := rnMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							resolutionNetworkInt[i].Tenant = v.(string)
						}

						if v, ok := rnMapToStrVal["uid"]; ok && !isIntfNil(v) {
							resolutionNetworkInt[i].Uid = v.(string)
						}

					}

				}

				if v, ok := dynamicReverseProxyMapStrToI["resolution_network_type"]; ok && !isIntfNil(v) {

					dynamicReverseProxy.ResolutionNetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

				}

				if w, ok := dynamicReverseProxyMapStrToI["resolve_endpoint_dynamically"]; ok && !isIntfNil(w) {
					dynamicReverseProxy.ResolveEndpointDynamically = w.(bool)
				}

			}
		}

	}

	//http_protocol_options
	if v, ok := d.GetOk("http_protocol_options"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		httpProtocolOptions := &ves_io_schema_virtual_host.HttpProtocolOptions{}
		createSpec.HttpProtocolOptions = httpProtocolOptions
		for _, set := range sl {
			if set != nil {
				httpProtocolOptionsMapStrToI := set.(map[string]interface{})

				httpProtocolChoiceTypeFound := false

				if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

					httpProtocolChoiceTypeFound = true
					httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1Only{}
					httpProtocolChoiceInt.HttpProtocolEnableV1Only = &ves_io_schema_virtual_host.Http1ProtocolOptions{}
					httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["header_transformation"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headerTransformation := &ves_io_schema.HeaderTransformationType{}
								httpProtocolChoiceInt.HttpProtocolEnableV1Only.HeaderTransformation = headerTransformation
								for _, set := range sl {
									if set != nil {
										headerTransformationMapStrToI := set.(map[string]interface{})

										headerTransformationChoiceTypeFound := false

										if v, ok := headerTransformationMapStrToI["default_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

											headerTransformationChoiceTypeFound = true

											if v.(bool) {
												headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_DefaultHeaderTransformation{}
												headerTransformationChoiceInt.DefaultHeaderTransformation = &ves_io_schema.Empty{}
												headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
											}

										}

										if v, ok := headerTransformationMapStrToI["legacy_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

											headerTransformationChoiceTypeFound = true

											if v.(bool) {
												headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_LegacyHeaderTransformation{}
												headerTransformationChoiceInt.LegacyHeaderTransformation = &ves_io_schema.Empty{}
												headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
											}

										}

										if v, ok := headerTransformationMapStrToI["preserve_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

											headerTransformationChoiceTypeFound = true

											if v.(bool) {
												headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_PreserveCaseHeaderTransformation{}
												headerTransformationChoiceInt.PreserveCaseHeaderTransformation = &ves_io_schema.Empty{}
												headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
											}

										}

										if v, ok := headerTransformationMapStrToI["proper_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

											headerTransformationChoiceTypeFound = true

											if v.(bool) {
												headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_ProperCaseHeaderTransformation{}
												headerTransformationChoiceInt.ProperCaseHeaderTransformation = &ves_io_schema.Empty{}
												headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_v2"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

					httpProtocolChoiceTypeFound = true

					if v.(bool) {
						httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1V2{}
						httpProtocolChoiceInt.HttpProtocolEnableV1V2 = &ves_io_schema.Empty{}
						httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
					}

				}

				if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v2_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

					httpProtocolChoiceTypeFound = true

					if v.(bool) {
						httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV2Only{}
						httpProtocolChoiceInt.HttpProtocolEnableV2Only = &ves_io_schema.Empty{}
						httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
					}

				}

			}
		}

	}

	//idle_timeout
	if v, ok := d.GetOk("idle_timeout"); ok && !isIntfNil(v) {

		createSpec.IdleTimeout =
			uint32(v.(int))

	}

	//max_request_header_size
	if v, ok := d.GetOk("max_request_header_size"); ok && !isIntfNil(v) {

		createSpec.MaxRequestHeaderSize =
			uint32(v.(int))

	}

	//path_normalize_choice

	pathNormalizeChoiceTypeFound := false

	if v, ok := d.GetOk("disable_path_normalize"); ok && !pathNormalizeChoiceTypeFound {

		pathNormalizeChoiceTypeFound = true

		if v.(bool) {
			pathNormalizeChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_DisablePathNormalize{}
			pathNormalizeChoiceInt.DisablePathNormalize = &ves_io_schema.Empty{}
			createSpec.PathNormalizeChoice = pathNormalizeChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_path_normalize"); ok && !pathNormalizeChoiceTypeFound {

		pathNormalizeChoiceTypeFound = true

		if v.(bool) {
			pathNormalizeChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_EnablePathNormalize{}
			pathNormalizeChoiceInt.EnablePathNormalize = &ves_io_schema.Empty{}
			createSpec.PathNormalizeChoice = pathNormalizeChoiceInt
		}

	}

	//proxy
	if v, ok := d.GetOk("proxy"); ok && !isIntfNil(v) {

		createSpec.Proxy = ves_io_schema_virtual_host.ProxyType(ves_io_schema_virtual_host.ProxyType_value[v.(string)])

	}

	//rate_limiter_allowed_prefixes
	if v, ok := d.GetOk("rate_limiter_allowed_prefixes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rateLimiterAllowedPrefixesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
		for i, ps := range sl {

			rlapMapToStrVal := ps.(map[string]interface{})
			rateLimiterAllowedPrefixesInt[i] = &ves_io_schema.ObjectRefType{}

			rateLimiterAllowedPrefixesInt[i].Kind = "ip_prefix_set"

			if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
				rateLimiterAllowedPrefixesInt[i].Name = v.(string)
			}

			if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
			}

			if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
			}

			if v, ok := rlapMapToStrVal["uid"]; ok && !isIntfNil(v) {
				rateLimiterAllowedPrefixesInt[i].Uid = v.(string)
			}

		}

	}

	//request_cookies_to_add
	if v, ok := d.GetOk("request_cookies_to_add"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		requestCookiesToAdd := make([]*ves_io_schema.CookieValueOption, len(sl))
		createSpec.RequestCookiesToAdd = requestCookiesToAdd
		for i, set := range sl {
			if set != nil {
				requestCookiesToAdd[i] = &ves_io_schema.CookieValueOption{}
				requestCookiesToAddMapStrToI := set.(map[string]interface{})

				if w, ok := requestCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
					requestCookiesToAdd[i].Name = w.(string)
				}

				if w, ok := requestCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
					requestCookiesToAdd[i].Overwrite = w.(bool)
				}

				valueChoiceTypeFound := false

				if v, ok := requestCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.CookieValueOption_SecretValue{}
					valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
					requestCookiesToAdd[i].ValueChoice = valueChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							secretInfoOneofTypeFound := false

							if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := requestCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.CookieValueOption_Value{}

					requestCookiesToAdd[i].ValueChoice = valueChoiceInt

					valueChoiceInt.Value = v.(string)

				}

			}
		}

	}

	//request_cookies_to_remove
	if v, ok := d.GetOk("request_cookies_to_remove"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field request_cookies_to_remove")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		createSpec.RequestCookiesToRemove = ls

	}

	//request_headers_to_add
	if v, ok := d.GetOk("request_headers_to_add"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
		createSpec.RequestHeadersToAdd = requestHeadersToAdd
		for i, set := range sl {
			if set != nil {
				requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
				requestHeadersToAddMapStrToI := set.(map[string]interface{})

				if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
					requestHeadersToAdd[i].Append = w.(bool)
				}

				if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
					requestHeadersToAdd[i].Name = w.(string)
				}

				valueChoiceTypeFound := false

				if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
					valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
					requestHeadersToAdd[i].ValueChoice = valueChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							secretInfoOneofTypeFound := false

							if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

					requestHeadersToAdd[i].ValueChoice = valueChoiceInt

					valueChoiceInt.Value = v.(string)

				}

			}
		}

	}

	//request_headers_to_remove
	if v, ok := d.GetOk("request_headers_to_remove"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field request_headers_to_remove")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		createSpec.RequestHeadersToRemove = ls

	}

	//response_cookies_to_add
	if v, ok := d.GetOk("response_cookies_to_add"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		responseCookiesToAdd := make([]*ves_io_schema.SetCookieValueOption, len(sl))
		createSpec.ResponseCookiesToAdd = responseCookiesToAdd
		for i, set := range sl {
			if set != nil {
				responseCookiesToAdd[i] = &ves_io_schema.SetCookieValueOption{}
				responseCookiesToAddMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema.SetCookieValueOption_AddDomain{}

					responseCookiesToAdd[i].DomainChoice = domainChoiceInt

					domainChoiceInt.AddDomain = v.(string)

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreDomain{}
						domainChoiceInt.IgnoreDomain = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].DomainChoice = domainChoiceInt
					}

				}

				expiryChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

					expiryChoiceTypeFound = true
					expiryChoiceInt := &ves_io_schema.SetCookieValueOption_AddExpiry{}

					responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt

					expiryChoiceInt.AddExpiry = v.(string)

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

					expiryChoiceTypeFound = true

					if v.(bool) {
						expiryChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreExpiry{}
						expiryChoiceInt.IgnoreExpiry = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt
					}

				}

				httponlyChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

					httponlyChoiceTypeFound = true

					if v.(bool) {
						httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_AddHttponly{}
						httponlyChoiceInt.AddHttponly = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

					httponlyChoiceTypeFound = true

					if v.(bool) {
						httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreHttponly{}
						httponlyChoiceInt.IgnoreHttponly = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
					}

				}

				maxAgeChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

					maxAgeChoiceTypeFound = true

					if v.(bool) {
						maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreMaxAge{}
						maxAgeChoiceInt.IgnoreMaxAge = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

					maxAgeChoiceTypeFound = true
					maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_MaxAgeValue{}

					responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt

					maxAgeChoiceInt.MaxAgeValue = int32(v.(int))

				}

				if w, ok := responseCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
					responseCookiesToAdd[i].Name = w.(string)
				}

				if w, ok := responseCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
					responseCookiesToAdd[i].Overwrite = w.(bool)
				}

				partitionedChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

					partitionedChoiceTypeFound = true

					if v.(bool) {
						partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_AddPartitioned{}
						partitionedChoiceInt.AddPartitioned = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

					partitionedChoiceTypeFound = true

					if v.(bool) {
						partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePartitioned{}
						partitionedChoiceInt.IgnorePartitioned = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
					}

				}

				pathChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema.SetCookieValueOption_AddPath{}

					responseCookiesToAdd[i].PathChoice = pathChoiceInt

					pathChoiceInt.AddPath = v.(string)

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true

					if v.(bool) {
						pathChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePath{}
						pathChoiceInt.IgnorePath = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].PathChoice = pathChoiceInt
					}

				}

				samesiteChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

					samesiteChoiceTypeFound = true

					if v.(bool) {
						samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSamesite{}
						samesiteChoiceInt.IgnoreSamesite = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

					samesiteChoiceTypeFound = true

					if v.(bool) {
						samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteLax{}
						samesiteChoiceInt.SamesiteLax = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

					samesiteChoiceTypeFound = true

					if v.(bool) {
						samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteNone{}
						samesiteChoiceInt.SamesiteNone = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

					samesiteChoiceTypeFound = true

					if v.(bool) {
						samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteStrict{}
						samesiteChoiceInt.SamesiteStrict = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
					}

				}

				secureChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

					secureChoiceTypeFound = true

					if v.(bool) {
						secureChoiceInt := &ves_io_schema.SetCookieValueOption_AddSecure{}
						secureChoiceInt.AddSecure = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SecureChoice = secureChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

					secureChoiceTypeFound = true

					if v.(bool) {
						secureChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSecure{}
						secureChoiceInt.IgnoreSecure = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SecureChoice = secureChoiceInt
					}

				}

				valueChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["ignore_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true

					if v.(bool) {
						valueChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreValue{}
						valueChoiceInt.IgnoreValue = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].ValueChoice = valueChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.SetCookieValueOption_SecretValue{}
					valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
					responseCookiesToAdd[i].ValueChoice = valueChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							secretInfoOneofTypeFound := false

							if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.SetCookieValueOption_Value{}

					responseCookiesToAdd[i].ValueChoice = valueChoiceInt

					valueChoiceInt.Value = v.(string)

				}

			}
		}

	}

	//response_cookies_to_remove
	if v, ok := d.GetOk("response_cookies_to_remove"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field response_cookies_to_remove")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		createSpec.ResponseCookiesToRemove = ls

	}

	//response_headers_to_add
	if v, ok := d.GetOk("response_headers_to_add"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
		createSpec.ResponseHeadersToAdd = responseHeadersToAdd
		for i, set := range sl {
			if set != nil {
				responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
				responseHeadersToAddMapStrToI := set.(map[string]interface{})

				if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
					responseHeadersToAdd[i].Append = w.(bool)
				}

				if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
					responseHeadersToAdd[i].Name = w.(string)
				}

				valueChoiceTypeFound := false

				if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
					valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
					responseHeadersToAdd[i].ValueChoice = valueChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							secretInfoOneofTypeFound := false

							if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

					responseHeadersToAdd[i].ValueChoice = valueChoiceInt

					valueChoiceInt.Value = v.(string)

				}

			}
		}

	}

	//response_headers_to_remove
	if v, ok := d.GetOk("response_headers_to_remove"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field response_headers_to_remove")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		createSpec.ResponseHeadersToRemove = ls

	}

	//retry_policy
	if v, ok := d.GetOk("retry_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		retryPolicy := &ves_io_schema.RetryPolicyType{}
		createSpec.RetryPolicy = retryPolicy
		for _, set := range sl {
			if set != nil {
				retryPolicyMapStrToI := set.(map[string]interface{})

				if v, ok := retryPolicyMapStrToI["back_off"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					backOff := &ves_io_schema.RetryBackOff{}
					retryPolicy.BackOff = backOff
					for _, set := range sl {
						if set != nil {
							backOffMapStrToI := set.(map[string]interface{})

							if w, ok := backOffMapStrToI["base_interval"]; ok && !isIntfNil(w) {
								backOff.BaseInterval = uint32(w.(int))
							}

							if w, ok := backOffMapStrToI["max_interval"]; ok && !isIntfNil(w) {
								backOff.MaxInterval = uint32(w.(int))
							}

						}
					}

				}

				if w, ok := retryPolicyMapStrToI["num_retries"]; ok && !isIntfNil(w) {
					retryPolicy.NumRetries = uint32(w.(int))
				}

				if w, ok := retryPolicyMapStrToI["per_try_timeout"]; ok && !isIntfNil(w) {
					retryPolicy.PerTryTimeout = uint32(w.(int))
				}

				if w, ok := retryPolicyMapStrToI["retriable_status_codes"]; ok && !isIntfNil(w) {
					ls := make([]uint32, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						ls[i] = uint32(v.(int))
					}
					retryPolicy.RetriableStatusCodes = ls
				}

				if w, ok := retryPolicyMapStrToI["retry_condition"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field retry_condition")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					retryPolicy.RetryCondition = ls
				}

			}
		}

	}

	//routes
	if v, ok := d.GetOk("routes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		routesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.Routes = routesInt
		for i, ps := range sl {

			rMapToStrVal := ps.(map[string]interface{})
			routesInt[i] = &ves_io_schema.ObjectRefType{}

			routesInt[i].Kind = "route"

			if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
				routesInt[i].Name = v.(string)
			}

			if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				routesInt[i].Namespace = v.(string)
			}

			if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				routesInt[i].Tenant = v.(string)
			}

			if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
				routesInt[i].Uid = v.(string)
			}

		}

	}

	//sensitive_data_policy
	if v, ok := d.GetOk("sensitive_data_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		sensitiveDataPolicyInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.SensitiveDataPolicy = sensitiveDataPolicyInt
		for i, ps := range sl {

			sdpMapToStrVal := ps.(map[string]interface{})
			sensitiveDataPolicyInt[i] = &ves_io_schema.ObjectRefType{}

			sensitiveDataPolicyInt[i].Kind = "sensitive_data_policy"

			if v, ok := sdpMapToStrVal["name"]; ok && !isIntfNil(v) {
				sensitiveDataPolicyInt[i].Name = v.(string)
			}

			if v, ok := sdpMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				sensitiveDataPolicyInt[i].Namespace = v.(string)
			}

			if v, ok := sdpMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				sensitiveDataPolicyInt[i].Tenant = v.(string)
			}

			if v, ok := sdpMapToStrVal["uid"]; ok && !isIntfNil(v) {
				sensitiveDataPolicyInt[i].Uid = v.(string)
			}

		}

	}

	//server_header_choice

	serverHeaderChoiceTypeFound := false

	if v, ok := d.GetOk("append_server_name"); ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

		serverHeaderChoiceTypeFound = true
		serverHeaderChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_AppendServerName{}

		createSpec.ServerHeaderChoice = serverHeaderChoiceInt

		serverHeaderChoiceInt.AppendServerName = v.(string)

	}

	if v, ok := d.GetOk("default_header"); ok && !serverHeaderChoiceTypeFound {

		serverHeaderChoiceTypeFound = true

		if v.(bool) {
			serverHeaderChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_DefaultHeader{}
			serverHeaderChoiceInt.DefaultHeader = &ves_io_schema.Empty{}
			createSpec.ServerHeaderChoice = serverHeaderChoiceInt
		}

	}

	if v, ok := d.GetOk("pass_through"); ok && !serverHeaderChoiceTypeFound {

		serverHeaderChoiceTypeFound = true

		if v.(bool) {
			serverHeaderChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_PassThrough{}
			serverHeaderChoiceInt.PassThrough = &ves_io_schema.Empty{}
			createSpec.ServerHeaderChoice = serverHeaderChoiceInt
		}

	}

	if v, ok := d.GetOk("server_name"); ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

		serverHeaderChoiceTypeFound = true
		serverHeaderChoiceInt := &ves_io_schema_virtual_host.CreateSpecType_ServerName{}

		createSpec.ServerHeaderChoice = serverHeaderChoiceInt

		serverHeaderChoiceInt.ServerName = v.(string)

	}

	//slow_ddos_mitigation
	if v, ok := d.GetOk("slow_ddos_mitigation"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		slowDdosMitigation := &ves_io_schema_virtual_host.SlowDDoSMitigation{}
		createSpec.SlowDdosMitigation = slowDdosMitigation
		for _, set := range sl {
			if set != nil {
				slowDdosMitigationMapStrToI := set.(map[string]interface{})

				if w, ok := slowDdosMitigationMapStrToI["request_headers_timeout"]; ok && !isIntfNil(w) {
					slowDdosMitigation.RequestHeadersTimeout = uint32(w.(int))
				}

				requestTimeoutChoiceTypeFound := false

				if v, ok := slowDdosMitigationMapStrToI["disable_request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true

					if v.(bool) {
						requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_DisableRequestTimeout{}
						requestTimeoutChoiceInt.DisableRequestTimeout = &ves_io_schema.Empty{}
						slowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt
					}

				}

				if v, ok := slowDdosMitigationMapStrToI["request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true
					requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_RequestTimeout{}

					slowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt

					requestTimeoutChoiceInt.RequestTimeout = uint32(v.(int))

				}

			}
		}

	}

	//user_identification
	if v, ok := d.GetOk("user_identification"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		userIdentificationInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		createSpec.UserIdentification = userIdentificationInt
		for i, ps := range sl {

			uiMapToStrVal := ps.(map[string]interface{})
			userIdentificationInt[i] = &ves_io_schema.ObjectRefType{}

			userIdentificationInt[i].Kind = "user_identification"

			if v, ok := uiMapToStrVal["name"]; ok && !isIntfNil(v) {
				userIdentificationInt[i].Name = v.(string)
			}

			if v, ok := uiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				userIdentificationInt[i].Namespace = v.(string)
			}

			if v, ok := uiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				userIdentificationInt[i].Tenant = v.(string)
			}

			if v, ok := uiMapToStrVal["uid"]; ok && !isIntfNil(v) {
				userIdentificationInt[i].Uid = v.(string)
			}

		}

	}

	//waf_type
	if v, ok := d.GetOk("waf_type"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafType := &ves_io_schema.WafType{}
		createSpec.WafType = wafType
		for _, set := range sl {
			if set != nil {
				wafTypeMapStrToI := set.(map[string]interface{})

				refTypeTypeFound := false

				if v, ok := wafTypeMapStrToI["app_firewall"]; ok && !isIntfNil(v) && !refTypeTypeFound {

					refTypeTypeFound = true
					refTypeInt := &ves_io_schema.WafType_AppFirewall{}
					refTypeInt.AppFirewall = &ves_io_schema.AppFirewallRefType{}
					wafType.RefType = refTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["app_firewall"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								appFirewallInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								refTypeInt.AppFirewall.AppFirewall = appFirewallInt
								for i, ps := range sl {

									afMapToStrVal := ps.(map[string]interface{})
									appFirewallInt[i] = &ves_io_schema.ObjectRefType{}

									appFirewallInt[i].Kind = "app_firewall"

									if v, ok := afMapToStrVal["name"]; ok && !isIntfNil(v) {
										appFirewallInt[i].Name = v.(string)
									}

									if v, ok := afMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										appFirewallInt[i].Namespace = v.(string)
									}

									if v, ok := afMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										appFirewallInt[i].Tenant = v.(string)
									}

									if v, ok := afMapToStrVal["uid"]; ok && !isIntfNil(v) {
										appFirewallInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := wafTypeMapStrToI["disable_waf"]; ok && !isIntfNil(v) && !refTypeTypeFound {

					refTypeTypeFound = true

					if v.(bool) {
						refTypeInt := &ves_io_schema.WafType_DisableWaf{}
						refTypeInt.DisableWaf = &ves_io_schema.Empty{}
						wafType.RefType = refTypeInt
					}

				}

				if v, ok := wafTypeMapStrToI["inherit_waf"]; ok && !isIntfNil(v) && !refTypeTypeFound {

					refTypeTypeFound = true

					if v.(bool) {
						refTypeInt := &ves_io_schema.WafType_InheritWaf{}
						refTypeInt.InheritWaf = &ves_io_schema.Empty{}
						wafType.RefType = refTypeInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra VirtualHost object with struct: %+v", createReq)

	createVirtualHostResp, err := client.CreateObject(context.Background(), ves_io_schema_virtual_host.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating VirtualHost: %s", err)
	}
	d.SetId(createVirtualHostResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraVirtualHostRead(d, meta)
}

func resourceVolterraVirtualHostRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_virtual_host.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] VirtualHost %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra VirtualHost %q: %s", d.Id(), err)
	}
	return setVirtualHostFields(client, d, resp)
}

func setVirtualHostFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraVirtualHostUpdate updates VirtualHost resource
func resourceVolterraVirtualHostUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_virtual_host.ReplaceSpecType{}
	updateReq := &ves_io_schema_virtual_host.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("add_location"); ok && !isIntfNil(v) {

		updateSpec.AddLocation =
			v.(bool)

	}

	if v, ok := d.GetOk("advertise_policies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		advertisePoliciesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.AdvertisePolicies = advertisePoliciesInt
		for i, ps := range sl {

			apMapToStrVal := ps.(map[string]interface{})
			advertisePoliciesInt[i] = &ves_io_schema.ObjectRefType{}

			advertisePoliciesInt[i].Kind = "advertise_policy"

			if v, ok := apMapToStrVal["name"]; ok && !isIntfNil(v) {
				advertisePoliciesInt[i].Name = v.(string)
			}

			if v, ok := apMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				advertisePoliciesInt[i].Namespace = v.(string)
			}

			if v, ok := apMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				advertisePoliciesInt[i].Tenant = v.(string)
			}

			if v, ok := apMapToStrVal["uid"]; ok && !isIntfNil(v) {
				advertisePoliciesInt[i].Uid = v.(string)
			}

		}

	}

	authenticationChoiceTypeFound := false

	if v, ok := d.GetOk("authentication"); ok && !isIntfNil(v) && !authenticationChoiceTypeFound {

		authenticationChoiceTypeFound = true
		authenticationChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_Authentication{}
		authenticationChoiceInt.Authentication = &ves_io_schema_virtual_host.AuthenticationDetails{}
		updateSpec.AuthenticationChoice = authenticationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["auth_config"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					authConfigInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					authenticationChoiceInt.Authentication.AuthConfig = authConfigInt
					for i, ps := range sl {

						acMapToStrVal := ps.(map[string]interface{})
						authConfigInt[i] = &ves_io_schema.ObjectRefType{}

						authConfigInt[i].Kind = "authentication"

						if v, ok := acMapToStrVal["name"]; ok && !isIntfNil(v) {
							authConfigInt[i].Name = v.(string)
						}

						if v, ok := acMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							authConfigInt[i].Namespace = v.(string)
						}

						if v, ok := acMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							authConfigInt[i].Tenant = v.(string)
						}

						if v, ok := acMapToStrVal["uid"]; ok && !isIntfNil(v) {
							authConfigInt[i].Uid = v.(string)
						}

					}

				}

				cookieParamsChoiceTypeFound := false

				if v, ok := cs["cookie_params"]; ok && !isIntfNil(v) && !cookieParamsChoiceTypeFound {

					cookieParamsChoiceTypeFound = true
					cookieParamsChoiceInt := &ves_io_schema_virtual_host.AuthenticationDetails_CookieParams{}
					cookieParamsChoiceInt.CookieParams = &ves_io_schema_authentication.CookieParams{}
					authenticationChoiceInt.Authentication.CookieParamsChoice = cookieParamsChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								cookieParamsChoiceInt.CookieParams.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["cookie_refresh_interval"]; ok && !isIntfNil(v) {

								cookieParamsChoiceInt.CookieParams.CookieRefreshInterval = uint32(v.(int))

							}

							secretChoiceTypeFound := false

							if v, ok := cs["auth_hmac"]; ok && !isIntfNil(v) && !secretChoiceTypeFound {

								secretChoiceTypeFound = true
								secretChoiceInt := &ves_io_schema_authentication.CookieParams_AuthHmac{}
								secretChoiceInt.AuthHmac = &ves_io_schema_authentication.HMACKeyPair{}
								cookieParamsChoiceInt.CookieParams.SecretChoice = secretChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["prim_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											primKey := &ves_io_schema.SecretType{}
											secretChoiceInt.AuthHmac.PrimKey = primKey
											for _, set := range sl {
												if set != nil {
													primKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := primKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														primKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := primKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														primKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["prim_key_expiry"]; ok && !isIntfNil(v) {

											ts, err := parseTime(v.(string))
											if err != nil {
												return fmt.Errorf("error creating PrimKeyExpiry, timestamp format is wrong: %s", err)
											}
											secretChoiceInt.AuthHmac.PrimKeyExpiry = ts
										}

										if v, ok := cs["sec_key"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											secKey := &ves_io_schema.SecretType{}
											secretChoiceInt.AuthHmac.SecKey = secKey
											for _, set := range sl {
												if set != nil {
													secKeyMapStrToI := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := secKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														secKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := secKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														secKey.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["sec_key_expiry"]; ok && !isIntfNil(v) {

											ts, err := parseTime(v.(string))
											if err != nil {
												return fmt.Errorf("error creating SecKeyExpiry, timestamp format is wrong: %s", err)
											}
											secretChoiceInt.AuthHmac.SecKeyExpiry = ts
										}

									}
								}

							}

							if v, ok := cs["kms_key_hmac"]; ok && !secretChoiceTypeFound {

								secretChoiceTypeFound = true
								secretChoiceInt := &ves_io_schema_authentication.CookieParams_KmsKeyHmac{}
								secretChoiceInt.KmsKeyHmac = &ves_io_schema_authentication.KMSKeyRefType{}
								cookieParamsChoiceInt.CookieParams.SecretChoice = secretChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										_ = set.(map[string]interface{})

									}
								}

							}

							if v, ok := cs["session_expiry"]; ok && !isIntfNil(v) {

								cookieParamsChoiceInt.CookieParams.SessionExpiry = uint32(v.(int))

							}

						}
					}

				}

				if v, ok := cs["use_auth_object_config"]; ok && !isIntfNil(v) && !cookieParamsChoiceTypeFound {

					cookieParamsChoiceTypeFound = true

					if v.(bool) {
						cookieParamsChoiceInt := &ves_io_schema_virtual_host.AuthenticationDetails_UseAuthObjectConfig{}
						cookieParamsChoiceInt.UseAuthObjectConfig = &ves_io_schema.Empty{}
						authenticationChoiceInt.Authentication.CookieParamsChoice = cookieParamsChoiceInt
					}

				}

				redirectUrlChoiceTypeFound := false

				if v, ok := cs["redirect_dynamic"]; ok && !isIntfNil(v) && !redirectUrlChoiceTypeFound {

					redirectUrlChoiceTypeFound = true

					if v.(bool) {
						redirectUrlChoiceInt := &ves_io_schema_virtual_host.AuthenticationDetails_RedirectDynamic{}
						redirectUrlChoiceInt.RedirectDynamic = &ves_io_schema.Empty{}
						authenticationChoiceInt.Authentication.RedirectUrlChoice = redirectUrlChoiceInt
					}

				}

				if v, ok := cs["redirect_url"]; ok && !isIntfNil(v) && !redirectUrlChoiceTypeFound {

					redirectUrlChoiceTypeFound = true
					redirectUrlChoiceInt := &ves_io_schema_virtual_host.AuthenticationDetails_RedirectUrl{}

					authenticationChoiceInt.Authentication.RedirectUrlChoice = redirectUrlChoiceInt

					redirectUrlChoiceInt.RedirectUrl = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("no_authentication"); ok && !authenticationChoiceTypeFound {

		authenticationChoiceTypeFound = true

		if v.(bool) {
			authenticationChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_NoAuthentication{}
			authenticationChoiceInt.NoAuthentication = &ves_io_schema.Empty{}
			updateSpec.AuthenticationChoice = authenticationChoiceInt
		}

	}

	if v, ok := d.GetOk("buffer_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		bufferPolicy := &ves_io_schema.BufferConfigType{}
		updateSpec.BufferPolicy = bufferPolicy
		for _, set := range sl {
			if set != nil {
				bufferPolicyMapStrToI := set.(map[string]interface{})

				if w, ok := bufferPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
					bufferPolicy.Disabled = w.(bool)
				}

				if w, ok := bufferPolicyMapStrToI["max_request_bytes"]; ok && !isIntfNil(w) {
					bufferPolicy.MaxRequestBytes = uint32(w.(int))
				}

			}
		}

	}

	challengeTypeTypeFound := false

	if v, ok := d.GetOk("captcha_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_virtual_host.ReplaceSpecType_CaptchaChallenge{}
		challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("js_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_virtual_host.ReplaceSpecType_JsChallenge{}
		challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CustomPage = v.(string)

				}

				if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("no_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true

		if v.(bool) {
			challengeTypeInt := &ves_io_schema_virtual_host.ReplaceSpecType_NoChallenge{}
			challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
			updateSpec.ChallengeType = challengeTypeInt
		}

	}

	if v, ok := d.GetOk("coalescing_options"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		coalescingOptions := &ves_io_schema.TLSCoalescingOptions{}
		updateSpec.CoalescingOptions = coalescingOptions
		for _, set := range sl {
			if set != nil {
				coalescingOptionsMapStrToI := set.(map[string]interface{})

				coalescingChoiceTypeFound := false

				if v, ok := coalescingOptionsMapStrToI["default_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

					coalescingChoiceTypeFound = true

					if v.(bool) {
						coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_DefaultCoalescing{}
						coalescingChoiceInt.DefaultCoalescing = &ves_io_schema.Empty{}
						coalescingOptions.CoalescingChoice = coalescingChoiceInt
					}

				}

				if v, ok := coalescingOptionsMapStrToI["strict_coalescing"]; ok && !isIntfNil(v) && !coalescingChoiceTypeFound {

					coalescingChoiceTypeFound = true

					if v.(bool) {
						coalescingChoiceInt := &ves_io_schema.TLSCoalescingOptions_StrictCoalescing{}
						coalescingChoiceInt.StrictCoalescing = &ves_io_schema.Empty{}
						coalescingOptions.CoalescingChoice = coalescingChoiceInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("compression_params"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		compressionParams := &ves_io_schema_virtual_host.CompressionType{}
		updateSpec.CompressionParams = compressionParams
		for _, set := range sl {
			if set != nil {
				compressionParamsMapStrToI := set.(map[string]interface{})

				if w, ok := compressionParamsMapStrToI["content_length"]; ok && !isIntfNil(w) {
					compressionParams.ContentLength = uint32(w.(int))
				}

				if w, ok := compressionParamsMapStrToI["content_type"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field content_type")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					compressionParams.ContentType = ls
				}

				if w, ok := compressionParamsMapStrToI["disable_on_etag_header"]; ok && !isIntfNil(w) {
					compressionParams.DisableOnEtagHeader = w.(bool)
				}

				if w, ok := compressionParamsMapStrToI["remove_accept_encoding_header"]; ok && !isIntfNil(w) {
					compressionParams.RemoveAcceptEncodingHeader = w.(bool)
				}

			}
		}

	}

	if v, ok := d.GetOk("connection_idle_timeout"); ok && !isIntfNil(v) {

		updateSpec.ConnectionIdleTimeout =
			uint32(v.(int))

	}

	if v, ok := d.GetOk("cors_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		corsPolicy := &ves_io_schema.CorsPolicy{}
		updateSpec.CorsPolicy = corsPolicy
		for _, set := range sl {
			if set != nil {
				corsPolicyMapStrToI := set.(map[string]interface{})

				if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
					corsPolicy.AllowCredentials = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
					corsPolicy.AllowHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
					corsPolicy.AllowMethods = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOrigin = ls
				}

				if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin_regex")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOriginRegex = ls
				}

				if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
					corsPolicy.Disabled = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
					corsPolicy.ExposeHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
					corsPolicy.MaximumAge = int32(w.(int))
				}

			}
		}

	}

	if v, ok := d.GetOk("csrf_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		csrfPolicy := &ves_io_schema.CsrfPolicy{}
		updateSpec.CsrfPolicy = csrfPolicy
		for _, set := range sl {
			if set != nil {
				csrfPolicyMapStrToI := set.(map[string]interface{})

				allowedDomainsTypeFound := false

				if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
						allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

				if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
					allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
					csrfPolicy.AllowedDomains = allowedDomainsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["domains"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field domains")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								allowedDomainsInt.CustomDomainList.Domains = ls

							}

						}
					}

				}

				if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
						allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

			}
		}

	}

	defaultLbChoiceTypeFound := false

	if v, ok := d.GetOk("default_loadbalancer"); ok && !defaultLbChoiceTypeFound {

		defaultLbChoiceTypeFound = true

		if v.(bool) {
			defaultLbChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_DefaultLoadbalancer{}
			defaultLbChoiceInt.DefaultLoadbalancer = &ves_io_schema.Empty{}
			updateSpec.DefaultLbChoice = defaultLbChoiceInt
		}

	}

	if v, ok := d.GetOk("non_default_loadbalancer"); ok && !defaultLbChoiceTypeFound {

		defaultLbChoiceTypeFound = true

		if v.(bool) {
			defaultLbChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_NonDefaultLoadbalancer{}
			defaultLbChoiceInt.NonDefaultLoadbalancer = &ves_io_schema.Empty{}
			updateSpec.DefaultLbChoice = defaultLbChoiceInt
		}

	}

	if v, ok := d.GetOk("disable_default_error_pages"); ok && !isIntfNil(v) {

		updateSpec.DisableDefaultErrorPages =
			v.(bool)

	}

	if v, ok := d.GetOk("disable_dns_resolve"); ok && !isIntfNil(v) {

		updateSpec.DisableDnsResolve =
			v.(bool)

	}

	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field domains")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		updateSpec.Domains = ls

	}

	if v, ok := d.GetOk("dynamic_reverse_proxy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		dynamicReverseProxy := &ves_io_schema_virtual_host.DynamicReverseProxyType{}
		updateSpec.DynamicReverseProxy = dynamicReverseProxy
		for _, set := range sl {
			if set != nil {
				dynamicReverseProxyMapStrToI := set.(map[string]interface{})

				if w, ok := dynamicReverseProxyMapStrToI["connection_timeout"]; ok && !isIntfNil(w) {
					dynamicReverseProxy.ConnectionTimeout = uint32(w.(int))
				}

				if v, ok := dynamicReverseProxyMapStrToI["resolution_network"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					resolutionNetworkInt := make([]*ves_io_schema.ObjectRefType, len(sl))
					dynamicReverseProxy.ResolutionNetwork = resolutionNetworkInt
					for i, ps := range sl {

						rnMapToStrVal := ps.(map[string]interface{})
						resolutionNetworkInt[i] = &ves_io_schema.ObjectRefType{}

						resolutionNetworkInt[i].Kind = "virtual_network"

						if v, ok := rnMapToStrVal["name"]; ok && !isIntfNil(v) {
							resolutionNetworkInt[i].Name = v.(string)
						}

						if v, ok := rnMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							resolutionNetworkInt[i].Namespace = v.(string)
						}

						if v, ok := rnMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							resolutionNetworkInt[i].Tenant = v.(string)
						}

						if v, ok := rnMapToStrVal["uid"]; ok && !isIntfNil(v) {
							resolutionNetworkInt[i].Uid = v.(string)
						}

					}

				}

				if v, ok := dynamicReverseProxyMapStrToI["resolution_network_type"]; ok && !isIntfNil(v) {

					dynamicReverseProxy.ResolutionNetworkType = ves_io_schema.VirtualNetworkType(ves_io_schema.VirtualNetworkType_value[v.(string)])

				}

				if w, ok := dynamicReverseProxyMapStrToI["resolve_endpoint_dynamically"]; ok && !isIntfNil(w) {
					dynamicReverseProxy.ResolveEndpointDynamically = w.(bool)
				}

			}
		}

	}

	if v, ok := d.GetOk("http_protocol_options"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		httpProtocolOptions := &ves_io_schema_virtual_host.HttpProtocolOptions{}
		updateSpec.HttpProtocolOptions = httpProtocolOptions
		for _, set := range sl {
			if set != nil {
				httpProtocolOptionsMapStrToI := set.(map[string]interface{})

				httpProtocolChoiceTypeFound := false

				if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

					httpProtocolChoiceTypeFound = true
					httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1Only{}
					httpProtocolChoiceInt.HttpProtocolEnableV1Only = &ves_io_schema_virtual_host.Http1ProtocolOptions{}
					httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["header_transformation"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headerTransformation := &ves_io_schema.HeaderTransformationType{}
								httpProtocolChoiceInt.HttpProtocolEnableV1Only.HeaderTransformation = headerTransformation
								for _, set := range sl {
									if set != nil {
										headerTransformationMapStrToI := set.(map[string]interface{})

										headerTransformationChoiceTypeFound := false

										if v, ok := headerTransformationMapStrToI["default_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

											headerTransformationChoiceTypeFound = true

											if v.(bool) {
												headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_DefaultHeaderTransformation{}
												headerTransformationChoiceInt.DefaultHeaderTransformation = &ves_io_schema.Empty{}
												headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
											}

										}

										if v, ok := headerTransformationMapStrToI["legacy_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

											headerTransformationChoiceTypeFound = true

											if v.(bool) {
												headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_LegacyHeaderTransformation{}
												headerTransformationChoiceInt.LegacyHeaderTransformation = &ves_io_schema.Empty{}
												headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
											}

										}

										if v, ok := headerTransformationMapStrToI["preserve_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

											headerTransformationChoiceTypeFound = true

											if v.(bool) {
												headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_PreserveCaseHeaderTransformation{}
												headerTransformationChoiceInt.PreserveCaseHeaderTransformation = &ves_io_schema.Empty{}
												headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
											}

										}

										if v, ok := headerTransformationMapStrToI["proper_case_header_transformation"]; ok && !isIntfNil(v) && !headerTransformationChoiceTypeFound {

											headerTransformationChoiceTypeFound = true

											if v.(bool) {
												headerTransformationChoiceInt := &ves_io_schema.HeaderTransformationType_ProperCaseHeaderTransformation{}
												headerTransformationChoiceInt.ProperCaseHeaderTransformation = &ves_io_schema.Empty{}
												headerTransformation.HeaderTransformationChoice = headerTransformationChoiceInt
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v1_v2"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

					httpProtocolChoiceTypeFound = true

					if v.(bool) {
						httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV1V2{}
						httpProtocolChoiceInt.HttpProtocolEnableV1V2 = &ves_io_schema.Empty{}
						httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
					}

				}

				if v, ok := httpProtocolOptionsMapStrToI["http_protocol_enable_v2_only"]; ok && !isIntfNil(v) && !httpProtocolChoiceTypeFound {

					httpProtocolChoiceTypeFound = true

					if v.(bool) {
						httpProtocolChoiceInt := &ves_io_schema_virtual_host.HttpProtocolOptions_HttpProtocolEnableV2Only{}
						httpProtocolChoiceInt.HttpProtocolEnableV2Only = &ves_io_schema.Empty{}
						httpProtocolOptions.HttpProtocolChoice = httpProtocolChoiceInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("idle_timeout"); ok && !isIntfNil(v) {

		updateSpec.IdleTimeout =
			uint32(v.(int))

	}

	if v, ok := d.GetOk("max_request_header_size"); ok && !isIntfNil(v) {

		updateSpec.MaxRequestHeaderSize =
			uint32(v.(int))

	}

	pathNormalizeChoiceTypeFound := false

	if v, ok := d.GetOk("disable_path_normalize"); ok && !pathNormalizeChoiceTypeFound {

		pathNormalizeChoiceTypeFound = true

		if v.(bool) {
			pathNormalizeChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_DisablePathNormalize{}
			pathNormalizeChoiceInt.DisablePathNormalize = &ves_io_schema.Empty{}
			updateSpec.PathNormalizeChoice = pathNormalizeChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_path_normalize"); ok && !pathNormalizeChoiceTypeFound {

		pathNormalizeChoiceTypeFound = true

		if v.(bool) {
			pathNormalizeChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_EnablePathNormalize{}
			pathNormalizeChoiceInt.EnablePathNormalize = &ves_io_schema.Empty{}
			updateSpec.PathNormalizeChoice = pathNormalizeChoiceInt
		}

	}

	if v, ok := d.GetOk("proxy"); ok && !isIntfNil(v) {

		updateSpec.Proxy = ves_io_schema_virtual_host.ProxyType(ves_io_schema_virtual_host.ProxyType_value[v.(string)])

	}

	if v, ok := d.GetOk("rate_limiter_allowed_prefixes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		rateLimiterAllowedPrefixesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
		for i, ps := range sl {

			rlapMapToStrVal := ps.(map[string]interface{})
			rateLimiterAllowedPrefixesInt[i] = &ves_io_schema.ObjectRefType{}

			rateLimiterAllowedPrefixesInt[i].Kind = "ip_prefix_set"

			if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
				rateLimiterAllowedPrefixesInt[i].Name = v.(string)
			}

			if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
			}

			if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
			}

			if v, ok := rlapMapToStrVal["uid"]; ok && !isIntfNil(v) {
				rateLimiterAllowedPrefixesInt[i].Uid = v.(string)
			}

		}

	}

	if v, ok := d.GetOk("request_cookies_to_add"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		requestCookiesToAdd := make([]*ves_io_schema.CookieValueOption, len(sl))
		updateSpec.RequestCookiesToAdd = requestCookiesToAdd
		for i, set := range sl {
			if set != nil {
				requestCookiesToAdd[i] = &ves_io_schema.CookieValueOption{}
				requestCookiesToAddMapStrToI := set.(map[string]interface{})

				if w, ok := requestCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
					requestCookiesToAdd[i].Name = w.(string)
				}

				if w, ok := requestCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
					requestCookiesToAdd[i].Overwrite = w.(bool)
				}

				valueChoiceTypeFound := false

				if v, ok := requestCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.CookieValueOption_SecretValue{}
					valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
					requestCookiesToAdd[i].ValueChoice = valueChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							secretInfoOneofTypeFound := false

							if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := requestCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.CookieValueOption_Value{}

					requestCookiesToAdd[i].ValueChoice = valueChoiceInt

					valueChoiceInt.Value = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("request_cookies_to_remove"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field request_cookies_to_remove")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		updateSpec.RequestCookiesToRemove = ls

	}

	if v, ok := d.GetOk("request_headers_to_add"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
		updateSpec.RequestHeadersToAdd = requestHeadersToAdd
		for i, set := range sl {
			if set != nil {
				requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
				requestHeadersToAddMapStrToI := set.(map[string]interface{})

				if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
					requestHeadersToAdd[i].Append = w.(bool)
				}

				if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
					requestHeadersToAdd[i].Name = w.(string)
				}

				valueChoiceTypeFound := false

				if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
					valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
					requestHeadersToAdd[i].ValueChoice = valueChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							secretInfoOneofTypeFound := false

							if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

					requestHeadersToAdd[i].ValueChoice = valueChoiceInt

					valueChoiceInt.Value = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("request_headers_to_remove"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field request_headers_to_remove")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		updateSpec.RequestHeadersToRemove = ls

	}

	if v, ok := d.GetOk("response_cookies_to_add"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		responseCookiesToAdd := make([]*ves_io_schema.SetCookieValueOption, len(sl))
		updateSpec.ResponseCookiesToAdd = responseCookiesToAdd
		for i, set := range sl {
			if set != nil {
				responseCookiesToAdd[i] = &ves_io_schema.SetCookieValueOption{}
				responseCookiesToAddMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema.SetCookieValueOption_AddDomain{}

					responseCookiesToAdd[i].DomainChoice = domainChoiceInt

					domainChoiceInt.AddDomain = v.(string)

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreDomain{}
						domainChoiceInt.IgnoreDomain = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].DomainChoice = domainChoiceInt
					}

				}

				expiryChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

					expiryChoiceTypeFound = true
					expiryChoiceInt := &ves_io_schema.SetCookieValueOption_AddExpiry{}

					responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt

					expiryChoiceInt.AddExpiry = v.(string)

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_expiry"]; ok && !isIntfNil(v) && !expiryChoiceTypeFound {

					expiryChoiceTypeFound = true

					if v.(bool) {
						expiryChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreExpiry{}
						expiryChoiceInt.IgnoreExpiry = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].ExpiryChoice = expiryChoiceInt
					}

				}

				httponlyChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

					httponlyChoiceTypeFound = true

					if v.(bool) {
						httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_AddHttponly{}
						httponlyChoiceInt.AddHttponly = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyChoiceTypeFound {

					httponlyChoiceTypeFound = true

					if v.(bool) {
						httponlyChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreHttponly{}
						httponlyChoiceInt.IgnoreHttponly = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].HttponlyChoice = httponlyChoiceInt
					}

				}

				maxAgeChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["ignore_max_age"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

					maxAgeChoiceTypeFound = true

					if v.(bool) {
						maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreMaxAge{}
						maxAgeChoiceInt.IgnoreMaxAge = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["max_age_value"]; ok && !isIntfNil(v) && !maxAgeChoiceTypeFound {

					maxAgeChoiceTypeFound = true
					maxAgeChoiceInt := &ves_io_schema.SetCookieValueOption_MaxAgeValue{}

					responseCookiesToAdd[i].MaxAgeChoice = maxAgeChoiceInt

					maxAgeChoiceInt.MaxAgeValue = int32(v.(int))

				}

				if w, ok := responseCookiesToAddMapStrToI["name"]; ok && !isIntfNil(w) {
					responseCookiesToAdd[i].Name = w.(string)
				}

				if w, ok := responseCookiesToAddMapStrToI["overwrite"]; ok && !isIntfNil(w) {
					responseCookiesToAdd[i].Overwrite = w.(bool)
				}

				partitionedChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

					partitionedChoiceTypeFound = true

					if v.(bool) {
						partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_AddPartitioned{}
						partitionedChoiceInt.AddPartitioned = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_partitioned"]; ok && !isIntfNil(v) && !partitionedChoiceTypeFound {

					partitionedChoiceTypeFound = true

					if v.(bool) {
						partitionedChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePartitioned{}
						partitionedChoiceInt.IgnorePartitioned = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].PartitionedChoice = partitionedChoiceInt
					}

				}

				pathChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema.SetCookieValueOption_AddPath{}

					responseCookiesToAdd[i].PathChoice = pathChoiceInt

					pathChoiceInt.AddPath = v.(string)

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true

					if v.(bool) {
						pathChoiceInt := &ves_io_schema.SetCookieValueOption_IgnorePath{}
						pathChoiceInt.IgnorePath = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].PathChoice = pathChoiceInt
					}

				}

				samesiteChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

					samesiteChoiceTypeFound = true

					if v.(bool) {
						samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSamesite{}
						samesiteChoiceInt.IgnoreSamesite = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

					samesiteChoiceTypeFound = true

					if v.(bool) {
						samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteLax{}
						samesiteChoiceInt.SamesiteLax = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

					samesiteChoiceTypeFound = true

					if v.(bool) {
						samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteNone{}
						samesiteChoiceInt.SamesiteNone = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteChoiceTypeFound {

					samesiteChoiceTypeFound = true

					if v.(bool) {
						samesiteChoiceInt := &ves_io_schema.SetCookieValueOption_SamesiteStrict{}
						samesiteChoiceInt.SamesiteStrict = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SamesiteChoice = samesiteChoiceInt
					}

				}

				secureChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

					secureChoiceTypeFound = true

					if v.(bool) {
						secureChoiceInt := &ves_io_schema.SetCookieValueOption_AddSecure{}
						secureChoiceInt.AddSecure = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SecureChoice = secureChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureChoiceTypeFound {

					secureChoiceTypeFound = true

					if v.(bool) {
						secureChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreSecure{}
						secureChoiceInt.IgnoreSecure = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].SecureChoice = secureChoiceInt
					}

				}

				valueChoiceTypeFound := false

				if v, ok := responseCookiesToAddMapStrToI["ignore_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true

					if v.(bool) {
						valueChoiceInt := &ves_io_schema.SetCookieValueOption_IgnoreValue{}
						valueChoiceInt.IgnoreValue = &ves_io_schema.Empty{}
						responseCookiesToAdd[i].ValueChoice = valueChoiceInt
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.SetCookieValueOption_SecretValue{}
					valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
					responseCookiesToAdd[i].ValueChoice = valueChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							secretInfoOneofTypeFound := false

							if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := responseCookiesToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.SetCookieValueOption_Value{}

					responseCookiesToAdd[i].ValueChoice = valueChoiceInt

					valueChoiceInt.Value = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("response_cookies_to_remove"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field response_cookies_to_remove")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		updateSpec.ResponseCookiesToRemove = ls

	}

	if v, ok := d.GetOk("response_headers_to_add"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
		updateSpec.ResponseHeadersToAdd = responseHeadersToAdd
		for i, set := range sl {
			if set != nil {
				responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
				responseHeadersToAddMapStrToI := set.(map[string]interface{})

				if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
					responseHeadersToAdd[i].Append = w.(bool)
				}

				if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
					responseHeadersToAdd[i].Name = w.(string)
				}

				valueChoiceTypeFound := false

				if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
					valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
					responseHeadersToAdd[i].ValueChoice = valueChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							secretInfoOneofTypeFound := false

							if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
								secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

										}

										if v, ok := cs["location"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

										}

										if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

										}

									}
								}

							}

							if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

								secretInfoOneofTypeFound = true
								secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
								secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
								valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["provider"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

										}

										if v, ok := cs["url"]; ok && !isIntfNil(v) {

											secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

					valueChoiceTypeFound = true
					valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

					responseHeadersToAdd[i].ValueChoice = valueChoiceInt

					valueChoiceInt.Value = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("response_headers_to_remove"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field response_headers_to_remove")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		updateSpec.ResponseHeadersToRemove = ls

	}

	if v, ok := d.GetOk("retry_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		retryPolicy := &ves_io_schema.RetryPolicyType{}
		updateSpec.RetryPolicy = retryPolicy
		for _, set := range sl {
			if set != nil {
				retryPolicyMapStrToI := set.(map[string]interface{})

				if v, ok := retryPolicyMapStrToI["back_off"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					backOff := &ves_io_schema.RetryBackOff{}
					retryPolicy.BackOff = backOff
					for _, set := range sl {
						if set != nil {
							backOffMapStrToI := set.(map[string]interface{})

							if w, ok := backOffMapStrToI["base_interval"]; ok && !isIntfNil(w) {
								backOff.BaseInterval = uint32(w.(int))
							}

							if w, ok := backOffMapStrToI["max_interval"]; ok && !isIntfNil(w) {
								backOff.MaxInterval = uint32(w.(int))
							}

						}
					}

				}

				if w, ok := retryPolicyMapStrToI["num_retries"]; ok && !isIntfNil(w) {
					retryPolicy.NumRetries = uint32(w.(int))
				}

				if w, ok := retryPolicyMapStrToI["per_try_timeout"]; ok && !isIntfNil(w) {
					retryPolicy.PerTryTimeout = uint32(w.(int))
				}

				if w, ok := retryPolicyMapStrToI["retriable_status_codes"]; ok && !isIntfNil(w) {
					ls := make([]uint32, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						ls[i] = uint32(v.(int))
					}
					retryPolicy.RetriableStatusCodes = ls
				}

				if w, ok := retryPolicyMapStrToI["retry_condition"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field retry_condition")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					retryPolicy.RetryCondition = ls
				}

			}
		}

	}

	if v, ok := d.GetOk("routes"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		routesInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.Routes = routesInt
		for i, ps := range sl {

			rMapToStrVal := ps.(map[string]interface{})
			routesInt[i] = &ves_io_schema.ObjectRefType{}

			routesInt[i].Kind = "route"

			if v, ok := rMapToStrVal["name"]; ok && !isIntfNil(v) {
				routesInt[i].Name = v.(string)
			}

			if v, ok := rMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				routesInt[i].Namespace = v.(string)
			}

			if v, ok := rMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				routesInt[i].Tenant = v.(string)
			}

			if v, ok := rMapToStrVal["uid"]; ok && !isIntfNil(v) {
				routesInt[i].Uid = v.(string)
			}

		}

	}

	if v, ok := d.GetOk("sensitive_data_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		sensitiveDataPolicyInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.SensitiveDataPolicy = sensitiveDataPolicyInt
		for i, ps := range sl {

			sdpMapToStrVal := ps.(map[string]interface{})
			sensitiveDataPolicyInt[i] = &ves_io_schema.ObjectRefType{}

			sensitiveDataPolicyInt[i].Kind = "sensitive_data_policy"

			if v, ok := sdpMapToStrVal["name"]; ok && !isIntfNil(v) {
				sensitiveDataPolicyInt[i].Name = v.(string)
			}

			if v, ok := sdpMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				sensitiveDataPolicyInt[i].Namespace = v.(string)
			}

			if v, ok := sdpMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				sensitiveDataPolicyInt[i].Tenant = v.(string)
			}

			if v, ok := sdpMapToStrVal["uid"]; ok && !isIntfNil(v) {
				sensitiveDataPolicyInt[i].Uid = v.(string)
			}

		}

	}

	serverHeaderChoiceTypeFound := false

	if v, ok := d.GetOk("append_server_name"); ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

		serverHeaderChoiceTypeFound = true
		serverHeaderChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_AppendServerName{}

		updateSpec.ServerHeaderChoice = serverHeaderChoiceInt

		serverHeaderChoiceInt.AppendServerName = v.(string)

	}

	if v, ok := d.GetOk("default_header"); ok && !serverHeaderChoiceTypeFound {

		serverHeaderChoiceTypeFound = true

		if v.(bool) {
			serverHeaderChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_DefaultHeader{}
			serverHeaderChoiceInt.DefaultHeader = &ves_io_schema.Empty{}
			updateSpec.ServerHeaderChoice = serverHeaderChoiceInt
		}

	}

	if v, ok := d.GetOk("pass_through"); ok && !serverHeaderChoiceTypeFound {

		serverHeaderChoiceTypeFound = true

		if v.(bool) {
			serverHeaderChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_PassThrough{}
			serverHeaderChoiceInt.PassThrough = &ves_io_schema.Empty{}
			updateSpec.ServerHeaderChoice = serverHeaderChoiceInt
		}

	}

	if v, ok := d.GetOk("server_name"); ok && !isIntfNil(v) && !serverHeaderChoiceTypeFound {

		serverHeaderChoiceTypeFound = true
		serverHeaderChoiceInt := &ves_io_schema_virtual_host.ReplaceSpecType_ServerName{}

		updateSpec.ServerHeaderChoice = serverHeaderChoiceInt

		serverHeaderChoiceInt.ServerName = v.(string)

	}

	if v, ok := d.GetOk("slow_ddos_mitigation"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		slowDdosMitigation := &ves_io_schema_virtual_host.SlowDDoSMitigation{}
		updateSpec.SlowDdosMitigation = slowDdosMitigation
		for _, set := range sl {
			if set != nil {
				slowDdosMitigationMapStrToI := set.(map[string]interface{})

				if w, ok := slowDdosMitigationMapStrToI["request_headers_timeout"]; ok && !isIntfNil(w) {
					slowDdosMitigation.RequestHeadersTimeout = uint32(w.(int))
				}

				requestTimeoutChoiceTypeFound := false

				if v, ok := slowDdosMitigationMapStrToI["disable_request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true

					if v.(bool) {
						requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_DisableRequestTimeout{}
						requestTimeoutChoiceInt.DisableRequestTimeout = &ves_io_schema.Empty{}
						slowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt
					}

				}

				if v, ok := slowDdosMitigationMapStrToI["request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true
					requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_RequestTimeout{}

					slowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt

					requestTimeoutChoiceInt.RequestTimeout = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("user_identification"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		userIdentificationInt := make([]*ves_io_schema.ObjectRefType, len(sl))
		updateSpec.UserIdentification = userIdentificationInt
		for i, ps := range sl {

			uiMapToStrVal := ps.(map[string]interface{})
			userIdentificationInt[i] = &ves_io_schema.ObjectRefType{}

			userIdentificationInt[i].Kind = "user_identification"

			if v, ok := uiMapToStrVal["name"]; ok && !isIntfNil(v) {
				userIdentificationInt[i].Name = v.(string)
			}

			if v, ok := uiMapToStrVal["namespace"]; ok && !isIntfNil(v) {
				userIdentificationInt[i].Namespace = v.(string)
			}

			if v, ok := uiMapToStrVal["tenant"]; ok && !isIntfNil(v) {
				userIdentificationInt[i].Tenant = v.(string)
			}

			if v, ok := uiMapToStrVal["uid"]; ok && !isIntfNil(v) {
				userIdentificationInt[i].Uid = v.(string)
			}

		}

	}

	if v, ok := d.GetOk("waf_type"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafType := &ves_io_schema.WafType{}
		updateSpec.WafType = wafType
		for _, set := range sl {
			if set != nil {
				wafTypeMapStrToI := set.(map[string]interface{})

				refTypeTypeFound := false

				if v, ok := wafTypeMapStrToI["app_firewall"]; ok && !isIntfNil(v) && !refTypeTypeFound {

					refTypeTypeFound = true
					refTypeInt := &ves_io_schema.WafType_AppFirewall{}
					refTypeInt.AppFirewall = &ves_io_schema.AppFirewallRefType{}
					wafType.RefType = refTypeInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["app_firewall"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								appFirewallInt := make([]*ves_io_schema.ObjectRefType, len(sl))
								refTypeInt.AppFirewall.AppFirewall = appFirewallInt
								for i, ps := range sl {

									afMapToStrVal := ps.(map[string]interface{})
									appFirewallInt[i] = &ves_io_schema.ObjectRefType{}

									appFirewallInt[i].Kind = "app_firewall"

									if v, ok := afMapToStrVal["name"]; ok && !isIntfNil(v) {
										appFirewallInt[i].Name = v.(string)
									}

									if v, ok := afMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										appFirewallInt[i].Namespace = v.(string)
									}

									if v, ok := afMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										appFirewallInt[i].Tenant = v.(string)
									}

									if v, ok := afMapToStrVal["uid"]; ok && !isIntfNil(v) {
										appFirewallInt[i].Uid = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := wafTypeMapStrToI["disable_waf"]; ok && !isIntfNil(v) && !refTypeTypeFound {

					refTypeTypeFound = true

					if v.(bool) {
						refTypeInt := &ves_io_schema.WafType_DisableWaf{}
						refTypeInt.DisableWaf = &ves_io_schema.Empty{}
						wafType.RefType = refTypeInt
					}

				}

				if v, ok := wafTypeMapStrToI["inherit_waf"]; ok && !isIntfNil(v) && !refTypeTypeFound {

					refTypeTypeFound = true

					if v.(bool) {
						refTypeInt := &ves_io_schema.WafType_InheritWaf{}
						refTypeInt.InheritWaf = &ves_io_schema.Empty{}
						wafType.RefType = refTypeInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra VirtualHost obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_virtual_host.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating VirtualHost: %s", err)
	}

	return resourceVolterraVirtualHostRead(d, meta)
}

func resourceVolterraVirtualHostDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_virtual_host.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] VirtualHost %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra VirtualHost before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra VirtualHost obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_virtual_host.ObjectType, namespace, name, opts...)
}

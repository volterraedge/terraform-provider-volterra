//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_cdn_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/cdn_loadbalancer"
	ves_io_schema_views_common_cache_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_cache_rule"
	ves_io_schema_views_common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	ves_io_schema_views_common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
	ves_io_schema_views_http_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer"
	ves_io_schema_views_origin_pool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool"
	ves_io_schema_views_rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
)

// resourceVolterraCdnLoadbalancer is implementation of Volterra's CdnLoadbalancer resources
func resourceVolterraCdnLoadbalancer() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraCdnLoadbalancerCreate,
		Read:   resourceVolterraCdnLoadbalancerRead,
		Update: resourceVolterraCdnLoadbalancerUpdate,
		Delete: resourceVolterraCdnLoadbalancerDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"blocked_clients": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"actions": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"as_number": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"http_header": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"headers": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ipv6_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"user_identifier": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"captcha_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"enable_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"captcha_challenge_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"default_captcha_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_js_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"js_challenge_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"js_script_delay": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"default_mitigation_settings": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"malicious_user_mitigation": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"js_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"js_script_delay": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"no_challenge": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"policy_based_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"captcha_challenge_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"default_captcha_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"always_enable_captcha_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"always_enable_js_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_challenge": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"default_js_challenge_parameters": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"js_challenge_parameters": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cookie_expiry": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"custom_page": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"js_script_delay": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"default_mitigation_settings": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"malicious_user_mitigation": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"rule_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rules": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"metadata": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"spec": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"arg_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"any_asn": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"asn_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"as_numbers": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeInt,
																			},
																		},
																	},
																},
															},

															"asn_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"asn_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"body_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disable_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enable_captcha_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"enable_javascript_challenge": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"any_client": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"client_selector": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"expressions": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"cookie_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"domain_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"expiration_timestamp": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"headers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"http_method": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"methods": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"any_ip": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_prefix_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_match": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"ip_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"ipv6_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"path": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"suffix_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"query_params": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"key": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},

															"tls_fingerprint_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"classes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"excluded_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"cors_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"allow_credentials": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"allow_headers": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"allow_methods": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"allow_origin": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"allow_origin_regex": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"disabled": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"expose_headers": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"maximum_age": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"csrf_policy": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"all_load_balancer_domains": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"custom_domain_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"domains": {

										Type: schema.TypeList,

										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"custom_cache_rule": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cdn_cache_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"data_guard_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"apply_data_guard": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"skip_data_guard": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"path": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"path": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"prefix": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"regex": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"ddos_mitigation_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"block": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ddos_client_source": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"asn_list": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"as_numbers": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeInt,
													},
												},
											},
										},
									},

									"country_list": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"ja4_tls_fingerprint_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"exact_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"tls_fingerprint_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"classes": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"exact_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},

												"excluded_values": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"invert_match": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"ip_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},

			"default_cache_action": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cache_disabled": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"cache_ttl_default": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"cache_ttl_override": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"domains": {

				Type: schema.TypeList,

				Required: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"graphql_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"exact_path": {
							Type:     schema.TypeString,
							Required: true,
						},

						"graphql_settings": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_introspection": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"enable_introspection": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"max_batched_queries": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"max_depth": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"max_total_length": {
										Type:     schema.TypeInt,
										Required: true,
									},
								},
							},
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"method_get": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"method_post": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"disable_ip_reputation": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_ip_reputation": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"ip_threat_categories": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"jwt_validation": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"action": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"block": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"report": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"jwks_config": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cleartext": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"mandatory_claims": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"claim_names": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"reserved_claims": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"audience": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"audiences": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"audience_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"issuer": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"issuer_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"validate_period_disable": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"validate_period_enable": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"target": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"all_endpoint": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"api_groups": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"api_groups": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"base_paths": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"base_paths": {

													Type: schema.TypeList,

													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"token_location": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"bearer_token": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"l7_ddos_action_block": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"l7_ddos_action_default": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"l7_ddos_action_js_challenge": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cookie_expiry": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"custom_page": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"js_script_delay": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"http": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"dns_volterra_managed": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"port": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"port_ranges": {

							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"https": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_hsts": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"tls_cert_options": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"tls_cert_params": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificates": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"kind": {
																Type:     schema.TypeString,
																Computed: true,
															},

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"no_mtls": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"use_mtls": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"client_certificate_optional": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"crl": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"no_crl": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"trusted_ca": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"trusted_ca_url": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"xfcc_disabled": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"xfcc_options": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"xfcc_header_elements": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"tls_config": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"custom_security": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cipher_suites": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"max_version": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"min_version": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"default_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"low_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"medium_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"tls_inline_params": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"no_mtls": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"use_mtls": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"client_certificate_optional": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"crl": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"no_crl": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"trusted_ca": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"trusted_ca_url": {

																Type:     schema.TypeString,
																Optional: true,
															},

															"xfcc_disabled": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"xfcc_options": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"xfcc_header_elements": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"tls_certificates": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"certificate_url": {
																Type:     schema.TypeString,
																Required: true,
															},

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"custom_hash_algorithms": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"hash_algorithms": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disable_ocsp_stapling": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"use_system_defaults": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"private_key": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"tls_config": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"custom_security": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"cipher_suites": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"max_version": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"min_version": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"default_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"low_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"medium_security": {

																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"https_auto_cert": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_hsts": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"tls_config": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"tls_11_plus": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"tls_12_plus": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"disable_malicious_user_detection": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"enable_malicious_user_detection": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"origin_pool": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"more_origin_options": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"disable_byte_range_request": {
										Type:     schema.TypeBool,
										Optional: true,
									},

									"websocket_proxy": {
										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},

						"origin_request_timeout": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"origin_servers": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"public_ip": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"ipv6": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"public_name": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"dns_name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"refresh_interval": {
													Type:     schema.TypeInt,
													Optional: true,
												},
											},
										},
									},

									"port": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"public_name": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"dns_name": {
										Type:     schema.TypeString,
										Required: true,
									},

									"refresh_interval": {
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},

						"no_tls": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"use_tls": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"default_session_key_caching": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable_session_key_caching": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"max_session_keys": {

										Type:     schema.TypeInt,
										Optional: true,
									},

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"tls_certificates": {

													Type:     schema.TypeList,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"certificate_url": {
																Type:     schema.TypeString,
																Required: true,
															},

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"custom_hash_algorithms": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"hash_algorithms": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disable_ocsp_stapling": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"use_system_defaults": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"private_key": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Required: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"use_mtls_obj": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"skip_server_verification": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_server_verification": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"trusted_ca": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"trusted_ca_url": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"volterra_trusted_ca": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable_sni": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"sni": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"use_host_header_as_sni": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"tls_config": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"other_settings": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_location": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"header_options": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"request_headers_to_add": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"append": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"secret_value": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"value": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_headers_to_remove": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"response_headers_to_add": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"append": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"secret_value": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},
														},
													},
												},

												"value": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"response_headers_to_remove": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"logging_options": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"client_log_options": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_list": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"origin_log_options": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_list": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"protected_cookies": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"disable_tampering_protection": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"enable_tampering_protection": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_httponly": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"name": {
							Type:     schema.TypeString,
							Required: true,
						},

						"ignore_samesite": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_lax": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_none": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"samesite_strict": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"add_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"ignore_secure": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},

			"api_rate_limit": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"api_endpoint_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_endpoint_method": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_matcher": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"methods": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"api_endpoint_path": {
										Type:     schema.TypeString,
										Required: true,
									},

									"client_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_selector": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"specific_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"inline_rate_limiter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref_user_id": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"use_http_lb_user_id": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"threshold": {
													Type:     schema.TypeInt,
													Required: true,
												},

												"unit": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"ref_rate_limiter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"jwt_claims": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"bypass_rate_limiting_rules": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"bypass_rate_limiting_rules": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"client_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"any_client": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"client_selector": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"expressions": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"ip_threat_category_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"ip_threat_categories": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"any_ip": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"asn_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"as_numbers": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeInt,
																			},
																		},
																	},
																},
															},

															"asn_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"asn_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"prefix_sets": {

																			Type:     schema.TypeList,
																			Required: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"kind": {
																						Type:     schema.TypeString,
																						Computed: true,
																					},

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"namespace": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																					"tenant": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"ip_prefix_list": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_match": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"ip_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"ipv6_prefixes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"tls_fingerprint_matcher": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"classes": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"excluded_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},

												"any_url": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"api_endpoint": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Required: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"methods": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"path": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"api_groups": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"api_groups": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"base_path": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"any_domain": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"specific_domain": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"request_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cookie_matchers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"headers": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"jwt_claims": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																		},
																	},
																},
															},

															"query_params": {

																Type:     schema.TypeList,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"invert_matcher": {
																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"key": {
																			Type:     schema.TypeString,
																			Required: true,
																		},

																		"check_not_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"check_present": {

																			Type:     schema.TypeBool,
																			Optional: true,
																		},

																		"item": {

																			Type:     schema.TypeList,
																			MaxItems: 1,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"exact_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"regex_values": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},

																					"transformers": {

																						Type: schema.TypeList,

																						Optional: true,
																						Elem: &schema.Schema{
																							Type: schema.TypeString,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},

						"custom_ip_allowed_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rate_limiter_allowed_prefixes": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_allowed_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_ip_allowed_list": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"server_url_rules": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"api_group": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"base_path": {
										Type:     schema.TypeString,
										Required: true,
									},

									"client_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"any_client": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"client_selector": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"expressions": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"ip_threat_category_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"ip_threat_categories": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"any_ip": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"asn_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"as_numbers": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeInt,
																},
															},
														},
													},
												},

												"asn_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"asn_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"prefix_sets": {

																Type:     schema.TypeList,
																Required: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"kind": {
																			Type:     schema.TypeString,
																			Computed: true,
																		},

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"namespace": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																		"tenant": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"ip_prefix_list": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"tls_fingerprint_matcher": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"classes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"exact_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"excluded_values": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},

									"any_domain": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"specific_domain": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"inline_rate_limiter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ref_user_id": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"name": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"namespace": {
																Type:     schema.TypeString,
																Optional: true,
															},
															"tenant": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"use_http_lb_user_id": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"threshold": {
													Type:     schema.TypeInt,
													Required: true,
												},

												"unit": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"ref_rate_limiter": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_matcher": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"cookie_matchers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"headers": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"jwt_claims": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"name": {
																Type:     schema.TypeString,
																Required: true,
															},
														},
													},
												},

												"query_params": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_matcher": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"key": {
																Type:     schema.TypeString,
																Required: true,
															},

															"check_not_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"check_present": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"item": {

																Type:     schema.TypeList,
																MaxItems: 1,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"exact_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"regex_values": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},

																		"transformers": {

																			Type: schema.TypeList,

																			Optional: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"disable_rate_limit": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"rate_limit": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"custom_ip_allowed_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"rate_limiter_allowed_prefixes": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_allowed_list": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"ipv6_prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"prefixes": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"no_ip_allowed_list": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"no_policies": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"policies": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"policies": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"namespace": {
													Type:     schema.TypeString,
													Optional: true,
												},
												"tenant": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"rate_limiter": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"action_block": {

										Type:     schema.TypeList,
										MaxItems: 1,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"hours": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"duration": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},

												"minutes": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"duration": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},

												"seconds": {

													Type:     schema.TypeList,
													MaxItems: 1,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"duration": {
																Type:     schema.TypeInt,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"disabled": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"burst_multiplier": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"period_multiplier": {
										Type:     schema.TypeInt,
										Optional: true,
									},

									"total_number": {
										Type:     schema.TypeInt,
										Required: true,
									},

									"unit": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"active_service_policies": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"policies": {

							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"no_service_policies": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"service_policies_from_namespace": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"slow_ddos_mitigation": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"request_headers_timeout": {
							Type:     schema.TypeInt,
							Optional: true,
						},

						"disable_request_timeout": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"request_timeout": {

							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"system_default_timeouts": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"trusted_clients": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"actions": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"as_number": {

							Type:     schema.TypeInt,
							Optional: true,
						},

						"http_header": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"headers": {

										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"invert_match": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Required: true,
												},

												"exact": {

													Type:     schema.TypeString,
													Optional: true,
												},

												"presence": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"regex": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"ip_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"ipv6_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"user_identifier": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
					},
				},
			},

			"user_id_client_ip": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"user_identification": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"app_firewall": {

				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"name": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"tenant": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"disable_waf": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"waf_exclusion_rules": {

				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"any_domain": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"exact_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"suffix_value": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"expiration_timestamp": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"metadata": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},

									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},

						"methods": {

							Type: schema.TypeList,

							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},

						"any_path": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"path_prefix": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"path_regex": {

							Type:     schema.TypeString,
							Optional: true,
						},

						"app_firewall_detection_control": {

							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"exclude_attack_type_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"exclude_attack_type": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"exclude_bot_name_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"bot_name": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},

									"exclude_signature_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"signature_id": {
													Type:     schema.TypeInt,
													Required: true,
												},
											},
										},
									},

									"exclude_violation_contexts": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"context": {
													Type:     schema.TypeString,
													Required: true,
												},

												"context_name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"exclude_violation": {
													Type:     schema.TypeString,
													Required: true,
												},
											},
										},
									},
								},
							},
						},

						"waf_skip_processing": {

							Type:     schema.TypeBool,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraCdnLoadbalancerCreate creates CdnLoadbalancer resource
func resourceVolterraCdnLoadbalancerCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType{}
	createReq := &ves_io_schema_views_cdn_loadbalancer.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//blocked_clients
	if v, ok := d.GetOk("blocked_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		blockedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		createSpec.BlockedClients = blockedClients
		for i, set := range sl {
			if set != nil {
				blockedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
				blockedClientsMapStrToI := set.(map[string]interface{})

				if v, ok := blockedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

					actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field actions")
						}
						actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
					}
					blockedClients[i].Actions = actionsList

				}

				clientSourceChoiceTypeFound := false

				if v, ok := blockedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.AsNumber = uint32(v.(int))

				}

				if v, ok := blockedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
					clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								clientSourceChoiceInt.HttpHeader.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := blockedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.IpPrefix = v.(string)

				}

				if v, ok := blockedClientsMapStrToI["ipv6_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_Ipv6Prefix{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.Ipv6Prefix = v.(string)

				}

				if v, ok := blockedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.UserIdentifier = v.(string)

				}

				if w, ok := blockedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					blockedClients[i].ExpirationTimestamp = ts
				}

				if v, ok := blockedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					blockedClients[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

			}
		}

	}

	//challenge_type

	challengeTypeTypeFound := false

	if v, ok := d.GetOk("captcha_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_CaptchaChallenge{}
		challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("enable_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_EnableChallenge{}
		challengeTypeInt.EnableChallenge = &ves_io_schema_views_common_waf.EnableChallenge{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				captchaChallengeParametersChoiceTypeFound := false

				if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
					challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

							}

						}
					}

				}

				if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
						captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
					}

				}

				jsChallengeParametersChoiceTypeFound := false

				if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
						jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
					}

				}

				if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
					jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

				maliciousUserMitigationChoiceTypeFound := false

				if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true

					if v.(bool) {
						maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
						maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
					}

				}

				if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
					maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
					challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("js_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_JsChallenge{}
		challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CustomPage = v.(string)

				}

				if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("no_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true

		if v.(bool) {
			challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_NoChallenge{}
			challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
			createSpec.ChallengeType = challengeTypeInt
		}

	}

	if v, ok := d.GetOk("policy_based_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_PolicyBasedChallenge{}
		challengeTypeInt.PolicyBasedChallenge = &ves_io_schema_views_common_waf.PolicyBasedChallenge{}
		createSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				captchaChallengeParametersChoiceTypeFound := false

				if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
					challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

							}

						}
					}

				}

				if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{}
						captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
					}

				}

				challengeChoiceTypeFound := false

				if v, ok := cs["always_enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
						challengeChoiceInt.AlwaysEnableCaptchaChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				if v, ok := cs["always_enable_js_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{}
						challengeChoiceInt.AlwaysEnableJsChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				if v, ok := cs["no_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_NoChallenge{}
						challengeChoiceInt.NoChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				jsChallengeParametersChoiceTypeFound := false

				if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{}
						jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
					}

				}

				if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_JsChallengeParameters{}
					jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

				maliciousUserMitigationChoiceTypeFound := false

				if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true

					if v.(bool) {
						maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultMitigationSettings{}
						maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
					}

				}

				if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_MaliciousUserMitigation{}
					maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
					challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

							}

						}
					}

				}

				if v, ok := cs["rule_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					ruleList := &ves_io_schema_views_common_waf.ChallengeRuleList{}
					challengeTypeInt.PolicyBasedChallenge.RuleList = ruleList
					for _, set := range sl {
						if set != nil {
							ruleListMapStrToI := set.(map[string]interface{})

							if v, ok := ruleListMapStrToI["rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rules := make([]*ves_io_schema_views_common_waf.ChallengeRule, len(sl))
								ruleList.Rules = rules
								for i, set := range sl {
									if set != nil {
										rules[i] = &ves_io_schema_views_common_waf.ChallengeRule{}
										rulesMapStrToI := set.(map[string]interface{})

										if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											rules[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											spec := &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
											rules[i].Spec = spec
											for _, set := range sl {
												if set != nil {
													specMapStrToI := set.(map[string]interface{})

													if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
														spec.ArgMatchers = argMatchers
														for i, set := range sl {
															if set != nil {
																argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
																argMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	argMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		argMatchers[i].Match = matchInt
																	}

																}

																if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		argMatchers[i].Match = matchInt
																	}

																}

																if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	argMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	argMatchers[i].Name = w.(string)
																}

															}
														}

													}

													asnChoiceTypeFound := false

													if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true

														if v.(bool) {
															asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyAsn{}
															asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
															spec.AsnChoice = asnChoiceInt
														}

													}

													if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true
														asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnList{}
														asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														spec.AsnChoice = asnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																	ls := make([]uint32, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		ls[i] = uint32(v.(int))
																	}
																	asnChoiceInt.AsnList.AsNumbers = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true
														asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnMatcher{}
														asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														spec.AsnChoice = asnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																	for i, ps := range sl {

																		asMapToStrVal := ps.(map[string]interface{})
																		asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		asnSetsInt[i].Kind = "bgp_asn_set"

																		if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Name = v.(string)
																		}

																		if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														bodyMatcher := &ves_io_schema_policy.MatcherType{}
														spec.BodyMatcher = bodyMatcher
														for _, set := range sl {
															if set != nil {
																bodyMatcherMapStrToI := set.(map[string]interface{})

																if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	bodyMatcher.ExactValues = ls
																}

																if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	bodyMatcher.RegexValues = ls
																}

																if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	bodyMatcher.Transformers = transformersList

																}

															}
														}

													}

													challengeActionTypeFound := false

													if v, ok := specMapStrToI["disable_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_DisableChallenge{}
															challengeActionInt.DisableChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													if v, ok := specMapStrToI["enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableCaptchaChallenge{}
															challengeActionInt.EnableCaptchaChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													if v, ok := specMapStrToI["enable_javascript_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableJavascriptChallenge{}
															challengeActionInt.EnableJavascriptChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													clientChoiceTypeFound := false

													if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															spec.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														spec.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field expressions")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	clientChoiceInt.ClientSelector.Expressions = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														spec.CookieMatchers = cookieMatchers
														for i, set := range sl {
															if set != nil {
																cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																cookieMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	cookieMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
														spec.DomainMatcher = domainMatcher
														for _, set := range sl {
															if set != nil {
																domainMatcherMapStrToI := set.(map[string]interface{})

																if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	domainMatcher.ExactValues = ls
																}

																if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	domainMatcher.RegexValues = ls
																}

															}
														}

													}

													if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
														ts, err := parseTime(w.(string))
														if err != nil {
															return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
														}
														spec.ExpirationTimestamp = ts
													}

													if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														spec.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																headersMapStrToI := set.(map[string]interface{})

																if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	headers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
														spec.HttpMethod = httpMethod
														for _, set := range sl {
															if set != nil {
																httpMethodMapStrToI := set.(map[string]interface{})

																if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	httpMethod.InvertMatcher = w.(bool)
																}

																if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

																	methodsList := []ves_io_schema.HttpMethod{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field methods")
																		}
																		methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																	}
																	httpMethod.Methods = methodsList

																}

															}
														}

													}

													ipChoiceTypeFound := false

													if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true

														if v.(bool) {
															ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyIp{}
															ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
															spec.IpChoice = ipChoiceInt
														}

													}

													if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true
														ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpMatcher{}
														ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														spec.IpChoice = ipChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																	ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																}

																if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																	for i, ps := range sl {

																		psMapToStrVal := ps.(map[string]interface{})
																		prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		prefixSetsInt[i].Kind = "ip_prefix_set"

																		if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Name = v.(string)
																		}

																		if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true
														ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpPrefixList{}
														ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														spec.IpChoice = ipChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																	ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																}

																if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipChoiceInt.IpPrefixList.IpPrefixes = ls

																}

																if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema_policy.PathMatcherType{}
														spec.Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.ExactValues = ls
																}

																if w, ok := pathMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	path.InvertMatcher = w.(bool)
																}

																if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field prefix_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.PrefixValues = ls
																}

																if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.RegexValues = ls
																}

																if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field suffix_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.SuffixValues = ls
																}

																if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	path.Transformers = transformersList

																}

															}
														}

													}

													if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														spec.QueryParams = queryParams
														for i, set := range sl {
															if set != nil {
																queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																queryParamsMapStrToI := set.(map[string]interface{})

																if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	queryParams[i].InvertMatcher = w.(bool)
																}

																if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																	queryParams[i].Key = w.(string)
																}

																matchTypeFound := false

																if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	queryParams[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

															}
														}

													}

													tlsFingerprintChoiceTypeFound := false

													if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

														tlsFingerprintChoiceTypeFound = true
														tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_TlsFingerprintMatcher{}
														tlsFingerprintChoiceInt.TlsFingerprintMatcher = &ves_io_schema_policy.TlsFingerprintMatcherType{}
														spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["classes"]; ok && !isIntfNil(v) {

																	classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field classes")
																		}
																		classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.Classes = classesList

																}

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExactValues = ls

																}

																if v, ok := cs["excluded_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExcludedValues = ls

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//cors_policy
	if v, ok := d.GetOk("cors_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		corsPolicy := &ves_io_schema.CorsPolicy{}
		createSpec.CorsPolicy = corsPolicy
		for _, set := range sl {
			if set != nil {
				corsPolicyMapStrToI := set.(map[string]interface{})

				if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
					corsPolicy.AllowCredentials = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
					corsPolicy.AllowHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
					corsPolicy.AllowMethods = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOrigin = ls
				}

				if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin_regex")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOriginRegex = ls
				}

				if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
					corsPolicy.Disabled = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
					corsPolicy.ExposeHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
					corsPolicy.MaximumAge = int32(w.(int))
				}

			}
		}

	}

	//csrf_policy
	if v, ok := d.GetOk("csrf_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		csrfPolicy := &ves_io_schema.CsrfPolicy{}
		createSpec.CsrfPolicy = csrfPolicy
		for _, set := range sl {
			if set != nil {
				csrfPolicyMapStrToI := set.(map[string]interface{})

				allowedDomainsTypeFound := false

				if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
						allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

				if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
					allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
					csrfPolicy.AllowedDomains = allowedDomainsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["domains"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field domains")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								allowedDomainsInt.CustomDomainList.Domains = ls

							}

						}
					}

				}

				if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
						allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

			}
		}

	}

	//custom_cache_rule
	if v, ok := d.GetOk("custom_cache_rule"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		customCacheRule := &ves_io_schema_views_common_cache_rule.CustomCacheRule{}
		createSpec.CustomCacheRule = customCacheRule
		for _, set := range sl {
			if set != nil {
				customCacheRuleMapStrToI := set.(map[string]interface{})

				if v, ok := customCacheRuleMapStrToI["cdn_cache_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					cdnCacheRulesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					customCacheRule.CdnCacheRules = cdnCacheRulesInt
					for i, ps := range sl {

						ccrMapToStrVal := ps.(map[string]interface{})
						cdnCacheRulesInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := ccrMapToStrVal["name"]; ok && !isIntfNil(v) {
							cdnCacheRulesInt[i].Name = v.(string)
						}

						if v, ok := ccrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							cdnCacheRulesInt[i].Namespace = v.(string)
						}

						if v, ok := ccrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							cdnCacheRulesInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	//data_guard_rules
	if v, ok := d.GetOk("data_guard_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		dataGuardRules := make([]*ves_io_schema_policy.SimpleDataGuardRule, len(sl))
		createSpec.DataGuardRules = dataGuardRules
		for i, set := range sl {
			if set != nil {
				dataGuardRules[i] = &ves_io_schema_policy.SimpleDataGuardRule{}
				dataGuardRulesMapStrToI := set.(map[string]interface{})

				actionChoiceTypeFound := false

				if v, ok := dataGuardRulesMapStrToI["apply_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

					actionChoiceTypeFound = true

					if v.(bool) {
						actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ApplyDataGuard{}
						actionChoiceInt.ApplyDataGuard = &ves_io_schema.Empty{}
						dataGuardRules[i].ActionChoice = actionChoiceInt
					}

				}

				if v, ok := dataGuardRulesMapStrToI["skip_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

					actionChoiceTypeFound = true

					if v.(bool) {
						actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SkipDataGuard{}
						actionChoiceInt.SkipDataGuard = &ves_io_schema.Empty{}
						dataGuardRules[i].ActionChoice = actionChoiceInt
					}

				}

				domainChoiceTypeFound := false

				if v, ok := dataGuardRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						dataGuardRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := dataGuardRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ExactValue{}

					dataGuardRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := dataGuardRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SuffixValue{}

					dataGuardRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if v, ok := dataGuardRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					dataGuardRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := dataGuardRulesMapStrToI["path"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					path := &ves_io_schema.PathMatcherType{}
					dataGuardRules[i].Path = path
					for _, set := range sl {
						if set != nil {
							pathMapStrToI := set.(map[string]interface{})

							pathMatchTypeFound := false

							if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Path = v.(string)

							}

							if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Prefix = v.(string)

							}

							if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Regex = v.(string)

							}

						}
					}

				}

			}
		}

	}

	//ddos_mitigation_rules
	if v, ok := d.GetOk("ddos_mitigation_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ddosMitigationRules := make([]*ves_io_schema_views_common_security.DDoSMitigationRule, len(sl))
		createSpec.DdosMitigationRules = ddosMitigationRules
		for i, set := range sl {
			if set != nil {
				ddosMitigationRules[i] = &ves_io_schema_views_common_security.DDoSMitigationRule{}
				ddosMitigationRulesMapStrToI := set.(map[string]interface{})

				if w, ok := ddosMitigationRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					ddosMitigationRules[i].ExpirationTimestamp = ts
				}

				if v, ok := ddosMitigationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					ddosMitigationRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				mitigationActionTypeFound := false

				if v, ok := ddosMitigationRulesMapStrToI["block"]; ok && !isIntfNil(v) && !mitigationActionTypeFound {

					mitigationActionTypeFound = true

					if v.(bool) {
						mitigationActionInt := &ves_io_schema_views_common_security.DDoSMitigationRule_Block{}
						mitigationActionInt.Block = &ves_io_schema.Empty{}
						ddosMitigationRules[i].MitigationAction = mitigationActionInt
					}

				}

				mitigationChoiceTypeFound := false

				if v, ok := ddosMitigationRulesMapStrToI["ddos_client_source"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

					mitigationChoiceTypeFound = true
					mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_DdosClientSource{}
					mitigationChoiceInt.DdosClientSource = &ves_io_schema_views_common_security.DDoSClientSource{}
					ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								asnList := &ves_io_schema_policy.AsnMatchList{}
								mitigationChoiceInt.DdosClientSource.AsnList = asnList
								for _, set := range sl {
									if set != nil {
										asnListMapStrToI := set.(map[string]interface{})

										if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
											ls := make([]uint32, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												ls[i] = uint32(v.(int))
											}
											asnList.AsNumbers = ls
										}

									}
								}

							}

							if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

								country_listList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field country_list")
									}
									country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								mitigationChoiceInt.DdosClientSource.CountryList = country_listList

							}

							if v, ok := cs["ja4_tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ja4TlsFingerprintMatcher := &ves_io_schema_policy.JA4TlsFingerprintMatcherType{}
								mitigationChoiceInt.DdosClientSource.Ja4TlsFingerprintMatcher = ja4TlsFingerprintMatcher
								for _, set := range sl {
									if set != nil {
										ja4TlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

										if w, ok := ja4TlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field exact_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											ja4TlsFingerprintMatcher.ExactValues = ls
										}

									}
								}

							}

							if v, ok := cs["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								mitigationChoiceInt.DdosClientSource.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									if set != nil {
										tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

											classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field classes")
												}
												classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
											}
											tlsFingerprintMatcher.Classes = classesList

										}

										if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field exact_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											tlsFingerprintMatcher.ExactValues = ls
										}

										if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											tlsFingerprintMatcher.ExcludedValues = ls
										}

									}
								}

							}

						}
					}

				}

				if v, ok := ddosMitigationRulesMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

					mitigationChoiceTypeFound = true
					mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_IpPrefixList{}
					mitigationChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
					ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								mitigationChoiceInt.IpPrefixList.InvertMatch = v.(bool)

							}

							if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mitigationChoiceInt.IpPrefixList.IpPrefixes = ls

							}

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mitigationChoiceInt.IpPrefixList.Ipv6Prefixes = ls

							}

						}
					}

				}

			}
		}

	}

	//default_cache_action
	if v, ok := d.GetOk("default_cache_action"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		defaultCacheAction := &ves_io_schema_views_common_cache_rule.DefaultCacheAction{}
		createSpec.DefaultCacheAction = defaultCacheAction
		for _, set := range sl {
			if set != nil {
				defaultCacheActionMapStrToI := set.(map[string]interface{})

				cacheActionsTypeFound := false

				if v, ok := defaultCacheActionMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true

					if v.(bool) {
						cacheActionsInt := &ves_io_schema_views_common_cache_rule.DefaultCacheAction_CacheDisabled{}
						cacheActionsInt.CacheDisabled = &ves_io_schema.Empty{}
						defaultCacheAction.CacheActions = cacheActionsInt
					}

				}

				if v, ok := defaultCacheActionMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true
					cacheActionsInt := &ves_io_schema_views_common_cache_rule.DefaultCacheAction_CacheTtlDefault{}

					defaultCacheAction.CacheActions = cacheActionsInt

					cacheActionsInt.CacheTtlDefault = v.(string)

				}

				if v, ok := defaultCacheActionMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true
					cacheActionsInt := &ves_io_schema_views_common_cache_rule.DefaultCacheAction_CacheTtlOverride{}

					defaultCacheAction.CacheActions = cacheActionsInt

					cacheActionsInt.CacheTtlOverride = v.(string)

				}

			}
		}

	}

	//domains
	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field domains")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		createSpec.Domains = ls

	}

	//graphql_rules
	if v, ok := d.GetOk("graphql_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		graphqlRules := make([]*ves_io_schema_policy.GraphQLRule, len(sl))
		createSpec.GraphqlRules = graphqlRules
		for i, set := range sl {
			if set != nil {
				graphqlRules[i] = &ves_io_schema_policy.GraphQLRule{}
				graphqlRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := graphqlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.GraphQLRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						graphqlRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := graphqlRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_ExactValue{}

					graphqlRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := graphqlRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_SuffixValue{}

					graphqlRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := graphqlRulesMapStrToI["exact_path"]; ok && !isIntfNil(w) {
					graphqlRules[i].ExactPath = w.(string)
				}

				if v, ok := graphqlRulesMapStrToI["graphql_settings"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					graphqlSettings := &ves_io_schema_policy.GraphQLSettingsType{}
					graphqlRules[i].GraphqlSettings = graphqlSettings
					for _, set := range sl {
						if set != nil {
							graphqlSettingsMapStrToI := set.(map[string]interface{})

							allowIntrospectionQueriesChoiceTypeFound := false

							if v, ok := graphqlSettingsMapStrToI["disable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

								allowIntrospectionQueriesChoiceTypeFound = true

								if v.(bool) {
									allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_DisableIntrospection{}
									allowIntrospectionQueriesChoiceInt.DisableIntrospection = &ves_io_schema.Empty{}
									graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
								}

							}

							if v, ok := graphqlSettingsMapStrToI["enable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

								allowIntrospectionQueriesChoiceTypeFound = true

								if v.(bool) {
									allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_EnableIntrospection{}
									allowIntrospectionQueriesChoiceInt.EnableIntrospection = &ves_io_schema.Empty{}
									graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
								}

							}

							if w, ok := graphqlSettingsMapStrToI["max_batched_queries"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxBatchedQueries = uint32(w.(int))
							}

							if w, ok := graphqlSettingsMapStrToI["max_depth"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxDepth = uint32(w.(int))
							}

							if w, ok := graphqlSettingsMapStrToI["max_total_length"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxTotalLength = uint32(w.(int))
							}

						}
					}

				}

				if v, ok := graphqlRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					graphqlRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				methodChoiceTypeFound := false

				if v, ok := graphqlRulesMapStrToI["method_get"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

					methodChoiceTypeFound = true

					if v.(bool) {
						methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodGet{}
						methodChoiceInt.MethodGet = &ves_io_schema.Empty{}
						graphqlRules[i].MethodChoice = methodChoiceInt
					}

				}

				if v, ok := graphqlRulesMapStrToI["method_post"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

					methodChoiceTypeFound = true

					if v.(bool) {
						methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodPost{}
						methodChoiceInt.MethodPost = &ves_io_schema.Empty{}
						graphqlRules[i].MethodChoice = methodChoiceInt
					}

				}

			}
		}

	}

	//ip_reputation_choice

	ipReputationChoiceTypeFound := false

	if v, ok := d.GetOk("disable_ip_reputation"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true

		if v.(bool) {
			ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableIpReputation{}
			ipReputationChoiceInt.DisableIpReputation = &ves_io_schema.Empty{}
			createSpec.IpReputationChoice = ipReputationChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_ip_reputation"); ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true
		ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_EnableIpReputation{}
		ipReputationChoiceInt.EnableIpReputation = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
		createSpec.IpReputationChoice = ipReputationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

					ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
						}
						ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
					}
					ipReputationChoiceInt.EnableIpReputation.IpThreatCategories = ip_threat_categoriesList

				}

			}
		}

	}

	//jwt_validation
	if v, ok := d.GetOk("jwt_validation"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		jwtValidation := &ves_io_schema_views_common_waf.JWTValidation{}
		createSpec.JwtValidation = jwtValidation
		for _, set := range sl {
			if set != nil {
				jwtValidationMapStrToI := set.(map[string]interface{})

				if v, ok := jwtValidationMapStrToI["action"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					action := &ves_io_schema.Action{}
					jwtValidation.Action = action
					for _, set := range sl {
						if set != nil {
							actionMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema.Action_Block{}
									actionChoiceInt.Block = &ves_io_schema.Empty{}
									action.ActionChoice = actionChoiceInt
								}

							}

							if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema.Action_Report{}
									actionChoiceInt.Report = &ves_io_schema.Empty{}
									action.ActionChoice = actionChoiceInt
								}

							}

						}
					}

				}

				jwksConfigurationTypeFound := false

				if v, ok := jwtValidationMapStrToI["jwks_config"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

					jwksConfigurationTypeFound = true
					jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_JwksConfig{}
					jwksConfigurationInt.JwksConfig = &ves_io_schema_views_common_waf.JWKS{}
					jwtValidation.JwksConfiguration = jwksConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cleartext"]; ok && !isIntfNil(v) {

								jwksConfigurationInt.JwksConfig.Cleartext = v.(string)

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["mandatory_claims"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					mandatoryClaims := &ves_io_schema_views_common_waf.MandatoryClaims{}
					jwtValidation.MandatoryClaims = mandatoryClaims
					for _, set := range sl {
						if set != nil {
							mandatoryClaimsMapStrToI := set.(map[string]interface{})

							if w, ok := mandatoryClaimsMapStrToI["claim_names"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field claim_names")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mandatoryClaims.ClaimNames = ls
							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["reserved_claims"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					reservedClaims := &ves_io_schema_views_common_waf.ReservedClaims{}
					jwtValidation.ReservedClaims = reservedClaims
					for _, set := range sl {
						if set != nil {
							reservedClaimsMapStrToI := set.(map[string]interface{})

							audienceValidationTypeFound := false

							if v, ok := reservedClaimsMapStrToI["audience"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

								audienceValidationTypeFound = true
								audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Audience{}
								audienceValidationInt.Audience = &ves_io_schema_views_common_waf.Audiences{}
								reservedClaims.AudienceValidation = audienceValidationInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["audiences"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field audiences")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											audienceValidationInt.Audience.Audiences = ls

										}

									}
								}

							}

							if v, ok := reservedClaimsMapStrToI["audience_disable"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

								audienceValidationTypeFound = true

								if v.(bool) {
									audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_AudienceDisable{}
									audienceValidationInt.AudienceDisable = &ves_io_schema.Empty{}
									reservedClaims.AudienceValidation = audienceValidationInt
								}

							}

							issuerValidationTypeFound := false

							if v, ok := reservedClaimsMapStrToI["issuer"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

								issuerValidationTypeFound = true
								issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Issuer{}

								reservedClaims.IssuerValidation = issuerValidationInt

								issuerValidationInt.Issuer = v.(string)

							}

							if v, ok := reservedClaimsMapStrToI["issuer_disable"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

								issuerValidationTypeFound = true

								if v.(bool) {
									issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_IssuerDisable{}
									issuerValidationInt.IssuerDisable = &ves_io_schema.Empty{}
									reservedClaims.IssuerValidation = issuerValidationInt
								}

							}

							validatePeriodTypeFound := false

							if v, ok := reservedClaimsMapStrToI["validate_period_disable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

								validatePeriodTypeFound = true

								if v.(bool) {
									validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodDisable{}
									validatePeriodInt.ValidatePeriodDisable = &ves_io_schema.Empty{}
									reservedClaims.ValidatePeriod = validatePeriodInt
								}

							}

							if v, ok := reservedClaimsMapStrToI["validate_period_enable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

								validatePeriodTypeFound = true

								if v.(bool) {
									validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodEnable{}
									validatePeriodInt.ValidatePeriodEnable = &ves_io_schema.Empty{}
									reservedClaims.ValidatePeriod = validatePeriodInt
								}

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["target"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					target := &ves_io_schema_views_common_waf.Target{}
					jwtValidation.Target = target
					for _, set := range sl {
						if set != nil {
							targetMapStrToI := set.(map[string]interface{})

							targetTypeFound := false

							if v, ok := targetMapStrToI["all_endpoint"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true

								if v.(bool) {
									targetInt := &ves_io_schema_views_common_waf.Target_AllEndpoint{}
									targetInt.AllEndpoint = &ves_io_schema.Empty{}
									target.Target = targetInt
								}

							}

							if v, ok := targetMapStrToI["api_groups"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true
								targetInt := &ves_io_schema_views_common_waf.Target_ApiGroups{}
								targetInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
								target.Target = targetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field api_groups")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											targetInt.ApiGroups.ApiGroups = ls

										}

									}
								}

							}

							if v, ok := targetMapStrToI["base_paths"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true
								targetInt := &ves_io_schema_views_common_waf.Target_BasePaths{}
								targetInt.BasePaths = &ves_io_schema_views_common_waf.BasePathsType{}
								target.Target = targetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["base_paths"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field base_paths")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											targetInt.BasePaths.BasePaths = ls

										}

									}
								}

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["token_location"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tokenLocation := &ves_io_schema_views_common_waf.TokenLocation{}
					jwtValidation.TokenLocation = tokenLocation
					for _, set := range sl {
						if set != nil {
							tokenLocationMapStrToI := set.(map[string]interface{})

							tokenLocationTypeFound := false

							if v, ok := tokenLocationMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

								tokenLocationTypeFound = true

								if v.(bool) {
									tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_BearerToken{}
									tokenLocationInt.BearerToken = &ves_io_schema.Empty{}
									tokenLocation.TokenLocation = tokenLocationInt
								}

							}

						}
					}

				}

			}
		}

	}

	//l7_ddos_auto_mitigation_action

	l7DdosAutoMitigationActionTypeFound := false

	if v, ok := d.GetOk("l7_ddos_action_block"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_L7DdosActionBlock{}
			l7DdosAutoMitigationActionInt.L7DdosActionBlock = &ves_io_schema.Empty{}
			createSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	if v, ok := d.GetOk("l7_ddos_action_default"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_L7DdosActionDefault{}
			l7DdosAutoMitigationActionInt.L7DdosActionDefault = &ves_io_schema.Empty{}
			createSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	if v, ok := d.GetOk("l7_ddos_action_js_challenge"); ok && !isIntfNil(v) && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true
		l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_L7DdosActionJsChallenge{}
		l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		createSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.CustomPage = v.(string)

				}

				if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

					l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.JsScriptDelay = uint32(v.(int))

				}

			}
		}

	}

	//loadbalancer_type

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("http"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_Http{}
		loadbalancerTypeInt.Http = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["dns_volterra_managed"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Http.DnsVolterraManaged = v.(bool)

				}

				portChoiceTypeFound := false

				if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_Port{}

					loadbalancerTypeInt.Http.PortChoice = portChoiceInt

					portChoiceInt.Port = uint32(v.(int))

				}

				if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_PortRanges{}

					loadbalancerTypeInt.Http.PortChoice = portChoiceInt

					portChoiceInt.PortRanges = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("https"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_Https{}
		loadbalancerTypeInt.Https = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSCustomCertsType{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.AddHsts = v.(bool)

				}

				if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.HttpRedirect = v.(bool)

				}

				if v, ok := cs["tls_cert_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tlsCertOptions := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions{}
					loadbalancerTypeInt.Https.TlsCertOptions = tlsCertOptions
					for _, set := range sl {
						if set != nil {
							tlsCertOptionsMapStrToI := set.(map[string]interface{})

							tlsCertificatesChoiceTypeFound := false

							if v, ok := tlsCertOptionsMapStrToI["tls_cert_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

								tlsCertificatesChoiceTypeFound = true
								tlsCertificatesChoiceInt := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions_TlsCertParams{}
								tlsCertificatesChoiceInt.TlsCertParams = &ves_io_schema_views.DownstreamTLSCertsParams{}
								tlsCertOptions.TlsCertificatesChoice = tlsCertificatesChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["certificates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											certificatesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
											tlsCertificatesChoiceInt.TlsCertParams.Certificates = certificatesInt
											for i, ps := range sl {

												cMapToStrVal := ps.(map[string]interface{})
												certificatesInt[i] = &ves_io_schema_views.ObjectRefType{}

												if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
													certificatesInt[i].Name = v.(string)
												}

												if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													certificatesInt[i].Namespace = v.(string)
												}

												if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													certificatesInt[i].Tenant = v.(string)
												}

											}

										}

										mtlsChoiceTypeFound := false

										if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

											mtlsChoiceTypeFound = true

											if v.(bool) {
												mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_NoMtls{}
												mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
												tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt
											}

										}

										if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

											mtlsChoiceTypeFound = true
											mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_UseMtls{}
											mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
											tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

														mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

													}

													crlChoiceTypeFound := false

													if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

														crlChoiceTypeFound = true
														crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
														crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
														mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

														crlChoiceTypeFound = true

														if v.(bool) {
															crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
															crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
															mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
														}

													}

													trustedCaChoiceTypeFound := false

													if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

														trustedCaChoiceTypeFound = true
														trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
														trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
														mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

														trustedCaChoiceTypeFound = true
														trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

														mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

														trustedCaChoiceInt.TrustedCaUrl = v.(string)

													}

													xfccHeaderTypeFound := false

													if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

														xfccHeaderTypeFound = true

														if v.(bool) {
															xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
															xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
															mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
														}

													}

													if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

														xfccHeaderTypeFound = true
														xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
														xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
														mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

																	xfcc_header_elementsList := []ves_io_schema.XfccElement{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
																		}
																		xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
																	}
																	xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsConfig := &ves_io_schema_views.TlsConfig{}
											tlsCertificatesChoiceInt.TlsCertParams.TlsConfig = tlsConfig
											for _, set := range sl {
												if set != nil {
													tlsConfigMapStrToI := set.(map[string]interface{})

													choiceTypeFound := false

													if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
														choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
														tlsConfig.Choice = choiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	choiceInt.CustomSecurity.CipherSuites = ls

																}

																if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

																	choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

																}

																if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

																	choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

																}

															}
														}

													}

													if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
															choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

													if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
															choiceInt.LowSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

													if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
															choiceInt.MediumSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := tlsCertOptionsMapStrToI["tls_inline_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

								tlsCertificatesChoiceTypeFound = true
								tlsCertificatesChoiceInt := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions_TlsInlineParams{}
								tlsCertificatesChoiceInt.TlsInlineParams = &ves_io_schema_views.DownstreamTlsParamsType{}
								tlsCertOptions.TlsCertificatesChoice = tlsCertificatesChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										mtlsChoiceTypeFound := false

										if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

											mtlsChoiceTypeFound = true

											if v.(bool) {
												mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
												mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
												tlsCertificatesChoiceInt.TlsInlineParams.MtlsChoice = mtlsChoiceInt
											}

										}

										if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

											mtlsChoiceTypeFound = true
											mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
											mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
											tlsCertificatesChoiceInt.TlsInlineParams.MtlsChoice = mtlsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

														mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

													}

													crlChoiceTypeFound := false

													if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

														crlChoiceTypeFound = true
														crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
														crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
														mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

														crlChoiceTypeFound = true

														if v.(bool) {
															crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
															crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
															mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
														}

													}

													trustedCaChoiceTypeFound := false

													if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

														trustedCaChoiceTypeFound = true
														trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
														trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
														mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

														trustedCaChoiceTypeFound = true
														trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

														mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

														trustedCaChoiceInt.TrustedCaUrl = v.(string)

													}

													xfccHeaderTypeFound := false

													if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

														xfccHeaderTypeFound = true

														if v.(bool) {
															xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
															xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
															mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
														}

													}

													if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

														xfccHeaderTypeFound = true
														xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
														xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
														mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

																	xfcc_header_elementsList := []ves_io_schema.XfccElement{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
																		}
																		xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
																	}
																	xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
											tlsCertificatesChoiceInt.TlsInlineParams.TlsCertificates = tlsCertificates
											for i, set := range sl {
												if set != nil {
													tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
													tlsCertificatesMapStrToI := set.(map[string]interface{})

													if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
														tlsCertificates[i].CertificateUrl = w.(string)
													}

													if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
														tlsCertificates[i].Description = w.(string)
													}

													ocspStaplingChoiceTypeFound := false

													if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
														ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

																	hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
																		}
																		hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
																	}
																	ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

																}

															}
														}

													}

													if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
														ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

													}

													if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
														ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

													}

													if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														privateKey := &ves_io_schema.SecretType{}
														tlsCertificates[i].PrivateKey = privateKey
														for _, set := range sl {
															if set != nil {
																privateKeyMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	privateKey.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	privateKey.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsConfig := &ves_io_schema_views.TlsConfig{}
											tlsCertificatesChoiceInt.TlsInlineParams.TlsConfig = tlsConfig
											for _, set := range sl {
												if set != nil {
													tlsConfigMapStrToI := set.(map[string]interface{})

													choiceTypeFound := false

													if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
														choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
														tlsConfig.Choice = choiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	choiceInt.CustomSecurity.CipherSuites = ls

																}

																if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

																	choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

																}

																if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

																	choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

																}

															}
														}

													}

													if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
															choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

													if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
															choiceInt.LowSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

													if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
															choiceInt.MediumSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("https_auto_cert"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_HttpsAutoCert{}
		loadbalancerTypeInt.HttpsAutoCert = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSAutoCertsType{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.AddHsts = v.(bool)

				}

				if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.HttpRedirect = v.(bool)

				}

				if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
					loadbalancerTypeInt.HttpsAutoCert.TlsConfig = tlsConfig
					for _, set := range sl {
						if set != nil {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
									choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
									choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	//malicious_user_detection_choice

	maliciousUserDetectionChoiceTypeFound := false

	if v, ok := d.GetOk("disable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.DisableMaliciousUserDetection = &ves_io_schema.Empty{}
			createSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_EnableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.EnableMaliciousUserDetection = &ves_io_schema.Empty{}
			createSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	//origin_pool
	if v, ok := d.GetOk("origin_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		originPool := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType{}
		createSpec.OriginPool = originPool
		for _, set := range sl {
			if set != nil {
				originPoolMapStrToI := set.(map[string]interface{})

				if v, ok := originPoolMapStrToI["more_origin_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					moreOriginOptions := &ves_io_schema_views_cdn_loadbalancer.OriginAdvancedConfiguration{}
					originPool.MoreOriginOptions = moreOriginOptions
					for _, set := range sl {
						if set != nil {
							moreOriginOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := moreOriginOptionsMapStrToI["disable_byte_range_request"]; ok && !isIntfNil(w) {
								moreOriginOptions.DisableByteRangeRequest = w.(bool)
							}

							if w, ok := moreOriginOptionsMapStrToI["websocket_proxy"]; ok && !isIntfNil(w) {
								moreOriginOptions.WebsocketProxy = w.(bool)
							}

						}
					}

				}

				if w, ok := originPoolMapStrToI["origin_request_timeout"]; ok && !isIntfNil(w) {
					originPool.OriginRequestTimeout = w.(string)
				}

				if v, ok := originPoolMapStrToI["origin_servers"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					originServers := make([]*ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType, len(sl))
					originPool.OriginServers = originServers
					for i, set := range sl {
						if set != nil {
							originServers[i] = &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType{}
							originServersMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := originServersMapStrToI["public_ip"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicIp{}
								choiceInt.PublicIp = &ves_io_schema_views_origin_pool.OriginServerPublicIP{}
								originServers[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										publicIpChoiceTypeFound := false

										if v, ok := cs["ip"]; ok && !isIntfNil(v) && !publicIpChoiceTypeFound {

											publicIpChoiceTypeFound = true
											publicIpChoiceInt := &ves_io_schema_views_origin_pool.OriginServerPublicIP_Ip{}

											choiceInt.PublicIp.PublicIpChoice = publicIpChoiceInt

											publicIpChoiceInt.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) && !publicIpChoiceTypeFound {

											publicIpChoiceTypeFound = true
											publicIpChoiceInt := &ves_io_schema_views_origin_pool.OriginServerPublicIP_Ipv6{}

											choiceInt.PublicIp.PublicIpChoice = publicIpChoiceInt

											publicIpChoiceInt.Ipv6 = v.(string)

										}

									}
								}

							}

							if v, ok := originServersMapStrToI["public_name"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicName{}
								choiceInt.PublicName = &ves_io_schema_views_origin_pool.OriginServerPublicName{}
								originServers[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["dns_name"]; ok && !isIntfNil(v) {

											choiceInt.PublicName.DnsName = v.(string)

										}

										if v, ok := cs["refresh_interval"]; ok && !isIntfNil(v) {

											choiceInt.PublicName.RefreshInterval = uint32(v.(int))

										}

									}
								}

							}

							if w, ok := originServersMapStrToI["port"]; ok && !isIntfNil(w) {
								originServers[i].Port = uint32(w.(int))
							}

						}
					}

				}

				if v, ok := originPoolMapStrToI["public_name"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					publicName := &ves_io_schema_views_origin_pool.OriginServerPublicName{}
					originPool.PublicName = publicName
					for _, set := range sl {
						if set != nil {
							publicNameMapStrToI := set.(map[string]interface{})

							if w, ok := publicNameMapStrToI["dns_name"]; ok && !isIntfNil(w) {
								publicName.DnsName = w.(string)
							}

							if w, ok := publicNameMapStrToI["refresh_interval"]; ok && !isIntfNil(w) {
								publicName.RefreshInterval = uint32(w.(int))
							}

						}
					}

				}

				tlsChoiceTypeFound := false

				if v, ok := originPoolMapStrToI["no_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

					tlsChoiceTypeFound = true

					if v.(bool) {
						tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_NoTls{}
						tlsChoiceInt.NoTls = &ves_io_schema.Empty{}
						originPool.TlsChoice = tlsChoiceInt
					}

				}

				if v, ok := originPoolMapStrToI["use_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

					tlsChoiceTypeFound = true
					tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_UseTls{}
					tlsChoiceInt.UseTls = &ves_io_schema_views_origin_pool.UpstreamTlsParameters{}
					originPool.TlsChoice = tlsChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							maxSessionKeysTypeTypeFound := false

							if v, ok := cs["default_session_key_caching"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

								maxSessionKeysTypeTypeFound = true

								if v.(bool) {
									maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DefaultSessionKeyCaching{}
									maxSessionKeysTypeInt.DefaultSessionKeyCaching = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt
								}

							}

							if v, ok := cs["disable_session_key_caching"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

								maxSessionKeysTypeTypeFound = true

								if v.(bool) {
									maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSessionKeyCaching{}
									maxSessionKeysTypeInt.DisableSessionKeyCaching = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt
								}

							}

							if v, ok := cs["max_session_keys"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

								maxSessionKeysTypeTypeFound = true
								maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_MaxSessionKeys{}

								tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt

								maxSessionKeysTypeInt.MaxSessionKeys = uint32(v.(int))

							}

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views_origin_pool.TlsCertificatesType{}
								tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
											mtlsChoiceInt.UseMtls.TlsCertificates = tlsCertificates
											for i, set := range sl {
												if set != nil {
													tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
													tlsCertificatesMapStrToI := set.(map[string]interface{})

													if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
														tlsCertificates[i].CertificateUrl = w.(string)
													}

													if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
														tlsCertificates[i].Description = w.(string)
													}

													ocspStaplingChoiceTypeFound := false

													if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
														ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

																	hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
																		}
																		hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
																	}
																	ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

																}

															}
														}

													}

													if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
														ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

													}

													if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
														ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

													}

													if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														privateKey := &ves_io_schema.SecretType{}
														tlsCertificates[i].PrivateKey = privateKey
														for _, set := range sl {
															if set != nil {
																privateKeyMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	privateKey.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	privateKey.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["use_mtls_obj"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtlsObj{}
								mtlsChoiceInt.UseMtlsObj = &ves_io_schema_views.ObjectRefType{}
								tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtlsObj.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtlsObj.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtlsObj.Tenant = v.(string)

										}

									}
								}

							}

							serverValidationChoiceTypeFound := false

							if v, ok := cs["skip_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true

								if v.(bool) {
									serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_SkipServerVerification{}
									serverValidationChoiceInt.SkipServerVerification = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
								}

							}

							if v, ok := cs["use_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true
								serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseServerVerification{}
								serverValidationChoiceInt.UseServerVerification = &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext{}
								tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											serverValidationChoiceInt.UseServerVerification.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext_TrustedCaUrl{}

											serverValidationChoiceInt.UseServerVerification.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

									}
								}

							}

							if v, ok := cs["volterra_trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true

								if v.(bool) {
									serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_VolterraTrustedCa{}
									serverValidationChoiceInt.VolterraTrustedCa = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
								}

							}

							sniChoiceTypeFound := false

							if v, ok := cs["disable_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true

								if v.(bool) {
									sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSni{}
									sniChoiceInt.DisableSni = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
								}

							}

							if v, ok := cs["sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true
								sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_Sni{}

								tlsChoiceInt.UseTls.SniChoice = sniChoiceInt

								sniChoiceInt.Sni = v.(string)

							}

							if v, ok := cs["use_host_header_as_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true

								if v.(bool) {
									sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseHostHeaderAsSni{}
									sniChoiceInt.UseHostHeaderAsSni = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsChoiceInt.UseTls.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//other_settings
	if v, ok := d.GetOk("other_settings"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		otherSettings := &ves_io_schema_views_cdn_loadbalancer.OtherSettings{}
		createSpec.OtherSettings = otherSettings
		for _, set := range sl {
			if set != nil {
				otherSettingsMapStrToI := set.(map[string]interface{})

				if w, ok := otherSettingsMapStrToI["add_location"]; ok && !isIntfNil(w) {
					otherSettings.AddLocation = w.(bool)
				}

				if v, ok := otherSettingsMapStrToI["header_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					headerOptions := &ves_io_schema_views_cdn_loadbalancer.HeaderControlType{}
					otherSettings.HeaderOptions = headerOptions
					for _, set := range sl {
						if set != nil {
							headerOptionsMapStrToI := set.(map[string]interface{})

							if v, ok := headerOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
								headerOptions.RequestHeadersToAdd = requestHeadersToAdd
								for i, set := range sl {
									if set != nil {
										requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
										requestHeadersToAddMapStrToI := set.(map[string]interface{})

										if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
											requestHeadersToAdd[i].Append = w.(bool)
										}

										if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
											requestHeadersToAdd[i].Name = w.(string)
										}

										valueChoiceTypeFound := false

										if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

											valueChoiceTypeFound = true
											valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
											valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
											requestHeadersToAdd[i].ValueChoice = valueChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

											valueChoiceTypeFound = true
											valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

											requestHeadersToAdd[i].ValueChoice = valueChoiceInt

											valueChoiceInt.Value = v.(string)

										}

									}
								}

							}

							if w, ok := headerOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field request_headers_to_remove")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								headerOptions.RequestHeadersToRemove = ls
							}

							if v, ok := headerOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
								headerOptions.ResponseHeadersToAdd = responseHeadersToAdd
								for i, set := range sl {
									if set != nil {
										responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
										responseHeadersToAddMapStrToI := set.(map[string]interface{})

										if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
											responseHeadersToAdd[i].Append = w.(bool)
										}

										if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
											responseHeadersToAdd[i].Name = w.(string)
										}

										valueChoiceTypeFound := false

										if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

											valueChoiceTypeFound = true
											valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
											valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
											responseHeadersToAdd[i].ValueChoice = valueChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

											valueChoiceTypeFound = true
											valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

											responseHeadersToAdd[i].ValueChoice = valueChoiceInt

											valueChoiceInt.Value = v.(string)

										}

									}
								}

							}

							if w, ok := headerOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field response_headers_to_remove")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								headerOptions.ResponseHeadersToRemove = ls
							}

						}
					}

				}

				if v, ok := otherSettingsMapStrToI["logging_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					loggingOptions := &ves_io_schema_views_cdn_loadbalancer.LoggingOptionsType{}
					otherSettings.LoggingOptions = loggingOptions
					for _, set := range sl {
						if set != nil {
							loggingOptionsMapStrToI := set.(map[string]interface{})

							if v, ok := loggingOptionsMapStrToI["client_log_options"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
								loggingOptions.ClientLogOptions = clientLogOptions
								for _, set := range sl {
									if set != nil {
										clientLogOptionsMapStrToI := set.(map[string]interface{})

										if w, ok := clientLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field header_list")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											clientLogOptions.HeaderList = ls
										}

									}
								}

							}

							if v, ok := loggingOptionsMapStrToI["origin_log_options"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								originLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
								loggingOptions.OriginLogOptions = originLogOptions
								for _, set := range sl {
									if set != nil {
										originLogOptionsMapStrToI := set.(map[string]interface{})

										if w, ok := originLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field header_list")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											originLogOptions.HeaderList = ls
										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	//protected_cookies
	if v, ok := d.GetOk("protected_cookies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protectedCookies := make([]*ves_io_schema.CookieManipulationOptionType, len(sl))
		createSpec.ProtectedCookies = protectedCookies
		for i, set := range sl {
			if set != nil {
				protectedCookies[i] = &ves_io_schema.CookieManipulationOptionType{}
				protectedCookiesMapStrToI := set.(map[string]interface{})

				cookieTamperingTypeFound := false

				if v, ok := protectedCookiesMapStrToI["disable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

					cookieTamperingTypeFound = true

					if v.(bool) {
						cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_DisableTamperingProtection{}
						cookieTamperingInt.DisableTamperingProtection = &ves_io_schema.Empty{}
						protectedCookies[i].CookieTampering = cookieTamperingInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["enable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

					cookieTamperingTypeFound = true

					if v.(bool) {
						cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_EnableTamperingProtection{}
						cookieTamperingInt.EnableTamperingProtection = &ves_io_schema.Empty{}
						protectedCookies[i].CookieTampering = cookieTamperingInt
					}

				}

				httponlyTypeFound := false

				if v, ok := protectedCookiesMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema.CookieManipulationOptionType_AddHttponly{}
						httponlyInt.AddHttponly = &ves_io_schema.Empty{}
						protectedCookies[i].Httponly = httponlyInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema.CookieManipulationOptionType_IgnoreHttponly{}
						httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
						protectedCookies[i].Httponly = httponlyInt
					}

				}

				if w, ok := protectedCookiesMapStrToI["name"]; ok && !isIntfNil(w) {
					protectedCookies[i].Name = w.(string)
				}

				samesiteTypeFound := false

				if v, ok := protectedCookiesMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSamesite{}
						samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteLax{}
						samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteNone{}
						samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteStrict{}
						samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				secureTypeFound := false

				if v, ok := protectedCookiesMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema.CookieManipulationOptionType_AddSecure{}
						secureInt.AddSecure = &ves_io_schema.Empty{}
						protectedCookies[i].Secure = secureInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSecure{}
						secureInt.IgnoreSecure = &ves_io_schema.Empty{}
						protectedCookies[i].Secure = secureInt
					}

				}

			}
		}

	}

	//rate_limit_choice

	rateLimitChoiceTypeFound := false

	if v, ok := d.GetOk("api_rate_limit"); ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ApiRateLimit{}
		rateLimitChoiceInt.ApiRateLimit = &ves_io_schema_views_common_waf.APIRateLimit{}
		createSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["api_endpoint_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiEndpointRules := make([]*ves_io_schema_views_common_waf.ApiEndpointRule, len(sl))
					rateLimitChoiceInt.ApiRateLimit.ApiEndpointRules = apiEndpointRules
					for i, set := range sl {
						if set != nil {
							apiEndpointRules[i] = &ves_io_schema_views_common_waf.ApiEndpointRule{}
							apiEndpointRulesMapStrToI := set.(map[string]interface{})

							if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
								apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
								for _, set := range sl {
									if set != nil {
										apiEndpointMethodMapStrToI := set.(map[string]interface{})

										if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
											apiEndpointMethod.InvertMatcher = w.(bool)
										}

										if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

											methodsList := []ves_io_schema.HttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field methods")
												}
												methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
											}
											apiEndpointMethod.Methods = methodsList

										}

									}
								}

							}

							if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
								apiEndpointRules[i].ApiEndpointPath = w.(string)
							}

							if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								apiEndpointRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									apiEndpointRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_SpecificDomain{}

								apiEndpointRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							rateLimiterChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_InlineRateLimiter{}
								rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
								apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										countByChoiceTypeFound := false

										if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true
											countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
											countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
											rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true

											if v.(bool) {
												countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
												countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
												rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
											}

										}

										if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

										}

										if v, ok := cs["unit"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_RefRateLimiter{}
								rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
								apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								apiEndpointRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				ipAllowedListChoiceTypeFound := false

				if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_BypassRateLimitingRules{}
					ipAllowedListChoiceInt.BypassRateLimitingRules = &ves_io_schema_views_common_waf.BypassRateLimitingRules{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								bypassRateLimitingRules := make([]*ves_io_schema_views_common_waf.BypassRateLimitingRule, len(sl))
								ipAllowedListChoiceInt.BypassRateLimitingRules.BypassRateLimitingRules = bypassRateLimitingRules
								for i, set := range sl {
									if set != nil {
										bypassRateLimitingRules[i] = &ves_io_schema_views_common_waf.BypassRateLimitingRule{}
										bypassRateLimitingRulesMapStrToI := set.(map[string]interface{})

										if v, ok := bypassRateLimitingRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											clientMatcher := &ves_io_schema_policy.ClientMatcher{}
											bypassRateLimitingRules[i].ClientMatcher = clientMatcher
											for _, set := range sl {
												if set != nil {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field expressions")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	clientChoiceInt.ClientSelector.Expressions = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																	ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
																		}
																		ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																	}
																	clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

																}

															}
														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																	ls := make([]uint32, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		ls[i] = uint32(v.(int))
																	}
																	ipAsnChoiceInt.AsnList.AsNumbers = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																	for i, ps := range sl {

																		asMapToStrVal := ps.(map[string]interface{})
																		asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		asnSetsInt[i].Kind = "bgp_asn_set"

																		if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Name = v.(string)
																		}

																		if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																	ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																}

																if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																	for i, ps := range sl {

																		psMapToStrVal := ps.(map[string]interface{})
																		prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		prefixSetsInt[i].Kind = "ip_prefix_set"

																		if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Name = v.(string)
																		}

																		if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																	ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																}

																if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

																}

																if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															if set != nil {
																tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

																if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																	classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field classes")
																		}
																		classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																	}
																	tlsFingerprintMatcher.Classes = classesList

																}

																if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintMatcher.ExactValues = ls
																}

																if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintMatcher.ExcludedValues = ls
																}

															}
														}

													}

												}
											}

										}

										destinationTypeTypeFound := false

										if v, ok := bypassRateLimitingRulesMapStrToI["any_url"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true

											if v.(bool) {
												destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyUrl{}
												destinationTypeInt.AnyUrl = &ves_io_schema.Empty{}
												bypassRateLimitingRules[i].DestinationType = destinationTypeInt
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiEndpoint{}
											destinationTypeInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field methods")
															}
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														destinationTypeInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														destinationTypeInt.ApiEndpoint.Path = v.(string)

													}

												}
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["api_groups"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiGroups{}
											destinationTypeInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field api_groups")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														destinationTypeInt.ApiGroups.ApiGroups = ls

													}

												}
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_BasePath{}

											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											destinationTypeInt.BasePath = v.(string)

										}

										domainChoiceTypeFound := false

										if v, ok := bypassRateLimitingRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true

											if v.(bool) {
												domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyDomain{}
												domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
												bypassRateLimitingRules[i].DomainChoice = domainChoiceInt
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true
											domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_SpecificDomain{}

											bypassRateLimitingRules[i].DomainChoice = domainChoiceInt

											domainChoiceInt.SpecificDomain = v.(string)

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											requestMatcher := &ves_io_schema_policy.RequestMatcher{}
											bypassRateLimitingRules[i].RequestMatcher = requestMatcher
											for _, set := range sl {
												if set != nil {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															if set != nil {
																cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																cookieMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	cookieMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																headersMapStrToI := set.(map[string]interface{})

																if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	headers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															if set != nil {
																jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
																jwtClaimsMapStrToI := set.(map[string]interface{})

																if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	jwtClaims[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		jwtClaims[i].Match = matchInt
																	}

																}

																if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		jwtClaims[i].Match = matchInt
																	}

																}

																if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	jwtClaims[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																	jwtClaims[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															if set != nil {
																queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																queryParamsMapStrToI := set.(map[string]interface{})

																if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	queryParams[i].InvertMatcher = w.(bool)
																}

																if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																	queryParams[i].Key = w.(string)
																}

																matchTypeFound := false

																if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	queryParams[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_CustomIpAllowedList{}
					ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
								for i, ps := range sl {

									rlapMapToStrVal := ps.(map[string]interface{})
									rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Name = v.(string)
									}

									if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
									}

									if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_IpAllowedList{}
					ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

							}

							if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

							}

						}
					}

				}

				if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true

					if v.(bool) {
						ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_NoIpAllowedList{}
						ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
						rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
					}

				}

				if v, ok := cs["server_url_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					serverUrlRules := make([]*ves_io_schema_views_common_waf.ServerUrlRule, len(sl))
					rateLimitChoiceInt.ApiRateLimit.ServerUrlRules = serverUrlRules
					for i, set := range sl {
						if set != nil {
							serverUrlRules[i] = &ves_io_schema_views_common_waf.ServerUrlRule{}
							serverUrlRulesMapStrToI := set.(map[string]interface{})

							if w, ok := serverUrlRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
								serverUrlRules[i].ApiGroup = w.(string)
							}

							if w, ok := serverUrlRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
								serverUrlRules[i].BasePath = w.(string)
							}

							if v, ok := serverUrlRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								serverUrlRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := serverUrlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									serverUrlRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := serverUrlRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_SpecificDomain{}

								serverUrlRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							rateLimiterChoiceTypeFound := false

							if v, ok := serverUrlRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_InlineRateLimiter{}
								rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
								serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										countByChoiceTypeFound := false

										if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true
											countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
											countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
											rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true

											if v.(bool) {
												countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
												countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
												rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
											}

										}

										if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

										}

										if v, ok := cs["unit"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

										}

									}
								}

							}

							if v, ok := serverUrlRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_RefRateLimiter{}
								rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
								serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := serverUrlRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								serverUrlRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true

		if v.(bool) {
			rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableRateLimit{}
			rateLimitChoiceInt.DisableRateLimit = &ves_io_schema.Empty{}
			createSpec.RateLimitChoice = rateLimitChoiceInt
		}

	}

	if v, ok := d.GetOk("rate_limit"); ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_RateLimit{}
		rateLimitChoiceInt.RateLimit = &ves_io_schema_views_common_waf.RateLimitConfigType{}
		createSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				ipAllowedListChoiceTypeFound := false

				if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_CustomIpAllowedList{}
					ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
								for i, ps := range sl {

									rlapMapToStrVal := ps.(map[string]interface{})
									rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Name = v.(string)
									}

									if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
									}

									if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_IpAllowedList{}
					ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

							}

							if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

							}

						}
					}

				}

				if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true

					if v.(bool) {
						ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoIpAllowedList{}
						ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
						rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
					}

				}

				policyChoiceTypeFound := false

				if v, ok := cs["no_policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

					policyChoiceTypeFound = true

					if v.(bool) {
						policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoPolicies{}
						policyChoiceInt.NoPolicies = &ves_io_schema.Empty{}
						rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt
					}

				}

				if v, ok := cs["policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

					policyChoiceTypeFound = true
					policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_Policies{}
					policyChoiceInt.Policies = &ves_io_schema_views_rate_limiter_policy.PolicyList{}
					rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["policies"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								policyChoiceInt.Policies.Policies = policiesInt
								for i, ps := range sl {

									pMapToStrVal := ps.(map[string]interface{})
									policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
										policiesInt[i].Name = v.(string)
									}

									if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										policiesInt[i].Namespace = v.(string)
									}

									if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										policiesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["rate_limiter"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					rateLimiter := &ves_io_schema_rate_limiter.RateLimitValue{}
					rateLimitChoiceInt.RateLimit.RateLimiter = rateLimiter
					for _, set := range sl {
						if set != nil {
							rateLimiterMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := rateLimiterMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true
								actionChoiceInt := &ves_io_schema_rate_limiter.RateLimitValue_ActionBlock{}
								actionChoiceInt.ActionBlock = &ves_io_schema_rate_limiter.RateLimitBlockAction{}
								rateLimiter.ActionChoice = actionChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										blockDurationChoiceTypeFound := false

										if v, ok := cs["hours"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Hours{}
											blockDurationChoiceInt.Hours = &ves_io_schema_rate_limiter.InputHours{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Hours.Duration = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := cs["minutes"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Minutes{}
											blockDurationChoiceInt.Minutes = &ves_io_schema_rate_limiter.InputMinutes{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Minutes.Duration = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := cs["seconds"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Seconds{}
											blockDurationChoiceInt.Seconds = &ves_io_schema_rate_limiter.InputSeconds{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Seconds.Duration = uint32(v.(int))

													}

												}
											}

										}

									}
								}

							}

							if v, ok := rateLimiterMapStrToI["disabled"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema_rate_limiter.RateLimitValue_Disabled{}
									actionChoiceInt.Disabled = &ves_io_schema.Empty{}
									rateLimiter.ActionChoice = actionChoiceInt
								}

							}

							if w, ok := rateLimiterMapStrToI["burst_multiplier"]; ok && !isIntfNil(w) {
								rateLimiter.BurstMultiplier = uint32(w.(int))
							}

							if w, ok := rateLimiterMapStrToI["period_multiplier"]; ok && !isIntfNil(w) {
								rateLimiter.PeriodMultiplier = uint32(w.(int))
							}

							if w, ok := rateLimiterMapStrToI["total_number"]; ok && !isIntfNil(w) {
								rateLimiter.TotalNumber = uint32(w.(int))
							}

							if v, ok := rateLimiterMapStrToI["unit"]; ok && !isIntfNil(v) {

								rateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

							}

						}
					}

				}

			}
		}

	}

	//service_policy_choice

	servicePolicyChoiceTypeFound := false

	if v, ok := d.GetOk("active_service_policies"); ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true
		servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ActiveServicePolicies{}
		servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_common_waf.ServicePolicyList{}
		createSpec.ServicePolicyChoice = servicePolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["policies"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
					for i, ps := range sl {

						pMapToStrVal := ps.(map[string]interface{})
						policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
							policiesInt[i].Name = v.(string)
						}

						if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							policiesInt[i].Namespace = v.(string)
						}

						if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							policiesInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("no_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_NoServicePolicies{}
			servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
			createSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("service_policies_from_namespace"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{}
			servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
			createSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	//slow_ddos_mitigation_choice

	slowDdosMitigationChoiceTypeFound := false

	if v, ok := d.GetOk("slow_ddos_mitigation"); ok && !isIntfNil(v) && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true
		slowDdosMitigationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_SlowDdosMitigation{}
		slowDdosMitigationChoiceInt.SlowDdosMitigation = &ves_io_schema_virtual_host.SlowDDoSMitigation{}
		createSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["request_headers_timeout"]; ok && !isIntfNil(v) {

					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestHeadersTimeout = uint32(v.(int))

				}

				requestTimeoutChoiceTypeFound := false

				if v, ok := cs["disable_request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true

					if v.(bool) {
						requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_DisableRequestTimeout{}
						requestTimeoutChoiceInt.DisableRequestTimeout = &ves_io_schema.Empty{}
						slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt
					}

				}

				if v, ok := cs["request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true
					requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_RequestTimeout{}

					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt

					requestTimeoutChoiceInt.RequestTimeout = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("system_default_timeouts"); ok && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true

		if v.(bool) {
			slowDdosMitigationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_SystemDefaultTimeouts{}
			slowDdosMitigationChoiceInt.SystemDefaultTimeouts = &ves_io_schema.Empty{}
			createSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt
		}

	}

	//trusted_clients
	if v, ok := d.GetOk("trusted_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		trustedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		createSpec.TrustedClients = trustedClients
		for i, set := range sl {
			if set != nil {
				trustedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
				trustedClientsMapStrToI := set.(map[string]interface{})

				if v, ok := trustedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

					actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field actions")
						}
						actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
					}
					trustedClients[i].Actions = actionsList

				}

				clientSourceChoiceTypeFound := false

				if v, ok := trustedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.AsNumber = uint32(v.(int))

				}

				if v, ok := trustedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
					clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								clientSourceChoiceInt.HttpHeader.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := trustedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.IpPrefix = v.(string)

				}

				if v, ok := trustedClientsMapStrToI["ipv6_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_Ipv6Prefix{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.Ipv6Prefix = v.(string)

				}

				if v, ok := trustedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.UserIdentifier = v.(string)

				}

				if w, ok := trustedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					trustedClients[i].ExpirationTimestamp = ts
				}

				if v, ok := trustedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					trustedClients[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

			}
		}

	}

	//user_id_choice

	userIdChoiceTypeFound := false

	if v, ok := d.GetOk("user_id_client_ip"); ok && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true

		if v.(bool) {
			userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_UserIdClientIp{}
			userIdChoiceInt.UserIdClientIp = &ves_io_schema.Empty{}
			createSpec.UserIdChoice = userIdChoiceInt
		}

	}

	if v, ok := d.GetOk("user_identification"); ok && !isIntfNil(v) && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true
		userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_UserIdentification{}
		userIdChoiceInt.UserIdentification = &ves_io_schema_views.ObjectRefType{}
		createSpec.UserIdChoice = userIdChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Name = v.(string)

				}

				if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Namespace = v.(string)

				}

				if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Tenant = v.(string)

				}

			}
		}

	}

	//waf_choice

	wafChoiceTypeFound := false

	if v, ok := d.GetOk("app_firewall"); ok && !isIntfNil(v) && !wafChoiceTypeFound {

		wafChoiceTypeFound = true
		wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_AppFirewall{}
		wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
		createSpec.WafChoice = wafChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Name = v.(string)

				}

				if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Namespace = v.(string)

				}

				if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Tenant = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_waf"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true

		if v.(bool) {
			wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_DisableWaf{}
			wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
			createSpec.WafChoice = wafChoiceInt
		}

	}

	//waf_exclusion_rules
	if v, ok := d.GetOk("waf_exclusion_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
		createSpec.WafExclusionRules = wafExclusionRules
		for i, set := range sl {
			if set != nil {
				wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
				wafExclusionRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						wafExclusionRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					wafExclusionRules[i].ExpirationTimestamp = ts
				}

				if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					wafExclusionRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

					methodsList := []ves_io_schema.HttpMethod{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field methods")
						}
						methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
					}
					wafExclusionRules[i].Methods = methodsList

				}

				pathChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true

					if v.(bool) {
						pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
						pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
						wafExclusionRules[i].PathChoice = pathChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathPrefix = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathRegex = v.(string)

				}

				wafAdvancedConfigurationTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true
					wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
					wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
					wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
								for i, set := range sl {
									if set != nil {
										excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
										excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeAttackTypeContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

										}

									}
								}

							}

							if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
								for i, set := range sl {
									if set != nil {
										excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
										excludeBotNameContextsMapStrToI := set.(map[string]interface{})

										if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
											excludeBotNameContexts[i].BotName = w.(string)
										}

									}
								}

							}

							if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
								for i, set := range sl {
									if set != nil {
										excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
										excludeSignatureContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].ContextName = w.(string)
										}

										if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].SignatureId = uint32(w.(int))
										}

									}
								}

							}

							if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
								for i, set := range sl {
									if set != nil {
										excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
										excludeViolationContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeViolationContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

										}

									}
								}

							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true

					if v.(bool) {
						wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
						wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
						wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Creating Volterra CdnLoadbalancer object with struct: %+v", createReq)

	createCdnLoadbalancerResp, err := client.CreateObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating CdnLoadbalancer: %s", err)
	}
	d.SetId(createCdnLoadbalancerResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraCdnLoadbalancerRead(d, meta)
}

func resourceVolterraCdnLoadbalancerRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CdnLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CdnLoadbalancer %q: %s", d.Id(), err)
	}
	return setCdnLoadbalancerFields(client, d, resp)
}

func setCdnLoadbalancerFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraCdnLoadbalancerUpdate updates CdnLoadbalancer resource
func resourceVolterraCdnLoadbalancerUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType{}
	updateReq := &ves_io_schema_views_cdn_loadbalancer.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("blocked_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		blockedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		updateSpec.BlockedClients = blockedClients
		for i, set := range sl {
			if set != nil {
				blockedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
				blockedClientsMapStrToI := set.(map[string]interface{})

				if v, ok := blockedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

					actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field actions")
						}
						actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
					}
					blockedClients[i].Actions = actionsList

				}

				clientSourceChoiceTypeFound := false

				if v, ok := blockedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.AsNumber = uint32(v.(int))

				}

				if v, ok := blockedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
					clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								clientSourceChoiceInt.HttpHeader.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := blockedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.IpPrefix = v.(string)

				}

				if v, ok := blockedClientsMapStrToI["ipv6_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_Ipv6Prefix{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.Ipv6Prefix = v.(string)

				}

				if v, ok := blockedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

					blockedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.UserIdentifier = v.(string)

				}

				if w, ok := blockedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					blockedClients[i].ExpirationTimestamp = ts
				}

				if v, ok := blockedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					blockedClients[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

			}
		}

	}

	challengeTypeTypeFound := false

	if v, ok := d.GetOk("captcha_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_CaptchaChallenge{}
		challengeTypeInt.CaptchaChallenge = &ves_io_schema_virtual_host.CaptchaChallengeType{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.CaptchaChallenge.CustomPage = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("enable_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_EnableChallenge{}
		challengeTypeInt.EnableChallenge = &ves_io_schema_views_common_waf.EnableChallenge{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				captchaChallengeParametersChoiceTypeFound := false

				if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_CaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
					challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

							}

						}
					}

				}

				if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{}
						captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
					}

				}

				jsChallengeParametersChoiceTypeFound := false

				if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultJsChallengeParameters{}
						jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
					}

				}

				if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_JsChallengeParameters{}
					jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					challengeTypeInt.EnableChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

				maliciousUserMitigationChoiceTypeFound := false

				if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true

					if v.(bool) {
						maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_DefaultMitigationSettings{}
						maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
						challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
					}

				}

				if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.EnableChallenge_MaliciousUserMitigation{}
					maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
					challengeTypeInt.EnableChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("js_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_JsChallenge{}
		challengeTypeInt.JsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.CustomPage = v.(string)

				}

				if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

					challengeTypeInt.JsChallenge.JsScriptDelay = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("no_challenge"); ok && !challengeTypeTypeFound {

		challengeTypeTypeFound = true

		if v.(bool) {
			challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_NoChallenge{}
			challengeTypeInt.NoChallenge = &ves_io_schema.Empty{}
			updateSpec.ChallengeType = challengeTypeInt
		}

	}

	if v, ok := d.GetOk("policy_based_challenge"); ok && !isIntfNil(v) && !challengeTypeTypeFound {

		challengeTypeTypeFound = true
		challengeTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_PolicyBasedChallenge{}
		challengeTypeInt.PolicyBasedChallenge = &ves_io_schema_views_common_waf.PolicyBasedChallenge{}
		updateSpec.ChallengeType = challengeTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				captchaChallengeParametersChoiceTypeFound := false

				if v, ok := cs["captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true
					captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{}
					captchaChallengeParametersChoiceInt.CaptchaChallengeParameters = &ves_io_schema_virtual_host.CaptchaChallengeType{}
					challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								captchaChallengeParametersChoiceInt.CaptchaChallengeParameters.CustomPage = v.(string)

							}

						}
					}

				}

				if v, ok := cs["default_captcha_challenge_parameters"]; ok && !isIntfNil(v) && !captchaChallengeParametersChoiceTypeFound {

					captchaChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						captchaChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{}
						captchaChallengeParametersChoiceInt.DefaultCaptchaChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.CaptchaChallengeParametersChoice = captchaChallengeParametersChoiceInt
					}

				}

				challengeChoiceTypeFound := false

				if v, ok := cs["always_enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{}
						challengeChoiceInt.AlwaysEnableCaptchaChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				if v, ok := cs["always_enable_js_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{}
						challengeChoiceInt.AlwaysEnableJsChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				if v, ok := cs["no_challenge"]; ok && !isIntfNil(v) && !challengeChoiceTypeFound {

					challengeChoiceTypeFound = true

					if v.(bool) {
						challengeChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_NoChallenge{}
						challengeChoiceInt.NoChallenge = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.ChallengeChoice = challengeChoiceInt
					}

				}

				jsChallengeParametersChoiceTypeFound := false

				if v, ok := cs["default_js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true

					if v.(bool) {
						jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{}
						jsChallengeParametersChoiceInt.DefaultJsChallengeParameters = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt
					}

				}

				if v, ok := cs["js_challenge_parameters"]; ok && !isIntfNil(v) && !jsChallengeParametersChoiceTypeFound {

					jsChallengeParametersChoiceTypeFound = true
					jsChallengeParametersChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_JsChallengeParameters{}
					jsChallengeParametersChoiceInt.JsChallengeParameters = &ves_io_schema_virtual_host.JavascriptChallengeType{}
					challengeTypeInt.PolicyBasedChallenge.JsChallengeParametersChoice = jsChallengeParametersChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CookieExpiry = uint32(v.(int))

							}

							if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.CustomPage = v.(string)

							}

							if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

								jsChallengeParametersChoiceInt.JsChallengeParameters.JsScriptDelay = uint32(v.(int))

							}

						}
					}

				}

				maliciousUserMitigationChoiceTypeFound := false

				if v, ok := cs["default_mitigation_settings"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true

					if v.(bool) {
						maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_DefaultMitigationSettings{}
						maliciousUserMitigationChoiceInt.DefaultMitigationSettings = &ves_io_schema.Empty{}
						challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt
					}

				}

				if v, ok := cs["malicious_user_mitigation"]; ok && !isIntfNil(v) && !maliciousUserMitigationChoiceTypeFound {

					maliciousUserMitigationChoiceTypeFound = true
					maliciousUserMitigationChoiceInt := &ves_io_schema_views_common_waf.PolicyBasedChallenge_MaliciousUserMitigation{}
					maliciousUserMitigationChoiceInt.MaliciousUserMitigation = &ves_io_schema_views.ObjectRefType{}
					challengeTypeInt.PolicyBasedChallenge.MaliciousUserMitigationChoice = maliciousUserMitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["name"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Name = v.(string)

							}

							if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Namespace = v.(string)

							}

							if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

								maliciousUserMitigationChoiceInt.MaliciousUserMitigation.Tenant = v.(string)

							}

						}
					}

				}

				if v, ok := cs["rule_list"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					ruleList := &ves_io_schema_views_common_waf.ChallengeRuleList{}
					challengeTypeInt.PolicyBasedChallenge.RuleList = ruleList
					for _, set := range sl {
						if set != nil {
							ruleListMapStrToI := set.(map[string]interface{})

							if v, ok := ruleListMapStrToI["rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rules := make([]*ves_io_schema_views_common_waf.ChallengeRule, len(sl))
								ruleList.Rules = rules
								for i, set := range sl {
									if set != nil {
										rules[i] = &ves_io_schema_views_common_waf.ChallengeRule{}
										rulesMapStrToI := set.(map[string]interface{})

										if v, ok := rulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											metadata := &ves_io_schema.MessageMetaType{}
											rules[i].Metadata = metadata
											for _, set := range sl {
												if set != nil {
													metadataMapStrToI := set.(map[string]interface{})

													if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
														metadata.Description = w.(string)
													}

													if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
														metadata.Name = w.(string)
													}

												}
											}

										}

										if v, ok := rulesMapStrToI["spec"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											spec := &ves_io_schema_service_policy_rule.ChallengeRuleSpec{}
											rules[i].Spec = spec
											for _, set := range sl {
												if set != nil {
													specMapStrToI := set.(map[string]interface{})

													if v, ok := specMapStrToI["arg_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														argMatchers := make([]*ves_io_schema_policy.ArgMatcherType, len(sl))
														spec.ArgMatchers = argMatchers
														for i, set := range sl {
															if set != nil {
																argMatchers[i] = &ves_io_schema_policy.ArgMatcherType{}
																argMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := argMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	argMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := argMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.ArgMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		argMatchers[i].Match = matchInt
																	}

																}

																if v, ok := argMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.ArgMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		argMatchers[i].Match = matchInt
																	}

																}

																if v, ok := argMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.ArgMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	argMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := argMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	argMatchers[i].Name = w.(string)
																}

															}
														}

													}

													asnChoiceTypeFound := false

													if v, ok := specMapStrToI["any_asn"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true

														if v.(bool) {
															asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyAsn{}
															asnChoiceInt.AnyAsn = &ves_io_schema.Empty{}
															spec.AsnChoice = asnChoiceInt
														}

													}

													if v, ok := specMapStrToI["asn_list"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true
														asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnList{}
														asnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														spec.AsnChoice = asnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																	ls := make([]uint32, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		ls[i] = uint32(v.(int))
																	}
																	asnChoiceInt.AsnList.AsNumbers = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !asnChoiceTypeFound {

														asnChoiceTypeFound = true
														asnChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AsnMatcher{}
														asnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														spec.AsnChoice = asnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	asnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																	for i, ps := range sl {

																		asMapToStrVal := ps.(map[string]interface{})
																		asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		asnSetsInt[i].Kind = "bgp_asn_set"

																		if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Name = v.(string)
																		}

																		if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := specMapStrToI["body_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														bodyMatcher := &ves_io_schema_policy.MatcherType{}
														spec.BodyMatcher = bodyMatcher
														for _, set := range sl {
															if set != nil {
																bodyMatcherMapStrToI := set.(map[string]interface{})

																if w, ok := bodyMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	bodyMatcher.ExactValues = ls
																}

																if w, ok := bodyMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	bodyMatcher.RegexValues = ls
																}

																if v, ok := bodyMatcherMapStrToI["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	bodyMatcher.Transformers = transformersList

																}

															}
														}

													}

													challengeActionTypeFound := false

													if v, ok := specMapStrToI["disable_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_DisableChallenge{}
															challengeActionInt.DisableChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													if v, ok := specMapStrToI["enable_captcha_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableCaptchaChallenge{}
															challengeActionInt.EnableCaptchaChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													if v, ok := specMapStrToI["enable_javascript_challenge"]; ok && !isIntfNil(v) && !challengeActionTypeFound {

														challengeActionTypeFound = true

														if v.(bool) {
															challengeActionInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_EnableJavascriptChallenge{}
															challengeActionInt.EnableJavascriptChallenge = &ves_io_schema.Empty{}
															spec.ChallengeAction = challengeActionInt
														}

													}

													clientChoiceTypeFound := false

													if v, ok := specMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															spec.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := specMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														spec.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field expressions")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	clientChoiceInt.ClientSelector.Expressions = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														spec.CookieMatchers = cookieMatchers
														for i, set := range sl {
															if set != nil {
																cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																cookieMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	cookieMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := specMapStrToI["domain_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														domainMatcher := &ves_io_schema_policy.MatcherTypeBasic{}
														spec.DomainMatcher = domainMatcher
														for _, set := range sl {
															if set != nil {
																domainMatcherMapStrToI := set.(map[string]interface{})

																if w, ok := domainMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	domainMatcher.ExactValues = ls
																}

																if w, ok := domainMatcherMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	domainMatcher.RegexValues = ls
																}

															}
														}

													}

													if w, ok := specMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
														ts, err := parseTime(w.(string))
														if err != nil {
															return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
														}
														spec.ExpirationTimestamp = ts
													}

													if v, ok := specMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														spec.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																headersMapStrToI := set.(map[string]interface{})

																if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	headers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := specMapStrToI["http_method"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														httpMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
														spec.HttpMethod = httpMethod
														for _, set := range sl {
															if set != nil {
																httpMethodMapStrToI := set.(map[string]interface{})

																if w, ok := httpMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	httpMethod.InvertMatcher = w.(bool)
																}

																if v, ok := httpMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

																	methodsList := []ves_io_schema.HttpMethod{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field methods")
																		}
																		methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
																	}
																	httpMethod.Methods = methodsList

																}

															}
														}

													}

													ipChoiceTypeFound := false

													if v, ok := specMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true

														if v.(bool) {
															ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_AnyIp{}
															ipChoiceInt.AnyIp = &ves_io_schema.Empty{}
															spec.IpChoice = ipChoiceInt
														}

													}

													if v, ok := specMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true
														ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpMatcher{}
														ipChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														spec.IpChoice = ipChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																	ipChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																}

																if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																	for i, ps := range sl {

																		psMapToStrVal := ps.(map[string]interface{})
																		prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		prefixSetsInt[i].Kind = "ip_prefix_set"

																		if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Name = v.(string)
																		}

																		if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := specMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipChoiceTypeFound {

														ipChoiceTypeFound = true
														ipChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_IpPrefixList{}
														ipChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														spec.IpChoice = ipChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																	ipChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																}

																if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipChoiceInt.IpPrefixList.IpPrefixes = ls

																}

																if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																}

															}
														}

													}

													if v, ok := specMapStrToI["path"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														path := &ves_io_schema_policy.PathMatcherType{}
														spec.Path = path
														for _, set := range sl {
															if set != nil {
																pathMapStrToI := set.(map[string]interface{})

																if w, ok := pathMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.ExactValues = ls
																}

																if w, ok := pathMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	path.InvertMatcher = w.(bool)
																}

																if w, ok := pathMapStrToI["prefix_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field prefix_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.PrefixValues = ls
																}

																if w, ok := pathMapStrToI["regex_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.RegexValues = ls
																}

																if w, ok := pathMapStrToI["suffix_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field suffix_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	path.SuffixValues = ls
																}

																if v, ok := pathMapStrToI["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	path.Transformers = transformersList

																}

															}
														}

													}

													if v, ok := specMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														spec.QueryParams = queryParams
														for i, set := range sl {
															if set != nil {
																queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																queryParamsMapStrToI := set.(map[string]interface{})

																if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	queryParams[i].InvertMatcher = w.(bool)
																}

																if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																	queryParams[i].Key = w.(string)
																}

																matchTypeFound := false

																if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	queryParams[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

															}
														}

													}

													tlsFingerprintChoiceTypeFound := false

													if v, ok := specMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) && !tlsFingerprintChoiceTypeFound {

														tlsFingerprintChoiceTypeFound = true
														tlsFingerprintChoiceInt := &ves_io_schema_service_policy_rule.ChallengeRuleSpec_TlsFingerprintMatcher{}
														tlsFingerprintChoiceInt.TlsFingerprintMatcher = &ves_io_schema_policy.TlsFingerprintMatcherType{}
														spec.TlsFingerprintChoice = tlsFingerprintChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["classes"]; ok && !isIntfNil(v) {

																	classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field classes")
																		}
																		classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.Classes = classesList

																}

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExactValues = ls

																}

																if v, ok := cs["excluded_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintChoiceInt.TlsFingerprintMatcher.ExcludedValues = ls

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("cors_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		corsPolicy := &ves_io_schema.CorsPolicy{}
		updateSpec.CorsPolicy = corsPolicy
		for _, set := range sl {
			if set != nil {
				corsPolicyMapStrToI := set.(map[string]interface{})

				if w, ok := corsPolicyMapStrToI["allow_credentials"]; ok && !isIntfNil(w) {
					corsPolicy.AllowCredentials = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["allow_headers"]; ok && !isIntfNil(w) {
					corsPolicy.AllowHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_methods"]; ok && !isIntfNil(w) {
					corsPolicy.AllowMethods = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["allow_origin"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOrigin = ls
				}

				if w, ok := corsPolicyMapStrToI["allow_origin_regex"]; ok && !isIntfNil(w) {
					ls := make([]string, len(w.([]interface{})))
					for i, v := range w.([]interface{}) {
						if v == nil {
							return fmt.Errorf("please provide valid non-empty string value of field allow_origin_regex")
						}
						if str, ok := v.(string); ok {
							ls[i] = str
						}
					}
					corsPolicy.AllowOriginRegex = ls
				}

				if w, ok := corsPolicyMapStrToI["disabled"]; ok && !isIntfNil(w) {
					corsPolicy.Disabled = w.(bool)
				}

				if w, ok := corsPolicyMapStrToI["expose_headers"]; ok && !isIntfNil(w) {
					corsPolicy.ExposeHeaders = w.(string)
				}

				if w, ok := corsPolicyMapStrToI["maximum_age"]; ok && !isIntfNil(w) {
					corsPolicy.MaximumAge = int32(w.(int))
				}

			}
		}

	}

	if v, ok := d.GetOk("csrf_policy"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		csrfPolicy := &ves_io_schema.CsrfPolicy{}
		updateSpec.CsrfPolicy = csrfPolicy
		for _, set := range sl {
			if set != nil {
				csrfPolicyMapStrToI := set.(map[string]interface{})

				allowedDomainsTypeFound := false

				if v, ok := csrfPolicyMapStrToI["all_load_balancer_domains"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_AllLoadBalancerDomains{}
						allowedDomainsInt.AllLoadBalancerDomains = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

				if v, ok := csrfPolicyMapStrToI["custom_domain_list"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true
					allowedDomainsInt := &ves_io_schema.CsrfPolicy_CustomDomainList{}
					allowedDomainsInt.CustomDomainList = &ves_io_schema.DomainNameList{}
					csrfPolicy.AllowedDomains = allowedDomainsInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["domains"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field domains")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								allowedDomainsInt.CustomDomainList.Domains = ls

							}

						}
					}

				}

				if v, ok := csrfPolicyMapStrToI["disabled"]; ok && !isIntfNil(v) && !allowedDomainsTypeFound {

					allowedDomainsTypeFound = true

					if v.(bool) {
						allowedDomainsInt := &ves_io_schema.CsrfPolicy_Disabled{}
						allowedDomainsInt.Disabled = &ves_io_schema.Empty{}
						csrfPolicy.AllowedDomains = allowedDomainsInt
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("custom_cache_rule"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		customCacheRule := &ves_io_schema_views_common_cache_rule.CustomCacheRule{}
		updateSpec.CustomCacheRule = customCacheRule
		for _, set := range sl {
			if set != nil {
				customCacheRuleMapStrToI := set.(map[string]interface{})

				if v, ok := customCacheRuleMapStrToI["cdn_cache_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					cdnCacheRulesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					customCacheRule.CdnCacheRules = cdnCacheRulesInt
					for i, ps := range sl {

						ccrMapToStrVal := ps.(map[string]interface{})
						cdnCacheRulesInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := ccrMapToStrVal["name"]; ok && !isIntfNil(v) {
							cdnCacheRulesInt[i].Name = v.(string)
						}

						if v, ok := ccrMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							cdnCacheRulesInt[i].Namespace = v.(string)
						}

						if v, ok := ccrMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							cdnCacheRulesInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("data_guard_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		dataGuardRules := make([]*ves_io_schema_policy.SimpleDataGuardRule, len(sl))
		updateSpec.DataGuardRules = dataGuardRules
		for i, set := range sl {
			if set != nil {
				dataGuardRules[i] = &ves_io_schema_policy.SimpleDataGuardRule{}
				dataGuardRulesMapStrToI := set.(map[string]interface{})

				actionChoiceTypeFound := false

				if v, ok := dataGuardRulesMapStrToI["apply_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

					actionChoiceTypeFound = true

					if v.(bool) {
						actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ApplyDataGuard{}
						actionChoiceInt.ApplyDataGuard = &ves_io_schema.Empty{}
						dataGuardRules[i].ActionChoice = actionChoiceInt
					}

				}

				if v, ok := dataGuardRulesMapStrToI["skip_data_guard"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

					actionChoiceTypeFound = true

					if v.(bool) {
						actionChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SkipDataGuard{}
						actionChoiceInt.SkipDataGuard = &ves_io_schema.Empty{}
						dataGuardRules[i].ActionChoice = actionChoiceInt
					}

				}

				domainChoiceTypeFound := false

				if v, ok := dataGuardRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						dataGuardRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := dataGuardRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_ExactValue{}

					dataGuardRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := dataGuardRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleDataGuardRule_SuffixValue{}

					dataGuardRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if v, ok := dataGuardRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					dataGuardRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := dataGuardRulesMapStrToI["path"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					path := &ves_io_schema.PathMatcherType{}
					dataGuardRules[i].Path = path
					for _, set := range sl {
						if set != nil {
							pathMapStrToI := set.(map[string]interface{})

							pathMatchTypeFound := false

							if v, ok := pathMapStrToI["path"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Path{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Path = v.(string)

							}

							if v, ok := pathMapStrToI["prefix"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Prefix{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Prefix = v.(string)

							}

							if v, ok := pathMapStrToI["regex"]; ok && !isIntfNil(v) && !pathMatchTypeFound {

								pathMatchTypeFound = true
								pathMatchInt := &ves_io_schema.PathMatcherType_Regex{}

								path.PathMatch = pathMatchInt

								pathMatchInt.Regex = v.(string)

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("ddos_mitigation_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		ddosMitigationRules := make([]*ves_io_schema_views_common_security.DDoSMitigationRule, len(sl))
		updateSpec.DdosMitigationRules = ddosMitigationRules
		for i, set := range sl {
			if set != nil {
				ddosMitigationRules[i] = &ves_io_schema_views_common_security.DDoSMitigationRule{}
				ddosMitigationRulesMapStrToI := set.(map[string]interface{})

				if w, ok := ddosMitigationRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					ddosMitigationRules[i].ExpirationTimestamp = ts
				}

				if v, ok := ddosMitigationRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					ddosMitigationRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				mitigationActionTypeFound := false

				if v, ok := ddosMitigationRulesMapStrToI["block"]; ok && !isIntfNil(v) && !mitigationActionTypeFound {

					mitigationActionTypeFound = true

					if v.(bool) {
						mitigationActionInt := &ves_io_schema_views_common_security.DDoSMitigationRule_Block{}
						mitigationActionInt.Block = &ves_io_schema.Empty{}
						ddosMitigationRules[i].MitigationAction = mitigationActionInt
					}

				}

				mitigationChoiceTypeFound := false

				if v, ok := ddosMitigationRulesMapStrToI["ddos_client_source"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

					mitigationChoiceTypeFound = true
					mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_DdosClientSource{}
					mitigationChoiceInt.DdosClientSource = &ves_io_schema_views_common_security.DDoSClientSource{}
					ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["asn_list"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								asnList := &ves_io_schema_policy.AsnMatchList{}
								mitigationChoiceInt.DdosClientSource.AsnList = asnList
								for _, set := range sl {
									if set != nil {
										asnListMapStrToI := set.(map[string]interface{})

										if w, ok := asnListMapStrToI["as_numbers"]; ok && !isIntfNil(w) {
											ls := make([]uint32, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												ls[i] = uint32(v.(int))
											}
											asnList.AsNumbers = ls
										}

									}
								}

							}

							if v, ok := cs["country_list"]; ok && !isIntfNil(v) {

								country_listList := []ves_io_schema_policy.CountryCode{}
								for _, j := range v.([]interface{}) {
									if j == nil {
										return fmt.Errorf("please provide valid non-empty enum value of field country_list")
									}
									country_listList = append(country_listList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
								}
								mitigationChoiceInt.DdosClientSource.CountryList = country_listList

							}

							if v, ok := cs["ja4_tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								ja4TlsFingerprintMatcher := &ves_io_schema_policy.JA4TlsFingerprintMatcherType{}
								mitigationChoiceInt.DdosClientSource.Ja4TlsFingerprintMatcher = ja4TlsFingerprintMatcher
								for _, set := range sl {
									if set != nil {
										ja4TlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

										if w, ok := ja4TlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field exact_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											ja4TlsFingerprintMatcher.ExactValues = ls
										}

									}
								}

							}

							if v, ok := cs["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
								mitigationChoiceInt.DdosClientSource.TlsFingerprintMatcher = tlsFingerprintMatcher
								for _, set := range sl {
									if set != nil {
										tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

											classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field classes")
												}
												classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
											}
											tlsFingerprintMatcher.Classes = classesList

										}

										if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field exact_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											tlsFingerprintMatcher.ExactValues = ls
										}

										if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											tlsFingerprintMatcher.ExcludedValues = ls
										}

									}
								}

							}

						}
					}

				}

				if v, ok := ddosMitigationRulesMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !mitigationChoiceTypeFound {

					mitigationChoiceTypeFound = true
					mitigationChoiceInt := &ves_io_schema_views_common_security.DDoSMitigationRule_IpPrefixList{}
					mitigationChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
					ddosMitigationRules[i].MitigationChoice = mitigationChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

								mitigationChoiceInt.IpPrefixList.InvertMatch = v.(bool)

							}

							if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mitigationChoiceInt.IpPrefixList.IpPrefixes = ls

							}

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mitigationChoiceInt.IpPrefixList.Ipv6Prefixes = ls

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("default_cache_action"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		defaultCacheAction := &ves_io_schema_views_common_cache_rule.DefaultCacheAction{}
		updateSpec.DefaultCacheAction = defaultCacheAction
		for _, set := range sl {
			if set != nil {
				defaultCacheActionMapStrToI := set.(map[string]interface{})

				cacheActionsTypeFound := false

				if v, ok := defaultCacheActionMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true

					if v.(bool) {
						cacheActionsInt := &ves_io_schema_views_common_cache_rule.DefaultCacheAction_CacheDisabled{}
						cacheActionsInt.CacheDisabled = &ves_io_schema.Empty{}
						defaultCacheAction.CacheActions = cacheActionsInt
					}

				}

				if v, ok := defaultCacheActionMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true
					cacheActionsInt := &ves_io_schema_views_common_cache_rule.DefaultCacheAction_CacheTtlDefault{}

					defaultCacheAction.CacheActions = cacheActionsInt

					cacheActionsInt.CacheTtlDefault = v.(string)

				}

				if v, ok := defaultCacheActionMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !cacheActionsTypeFound {

					cacheActionsTypeFound = true
					cacheActionsInt := &ves_io_schema_views_common_cache_rule.DefaultCacheAction_CacheTtlOverride{}

					defaultCacheAction.CacheActions = cacheActionsInt

					cacheActionsInt.CacheTtlOverride = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			if v == nil {
				return fmt.Errorf("please provide valid non-empty string value of field domains")
			}
			if str, ok := v.(string); ok {
				ls[i] = str
			}
		}
		updateSpec.Domains = ls

	}

	if v, ok := d.GetOk("graphql_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		graphqlRules := make([]*ves_io_schema_policy.GraphQLRule, len(sl))
		updateSpec.GraphqlRules = graphqlRules
		for i, set := range sl {
			if set != nil {
				graphqlRules[i] = &ves_io_schema_policy.GraphQLRule{}
				graphqlRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := graphqlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.GraphQLRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						graphqlRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := graphqlRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_ExactValue{}

					graphqlRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := graphqlRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.GraphQLRule_SuffixValue{}

					graphqlRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := graphqlRulesMapStrToI["exact_path"]; ok && !isIntfNil(w) {
					graphqlRules[i].ExactPath = w.(string)
				}

				if v, ok := graphqlRulesMapStrToI["graphql_settings"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					graphqlSettings := &ves_io_schema_policy.GraphQLSettingsType{}
					graphqlRules[i].GraphqlSettings = graphqlSettings
					for _, set := range sl {
						if set != nil {
							graphqlSettingsMapStrToI := set.(map[string]interface{})

							allowIntrospectionQueriesChoiceTypeFound := false

							if v, ok := graphqlSettingsMapStrToI["disable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

								allowIntrospectionQueriesChoiceTypeFound = true

								if v.(bool) {
									allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_DisableIntrospection{}
									allowIntrospectionQueriesChoiceInt.DisableIntrospection = &ves_io_schema.Empty{}
									graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
								}

							}

							if v, ok := graphqlSettingsMapStrToI["enable_introspection"]; ok && !isIntfNil(v) && !allowIntrospectionQueriesChoiceTypeFound {

								allowIntrospectionQueriesChoiceTypeFound = true

								if v.(bool) {
									allowIntrospectionQueriesChoiceInt := &ves_io_schema_policy.GraphQLSettingsType_EnableIntrospection{}
									allowIntrospectionQueriesChoiceInt.EnableIntrospection = &ves_io_schema.Empty{}
									graphqlSettings.AllowIntrospectionQueriesChoice = allowIntrospectionQueriesChoiceInt
								}

							}

							if w, ok := graphqlSettingsMapStrToI["max_batched_queries"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxBatchedQueries = uint32(w.(int))
							}

							if w, ok := graphqlSettingsMapStrToI["max_depth"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxDepth = uint32(w.(int))
							}

							if w, ok := graphqlSettingsMapStrToI["max_total_length"]; ok && !isIntfNil(w) {
								graphqlSettings.MaxTotalLength = uint32(w.(int))
							}

						}
					}

				}

				if v, ok := graphqlRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					graphqlRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				methodChoiceTypeFound := false

				if v, ok := graphqlRulesMapStrToI["method_get"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

					methodChoiceTypeFound = true

					if v.(bool) {
						methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodGet{}
						methodChoiceInt.MethodGet = &ves_io_schema.Empty{}
						graphqlRules[i].MethodChoice = methodChoiceInt
					}

				}

				if v, ok := graphqlRulesMapStrToI["method_post"]; ok && !isIntfNil(v) && !methodChoiceTypeFound {

					methodChoiceTypeFound = true

					if v.(bool) {
						methodChoiceInt := &ves_io_schema_policy.GraphQLRule_MethodPost{}
						methodChoiceInt.MethodPost = &ves_io_schema.Empty{}
						graphqlRules[i].MethodChoice = methodChoiceInt
					}

				}

			}
		}

	}

	ipReputationChoiceTypeFound := false

	if v, ok := d.GetOk("disable_ip_reputation"); ok && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true

		if v.(bool) {
			ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableIpReputation{}
			ipReputationChoiceInt.DisableIpReputation = &ves_io_schema.Empty{}
			updateSpec.IpReputationChoice = ipReputationChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_ip_reputation"); ok && !isIntfNil(v) && !ipReputationChoiceTypeFound {

		ipReputationChoiceTypeFound = true
		ipReputationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_EnableIpReputation{}
		ipReputationChoiceInt.EnableIpReputation = &ves_io_schema_views_common_waf.IPThreatCategoryListType{}
		updateSpec.IpReputationChoice = ipReputationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

					ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
						}
						ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
					}
					ipReputationChoiceInt.EnableIpReputation.IpThreatCategories = ip_threat_categoriesList

				}

			}
		}

	}

	if v, ok := d.GetOk("jwt_validation"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		jwtValidation := &ves_io_schema_views_common_waf.JWTValidation{}
		updateSpec.JwtValidation = jwtValidation
		for _, set := range sl {
			if set != nil {
				jwtValidationMapStrToI := set.(map[string]interface{})

				if v, ok := jwtValidationMapStrToI["action"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					action := &ves_io_schema.Action{}
					jwtValidation.Action = action
					for _, set := range sl {
						if set != nil {
							actionMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := actionMapStrToI["block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema.Action_Block{}
									actionChoiceInt.Block = &ves_io_schema.Empty{}
									action.ActionChoice = actionChoiceInt
								}

							}

							if v, ok := actionMapStrToI["report"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema.Action_Report{}
									actionChoiceInt.Report = &ves_io_schema.Empty{}
									action.ActionChoice = actionChoiceInt
								}

							}

						}
					}

				}

				jwksConfigurationTypeFound := false

				if v, ok := jwtValidationMapStrToI["jwks_config"]; ok && !isIntfNil(v) && !jwksConfigurationTypeFound {

					jwksConfigurationTypeFound = true
					jwksConfigurationInt := &ves_io_schema_views_common_waf.JWTValidation_JwksConfig{}
					jwksConfigurationInt.JwksConfig = &ves_io_schema_views_common_waf.JWKS{}
					jwtValidation.JwksConfiguration = jwksConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["cleartext"]; ok && !isIntfNil(v) {

								jwksConfigurationInt.JwksConfig.Cleartext = v.(string)

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["mandatory_claims"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					mandatoryClaims := &ves_io_schema_views_common_waf.MandatoryClaims{}
					jwtValidation.MandatoryClaims = mandatoryClaims
					for _, set := range sl {
						if set != nil {
							mandatoryClaimsMapStrToI := set.(map[string]interface{})

							if w, ok := mandatoryClaimsMapStrToI["claim_names"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field claim_names")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								mandatoryClaims.ClaimNames = ls
							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["reserved_claims"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					reservedClaims := &ves_io_schema_views_common_waf.ReservedClaims{}
					jwtValidation.ReservedClaims = reservedClaims
					for _, set := range sl {
						if set != nil {
							reservedClaimsMapStrToI := set.(map[string]interface{})

							audienceValidationTypeFound := false

							if v, ok := reservedClaimsMapStrToI["audience"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

								audienceValidationTypeFound = true
								audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Audience{}
								audienceValidationInt.Audience = &ves_io_schema_views_common_waf.Audiences{}
								reservedClaims.AudienceValidation = audienceValidationInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["audiences"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field audiences")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											audienceValidationInt.Audience.Audiences = ls

										}

									}
								}

							}

							if v, ok := reservedClaimsMapStrToI["audience_disable"]; ok && !isIntfNil(v) && !audienceValidationTypeFound {

								audienceValidationTypeFound = true

								if v.(bool) {
									audienceValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_AudienceDisable{}
									audienceValidationInt.AudienceDisable = &ves_io_schema.Empty{}
									reservedClaims.AudienceValidation = audienceValidationInt
								}

							}

							issuerValidationTypeFound := false

							if v, ok := reservedClaimsMapStrToI["issuer"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

								issuerValidationTypeFound = true
								issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_Issuer{}

								reservedClaims.IssuerValidation = issuerValidationInt

								issuerValidationInt.Issuer = v.(string)

							}

							if v, ok := reservedClaimsMapStrToI["issuer_disable"]; ok && !isIntfNil(v) && !issuerValidationTypeFound {

								issuerValidationTypeFound = true

								if v.(bool) {
									issuerValidationInt := &ves_io_schema_views_common_waf.ReservedClaims_IssuerDisable{}
									issuerValidationInt.IssuerDisable = &ves_io_schema.Empty{}
									reservedClaims.IssuerValidation = issuerValidationInt
								}

							}

							validatePeriodTypeFound := false

							if v, ok := reservedClaimsMapStrToI["validate_period_disable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

								validatePeriodTypeFound = true

								if v.(bool) {
									validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodDisable{}
									validatePeriodInt.ValidatePeriodDisable = &ves_io_schema.Empty{}
									reservedClaims.ValidatePeriod = validatePeriodInt
								}

							}

							if v, ok := reservedClaimsMapStrToI["validate_period_enable"]; ok && !isIntfNil(v) && !validatePeriodTypeFound {

								validatePeriodTypeFound = true

								if v.(bool) {
									validatePeriodInt := &ves_io_schema_views_common_waf.ReservedClaims_ValidatePeriodEnable{}
									validatePeriodInt.ValidatePeriodEnable = &ves_io_schema.Empty{}
									reservedClaims.ValidatePeriod = validatePeriodInt
								}

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["target"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					target := &ves_io_schema_views_common_waf.Target{}
					jwtValidation.Target = target
					for _, set := range sl {
						if set != nil {
							targetMapStrToI := set.(map[string]interface{})

							targetTypeFound := false

							if v, ok := targetMapStrToI["all_endpoint"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true

								if v.(bool) {
									targetInt := &ves_io_schema_views_common_waf.Target_AllEndpoint{}
									targetInt.AllEndpoint = &ves_io_schema.Empty{}
									target.Target = targetInt
								}

							}

							if v, ok := targetMapStrToI["api_groups"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true
								targetInt := &ves_io_schema_views_common_waf.Target_ApiGroups{}
								targetInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
								target.Target = targetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field api_groups")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											targetInt.ApiGroups.ApiGroups = ls

										}

									}
								}

							}

							if v, ok := targetMapStrToI["base_paths"]; ok && !isIntfNil(v) && !targetTypeFound {

								targetTypeFound = true
								targetInt := &ves_io_schema_views_common_waf.Target_BasePaths{}
								targetInt.BasePaths = &ves_io_schema_views_common_waf.BasePathsType{}
								target.Target = targetInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["base_paths"]; ok && !isIntfNil(v) {

											ls := make([]string, len(v.([]interface{})))
											for i, v := range v.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field base_paths")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											targetInt.BasePaths.BasePaths = ls

										}

									}
								}

							}

						}
					}

				}

				if v, ok := jwtValidationMapStrToI["token_location"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tokenLocation := &ves_io_schema_views_common_waf.TokenLocation{}
					jwtValidation.TokenLocation = tokenLocation
					for _, set := range sl {
						if set != nil {
							tokenLocationMapStrToI := set.(map[string]interface{})

							tokenLocationTypeFound := false

							if v, ok := tokenLocationMapStrToI["bearer_token"]; ok && !isIntfNil(v) && !tokenLocationTypeFound {

								tokenLocationTypeFound = true

								if v.(bool) {
									tokenLocationInt := &ves_io_schema_views_common_waf.TokenLocation_BearerToken{}
									tokenLocationInt.BearerToken = &ves_io_schema.Empty{}
									tokenLocation.TokenLocation = tokenLocationInt
								}

							}

						}
					}

				}

			}
		}

	}

	l7DdosAutoMitigationActionTypeFound := false

	if v, ok := d.GetOk("l7_ddos_action_block"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_L7DdosActionBlock{}
			l7DdosAutoMitigationActionInt.L7DdosActionBlock = &ves_io_schema.Empty{}
			updateSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	if v, ok := d.GetOk("l7_ddos_action_default"); ok && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true

		if v.(bool) {
			l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_L7DdosActionDefault{}
			l7DdosAutoMitigationActionInt.L7DdosActionDefault = &ves_io_schema.Empty{}
			updateSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt
		}

	}

	if v, ok := d.GetOk("l7_ddos_action_js_challenge"); ok && !isIntfNil(v) && !l7DdosAutoMitigationActionTypeFound {

		l7DdosAutoMitigationActionTypeFound = true
		l7DdosAutoMitigationActionInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_L7DdosActionJsChallenge{}
		l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge = &ves_io_schema_virtual_host.JavascriptChallengeType{}
		updateSpec.L7DdosAutoMitigationAction = l7DdosAutoMitigationActionInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["cookie_expiry"]; ok && !isIntfNil(v) {

					l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.CookieExpiry = uint32(v.(int))

				}

				if v, ok := cs["custom_page"]; ok && !isIntfNil(v) {

					l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.CustomPage = v.(string)

				}

				if v, ok := cs["js_script_delay"]; ok && !isIntfNil(v) {

					l7DdosAutoMitigationActionInt.L7DdosActionJsChallenge.JsScriptDelay = uint32(v.(int))

				}

			}
		}

	}

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("http"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_Http{}
		loadbalancerTypeInt.Http = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["dns_volterra_managed"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Http.DnsVolterraManaged = v.(bool)

				}

				portChoiceTypeFound := false

				if v, ok := cs["port"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_Port{}

					loadbalancerTypeInt.Http.PortChoice = portChoiceInt

					portChoiceInt.Port = uint32(v.(int))

				}

				if v, ok := cs["port_ranges"]; ok && !isIntfNil(v) && !portChoiceTypeFound {

					portChoiceTypeFound = true
					portChoiceInt := &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp_PortRanges{}

					loadbalancerTypeInt.Http.PortChoice = portChoiceInt

					portChoiceInt.PortRanges = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("https"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_Https{}
		loadbalancerTypeInt.Https = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSCustomCertsType{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.AddHsts = v.(bool)

				}

				if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.Https.HttpRedirect = v.(bool)

				}

				if v, ok := cs["tls_cert_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tlsCertOptions := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions{}
					loadbalancerTypeInt.Https.TlsCertOptions = tlsCertOptions
					for _, set := range sl {
						if set != nil {
							tlsCertOptionsMapStrToI := set.(map[string]interface{})

							tlsCertificatesChoiceTypeFound := false

							if v, ok := tlsCertOptionsMapStrToI["tls_cert_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

								tlsCertificatesChoiceTypeFound = true
								tlsCertificatesChoiceInt := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions_TlsCertParams{}
								tlsCertificatesChoiceInt.TlsCertParams = &ves_io_schema_views.DownstreamTLSCertsParams{}
								tlsCertOptions.TlsCertificatesChoice = tlsCertificatesChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["certificates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											certificatesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
											tlsCertificatesChoiceInt.TlsCertParams.Certificates = certificatesInt
											for i, ps := range sl {

												cMapToStrVal := ps.(map[string]interface{})
												certificatesInt[i] = &ves_io_schema_views.ObjectRefType{}

												if v, ok := cMapToStrVal["name"]; ok && !isIntfNil(v) {
													certificatesInt[i].Name = v.(string)
												}

												if v, ok := cMapToStrVal["namespace"]; ok && !isIntfNil(v) {
													certificatesInt[i].Namespace = v.(string)
												}

												if v, ok := cMapToStrVal["tenant"]; ok && !isIntfNil(v) {
													certificatesInt[i].Tenant = v.(string)
												}

											}

										}

										mtlsChoiceTypeFound := false

										if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

											mtlsChoiceTypeFound = true

											if v.(bool) {
												mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_NoMtls{}
												mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
												tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt
											}

										}

										if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

											mtlsChoiceTypeFound = true
											mtlsChoiceInt := &ves_io_schema_views.DownstreamTLSCertsParams_UseMtls{}
											mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
											tlsCertificatesChoiceInt.TlsCertParams.MtlsChoice = mtlsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

														mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

													}

													crlChoiceTypeFound := false

													if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

														crlChoiceTypeFound = true
														crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
														crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
														mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

														crlChoiceTypeFound = true

														if v.(bool) {
															crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
															crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
															mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
														}

													}

													trustedCaChoiceTypeFound := false

													if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

														trustedCaChoiceTypeFound = true
														trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
														trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
														mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

														trustedCaChoiceTypeFound = true
														trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

														mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

														trustedCaChoiceInt.TrustedCaUrl = v.(string)

													}

													xfccHeaderTypeFound := false

													if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

														xfccHeaderTypeFound = true

														if v.(bool) {
															xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
															xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
															mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
														}

													}

													if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

														xfccHeaderTypeFound = true
														xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
														xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
														mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

																	xfcc_header_elementsList := []ves_io_schema.XfccElement{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
																		}
																		xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
																	}
																	xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsConfig := &ves_io_schema_views.TlsConfig{}
											tlsCertificatesChoiceInt.TlsCertParams.TlsConfig = tlsConfig
											for _, set := range sl {
												if set != nil {
													tlsConfigMapStrToI := set.(map[string]interface{})

													choiceTypeFound := false

													if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
														choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
														tlsConfig.Choice = choiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	choiceInt.CustomSecurity.CipherSuites = ls

																}

																if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

																	choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

																}

																if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

																	choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

																}

															}
														}

													}

													if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
															choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

													if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
															choiceInt.LowSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

													if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
															choiceInt.MediumSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := tlsCertOptionsMapStrToI["tls_inline_params"]; ok && !isIntfNil(v) && !tlsCertificatesChoiceTypeFound {

								tlsCertificatesChoiceTypeFound = true
								tlsCertificatesChoiceInt := &ves_io_schema_views_cdn_loadbalancer.TlsCertOptions_TlsInlineParams{}
								tlsCertificatesChoiceInt.TlsInlineParams = &ves_io_schema_views.DownstreamTlsParamsType{}
								tlsCertOptions.TlsCertificatesChoice = tlsCertificatesChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										mtlsChoiceTypeFound := false

										if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

											mtlsChoiceTypeFound = true

											if v.(bool) {
												mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_NoMtls{}
												mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
												tlsCertificatesChoiceInt.TlsInlineParams.MtlsChoice = mtlsChoiceInt
											}

										}

										if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

											mtlsChoiceTypeFound = true
											mtlsChoiceInt := &ves_io_schema_views.DownstreamTlsParamsType_UseMtls{}
											mtlsChoiceInt.UseMtls = &ves_io_schema_views.DownstreamTlsValidationContext{}
											tlsCertificatesChoiceInt.TlsInlineParams.MtlsChoice = mtlsChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["client_certificate_optional"]; ok && !isIntfNil(v) {

														mtlsChoiceInt.UseMtls.ClientCertificateOptional = v.(bool)

													}

													crlChoiceTypeFound := false

													if v, ok := cs["crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

														crlChoiceTypeFound = true
														crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_Crl{}
														crlChoiceInt.Crl = &ves_io_schema_views.ObjectRefType{}
														mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	crlChoiceInt.Crl.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["no_crl"]; ok && !isIntfNil(v) && !crlChoiceTypeFound {

														crlChoiceTypeFound = true

														if v.(bool) {
															crlChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_NoCrl{}
															crlChoiceInt.NoCrl = &ves_io_schema.Empty{}
															mtlsChoiceInt.UseMtls.CrlChoice = crlChoiceInt
														}

													}

													trustedCaChoiceTypeFound := false

													if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

														trustedCaChoiceTypeFound = true
														trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCa{}
														trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
														mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["name"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Name = v.(string)

																}

																if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

																}

																if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

																	trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

																}

															}
														}

													}

													if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

														trustedCaChoiceTypeFound = true
														trustedCaChoiceInt := &ves_io_schema_views.DownstreamTlsValidationContext_TrustedCaUrl{}

														mtlsChoiceInt.UseMtls.TrustedCaChoice = trustedCaChoiceInt

														trustedCaChoiceInt.TrustedCaUrl = v.(string)

													}

													xfccHeaderTypeFound := false

													if v, ok := cs["xfcc_disabled"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

														xfccHeaderTypeFound = true

														if v.(bool) {
															xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccDisabled{}
															xfccHeaderInt.XfccDisabled = &ves_io_schema.Empty{}
															mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt
														}

													}

													if v, ok := cs["xfcc_options"]; ok && !isIntfNil(v) && !xfccHeaderTypeFound {

														xfccHeaderTypeFound = true
														xfccHeaderInt := &ves_io_schema_views.DownstreamTlsValidationContext_XfccOptions{}
														xfccHeaderInt.XfccOptions = &ves_io_schema_views.XfccHeaderKeys{}
														mtlsChoiceInt.UseMtls.XfccHeader = xfccHeaderInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["xfcc_header_elements"]; ok && !isIntfNil(v) {

																	xfcc_header_elementsList := []ves_io_schema.XfccElement{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field xfcc_header_elements")
																		}
																		xfcc_header_elementsList = append(xfcc_header_elementsList, ves_io_schema.XfccElement(ves_io_schema.XfccElement_value[j.(string)]))
																	}
																	xfccHeaderInt.XfccOptions.XfccHeaderElements = xfcc_header_elementsList

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
											tlsCertificatesChoiceInt.TlsInlineParams.TlsCertificates = tlsCertificates
											for i, set := range sl {
												if set != nil {
													tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
													tlsCertificatesMapStrToI := set.(map[string]interface{})

													if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
														tlsCertificates[i].CertificateUrl = w.(string)
													}

													if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
														tlsCertificates[i].Description = w.(string)
													}

													ocspStaplingChoiceTypeFound := false

													if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
														ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

																	hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
																		}
																		hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
																	}
																	ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

																}

															}
														}

													}

													if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
														ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

													}

													if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
														ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

													}

													if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														privateKey := &ves_io_schema.SecretType{}
														tlsCertificates[i].PrivateKey = privateKey
														for _, set := range sl {
															if set != nil {
																privateKeyMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	privateKey.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	privateKey.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

										if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsConfig := &ves_io_schema_views.TlsConfig{}
											tlsCertificatesChoiceInt.TlsInlineParams.TlsConfig = tlsConfig
											for _, set := range sl {
												if set != nil {
													tlsConfigMapStrToI := set.(map[string]interface{})

													choiceTypeFound := false

													if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true
														choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
														choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
														tlsConfig.Choice = choiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	choiceInt.CustomSecurity.CipherSuites = ls

																}

																if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

																	choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

																}

																if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

																	choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

																}

															}
														}

													}

													if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
															choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

													if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
															choiceInt.LowSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

													if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

														choiceTypeFound = true

														if v.(bool) {
															choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
															choiceInt.MediumSecurity = &ves_io_schema.Empty{}
															tlsConfig.Choice = choiceInt
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("https_auto_cert"); ok && !isIntfNil(v) && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_HttpsAutoCert{}
		loadbalancerTypeInt.HttpsAutoCert = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSAutoCertsType{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.AddHsts = v.(bool)

				}

				if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

					loadbalancerTypeInt.HttpsAutoCert.HttpRedirect = v.(bool)

				}

				if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
					loadbalancerTypeInt.HttpsAutoCert.TlsConfig = tlsConfig
					for _, set := range sl {
						if set != nil {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
									choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
									choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}
					}

				}

			}
		}

	}

	maliciousUserDetectionChoiceTypeFound := false

	if v, ok := d.GetOk("disable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.DisableMaliciousUserDetection = &ves_io_schema.Empty{}
			updateSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("enable_malicious_user_detection"); ok && !maliciousUserDetectionChoiceTypeFound {

		maliciousUserDetectionChoiceTypeFound = true

		if v.(bool) {
			maliciousUserDetectionChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_EnableMaliciousUserDetection{}
			maliciousUserDetectionChoiceInt.EnableMaliciousUserDetection = &ves_io_schema.Empty{}
			updateSpec.MaliciousUserDetectionChoice = maliciousUserDetectionChoiceInt
		}

	}

	if v, ok := d.GetOk("origin_pool"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		originPool := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType{}
		updateSpec.OriginPool = originPool
		for _, set := range sl {
			if set != nil {
				originPoolMapStrToI := set.(map[string]interface{})

				if v, ok := originPoolMapStrToI["more_origin_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					moreOriginOptions := &ves_io_schema_views_cdn_loadbalancer.OriginAdvancedConfiguration{}
					originPool.MoreOriginOptions = moreOriginOptions
					for _, set := range sl {
						if set != nil {
							moreOriginOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := moreOriginOptionsMapStrToI["disable_byte_range_request"]; ok && !isIntfNil(w) {
								moreOriginOptions.DisableByteRangeRequest = w.(bool)
							}

							if w, ok := moreOriginOptionsMapStrToI["websocket_proxy"]; ok && !isIntfNil(w) {
								moreOriginOptions.WebsocketProxy = w.(bool)
							}

						}
					}

				}

				if w, ok := originPoolMapStrToI["origin_request_timeout"]; ok && !isIntfNil(w) {
					originPool.OriginRequestTimeout = w.(string)
				}

				if v, ok := originPoolMapStrToI["origin_servers"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					originServers := make([]*ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType, len(sl))
					originPool.OriginServers = originServers
					for i, set := range sl {
						if set != nil {
							originServers[i] = &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType{}
							originServersMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := originServersMapStrToI["public_ip"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicIp{}
								choiceInt.PublicIp = &ves_io_schema_views_origin_pool.OriginServerPublicIP{}
								originServers[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										publicIpChoiceTypeFound := false

										if v, ok := cs["ip"]; ok && !isIntfNil(v) && !publicIpChoiceTypeFound {

											publicIpChoiceTypeFound = true
											publicIpChoiceInt := &ves_io_schema_views_origin_pool.OriginServerPublicIP_Ip{}

											choiceInt.PublicIp.PublicIpChoice = publicIpChoiceInt

											publicIpChoiceInt.Ip = v.(string)

										}

										if v, ok := cs["ipv6"]; ok && !isIntfNil(v) && !publicIpChoiceTypeFound {

											publicIpChoiceTypeFound = true
											publicIpChoiceInt := &ves_io_schema_views_origin_pool.OriginServerPublicIP_Ipv6{}

											choiceInt.PublicIp.PublicIpChoice = publicIpChoiceInt

											publicIpChoiceInt.Ipv6 = v.(string)

										}

									}
								}

							}

							if v, ok := originServersMapStrToI["public_name"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicName{}
								choiceInt.PublicName = &ves_io_schema_views_origin_pool.OriginServerPublicName{}
								originServers[i].Choice = choiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["dns_name"]; ok && !isIntfNil(v) {

											choiceInt.PublicName.DnsName = v.(string)

										}

										if v, ok := cs["refresh_interval"]; ok && !isIntfNil(v) {

											choiceInt.PublicName.RefreshInterval = uint32(v.(int))

										}

									}
								}

							}

							if w, ok := originServersMapStrToI["port"]; ok && !isIntfNil(w) {
								originServers[i].Port = uint32(w.(int))
							}

						}
					}

				}

				if v, ok := originPoolMapStrToI["public_name"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					publicName := &ves_io_schema_views_origin_pool.OriginServerPublicName{}
					originPool.PublicName = publicName
					for _, set := range sl {
						if set != nil {
							publicNameMapStrToI := set.(map[string]interface{})

							if w, ok := publicNameMapStrToI["dns_name"]; ok && !isIntfNil(w) {
								publicName.DnsName = w.(string)
							}

							if w, ok := publicNameMapStrToI["refresh_interval"]; ok && !isIntfNil(w) {
								publicName.RefreshInterval = uint32(w.(int))
							}

						}
					}

				}

				tlsChoiceTypeFound := false

				if v, ok := originPoolMapStrToI["no_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

					tlsChoiceTypeFound = true

					if v.(bool) {
						tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_NoTls{}
						tlsChoiceInt.NoTls = &ves_io_schema.Empty{}
						originPool.TlsChoice = tlsChoiceInt
					}

				}

				if v, ok := originPoolMapStrToI["use_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

					tlsChoiceTypeFound = true
					tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_UseTls{}
					tlsChoiceInt.UseTls = &ves_io_schema_views_origin_pool.UpstreamTlsParameters{}
					originPool.TlsChoice = tlsChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							maxSessionKeysTypeTypeFound := false

							if v, ok := cs["default_session_key_caching"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

								maxSessionKeysTypeTypeFound = true

								if v.(bool) {
									maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DefaultSessionKeyCaching{}
									maxSessionKeysTypeInt.DefaultSessionKeyCaching = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt
								}

							}

							if v, ok := cs["disable_session_key_caching"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

								maxSessionKeysTypeTypeFound = true

								if v.(bool) {
									maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSessionKeyCaching{}
									maxSessionKeysTypeInt.DisableSessionKeyCaching = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt
								}

							}

							if v, ok := cs["max_session_keys"]; ok && !isIntfNil(v) && !maxSessionKeysTypeTypeFound {

								maxSessionKeysTypeTypeFound = true
								maxSessionKeysTypeInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_MaxSessionKeys{}

								tlsChoiceInt.UseTls.MaxSessionKeysType = maxSessionKeysTypeInt

								maxSessionKeysTypeInt.MaxSessionKeys = uint32(v.(int))

							}

							mtlsChoiceTypeFound := false

							if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true

								if v.(bool) {
									mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_NoMtls{}
									mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt
								}

							}

							if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtls{}
								mtlsChoiceInt.UseMtls = &ves_io_schema_views_origin_pool.TlsCertificatesType{}
								tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
											mtlsChoiceInt.UseMtls.TlsCertificates = tlsCertificates
											for i, set := range sl {
												if set != nil {
													tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
													tlsCertificatesMapStrToI := set.(map[string]interface{})

													if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
														tlsCertificates[i].CertificateUrl = w.(string)
													}

													if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
														tlsCertificates[i].Description = w.(string)
													}

													ocspStaplingChoiceTypeFound := false

													if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
														ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

																	hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field hash_algorithms")
																		}
																		hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
																	}
																	ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

																}

															}
														}

													}

													if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_DisableOcspStapling{}
														ocspStaplingChoiceInt.DisableOcspStapling = &ves_io_schema.Empty{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

													}

													if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

														ocspStaplingChoiceTypeFound = true
														ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_UseSystemDefaults{}
														ocspStaplingChoiceInt.UseSystemDefaults = &ves_io_schema.Empty{}
														tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

													}

													if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														privateKey := &ves_io_schema.SecretType{}
														tlsCertificates[i].PrivateKey = privateKey
														for _, set := range sl {
															if set != nil {
																privateKeyMapStrToI := set.(map[string]interface{})

																secretInfoOneofTypeFound := false

																if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
																	secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
																	privateKey.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																			}

																			if v, ok := cs["location"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																			}

																			if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																			}

																		}
																	}

																}

																if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

																	secretInfoOneofTypeFound = true
																	secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
																	secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
																	privateKey.SecretInfoOneof = secretInfoOneofInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																			}

																			if v, ok := cs["url"]; ok && !isIntfNil(v) {

																				secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

							if v, ok := cs["use_mtls_obj"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

								mtlsChoiceTypeFound = true
								mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtlsObj{}
								mtlsChoiceInt.UseMtlsObj = &ves_io_schema_views.ObjectRefType{}
								tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtlsObj.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtlsObj.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											mtlsChoiceInt.UseMtlsObj.Tenant = v.(string)

										}

									}
								}

							}

							serverValidationChoiceTypeFound := false

							if v, ok := cs["skip_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true

								if v.(bool) {
									serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_SkipServerVerification{}
									serverValidationChoiceInt.SkipServerVerification = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
								}

							}

							if v, ok := cs["use_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true
								serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseServerVerification{}
								serverValidationChoiceInt.UseServerVerification = &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext{}
								tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										trustedCaChoiceTypeFound := false

										if v, ok := cs["trusted_ca"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext_TrustedCa{}
											trustedCaChoiceInt.TrustedCa = &ves_io_schema_views.ObjectRefType{}
											serverValidationChoiceInt.UseServerVerification.TrustedCaChoice = trustedCaChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														trustedCaChoiceInt.TrustedCa.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) && !trustedCaChoiceTypeFound {

											trustedCaChoiceTypeFound = true
											trustedCaChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext_TrustedCaUrl{}

											serverValidationChoiceInt.UseServerVerification.TrustedCaChoice = trustedCaChoiceInt

											trustedCaChoiceInt.TrustedCaUrl = v.(string)

										}

									}
								}

							}

							if v, ok := cs["volterra_trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

								serverValidationChoiceTypeFound = true

								if v.(bool) {
									serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_VolterraTrustedCa{}
									serverValidationChoiceInt.VolterraTrustedCa = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
								}

							}

							sniChoiceTypeFound := false

							if v, ok := cs["disable_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true

								if v.(bool) {
									sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSni{}
									sniChoiceInt.DisableSni = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
								}

							}

							if v, ok := cs["sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true
								sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_Sni{}

								tlsChoiceInt.UseTls.SniChoice = sniChoiceInt

								sniChoiceInt.Sni = v.(string)

							}

							if v, ok := cs["use_host_header_as_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

								sniChoiceTypeFound = true

								if v.(bool) {
									sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseHostHeaderAsSni{}
									sniChoiceInt.UseHostHeaderAsSni = &ves_io_schema.Empty{}
									tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
								}

							}

							if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsConfig := &ves_io_schema_views.TlsConfig{}
								tlsChoiceInt.UseTls.TlsConfig = tlsConfig
								for _, set := range sl {
									if set != nil {
										tlsConfigMapStrToI := set.(map[string]interface{})

										choiceTypeFound := false

										if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true
											choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
											choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
											tlsConfig.Choice = choiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field cipher_suites")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														choiceInt.CustomSecurity.CipherSuites = ls

													}

													if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

													if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

														choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

													}

												}
											}

										}

										if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
												choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
												choiceInt.LowSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

										if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

											choiceTypeFound = true

											if v.(bool) {
												choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
												choiceInt.MediumSecurity = &ves_io_schema.Empty{}
												tlsConfig.Choice = choiceInt
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("other_settings"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		otherSettings := &ves_io_schema_views_cdn_loadbalancer.OtherSettings{}
		updateSpec.OtherSettings = otherSettings
		for _, set := range sl {
			if set != nil {
				otherSettingsMapStrToI := set.(map[string]interface{})

				if w, ok := otherSettingsMapStrToI["add_location"]; ok && !isIntfNil(w) {
					otherSettings.AddLocation = w.(bool)
				}

				if v, ok := otherSettingsMapStrToI["header_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					headerOptions := &ves_io_schema_views_cdn_loadbalancer.HeaderControlType{}
					otherSettings.HeaderOptions = headerOptions
					for _, set := range sl {
						if set != nil {
							headerOptionsMapStrToI := set.(map[string]interface{})

							if v, ok := headerOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
								headerOptions.RequestHeadersToAdd = requestHeadersToAdd
								for i, set := range sl {
									if set != nil {
										requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
										requestHeadersToAddMapStrToI := set.(map[string]interface{})

										if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
											requestHeadersToAdd[i].Append = w.(bool)
										}

										if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
											requestHeadersToAdd[i].Name = w.(string)
										}

										valueChoiceTypeFound := false

										if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

											valueChoiceTypeFound = true
											valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
											valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
											requestHeadersToAdd[i].ValueChoice = valueChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

											valueChoiceTypeFound = true
											valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

											requestHeadersToAdd[i].ValueChoice = valueChoiceInt

											valueChoiceInt.Value = v.(string)

										}

									}
								}

							}

							if w, ok := headerOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field request_headers_to_remove")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								headerOptions.RequestHeadersToRemove = ls
							}

							if v, ok := headerOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
								headerOptions.ResponseHeadersToAdd = responseHeadersToAdd
								for i, set := range sl {
									if set != nil {
										responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
										responseHeadersToAddMapStrToI := set.(map[string]interface{})

										if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
											responseHeadersToAdd[i].Append = w.(bool)
										}

										if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
											responseHeadersToAdd[i].Name = w.(string)
										}

										valueChoiceTypeFound := false

										if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

											valueChoiceTypeFound = true
											valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
											valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
											responseHeadersToAdd[i].ValueChoice = valueChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													secretInfoOneofTypeFound := false

													if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
														secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
														valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

																}

																if v, ok := cs["location"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

																}

																if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

																}

															}
														}

													}

													if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

														secretInfoOneofTypeFound = true
														secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
														secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
														valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["provider"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

																}

																if v, ok := cs["url"]; ok && !isIntfNil(v) {

																	secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

																}

															}
														}

													}

												}
											}

										}

										if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

											valueChoiceTypeFound = true
											valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

											responseHeadersToAdd[i].ValueChoice = valueChoiceInt

											valueChoiceInt.Value = v.(string)

										}

									}
								}

							}

							if w, ok := headerOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field response_headers_to_remove")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								headerOptions.ResponseHeadersToRemove = ls
							}

						}
					}

				}

				if v, ok := otherSettingsMapStrToI["logging_options"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					loggingOptions := &ves_io_schema_views_cdn_loadbalancer.LoggingOptionsType{}
					otherSettings.LoggingOptions = loggingOptions
					for _, set := range sl {
						if set != nil {
							loggingOptionsMapStrToI := set.(map[string]interface{})

							if v, ok := loggingOptionsMapStrToI["client_log_options"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
								loggingOptions.ClientLogOptions = clientLogOptions
								for _, set := range sl {
									if set != nil {
										clientLogOptionsMapStrToI := set.(map[string]interface{})

										if w, ok := clientLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field header_list")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											clientLogOptions.HeaderList = ls
										}

									}
								}

							}

							if v, ok := loggingOptionsMapStrToI["origin_log_options"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								originLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
								loggingOptions.OriginLogOptions = originLogOptions
								for _, set := range sl {
									if set != nil {
										originLogOptionsMapStrToI := set.(map[string]interface{})

										if w, ok := originLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
											ls := make([]string, len(w.([]interface{})))
											for i, v := range w.([]interface{}) {
												if v == nil {
													return fmt.Errorf("please provide valid non-empty string value of field header_list")
												}
												if str, ok := v.(string); ok {
													ls[i] = str
												}
											}
											originLogOptions.HeaderList = ls
										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("protected_cookies"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		protectedCookies := make([]*ves_io_schema.CookieManipulationOptionType, len(sl))
		updateSpec.ProtectedCookies = protectedCookies
		for i, set := range sl {
			if set != nil {
				protectedCookies[i] = &ves_io_schema.CookieManipulationOptionType{}
				protectedCookiesMapStrToI := set.(map[string]interface{})

				cookieTamperingTypeFound := false

				if v, ok := protectedCookiesMapStrToI["disable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

					cookieTamperingTypeFound = true

					if v.(bool) {
						cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_DisableTamperingProtection{}
						cookieTamperingInt.DisableTamperingProtection = &ves_io_schema.Empty{}
						protectedCookies[i].CookieTampering = cookieTamperingInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["enable_tampering_protection"]; ok && !isIntfNil(v) && !cookieTamperingTypeFound {

					cookieTamperingTypeFound = true

					if v.(bool) {
						cookieTamperingInt := &ves_io_schema.CookieManipulationOptionType_EnableTamperingProtection{}
						cookieTamperingInt.EnableTamperingProtection = &ves_io_schema.Empty{}
						protectedCookies[i].CookieTampering = cookieTamperingInt
					}

				}

				httponlyTypeFound := false

				if v, ok := protectedCookiesMapStrToI["add_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema.CookieManipulationOptionType_AddHttponly{}
						httponlyInt.AddHttponly = &ves_io_schema.Empty{}
						protectedCookies[i].Httponly = httponlyInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["ignore_httponly"]; ok && !isIntfNil(v) && !httponlyTypeFound {

					httponlyTypeFound = true

					if v.(bool) {
						httponlyInt := &ves_io_schema.CookieManipulationOptionType_IgnoreHttponly{}
						httponlyInt.IgnoreHttponly = &ves_io_schema.Empty{}
						protectedCookies[i].Httponly = httponlyInt
					}

				}

				if w, ok := protectedCookiesMapStrToI["name"]; ok && !isIntfNil(w) {
					protectedCookies[i].Name = w.(string)
				}

				samesiteTypeFound := false

				if v, ok := protectedCookiesMapStrToI["ignore_samesite"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSamesite{}
						samesiteInt.IgnoreSamesite = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_lax"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteLax{}
						samesiteInt.SamesiteLax = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_none"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteNone{}
						samesiteInt.SamesiteNone = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["samesite_strict"]; ok && !isIntfNil(v) && !samesiteTypeFound {

					samesiteTypeFound = true

					if v.(bool) {
						samesiteInt := &ves_io_schema.CookieManipulationOptionType_SamesiteStrict{}
						samesiteInt.SamesiteStrict = &ves_io_schema.Empty{}
						protectedCookies[i].Samesite = samesiteInt
					}

				}

				secureTypeFound := false

				if v, ok := protectedCookiesMapStrToI["add_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema.CookieManipulationOptionType_AddSecure{}
						secureInt.AddSecure = &ves_io_schema.Empty{}
						protectedCookies[i].Secure = secureInt
					}

				}

				if v, ok := protectedCookiesMapStrToI["ignore_secure"]; ok && !isIntfNil(v) && !secureTypeFound {

					secureTypeFound = true

					if v.(bool) {
						secureInt := &ves_io_schema.CookieManipulationOptionType_IgnoreSecure{}
						secureInt.IgnoreSecure = &ves_io_schema.Empty{}
						protectedCookies[i].Secure = secureInt
					}

				}

			}
		}

	}

	rateLimitChoiceTypeFound := false

	if v, ok := d.GetOk("api_rate_limit"); ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ApiRateLimit{}
		rateLimitChoiceInt.ApiRateLimit = &ves_io_schema_views_common_waf.APIRateLimit{}
		updateSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["api_endpoint_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					apiEndpointRules := make([]*ves_io_schema_views_common_waf.ApiEndpointRule, len(sl))
					rateLimitChoiceInt.ApiRateLimit.ApiEndpointRules = apiEndpointRules
					for i, set := range sl {
						if set != nil {
							apiEndpointRules[i] = &ves_io_schema_views_common_waf.ApiEndpointRule{}
							apiEndpointRulesMapStrToI := set.(map[string]interface{})

							if v, ok := apiEndpointRulesMapStrToI["api_endpoint_method"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								apiEndpointMethod := &ves_io_schema_policy.HttpMethodMatcherType{}
								apiEndpointRules[i].ApiEndpointMethod = apiEndpointMethod
								for _, set := range sl {
									if set != nil {
										apiEndpointMethodMapStrToI := set.(map[string]interface{})

										if w, ok := apiEndpointMethodMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
											apiEndpointMethod.InvertMatcher = w.(bool)
										}

										if v, ok := apiEndpointMethodMapStrToI["methods"]; ok && !isIntfNil(v) {

											methodsList := []ves_io_schema.HttpMethod{}
											for _, j := range v.([]interface{}) {
												if j == nil {
													return fmt.Errorf("please provide valid non-empty enum value of field methods")
												}
												methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
											}
											apiEndpointMethod.Methods = methodsList

										}

									}
								}

							}

							if w, ok := apiEndpointRulesMapStrToI["api_endpoint_path"]; ok && !isIntfNil(w) {
								apiEndpointRules[i].ApiEndpointPath = w.(string)
							}

							if v, ok := apiEndpointRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								apiEndpointRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									apiEndpointRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_SpecificDomain{}

								apiEndpointRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							rateLimiterChoiceTypeFound := false

							if v, ok := apiEndpointRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_InlineRateLimiter{}
								rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
								apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										countByChoiceTypeFound := false

										if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true
											countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
											countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
											rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true

											if v.(bool) {
												countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
												countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
												rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
											}

										}

										if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

										}

										if v, ok := cs["unit"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ApiEndpointRule_RefRateLimiter{}
								rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
								apiEndpointRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := apiEndpointRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								apiEndpointRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				ipAllowedListChoiceTypeFound := false

				if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_BypassRateLimitingRules{}
					ipAllowedListChoiceInt.BypassRateLimitingRules = &ves_io_schema_views_common_waf.BypassRateLimitingRules{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["bypass_rate_limiting_rules"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								bypassRateLimitingRules := make([]*ves_io_schema_views_common_waf.BypassRateLimitingRule, len(sl))
								ipAllowedListChoiceInt.BypassRateLimitingRules.BypassRateLimitingRules = bypassRateLimitingRules
								for i, set := range sl {
									if set != nil {
										bypassRateLimitingRules[i] = &ves_io_schema_views_common_waf.BypassRateLimitingRule{}
										bypassRateLimitingRulesMapStrToI := set.(map[string]interface{})

										if v, ok := bypassRateLimitingRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											clientMatcher := &ves_io_schema_policy.ClientMatcher{}
											bypassRateLimitingRules[i].ClientMatcher = clientMatcher
											for _, set := range sl {
												if set != nil {
													clientMatcherMapStrToI := set.(map[string]interface{})

													clientChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true

														if v.(bool) {
															clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
															clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
															clientMatcher.ClientChoice = clientChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
														clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field expressions")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	clientChoiceInt.ClientSelector.Expressions = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

														clientChoiceTypeFound = true
														clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
														clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
														clientMatcher.ClientChoice = clientChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

																	ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
																		}
																		ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
																	}
																	clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

																}

															}
														}

													}

													ipAsnChoiceTypeFound := false

													if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true

														if v.(bool) {
															ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
															ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
															clientMatcher.IpAsnChoice = ipAsnChoiceInt
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
														ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

																	ls := make([]uint32, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		ls[i] = uint32(v.(int))
																	}
																	ipAsnChoiceInt.AsnList.AsNumbers = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
														ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
																	for i, ps := range sl {

																		asMapToStrVal := ps.(map[string]interface{})
																		asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		asnSetsInt[i].Kind = "bgp_asn_set"

																		if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Name = v.(string)
																		}

																		if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			asnSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
														ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

																	ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

																}

																if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

																	sl := v.([]interface{})
																	prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
																	ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
																	for i, ps := range sl {

																		psMapToStrVal := ps.(map[string]interface{})
																		prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

																		prefixSetsInt[i].Kind = "ip_prefix_set"

																		if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Name = v.(string)
																		}

																		if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Namespace = v.(string)
																		}

																		if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Tenant = v.(string)
																		}

																		if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																			prefixSetsInt[i].Uid = v.(string)
																		}

																	}

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

														ipAsnChoiceTypeFound = true
														ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
														ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
														clientMatcher.IpAsnChoice = ipAsnChoiceInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

																	ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

																}

																if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

																}

																if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

																}

															}
														}

													}

													if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
														clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
														for _, set := range sl {
															if set != nil {
																tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

																if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

																	classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field classes")
																		}
																		classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
																	}
																	tlsFingerprintMatcher.Classes = classesList

																}

																if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintMatcher.ExactValues = ls
																}

																if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
																	ls := make([]string, len(w.([]interface{})))
																	for i, v := range w.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	tlsFingerprintMatcher.ExcludedValues = ls
																}

															}
														}

													}

												}
											}

										}

										destinationTypeTypeFound := false

										if v, ok := bypassRateLimitingRulesMapStrToI["any_url"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true

											if v.(bool) {
												destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyUrl{}
												destinationTypeInt.AnyUrl = &ves_io_schema.Empty{}
												bypassRateLimitingRules[i].DestinationType = destinationTypeInt
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["api_endpoint"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiEndpoint{}
											destinationTypeInt.ApiEndpoint = &ves_io_schema_views_common_waf.ApiEndpointDetails{}
											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["methods"]; ok && !isIntfNil(v) {

														methodsList := []ves_io_schema.HttpMethod{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field methods")
															}
															methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
														}
														destinationTypeInt.ApiEndpoint.Methods = methodsList

													}

													if v, ok := cs["path"]; ok && !isIntfNil(v) {

														destinationTypeInt.ApiEndpoint.Path = v.(string)

													}

												}
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["api_groups"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_ApiGroups{}
											destinationTypeInt.ApiGroups = &ves_io_schema_views_common_waf.APIGroups{}
											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["api_groups"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field api_groups")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														destinationTypeInt.ApiGroups.ApiGroups = ls

													}

												}
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["base_path"]; ok && !isIntfNil(v) && !destinationTypeTypeFound {

											destinationTypeTypeFound = true
											destinationTypeInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_BasePath{}

											bypassRateLimitingRules[i].DestinationType = destinationTypeInt

											destinationTypeInt.BasePath = v.(string)

										}

										domainChoiceTypeFound := false

										if v, ok := bypassRateLimitingRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true

											if v.(bool) {
												domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_AnyDomain{}
												domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
												bypassRateLimitingRules[i].DomainChoice = domainChoiceInt
											}

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

											domainChoiceTypeFound = true
											domainChoiceInt := &ves_io_schema_views_common_waf.BypassRateLimitingRule_SpecificDomain{}

											bypassRateLimitingRules[i].DomainChoice = domainChoiceInt

											domainChoiceInt.SpecificDomain = v.(string)

										}

										if v, ok := bypassRateLimitingRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											requestMatcher := &ves_io_schema_policy.RequestMatcher{}
											bypassRateLimitingRules[i].RequestMatcher = requestMatcher
											for _, set := range sl {
												if set != nil {
													requestMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
														requestMatcher.CookieMatchers = cookieMatchers
														for i, set := range sl {
															if set != nil {
																cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
																cookieMatchersMapStrToI := set.(map[string]interface{})

																if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		cookieMatchers[i].Match = matchInt
																	}

																}

																if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	cookieMatchers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
																	cookieMatchers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
														requestMatcher.Headers = headers
														for i, set := range sl {
															if set != nil {
																headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
																headersMapStrToI := set.(map[string]interface{})

																if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	headers[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		headers[i].Match = matchInt
																	}

																}

																if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	headers[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
																	headers[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
														requestMatcher.JwtClaims = jwtClaims
														for i, set := range sl {
															if set != nil {
																jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
																jwtClaimsMapStrToI := set.(map[string]interface{})

																if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	jwtClaims[i].InvertMatcher = w.(bool)
																}

																matchTypeFound := false

																if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		jwtClaims[i].Match = matchInt
																	}

																}

																if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		jwtClaims[i].Match = matchInt
																	}

																}

																if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	jwtClaims[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

																if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
																	jwtClaims[i].Name = w.(string)
																}

															}
														}

													}

													if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
														requestMatcher.QueryParams = queryParams
														for i, set := range sl {
															if set != nil {
																queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
																queryParamsMapStrToI := set.(map[string]interface{})

																if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
																	queryParams[i].InvertMatcher = w.(bool)
																}

																if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
																	queryParams[i].Key = w.(string)
																}

																matchTypeFound := false

																if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
																		matchInt.CheckNotPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true

																	if v.(bool) {
																		matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
																		matchInt.CheckPresent = &ves_io_schema.Empty{}
																		queryParams[i].Match = matchInt
																	}

																}

																if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

																	matchTypeFound = true
																	matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
																	matchInt.Item = &ves_io_schema_policy.MatcherType{}
																	queryParams[i].Match = matchInt

																	sl := v.([]interface{})
																	for _, set := range sl {
																		if set != nil {
																			cs := set.(map[string]interface{})

																			if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.ExactValues = ls

																			}

																			if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																				ls := make([]string, len(v.([]interface{})))
																				for i, v := range v.([]interface{}) {
																					if v == nil {
																						return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																					}
																					if str, ok := v.(string); ok {
																						ls[i] = str
																					}
																				}
																				matchInt.Item.RegexValues = ls

																			}

																			if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																				transformersList := []ves_io_schema_policy.Transformer{}
																				for _, j := range v.([]interface{}) {
																					if j == nil {
																						return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																					}
																					transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																				}
																				matchInt.Item.Transformers = transformersList

																			}

																		}
																	}

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

				if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_CustomIpAllowedList{}
					ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
								for i, ps := range sl {

									rlapMapToStrVal := ps.(map[string]interface{})
									rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Name = v.(string)
									}

									if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
									}

									if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_IpAllowedList{}
					ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
					rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

							}

							if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

							}

						}
					}

				}

				if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true

					if v.(bool) {
						ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.APIRateLimit_NoIpAllowedList{}
						ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
						rateLimitChoiceInt.ApiRateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
					}

				}

				if v, ok := cs["server_url_rules"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					serverUrlRules := make([]*ves_io_schema_views_common_waf.ServerUrlRule, len(sl))
					rateLimitChoiceInt.ApiRateLimit.ServerUrlRules = serverUrlRules
					for i, set := range sl {
						if set != nil {
							serverUrlRules[i] = &ves_io_schema_views_common_waf.ServerUrlRule{}
							serverUrlRulesMapStrToI := set.(map[string]interface{})

							if w, ok := serverUrlRulesMapStrToI["api_group"]; ok && !isIntfNil(w) {
								serverUrlRules[i].ApiGroup = w.(string)
							}

							if w, ok := serverUrlRulesMapStrToI["base_path"]; ok && !isIntfNil(w) {
								serverUrlRules[i].BasePath = w.(string)
							}

							if v, ok := serverUrlRulesMapStrToI["client_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								clientMatcher := &ves_io_schema_policy.ClientMatcher{}
								serverUrlRules[i].ClientMatcher = clientMatcher
								for _, set := range sl {
									if set != nil {
										clientMatcherMapStrToI := set.(map[string]interface{})

										clientChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_client"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true

											if v.(bool) {
												clientChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyClient{}
												clientChoiceInt.AnyClient = &ves_io_schema.Empty{}
												clientMatcher.ClientChoice = clientChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["client_selector"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_ClientSelector{}
											clientChoiceInt.ClientSelector = &ves_io_schema.LabelSelectorType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["expressions"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field expressions")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														clientChoiceInt.ClientSelector.Expressions = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_threat_category_list"]; ok && !isIntfNil(v) && !clientChoiceTypeFound {

											clientChoiceTypeFound = true
											clientChoiceInt := &ves_io_schema_policy.ClientMatcher_IpThreatCategoryList{}
											clientChoiceInt.IpThreatCategoryList = &ves_io_schema_policy.IPThreatCategoryListType{}
											clientMatcher.ClientChoice = clientChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["ip_threat_categories"]; ok && !isIntfNil(v) {

														ip_threat_categoriesList := []ves_io_schema_policy.IPThreatCategory{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field ip_threat_categories")
															}
															ip_threat_categoriesList = append(ip_threat_categoriesList, ves_io_schema_policy.IPThreatCategory(ves_io_schema_policy.IPThreatCategory_value[j.(string)]))
														}
														clientChoiceInt.IpThreatCategoryList.IpThreatCategories = ip_threat_categoriesList

													}

												}
											}

										}

										ipAsnChoiceTypeFound := false

										if v, ok := clientMatcherMapStrToI["any_ip"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true

											if v.(bool) {
												ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AnyIp{}
												ipAsnChoiceInt.AnyIp = &ves_io_schema.Empty{}
												clientMatcher.IpAsnChoice = ipAsnChoiceInt
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnList{}
											ipAsnChoiceInt.AsnList = &ves_io_schema_policy.AsnMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["as_numbers"]; ok && !isIntfNil(v) {

														ls := make([]uint32, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															ls[i] = uint32(v.(int))
														}
														ipAsnChoiceInt.AsnList.AsNumbers = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["asn_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_AsnMatcher{}
											ipAsnChoiceInt.AsnMatcher = &ves_io_schema_policy.AsnMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["asn_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														asnSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.AsnMatcher.AsnSets = asnSetsInt
														for i, ps := range sl {

															asMapToStrVal := ps.(map[string]interface{})
															asnSetsInt[i] = &ves_io_schema.ObjectRefType{}

															asnSetsInt[i].Kind = "bgp_asn_set"

															if v, ok := asMapToStrVal["name"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Name = v.(string)
															}

															if v, ok := asMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Namespace = v.(string)
															}

															if v, ok := asMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Tenant = v.(string)
															}

															if v, ok := asMapToStrVal["uid"]; ok && !isIntfNil(v) {
																asnSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_matcher"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpMatcher{}
											ipAsnChoiceInt.IpMatcher = &ves_io_schema_policy.IpMatcherType{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_matcher"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpMatcher.InvertMatcher = v.(bool)

													}

													if v, ok := cs["prefix_sets"]; ok && !isIntfNil(v) {

														sl := v.([]interface{})
														prefixSetsInt := make([]*ves_io_schema.ObjectRefType, len(sl))
														ipAsnChoiceInt.IpMatcher.PrefixSets = prefixSetsInt
														for i, ps := range sl {

															psMapToStrVal := ps.(map[string]interface{})
															prefixSetsInt[i] = &ves_io_schema.ObjectRefType{}

															prefixSetsInt[i].Kind = "ip_prefix_set"

															if v, ok := psMapToStrVal["name"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Name = v.(string)
															}

															if v, ok := psMapToStrVal["namespace"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Namespace = v.(string)
															}

															if v, ok := psMapToStrVal["tenant"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Tenant = v.(string)
															}

															if v, ok := psMapToStrVal["uid"]; ok && !isIntfNil(v) {
																prefixSetsInt[i].Uid = v.(string)
															}

														}

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["ip_prefix_list"]; ok && !isIntfNil(v) && !ipAsnChoiceTypeFound {

											ipAsnChoiceTypeFound = true
											ipAsnChoiceInt := &ves_io_schema_policy.ClientMatcher_IpPrefixList{}
											ipAsnChoiceInt.IpPrefixList = &ves_io_schema_policy.PrefixMatchList{}
											clientMatcher.IpAsnChoice = ipAsnChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

														ipAsnChoiceInt.IpPrefixList.InvertMatch = v.(bool)

													}

													if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ip_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.IpPrefixes = ls

													}

													if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

														ls := make([]string, len(v.([]interface{})))
														for i, v := range v.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														ipAsnChoiceInt.IpPrefixList.Ipv6Prefixes = ls

													}

												}
											}

										}

										if v, ok := clientMatcherMapStrToI["tls_fingerprint_matcher"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											tlsFingerprintMatcher := &ves_io_schema_policy.TlsFingerprintMatcherType{}
											clientMatcher.TlsFingerprintMatcher = tlsFingerprintMatcher
											for _, set := range sl {
												if set != nil {
													tlsFingerprintMatcherMapStrToI := set.(map[string]interface{})

													if v, ok := tlsFingerprintMatcherMapStrToI["classes"]; ok && !isIntfNil(v) {

														classesList := []ves_io_schema_policy.KnownTlsFingerprintClass{}
														for _, j := range v.([]interface{}) {
															if j == nil {
																return fmt.Errorf("please provide valid non-empty enum value of field classes")
															}
															classesList = append(classesList, ves_io_schema_policy.KnownTlsFingerprintClass(ves_io_schema_policy.KnownTlsFingerprintClass_value[j.(string)]))
														}
														tlsFingerprintMatcher.Classes = classesList

													}

													if w, ok := tlsFingerprintMatcherMapStrToI["exact_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field exact_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExactValues = ls
													}

													if w, ok := tlsFingerprintMatcherMapStrToI["excluded_values"]; ok && !isIntfNil(w) {
														ls := make([]string, len(w.([]interface{})))
														for i, v := range w.([]interface{}) {
															if v == nil {
																return fmt.Errorf("please provide valid non-empty string value of field excluded_values")
															}
															if str, ok := v.(string); ok {
																ls[i] = str
															}
														}
														tlsFingerprintMatcher.ExcludedValues = ls
													}

												}
											}

										}

									}
								}

							}

							domainChoiceTypeFound := false

							if v, ok := serverUrlRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true

								if v.(bool) {
									domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_AnyDomain{}
									domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
									serverUrlRules[i].DomainChoice = domainChoiceInt
								}

							}

							if v, ok := serverUrlRulesMapStrToI["specific_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

								domainChoiceTypeFound = true
								domainChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_SpecificDomain{}

								serverUrlRules[i].DomainChoice = domainChoiceInt

								domainChoiceInt.SpecificDomain = v.(string)

							}

							rateLimiterChoiceTypeFound := false

							if v, ok := serverUrlRulesMapStrToI["inline_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_InlineRateLimiter{}
								rateLimiterChoiceInt.InlineRateLimiter = &ves_io_schema_views_common_waf.InlineRateLimiter{}
								serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										countByChoiceTypeFound := false

										if v, ok := cs["ref_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true
											countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_RefUserId{}
											countByChoiceInt.RefUserId = &ves_io_schema_views.ObjectRefType{}
											rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Name = v.(string)

													}

													if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Namespace = v.(string)

													}

													if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

														countByChoiceInt.RefUserId.Tenant = v.(string)

													}

												}
											}

										}

										if v, ok := cs["use_http_lb_user_id"]; ok && !isIntfNil(v) && !countByChoiceTypeFound {

											countByChoiceTypeFound = true

											if v.(bool) {
												countByChoiceInt := &ves_io_schema_views_common_waf.InlineRateLimiter_UseHttpLbUserId{}
												countByChoiceInt.UseHttpLbUserId = &ves_io_schema.Empty{}
												rateLimiterChoiceInt.InlineRateLimiter.CountByChoice = countByChoiceInt
											}

										}

										if v, ok := cs["threshold"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Threshold = uint32(v.(int))

										}

										if v, ok := cs["unit"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.InlineRateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

										}

									}
								}

							}

							if v, ok := serverUrlRulesMapStrToI["ref_rate_limiter"]; ok && !isIntfNil(v) && !rateLimiterChoiceTypeFound {

								rateLimiterChoiceTypeFound = true
								rateLimiterChoiceInt := &ves_io_schema_views_common_waf.ServerUrlRule_RefRateLimiter{}
								rateLimiterChoiceInt.RefRateLimiter = &ves_io_schema_views.ObjectRefType{}
								serverUrlRules[i].RateLimiterChoice = rateLimiterChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										if v, ok := cs["name"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Name = v.(string)

										}

										if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Namespace = v.(string)

										}

										if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

											rateLimiterChoiceInt.RefRateLimiter.Tenant = v.(string)

										}

									}
								}

							}

							if v, ok := serverUrlRulesMapStrToI["request_matcher"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								requestMatcher := &ves_io_schema_policy.RequestMatcher{}
								serverUrlRules[i].RequestMatcher = requestMatcher
								for _, set := range sl {
									if set != nil {
										requestMatcherMapStrToI := set.(map[string]interface{})

										if v, ok := requestMatcherMapStrToI["cookie_matchers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											cookieMatchers := make([]*ves_io_schema_policy.CookieMatcherType, len(sl))
											requestMatcher.CookieMatchers = cookieMatchers
											for i, set := range sl {
												if set != nil {
													cookieMatchers[i] = &ves_io_schema_policy.CookieMatcherType{}
													cookieMatchersMapStrToI := set.(map[string]interface{})

													if w, ok := cookieMatchersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														cookieMatchers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := cookieMatchersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.CookieMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															cookieMatchers[i].Match = matchInt
														}

													}

													if v, ok := cookieMatchersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.CookieMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														cookieMatchers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := cookieMatchersMapStrToI["name"]; ok && !isIntfNil(w) {
														cookieMatchers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["headers"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											headers := make([]*ves_io_schema_policy.HeaderMatcherType, len(sl))
											requestMatcher.Headers = headers
											for i, set := range sl {
												if set != nil {
													headers[i] = &ves_io_schema_policy.HeaderMatcherType{}
													headersMapStrToI := set.(map[string]interface{})

													if w, ok := headersMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														headers[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := headersMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.HeaderMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															headers[i].Match = matchInt
														}

													}

													if v, ok := headersMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.HeaderMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														headers[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
														headers[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["jwt_claims"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											jwtClaims := make([]*ves_io_schema_policy.JWTClaimMatcherType, len(sl))
											requestMatcher.JwtClaims = jwtClaims
											for i, set := range sl {
												if set != nil {
													jwtClaims[i] = &ves_io_schema_policy.JWTClaimMatcherType{}
													jwtClaimsMapStrToI := set.(map[string]interface{})

													if w, ok := jwtClaimsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														jwtClaims[i].InvertMatcher = w.(bool)
													}

													matchTypeFound := false

													if v, ok := jwtClaimsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.JWTClaimMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															jwtClaims[i].Match = matchInt
														}

													}

													if v, ok := jwtClaimsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.JWTClaimMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														jwtClaims[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

													if w, ok := jwtClaimsMapStrToI["name"]; ok && !isIntfNil(w) {
														jwtClaims[i].Name = w.(string)
													}

												}
											}

										}

										if v, ok := requestMatcherMapStrToI["query_params"]; ok && !isIntfNil(v) {

											sl := v.([]interface{})
											queryParams := make([]*ves_io_schema_policy.QueryParameterMatcherType, len(sl))
											requestMatcher.QueryParams = queryParams
											for i, set := range sl {
												if set != nil {
													queryParams[i] = &ves_io_schema_policy.QueryParameterMatcherType{}
													queryParamsMapStrToI := set.(map[string]interface{})

													if w, ok := queryParamsMapStrToI["invert_matcher"]; ok && !isIntfNil(w) {
														queryParams[i].InvertMatcher = w.(bool)
													}

													if w, ok := queryParamsMapStrToI["key"]; ok && !isIntfNil(w) {
														queryParams[i].Key = w.(string)
													}

													matchTypeFound := false

													if v, ok := queryParamsMapStrToI["check_not_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckNotPresent{}
															matchInt.CheckNotPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["check_present"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true

														if v.(bool) {
															matchInt := &ves_io_schema_policy.QueryParameterMatcherType_CheckPresent{}
															matchInt.CheckPresent = &ves_io_schema.Empty{}
															queryParams[i].Match = matchInt
														}

													}

													if v, ok := queryParamsMapStrToI["item"]; ok && !isIntfNil(v) && !matchTypeFound {

														matchTypeFound = true
														matchInt := &ves_io_schema_policy.QueryParameterMatcherType_Item{}
														matchInt.Item = &ves_io_schema_policy.MatcherType{}
														queryParams[i].Match = matchInt

														sl := v.([]interface{})
														for _, set := range sl {
															if set != nil {
																cs := set.(map[string]interface{})

																if v, ok := cs["exact_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field exact_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.ExactValues = ls

																}

																if v, ok := cs["regex_values"]; ok && !isIntfNil(v) {

																	ls := make([]string, len(v.([]interface{})))
																	for i, v := range v.([]interface{}) {
																		if v == nil {
																			return fmt.Errorf("please provide valid non-empty string value of field regex_values")
																		}
																		if str, ok := v.(string); ok {
																			ls[i] = str
																		}
																	}
																	matchInt.Item.RegexValues = ls

																}

																if v, ok := cs["transformers"]; ok && !isIntfNil(v) {

																	transformersList := []ves_io_schema_policy.Transformer{}
																	for _, j := range v.([]interface{}) {
																		if j == nil {
																			return fmt.Errorf("please provide valid non-empty enum value of field transformers")
																		}
																		transformersList = append(transformersList, ves_io_schema_policy.Transformer(ves_io_schema_policy.Transformer_value[j.(string)]))
																	}
																	matchInt.Item.Transformers = transformersList

																}

															}
														}

													}

												}
											}

										}

									}
								}

							}

						}
					}

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_rate_limit"); ok && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true

		if v.(bool) {
			rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableRateLimit{}
			rateLimitChoiceInt.DisableRateLimit = &ves_io_schema.Empty{}
			updateSpec.RateLimitChoice = rateLimitChoiceInt
		}

	}

	if v, ok := d.GetOk("rate_limit"); ok && !isIntfNil(v) && !rateLimitChoiceTypeFound {

		rateLimitChoiceTypeFound = true
		rateLimitChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_RateLimit{}
		rateLimitChoiceInt.RateLimit = &ves_io_schema_views_common_waf.RateLimitConfigType{}
		updateSpec.RateLimitChoice = rateLimitChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				ipAllowedListChoiceTypeFound := false

				if v, ok := cs["custom_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_CustomIpAllowedList{}
					ipAllowedListChoiceInt.CustomIpAllowedList = &ves_io_schema_views_common_waf.CustomIpAllowedList{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["rate_limiter_allowed_prefixes"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								rateLimiterAllowedPrefixesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								ipAllowedListChoiceInt.CustomIpAllowedList.RateLimiterAllowedPrefixes = rateLimiterAllowedPrefixesInt
								for i, ps := range sl {

									rlapMapToStrVal := ps.(map[string]interface{})
									rateLimiterAllowedPrefixesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := rlapMapToStrVal["name"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Name = v.(string)
									}

									if v, ok := rlapMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Namespace = v.(string)
									}

									if v, ok := rlapMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										rateLimiterAllowedPrefixesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true
					ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_IpAllowedList{}
					ipAllowedListChoiceInt.IpAllowedList = &ves_io_schema_views.PrefixStringListType{}
					rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field ipv6_prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Ipv6Prefixes = ls

							}

							if v, ok := cs["prefixes"]; ok && !isIntfNil(v) {

								ls := make([]string, len(v.([]interface{})))
								for i, v := range v.([]interface{}) {
									if v == nil {
										return fmt.Errorf("please provide valid non-empty string value of field prefixes")
									}
									if str, ok := v.(string); ok {
										ls[i] = str
									}
								}
								ipAllowedListChoiceInt.IpAllowedList.Prefixes = ls

							}

						}
					}

				}

				if v, ok := cs["no_ip_allowed_list"]; ok && !isIntfNil(v) && !ipAllowedListChoiceTypeFound {

					ipAllowedListChoiceTypeFound = true

					if v.(bool) {
						ipAllowedListChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoIpAllowedList{}
						ipAllowedListChoiceInt.NoIpAllowedList = &ves_io_schema.Empty{}
						rateLimitChoiceInt.RateLimit.IpAllowedListChoice = ipAllowedListChoiceInt
					}

				}

				policyChoiceTypeFound := false

				if v, ok := cs["no_policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

					policyChoiceTypeFound = true

					if v.(bool) {
						policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_NoPolicies{}
						policyChoiceInt.NoPolicies = &ves_io_schema.Empty{}
						rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt
					}

				}

				if v, ok := cs["policies"]; ok && !isIntfNil(v) && !policyChoiceTypeFound {

					policyChoiceTypeFound = true
					policyChoiceInt := &ves_io_schema_views_common_waf.RateLimitConfigType_Policies{}
					policyChoiceInt.Policies = &ves_io_schema_views_rate_limiter_policy.PolicyList{}
					rateLimitChoiceInt.RateLimit.PolicyChoice = policyChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["policies"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
								policyChoiceInt.Policies.Policies = policiesInt
								for i, ps := range sl {

									pMapToStrVal := ps.(map[string]interface{})
									policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

									if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
										policiesInt[i].Name = v.(string)
									}

									if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
										policiesInt[i].Namespace = v.(string)
									}

									if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
										policiesInt[i].Tenant = v.(string)
									}

								}

							}

						}
					}

				}

				if v, ok := cs["rate_limiter"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					rateLimiter := &ves_io_schema_rate_limiter.RateLimitValue{}
					rateLimitChoiceInt.RateLimit.RateLimiter = rateLimiter
					for _, set := range sl {
						if set != nil {
							rateLimiterMapStrToI := set.(map[string]interface{})

							actionChoiceTypeFound := false

							if v, ok := rateLimiterMapStrToI["action_block"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true
								actionChoiceInt := &ves_io_schema_rate_limiter.RateLimitValue_ActionBlock{}
								actionChoiceInt.ActionBlock = &ves_io_schema_rate_limiter.RateLimitBlockAction{}
								rateLimiter.ActionChoice = actionChoiceInt

								sl := v.([]interface{})
								for _, set := range sl {
									if set != nil {
										cs := set.(map[string]interface{})

										blockDurationChoiceTypeFound := false

										if v, ok := cs["hours"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Hours{}
											blockDurationChoiceInt.Hours = &ves_io_schema_rate_limiter.InputHours{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Hours.Duration = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := cs["minutes"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Minutes{}
											blockDurationChoiceInt.Minutes = &ves_io_schema_rate_limiter.InputMinutes{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Minutes.Duration = uint32(v.(int))

													}

												}
											}

										}

										if v, ok := cs["seconds"]; ok && !isIntfNil(v) && !blockDurationChoiceTypeFound {

											blockDurationChoiceTypeFound = true
											blockDurationChoiceInt := &ves_io_schema_rate_limiter.RateLimitBlockAction_Seconds{}
											blockDurationChoiceInt.Seconds = &ves_io_schema_rate_limiter.InputSeconds{}
											actionChoiceInt.ActionBlock.BlockDurationChoice = blockDurationChoiceInt

											sl := v.([]interface{})
											for _, set := range sl {
												if set != nil {
													cs := set.(map[string]interface{})

													if v, ok := cs["duration"]; ok && !isIntfNil(v) {

														blockDurationChoiceInt.Seconds.Duration = uint32(v.(int))

													}

												}
											}

										}

									}
								}

							}

							if v, ok := rateLimiterMapStrToI["disabled"]; ok && !isIntfNil(v) && !actionChoiceTypeFound {

								actionChoiceTypeFound = true

								if v.(bool) {
									actionChoiceInt := &ves_io_schema_rate_limiter.RateLimitValue_Disabled{}
									actionChoiceInt.Disabled = &ves_io_schema.Empty{}
									rateLimiter.ActionChoice = actionChoiceInt
								}

							}

							if w, ok := rateLimiterMapStrToI["burst_multiplier"]; ok && !isIntfNil(w) {
								rateLimiter.BurstMultiplier = uint32(w.(int))
							}

							if w, ok := rateLimiterMapStrToI["period_multiplier"]; ok && !isIntfNil(w) {
								rateLimiter.PeriodMultiplier = uint32(w.(int))
							}

							if w, ok := rateLimiterMapStrToI["total_number"]; ok && !isIntfNil(w) {
								rateLimiter.TotalNumber = uint32(w.(int))
							}

							if v, ok := rateLimiterMapStrToI["unit"]; ok && !isIntfNil(v) {

								rateLimiter.Unit = ves_io_schema_rate_limiter.RateLimitPeriodUnit(ves_io_schema_rate_limiter.RateLimitPeriodUnit_value[v.(string)])

							}

						}
					}

				}

			}
		}

	}

	servicePolicyChoiceTypeFound := false

	if v, ok := d.GetOk("active_service_policies"); ok && !isIntfNil(v) && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true
		servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ActiveServicePolicies{}
		servicePolicyChoiceInt.ActiveServicePolicies = &ves_io_schema_views_common_waf.ServicePolicyList{}
		updateSpec.ServicePolicyChoice = servicePolicyChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["policies"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					policiesInt := make([]*ves_io_schema_views.ObjectRefType, len(sl))
					servicePolicyChoiceInt.ActiveServicePolicies.Policies = policiesInt
					for i, ps := range sl {

						pMapToStrVal := ps.(map[string]interface{})
						policiesInt[i] = &ves_io_schema_views.ObjectRefType{}

						if v, ok := pMapToStrVal["name"]; ok && !isIntfNil(v) {
							policiesInt[i].Name = v.(string)
						}

						if v, ok := pMapToStrVal["namespace"]; ok && !isIntfNil(v) {
							policiesInt[i].Namespace = v.(string)
						}

						if v, ok := pMapToStrVal["tenant"]; ok && !isIntfNil(v) {
							policiesInt[i].Tenant = v.(string)
						}

					}

				}

			}
		}

	}

	if v, ok := d.GetOk("no_service_policies"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_NoServicePolicies{}
			servicePolicyChoiceInt.NoServicePolicies = &ves_io_schema.Empty{}
			updateSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	if v, ok := d.GetOk("service_policies_from_namespace"); ok && !servicePolicyChoiceTypeFound {

		servicePolicyChoiceTypeFound = true

		if v.(bool) {
			servicePolicyChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{}
			servicePolicyChoiceInt.ServicePoliciesFromNamespace = &ves_io_schema.Empty{}
			updateSpec.ServicePolicyChoice = servicePolicyChoiceInt
		}

	}

	slowDdosMitigationChoiceTypeFound := false

	if v, ok := d.GetOk("slow_ddos_mitigation"); ok && !isIntfNil(v) && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true
		slowDdosMitigationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_SlowDdosMitigation{}
		slowDdosMitigationChoiceInt.SlowDdosMitigation = &ves_io_schema_virtual_host.SlowDDoSMitigation{}
		updateSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["request_headers_timeout"]; ok && !isIntfNil(v) {

					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestHeadersTimeout = uint32(v.(int))

				}

				requestTimeoutChoiceTypeFound := false

				if v, ok := cs["disable_request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true

					if v.(bool) {
						requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_DisableRequestTimeout{}
						requestTimeoutChoiceInt.DisableRequestTimeout = &ves_io_schema.Empty{}
						slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt
					}

				}

				if v, ok := cs["request_timeout"]; ok && !isIntfNil(v) && !requestTimeoutChoiceTypeFound {

					requestTimeoutChoiceTypeFound = true
					requestTimeoutChoiceInt := &ves_io_schema_virtual_host.SlowDDoSMitigation_RequestTimeout{}

					slowDdosMitigationChoiceInt.SlowDdosMitigation.RequestTimeoutChoice = requestTimeoutChoiceInt

					requestTimeoutChoiceInt.RequestTimeout = uint32(v.(int))

				}

			}
		}

	}

	if v, ok := d.GetOk("system_default_timeouts"); ok && !slowDdosMitigationChoiceTypeFound {

		slowDdosMitigationChoiceTypeFound = true

		if v.(bool) {
			slowDdosMitigationChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_SystemDefaultTimeouts{}
			slowDdosMitigationChoiceInt.SystemDefaultTimeouts = &ves_io_schema.Empty{}
			updateSpec.SlowDdosMitigationChoice = slowDdosMitigationChoiceInt
		}

	}

	if v, ok := d.GetOk("trusted_clients"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		trustedClients := make([]*ves_io_schema_views_common_waf.SimpleClientSrcRule, len(sl))
		updateSpec.TrustedClients = trustedClients
		for i, set := range sl {
			if set != nil {
				trustedClients[i] = &ves_io_schema_views_common_waf.SimpleClientSrcRule{}
				trustedClientsMapStrToI := set.(map[string]interface{})

				if v, ok := trustedClientsMapStrToI["actions"]; ok && !isIntfNil(v) {

					actionsList := []ves_io_schema_views_common_waf.ClientSrcRuleAction{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field actions")
						}
						actionsList = append(actionsList, ves_io_schema_views_common_waf.ClientSrcRuleAction(ves_io_schema_views_common_waf.ClientSrcRuleAction_value[j.(string)]))
					}
					trustedClients[i].Actions = actionsList

				}

				clientSourceChoiceTypeFound := false

				if v, ok := trustedClientsMapStrToI["as_number"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_AsNumber{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.AsNumber = uint32(v.(int))

				}

				if v, ok := trustedClientsMapStrToI["http_header"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_HttpHeader{}
					clientSourceChoiceInt.HttpHeader = &ves_io_schema_views_common_waf.HttpHeaderMatcherList{}
					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["headers"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								headers := make([]*ves_io_schema.HeaderMatcherType, len(sl))
								clientSourceChoiceInt.HttpHeader.Headers = headers
								for i, set := range sl {
									if set != nil {
										headers[i] = &ves_io_schema.HeaderMatcherType{}
										headersMapStrToI := set.(map[string]interface{})

										if w, ok := headersMapStrToI["invert_match"]; ok && !isIntfNil(w) {
											headers[i].InvertMatch = w.(bool)
										}

										if w, ok := headersMapStrToI["name"]; ok && !isIntfNil(w) {
											headers[i].Name = w.(string)
										}

										valueMatchTypeFound := false

										if v, ok := headersMapStrToI["exact"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Exact{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Exact = v.(string)

										}

										if v, ok := headersMapStrToI["presence"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Presence{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Presence = v.(bool)

										}

										if v, ok := headersMapStrToI["regex"]; ok && !isIntfNil(v) && !valueMatchTypeFound {

											valueMatchTypeFound = true
											valueMatchInt := &ves_io_schema.HeaderMatcherType_Regex{}

											headers[i].ValueMatch = valueMatchInt

											valueMatchInt.Regex = v.(string)

										}

									}
								}

							}

						}
					}

				}

				if v, ok := trustedClientsMapStrToI["ip_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_IpPrefix{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.IpPrefix = v.(string)

				}

				if v, ok := trustedClientsMapStrToI["ipv6_prefix"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_Ipv6Prefix{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.Ipv6Prefix = v.(string)

				}

				if v, ok := trustedClientsMapStrToI["user_identifier"]; ok && !isIntfNil(v) && !clientSourceChoiceTypeFound {

					clientSourceChoiceTypeFound = true
					clientSourceChoiceInt := &ves_io_schema_views_common_waf.SimpleClientSrcRule_UserIdentifier{}

					trustedClients[i].ClientSourceChoice = clientSourceChoiceInt

					clientSourceChoiceInt.UserIdentifier = v.(string)

				}

				if w, ok := trustedClientsMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					trustedClients[i].ExpirationTimestamp = ts
				}

				if v, ok := trustedClientsMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					trustedClients[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

			}
		}

	}

	userIdChoiceTypeFound := false

	if v, ok := d.GetOk("user_id_client_ip"); ok && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true

		if v.(bool) {
			userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_UserIdClientIp{}
			userIdChoiceInt.UserIdClientIp = &ves_io_schema.Empty{}
			updateSpec.UserIdChoice = userIdChoiceInt
		}

	}

	if v, ok := d.GetOk("user_identification"); ok && !isIntfNil(v) && !userIdChoiceTypeFound {

		userIdChoiceTypeFound = true
		userIdChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_UserIdentification{}
		userIdChoiceInt.UserIdentification = &ves_io_schema_views.ObjectRefType{}
		updateSpec.UserIdChoice = userIdChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Name = v.(string)

				}

				if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Namespace = v.(string)

				}

				if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

					userIdChoiceInt.UserIdentification.Tenant = v.(string)

				}

			}
		}

	}

	wafChoiceTypeFound := false

	if v, ok := d.GetOk("app_firewall"); ok && !isIntfNil(v) && !wafChoiceTypeFound {

		wafChoiceTypeFound = true
		wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_AppFirewall{}
		wafChoiceInt.AppFirewall = &ves_io_schema_views.ObjectRefType{}
		updateSpec.WafChoice = wafChoiceInt

		sl := v.([]interface{})
		for _, set := range sl {
			if set != nil {
				cs := set.(map[string]interface{})

				if v, ok := cs["name"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Name = v.(string)

				}

				if v, ok := cs["namespace"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Namespace = v.(string)

				}

				if v, ok := cs["tenant"]; ok && !isIntfNil(v) {

					wafChoiceInt.AppFirewall.Tenant = v.(string)

				}

			}
		}

	}

	if v, ok := d.GetOk("disable_waf"); ok && !wafChoiceTypeFound {

		wafChoiceTypeFound = true

		if v.(bool) {
			wafChoiceInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_DisableWaf{}
			wafChoiceInt.DisableWaf = &ves_io_schema.Empty{}
			updateSpec.WafChoice = wafChoiceInt
		}

	}

	if v, ok := d.GetOk("waf_exclusion_rules"); ok && !isIntfNil(v) {

		sl := v.([]interface{})
		wafExclusionRules := make([]*ves_io_schema_policy.SimpleWafExclusionRule, len(sl))
		updateSpec.WafExclusionRules = wafExclusionRules
		for i, set := range sl {
			if set != nil {
				wafExclusionRules[i] = &ves_io_schema_policy.SimpleWafExclusionRule{}
				wafExclusionRulesMapStrToI := set.(map[string]interface{})

				domainChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_domain"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true

					if v.(bool) {
						domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyDomain{}
						domainChoiceInt.AnyDomain = &ves_io_schema.Empty{}
						wafExclusionRules[i].DomainChoice = domainChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["exact_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_ExactValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.ExactValue = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["suffix_value"]; ok && !isIntfNil(v) && !domainChoiceTypeFound {

					domainChoiceTypeFound = true
					domainChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_SuffixValue{}

					wafExclusionRules[i].DomainChoice = domainChoiceInt

					domainChoiceInt.SuffixValue = v.(string)

				}

				if w, ok := wafExclusionRulesMapStrToI["expiration_timestamp"]; ok && !isIntfNil(w) {
					ts, err := parseTime(w.(string))
					if err != nil {
						return fmt.Errorf("error creating ExpirationTimestamp, timestamp format is wrong: %s", err)
					}
					wafExclusionRules[i].ExpirationTimestamp = ts
				}

				if v, ok := wafExclusionRulesMapStrToI["metadata"]; ok && !isIntfNil(v) {

					sl := v.([]interface{})
					metadata := &ves_io_schema.MessageMetaType{}
					wafExclusionRules[i].Metadata = metadata
					for _, set := range sl {
						if set != nil {
							metadataMapStrToI := set.(map[string]interface{})

							if w, ok := metadataMapStrToI["description"]; ok && !isIntfNil(w) {
								metadata.Description = w.(string)
							}

							if w, ok := metadataMapStrToI["name"]; ok && !isIntfNil(w) {
								metadata.Name = w.(string)
							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["methods"]; ok && !isIntfNil(v) {

					methodsList := []ves_io_schema.HttpMethod{}
					for _, j := range v.([]interface{}) {
						if j == nil {
							return fmt.Errorf("please provide valid non-empty enum value of field methods")
						}
						methodsList = append(methodsList, ves_io_schema.HttpMethod(ves_io_schema.HttpMethod_value[j.(string)]))
					}
					wafExclusionRules[i].Methods = methodsList

				}

				pathChoiceTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["any_path"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true

					if v.(bool) {
						pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_AnyPath{}
						pathChoiceInt.AnyPath = &ves_io_schema.Empty{}
						wafExclusionRules[i].PathChoice = pathChoiceInt
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["path_prefix"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathPrefix{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathPrefix = v.(string)

				}

				if v, ok := wafExclusionRulesMapStrToI["path_regex"]; ok && !isIntfNil(v) && !pathChoiceTypeFound {

					pathChoiceTypeFound = true
					pathChoiceInt := &ves_io_schema_policy.SimpleWafExclusionRule_PathRegex{}

					wafExclusionRules[i].PathChoice = pathChoiceInt

					pathChoiceInt.PathRegex = v.(string)

				}

				wafAdvancedConfigurationTypeFound := false

				if v, ok := wafExclusionRulesMapStrToI["app_firewall_detection_control"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true
					wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_AppFirewallDetectionControl{}
					wafAdvancedConfigurationInt.AppFirewallDetectionControl = &ves_io_schema_policy.AppFirewallDetectionControl{}
					wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt

					sl := v.([]interface{})
					for _, set := range sl {
						if set != nil {
							cs := set.(map[string]interface{})

							if v, ok := cs["exclude_attack_type_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeAttackTypeContexts := make([]*ves_io_schema_policy.AppFirewallAttackTypeContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeAttackTypeContexts = excludeAttackTypeContexts
								for i, set := range sl {
									if set != nil {
										excludeAttackTypeContexts[i] = &ves_io_schema_policy.AppFirewallAttackTypeContext{}
										excludeAttackTypeContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeAttackTypeContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeAttackTypeContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeAttackTypeContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeAttackTypeContextsMapStrToI["exclude_attack_type"]; ok && !isIntfNil(v) {

											excludeAttackTypeContexts[i].ExcludeAttackType = ves_io_schema_app_firewall.AttackType(ves_io_schema_app_firewall.AttackType_value[v.(string)])

										}

									}
								}

							}

							if v, ok := cs["exclude_bot_name_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeBotNameContexts := make([]*ves_io_schema_policy.BotNameContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeBotNameContexts = excludeBotNameContexts
								for i, set := range sl {
									if set != nil {
										excludeBotNameContexts[i] = &ves_io_schema_policy.BotNameContext{}
										excludeBotNameContextsMapStrToI := set.(map[string]interface{})

										if w, ok := excludeBotNameContextsMapStrToI["bot_name"]; ok && !isIntfNil(w) {
											excludeBotNameContexts[i].BotName = w.(string)
										}

									}
								}

							}

							if v, ok := cs["exclude_signature_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeSignatureContexts := make([]*ves_io_schema_policy.AppFirewallSignatureContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeSignatureContexts = excludeSignatureContexts
								for i, set := range sl {
									if set != nil {
										excludeSignatureContexts[i] = &ves_io_schema_policy.AppFirewallSignatureContext{}
										excludeSignatureContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeSignatureContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeSignatureContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeSignatureContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].ContextName = w.(string)
										}

										if w, ok := excludeSignatureContextsMapStrToI["signature_id"]; ok && !isIntfNil(w) {
											excludeSignatureContexts[i].SignatureId = uint32(w.(int))
										}

									}
								}

							}

							if v, ok := cs["exclude_violation_contexts"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								excludeViolationContexts := make([]*ves_io_schema_policy.AppFirewallViolationContext, len(sl))
								wafAdvancedConfigurationInt.AppFirewallDetectionControl.ExcludeViolationContexts = excludeViolationContexts
								for i, set := range sl {
									if set != nil {
										excludeViolationContexts[i] = &ves_io_schema_policy.AppFirewallViolationContext{}
										excludeViolationContextsMapStrToI := set.(map[string]interface{})

										if v, ok := excludeViolationContextsMapStrToI["context"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].Context = ves_io_schema_policy.DetectionContext(ves_io_schema_policy.DetectionContext_value[v.(string)])

										}

										if w, ok := excludeViolationContextsMapStrToI["context_name"]; ok && !isIntfNil(w) {
											excludeViolationContexts[i].ContextName = w.(string)
										}

										if v, ok := excludeViolationContextsMapStrToI["exclude_violation"]; ok && !isIntfNil(v) {

											excludeViolationContexts[i].ExcludeViolation = ves_io_schema_app_firewall.AppFirewallViolationType(ves_io_schema_app_firewall.AppFirewallViolationType_value[v.(string)])

										}

									}
								}

							}

						}
					}

				}

				if v, ok := wafExclusionRulesMapStrToI["waf_skip_processing"]; ok && !isIntfNil(v) && !wafAdvancedConfigurationTypeFound {

					wafAdvancedConfigurationTypeFound = true

					if v.(bool) {
						wafAdvancedConfigurationInt := &ves_io_schema_policy.SimpleWafExclusionRule_WafSkipProcessing{}
						wafAdvancedConfigurationInt.WafSkipProcessing = &ves_io_schema.Empty{}
						wafExclusionRules[i].WafAdvancedConfiguration = wafAdvancedConfigurationInt
					}

				}

			}
		}

	}

	log.Printf("[DEBUG] Updating Volterra CdnLoadbalancer obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating CdnLoadbalancer: %s", err)
	}

	return resourceVolterraCdnLoadbalancerRead(d, meta)
}

func resourceVolterraCdnLoadbalancerDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CdnLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CdnLoadbalancer before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra CdnLoadbalancer obj with name %+v in namespace %+v", name, namespace)
	opts := []vesapi.CallOpt{
		vesapi.WithFailIfReferred(),
	}
	return client.DeleteObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name, opts...)
}
